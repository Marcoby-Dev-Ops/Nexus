// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Company {
  id              String   @id @default(uuid())
  hubspotId       String?  @unique
  name            String
  domain          String   @unique
  industry        String
  size            String?
  description     String?
  logo            String?
  website         String?
  social_profiles String[]
  founded         String?
  headquarters    String?
  specialties     String[]
  employee_count  Int?
  followers_count Int?
  microsoft_365   Json?
  created_at      DateTime @default(now())
  updated_at      DateTime @updatedAt

  users        UserProfile[]
  deals        Deal[]
  contacts     Contact[]
  integrations Integration[]
  modelUsages  ModelUsage[]
  varLeads     VARLead[]

  responses          AssessmentResponse[]
  category_scores    AssessmentCategoryScore[]
  assessment_summary AssessmentSummary?
}

model UserProfile {
  id           String   @id @default(uuid())
  user_id      String   @unique
  company_id   String
  role         String?
  industry     String?
  company_size String?
  created_at   DateTime @default(now())
  updated_at   DateTime @updatedAt

  company Company @relation(fields: [company_id], references: [id])
  user    User    @relation(fields: [user_id], references: [id])

  accounts     Account[]
  sessions     Session[]
  integrations Integration[]
  contacts     Contact[]
  deals        Deal[]
  varLeads     VARLead[]
  modelUsages  ModelUsage[]
  responses    AssessmentResponse[]
}

model User {
  id         String       @id @default(uuid())
  email      String       @unique
  name       String?
  profile    UserProfile?
  created_at DateTime     @default(now())
  updated_at DateTime     @updatedAt

  accounts     Account[]
  sessions     Session[]
  integrations Integration[]
  contacts     Contact[]
  deals        Deal[]
  varLeads     VARLead[]
  modelUsages  ModelUsage[]
  responses    AssessmentResponse[]
  Pin          Pin[]
  Thought      Thought[]
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user          User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  UserProfile   UserProfile? @relation(fields: [userProfileId], references: [id])
  userProfileId String?

  @@unique([provider, providerAccountId])
}

model Session {
  id            String       @id @default(cuid())
  sessionToken  String       @unique
  userId        String
  expires       DateTime
  user          User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  UserProfile   UserProfile? @relation(fields: [userProfileId], references: [id])
  userProfileId String?
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Integration {
  id          String    @id @default(uuid())
  user_id     String
  company_id  String
  type        String
  status      String
  config      Json
  last_synced DateTime?
  created_at  DateTime  @default(now())
  updated_at  DateTime  @updatedAt

  user          User         @relation(fields: [user_id], references: [id], onDelete: Cascade)
  company       Company      @relation(fields: [company_id], references: [id], onDelete: Cascade)
  UserProfile   UserProfile? @relation(fields: [userProfileId], references: [id])
  userProfileId String?
}

model Contact {
  id         String   @id @default(uuid())
  hubspotId  String?  @unique
  user_id    String
  company_id String
  name       String
  email      String?
  phone      String?
  title      String?
  department String?
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  user          User         @relation(fields: [user_id], references: [id], onDelete: Cascade)
  company       Company      @relation(fields: [company_id], references: [id], onDelete: Cascade)
  UserProfile   UserProfile? @relation(fields: [userProfileId], references: [id])
  userProfileId String?
}

model Deal {
  id                  String    @id @default(uuid())
  hubspotId           String?   @unique
  user_id             String
  company_id          String
  name                String
  value               Float
  stage               String
  probability         Float?
  expected_close_date DateTime?
  created_at          DateTime  @default(now())
  updated_at          DateTime  @updatedAt

  user          User         @relation(fields: [user_id], references: [id], onDelete: Cascade)
  company       Company      @relation(fields: [company_id], references: [id], onDelete: Cascade)
  UserProfile   UserProfile? @relation(fields: [userProfileId], references: [id])
  userProfileId String?
}

model VARLead {
  id           String   @id @default(uuid())
  user_id      String
  company_id   String
  contact_name String
  email        String
  phone        String?
  status       String
  notes        String?
  created_at   DateTime @default(now())
  updated_at   DateTime @updatedAt

  user          User         @relation(fields: [user_id], references: [id], onDelete: Cascade)
  company       Company      @relation(fields: [company_id], references: [id], onDelete: Cascade)
  UserProfile   UserProfile? @relation(fields: [userProfileId], references: [id])
  userProfileId String?
}

model ModelUsage {
  id          String   @id @default(uuid())
  user_id     String
  company_id  String
  model_name  String
  tokens_used Int
  cost        Float
  success     Boolean
  latency     Int
  created_at  DateTime @default(now())

  user          User         @relation(fields: [user_id], references: [id], onDelete: Cascade)
  company       Company      @relation(fields: [company_id], references: [id], onDelete: Cascade)
  model         AIModel      @relation(fields: [model_name], references: [name])
  UserProfile   UserProfile? @relation(fields: [userProfileId], references: [id])
  userProfileId String?
}

model ModelPerformance {
  model_name     String
  month          String
  successRate    Float
  averageLatency Float
  averageCost    Float
  lastUsed       DateTime
  errorCount     Int

  model AIModel @relation(fields: [model_name], references: [name])

  @@id([model_name, month])
  @@index([model_name])
  @@index([month])
}

model AIModel {
  name        String  @id
  description String?
  provider    String?
  input_cost  Float?
  output_cost Float?

  usages       ModelUsage[]
  performances ModelPerformance[]
}

// V1 Assessment Framework

model AssessmentCategory {
  id                      String                    @id // e.g., 'SA'
  name                    String                    @unique
  goal                    String
  weight                  Int
  questions               AssessmentQuestion[]
  AssessmentCategoryScore AssessmentCategoryScore[]
}

model AssessmentQuestion {
  id                  String                @id @default(cuid())
  category_id         String
  prompt              String
  question_type       String
  options             Json?
  integration_check   String?
  marcovy_angle       String?
  action_type         String?
  target_field        String?
  created_at          DateTime              @default(now())
  updated_at          DateTime              @updatedAt

  category            AssessmentCategory    @relation(fields: [category_id], references: [id])
  offer_id            String?
  offer               Offer?                @relation(fields: [offer_id], references: [id])
  responses           AssessmentResponse[]
}

model AssessmentResponse {
  id          String   @id @default(uuid())
  company_id  String
  question_id String
  user_id     String
  value       String
  score       Int
  created_at  DateTime @default(now())
  updated_at  DateTime @updatedAt

  company       Company            @relation(fields: [company_id], references: [id], onDelete: Cascade)
  question      AssessmentQuestion @relation(fields: [question_id], references: [id], onDelete: Cascade)
  user          User               @relation(fields: [user_id], references: [id], onDelete: Cascade)
  UserProfile   UserProfile?       @relation(fields: [userProfileId], references: [id])
  userProfileId String?

  @@unique([company_id, question_id])
}

model AssessmentCategoryScore {
  id            String   @id @default(uuid())
  company_id    String
  category_id   String
  score         Int
  calculated_at DateTime @updatedAt

  company  Company            @relation(fields: [company_id], references: [id], onDelete: Cascade)
  category AssessmentCategory @relation(fields: [category_id], references: [id], onDelete: Cascade)

  @@unique([company_id, category_id])
}

model AssessmentSummary {
  id                      String   @id @default(uuid())
  company_id              String   @unique
  overall_score           Float
  category_scores_summary Json
  last_updated            DateTime @updatedAt
  company                 Company  @relation(fields: [company_id], references: [id])
}

model Offer {
  id          String    @id @default(cuid())
  solution    String
  division    String
  created_at  DateTime  @default(now())
  updated_at  DateTime  @updatedAt
  
  questions   AssessmentQuestion[]
}

model Pin {
  id         String   @id @default(uuid())
  userId     String
  entityId   String // e.g., document ID, chat ID
  entityType String // e.g., 'document', 'chat'
  createdAt  DateTime @default(now())

  user User @relation(fields: [userId], references: [id])
}

// ===============================================
// THINK Module
// ===============================================

model Thought {
  id        String   @id @default(uuid())
  userId    String
  content   String
  status    String   @default("new") // e.g., new, processing, completed, archived
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user    User            @relation(fields: [userId], references: [id])
  sources ThoughtSource[]
}

model ThoughtSource {
  id        String   @id @default(uuid())
  thoughtId String
  source    String // e.g., "Slack", "Email", "Manual Entry"
  metadata  Json?
  createdAt DateTime @default(now())

  thought Thought @relation(fields: [thoughtId], references: [id])
}

// ===============================================
// SEE Module
// ===============================================

model Metric {
  id          String   @id @default(uuid())
  name        String   @unique
  description String?
  source      String? // e.g., "Stripe", "Google Analytics", "Manual"
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  dataPoints MetricDataPoint[]
}

model MetricDataPoint {
  id        String   @id @default(uuid())
  metricId  String
  value     Float
  timestamp DateTime
  metadata  Json?
  createdAt DateTime @default(now())

  metric Metric @relation(fields: [metricId], references: [id])
}

// ===============================================
// ACT Module
// ===============================================

model Workflow {
  id          String   @id @default(uuid())
  name        String
  description String?
  trigger     String // e.g., "manual", "schedule", "webhook"
  config      Json // n8n workflow definition or similar
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  runs WorkflowRun[]
}

model WorkflowRun {
  id         String    @id @default(uuid())
  workflowId String
  status     String // e.g., "running", "completed", "failed"
  output     Json?
  startedAt  DateTime  @default(now())
  endedAt    DateTime?

  workflow Workflow @relation(fields: [workflowId], references: [id])
}

model Recent {
  id String @id @default(uuid())
  // ... existing code ...
}
