name: Nexus Development Workflow

on:
  push:
    branches: [ main, develop, 'feature/*', 'release/*', 'hotfix/*' ]
  pull_request:
    branches: [ main, develop ]

env:
  NODE_VERSION: '18'
  PNPM_VERSION: '8'

jobs:
  # 🔍 Code Quality & Linting
  code-quality:
    name: Code Quality Check
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Setup pnpm
        uses: pnpm/action-setup@v2
        with:
          version: ${{ env.PNPM_VERSION }}

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: TypeScript type check
        run: pnpm tsc --noEmit

      - name: ESLint check
        run: pnpm lint

      - name: Prettier format check
        run: pnpm format:check

      - name: Check for TODO/FIXME comments
        run: |
          echo "🔍 Checking for development comments..."
          if grep -r "TODO\|FIXME\|HACK" src/ --exclude-dir=node_modules; then
            echo "⚠️ Development comments found - consider creating issues"
          else
            echo "✅ No development comments found"
          fi

  # 🧪 Testing Suite
  test-suite:
    name: Test Suite
    runs-on: ubuntu-latest
    needs: code-quality
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Setup pnpm
        uses: pnpm/action-setup@v2
        with:
          version: ${{ env.PNPM_VERSION }}

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Run unit tests
        run: pnpm test:unit --coverage

      - name: Run integration tests
        run: pnpm test:integration

      - name: Run RAG system tests
        run: pnpm test:rag

  # 🏗️ Build Verification
  build-verification:
    name: Build Verification
    runs-on: ubuntu-latest
    needs: code-quality
    strategy:
      matrix:
        environment: [development, staging, production]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Setup pnpm
        uses: pnpm/action-setup@v2
        with:
          version: ${{ env.PNPM_VERSION }}

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Build for ${{ matrix.environment }}
        run: pnpm build:${{ matrix.environment }}
        env:
          NODE_ENV: ${{ matrix.environment }}

      - name: Check bundle size
        run: |
          echo "📦 Bundle size analysis for ${{ matrix.environment }}:"
          npx bundlesize

  # 📚 Documentation Check
  documentation:
    name: Documentation Check
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Setup pnpm
        uses: pnpm/action-setup@v2
        with:
          version: ${{ env.PNPM_VERSION }}

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Build Storybook
        run: pnpm build-storybook

      - name: Check documentation coverage
        run: |
          echo "📖 Checking documentation coverage..."
          # Check if all major components have stories
          find src/components -name "*.tsx" -not -path "*/stories/*" | while read file; do
            component=$(basename "$file" .tsx)
            if [ ! -f "src/stories/${component}.stories.tsx" ] && [ ! -f "src/components/$(dirname ${file#src/components/})/${component}.stories.tsx" ]; then
              echo "⚠️ Missing story for: $file"
            fi
          done

  # 📊 Performance Analysis
  performance-analysis:
    name: Performance Analysis
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Setup pnpm
        uses: pnpm/action-setup@v2
        with:
          version: ${{ env.PNPM_VERSION }}

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Build for analysis
        run: pnpm build

      - name: Lighthouse CI
        uses: treosh/lighthouse-ci-action@v10
        with:
          configPath: './lighthouserc.json'
          uploadArtifacts: true
          temporaryPublicStorage: true

  # 📈 Progress Tracking
  progress-tracking:
    name: Progress Tracking
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    needs: [test-suite, build-verification, documentation]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Calculate project metrics
        run: |
          echo "📊 Calculating project metrics..."
          
          # Count components
          COMPONENTS=$(find src/components -name "*.tsx" | wc -l)
          echo "Components: $COMPONENTS"
          
          # Count tests
          TESTS=$(find src -name "*.test.tsx" -o -name "*.test.ts" | wc -l)
          echo "Tests: $TESTS"
          
          # Count stories
          STORIES=$(find src -name "*.stories.tsx" | wc -l)
          echo "Stories: $STORIES"
          
          # Calculate coverage
          COVERAGE=$(pnpm test:coverage --silent | grep "All files" | awk '{print $4}')
          echo "Coverage: $COVERAGE"
          
          # Update project metrics
          echo "COMPONENTS=$COMPONENTS" >> $GITHUB_ENV
          echo "TESTS=$TESTS" >> $GITHUB_ENV
          echo "STORIES=$STORIES" >> $GITHUB_ENV
          echo "COVERAGE=$COVERAGE" >> $GITHUB_ENV