[{"filePath":"/home/vonj/Github/Nexus/.eslintrc.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/vonj/Github/Nexus/__tests__/ai/summaryColumn.test.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/vonj/Github/Nexus/__tests__/auth/AuthContext.test.tsx","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":55,"column":10,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":55,"endColumn":13,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1631,1634],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1631,1634],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React from 'react';\nimport { render, screen, waitFor, act } from '@testing-library/react';\nimport { AuthProvider, useAuth } from '@/contexts/AuthContext';\nimport { supabase } from '@/lib/core/supabase';\n\n// Mock Supabase\njest.mock('@/lib/supabase', () => ({\n  supabase: {\n    auth: {\n      getSession: jest.fn(),\n      onAuthStateChange: jest.fn(),\n      signInWithPassword: jest.fn(),\n      signUp: jest.fn(),\n      signOut: jest.fn(),\n      resetPasswordForEmail: jest.fn(),\n    },\n    from: jest.fn(),\n  },\n}));\n\nconst mockSupabase = supabase as jest.Mocked<typeof supabase>;\n\n// Test component that uses auth\nconst TestComponent = () => {\n  const { user, loading, error, initialized } = useAuth();\n  \n  return (\n    <div>\n      <div data-testid=\"loading\">{loading ? 'loading' : 'not-loading'}</div>\n      <div data-testid=\"initialized\">{initialized ? 'initialized' : 'not-initialized'}</div>\n      <div data-testid=\"user\">{user ? user.email : 'no-user'}</div>\n      <div data-testid=\"error\">{error ? error.message : 'no-error'}</div>\n    </div>\n  );\n};\n\ndescribe('AuthContext', () => {\n  beforeEach(() => {\n    jest.clearAllMocks();\n    \n    // Mock successful session\n    mockSupabase.auth.getSession.mockResolvedValue({\n      data: { session: null },\n      error: null,\n    });\n    \n    mockSupabase.auth.onAuthStateChange.mockReturnValue({\n      data: { subscription: { unsubscribe: jest.fn() } },\n    });\n    \n    mockSupabase.from.mockReturnValue({\n      select: jest.fn().mockReturnThis(),\n      eq: jest.fn().mockReturnThis(),\n      maybeSingle: jest.fn().mockResolvedValue({ data: null, error: null }),\n    } as any);\n  });\n\n  it('should initialize with loading state', async () => {\n    render(\n      <AuthProvider>\n        <TestComponent />\n      </AuthProvider>\n    );\n\n    // Should start loading\n    expect(screen.getByTestId('loading')).toHaveTextContent('loading');\n    expect(screen.getByTestId('initialized')).toHaveTextContent('not-initialized');\n    \n    // Wait for initialization\n    await waitFor(() => {\n      expect(screen.getByTestId('loading')).toHaveTextContent('not-loading');\n      expect(screen.getByTestId('initialized')).toHaveTextContent('initialized');\n    });\n  });\n\n  it('should handle auth session correctly', async () => {\n    const mockSession = {\n      user: {\n        id: 'test-user-id',\n        email: 'test@example.com',\n        created_at: '2023-01-01T00:00:00Z',\n        user_metadata: { full_name: 'Test User' },\n      },\n    };\n\n    mockSupabase.auth.getSession.mockResolvedValue({\n      data: { session: mockSession },\n      error: null,\n    });\n\n    render(\n      <AuthProvider>\n        <TestComponent />\n      </AuthProvider>\n    );\n\n    await waitFor(() => {\n      expect(screen.getByTestId('user')).toHaveTextContent('test@example.com');\n      expect(screen.getByTestId('initialized')).toHaveTextContent('initialized');\n    });\n  });\n\n  it('should handle session errors gracefully', async () => {\n    const error = new Error('Session error');\n    mockSupabase.auth.getSession.mockRejectedValue(error);\n\n    render(\n      <AuthProvider>\n        <TestComponent />\n      </AuthProvider>\n    );\n\n    await waitFor(() => {\n      expect(screen.getByTestId('error')).toHaveTextContent('Session error');\n      expect(screen.getByTestId('initialized')).toHaveTextContent('initialized');\n      expect(screen.getByTestId('loading')).toHaveTextContent('not-loading');\n    });\n  });\n\n  it('should cleanup on unmount', async () => {\n    const unsubscribeMock = jest.fn();\n    mockSupabase.auth.onAuthStateChange.mockReturnValue({\n      data: { subscription: { unsubscribe: unsubscribeMock } },\n    });\n\n    const { unmount } = render(\n      <AuthProvider>\n        <TestComponent />\n      </AuthProvider>\n    );\n\n    // Wait for initialization\n    await waitFor(() => {\n      expect(screen.getByTestId('initialized')).toHaveTextContent('initialized');\n    });\n\n    // Unmount component\n    unmount();\n\n    // Should call unsubscribe\n    expect(unsubscribeMock).toHaveBeenCalled();\n  });\n\n  it('should handle timeout properly', async () => {\n    // Mock a slow response\n    mockSupabase.auth.getSession.mockImplementation(\n      () => new Promise((resolve) => {\n        setTimeout(() => resolve({ data: { session: null }, error: null }), 15000);\n      })\n    );\n\n    // Reduce timeout for testing\n    jest.useFakeTimers();\n\n    render(\n      <AuthProvider>\n        <TestComponent />\n      </AuthProvider>\n    );\n\n    // Fast-forward time to trigger timeout\n    act(() => {\n      jest.advanceTimersByTime(11000);\n    });\n\n    await waitFor(() => {\n      expect(screen.getByTestId('error')).toHaveTextContent('Authentication timeout');\n      expect(screen.getByTestId('initialized')).toHaveTextContent('initialized');\n      expect(screen.getByTestId('loading')).toHaveTextContent('not-loading');\n    });\n\n    jest.useRealTimers();\n  });\n\n  it('should prevent multiple simultaneous auth changes', async () => {\n    let resolveCount = 0;\n    mockSupabase.auth.getSession.mockImplementation(() => {\n      resolveCount++;\n      return Promise.resolve({ data: { session: null }, error: null });\n    });\n\n    const { rerender } = render(\n      <AuthProvider>\n        <TestComponent />\n      </AuthProvider>\n    );\n\n    // Try to trigger multiple auth changes quickly\n    rerender(\n      <AuthProvider>\n        <TestComponent />\n      </AuthProvider>\n    );\n\n    await waitFor(() => {\n      expect(screen.getByTestId('initialized')).toHaveTextContent('initialized');\n    });\n\n    // Should only call getSession once despite multiple rerenders\n    expect(resolveCount).toBe(1);\n  });\n}); ","usedDeprecatedRules":[]},{"filePath":"/home/vonj/Github/Nexus/__tests__/components/BusinessHealthScore.test.tsx","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":62,"column":50,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":62,"endColumn":53,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1915,1918],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1915,1918],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":64,"column":10,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":64,"endColumn":13,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1951,1954],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1951,1954],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":78,"column":50,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":78,"endColumn":53,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2370,2373],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2370,2373],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":80,"column":10,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":80,"endColumn":13,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2406,2409],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2406,2409],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":101,"column":37,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":101,"endColumn":40,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3078,3081],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3078,3081],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":103,"column":10,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":103,"endColumn":13,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3114,3117],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3114,3117],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":120,"column":50,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":120,"endColumn":53,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3583,3586],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3583,3586],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":122,"column":10,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":122,"endColumn":13,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3619,3622],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3619,3622],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":144,"column":50,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":144,"endColumn":53,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[4345,4348],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[4345,4348],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":146,"column":10,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":146,"endColumn":13,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[4381,4384],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[4381,4384],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":163,"column":50,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":163,"endColumn":53,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[4846,4849],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[4846,4849],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":165,"column":10,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":165,"endColumn":13,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[4882,4885],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[4882,4885],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":192,"column":50,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":192,"endColumn":53,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[5749,5752],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[5749,5752],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":194,"column":10,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":194,"endColumn":13,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[5785,5788],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[5785,5788],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":213,"column":50,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":213,"endColumn":53,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[6423,6426],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[6423,6426],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":215,"column":10,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":215,"endColumn":13,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[6459,6462],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[6459,6462],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":236,"column":50,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":236,"endColumn":53,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[7047,7050],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[7047,7050],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":238,"column":10,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":238,"endColumn":13,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[7083,7086],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[7083,7086],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":269,"column":50,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":269,"endColumn":53,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[8023,8026],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[8023,8026],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":271,"column":10,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":271,"endColumn":13,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[8059,8062],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[8059,8062],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":294,"column":50,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":294,"endColumn":53,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[8662,8665],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[8662,8665],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":296,"column":10,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":296,"endColumn":13,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[8698,8701],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[8698,8701],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":319,"column":50,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":319,"endColumn":53,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[9292,9295],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[9292,9295],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":321,"column":10,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":321,"endColumn":13,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[9328,9331],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[9328,9331],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"no-restricted-syntax","severity":1,"message":"Use design tokens instead of hardcoded text colors (e.g., text-foreground, text-muted-foreground)","line":333,"column":40,"nodeType":"Literal","messageId":"restrictedSyntax","endLine":333,"endColumn":54},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":339,"column":50,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":339,"endColumn":53,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[9824,9827],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[9824,9827],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":341,"column":10,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":341,"endColumn":13,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[9860,9863],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[9860,9863],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":27,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React from 'react';\nimport { render, screen, waitFor, fireEvent } from '@testing-library/react';\nimport { BrowserRouter } from 'react-router-dom';\nimport { BusinessHealthScore } from '@/components/dashboard/BusinessHealthScore';\nimport { useAuth } from '@/contexts/AuthContext';\nimport { businessHealthService } from '@/lib/services/businessHealthService';\nimport { useToast } from '@/components/ui/Toast';\n\n// Mock dependencies\njest.mock('@/contexts/AuthContext');\njest.mock('@/lib/services/businessHealthService');\njest.mock('@/components/ui/Toast');\n\nconst mockUseAuth = useAuth as jest.MockedFunction<typeof useAuth>;\nconst mockBusinessHealthService = businessHealthService as jest.Mocked<typeof businessHealthService>;\nconst mockUseToast = useToast as jest.MockedFunction<typeof useToast>;\n\nconst mockShowToast = jest.fn();\n\n// Mock navigate\nconst mockNavigate = jest.fn();\njest.mock('react-router-dom', () => ({\n  ...jest.requireActual('react-router-dom'),\n  useNavigate: () => mockNavigate,\n}));\n\n// Test wrapper with router\nconst TestWrapper: React.FC<{ children: React.ReactNode }> = ({ children }) => (\n  <BrowserRouter>{children}</BrowserRouter>\n);\n\ndescribe('BusinessHealthScore Component', () => {\n  beforeEach(() => {\n    jest.clearAllMocks();\n    mockUseToast.mockReturnValue({ showToast: mockShowToast });\n  });\n\n  const mockHealthData = {\n    kpiValues: {\n      mrr_arr: 35000,\n      new_leads: 45,\n      conversion_rate: 15,\n      profit_margin: 18,\n      cash_runway: 9,\n    },\n    categoryScores: {\n      sales: 75,\n      finance: 82,\n      support: 68,\n      marketing: 71,\n      operations: 79,\n      maturity: 65,\n    },\n    overallScore: 73,\n    lastUpdated: '2024-01-15T10:00:00Z',\n    completionPercentage: 85,\n    missingKPIs: ['nps', 'csat'],\n  };\n\n  it('renders loading state initially', () => {\n    mockUseAuth.mockReturnValue({\n      user: { company_id: 'test-company-id' } as any,\n      loading: false,\n    } as any);\n\n    render(\n      <TestWrapper>\n        <BusinessHealthScore />\n      </TestWrapper>\n    );\n\n    expect(screen.getByText('Loading your business health assessment...')).toBeInTheDocument();\n    expect(screen.getByRole('progressbar')).toBeInTheDocument();\n  });\n\n  it('displays business health score with real data', async () => {\n    mockUseAuth.mockReturnValue({\n      user: { company_id: 'test-company-id' } as any,\n      loading: false,\n    } as any);\n\n    mockBusinessHealthService.fetchBusinessHealthData.mockResolvedValue(mockHealthData);\n\n    render(\n      <TestWrapper>\n        <BusinessHealthScore />\n      </TestWrapper>\n    );\n\n    await waitFor(() => {\n      expect(screen.getByText('73')).toBeInTheDocument();\n      expect(screen.getByText('73/100')).toBeInTheDocument();\n    });\n\n    expect(screen.getByText('Business Health')).toBeInTheDocument();\n    expect(screen.getByText('Overall assessment of your business key performance indicators')).toBeInTheDocument();\n  });\n\n  it('falls back to mock data when no company_id', async () => {\n    mockUseAuth.mockReturnValue({\n      user: { company_id: null } as any,\n      loading: false,\n    } as any);\n\n    render(\n      <TestWrapper>\n        <BusinessHealthScore />\n      </TestWrapper>\n    );\n\n    await waitFor(() => {\n      expect(screen.getByText(/\\d+/)).toBeInTheDocument(); // Some score should be displayed\n    });\n\n    expect(mockBusinessHealthService.fetchBusinessHealthData).not.toHaveBeenCalled();\n  });\n\n  it('displays category scores and progress bars', async () => {\n    mockUseAuth.mockReturnValue({\n      user: { company_id: 'test-company-id' } as any,\n      loading: false,\n    } as any);\n\n    mockBusinessHealthService.fetchBusinessHealthData.mockResolvedValue(mockHealthData);\n\n    render(\n      <TestWrapper>\n        <BusinessHealthScore />\n      </TestWrapper>\n    );\n\n    await waitFor(() => {\n      expect(screen.getByText('Finance')).toBeInTheDocument();\n      expect(screen.getByText('82%')).toBeInTheDocument();\n    });\n\n    // Check that progress bars are rendered\n    const progressBars = screen.getAllByRole('progressbar');\n    expect(progressBars.length).toBeGreaterThan(1); // Loading + category progress bars\n  });\n\n  it('shows \"Show All Categories\" button when there are more than 3 categories', async () => {\n    mockUseAuth.mockReturnValue({\n      user: { company_id: 'test-company-id' } as any,\n      loading: false,\n    } as any);\n\n    mockBusinessHealthService.fetchBusinessHealthData.mockResolvedValue(mockHealthData);\n\n    render(\n      <TestWrapper>\n        <BusinessHealthScore />\n      </TestWrapper>\n    );\n\n    await waitFor(() => {\n      expect(screen.getByText('Show All Categories')).toBeInTheDocument();\n    });\n  });\n\n  it('expands to show all categories when button is clicked', async () => {\n    mockUseAuth.mockReturnValue({\n      user: { company_id: 'test-company-id' } as any,\n      loading: false,\n    } as any);\n\n    mockBusinessHealthService.fetchBusinessHealthData.mockResolvedValue(mockHealthData);\n\n    render(\n      <TestWrapper>\n        <BusinessHealthScore />\n      </TestWrapper>\n    );\n\n    await waitFor(() => {\n      expect(screen.getByText('Show All Categories')).toBeInTheDocument();\n    });\n\n    fireEvent.click(screen.getByText('Show All Categories'));\n\n    await waitFor(() => {\n      expect(screen.getByText('Show Less')).toBeInTheDocument();\n      expect(screen.getByText('Sales')).toBeInTheDocument();\n      expect(screen.getByText('Marketing')).toBeInTheDocument();\n      expect(screen.getByText('Operations')).toBeInTheDocument();\n      expect(screen.getByText('Maturity')).toBeInTheDocument();\n    });\n  });\n\n  it('displays recent improvements section', async () => {\n    mockUseAuth.mockReturnValue({\n      user: { company_id: 'test-company-id' } as any,\n      loading: false,\n    } as any);\n\n    mockBusinessHealthService.fetchBusinessHealthData.mockResolvedValue(mockHealthData);\n\n    render(\n      <TestWrapper>\n        <BusinessHealthScore />\n      </TestWrapper>\n    );\n\n    await waitFor(() => {\n      expect(screen.getByText('Recent Improvements')).toBeInTheDocument();\n      expect(screen.getByText('Maturity score increased by 15%')).toBeInTheDocument();\n      expect(screen.getByText('Finance health improved to 78%')).toBeInTheDocument();\n    });\n  });\n\n  it('navigates to detailed analysis when button is clicked', async () => {\n    mockUseAuth.mockReturnValue({\n      user: { company_id: 'test-company-id' } as any,\n      loading: false,\n    } as any);\n\n    mockBusinessHealthService.fetchBusinessHealthData.mockResolvedValue(mockHealthData);\n\n    render(\n      <TestWrapper>\n        <BusinessHealthScore />\n      </TestWrapper>\n    );\n\n    await waitFor(() => {\n      expect(screen.getByText('View Detailed Analysis')).toBeInTheDocument();\n    });\n\n    fireEvent.click(screen.getByText('View Detailed Analysis'));\n\n    expect(mockNavigate).toHaveBeenCalledWith('/analytics/business-health');\n  });\n\n  it('handles API errors gracefully', async () => {\n    mockUseAuth.mockReturnValue({\n      user: { company_id: 'test-company-id' } as any,\n      loading: false,\n    } as any);\n\n    const mockError = new Error('Failed to fetch business health data');\n    mockBusinessHealthService.fetchBusinessHealthData.mockRejectedValue(mockError);\n\n    render(\n      <TestWrapper>\n        <BusinessHealthScore />\n      </TestWrapper>\n    );\n\n    await waitFor(() => {\n      expect(screen.getByText('There was a problem loading your business health data.')).toBeInTheDocument();\n      expect(screen.getByText('Try Again')).toBeInTheDocument();\n    });\n\n    expect(mockShowToast).toHaveBeenCalledWith({\n      title: 'Error',\n      description: 'Failed to load business health score',\n      type: 'error',\n    });\n  });\n\n  it('applies correct color classes based on score', async () => {\n    const highScoreData = {\n      ...mockHealthData,\n      overallScore: 85,\n      categoryScores: { ...mockHealthData.categoryScores, sales: 90 },\n    };\n\n    mockUseAuth.mockReturnValue({\n      user: { company_id: 'test-company-id' } as any,\n      loading: false,\n    } as any);\n\n    mockBusinessHealthService.fetchBusinessHealthData.mockResolvedValue(highScoreData);\n\n    render(\n      <TestWrapper>\n        <BusinessHealthScore />\n      </TestWrapper>\n    );\n\n    await waitFor(() => {\n      const scoreElement = screen.getByText('85');\n      expect(scoreElement).toHaveClass('text-emerald-500'); // High score color\n    });\n  });\n\n  it('shows medium score color for scores between 60-79', async () => {\n    const mediumScoreData = {\n      ...mockHealthData,\n      overallScore: 65,\n    };\n\n    mockUseAuth.mockReturnValue({\n      user: { company_id: 'test-company-id' } as any,\n      loading: false,\n    } as any);\n\n    mockBusinessHealthService.fetchBusinessHealthData.mockResolvedValue(mediumScoreData);\n\n    render(\n      <TestWrapper>\n        <BusinessHealthScore />\n      </TestWrapper>\n    );\n\n    await waitFor(() => {\n      const scoreElement = screen.getByText('65');\n      expect(scoreElement).toHaveClass('text-amber-500'); // Medium score color\n    });\n  });\n\n  it('shows low score color for scores below 60', async () => {\n    const lowScoreData = {\n      ...mockHealthData,\n      overallScore: 45,\n    };\n\n    mockUseAuth.mockReturnValue({\n      user: { company_id: 'test-company-id' } as any,\n      loading: false,\n    } as any);\n\n    mockBusinessHealthService.fetchBusinessHealthData.mockResolvedValue(lowScoreData);\n\n    render(\n      <TestWrapper>\n        <BusinessHealthScore />\n      </TestWrapper>\n    );\n\n    await waitFor(() => {\n      const scoreElement = screen.getByText('45');\n      expect(scoreElement).toHaveClass('text-red-500'); // Low score color\n    });\n  });\n\n  it('formats last updated date correctly', async () => {\n    mockUseAuth.mockReturnValue({\n      user: { company_id: 'test-company-id' } as any,\n      loading: false,\n    } as any);\n\n    mockBusinessHealthService.fetchBusinessHealthData.mockResolvedValue(mockHealthData);\n\n    render(\n      <TestWrapper>\n        <BusinessHealthScore />\n      </TestWrapper>\n    );\n\n    await waitFor(() => {\n      expect(screen.getByText('Last updated')).toBeInTheDocument();\n      // Date formatting may vary by locale, so just check that some date is displayed\n      expect(screen.getByText(/\\d{1,2}\\/\\d{1,2}\\/\\d{4}|\\w+ \\d{1,2}, \\d{4}/)).toBeInTheDocument();\n    });\n  });\n}); ","usedDeprecatedRules":[]},{"filePath":"/home/vonj/Github/Nexus/__tests__/components/ProgressiveIntelligence.test.tsx","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":18,"column":28,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":18,"endColumn":31,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[486,489],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[486,489],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React from 'react';\nimport { render, screen, fireEvent, waitFor } from '@testing-library/react';\n\n// Mock dependencies\njest.mock('../../src/lib/hooks/useToast', () => ({\n  useToast: () => ({\n    toast: jest.fn(),\n  }),\n}));\n\n// Mock the ProgressiveIntelligence component props interface\ninterface MockAction {\n  id: string;\n  type: 'api_call' | 'automation' | 'notification' | 'data_sync';\n  title: string;\n  description: string;\n  confidence: number;\n  metadata: Record<string, any>;\n}\n\n// Create a simple mock component for testing\nconst MockProgressiveIntelligence = ({ actions }: { actions: MockAction[] }) => {\n  const [actionStates, setActionStates] = React.useState<Record<string, string>>({});\n  \n  const executeAction = async (action: MockAction) => {\n    setActionStates(prev => ({ ...prev, [action.id]: 'Executing...' }));\n    \n    try {\n      if (action.type === 'api_call') {\n        await fetch(action.metadata.endpoint, {\n          method: action.metadata.method,\n          headers: { 'Content-Type': 'application/json' },\n          body: JSON.stringify(action.metadata.payload),\n        });\n      } else if (action.type === 'automation') {\n        await fetch('/api/automations', {\n          method: 'POST',\n          headers: { 'Content-Type': 'application/json' },\n          body: JSON.stringify({\n            workflowId: action.metadata.workflowId,\n            trigger: action.metadata.trigger\n          }),\n        });\n      }\n      setActionStates(prev => ({ ...prev, [action.id]: 'Completed' }));\n    } catch {\n      setActionStates(prev => ({ ...prev, [action.id]: 'Failed' }));\n    }\n  };\n\n  if (actions.length === 0) {\n    return <div>No intelligent actions available at this time.</div>;\n  }\n\n  return (\n    <div>\n      {actions.map(action => (\n        <div key={action.id}>\n          <h3>{action.title}</h3>\n          <p>{action.description}</p>\n          <span>{Math.round(action.confidence * 100)}% confidence</span>\n          <button onClick={() => executeAction(action)}>Execute</button>\n          <span>{actionStates[action.id] ? `✅ ${actionStates[action.id]}` : ''}</span>\n          {actionStates[action.id] === 'Failed' && <div data-testid=\"error-message\">Action failed</div>}\n        </div>\n      ))}\n    </div>\n  );\n};\n\n// Mock the actual component\njest.mock('../../src/components/ai/ProgressiveIntelligence', () => ({\n  ProgressiveIntelligence: MockProgressiveIntelligence,\n}));\n\nglobal.fetch = jest.fn();\nconst mockFetch = fetch as jest.MockedFunction<typeof fetch>;\n\ndescribe('ProgressiveIntelligence', () => {\n  beforeEach(() => {\n    mockFetch.mockClear();\n  });\n\n  const mockActions = [\n    {\n      id: 'action-1',\n      type: 'api_call' as const,\n      title: 'Test API Call',\n      description: 'Execute test API call',\n      confidence: 0.9,\n      metadata: {\n        endpoint: '/api/test',\n        method: 'POST',\n        payload: { test: true }\n      }\n    },\n    {\n      id: 'action-2', \n      type: 'automation' as const,\n      title: 'Create Automation',\n      description: 'Set up test automation',\n      confidence: 0.8,\n      metadata: {\n        workflowId: 'workflow-123',\n        trigger: 'manual'\n      }\n    }\n  ];\n\n  it('should render suggested actions', () => {\n    render(<MockProgressiveIntelligence actions={mockActions} />);\n    \n    expect(screen.getByText('Test API Call')).toBeDefined();\n    expect(screen.getByText('Create Automation')).toBeDefined();\n    expect(screen.getByText('90% confidence')).toBeDefined();\n    expect(screen.getByText('80% confidence')).toBeDefined();\n  });\n\n  it('should execute API call action successfully', async () => {\n    mockFetch.mockResolvedValueOnce({\n      ok: true,\n      json: async () => ({ success: true, result: 'API call completed' }),\n    } as Response);\n\n    render(<ProgressiveIntelligence actions={mockActions} />);\n    \n    const executeButton = screen.getAllByText('Execute')[0];\n    fireEvent.click(executeButton);\n\n    await waitFor(() => {\n      expect(mockFetch).toHaveBeenCalledWith('/api/test', {\n        method: 'POST',\n        headers: { 'Content-Type': 'application/json' },\n        body: JSON.stringify({ test: true }),\n      });\n    });\n\n    expect(screen.getByText('✅ Completed')).toBeInTheDocument();\n  });\n\n  it('should handle automation action execution', async () => {\n    mockFetch.mockResolvedValueOnce({\n      ok: true,\n      json: async () => ({ success: true, automationId: 'auto-456' }),\n    } as Response);\n\n    render(<ProgressiveIntelligence actions={mockActions} />);\n    \n    const executeButtons = screen.getAllByText('Execute');\n    fireEvent.click(executeButtons[1]); // Second action (automation)\n\n    await waitFor(() => {\n      expect(mockFetch).toHaveBeenCalledWith('/api/automations', {\n        method: 'POST',\n        headers: { 'Content-Type': 'application/json' },\n        body: JSON.stringify({\n          workflowId: 'workflow-123',\n          trigger: 'manual'\n        }),\n      });\n    });\n  });\n\n  it('should handle execution errors gracefully', async () => {\n    mockFetch.mockRejectedValueOnce(new Error('Network error'));\n\n    render(<ProgressiveIntelligence actions={mockActions} />);\n    \n    const executeButton = screen.getAllByText('Execute')[0];\n    fireEvent.click(executeButton);\n\n    await waitFor(() => {\n      expect(screen.getByText('❌ Failed')).toBeInTheDocument();\n    });\n  });\n\n  it('should show loading state during execution', async () => {\n    mockFetch.mockImplementationOnce(() => \n      new Promise(resolve => setTimeout(() => resolve({\n        ok: true,\n        json: async () => ({ success: true }),\n      } as Response), 100))\n    );\n\n    render(<ProgressiveIntelligence actions={mockActions} />);\n    \n    const executeButton = screen.getAllByText('Execute')[0];\n    fireEvent.click(executeButton);\n\n    expect(screen.getByText('⏳ Executing...')).toBeInTheDocument();\n  });\n\n  it('should handle empty actions array', () => {\n    render(<ProgressiveIntelligence actions={[]} />);\n    \n    expect(screen.getByText('No intelligent actions available at this time.')).toBeInTheDocument();\n  });\n}); ","usedDeprecatedRules":[]},{"filePath":"/home/vonj/Github/Nexus/__tests__/components/chat/SlashCommandMenu.test.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/vonj/Github/Nexus/__tests__/core/centralizedAppsOrchestrator.test.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":9,"column":21,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":9,"endColumn":24,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[323,326],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[323,326],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":21,"column":30,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":21,"endColumn":33,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[682,685],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[682,685],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":22,"column":30,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":22,"endColumn":33,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[757,760],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[757,760],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":23,"column":30,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":23,"endColumn":33,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[832,835],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[832,835],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":24,"column":30,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":24,"endColumn":33,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[903,906],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[903,906],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":29,"column":42,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":29,"endColumn":45,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1105,1108],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1105,1108],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":38,"column":38,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":38,"endColumn":41,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1505,1508],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1505,1508],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":53,"column":33,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":53,"endColumn":36,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2121,2124],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2121,2124],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":54,"column":33,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":54,"endColumn":36,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2199,2202],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2199,2202],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":59,"column":45,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":59,"endColumn":48,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2428,2431],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2428,2431],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":73,"column":32,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":73,"endColumn":35,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3073,3076],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3073,3076],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":94,"column":77,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":94,"endColumn":80,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3967,3970],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3967,3970],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":97,"column":38,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":97,"endColumn":41,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[4105,4108],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[4105,4108],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":119,"column":32,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":119,"endColumn":35,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[4847,4850],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[4847,4850],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":14,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { centralizedAppsOrchestrator } from '../../src/lib/centralizedAppsOrchestrator';\n\n// Mock dependencies\njest.mock('../../src/lib/n8nService');\njest.mock('../../src/lib/agentRegistry');\njest.mock('../../src/lib/chatContext');\n\ndescribe('CentralizedAppsOrchestrator - Core Business Logic', () => {\n  let orchestrator: any;\n\n  beforeEach(() => {\n    // Use the orchestrator instance for each test\n    orchestrator = centralizedAppsOrchestrator;\n  });\n\n  describe('App Management', () => {\n    it('should initialize core business applications', () => {\n      const apps = orchestrator.getConnectedApps();\n      \n      // Verify core apps are present\n      expect(apps.some((app: any) => app.id === 'salesforce')).toBe(true);\n      expect(apps.some((app: any) => app.id === 'quickbooks')).toBe(true);\n      expect(apps.some((app: any) => app.id === 'stripe')).toBe(true);\n      expect(apps.some((app: any) => app.id === 'microsoft365')).toBe(true);\n    });\n\n    it('should track app status correctly', () => {\n      const apps = orchestrator.getConnectedApps();\n      const salesforce = apps.find((app: any) => app.id === 'salesforce');\n      \n      expect(salesforce).toBeDefined();\n      expect(['connected', 'disconnected', 'configuring', 'error']).toContain(salesforce.status);\n      expect(salesforce.integrationLevel).toMatch(/^(basic|advanced|deep)$/);\n    });\n\n    it('should provide app metrics', () => {\n      const apps = orchestrator.getConnectedApps();\n      const stripe = apps.find((app: any) => app.id === 'stripe');\n      \n      expect(stripe.metrics).toBeDefined();\n      expect(typeof stripe.metrics.dailyAPIRequests).toBe('number');\n      expect(typeof stripe.metrics.successRate).toBe('number');\n      expect(stripe.metrics.successRate).toBeGreaterThanOrEqual(0);\n      expect(stripe.metrics.successRate).toBeLessThanOrEqual(100);\n    });\n  });\n\n  describe('Business Functions', () => {\n    it('should initialize core business functions', () => {\n      const functions = orchestrator.getBusinessFunctions();\n      \n      expect(functions.length).toBeGreaterThan(0);\n      expect(functions.some((f: any) => f.id === 'lead-to-cash')).toBe(true);\n      expect(functions.some((f: any) => f.id === 'financial-reporting')).toBe(true);\n    });\n\n    it('should validate business function structure', () => {\n      const functions = orchestrator.getBusinessFunctions();\n      const leadToCash = functions.find((f: any) => f.id === 'lead-to-cash');\n      \n      expect(leadToCash).toBeDefined();\n      expect(leadToCash.requiredApps).toBeInstanceOf(Array);\n      expect(leadToCash.supportingAgents).toBeInstanceOf(Array);\n      expect(leadToCash.automationWorkflows).toBeInstanceOf(Array);\n      expect(typeof leadToCash.automationLevel).toBe('number');\n      expect(leadToCash.automationLevel).toBeGreaterThanOrEqual(0);\n      expect(leadToCash.automationLevel).toBeLessThanOrEqual(100);\n    });\n\n    it('should calculate automation levels correctly', () => {\n      const functions = orchestrator.getBusinessFunctions();\n      \n      functions.forEach((func: any) => {\n        expect(func.automationLevel).toBeGreaterThanOrEqual(0);\n        expect(func.automationLevel).toBeLessThanOrEqual(100);\n        expect(typeof func.isAutomated).toBe('boolean');\n      });\n    });\n  });\n\n  describe('Error Handling', () => {\n    it('should handle missing business functions gracefully', async () => {\n      const result = await orchestrator.executeBusinessFunction('non-existent', {}, 'user-123');\n      \n      expect(result.success).toBe(false);\n      expect(result.error).toBe('Function not found');\n      expect(result.results).toEqual([]);\n      expect(result.agentsInvolved).toEqual([]);\n      expect(result.workflowsTriggered).toEqual([]);\n    });\n\n    it('should handle app connection failures', () => {\n      // Test that the system gracefully handles when apps are disconnected\n      const disconnectedApps = orchestrator.getConnectedApps().filter((app: any) => app.status === 'error');\n      \n      // Should still provide structure even for failed apps\n      disconnectedApps.forEach((app: any) => {\n        expect(app.id).toBeDefined();\n        expect(app.name).toBeDefined();\n        expect(app.category).toBeDefined();\n      });\n    });\n  });\n\n  describe('Integration Health', () => {\n    it('should provide health metrics for all apps', () => {\n      const health = orchestrator.getSystemHealth();\n      \n      expect(health).toBeDefined();\n      expect(typeof health.overallHealth).toBe('number');\n      expect(health.overallHealth).toBeGreaterThanOrEqual(0);\n      expect(health.overallHealth).toBeLessThanOrEqual(100);\n    });\n\n    it('should identify critical app dependencies', () => {\n      const functions = orchestrator.getBusinessFunctions();\n      const criticalApps = new Set();\n      \n      functions.forEach((func: any) => {\n        func.requiredApps.forEach((app: string) => criticalApps.add(app));\n      });\n      \n      expect(criticalApps.size).toBeGreaterThan(0);\n      expect(criticalApps.has('salesforce')).toBe(true);\n      expect(criticalApps.has('quickbooks')).toBe(true);\n    });\n  });\n}); ","usedDeprecatedRules":[]},{"filePath":"/home/vonj/Github/Nexus/__tests__/core/featureRegistry.test.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":67,"column":71,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":67,"endColumn":74,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2491,2494],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2491,2494],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'featureIds' is assigned a value but never used.","line":162,"column":13,"nodeType":null,"messageId":"unusedVar","endLine":162,"endColumn":23}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { \n  getAllFeatures, \n  getFeaturesByCategory, \n  searchFeatures, \n  getFeatureById \n} from '../../src/lib/featureRegistry';\n\ndescribe('Feature Registry - Core Platform Features', () => {\n  describe('Feature Discovery', () => {\n    it('should return all registered features', () => {\n      const features = getAllFeatures();\n      \n      expect(features).toBeInstanceOf(Array);\n      expect(features.length).toBeGreaterThan(0);\n      \n      // Verify each feature has required properties\n      features.forEach(feature => {\n        expect(feature.id).toBeDefined();\n        expect(feature.name).toBeDefined();\n        expect(feature.description).toBeDefined();\n        expect(feature.category).toBeDefined();\n        expect(feature.accessLevel).toBeDefined();\n        expect(feature.path).toBeDefined();\n      });\n    });\n\n    it('should have core features available', () => {\n      const features = getAllFeatures();\n      \n      // Check for essential core features\n      const coreFeatureIds = ['command-center', 'my-workspace', 'ai-assistant'];\n      \n      coreFeatureIds.forEach(featureId => {\n        const feature = features.find(f => f.id === featureId);\n        expect(feature).toBeDefined();\n        expect(feature?.category).toMatch(/^(core|ai)$/);\n      });\n    });\n\n    it('should have department features', () => {\n      const features = getAllFeatures();\n      const departmentFeatures = features.filter(f => f.category === 'department');\n      \n      expect(departmentFeatures.length).toBeGreaterThan(0);\n      \n      // Check for key departments\n      const requiredDepartments = ['sales', 'finance', 'operations'];\n      requiredDepartments.forEach(dept => {\n        const deptFeature = departmentFeatures.find(f => f.id === dept);\n        expect(deptFeature).toBeDefined();\n      });\n    });\n  });\n\n  describe('Feature Categorization', () => {\n    it('should filter features by category correctly', () => {\n      const coreFeatures = getFeaturesByCategory('core');\n      const aiFeatures = getFeaturesByCategory('ai');\n      const departmentFeatures = getFeaturesByCategory('department');\n      \n      expect(coreFeatures.every(f => f.category === 'core')).toBe(true);\n      expect(aiFeatures.every(f => f.category === 'ai')).toBe(true);\n      expect(departmentFeatures.every(f => f.category === 'department')).toBe(true);\n    });\n\n    it('should handle invalid categories gracefully', () => {\n      const invalidFeatures = getFeaturesByCategory('non-existent' as any);\n      expect(invalidFeatures).toEqual([]);\n    });\n\n    it('should validate category types', () => {\n      const allFeatures = getAllFeatures();\n      const validCategories = ['core', 'department', 'productivity', 'analytics', 'ai', 'administration'];\n      \n      allFeatures.forEach(feature => {\n        expect(validCategories).toContain(feature.category);\n      });\n    });\n  });\n\n  describe('Feature Search', () => {\n    it('should search features by name', () => {\n      const salesResults = searchFeatures('sales');\n      expect(salesResults.length).toBeGreaterThan(0);\n      \n      const salesFeature = salesResults.find(f => f.id === 'sales');\n      expect(salesFeature).toBeDefined();\n    });\n\n    it('should search features by keywords', () => {\n      const dashboardResults = searchFeatures('dashboard');\n      expect(dashboardResults.length).toBeGreaterThan(0);\n      \n      // Should find features with dashboard-related keywords\n      const hasDashboardKeyword = dashboardResults.some(f => \n        f.keywords?.includes('dashboard') || \n        f.name.toLowerCase().includes('dashboard') ||\n        f.description.toLowerCase().includes('dashboard')\n      );\n      expect(hasDashboardKeyword).toBe(true);\n    });\n\n    it('should handle empty search queries', () => {\n      const emptyResults = searchFeatures('');\n      expect(emptyResults).toEqual([]);\n    });\n\n    it('should be case insensitive', () => {\n      const upperResults = searchFeatures('SALES');\n      const lowerResults = searchFeatures('sales');\n      \n      expect(upperResults.length).toEqual(lowerResults.length);\n      expect(upperResults.map(f => f.id).sort()).toEqual(lowerResults.map(f => f.id).sort());\n    });\n  });\n\n  describe('Feature Access Control', () => {\n    it('should have proper access levels', () => {\n      const allFeatures = getAllFeatures();\n      const validAccessLevels = ['free', 'pro', 'enterprise', 'admin'];\n      \n      allFeatures.forEach(feature => {\n        expect(validAccessLevels).toContain(feature.accessLevel);\n      });\n    });\n\n    it('should have free features available', () => {\n      const freeFeatures = getAllFeatures().filter(f => f.accessLevel === 'free');\n      expect(freeFeatures.length).toBeGreaterThan(0);\n      \n      // Core features should be free\n      const coreFeature = freeFeatures.find(f => f.id === 'command-center');\n      expect(coreFeature).toBeDefined();\n    });\n\n    it('should properly identify premium features', () => {\n      const premiumFeatures = getAllFeatures().filter(f => \n        f.accessLevel === 'pro' || f.accessLevel === 'enterprise'\n      );\n      \n      expect(premiumFeatures.length).toBeGreaterThan(0);\n    });\n  });\n\n  describe('Feature Metadata', () => {\n    it('should identify highlighted features', () => {\n      const highlightedFeatures = getAllFeatures().filter(f => f.isHighlighted);\n      expect(highlightedFeatures.length).toBeGreaterThan(0);\n      \n      // AI Assistant should be highlighted\n      const aiAssistant = highlightedFeatures.find(f => f.id === 'ai-assistant');\n      expect(aiAssistant).toBeDefined();\n    });\n\n    it('should identify new features', () => {\n      const newFeatures = getAllFeatures().filter(f => f.isNew);\n      expect(newFeatures.length).toBeGreaterThanOrEqual(0);\n    });\n\n    it('should have valid feature relationships', () => {\n      const allFeatures = getAllFeatures();\n      const featureIds = new Set(allFeatures.map(f => f.id));\n      \n      allFeatures.forEach(feature => {\n        if (feature.relatedFeatures) {\n          feature.relatedFeatures.forEach(relatedId => {\n            // Related features should exist (or be planned)\n            expect(typeof relatedId).toBe('string');\n            expect(relatedId.length).toBeGreaterThan(0);\n          });\n        }\n      });\n    });\n  });\n\n  describe('Feature Retrieval', () => {\n    it('should retrieve feature by ID', () => {\n      const salesFeature = getFeatureById('sales');\n      expect(salesFeature).toBeDefined();\n      expect(salesFeature?.id).toBe('sales');\n      expect(salesFeature?.name).toBe('Sales');\n    });\n\n    it('should return undefined for invalid ID', () => {\n      const invalidFeature = getFeatureById('non-existent-feature');\n      expect(invalidFeature).toBeUndefined();\n    });\n\n    it('should handle empty ID gracefully', () => {\n      const emptyFeature = getFeatureById('');\n      expect(emptyFeature).toBeUndefined();\n    });\n  });\n}); ","usedDeprecatedRules":[]},{"filePath":"/home/vonj/Github/Nexus/__tests__/core/operationsMetrics.test.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/vonj/Github/Nexus/__tests__/features/ai-assistant/supervisor.test.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":140,"column":30,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":140,"endColumn":33,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[5057,5060],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[5057,5060],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { ProductionSupervisorAgent, supervisorAgent } from '../../../src/features/ai-assistant/lib/agents/supervisor';\nimport type { Agent } from '../../../src/lib/agentRegistry';\n\ndescribe('Production Supervisor Agent', () => {\n  const mockSpecialists: Agent[] = [\n    {\n      id: 'tech-specialist',\n      name: 'Technical Specialist',\n      description: 'Handles technical issues',\n      specialties: ['api', 'integration', 'database', 'code'],\n      department: 'engineering',\n      webhookUrl: 'https://test-webhook.com/tech',\n      type: 'specialist',\n      knowledgeBase: {\n        domain: 'Technical Engineering',\n        specializations: ['API Development', 'Database Management']\n      },\n      personality: {\n        communicationStyle: 'analytical',\n        expertise_level: 'expert',\n        decision_making: 'data-driven',\n        tone: 'professional'\n      },\n      systemPrompt: 'You are a technical specialist focused on API and database issues.'\n    },\n    {\n      id: 'finance-specialist',\n      name: 'Finance Specialist',\n      description: 'Handles financial matters',\n      specialties: ['budget', 'invoice', 'payment', 'revenue'],\n      department: 'finance',\n      webhookUrl: 'https://test-webhook.com/finance',\n      type: 'specialist',\n      knowledgeBase: {\n        domain: 'Financial Operations',\n        specializations: ['Budget Management', 'Invoice Processing']\n      },\n      personality: {\n        communicationStyle: 'analytical',\n        expertise_level: 'expert',\n        decision_making: 'data-driven',\n        tone: 'professional'\n      },\n      systemPrompt: 'You are a finance specialist focused on budget and payment issues.'\n    },\n    {\n      id: 'security-specialist',\n      name: 'Security Specialist',\n      description: 'Handles security issues',\n      specialties: ['security', 'auth', 'permissions', 'compliance'],\n      department: 'security',\n      webhookUrl: 'https://test-webhook.com/security',\n      type: 'specialist',\n      knowledgeBase: {\n        domain: 'Information Security',\n        specializations: ['Authentication', 'Compliance']\n      },\n      personality: {\n        communicationStyle: 'analytical',\n        expertise_level: 'expert',\n        decision_making: 'data-driven',\n        tone: 'authoritative'\n      },\n      systemPrompt: 'You are a security specialist focused on auth and compliance issues.'\n    }\n  ];\n\n  const supervisor = new ProductionSupervisorAgent();\n\n  describe('Intent Analysis', () => {\n    it('should correctly identify technical intents', async () => {\n      const response = await supervisor.route('I need help with API integration error', {\n        specialists: mockSpecialists\n      });\n\n      expect(response.routeToAgentId).toBe('tech-specialist');\n      expect(response.confidence).toBeGreaterThan(0.6);\n      expect(response.content).toContain('Technical Specialist');\n      expect(response.metadata?.intentAnalysis).toBeDefined();\n    });\n\n    it('should correctly identify financial intents', async () => {\n      const response = await supervisor.route('I need to create an invoice for our client', {\n        specialists: mockSpecialists\n      });\n\n      expect(response.routeToAgentId).toBe('finance-specialist');\n      expect(response.confidence).toBeGreaterThan(0.5);\n      expect(response.content).toContain('Finance Specialist');\n    });\n\n    it('should detect urgency and escalate appropriately', async () => {\n      const response = await supervisor.route('URGENT: Our database is down and customers cannot access the system!', {\n        specialists: mockSpecialists\n      });\n\n      expect(response.metadata?.escalated).toBe(true);\n      expect(response.confidence).toBeGreaterThan(0.8);\n      expect(response.content).toContain('escalating');\n    });\n  });\n\n  describe('Context Awareness', () => {\n    it('should use conversation history for better routing', async () => {\n      const conversationHistory = [\n        {\n          message: 'previous technical question',\n          agentId: 'tech-specialist',\n          timestamp: new Date(),\n          outcome: 'successful' as const\n        }\n      ];\n\n      const response = await supervisor.route('I have another question about APIs', {\n        specialists: mockSpecialists,\n        conversationHistory\n      });\n\n      expect(response.routeToAgentId).toBe('tech-specialist');\n      expect(response.reasoning).toContain('success rate');\n    });\n\n    it('should respect user preferences', async () => {\n      const response = await supervisor.route('I need help with security', {\n        specialists: mockSpecialists,\n        userContext: {\n          preferredAgents: ['security-specialist']\n        }\n      });\n\n      expect(response.routeToAgentId).toBe('security-specialist');\n      expect(response.reasoning).toContain('preferred agent');\n    });\n  });\n\n  describe('Error Handling', () => {\n    it('should handle errors gracefully', async () => {\n      // Simulate an error by passing invalid data\n      const response = await supervisor.route('test message', {\n        specialists: null as any // This should cause an error\n      });\n\n      expect(response.metadata?.error).toBe(true);\n      expect(response.metadata?.fallbackToGeneral).toBe(true);\n      expect(response.confidence).toBeLessThan(0.5);\n    });\n  });\n\n  describe('Uncertainty Handling', () => {\n    it('should request clarification for ambiguous requests', async () => {\n      const response = await supervisor.route('I need help', {\n        specialists: mockSpecialists\n      });\n\n      expect(response.metadata?.needsClarification).toBe(true);\n      expect(response.confidence).toBeLessThan(0.5);\n      expect(response.content).toContain('more detail');\n    });\n\n    it('should offer uncertain matches with explanation', async () => {\n      const response = await supervisor.route('I have a small budget question', {\n        specialists: mockSpecialists\n      });\n\n      if (response.confidence > 0.3 && response.confidence < 0.6) {\n        expect(response.metadata?.uncertainMatch).toBe(true);\n        expect(response.content).toContain('not completely certain');\n      }\n    });\n  });\n\n  describe('Performance Metrics', () => {\n    it('should include performance metadata', async () => {\n      const response = await supervisor.route('API integration help needed', {\n        specialists: mockSpecialists\n      });\n\n      expect(response.metadata?.processingTime).toBeDefined();\n      expect(response.metadata?.intentConfidence).toBeDefined();\n      expect(response.metadata?.routingConfidence).toBeDefined();\n      expect(response.metadata?.estimatedResolutionTime).toBeDefined();\n    });\n  });\n\n  describe('Legacy Compatibility', () => {\n    it('should maintain compatibility with legacy supervisorAgent function', async () => {\n      const response = await supervisorAgent('I need help with database issues', {\n        specialists: mockSpecialists\n      });\n\n      expect(response).toBeDefined();\n      expect(response.content).toBeDefined();\n      expect(response.confidence).toBeDefined();\n      expect(typeof response.confidence).toBe('number');\n    });\n  });\n\n  describe('Multi-domain Routing', () => {\n    it('should handle multi-domain requests appropriately', async () => {\n      const response = await supervisor.route('I need to integrate our payment API with the security system for invoice processing', {\n        specialists: mockSpecialists\n      });\n\n      // Should route to the most relevant specialist or suggest multiple\n      expect(response.routeToAgentId).toBeDefined();\n      expect(response.metadata?.fallbackAgents).toBeDefined();\n      expect(response.confidence).toBeGreaterThan(0.3);\n    });\n  });\n}); ","usedDeprecatedRules":[]},{"filePath":"/home/vonj/Github/Nexus/__tests__/hooks/useOperationsMetrics.test.tsx","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":44,"column":21,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":44,"endColumn":24,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1361,1364],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1361,1364],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":44,"column":56,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":44,"endColumn":59,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1396,1399],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1396,1399],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { renderHook, waitFor } from '@testing-library/react';\nimport { QueryClient, QueryClientProvider } from '@tanstack/react-query';\nimport { useOperationsMetrics } from '../../src/domains/operations/hooks/useOperationsMetrics';\nimport React from 'react';\n\n// Mock Supabase client and the RPC chain used in the hook\njest.mock('../../src/lib/supabase', () => {\n  const mockData = {\n    department: 'operations',\n    state: {\n      score: 80,\n      updatedAt: new Date().toISOString(),\n      kpis: [\n        { id: 'deploy_frequency', label: 'Deployment Frequency', value: 10, delta: 0, history: [] },\n      ],\n    },\n  };\n  return {\n    supabase: {\n      from: () => ({\n        select: () => ({\n          eq: () => ({\n            maybeSingle: () => Promise.resolve({ data: mockData, error: null }),\n          }),\n        }),\n      }),\n    },\n  };\n});\n\nconst queryClient = new QueryClient();\n\nconst wrapper: React.FC<{ children: React.ReactNode }> = ({ children }) => (\n  <QueryClientProvider client={queryClient}>{children}</QueryClientProvider>\n);\n\ndescribe('useOperationsMetrics', () => {\n  it('fetches and returns department metrics', async () => {\n    const { result } = renderHook(() => useOperationsMetrics(), { wrapper });\n\n    await waitFor(() => expect(result.current.isSuccess).toBe(true));\n\n    const data = result.current.data;\n    expect((data as any)?.kpis?.[0]?.value || (data as any)?.state?.kpis?.[0]?.value).toBe(10);\n  });\n}); ","usedDeprecatedRules":[]},{"filePath":"/home/vonj/Github/Nexus/__tests__/hooks/useSecondBrain.test.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/vonj/Github/Nexus/__tests__/lib/services/businessObservationService.test.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":298,"column":53,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":298,"endColumn":56,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[12263,12266],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[12263,12266],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { businessObservationService } from '../../../src/lib/services/businessObservationService';\nimport * as domainAnalysisModule from '../../../src/lib/services/domainAnalysisService';\n\n// Mock dependencies\njest.mock('../../../src/lib/supabase', () => ({\n  supabase: {\n    from: jest.fn(() => ({\n      select: jest.fn(() => ({\n        eq: jest.fn(() => ({\n          single: jest.fn(),\n          eq: jest.fn(() => ({\n            eq: jest.fn()\n          }))\n        }))\n      }))\n    }))\n  }\n}));\n\njest.mock('../../../src/lib/security/logger', () => ({\n  logger: {\n    error: jest.fn()\n  }\n}));\n\n// Mock the domainAnalysisService\njest.mock('../../../src/lib/services/domainAnalysisService', () => ({\n  domainAnalysisService: {\n    analyzeUserEmailDomains: jest.fn()\n  }\n}));\n\ndescribe('BusinessObservationService', () => {\n  const mockUserId = 'user-123';\n  const mockCompanyId = 'company-456';\n  \n  beforeEach(() => {\n    jest.clearAllMocks();\n  });\n\n  describe('generateBusinessObservations', () => {\n    it('should generate professional email opportunity observation for users with generic email', async () => {\n      // Mock domain analysis to return generic email usage\n      const mockDomainAnalysis = {\n        totalEmails: 5,\n        customDomainCount: 0,\n        genericProviderCount: 3,\n        overallProfessionalScore: 30,\n        emailsByDomain: {\n          'gmail.com': ['user@gmail.com', 'contact@gmail.com'],\n          'yahoo.com': ['info@yahoo.com']\n        }\n      };\n\n      // Mock the service method\n      (domainAnalysisModule.domainAnalysisService.analyzeUserEmailDomains as jest.Mock).mockResolvedValue(mockDomainAnalysis);\n\n      // Mock Supabase calls for integrations and security\n      const supabaseMock = jest.requireMock('../../../src/lib/supabase');\n      supabaseMock.supabase.from.mockImplementation((table: string) => {\n        if (table === 'ai_integrations') {\n          return {\n            select: jest.fn().mockReturnValue({\n              eq: jest.fn().mockReturnValue({\n                eq: jest.fn().mockResolvedValue({\n                  data: [] // No integrations\n                })\n              })\n            })\n          };\n        }\n        if (table === 'ai_user_profiles') {\n          return {\n            select: jest.fn().mockReturnValue({\n              eq: jest.fn().mockReturnValue({\n                single: jest.fn().mockResolvedValue({\n                  data: { security_settings: { mfa_enabled: false } } // MFA not enabled\n                })\n              })\n            })\n          };\n        }\n        return {\n          select: jest.fn().mockReturnValue({\n            eq: jest.fn()\n          })\n        };\n      });\n\n      const observations = await businessObservationService.generateBusinessObservations(mockUserId, mockCompanyId);\n\n      expect(observations).toHaveLength(4); // email, integration, performance, security\n      \n      const emailObservation = observations.find(obs => obs.category === 'Business Credibility');\n      expect(emailObservation).toBeDefined();\n      expect(emailObservation?.type).toBe('opportunity');\n      expect(emailObservation?.title).toBe('Professional Email Domain Opportunity');\n      expect(emailObservation?.priority).toBe('medium'); // Low email count = medium priority\n      expect(emailObservation?.insights).toContain('42% of customers are more likely to trust businesses with professional email addresses');\n      expect(emailObservation?.actionItems).toContain('Set up Microsoft 365 Business with custom domain');\n      expect(emailObservation?.automationPotential?.canAutomate).toBe(true);\n    });\n\n    it('should generate high priority observation for businesses with many generic emails', async () => {\n      const mockDomainAnalysis = {\n        totalEmails: 75,\n        customDomainCount: 0,\n        genericProviderCount: 75,\n        overallProfessionalScore: 20,\n        emailsByDomain: {\n          'gmail.com': Array(50).fill('user@gmail.com'),\n          'yahoo.com': Array(25).fill('user@yahoo.com')\n        }\n      };\n\n      (domainAnalysisModule.domainAnalysisService.analyzeUserEmailDomains as jest.Mock).mockResolvedValue(mockDomainAnalysis);\n\n      const observations = await businessObservationService.generateBusinessObservations(mockUserId, mockCompanyId);\n\n      const emailObservation = observations.find(obs => obs.category === 'Business Credibility');\n      expect(emailObservation?.priority).toBe('high'); // Many emails = high priority\n      expect(emailObservation?.estimatedImpact.businessValue).toBeGreaterThan(5000); // Higher value for larger businesses\n    });\n\n    it('should generate email security observation for users with professional email', async () => {\n      const mockDomainAnalysis = {\n        totalEmails: 10,\n        customDomainCount: 8,\n        genericProviderCount: 2,\n        overallProfessionalScore: 85,\n        emailsByDomain: {\n          'company.com': Array(8).fill('user@company.com'),\n          'gmail.com': Array(2).fill('personal@gmail.com')\n        }\n      };\n\n      (domainAnalysisModule.domainAnalysisService.analyzeUserEmailDomains as jest.Mock).mockResolvedValue(mockDomainAnalysis);\n\n      const observations = await businessObservationService.generateBusinessObservations(mockUserId, mockCompanyId);\n\n      const securityObservation = observations.find(obs => obs.category === 'Email Security');\n      expect(securityObservation).toBeDefined();\n      expect(securityObservation?.type).toBe('recommendation');\n      expect(securityObservation?.title).toBe('Email Security Enhancement Opportunity');\n      expect(securityObservation?.insights).toContain('DMARC, SPF, and DKIM records prevent email spoofing');\n      expect(securityObservation?.actionItems).toContain('Configure DMARC, SPF, and DKIM DNS records');\n    });\n\n    it('should not generate professional email opportunity for businesses already using professional email', async () => {\n      const mockDomainAnalysis = {\n        totalEmails: 15,\n        customDomainCount: 15,\n        genericProviderCount: 0,\n        overallProfessionalScore: 95,\n        emailsByDomain: {\n          'company.com': Array(15).fill('user@company.com')\n        }\n      };\n\n      (domainAnalysisModule.domainAnalysisService.analyzeUserEmailDomains as jest.Mock).mockResolvedValue(mockDomainAnalysis);\n\n      const observations = await businessObservationService.generateBusinessObservations(mockUserId, mockCompanyId);\n\n      const emailOpportunity = observations.find(obs => \n        obs.category === 'Business Credibility' && obs.type === 'opportunity'\n      );\n      expect(emailOpportunity).toBeUndefined();\n\n      // Should still have email security recommendation\n      const emailSecurity = observations.find(obs => obs.category === 'Email Security');\n      expect(emailSecurity).toBeDefined();\n    });\n\n    it('should generate integration opportunity observation for businesses with few integrations', async () => {\n      // Mock supabase to return few integrations\n      const supabaseMock = jest.requireMock('../../../src/lib/supabase');\n      supabaseMock.supabase.from.mockReturnValue({\n        select: jest.fn().mockReturnValue({\n          eq: jest.fn().mockReturnValue({\n            eq: jest.fn().mockResolvedValue({\n              data: [{ id: 1, name: 'Basic Integration' }] // Only 1 integration\n            })\n          })\n        })\n      });\n\n      const observations = await businessObservationService.generateBusinessObservations(mockUserId, mockCompanyId);\n\n      const integrationObservation = observations.find(obs => obs.category === 'Business Automation');\n      expect(integrationObservation).toBeDefined();\n      expect(integrationObservation?.type).toBe('opportunity');\n      expect(integrationObservation?.title).toBe('Integration Opportunities Detected');\n      expect(integrationObservation?.insights).toContain('Businesses with 5+ integrations report 40% time savings');\n      expect(integrationObservation?.actionItems).toContain('Connect your CRM for automated lead tracking');\n    });\n\n    it('should sort observations by priority and confidence', async () => {\n      const mockDomainAnalysis = {\n        totalEmails: 50,\n        customDomainCount: 0,\n        genericProviderCount: 50,\n        overallProfessionalScore: 25,\n        emailsByDomain: {\n          'gmail.com': Array(50).fill('user@gmail.com')\n        }\n      };\n\n      (domainAnalysisModule.domainAnalysisService.analyzeUserEmailDomains as jest.Mock).mockResolvedValue(mockDomainAnalysis);\n\n      const observations = await businessObservationService.generateBusinessObservations(mockUserId, mockCompanyId);\n\n      // Should be sorted by priority (critical > high > medium > low) then confidence\n      for (let i = 0; i < observations.length - 1; i++) {\n        const current = observations[i];\n        const next = observations[i + 1];\n        \n        const priorityOrder = { critical: 4, high: 3, medium: 2, low: 1 };\n        const currentPriorityValue = priorityOrder[current.priority];\n        const nextPriorityValue = priorityOrder[next.priority];\n        \n        if (currentPriorityValue === nextPriorityValue) {\n          expect(current.confidence).toBeGreaterThanOrEqual(next.confidence);\n        } else {\n          expect(currentPriorityValue).toBeGreaterThanOrEqual(nextPriorityValue);\n        }\n      }\n    });\n\n    it('should handle errors gracefully', async () => {\n      (domainAnalysisModule.domainAnalysisService.analyzeUserEmailDomains as jest.Mock).mockRejectedValue(new Error('Analysis failed'));\n\n      const observations = await businessObservationService.generateBusinessObservations(mockUserId, mockCompanyId);\n\n      expect(observations).toEqual([]); // Should return empty array on error\n    });\n  });\n\n  describe('getBusinessInsights', () => {\n    it('should convert observations to BusinessInsight format', async () => {\n      const mockDomainAnalysis = {\n        totalEmails: 10,\n        customDomainCount: 0,\n        genericProviderCount: 10,\n        overallProfessionalScore: 30,\n        emailsByDomain: {\n          'gmail.com': Array(10).fill('user@gmail.com')\n        }\n      };\n\n      (domainAnalysisModule.domainAnalysisService.analyzeUserEmailDomains as jest.Mock).mockResolvedValue(mockDomainAnalysis);\n\n      const insights = await businessObservationService.getBusinessInsights(mockUserId, mockCompanyId);\n\n      expect(insights).toHaveLength(4);\n      \n      const emailInsight = insights.find(insight => insight.category === 'Business Credibility');\n      expect(emailInsight).toBeDefined();\n      expect(emailInsight?.type).toBe('opportunity');\n      expect(emailInsight?.metrics.impact).toBeGreaterThan(0);\n      expect(emailInsight?.metrics.confidence).toBe(0.92);\n      expect(emailInsight?.suggestedActions).toHaveLength(5);\n      expect(emailInsight?.automationPotential).toBeDefined();\n      expect(emailInsight?.status).toBe('active');\n    });\n\n    it('should filter insights by page relevance when pageId provided', async () => {\n      const mockDomainAnalysis = {\n        totalEmails: 5,\n        customDomainCount: 0,\n        genericProviderCount: 5,\n        overallProfessionalScore: 30,\n        emailsByDomain: {\n          'gmail.com': Array(5).fill('user@gmail.com')\n        }\n      };\n\n      (domainAnalysisModule.domainAnalysisService.analyzeUserEmailDomains as jest.Mock).mockResolvedValue(mockDomainAnalysis);\n\n      const dashboardInsights = await businessObservationService.getBusinessInsights(mockUserId, mockCompanyId, 'dashboard');\n      const settingsInsights = await businessObservationService.getBusinessInsights(mockUserId, mockCompanyId, 'settings');\n\n      expect(dashboardInsights.length).toBeGreaterThan(0);\n      expect(settingsInsights.length).toBeGreaterThan(0);\n      \n      // All insights should be relevant to the specified page\n      dashboardInsights.forEach(insight => {\n        expect(insight.context.pageRelevance).toContain('dashboard');\n      });\n      \n      settingsInsights.forEach(insight => {\n        expect(insight.context.pageRelevance).toContain('settings');\n      });\n    });\n  });\n\n  describe('calculateEmailUpgradeValue', () => {\n    it('should calculate higher value for larger businesses', async () => {\n      const service = businessObservationService as any;\n\n      const smallBusiness = { totalEmails: 10 };\n      const mediumBusiness = { totalEmails: 60 };\n      const largeBusiness = { totalEmails: 120 };\n\n      const smallValue = service.calculateEmailUpgradeValue(smallBusiness);\n      const mediumValue = service.calculateEmailUpgradeValue(mediumBusiness);\n      const largeValue = service.calculateEmailUpgradeValue(largeBusiness);\n\n      expect(mediumValue).toBeGreaterThan(smallValue);\n      expect(largeValue).toBeGreaterThan(mediumValue);\n    });\n  });\n});","usedDeprecatedRules":[]},{"filePath":"/home/vonj/Github/Nexus/__tests__/lib/services/domainAnalysisService.test.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/vonj/Github/Nexus/__tests__/lib/services/slashCommandService.test.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":53,"column":12,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":53,"endColumn":15,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1375,1378],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1375,1378],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":78,"column":12,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":78,"endColumn":15,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2177,2180],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2177,2180],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":96,"column":12,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":96,"endColumn":15,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2724,2727],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2724,2727],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":125,"column":12,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":125,"endColumn":15,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3499,3502],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3499,3502],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":190,"column":12,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":190,"endColumn":15,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[5824,5827],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[5824,5827],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { \n  fetchSlashCommands, \n  getSlashCommands, \n  filterSlashCommands, \n  clearSlashCommandsCache,\n  type SlashCommand \n} from '@/lib/services/slashCommandService';\nimport { supabase } from '@/lib/core/supabase';\n\n// Mock Supabase\njest.mock('@/lib/supabase', () => ({\n  supabase: {\n    from: jest.fn(),\n  },\n}));\n\nconst mockSupabase = supabase as jest.Mocked<typeof supabase>;\n\ndescribe('SlashCommandService', () => {\n  beforeEach(() => {\n    jest.clearAllMocks();\n    clearSlashCommandsCache();\n  });\n\n  describe('fetchSlashCommands', () => {\n    it('successfully fetches commands from database', async () => {\n      const mockTemplates = [\n        {\n          slug: 'create-task',\n          title: 'Create Task',\n          description: 'Create a task in your PM tool',\n          category: 'productivity',\n          template_data: { actions: [] },\n        },\n        {\n          slug: 'send-invoice',\n          title: 'Send Invoice',\n          description: 'Send a Stripe invoice',\n          category: 'finance',\n          template_data: { actions: [] },\n        },\n      ];\n\n      mockSupabase.from.mockReturnValue({\n        select: jest.fn().mockReturnValue({\n          eq: jest.fn().mockReturnValue({\n            order: jest.fn().mockResolvedValue({\n              data: mockTemplates,\n              error: null,\n            }),\n          }),\n        }),\n      } as any);\n\n      const commands = await fetchSlashCommands();\n\n      expect(commands).toHaveLength(2);\n      expect(commands[0]).toEqual({\n        slug: 'create-task',\n        title: 'Create Task',\n        description: 'Create a task in your PM tool',\n        category: 'productivity',\n        templateData: { actions: [] },\n      });\n      expect(mockSupabase.from).toHaveBeenCalledWith('ai_action_card_templates');\n    });\n\n    it('falls back to static commands on database error', async () => {\n      mockSupabase.from.mockReturnValue({\n        select: jest.fn().mockReturnValue({\n          eq: jest.fn().mockReturnValue({\n            order: jest.fn().mockResolvedValue({\n              data: null,\n              error: { message: 'Database error' },\n            }),\n          }),\n        }),\n      } as any);\n\n      const commands = await fetchSlashCommands();\n\n      expect(commands).toHaveLength(4); // Static fallback commands\n      expect(commands[0].slug).toBe('create-task');\n    });\n\n    it('falls back to static commands when no templates found', async () => {\n      mockSupabase.from.mockReturnValue({\n        select: jest.fn().mockReturnValue({\n          eq: jest.fn().mockReturnValue({\n            order: jest.fn().mockResolvedValue({\n              data: [],\n              error: null,\n            }),\n          }),\n        }),\n      } as any);\n\n      const commands = await fetchSlashCommands();\n\n      expect(commands).toHaveLength(4); // Static fallback commands\n    });\n  });\n\n  describe('getSlashCommands', () => {\n    it('caches commands to avoid repeated database calls', async () => {\n      const mockTemplates = [\n        {\n          slug: 'create-task',\n          title: 'Create Task',\n          description: 'Create a task',\n          category: 'productivity',\n          template_data: {},\n        },\n      ];\n\n      mockSupabase.from.mockReturnValue({\n        select: jest.fn().mockReturnValue({\n          eq: jest.fn().mockReturnValue({\n            order: jest.fn().mockResolvedValue({\n              data: mockTemplates,\n              error: null,\n            }),\n          }),\n        }),\n      } as any);\n\n      // First call\n      const commands1 = await getSlashCommands();\n      // Second call should use cache\n      const commands2 = await getSlashCommands();\n\n      expect(commands1).toEqual(commands2);\n      expect(mockSupabase.from).toHaveBeenCalledTimes(1); // Only called once due to caching\n    });\n  });\n\n  describe('filterSlashCommands', () => {\n    const mockCommands: SlashCommand[] = [\n      { slug: 'create-task', title: 'Create Task', description: 'Create a task' },\n      { slug: 'send-invoice', title: 'Send Invoice', description: 'Send Stripe invoice' },\n      { slug: 'update-crm', title: 'Update CRM', description: 'Update HubSpot contact' },\n    ];\n\n    it('filters commands by slug', () => {\n      const filtered = filterSlashCommands(mockCommands, 'create');\n      expect(filtered).toHaveLength(1);\n      expect(filtered[0].slug).toBe('create-task');\n    });\n\n    it('filters commands by title', () => {\n      const filtered = filterSlashCommands(mockCommands, 'invoice');\n      expect(filtered).toHaveLength(1);\n      expect(filtered[0].slug).toBe('send-invoice');\n    });\n\n    it('filters commands by description', () => {\n      const filtered = filterSlashCommands(mockCommands, 'hubspot');\n      expect(filtered).toHaveLength(1);\n      expect(filtered[0].slug).toBe('update-crm');\n    });\n\n    it('returns all commands for empty query', () => {\n      const filtered = filterSlashCommands(mockCommands, '');\n      expect(filtered).toHaveLength(3);\n    });\n\n    it('returns empty array for no matches', () => {\n      const filtered = filterSlashCommands(mockCommands, 'nonexistent');\n      expect(filtered).toHaveLength(0);\n    });\n\n    it('is case insensitive', () => {\n      const filtered = filterSlashCommands(mockCommands, 'CREATE');\n      expect(filtered).toHaveLength(1);\n      expect(filtered[0].slug).toBe('create-task');\n    });\n  });\n\n  describe('clearSlashCommandsCache', () => {\n    it('clears the cache so next call fetches fresh data', async () => {\n      mockSupabase.from.mockReturnValue({\n        select: jest.fn().mockReturnValue({\n          eq: jest.fn().mockReturnValue({\n            order: jest.fn().mockResolvedValue({\n              data: [{ slug: 'test', title: 'Test', template_data: {} }],\n              error: null,\n            }),\n          }),\n        }),\n      } as any);\n\n      // First call\n      await getSlashCommands();\n      \n      // Clear cache\n      clearSlashCommandsCache();\n      \n      // Second call should fetch fresh data\n      await getSlashCommands();\n\n      expect(mockSupabase.from).toHaveBeenCalledTimes(2);\n    });\n  });\n}); ","usedDeprecatedRules":[]},{"filePath":"/home/vonj/Github/Nexus/__tests__/lib/utils/passkey.test.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":36,"column":10,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":36,"endColumn":13,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1257,1260],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1257,1260],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":40,"column":10,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":40,"endColumn":13,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1328,1331],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1328,1331],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { \n  isPasskeySupported, \n  registerPasskey, \n  authenticateWithPasskey, \n  fetchUserPasskeys, \n  deletePasskey, \n  establishPasskeySession,\n  handlePasskeyError,\n  PasskeyRegistrationOptions,\n  PasskeyAuthenticationOptions \n} from '../../../src/lib/utils/passkey';\nimport { browserSupportsWebAuthn, startRegistration, startAuthentication } from '@simplewebauthn/browser';\nimport { supabase } from '../../../src/lib/supabase';\nimport { toast } from 'sonner';\n\n// Mock dependencies\njest.mock('@simplewebauthn/browser');\njest.mock('../../../src/lib/supabase');\njest.mock('sonner');\n\nconst mockBrowserSupportsWebAuthn = browserSupportsWebAuthn as jest.MockedFunction<typeof browserSupportsWebAuthn>;\nconst mockStartRegistration = startRegistration as jest.MockedFunction<typeof startRegistration>;\nconst mockStartAuthentication = startAuthentication as jest.MockedFunction<typeof startAuthentication>;\nconst mockSupabase = supabase as jest.Mocked<typeof supabase>;\nconst mockToast = toast as jest.Mocked<typeof toast>;\n\ndescribe('Passkey Utils', () => {\n  beforeEach(() => {\n    jest.clearAllMocks();\n    \n    // Default mocks\n    mockSupabase.auth = {\n      getSession: jest.fn(),\n      setSession: jest.fn(),\n      refreshSession: jest.fn(),\n    } as any;\n\n    mockSupabase.functions = {\n      invoke: jest.fn(),\n    } as any;\n\n    mockSupabase.from = jest.fn().mockReturnValue({\n      select: jest.fn().mockReturnValue({\n        order: jest.fn().mockReturnValue({\n          data: [],\n          error: null,\n        }),\n      }),\n      delete: jest.fn().mockReturnValue({\n        eq: jest.fn().mockResolvedValue({\n          data: null,\n          error: null,\n        }),\n      }),\n    });\n  });\n\n  describe('isPasskeySupported', () => {\n    it('should return true when browser supports WebAuthn', () => {\n      mockBrowserSupportsWebAuthn.mockReturnValue(true);\n      \n      const result = isPasskeySupported();\n      \n      expect(result).toBe(true);\n      expect(mockBrowserSupportsWebAuthn).toHaveBeenCalledTimes(1);\n    });\n\n    it('should return false when browser does not support WebAuthn', () => {\n      mockBrowserSupportsWebAuthn.mockReturnValue(false);\n      \n      const result = isPasskeySupported();\n      \n      expect(result).toBe(false);\n      expect(mockBrowserSupportsWebAuthn).toHaveBeenCalledTimes(1);\n    });\n\n    it('should handle undefined return value from browserSupportsWebAuthn', () => {\n      mockBrowserSupportsWebAuthn.mockReturnValue(undefined as unknown as boolean);\n      \n      const result = isPasskeySupported();\n      \n      expect(result).toBe(false);\n      expect(mockBrowserSupportsWebAuthn).toHaveBeenCalledTimes(1);\n    });\n  });\n\n  describe('registerPasskey', () => {\n    const mockOptions: PasskeyRegistrationOptions = {\n      userId: 'test-user-id',\n      friendlyName: 'Test Device',\n    };\n\n    beforeEach(() => {\n      mockBrowserSupportsWebAuthn.mockReturnValue(true);\n      mockSupabase.auth.getSession.mockResolvedValue({\n        data: { session: { access_token: 'mock-token' } },\n        error: null,\n      });\n    });\n\n    it('successfully registers a passkey', async () => {\n      const mockAttestationResponse = { id: 'test-credential' };\n      \n      mockSupabase.functions.invoke\n        .mockResolvedValueOnce({\n          data: { challenge: 'test-challenge' },\n          error: null,\n        })\n        .mockResolvedValueOnce({\n          data: { verified: true },\n          error: null,\n        });\n\n      mockStartRegistration.mockResolvedValue(mockAttestationResponse);\n\n      await registerPasskey(mockOptions);\n\n      expect(mockSupabase.functions.invoke).toHaveBeenCalledWith(\n        'passkey-register-challenge',\n        {\n          body: { userId: 'test-user-id', friendlyName: 'Test Device' },\n          headers: { Authorization: 'Bearer mock-token' },\n        }\n      );\n\n      expect(mockStartRegistration).toHaveBeenCalledWith({\n        optionsJSON: { challenge: 'test-challenge' },\n      });\n\n      expect(mockSupabase.functions.invoke).toHaveBeenCalledWith(\n        'passkey-register-verify',\n        {\n          body: {\n            userId: 'test-user-id',\n            attestationResponse: mockAttestationResponse,\n            friendlyName: 'Test Device',\n          },\n        }\n      );\n    });\n\n    it('throws error when browser does not support WebAuthn', async () => {\n      mockBrowserSupportsWebAuthn.mockReturnValue(false);\n\n      await expect(registerPasskey(mockOptions)).rejects.toThrow(\n        'Your browser does not support passkeys'\n      );\n    });\n\n    it('throws error when no session is available', async () => {\n      mockSupabase.auth.getSession.mockResolvedValue({\n        data: { session: null },\n        error: null,\n      });\n\n      await expect(registerPasskey(mockOptions)).rejects.toThrow(\n        'No Supabase session found – please re-login.'\n      );\n    });\n\n    it('throws error when challenge request fails', async () => {\n      mockSupabase.functions.invoke.mockResolvedValue({\n        data: null,\n        error: { message: 'Challenge failed' },\n      });\n\n      await expect(registerPasskey(mockOptions)).rejects.toThrow('Challenge failed');\n    });\n\n    it('throws error when verification fails', async () => {\n      mockSupabase.functions.invoke\n        .mockResolvedValueOnce({\n          data: { challenge: 'test-challenge' },\n          error: null,\n        })\n        .mockResolvedValueOnce({\n          data: null,\n          error: { message: 'Verification failed' },\n        });\n\n      mockStartRegistration.mockResolvedValue({ id: 'test-credential' });\n\n      await expect(registerPasskey(mockOptions)).rejects.toThrow('Verification failed');\n    });\n\n    it('handles registration without friendly name', async () => {\n      const optionsWithoutName: PasskeyRegistrationOptions = {\n        userId: 'test-user-id',\n      };\n\n      mockSupabase.functions.invoke\n        .mockResolvedValueOnce({\n          data: { challenge: 'test-challenge' },\n          error: null,\n        })\n        .mockResolvedValueOnce({\n          data: { verified: true },\n          error: null,\n        });\n\n      mockStartRegistration.mockResolvedValue({ id: 'test-credential' });\n\n      await registerPasskey(optionsWithoutName);\n\n      expect(mockSupabase.functions.invoke).toHaveBeenCalledWith(\n        'passkey-register-challenge',\n        {\n          body: { userId: 'test-user-id', friendlyName: undefined },\n          headers: { Authorization: 'Bearer mock-token' },\n        }\n      );\n    });\n  });\n\n  describe('authenticateWithPasskey', () => {\n    const mockOptions: PasskeyAuthenticationOptions = {\n      email: 'test@example.com',\n    };\n\n    beforeEach(() => {\n      mockBrowserSupportsWebAuthn.mockReturnValue(true);\n    });\n\n    it('successfully authenticates with passkey', async () => {\n      const mockAssertionResponse = { id: 'test-credential' };\n      const mockVerifyResult = {\n        verified: true,\n        user: { id: 'user-id', email: 'test@example.com' },\n        access_token: 'access-token',\n        refresh_token: 'refresh-token',\n      };\n\n      mockSupabase.functions.invoke\n        .mockResolvedValueOnce({\n          data: {\n            userId: 'user-id',\n            challenge: 'auth-challenge',\n            allowCredentials: [],\n          },\n          error: null,\n        })\n        .mockResolvedValueOnce({\n          data: mockVerifyResult,\n          error: null,\n        });\n\n      mockStartAuthentication.mockResolvedValue(mockAssertionResponse);\n\n      const result = await authenticateWithPasskey(mockOptions);\n\n      expect(result).toEqual(mockVerifyResult);\n\n      expect(mockSupabase.functions.invoke).toHaveBeenCalledWith(\n        'passkey-auth-challenge',\n        { body: { email: 'test@example.com' } }\n      );\n\n      expect(mockStartAuthentication).toHaveBeenCalledWith({\n        optionsJSON: { challenge: 'auth-challenge', allowCredentials: [] },\n      });\n\n      expect(mockSupabase.functions.invoke).toHaveBeenCalledWith(\n        'passkey-auth-verify',\n        { body: { userId: 'user-id', assertionResponse: mockAssertionResponse } }\n      );\n    });\n\n    it('throws error when browser does not support WebAuthn', async () => {\n      mockBrowserSupportsWebAuthn.mockReturnValue(false);\n\n      await expect(authenticateWithPasskey(mockOptions)).rejects.toThrow(\n        'Your browser does not support passkeys'\n      );\n    });\n\n    it('throws error when challenge request fails', async () => {\n      mockSupabase.functions.invoke.mockResolvedValue({\n        data: null,\n        error: { message: 'Challenge failed' },\n      });\n\n      await expect(authenticateWithPasskey(mockOptions)).rejects.toThrow('Challenge failed');\n    });\n\n    it('throws error when verification fails', async () => {\n      mockSupabase.functions.invoke\n        .mockResolvedValueOnce({\n          data: { userId: 'user-id', challenge: 'challenge' },\n          error: null,\n        })\n        .mockResolvedValueOnce({\n          data: null,\n          error: { message: 'Verification failed' },\n        });\n\n      mockStartAuthentication.mockResolvedValue({ id: 'test-credential' });\n\n      await expect(authenticateWithPasskey(mockOptions)).rejects.toThrow('Verification failed');\n    });\n  });\n\n  describe('fetchUserPasskeys', () => {\n    it('successfully fetches passkeys', async () => {\n      const mockPasskeys = [\n        {\n          credential_id: 'cred-1',\n          friendly_name: 'Device 1',\n          created_at: '2024-01-01T00:00:00Z',\n          device_type: 'multi_device' as const,\n        },\n        {\n          credential_id: 'cred-2',\n          friendly_name: null,\n          created_at: '2024-01-02T00:00:00Z',\n          device_type: 'single_device' as const,\n        },\n      ];\n\n      mockSupabase.from.mockReturnValue({\n        select: jest.fn().mockReturnValue({\n          order: jest.fn().mockResolvedValue({\n            data: mockPasskeys,\n            error: null,\n          }),\n        }),\n      });\n\n      const result = await fetchUserPasskeys();\n\n      expect(result).toEqual(mockPasskeys);\n      expect(mockSupabase.from).toHaveBeenCalledWith('ai_passkeys');\n    });\n\n    it('throws error when fetch fails', async () => {\n      mockSupabase.from.mockReturnValue({\n        select: jest.fn().mockReturnValue({\n          order: jest.fn().mockResolvedValue({\n            data: null,\n            error: { message: 'Fetch failed' },\n          }),\n        }),\n      });\n\n      await expect(fetchUserPasskeys()).rejects.toThrow('Failed to load passkeys');\n    });\n\n    it('returns empty array when no passkeys exist', async () => {\n      mockSupabase.from.mockReturnValue({\n        select: jest.fn().mockReturnValue({\n          order: jest.fn().mockResolvedValue({\n            data: null,\n            error: null,\n          }),\n        }),\n      });\n\n      const result = await fetchUserPasskeys();\n\n      expect(result).toEqual([]);\n    });\n  });\n\n  describe('deletePasskey', () => {\n    it('successfully deletes a passkey', async () => {\n      await deletePasskey('test-credential-id');\n\n      expect(mockSupabase.from).toHaveBeenCalledWith('ai_passkeys');\n    });\n\n    it('throws error when deletion fails', async () => {\n      mockSupabase.from.mockReturnValue({\n        delete: jest.fn().mockReturnValue({\n          eq: jest.fn().mockResolvedValue({\n            data: null,\n            error: { message: 'Deletion failed' },\n          }),\n        }),\n      });\n\n      await expect(deletePasskey('test-credential-id')).rejects.toThrow('Deletion failed');\n    });\n  });\n\n  describe('establishPasskeySession', () => {\n    it('sets session with provided tokens', async () => {\n      const authResult = {\n        verified: true,\n        access_token: 'access-token',\n        refresh_token: 'refresh-token',\n      };\n\n      mockSupabase.auth.setSession.mockResolvedValue({\n        data: { session: {} },\n        error: null,\n      });\n\n      await establishPasskeySession(authResult);\n\n      expect(mockSupabase.auth.setSession).toHaveBeenCalledWith({\n        access_token: 'access-token',\n        refresh_token: 'refresh-token',\n      });\n    });\n\n    it('refreshes session when no tokens provided', async () => {\n      const authResult = { verified: true };\n\n      mockSupabase.auth.refreshSession.mockResolvedValue({\n        data: { session: {} },\n        error: null,\n      });\n\n      await establishPasskeySession(authResult);\n\n      expect(mockSupabase.auth.refreshSession).toHaveBeenCalled();\n    });\n\n    it('throws error when verification failed', async () => {\n      const authResult = { verified: false };\n\n      await expect(establishPasskeySession(authResult)).rejects.toThrow(\n        'Passkey verification failed'\n      );\n    });\n\n    it('throws error when session establishment fails', async () => {\n      const authResult = {\n        verified: true,\n        access_token: 'access-token',\n        refresh_token: 'refresh-token',\n      };\n\n      mockSupabase.auth.setSession.mockResolvedValue({\n        data: null,\n        error: { message: 'Session failed' },\n      });\n\n      await expect(establishPasskeySession(authResult)).rejects.toThrow('Session failed');\n    });\n  });\n\n  describe('handlePasskeyError', () => {\n    beforeEach(() => {\n      jest.spyOn(console, 'error').mockImplementation(() => {});\n    });\n\n    afterEach(() => {\n      jest.restoreAllMocks();\n    });\n\n    it('handles user cancellation error', () => {\n      const error = new Error('User cancelled');\n      \n      handlePasskeyError(error, 'registration');\n\n      expect(mockToast.error).toHaveBeenCalledWith('Passkey registration was cancelled');\n    });\n\n    it('handles not supported error', () => {\n      const error = new Error('not supported');\n      \n      handlePasskeyError(error, 'authentication');\n\n      expect(mockToast.error).toHaveBeenCalledWith('Your browser does not support passkeys');\n    });\n\n    it('handles timeout error', () => {\n      const error = new Error('timeout occurred');\n      \n      handlePasskeyError(error, 'registration');\n\n      expect(mockToast.error).toHaveBeenCalledWith('Passkey registration timed out. Please try again.');\n    });\n\n    it('handles generic error', () => {\n      const error = new Error('Generic error');\n      \n      handlePasskeyError(error, 'authentication');\n\n      expect(mockToast.error).toHaveBeenCalledWith('Generic error');\n    });\n\n    it('handles non-Error objects', () => {\n      const error = 'String error';\n      \n      handlePasskeyError(error, 'registration');\n\n      expect(mockToast.error).toHaveBeenCalledWith('Passkey registration failed');\n    });\n\n    it('logs error to console', () => {\n      const error = new Error('Test error');\n      \n      handlePasskeyError(error, 'registration');\n\n      expect(console.error).toHaveBeenCalledWith('[Passkey] registration failed:', error);\n    });\n  });\n}); ","usedDeprecatedRules":[]},{"filePath":"/home/vonj/Github/Nexus/__tests__/pages/analytics/DataWarehouseHome.test.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/vonj/Github/Nexus/__tests__/pages/settings/SecuritySettings.test.tsx","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":66,"column":10,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":66,"endColumn":13,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2263,2266],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2263,2266],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":70,"column":10,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":70,"endColumn":13,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2334,2337],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2334,2337],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"no-restricted-syntax","severity":1,"message":"Use design tokens instead of hardcoded text colors (e.g., text-foreground, text-muted-foreground)","line":388,"column":71,"nodeType":"Literal","messageId":"restrictedSyntax","endLine":388,"endColumn":87},{"ruleId":"no-restricted-syntax","severity":1,"message":"Use design tokens instead of hardcoded text colors (e.g., text-foreground, text-muted-foreground)","line":389,"column":77,"nodeType":"Literal","messageId":"restrictedSyntax","endLine":389,"endColumn":93},{"ruleId":"no-restricted-syntax","severity":1,"message":"Use design tokens instead of hardcoded text colors (e.g., text-foreground, text-muted-foreground)","line":390,"column":67,"nodeType":"Literal","messageId":"restrictedSyntax","endLine":390,"endColumn":83}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React from 'react';\nimport { render, screen, fireEvent, waitFor } from '@testing-library/react';\nimport { toast } from 'sonner';\nimport SecuritySettings from '../../../src/pages/settings/SecuritySettings';\nimport { useAuth } from '../../../src/contexts/AuthContext';\nimport { useNotifications } from '../../../src/contexts/NotificationContext';\nimport { supabase } from '../../../src/lib/supabase';\nimport { browserSupportsWebAuthn, startRegistration } from '@simplewebauthn/browser';\n\n// Mock dependencies\njest.mock('sonner');\njest.mock('../../../src/contexts/AuthContext');\njest.mock('../../../src/contexts/NotificationContext');\njest.mock('../../../src/lib/supabase');\njest.mock('@simplewebauthn/browser');\n\nconst mockUseAuth = useAuth as jest.MockedFunction<typeof useAuth>;\nconst mockUseNotifications = useNotifications as jest.MockedFunction<typeof useNotifications>;\nconst mockSupabase = supabase as jest.Mocked<typeof supabase>;\nconst mockBrowserSupportsWebAuthn = browserSupportsWebAuthn as jest.MockedFunction<typeof browserSupportsWebAuthn>;\nconst mockStartRegistration = startRegistration as jest.MockedFunction<typeof startRegistration>;\nconst mockToast = toast as jest.Mocked<typeof toast>;\n\ndescribe('SecuritySettings - Passkey Functionality', () => {\n  const mockUser = {\n    id: 'test-user-id',\n    email: 'test@example.com',\n  };\n\n  const mockAddNotification = jest.fn();\n\n  beforeEach(() => {\n    jest.clearAllMocks();\n    \n    mockUseAuth.mockReturnValue({\n      user: mockUser,\n      loading: false,\n      signOut: jest.fn(),\n    });\n\n    mockUseNotifications.mockReturnValue({\n      addNotification: mockAddNotification,\n      notifications: [],\n      removeNotification: jest.fn(),\n    });\n\n    mockBrowserSupportsWebAuthn.mockReturnValue(true);\n\n    // Mock Supabase client methods\n    mockSupabase.from = jest.fn().mockReturnValue({\n      select: jest.fn().mockReturnValue({\n        eq: jest.fn().mockReturnValue({\n          single: jest.fn(),\n        }),\n      }),\n      delete: jest.fn().mockReturnValue({\n        eq: jest.fn(),\n      }),\n    });\n\n    mockSupabase.auth = {\n      getSession: jest.fn().mockResolvedValue({\n        data: { session: { access_token: 'mock-token' } },\n      }),\n      updateUser: jest.fn(),\n    } as any;\n\n    mockSupabase.functions = {\n      invoke: jest.fn(),\n    } as any;\n  });\n\n  describe('Passkey Support Detection', () => {\n    it('shows fallback banner when WebAuthn is not supported', () => {\n      mockBrowserSupportsWebAuthn.mockReturnValue(false);\n      \n      render(<SecuritySettings />);\n      \n      expect(screen.getByText('Passkeys not supported')).toBeInTheDocument();\n      expect(screen.getByText(/Your browser doesn't support passkeys/)).toBeInTheDocument();\n    });\n\n    it('disables add passkey button when WebAuthn is not supported', () => {\n      mockBrowserSupportsWebAuthn.mockReturnValue(false);\n      \n      render(<SecuritySettings />);\n      \n      const addButton = screen.getByRole('button', { name: /add passkey/i });\n      expect(addButton).toBeDisabled();\n    });\n\n    it('enables add passkey button when WebAuthn is supported', () => {\n      mockBrowserSupportsWebAuthn.mockReturnValue(true);\n      \n      render(<SecuritySettings />);\n      \n      const addButton = screen.getByRole('button', { name: /add passkey/i });\n      expect(addButton).not.toBeDisabled();\n    });\n  });\n\n  describe('Passkey Registration', () => {\n    beforeEach(() => {\n      // Mock successful passkey fetch (empty list)\n      mockSupabase.from.mockReturnValue({\n        select: jest.fn().mockReturnValue({\n          eq: jest.fn().mockResolvedValue({\n            data: [],\n            error: null,\n          }),\n        }),\n      });\n    });\n\n    it('opens dialog when add passkey button is clicked', async () => {\n      render(<SecuritySettings />);\n      \n      const addButton = screen.getByRole('button', { name: /add passkey/i });\n      fireEvent.click(addButton);\n      \n      await waitFor(() => {\n        expect(screen.getByText('Add New Passkey')).toBeInTheDocument();\n        expect(screen.getByText(/Give your passkey a name/)).toBeInTheDocument();\n      });\n    });\n\n    it('successfully registers a passkey with friendly name', async () => {\n      const mockAttestationResponse = { id: 'test-credential-id' };\n      \n      mockSupabase.functions.invoke\n        .mockResolvedValueOnce({\n          data: { challenge: 'test-challenge' },\n          error: null,\n        })\n        .mockResolvedValueOnce({\n          data: { verified: true },\n          error: null,\n        });\n\n      mockStartRegistration.mockResolvedValue(mockAttestationResponse);\n\n      render(<SecuritySettings />);\n      \n      // Open dialog\n      const addButton = screen.getByRole('button', { name: /add passkey/i });\n      fireEvent.click(addButton);\n      \n      await waitFor(() => {\n        expect(screen.getByText('Add New Passkey')).toBeInTheDocument();\n      });\n\n      // Enter friendly name\n      const nameInput = screen.getByLabelText(/passkey name/i);\n      fireEvent.change(nameInput, { target: { value: 'MacBook Touch ID' } });\n\n      // Click create passkey\n      const createButton = screen.getByRole('button', { name: /create passkey/i });\n      fireEvent.click(createButton);\n\n      await waitFor(() => {\n        expect(mockSupabase.functions.invoke).toHaveBeenCalledWith(\n          'passkey-register-challenge',\n          {\n            body: { userId: mockUser.id, friendlyName: 'MacBook Touch ID' },\n            headers: { Authorization: 'Bearer mock-token' },\n          }\n        );\n      });\n\n      await waitFor(() => {\n        expect(mockStartRegistration).toHaveBeenCalledWith({\n          optionsJSON: { challenge: 'test-challenge' },\n        });\n      });\n\n      await waitFor(() => {\n        expect(mockSupabase.functions.invoke).toHaveBeenCalledWith(\n          'passkey-register-verify',\n          {\n            body: {\n              userId: mockUser.id,\n              attestationResponse: mockAttestationResponse,\n              friendlyName: 'MacBook Touch ID',\n            },\n          }\n        );\n      });\n\n      await waitFor(() => {\n        expect(mockToast.success).toHaveBeenCalledWith('Passkey added successfully');\n      });\n    });\n\n    it('handles registration errors gracefully', async () => {\n      mockSupabase.functions.invoke.mockRejectedValue(new Error('Registration failed'));\n\n      render(<SecuritySettings />);\n      \n      // Open dialog and attempt registration\n      const addButton = screen.getByRole('button', { name: /add passkey/i });\n      fireEvent.click(addButton);\n      \n      await waitFor(() => {\n        expect(screen.getByText('Add New Passkey')).toBeInTheDocument();\n      });\n\n      const createButton = screen.getByRole('button', { name: /create passkey/i });\n      fireEvent.click(createButton);\n\n      await waitFor(() => {\n        expect(mockToast.error).toHaveBeenCalledWith('Registration failed');\n      });\n    });\n\n    it('shows error when user is not authenticated', async () => {\n      mockUseAuth.mockReturnValue({\n        user: null,\n        loading: false,\n        signOut: jest.fn(),\n      });\n\n      render(<SecuritySettings />);\n      \n      const addButton = screen.getByRole('button', { name: /add passkey/i });\n      fireEvent.click(addButton);\n      \n      await waitFor(() => {\n        expect(screen.getByText('Add New Passkey')).toBeInTheDocument();\n      });\n\n      const createButton = screen.getByRole('button', { name: /create passkey/i });\n      fireEvent.click(createButton);\n\n      await waitFor(() => {\n        expect(mockToast.error).toHaveBeenCalledWith('You must be signed in to register a passkey');\n      });\n    });\n  });\n\n  describe('Passkey Management', () => {\n    const mockPasskeys = [\n      {\n        credential_id: 'test-cred-1',\n        friendly_name: 'MacBook Touch ID',\n        created_at: '2024-01-01T00:00:00Z',\n        device_type: 'multi_device',\n      },\n      {\n        credential_id: 'test-cred-2',\n        friendly_name: null,\n        created_at: '2024-01-02T00:00:00Z',\n        device_type: 'single_device',\n      },\n    ];\n\n    beforeEach(() => {\n      // Mock passkey fetch with existing passkeys\n      mockSupabase.from.mockReturnValue({\n        select: jest.fn().mockReturnValue({\n          eq: jest.fn().mockResolvedValue({\n            data: mockPasskeys,\n            error: null,\n          }),\n        }),\n        delete: jest.fn().mockReturnValue({\n          eq: jest.fn().mockResolvedValue({\n            data: null,\n            error: null,\n          }),\n        }),\n      });\n    });\n\n    it('displays existing passkeys correctly', async () => {\n      render(<SecuritySettings />);\n\n      await waitFor(() => {\n        expect(screen.getByText('MacBook Touch ID')).toBeInTheDocument();\n        expect(screen.getByText('Unnamed Passkey')).toBeInTheDocument();\n        expect(screen.getByText('Multi-device')).toBeInTheDocument();\n        expect(screen.getByText('Single-device')).toBeInTheDocument();\n      });\n    });\n\n    it('successfully deletes a passkey', async () => {\n      render(<SecuritySettings />);\n\n      await waitFor(() => {\n        expect(screen.getByText('MacBook Touch ID')).toBeInTheDocument();\n      });\n\n      // Find and click delete button for first passkey\n      const deleteButtons = screen.getAllByRole('button', { name: '' }); // Trash icon buttons\n      fireEvent.click(deleteButtons[0]);\n\n      await waitFor(() => {\n        expect(mockSupabase.from).toHaveBeenCalledWith('ai_passkeys');\n      });\n\n      await waitFor(() => {\n        expect(mockToast.success).toHaveBeenCalledWith('Passkey deleted successfully');\n      });\n    });\n\n    it('handles deletion errors gracefully', async () => {\n      // Mock deletion error\n      mockSupabase.from.mockReturnValue({\n        select: jest.fn().mockReturnValue({\n          eq: jest.fn().mockResolvedValue({\n            data: mockPasskeys,\n            error: null,\n          }),\n        }),\n        delete: jest.fn().mockReturnValue({\n          eq: jest.fn().mockRejectedValue(new Error('Deletion failed')),\n        }),\n      });\n\n      render(<SecuritySettings />);\n\n      await waitFor(() => {\n        expect(screen.getByText('MacBook Touch ID')).toBeInTheDocument();\n      });\n\n      const deleteButtons = screen.getAllByRole('button', { name: '' });\n      fireEvent.click(deleteButtons[0]);\n\n      await waitFor(() => {\n        expect(mockToast.error).toHaveBeenCalledWith('Deletion failed');\n      });\n    });\n  });\n\n  describe('Password Change Functionality', () => {\n    it('successfully updates password', async () => {\n      mockSupabase.auth.updateUser.mockResolvedValue({\n        data: { user: mockUser },\n        error: null,\n      });\n\n      render(<SecuritySettings />);\n\n      // Fill in password form\n      fireEvent.change(screen.getByLabelText(/current password/i), {\n        target: { value: 'oldpassword' },\n      });\n      fireEvent.change(screen.getByLabelText(/new password/i), {\n        target: { value: 'NewPassword123' },\n      });\n      fireEvent.change(screen.getByLabelText(/confirm new password/i), {\n        target: { value: 'NewPassword123' },\n      });\n\n      // Submit form\n      const updateButton = screen.getByRole('button', { name: /update password/i });\n      fireEvent.click(updateButton);\n\n      await waitFor(() => {\n        expect(mockSupabase.auth.updateUser).toHaveBeenCalledWith({\n          password: 'NewPassword123',\n        });\n      });\n\n      await waitFor(() => {\n        expect(mockAddNotification).toHaveBeenCalledWith({\n          message: 'Password updated successfully',\n          type: 'success',\n        });\n      });\n    });\n\n    it('validates password requirements', () => {\n      render(<SecuritySettings />);\n\n      const newPasswordInput = screen.getByLabelText(/new password/i);\n      \n      // Test weak password\n      fireEvent.change(newPasswordInput, { target: { value: 'weak' } });\n      \n      // Check validation indicators\n      expect(screen.getByText('• At least 8 characters')).toHaveClass('text-muted-foreground');\n      expect(screen.getByText('• At least 1 uppercase letter')).toHaveClass('text-muted-foreground');\n      expect(screen.getByText('• At least 1 number')).toHaveClass('text-muted-foreground');\n\n      // Test strong password\n      fireEvent.change(newPasswordInput, { target: { value: 'StrongPassword123' } });\n      \n      expect(screen.getByText('• At least 8 characters')).toHaveClass('text-green-500');\n      expect(screen.getByText('• At least 1 uppercase letter')).toHaveClass('text-green-500');\n      expect(screen.getByText('• At least 1 number')).toHaveClass('text-green-500');\n    });\n  });\n}); ","usedDeprecatedRules":[]},{"filePath":"/home/vonj/Github/Nexus/__tests__/security/logger.test.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":16,"column":37,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":16,"endColumn":40,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[398,401],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[398,401],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { logger } from '../../src/lib/security/logger';\n\n// Mock console methods\nconst originalConsole = global.console;\nconst mockConsole = {\n  log: jest.fn(),\n  error: jest.fn(),\n  warn: jest.fn(),\n  info: jest.fn(),\n  debug: jest.fn(),\n};\n\ndescribe('Security Logger - Production Readiness', () => {\n  beforeAll(() => {\n    // Replace console methods globally\n    global.console = mockConsole as any;\n  });\n\n  afterAll(() => {\n    // Restore original console\n    global.console = originalConsole;\n  });\n\n  beforeEach(() => {\n    // Clear all mocks before each test\n    Object.values(mockConsole).forEach(mock => mock.mockClear());\n    process.env.NODE_ENV = 'test';\n  });\n\n  afterEach(() => {\n    delete process.env.NODE_ENV;\n  });\n\n  describe('Core Logging Functions', () => {\n    it('should log info messages', () => {\n      logger.info('Test info message');\n      expect(mockConsole.info).toHaveBeenCalledWith('ℹ️ INFO:', 'Test info message');\n    });\n\n    it('should log error messages', () => {\n      const error = new Error('Test error');\n      logger.error(error, 'Test error message');\n      expect(mockConsole.error).toHaveBeenCalledWith(error, 'Test error message');\n    });\n\n    it('should log warning messages', () => {\n      logger.warn('Test warning');\n      expect(mockConsole.warn).toHaveBeenCalledWith('Test warning');\n    });\n  });\n\n  describe('Security Features', () => {\n    it('should filter sensitive data from logs', () => {\n      const sensitiveData = 'My email is user@example.com and token is sk_live_1234567890abcdef';\n      logger.info(sensitiveData);\n      \n      // Check that the call was made with filtered data\n      expect(mockConsole.info).toHaveBeenCalled();\n      const calledWith = mockConsole.info.mock.calls[0][1];\n      expect(calledWith).toContain('[REDACTED]');\n      expect(calledWith).not.toContain('user@example.com');\n      expect(calledWith).not.toContain('sk_live_');\n    });\n\n    it('should always log security events', () => {\n      logger.security('Security event test', { userId: 'test-123' });\n      expect(mockConsole.warn).toHaveBeenCalledWith(\n        '🔒 SECURITY:',\n        expect.objectContaining({\n          type: 'SECURITY',\n          message: 'Security event test'\n        })\n      );\n    });\n  });\n\n  describe('Production Behavior', () => {\n    beforeEach(() => {\n      process.env.NODE_ENV = 'production';\n    });\n\n    it('should still log errors in production', () => {\n      logger.error('Production error test');\n      expect(mockConsole.error).toHaveBeenCalledWith('Production error test');\n    });\n\n    it('should still log security events in production', () => {\n      logger.security('Production security event');\n      expect(mockConsole.warn).toHaveBeenCalledWith(\n        '🔒 SECURITY:',\n        expect.objectContaining({\n          message: 'Production security event'\n        })\n      );\n    });\n  });\n}); ","usedDeprecatedRules":[]},{"filePath":"/home/vonj/Github/Nexus/__tests__/security/rls.test.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/vonj/Github/Nexus/__tests__/setup.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/vonj/Github/Nexus/__tests__/stores/aiChatStore.integration.test.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/vonj/Github/Nexus/__tests__/stores/useAIChatStore.test.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/vonj/Github/Nexus/__tests__/unit/utils.test.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/vonj/Github/Nexus/archive/replaced/ChatPage.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'_' is defined but never used.","line":279,"column":22,"nodeType":null,"messageId":"unusedVar","endLine":279,"endColumn":23},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":310,"column":37,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":310,"endColumn":40,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[11150,11153],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[11150,11153],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState, useEffect } from 'react';\nimport { useLocation, useNavigate } from 'react-router-dom';\nimport { \n  Plus, \n  Menu, \n  Search, \n  MessageSquare, \n  Trash2, \n  Edit, \n  Share,\n  Download,\n  Settings,\n  Sparkles,\n  Clock,\n  ArrowLeft\n} from 'lucide-react';\nimport { useAuth } from '@/contexts/AuthContext';\nimport { ModernExecutiveAssistant } from '@/components/ai/enhanced/ModernExecutiveAssistant';\nimport { formatDistanceToNow } from 'date-fns';\n\n/**\n * Full-featured Chat Page (ChatGPT/Claude style)\n */\ninterface Conversation {\n  id: string;\n  title: string;\n  lastMessage: string;\n  timestamp: Date;\n  messageCount: number;\n}\n\n/**\n * Conversation Sidebar Component\n */\nconst ConversationSidebar: React.FC<{\n  conversations: Conversation[];\n  activeConversationId: string | null;\n  onSelectConversation: (id: string) => void;\n  onNewConversation: () => void;\n  onDeleteConversation: (id: string) => void;\n  onRenameConversation: (id: string, newTitle: string) => void;\n  isCollapsed: boolean;\n  onToggleCollapse: () => void;\n}> = ({\n  conversations,\n  activeConversationId,\n  onSelectConversation,\n  onNewConversation,\n  onDeleteConversation,\n  onRenameConversation,\n  isCollapsed,\n  onToggleCollapse\n}) => {\n  const [searchQuery, setSearchQuery] = useState('');\n  const [editingId, setEditingId] = useState<string | null>(null);\n  const [editTitle, setEditTitle] = useState('');\n\n  const filteredConversations = conversations.filter(conv =>\n    conv.title.toLowerCase().includes(searchQuery.toLowerCase()) ||\n    conv.lastMessage.toLowerCase().includes(searchQuery.toLowerCase())\n  );\n\n  const handleRename = (id: string) => {\n    if (editTitle.trim()) {\n      onRenameConversation(id, editTitle.trim());\n    }\n    setEditingId(null);\n    setEditTitle('');\n  };\n\n  const startEdit = (conv: Conversation) => {\n    setEditingId(conv.id);\n    setEditTitle(conv.title);\n  };\n\n  if (isCollapsed) {\n    return (\n      <div className=\"w-16 bg-muted/30 border-r border-border flex flex-col items-center py-4 gap-2\">\n        <button\n          onClick={onToggleCollapse}\n          className=\"p-2 rounded-lg hover:bg-muted transition-colors\"\n          title=\"Expand sidebar\"\n        >\n          <Menu className=\"w-5 h-5\" />\n        </button>\n        <button\n          onClick={onNewConversation}\n          className=\"p-2 rounded-lg hover:bg-muted transition-colors\"\n          title=\"New conversation\"\n        >\n          <Plus className=\"w-5 h-5\" />\n        </button>\n        <div className=\"flex-1\" />\n        {/* Recent conversations indicators */}\n        {conversations.slice(0, 5).map((conv) => (\n          <button\n            key={conv.id}\n            onClick={() => onSelectConversation(conv.id)}\n            className={`w-8 h-8 rounded-lg flex items-center justify-center transition-colors ${\n              conv.id === activeConversationId\n                ? 'bg-primary text-primary-foreground'\n                : 'bg-muted hover:bg-muted/80'\n            }`}\n            title={conv.title}\n          >\n            <MessageSquare className=\"w-4 h-4\" />\n          </button>\n        ))}\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"w-80 bg-muted/30 border-r border-border flex flex-col\">\n      {/* Header */}\n      <div className=\"p-4 border-b border-border\">\n        <div className=\"flex items-center justify-between mb-3\">\n          <h2 className=\"font-semibold text-foreground\">Conversations</h2>\n          <div className=\"flex items-center gap-1\">\n            <button\n              onClick={onNewConversation}\n              className=\"p-2 rounded-lg hover:bg-muted transition-colors\"\n              title=\"New conversation\"\n            >\n              <Plus className=\"w-4 h-4\" />\n            </button>\n            <button\n              onClick={onToggleCollapse}\n              className=\"p-2 rounded-lg hover:bg-muted transition-colors\"\n              title=\"Collapse sidebar\"\n            >\n              <Menu className=\"w-4 h-4\" />\n            </button>\n          </div>\n        </div>\n        \n        {/* Search */}\n        <div className=\"relative\">\n          <Search className=\"absolute left-3 top-1/2 -translate-y-1/2 w-4 h-4 text-muted-foreground\" />\n          <input\n            value={searchQuery}\n            onChange={(e) => setSearchQuery(e.target.value)}\n            placeholder=\"Search conversations...\"\n            className=\"w-full pl-10 pr-4 py-2 bg-background border border-border rounded-lg text-sm focus:outline-none focus:ring-2 focus:ring-primary\"\n          />\n        </div>\n      </div>\n\n      {/* Conversations List */}\n      <div className=\"flex-1 overflow-y-auto p-2\">\n        {filteredConversations.length === 0 ? (\n          <div className=\"text-center py-8\">\n            <MessageSquare className=\"w-8 h-8 mx-auto text-muted-foreground mb-2\" />\n            <p className=\"text-sm text-muted-foreground\">\n              {searchQuery ? 'No conversations found' : 'Start a new conversation'}\n            </p>\n          </div>\n        ) : (\n          <div className=\"space-y-1\">\n            {filteredConversations.map((conversation) => (\n              <div\n                key={conversation.id}\n                className={`group p-4 rounded-lg cursor-pointer transition-colors ${\n                  conversation.id === activeConversationId\n                    ? 'bg-primary/10 border border-primary/20'\n                    : 'hover:bg-muted/50'\n                }`}\n                onClick={() => onSelectConversation(conversation.id)}\n              >\n                <div className=\"flex items-start justify-between\">\n                  <div className=\"flex-1 min-w-0\">\n                    {editingId === conversation.id ? (\n                      <input\n                        value={editTitle}\n                        onChange={(e) => setEditTitle(e.target.value)}\n                        onBlur={() => handleRename(conversation.id)}\n                        onKeyDown={(e) => {\n                          if (e.key === 'Enter') handleRename(conversation.id);\n                          if (e.key === 'Escape') {\n                            setEditingId(null);\n                            setEditTitle('');\n                          }\n                        }}\n                        className=\"w-full bg-background border border-border rounded px-2 py-1 text-sm\"\n                        autoFocus\n                        onClick={(e) => e.stopPropagation()}\n                      />\n                    ) : (\n                      <h3 className=\"font-medium text-sm text-foreground truncate mb-1\">\n                        {conversation.title}\n                      </h3>\n                    )}\n                    \n                    <p className=\"text-xs text-muted-foreground truncate mb-2\">\n                      {conversation.lastMessage}\n                    </p>\n                    \n                    <div className=\"flex items-center gap-2 text-xs text-muted-foreground\">\n                      <Clock className=\"w-3 h-3\" />\n                      <span>{formatDistanceToNow(conversation.timestamp, { addSuffix: true })}</span>\n                      <span>•</span>\n                      <span>{conversation.messageCount} messages</span>\n                    </div>\n                  </div>\n                  \n                  {/* Actions */}\n                  <div className=\"opacity-0 group-hover:opacity-100 transition-opacity ml-2\">\n                    <div className=\"flex flex-col gap-1\">\n                      <button\n                        onClick={(e) => {\n                          e.stopPropagation();\n                          startEdit(conversation);\n                        }}\n                        className=\"p-1 rounded hover:bg-muted transition-colors\"\n                        title=\"Rename\"\n                      >\n                        <Edit className=\"w-3 h-3\" />\n                      </button>\n                      <button\n                        onClick={(e) => {\n                          e.stopPropagation();\n                          if (window.confirm('Delete this conversation?')) {\n                            onDeleteConversation(conversation.id);\n                          }\n                        }}\n                        className=\"p-1 rounded hover:bg-destructive/20 text-destructive transition-colors\"\n                        title=\"Delete\"\n                      >\n                        <Trash2 className=\"w-3 h-3\" />\n                      </button>\n                    </div>\n                  </div>\n                </div>\n              </div>\n            ))}\n          </div>\n        )}\n      </div>\n    </div>\n  );\n};\n\n/**\n * Main Chat Page Component\n */\nexport const ChatPage: React.FC = () => {\n  const { user, loading } = useAuth();\n  const location = useLocation();\n  const navigate = useNavigate();\n  \n  const [conversations, setConversations] = useState<Conversation[]>([]);\n  \n  const [activeConversationId, setActiveConversationId] = useState<string | null>(null);\n  const [sidebarCollapsed, setSidebarCollapsed] = useState(false);\n\n  // Load conversations from database\n  useEffect(() => {\n    const loadConversations = async () => {\n      if (!user) return;\n\n      try {\n        const { chatHistory } = await import('@/lib/supabase');\n        const recentConversations = await chatHistory.getRecentConversations(50);\n        \n        if (recentConversations) {\n          const uuidRegex = /^[0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$/i;\n          const validConvs = recentConversations.filter(c => uuidRegex.test(c.id));\n          \n          const withStats: Conversation[] = await Promise.all(validConvs.map(async (conv) => {\n            try {\n              const msgs = await chatHistory.getConversationHistory(conv.id);\n              return {\n                id: conv.id,\n                title: conv.title || 'Untitled Conversation',\n                lastMessage: msgs[msgs.length - 1]?.content || '',\n                timestamp: new Date(conv.updated_at || conv.created_at || new Date()),\n                messageCount: msgs.length,\n              } as Conversation;\n            } catch (_) {\n              return {\n                id: conv.id,\n                title: conv.title || 'Untitled Conversation',\n                lastMessage: '',\n                timestamp: new Date(conv.updated_at || conv.created_at || new Date()),\n                messageCount: 0,\n              } as Conversation;\n            }\n          }));\n          \n          // Exclude conversations that have no messages\n          const nonEmpty = withStats.filter((c) => c.messageCount > 0);\n          \n          setConversations(nonEmpty);\n          \n          // Set first conversation as active if none selected\n          if (!activeConversationId && withStats.length > 0) {\n            setActiveConversationId(withStats[0].id);\n          }\n        }\n      } catch (error) {\n        console.error('Failed to load conversations:', error);\n      }\n    };\n\n    loadConversations();\n  }, [user, activeConversationId]);\n\n  // Import context from quick chat if available\n  useEffect(() => {\n    const state = location.state as any;\n    if (state?.quickChatHistory && state.quickChatHistory.length > 0) {\n      // Create new conversation from quick chat\n      const newConv: Conversation = {\n        id: `quick-${Date.now()}`,\n        title: state.quickChatHistory[0].content.slice(0, 50) + '...',\n        lastMessage: state.quickChatHistory[state.quickChatHistory.length - 1].content,\n        timestamp: new Date(),\n        messageCount: state.quickChatHistory.length\n      };\n      \n      setConversations(prev => [newConv, ...prev]);\n      setActiveConversationId(newConv.id);\n      \n      // Clear location state\n      navigate(location.pathname, { replace: true });\n    }\n  }, [location.state, navigate, location.pathname]);\n\n  const handleNewConversation = async () => {\n    if (!user) return;\n    \n    try {\n      const { chatHistory } = await import('@/lib/supabase');\n      const { executiveAgent } = await import('@/lib/agentRegistry');\n      \n      const conversation = await chatHistory.createConversation(\n        'New Conversation',\n        executiveAgent.id,\n        { user_id: user.id }\n      );\n      \n      const newConv: Conversation = {\n        id: conversation.id,\n        title: conversation.title,\n        lastMessage: '',\n        timestamp: new Date(conversation.created_at || new Date()),\n        messageCount: 0\n      };\n      \n      setConversations(prev => [newConv, ...prev]);\n      setActiveConversationId(newConv.id);\n    } catch (error) {\n      console.error('Failed to create conversation:', error);\n    }\n  };\n\n  const handleDeleteConversation = async (id: string) => {\n    try {\n      // You'll need to implement a delete function in your chatHistory service\n      // For now, just remove from local state\n      setConversations(prev => prev.filter(conv => conv.id !== id));\n      if (activeConversationId === id) {\n        const remaining = conversations.filter(conv => conv.id !== id);\n        setActiveConversationId(remaining[0]?.id || null);\n      }\n    } catch (error) {\n      console.error('Failed to delete conversation:', error);\n    }\n  };\n\n  const handleRenameConversation = async (id: string, newTitle: string) => {\n    try {\n      const { chatHistory } = await import('@/lib/supabase');\n      await chatHistory.updateConversationTitle(id, newTitle);\n      \n      setConversations(prev =>\n        prev.map(conv =>\n          conv.id === id ? { ...conv, title: newTitle } : conv\n        )\n      );\n    } catch (error) {\n      console.error('Failed to rename conversation:', error);\n    }\n  };\n\n  const handleBackToDashboard = () => {\n    navigate('/');\n  };\n\n  // If user needs onboarding, show conversational onboarding in chat interface\n  if (loading) {\n    return (\n      <div className=\"h-screen bg-background flex items-center justify-center\">\n        <div className=\"text-center\">\n          <div className=\"animate-spin rounded-full h-12 w-12 border-b-2 border-primary mx-auto mb-4\"></div>\n          <p className=\"text-muted-foreground\">Loading Nexus...</p>\n        </div>\n      </div>\n    );\n  }\n\n  // Onboarding is skipped on the dedicated chat page\n\n  return (\n    <div className=\"h-screen bg-background flex\">\n      {/* Conversation Sidebar */}\n      <ConversationSidebar\n        conversations={conversations}\n        activeConversationId={activeConversationId}\n        onSelectConversation={setActiveConversationId}\n        onNewConversation={handleNewConversation}\n        onDeleteConversation={handleDeleteConversation}\n        onRenameConversation={handleRenameConversation}\n        isCollapsed={sidebarCollapsed}\n        onToggleCollapse={() => setSidebarCollapsed(!sidebarCollapsed)}\n      />\n\n      {/* Main Chat Area */}\n      <div className=\"flex-1 flex flex-col\">\n        {/* Top Bar */}\n        <div className=\"flex items-center justify-between p-4 border-b border-border bg-background/95 backdrop-blur-sm\">\n          <div className=\"flex items-center gap-4\">\n            <button\n              onClick={handleBackToDashboard}\n              className=\"p-2 rounded-lg hover:bg-muted transition-colors\"\n              title=\"Back to dashboard\"\n            >\n              <ArrowLeft className=\"w-4 h-4\" />\n            </button>\n            <div>\n              <h1 className=\"font-semibold text-foreground\">Nex Chat</h1>\n              <p className=\"text-xs text-muted-foreground\">\n                {conversations.find(c => c.id === activeConversationId)?.title || 'Select a conversation'}\n              </p>\n            </div>\n          </div>\n          \n          <div className=\"flex items-center gap-2\">\n            <button\n              className=\"p-2 rounded-lg hover:bg-muted transition-colors\"\n              title=\"Export conversation\"\n            >\n              <Download className=\"w-4 h-4\" />\n            </button>\n            <button\n              className=\"p-2 rounded-lg hover:bg-muted transition-colors\"\n              title=\"Share conversation\"\n            >\n              <Share className=\"w-4 h-4\" />\n            </button>\n            <button\n              className=\"p-2 rounded-lg hover:bg-muted transition-colors\"\n              title=\"Settings\"\n            >\n              <Settings className=\"w-4 h-4\" />\n            </button>\n          </div>\n        </div>\n\n        {/* Chat Interface */}\n        <div className=\"flex-1 overflow-hidden\">\n          {activeConversationId ? (\n            <ModernExecutiveAssistant \n              sessionId={activeConversationId}\n            />\n          ) : (\n            <div className=\"flex-1 flex items-center justify-center\">\n              <div className=\"text-center\">\n                <Sparkles className=\"w-16 h-16 mx-auto text-muted-foreground mb-4\" />\n                <h2 className=\"text-xl font-semibold text-foreground mb-2\">Welcome back to Nex</h2>\n                <p className=\"text-muted-foreground mb-6\">\n                  Select a conversation or start a new one to begin chatting\n                </p>\n                <button\n                  onClick={handleNewConversation}\n                  className=\"px-6 py-3 bg-primary text-primary-foreground rounded-lg hover:bg-primary/90 transition-colors\"\n                >\n                  Start New Conversation\n                </button>\n              </div>\n            </div>\n          )}\n        </div>\n      </div>\n    </div>\n  );\n};\n","usedDeprecatedRules":[]},{"filePath":"/home/vonj/Github/Nexus/coverage/block-navigation.js","messages":[{"ruleId":null,"message":"Unused eslint-disable directive (no problems were reported).","line":1,"column":1,"severity":1,"nodeType":null,"fix":{"range":[0,20],"text":" "}}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":1,"source":"/* eslint-disable */\nvar jumpToCode = (function init() {\n    // Classes of code we would like to highlight in the file view\n    var missingCoverageClasses = ['.cbranch-no', '.cstat-no', '.fstat-no'];\n\n    // Elements to highlight in the file listing view\n    var fileListingElements = ['td.pct.low'];\n\n    // We don't want to select elements that are direct descendants of another match\n    var notSelector = ':not(' + missingCoverageClasses.join('):not(') + ') > '; // becomes `:not(a):not(b) > `\n\n    // Selecter that finds elements on the page to which we can jump\n    var selector =\n        fileListingElements.join(', ') +\n        ', ' +\n        notSelector +\n        missingCoverageClasses.join(', ' + notSelector); // becomes `:not(a):not(b) > a, :not(a):not(b) > b`\n\n    // The NodeList of matching elements\n    var missingCoverageElements = document.querySelectorAll(selector);\n\n    var currentIndex;\n\n    function toggleClass(index) {\n        missingCoverageElements\n            .item(currentIndex)\n            .classList.remove('highlighted');\n        missingCoverageElements.item(index).classList.add('highlighted');\n    }\n\n    function makeCurrent(index) {\n        toggleClass(index);\n        currentIndex = index;\n        missingCoverageElements.item(index).scrollIntoView({\n            behavior: 'smooth',\n            block: 'center',\n            inline: 'center'\n        });\n    }\n\n    function goToPrevious() {\n        var nextIndex = 0;\n        if (typeof currentIndex !== 'number' || currentIndex === 0) {\n            nextIndex = missingCoverageElements.length - 1;\n        } else if (missingCoverageElements.length > 1) {\n            nextIndex = currentIndex - 1;\n        }\n\n        makeCurrent(nextIndex);\n    }\n\n    function goToNext() {\n        var nextIndex = 0;\n\n        if (\n            typeof currentIndex === 'number' &&\n            currentIndex < missingCoverageElements.length - 1\n        ) {\n            nextIndex = currentIndex + 1;\n        }\n\n        makeCurrent(nextIndex);\n    }\n\n    return function jump(event) {\n        if (\n            document.getElementById('fileSearch') === document.activeElement &&\n            document.activeElement != null\n        ) {\n            // if we're currently focused on the search input, we don't want to navigate\n            return;\n        }\n\n        switch (event.which) {\n            case 78: // n\n            case 74: // j\n                goToNext();\n                break;\n            case 66: // b\n            case 75: // k\n            case 80: // p\n                goToPrevious();\n                break;\n        }\n    };\n})();\nwindow.addEventListener('keydown', jumpToCode);\n","usedDeprecatedRules":[]},{"filePath":"/home/vonj/Github/Nexus/coverage/lcov-report/block-navigation.js","messages":[{"ruleId":null,"message":"Unused eslint-disable directive (no problems were reported).","line":1,"column":1,"severity":1,"nodeType":null,"fix":{"range":[0,20],"text":" "}}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":1,"source":"/* eslint-disable */\nvar jumpToCode = (function init() {\n    // Classes of code we would like to highlight in the file view\n    var missingCoverageClasses = ['.cbranch-no', '.cstat-no', '.fstat-no'];\n\n    // Elements to highlight in the file listing view\n    var fileListingElements = ['td.pct.low'];\n\n    // We don't want to select elements that are direct descendants of another match\n    var notSelector = ':not(' + missingCoverageClasses.join('):not(') + ') > '; // becomes `:not(a):not(b) > `\n\n    // Selecter that finds elements on the page to which we can jump\n    var selector =\n        fileListingElements.join(', ') +\n        ', ' +\n        notSelector +\n        missingCoverageClasses.join(', ' + notSelector); // becomes `:not(a):not(b) > a, :not(a):not(b) > b`\n\n    // The NodeList of matching elements\n    var missingCoverageElements = document.querySelectorAll(selector);\n\n    var currentIndex;\n\n    function toggleClass(index) {\n        missingCoverageElements\n            .item(currentIndex)\n            .classList.remove('highlighted');\n        missingCoverageElements.item(index).classList.add('highlighted');\n    }\n\n    function makeCurrent(index) {\n        toggleClass(index);\n        currentIndex = index;\n        missingCoverageElements.item(index).scrollIntoView({\n            behavior: 'smooth',\n            block: 'center',\n            inline: 'center'\n        });\n    }\n\n    function goToPrevious() {\n        var nextIndex = 0;\n        if (typeof currentIndex !== 'number' || currentIndex === 0) {\n            nextIndex = missingCoverageElements.length - 1;\n        } else if (missingCoverageElements.length > 1) {\n            nextIndex = currentIndex - 1;\n        }\n\n        makeCurrent(nextIndex);\n    }\n\n    function goToNext() {\n        var nextIndex = 0;\n\n        if (\n            typeof currentIndex === 'number' &&\n            currentIndex < missingCoverageElements.length - 1\n        ) {\n            nextIndex = currentIndex + 1;\n        }\n\n        makeCurrent(nextIndex);\n    }\n\n    return function jump(event) {\n        if (\n            document.getElementById('fileSearch') === document.activeElement &&\n            document.activeElement != null\n        ) {\n            // if we're currently focused on the search input, we don't want to navigate\n            return;\n        }\n\n        switch (event.which) {\n            case 78: // n\n            case 74: // j\n                goToNext();\n                break;\n            case 66: // b\n            case 75: // k\n            case 80: // p\n                goToPrevious();\n                break;\n        }\n    };\n})();\nwindow.addEventListener('keydown', jumpToCode);\n","usedDeprecatedRules":[]},{"filePath":"/home/vonj/Github/Nexus/coverage/lcov-report/prettify.js","messages":[{"ruleId":null,"message":"Unused eslint-disable directive (no problems were reported).","line":1,"column":1,"severity":1,"nodeType":null,"fix":{"range":[0,20],"text":" "}}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":1,"source":"/* eslint-disable */\nwindow.PR_SHOULD_USE_CONTINUATION=true;(function(){var h=[\"break,continue,do,else,for,if,return,while\"];var u=[h,\"auto,case,char,const,default,double,enum,extern,float,goto,int,long,register,short,signed,sizeof,static,struct,switch,typedef,union,unsigned,void,volatile\"];var p=[u,\"catch,class,delete,false,import,new,operator,private,protected,public,this,throw,true,try,typeof\"];var l=[p,\"alignof,align_union,asm,axiom,bool,concept,concept_map,const_cast,constexpr,decltype,dynamic_cast,explicit,export,friend,inline,late_check,mutable,namespace,nullptr,reinterpret_cast,static_assert,static_cast,template,typeid,typename,using,virtual,where\"];var x=[p,\"abstract,boolean,byte,extends,final,finally,implements,import,instanceof,null,native,package,strictfp,super,synchronized,throws,transient\"];var R=[x,\"as,base,by,checked,decimal,delegate,descending,dynamic,event,fixed,foreach,from,group,implicit,in,interface,internal,into,is,lock,object,out,override,orderby,params,partial,readonly,ref,sbyte,sealed,stackalloc,string,select,uint,ulong,unchecked,unsafe,ushort,var\"];var r=\"all,and,by,catch,class,else,extends,false,finally,for,if,in,is,isnt,loop,new,no,not,null,of,off,on,or,return,super,then,true,try,unless,until,when,while,yes\";var w=[p,\"debugger,eval,export,function,get,null,set,undefined,var,with,Infinity,NaN\"];var s=\"caller,delete,die,do,dump,elsif,eval,exit,foreach,for,goto,if,import,last,local,my,next,no,our,print,package,redo,require,sub,undef,unless,until,use,wantarray,while,BEGIN,END\";var I=[h,\"and,as,assert,class,def,del,elif,except,exec,finally,from,global,import,in,is,lambda,nonlocal,not,or,pass,print,raise,try,with,yield,False,True,None\"];var f=[h,\"alias,and,begin,case,class,def,defined,elsif,end,ensure,false,in,module,next,nil,not,or,redo,rescue,retry,self,super,then,true,undef,unless,until,when,yield,BEGIN,END\"];var H=[h,\"case,done,elif,esac,eval,fi,function,in,local,set,then,until\"];var A=[l,R,w,s+I,f,H];var e=/^(DIR|FILE|vector|(de|priority_)?queue|list|stack|(const_)?iterator|(multi)?(set|map)|bitset|u?(int|float)\\d*)/;var C=\"str\";var z=\"kwd\";var j=\"com\";var O=\"typ\";var G=\"lit\";var L=\"pun\";var F=\"pln\";var m=\"tag\";var E=\"dec\";var J=\"src\";var P=\"atn\";var n=\"atv\";var N=\"nocode\";var M=\"(?:^^\\\\.?|[+-]|\\\\!|\\\\!=|\\\\!==|\\\\#|\\\\%|\\\\%=|&|&&|&&=|&=|\\\\(|\\\\*|\\\\*=|\\\\+=|\\\\,|\\\\-=|\\\\->|\\\\/|\\\\/=|:|::|\\\\;|<|<<|<<=|<=|=|==|===|>|>=|>>|>>=|>>>|>>>=|\\\\?|\\\\@|\\\\[|\\\\^|\\\\^=|\\\\^\\\\^|\\\\^\\\\^=|\\\\{|\\\\||\\\\|=|\\\\|\\\\||\\\\|\\\\|=|\\\\~|break|case|continue|delete|do|else|finally|instanceof|return|throw|try|typeof)\\\\s*\";function k(Z){var ad=0;var S=false;var ac=false;for(var V=0,U=Z.length;V<U;++V){var ae=Z[V];if(ae.ignoreCase){ac=true}else{if(/[a-z]/i.test(ae.source.replace(/\\\\u[0-9a-f]{4}|\\\\x[0-9a-f]{2}|\\\\[^ux]/gi,\"\"))){S=true;ac=false;break}}}var Y={b:8,t:9,n:10,v:11,f:12,r:13};function ab(ah){var ag=ah.charCodeAt(0);if(ag!==92){return ag}var af=ah.charAt(1);ag=Y[af];if(ag){return ag}else{if(\"0\"<=af&&af<=\"7\"){return parseInt(ah.substring(1),8)}else{if(af===\"u\"||af===\"x\"){return parseInt(ah.substring(2),16)}else{return ah.charCodeAt(1)}}}}function T(af){if(af<32){return(af<16?\"\\\\x0\":\"\\\\x\")+af.toString(16)}var ag=String.fromCharCode(af);if(ag===\"\\\\\"||ag===\"-\"||ag===\"[\"||ag===\"]\"){ag=\"\\\\\"+ag}return ag}function X(am){var aq=am.substring(1,am.length-1).match(new RegExp(\"\\\\\\\\u[0-9A-Fa-f]{4}|\\\\\\\\x[0-9A-Fa-f]{2}|\\\\\\\\[0-3][0-7]{0,2}|\\\\\\\\[0-7]{1,2}|\\\\\\\\[\\\\s\\\\S]|-|[^-\\\\\\\\]\",\"g\"));var ak=[];var af=[];var ao=aq[0]===\"^\";for(var ar=ao?1:0,aj=aq.length;ar<aj;++ar){var ah=aq[ar];if(/\\\\[bdsw]/i.test(ah)){ak.push(ah)}else{var ag=ab(ah);var al;if(ar+2<aj&&\"-\"===aq[ar+1]){al=ab(aq[ar+2]);ar+=2}else{al=ag}af.push([ag,al]);if(!(al<65||ag>122)){if(!(al<65||ag>90)){af.push([Math.max(65,ag)|32,Math.min(al,90)|32])}if(!(al<97||ag>122)){af.push([Math.max(97,ag)&~32,Math.min(al,122)&~32])}}}}af.sort(function(av,au){return(av[0]-au[0])||(au[1]-av[1])});var ai=[];var ap=[NaN,NaN];for(var ar=0;ar<af.length;++ar){var at=af[ar];if(at[0]<=ap[1]+1){ap[1]=Math.max(ap[1],at[1])}else{ai.push(ap=at)}}var an=[\"[\"];if(ao){an.push(\"^\")}an.push.apply(an,ak);for(var ar=0;ar<ai.length;++ar){var at=ai[ar];an.push(T(at[0]));if(at[1]>at[0]){if(at[1]+1>at[0]){an.push(\"-\")}an.push(T(at[1]))}}an.push(\"]\");return an.join(\"\")}function W(al){var aj=al.source.match(new RegExp(\"(?:\\\\[(?:[^\\\\x5C\\\\x5D]|\\\\\\\\[\\\\s\\\\S])*\\\\]|\\\\\\\\u[A-Fa-f0-9]{4}|\\\\\\\\x[A-Fa-f0-9]{2}|\\\\\\\\[0-9]+|\\\\\\\\[^ux0-9]|\\\\(\\\\?[:!=]|[\\\\(\\\\)\\\\^]|[^\\\\x5B\\\\x5C\\\\(\\\\)\\\\^]+)\",\"g\"));var ah=aj.length;var an=[];for(var ak=0,am=0;ak<ah;++ak){var ag=aj[ak];if(ag===\"(\"){++am}else{if(\"\\\\\"===ag.charAt(0)){var af=+ag.substring(1);if(af&&af<=am){an[af]=-1}}}}for(var ak=1;ak<an.length;++ak){if(-1===an[ak]){an[ak]=++ad}}for(var ak=0,am=0;ak<ah;++ak){var ag=aj[ak];if(ag===\"(\"){++am;if(an[am]===undefined){aj[ak]=\"(?:\"}}else{if(\"\\\\\"===ag.charAt(0)){var af=+ag.substring(1);if(af&&af<=am){aj[ak]=\"\\\\\"+an[am]}}}}for(var ak=0,am=0;ak<ah;++ak){if(\"^\"===aj[ak]&&\"^\"!==aj[ak+1]){aj[ak]=\"\"}}if(al.ignoreCase&&S){for(var ak=0;ak<ah;++ak){var ag=aj[ak];var ai=ag.charAt(0);if(ag.length>=2&&ai===\"[\"){aj[ak]=X(ag)}else{if(ai!==\"\\\\\"){aj[ak]=ag.replace(/[a-zA-Z]/g,function(ao){var ap=ao.charCodeAt(0);return\"[\"+String.fromCharCode(ap&~32,ap|32)+\"]\"})}}}}return aj.join(\"\")}var aa=[];for(var V=0,U=Z.length;V<U;++V){var ae=Z[V];if(ae.global||ae.multiline){throw new Error(\"\"+ae)}aa.push(\"(?:\"+W(ae)+\")\")}return new RegExp(aa.join(\"|\"),ac?\"gi\":\"g\")}function a(V){var U=/(?:^|\\s)nocode(?:\\s|$)/;var X=[];var T=0;var Z=[];var W=0;var S;if(V.currentStyle){S=V.currentStyle.whiteSpace}else{if(window.getComputedStyle){S=document.defaultView.getComputedStyle(V,null).getPropertyValue(\"white-space\")}}var Y=S&&\"pre\"===S.substring(0,3);function aa(ab){switch(ab.nodeType){case 1:if(U.test(ab.className)){return}for(var ae=ab.firstChild;ae;ae=ae.nextSibling){aa(ae)}var ad=ab.nodeName;if(\"BR\"===ad||\"LI\"===ad){X[W]=\"\\n\";Z[W<<1]=T++;Z[(W++<<1)|1]=ab}break;case 3:case 4:var ac=ab.nodeValue;if(ac.length){if(!Y){ac=ac.replace(/[ \\t\\r\\n]+/g,\" \")}else{ac=ac.replace(/\\r\\n?/g,\"\\n\")}X[W]=ac;Z[W<<1]=T;T+=ac.length;Z[(W++<<1)|1]=ab}break}}aa(V);return{sourceCode:X.join(\"\").replace(/\\n$/,\"\"),spans:Z}}function B(S,U,W,T){if(!U){return}var V={sourceCode:U,basePos:S};W(V);T.push.apply(T,V.decorations)}var v=/\\S/;function o(S){var V=undefined;for(var U=S.firstChild;U;U=U.nextSibling){var T=U.nodeType;V=(T===1)?(V?S:U):(T===3)?(v.test(U.nodeValue)?S:V):V}return V===S?undefined:V}function g(U,T){var S={};var V;(function(){var ad=U.concat(T);var ah=[];var ag={};for(var ab=0,Z=ad.length;ab<Z;++ab){var Y=ad[ab];var ac=Y[3];if(ac){for(var ae=ac.length;--ae>=0;){S[ac.charAt(ae)]=Y}}var af=Y[1];var aa=\"\"+af;if(!ag.hasOwnProperty(aa)){ah.push(af);ag[aa]=null}}ah.push(/[\\0-\\uffff]/);V=k(ah)})();var X=T.length;var W=function(ah){var Z=ah.sourceCode,Y=ah.basePos;var ad=[Y,F];var af=0;var an=Z.match(V)||[];var aj={};for(var ae=0,aq=an.length;ae<aq;++ae){var ag=an[ae];var ap=aj[ag];var ai=void 0;var am;if(typeof ap===\"string\"){am=false}else{var aa=S[ag.charAt(0)];if(aa){ai=ag.match(aa[1]);ap=aa[0]}else{for(var ao=0;ao<X;++ao){aa=T[ao];ai=ag.match(aa[1]);if(ai){ap=aa[0];break}}if(!ai){ap=F}}am=ap.length>=5&&\"lang-\"===ap.substring(0,5);if(am&&!(ai&&typeof ai[1]===\"string\")){am=false;ap=J}if(!am){aj[ag]=ap}}var ab=af;af+=ag.length;if(!am){ad.push(Y+ab,ap)}else{var al=ai[1];var ak=ag.indexOf(al);var ac=ak+al.length;if(ai[2]){ac=ag.length-ai[2].length;ak=ac-al.length}var ar=ap.substring(5);B(Y+ab,ag.substring(0,ak),W,ad);B(Y+ab+ak,al,q(ar,al),ad);B(Y+ab+ac,ag.substring(ac),W,ad)}}ah.decorations=ad};return W}function i(T){var W=[],S=[];if(T.tripleQuotedStrings){W.push([C,/^(?:\\'\\'\\'(?:[^\\'\\\\]|\\\\[\\s\\S]|\\'{1,2}(?=[^\\']))*(?:\\'\\'\\'|$)|\\\"\\\"\\\"(?:[^\\\"\\\\]|\\\\[\\s\\S]|\\\"{1,2}(?=[^\\\"]))*(?:\\\"\\\"\\\"|$)|\\'(?:[^\\\\\\']|\\\\[\\s\\S])*(?:\\'|$)|\\\"(?:[^\\\\\\\"]|\\\\[\\s\\S])*(?:\\\"|$))/,null,\"'\\\"\"])}else{if(T.multiLineStrings){W.push([C,/^(?:\\'(?:[^\\\\\\']|\\\\[\\s\\S])*(?:\\'|$)|\\\"(?:[^\\\\\\\"]|\\\\[\\s\\S])*(?:\\\"|$)|\\`(?:[^\\\\\\`]|\\\\[\\s\\S])*(?:\\`|$))/,null,\"'\\\"`\"])}else{W.push([C,/^(?:\\'(?:[^\\\\\\'\\r\\n]|\\\\.)*(?:\\'|$)|\\\"(?:[^\\\\\\\"\\r\\n]|\\\\.)*(?:\\\"|$))/,null,\"\\\"'\"])}}if(T.verbatimStrings){S.push([C,/^@\\\"(?:[^\\\"]|\\\"\\\")*(?:\\\"|$)/,null])}var Y=T.hashComments;if(Y){if(T.cStyleComments){if(Y>1){W.push([j,/^#(?:##(?:[^#]|#(?!##))*(?:###|$)|.*)/,null,\"#\"])}else{W.push([j,/^#(?:(?:define|elif|else|endif|error|ifdef|include|ifndef|line|pragma|undef|warning)\\b|[^\\r\\n]*)/,null,\"#\"])}S.push([C,/^<(?:(?:(?:\\.\\.\\/)*|\\/?)(?:[\\w-]+(?:\\/[\\w-]+)+)?[\\w-]+\\.h|[a-z]\\w*)>/,null])}else{W.push([j,/^#[^\\r\\n]*/,null,\"#\"])}}if(T.cStyleComments){S.push([j,/^\\/\\/[^\\r\\n]*/,null]);S.push([j,/^\\/\\*[\\s\\S]*?(?:\\*\\/|$)/,null])}if(T.regexLiterals){var X=(\"/(?=[^/*])(?:[^/\\\\x5B\\\\x5C]|\\\\x5C[\\\\s\\\\S]|\\\\x5B(?:[^\\\\x5C\\\\x5D]|\\\\x5C[\\\\s\\\\S])*(?:\\\\x5D|$))+/\");S.push([\"lang-regex\",new RegExp(\"^\"+M+\"(\"+X+\")\")])}var V=T.types;if(V){S.push([O,V])}var U=(\"\"+T.keywords).replace(/^ | $/g,\"\");if(U.length){S.push([z,new RegExp(\"^(?:\"+U.replace(/[\\s,]+/g,\"|\")+\")\\\\b\"),null])}W.push([F,/^\\s+/,null,\" \\r\\n\\t\\xA0\"]);S.push([G,/^@[a-z_$][a-z_$@0-9]*/i,null],[O,/^(?:[@_]?[A-Z]+[a-z][A-Za-z_$@0-9]*|\\w+_t\\b)/,null],[F,/^[a-z_$][a-z_$@0-9]*/i,null],[G,new RegExp(\"^(?:0x[a-f0-9]+|(?:\\\\d(?:_\\\\d+)*\\\\d*(?:\\\\.\\\\d*)?|\\\\.\\\\d\\\\+)(?:e[+\\\\-]?\\\\d+)?)[a-z]*\",\"i\"),null,\"0123456789\"],[F,/^\\\\[\\s\\S]?/,null],[L,/^.[^\\s\\w\\.$@\\'\\\"\\`\\/\\#\\\\]*/,null]);return g(W,S)}var K=i({keywords:A,hashComments:true,cStyleComments:true,multiLineStrings:true,regexLiterals:true});function Q(V,ag){var U=/(?:^|\\s)nocode(?:\\s|$)/;var ab=/\\r\\n?|\\n/;var ac=V.ownerDocument;var S;if(V.currentStyle){S=V.currentStyle.whiteSpace}else{if(window.getComputedStyle){S=ac.defaultView.getComputedStyle(V,null).getPropertyValue(\"white-space\")}}var Z=S&&\"pre\"===S.substring(0,3);var af=ac.createElement(\"LI\");while(V.firstChild){af.appendChild(V.firstChild)}var W=[af];function ae(al){switch(al.nodeType){case 1:if(U.test(al.className)){break}if(\"BR\"===al.nodeName){ad(al);if(al.parentNode){al.parentNode.removeChild(al)}}else{for(var an=al.firstChild;an;an=an.nextSibling){ae(an)}}break;case 3:case 4:if(Z){var am=al.nodeValue;var aj=am.match(ab);if(aj){var ai=am.substring(0,aj.index);al.nodeValue=ai;var ah=am.substring(aj.index+aj[0].length);if(ah){var ak=al.parentNode;ak.insertBefore(ac.createTextNode(ah),al.nextSibling)}ad(al);if(!ai){al.parentNode.removeChild(al)}}}break}}function ad(ak){while(!ak.nextSibling){ak=ak.parentNode;if(!ak){return}}function ai(al,ar){var aq=ar?al.cloneNode(false):al;var ao=al.parentNode;if(ao){var ap=ai(ao,1);var an=al.nextSibling;ap.appendChild(aq);for(var am=an;am;am=an){an=am.nextSibling;ap.appendChild(am)}}return aq}var ah=ai(ak.nextSibling,0);for(var aj;(aj=ah.parentNode)&&aj.nodeType===1;){ah=aj}W.push(ah)}for(var Y=0;Y<W.length;++Y){ae(W[Y])}if(ag===(ag|0)){W[0].setAttribute(\"value\",ag)}var aa=ac.createElement(\"OL\");aa.className=\"linenums\";var X=Math.max(0,((ag-1))|0)||0;for(var Y=0,T=W.length;Y<T;++Y){af=W[Y];af.className=\"L\"+((Y+X)%10);if(!af.firstChild){af.appendChild(ac.createTextNode(\"\\xA0\"))}aa.appendChild(af)}V.appendChild(aa)}function D(ac){var aj=/\\bMSIE\\b/.test(navigator.userAgent);var am=/\\n/g;var al=ac.sourceCode;var an=al.length;var V=0;var aa=ac.spans;var T=aa.length;var ah=0;var X=ac.decorations;var Y=X.length;var Z=0;X[Y]=an;var ar,aq;for(aq=ar=0;aq<Y;){if(X[aq]!==X[aq+2]){X[ar++]=X[aq++];X[ar++]=X[aq++]}else{aq+=2}}Y=ar;for(aq=ar=0;aq<Y;){var at=X[aq];var ab=X[aq+1];var W=aq+2;while(W+2<=Y&&X[W+1]===ab){W+=2}X[ar++]=at;X[ar++]=ab;aq=W}Y=X.length=ar;var ae=null;while(ah<T){var af=aa[ah];var S=aa[ah+2]||an;var ag=X[Z];var ap=X[Z+2]||an;var W=Math.min(S,ap);var ak=aa[ah+1];var U;if(ak.nodeType!==1&&(U=al.substring(V,W))){if(aj){U=U.replace(am,\"\\r\")}ak.nodeValue=U;var ai=ak.ownerDocument;var ao=ai.createElement(\"SPAN\");ao.className=X[Z+1];var ad=ak.parentNode;ad.replaceChild(ao,ak);ao.appendChild(ak);if(V<S){aa[ah+1]=ak=ai.createTextNode(al.substring(W,S));ad.insertBefore(ak,ao.nextSibling)}}V=W;if(V>=S){ah+=2}if(V>=ap){Z+=2}}}var t={};function c(U,V){for(var S=V.length;--S>=0;){var T=V[S];if(!t.hasOwnProperty(T)){t[T]=U}else{if(window.console){console.warn(\"cannot override language handler %s\",T)}}}}function q(T,S){if(!(T&&t.hasOwnProperty(T))){T=/^\\s*</.test(S)?\"default-markup\":\"default-code\"}return t[T]}c(K,[\"default-code\"]);c(g([],[[F,/^[^<?]+/],[E,/^<!\\w[^>]*(?:>|$)/],[j,/^<\\!--[\\s\\S]*?(?:-\\->|$)/],[\"lang-\",/^<\\?([\\s\\S]+?)(?:\\?>|$)/],[\"lang-\",/^<%([\\s\\S]+?)(?:%>|$)/],[L,/^(?:<[%?]|[%?]>)/],[\"lang-\",/^<xmp\\b[^>]*>([\\s\\S]+?)<\\/xmp\\b[^>]*>/i],[\"lang-js\",/^<script\\b[^>]*>([\\s\\S]*?)(<\\/script\\b[^>]*>)/i],[\"lang-css\",/^<style\\b[^>]*>([\\s\\S]*?)(<\\/style\\b[^>]*>)/i],[\"lang-in.tag\",/^(<\\/?[a-z][^<>]*>)/i]]),[\"default-markup\",\"htm\",\"html\",\"mxml\",\"xhtml\",\"xml\",\"xsl\"]);c(g([[F,/^[\\s]+/,null,\" \\t\\r\\n\"],[n,/^(?:\\\"[^\\\"]*\\\"?|\\'[^\\']*\\'?)/,null,\"\\\"'\"]],[[m,/^^<\\/?[a-z](?:[\\w.:-]*\\w)?|\\/?>$/i],[P,/^(?!style[\\s=]|on)[a-z](?:[\\w:-]*\\w)?/i],[\"lang-uq.val\",/^=\\s*([^>\\'\\\"\\s]*(?:[^>\\'\\\"\\s\\/]|\\/(?=\\s)))/],[L,/^[=<>\\/]+/],[\"lang-js\",/^on\\w+\\s*=\\s*\\\"([^\\\"]+)\\\"/i],[\"lang-js\",/^on\\w+\\s*=\\s*\\'([^\\']+)\\'/i],[\"lang-js\",/^on\\w+\\s*=\\s*([^\\\"\\'>\\s]+)/i],[\"lang-css\",/^style\\s*=\\s*\\\"([^\\\"]+)\\\"/i],[\"lang-css\",/^style\\s*=\\s*\\'([^\\']+)\\'/i],[\"lang-css\",/^style\\s*=\\s*([^\\\"\\'>\\s]+)/i]]),[\"in.tag\"]);c(g([],[[n,/^[\\s\\S]+/]]),[\"uq.val\"]);c(i({keywords:l,hashComments:true,cStyleComments:true,types:e}),[\"c\",\"cc\",\"cpp\",\"cxx\",\"cyc\",\"m\"]);c(i({keywords:\"null,true,false\"}),[\"json\"]);c(i({keywords:R,hashComments:true,cStyleComments:true,verbatimStrings:true,types:e}),[\"cs\"]);c(i({keywords:x,cStyleComments:true}),[\"java\"]);c(i({keywords:H,hashComments:true,multiLineStrings:true}),[\"bsh\",\"csh\",\"sh\"]);c(i({keywords:I,hashComments:true,multiLineStrings:true,tripleQuotedStrings:true}),[\"cv\",\"py\"]);c(i({keywords:s,hashComments:true,multiLineStrings:true,regexLiterals:true}),[\"perl\",\"pl\",\"pm\"]);c(i({keywords:f,hashComments:true,multiLineStrings:true,regexLiterals:true}),[\"rb\"]);c(i({keywords:w,cStyleComments:true,regexLiterals:true}),[\"js\"]);c(i({keywords:r,hashComments:3,cStyleComments:true,multilineStrings:true,tripleQuotedStrings:true,regexLiterals:true}),[\"coffee\"]);c(g([],[[C,/^[\\s\\S]+/]]),[\"regex\"]);function d(V){var U=V.langExtension;try{var S=a(V.sourceNode);var T=S.sourceCode;V.sourceCode=T;V.spans=S.spans;V.basePos=0;q(U,T)(V);D(V)}catch(W){if(\"console\" in window){console.log(W&&W.stack?W.stack:W)}}}function y(W,V,U){var S=document.createElement(\"PRE\");S.innerHTML=W;if(U){Q(S,U)}var T={langExtension:V,numberLines:U,sourceNode:S};d(T);return S.innerHTML}function b(ad){function Y(af){return document.getElementsByTagName(af)}var ac=[Y(\"pre\"),Y(\"code\"),Y(\"xmp\")];var T=[];for(var aa=0;aa<ac.length;++aa){for(var Z=0,V=ac[aa].length;Z<V;++Z){T.push(ac[aa][Z])}}ac=null;var W=Date;if(!W.now){W={now:function(){return +(new Date)}}}var X=0;var S;var ab=/\\blang(?:uage)?-([\\w.]+)(?!\\S)/;var ae=/\\bprettyprint\\b/;function U(){var ag=(window.PR_SHOULD_USE_CONTINUATION?W.now()+250:Infinity);for(;X<T.length&&W.now()<ag;X++){var aj=T[X];var ai=aj.className;if(ai.indexOf(\"prettyprint\")>=0){var ah=ai.match(ab);var am;if(!ah&&(am=o(aj))&&\"CODE\"===am.tagName){ah=am.className.match(ab)}if(ah){ah=ah[1]}var al=false;for(var ak=aj.parentNode;ak;ak=ak.parentNode){if((ak.tagName===\"pre\"||ak.tagName===\"code\"||ak.tagName===\"xmp\")&&ak.className&&ak.className.indexOf(\"prettyprint\")>=0){al=true;break}}if(!al){var af=aj.className.match(/\\blinenums\\b(?::(\\d+))?/);af=af?af[1]&&af[1].length?+af[1]:true:false;if(af){Q(aj,af)}S={langExtension:ah,sourceNode:aj,numberLines:af};d(S)}}}if(X<T.length){setTimeout(U,250)}else{if(ad){ad()}}}U()}window.prettyPrintOne=y;window.prettyPrint=b;window.PR={createSimpleLexer:g,registerLangHandler:c,sourceDecorator:i,PR_ATTRIB_NAME:P,PR_ATTRIB_VALUE:n,PR_COMMENT:j,PR_DECLARATION:E,PR_KEYWORD:z,PR_LITERAL:G,PR_NOCODE:N,PR_PLAIN:F,PR_PUNCTUATION:L,PR_SOURCE:J,PR_STRING:C,PR_TAG:m,PR_TYPE:O}})();PR.registerLangHandler(PR.createSimpleLexer([],[[PR.PR_DECLARATION,/^<!\\w[^>]*(?:>|$)/],[PR.PR_COMMENT,/^<\\!--[\\s\\S]*?(?:-\\->|$)/],[PR.PR_PUNCTUATION,/^(?:<[%?]|[%?]>)/],[\"lang-\",/^<\\?([\\s\\S]+?)(?:\\?>|$)/],[\"lang-\",/^<%([\\s\\S]+?)(?:%>|$)/],[\"lang-\",/^<xmp\\b[^>]*>([\\s\\S]+?)<\\/xmp\\b[^>]*>/i],[\"lang-handlebars\",/^<script\\b[^>]*type\\s*=\\s*['\"]?text\\/x-handlebars-template['\"]?\\b[^>]*>([\\s\\S]*?)(<\\/script\\b[^>]*>)/i],[\"lang-js\",/^<script\\b[^>]*>([\\s\\S]*?)(<\\/script\\b[^>]*>)/i],[\"lang-css\",/^<style\\b[^>]*>([\\s\\S]*?)(<\\/style\\b[^>]*>)/i],[\"lang-in.tag\",/^(<\\/?[a-z][^<>]*>)/i],[PR.PR_DECLARATION,/^{{[#^>/]?\\s*[\\w.][^}]*}}/],[PR.PR_DECLARATION,/^{{&?\\s*[\\w.][^}]*}}/],[PR.PR_DECLARATION,/^{{{>?\\s*[\\w.][^}]*}}}/],[PR.PR_COMMENT,/^{{![^}]*}}/]]),[\"handlebars\",\"hbs\"]);PR.registerLangHandler(PR.createSimpleLexer([[PR.PR_PLAIN,/^[ \\t\\r\\n\\f]+/,null,\" \\t\\r\\n\\f\"]],[[PR.PR_STRING,/^\\\"(?:[^\\n\\r\\f\\\\\\\"]|\\\\(?:\\r\\n?|\\n|\\f)|\\\\[\\s\\S])*\\\"/,null],[PR.PR_STRING,/^\\'(?:[^\\n\\r\\f\\\\\\']|\\\\(?:\\r\\n?|\\n|\\f)|\\\\[\\s\\S])*\\'/,null],[\"lang-css-str\",/^url\\(([^\\)\\\"\\']*)\\)/i],[PR.PR_KEYWORD,/^(?:url|rgb|\\!important|@import|@page|@media|@charset|inherit)(?=[^\\-\\w]|$)/i,null],[\"lang-css-kw\",/^(-?(?:[_a-z]|(?:\\\\[0-9a-f]+ ?))(?:[_a-z0-9\\-]|\\\\(?:\\\\[0-9a-f]+ ?))*)\\s*:/i],[PR.PR_COMMENT,/^\\/\\*[^*]*\\*+(?:[^\\/*][^*]*\\*+)*\\//],[PR.PR_COMMENT,/^(?:<!--|-->)/],[PR.PR_LITERAL,/^(?:\\d+|\\d*\\.\\d+)(?:%|[a-z]+)?/i],[PR.PR_LITERAL,/^#(?:[0-9a-f]{3}){1,2}/i],[PR.PR_PLAIN,/^-?(?:[_a-z]|(?:\\\\[\\da-f]+ ?))(?:[_a-z\\d\\-]|\\\\(?:\\\\[\\da-f]+ ?))*/i],[PR.PR_PUNCTUATION,/^[^\\s\\w\\'\\\"]+/]]),[\"css\"]);PR.registerLangHandler(PR.createSimpleLexer([],[[PR.PR_KEYWORD,/^-?(?:[_a-z]|(?:\\\\[\\da-f]+ ?))(?:[_a-z\\d\\-]|\\\\(?:\\\\[\\da-f]+ ?))*/i]]),[\"css-kw\"]);PR.registerLangHandler(PR.createSimpleLexer([],[[PR.PR_STRING,/^[^\\)\\\"\\']+/]]),[\"css-str\"]);\n","usedDeprecatedRules":[]},{"filePath":"/home/vonj/Github/Nexus/coverage/lcov-report/sorter.js","messages":[{"ruleId":null,"message":"Unused eslint-disable directive (no problems were reported).","line":1,"column":1,"severity":1,"nodeType":null,"fix":{"range":[0,20],"text":" "}}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":1,"source":"/* eslint-disable */\nvar addSorting = (function() {\n    'use strict';\n    var cols,\n        currentSort = {\n            index: 0,\n            desc: false\n        };\n\n    // returns the summary table element\n    function getTable() {\n        return document.querySelector('.coverage-summary');\n    }\n    // returns the thead element of the summary table\n    function getTableHeader() {\n        return getTable().querySelector('thead tr');\n    }\n    // returns the tbody element of the summary table\n    function getTableBody() {\n        return getTable().querySelector('tbody');\n    }\n    // returns the th element for nth column\n    function getNthColumn(n) {\n        return getTableHeader().querySelectorAll('th')[n];\n    }\n\n    function onFilterInput() {\n        const searchValue = document.getElementById('fileSearch').value;\n        const rows = document.getElementsByTagName('tbody')[0].children;\n        for (let i = 0; i < rows.length; i++) {\n            const row = rows[i];\n            if (\n                row.textContent\n                    .toLowerCase()\n                    .includes(searchValue.toLowerCase())\n            ) {\n                row.style.display = '';\n            } else {\n                row.style.display = 'none';\n            }\n        }\n    }\n\n    // loads the search box\n    function addSearchBox() {\n        var template = document.getElementById('filterTemplate');\n        var templateClone = template.content.cloneNode(true);\n        templateClone.getElementById('fileSearch').oninput = onFilterInput;\n        template.parentElement.appendChild(templateClone);\n    }\n\n    // loads all columns\n    function loadColumns() {\n        var colNodes = getTableHeader().querySelectorAll('th'),\n            colNode,\n            cols = [],\n            col,\n            i;\n\n        for (i = 0; i < colNodes.length; i += 1) {\n            colNode = colNodes[i];\n            col = {\n                key: colNode.getAttribute('data-col'),\n                sortable: !colNode.getAttribute('data-nosort'),\n                type: colNode.getAttribute('data-type') || 'string'\n            };\n            cols.push(col);\n            if (col.sortable) {\n                col.defaultDescSort = col.type === 'number';\n                colNode.innerHTML =\n                    colNode.innerHTML + '<span class=\"sorter\"></span>';\n            }\n        }\n        return cols;\n    }\n    // attaches a data attribute to every tr element with an object\n    // of data values keyed by column name\n    function loadRowData(tableRow) {\n        var tableCols = tableRow.querySelectorAll('td'),\n            colNode,\n            col,\n            data = {},\n            i,\n            val;\n        for (i = 0; i < tableCols.length; i += 1) {\n            colNode = tableCols[i];\n            col = cols[i];\n            val = colNode.getAttribute('data-value');\n            if (col.type === 'number') {\n                val = Number(val);\n            }\n            data[col.key] = val;\n        }\n        return data;\n    }\n    // loads all row data\n    function loadData() {\n        var rows = getTableBody().querySelectorAll('tr'),\n            i;\n\n        for (i = 0; i < rows.length; i += 1) {\n            rows[i].data = loadRowData(rows[i]);\n        }\n    }\n    // sorts the table using the data for the ith column\n    function sortByIndex(index, desc) {\n        var key = cols[index].key,\n            sorter = function(a, b) {\n                a = a.data[key];\n                b = b.data[key];\n                return a < b ? -1 : a > b ? 1 : 0;\n            },\n            finalSorter = sorter,\n            tableBody = document.querySelector('.coverage-summary tbody'),\n            rowNodes = tableBody.querySelectorAll('tr'),\n            rows = [],\n            i;\n\n        if (desc) {\n            finalSorter = function(a, b) {\n                return -1 * sorter(a, b);\n            };\n        }\n\n        for (i = 0; i < rowNodes.length; i += 1) {\n            rows.push(rowNodes[i]);\n            tableBody.removeChild(rowNodes[i]);\n        }\n\n        rows.sort(finalSorter);\n\n        for (i = 0; i < rows.length; i += 1) {\n            tableBody.appendChild(rows[i]);\n        }\n    }\n    // removes sort indicators for current column being sorted\n    function removeSortIndicators() {\n        var col = getNthColumn(currentSort.index),\n            cls = col.className;\n\n        cls = cls.replace(/ sorted$/, '').replace(/ sorted-desc$/, '');\n        col.className = cls;\n    }\n    // adds sort indicators for current column being sorted\n    function addSortIndicators() {\n        getNthColumn(currentSort.index).className += currentSort.desc\n            ? ' sorted-desc'\n            : ' sorted';\n    }\n    // adds event listeners for all sorter widgets\n    function enableUI() {\n        var i,\n            el,\n            ithSorter = function ithSorter(i) {\n                var col = cols[i];\n\n                return function() {\n                    var desc = col.defaultDescSort;\n\n                    if (currentSort.index === i) {\n                        desc = !currentSort.desc;\n                    }\n                    sortByIndex(i, desc);\n                    removeSortIndicators();\n                    currentSort.index = i;\n                    currentSort.desc = desc;\n                    addSortIndicators();\n                };\n            };\n        for (i = 0; i < cols.length; i += 1) {\n            if (cols[i].sortable) {\n                // add the click event handler on the th so users\n                // dont have to click on those tiny arrows\n                el = getNthColumn(i).querySelector('.sorter').parentElement;\n                if (el.addEventListener) {\n                    el.addEventListener('click', ithSorter(i));\n                } else {\n                    el.attachEvent('onclick', ithSorter(i));\n                }\n            }\n        }\n    }\n    // adds sorting functionality to the UI\n    return function() {\n        if (!getTable()) {\n            return;\n        }\n        cols = loadColumns();\n        loadData();\n        addSearchBox();\n        addSortIndicators();\n        enableUI();\n    };\n})();\n\nwindow.addEventListener('load', addSorting);\n","usedDeprecatedRules":[]},{"filePath":"/home/vonj/Github/Nexus/coverage/prettify.js","messages":[{"ruleId":null,"message":"Unused eslint-disable directive (no problems were reported).","line":1,"column":1,"severity":1,"nodeType":null,"fix":{"range":[0,20],"text":" "}}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":1,"source":"/* eslint-disable */\nwindow.PR_SHOULD_USE_CONTINUATION=true;(function(){var h=[\"break,continue,do,else,for,if,return,while\"];var u=[h,\"auto,case,char,const,default,double,enum,extern,float,goto,int,long,register,short,signed,sizeof,static,struct,switch,typedef,union,unsigned,void,volatile\"];var p=[u,\"catch,class,delete,false,import,new,operator,private,protected,public,this,throw,true,try,typeof\"];var l=[p,\"alignof,align_union,asm,axiom,bool,concept,concept_map,const_cast,constexpr,decltype,dynamic_cast,explicit,export,friend,inline,late_check,mutable,namespace,nullptr,reinterpret_cast,static_assert,static_cast,template,typeid,typename,using,virtual,where\"];var x=[p,\"abstract,boolean,byte,extends,final,finally,implements,import,instanceof,null,native,package,strictfp,super,synchronized,throws,transient\"];var R=[x,\"as,base,by,checked,decimal,delegate,descending,dynamic,event,fixed,foreach,from,group,implicit,in,interface,internal,into,is,lock,object,out,override,orderby,params,partial,readonly,ref,sbyte,sealed,stackalloc,string,select,uint,ulong,unchecked,unsafe,ushort,var\"];var r=\"all,and,by,catch,class,else,extends,false,finally,for,if,in,is,isnt,loop,new,no,not,null,of,off,on,or,return,super,then,true,try,unless,until,when,while,yes\";var w=[p,\"debugger,eval,export,function,get,null,set,undefined,var,with,Infinity,NaN\"];var s=\"caller,delete,die,do,dump,elsif,eval,exit,foreach,for,goto,if,import,last,local,my,next,no,our,print,package,redo,require,sub,undef,unless,until,use,wantarray,while,BEGIN,END\";var I=[h,\"and,as,assert,class,def,del,elif,except,exec,finally,from,global,import,in,is,lambda,nonlocal,not,or,pass,print,raise,try,with,yield,False,True,None\"];var f=[h,\"alias,and,begin,case,class,def,defined,elsif,end,ensure,false,in,module,next,nil,not,or,redo,rescue,retry,self,super,then,true,undef,unless,until,when,yield,BEGIN,END\"];var H=[h,\"case,done,elif,esac,eval,fi,function,in,local,set,then,until\"];var A=[l,R,w,s+I,f,H];var e=/^(DIR|FILE|vector|(de|priority_)?queue|list|stack|(const_)?iterator|(multi)?(set|map)|bitset|u?(int|float)\\d*)/;var C=\"str\";var z=\"kwd\";var j=\"com\";var O=\"typ\";var G=\"lit\";var L=\"pun\";var F=\"pln\";var m=\"tag\";var E=\"dec\";var J=\"src\";var P=\"atn\";var n=\"atv\";var N=\"nocode\";var M=\"(?:^^\\\\.?|[+-]|\\\\!|\\\\!=|\\\\!==|\\\\#|\\\\%|\\\\%=|&|&&|&&=|&=|\\\\(|\\\\*|\\\\*=|\\\\+=|\\\\,|\\\\-=|\\\\->|\\\\/|\\\\/=|:|::|\\\\;|<|<<|<<=|<=|=|==|===|>|>=|>>|>>=|>>>|>>>=|\\\\?|\\\\@|\\\\[|\\\\^|\\\\^=|\\\\^\\\\^|\\\\^\\\\^=|\\\\{|\\\\||\\\\|=|\\\\|\\\\||\\\\|\\\\|=|\\\\~|break|case|continue|delete|do|else|finally|instanceof|return|throw|try|typeof)\\\\s*\";function k(Z){var ad=0;var S=false;var ac=false;for(var V=0,U=Z.length;V<U;++V){var ae=Z[V];if(ae.ignoreCase){ac=true}else{if(/[a-z]/i.test(ae.source.replace(/\\\\u[0-9a-f]{4}|\\\\x[0-9a-f]{2}|\\\\[^ux]/gi,\"\"))){S=true;ac=false;break}}}var Y={b:8,t:9,n:10,v:11,f:12,r:13};function ab(ah){var ag=ah.charCodeAt(0);if(ag!==92){return ag}var af=ah.charAt(1);ag=Y[af];if(ag){return ag}else{if(\"0\"<=af&&af<=\"7\"){return parseInt(ah.substring(1),8)}else{if(af===\"u\"||af===\"x\"){return parseInt(ah.substring(2),16)}else{return ah.charCodeAt(1)}}}}function T(af){if(af<32){return(af<16?\"\\\\x0\":\"\\\\x\")+af.toString(16)}var ag=String.fromCharCode(af);if(ag===\"\\\\\"||ag===\"-\"||ag===\"[\"||ag===\"]\"){ag=\"\\\\\"+ag}return ag}function X(am){var aq=am.substring(1,am.length-1).match(new RegExp(\"\\\\\\\\u[0-9A-Fa-f]{4}|\\\\\\\\x[0-9A-Fa-f]{2}|\\\\\\\\[0-3][0-7]{0,2}|\\\\\\\\[0-7]{1,2}|\\\\\\\\[\\\\s\\\\S]|-|[^-\\\\\\\\]\",\"g\"));var ak=[];var af=[];var ao=aq[0]===\"^\";for(var ar=ao?1:0,aj=aq.length;ar<aj;++ar){var ah=aq[ar];if(/\\\\[bdsw]/i.test(ah)){ak.push(ah)}else{var ag=ab(ah);var al;if(ar+2<aj&&\"-\"===aq[ar+1]){al=ab(aq[ar+2]);ar+=2}else{al=ag}af.push([ag,al]);if(!(al<65||ag>122)){if(!(al<65||ag>90)){af.push([Math.max(65,ag)|32,Math.min(al,90)|32])}if(!(al<97||ag>122)){af.push([Math.max(97,ag)&~32,Math.min(al,122)&~32])}}}}af.sort(function(av,au){return(av[0]-au[0])||(au[1]-av[1])});var ai=[];var ap=[NaN,NaN];for(var ar=0;ar<af.length;++ar){var at=af[ar];if(at[0]<=ap[1]+1){ap[1]=Math.max(ap[1],at[1])}else{ai.push(ap=at)}}var an=[\"[\"];if(ao){an.push(\"^\")}an.push.apply(an,ak);for(var ar=0;ar<ai.length;++ar){var at=ai[ar];an.push(T(at[0]));if(at[1]>at[0]){if(at[1]+1>at[0]){an.push(\"-\")}an.push(T(at[1]))}}an.push(\"]\");return an.join(\"\")}function W(al){var aj=al.source.match(new RegExp(\"(?:\\\\[(?:[^\\\\x5C\\\\x5D]|\\\\\\\\[\\\\s\\\\S])*\\\\]|\\\\\\\\u[A-Fa-f0-9]{4}|\\\\\\\\x[A-Fa-f0-9]{2}|\\\\\\\\[0-9]+|\\\\\\\\[^ux0-9]|\\\\(\\\\?[:!=]|[\\\\(\\\\)\\\\^]|[^\\\\x5B\\\\x5C\\\\(\\\\)\\\\^]+)\",\"g\"));var ah=aj.length;var an=[];for(var ak=0,am=0;ak<ah;++ak){var ag=aj[ak];if(ag===\"(\"){++am}else{if(\"\\\\\"===ag.charAt(0)){var af=+ag.substring(1);if(af&&af<=am){an[af]=-1}}}}for(var ak=1;ak<an.length;++ak){if(-1===an[ak]){an[ak]=++ad}}for(var ak=0,am=0;ak<ah;++ak){var ag=aj[ak];if(ag===\"(\"){++am;if(an[am]===undefined){aj[ak]=\"(?:\"}}else{if(\"\\\\\"===ag.charAt(0)){var af=+ag.substring(1);if(af&&af<=am){aj[ak]=\"\\\\\"+an[am]}}}}for(var ak=0,am=0;ak<ah;++ak){if(\"^\"===aj[ak]&&\"^\"!==aj[ak+1]){aj[ak]=\"\"}}if(al.ignoreCase&&S){for(var ak=0;ak<ah;++ak){var ag=aj[ak];var ai=ag.charAt(0);if(ag.length>=2&&ai===\"[\"){aj[ak]=X(ag)}else{if(ai!==\"\\\\\"){aj[ak]=ag.replace(/[a-zA-Z]/g,function(ao){var ap=ao.charCodeAt(0);return\"[\"+String.fromCharCode(ap&~32,ap|32)+\"]\"})}}}}return aj.join(\"\")}var aa=[];for(var V=0,U=Z.length;V<U;++V){var ae=Z[V];if(ae.global||ae.multiline){throw new Error(\"\"+ae)}aa.push(\"(?:\"+W(ae)+\")\")}return new RegExp(aa.join(\"|\"),ac?\"gi\":\"g\")}function a(V){var U=/(?:^|\\s)nocode(?:\\s|$)/;var X=[];var T=0;var Z=[];var W=0;var S;if(V.currentStyle){S=V.currentStyle.whiteSpace}else{if(window.getComputedStyle){S=document.defaultView.getComputedStyle(V,null).getPropertyValue(\"white-space\")}}var Y=S&&\"pre\"===S.substring(0,3);function aa(ab){switch(ab.nodeType){case 1:if(U.test(ab.className)){return}for(var ae=ab.firstChild;ae;ae=ae.nextSibling){aa(ae)}var ad=ab.nodeName;if(\"BR\"===ad||\"LI\"===ad){X[W]=\"\\n\";Z[W<<1]=T++;Z[(W++<<1)|1]=ab}break;case 3:case 4:var ac=ab.nodeValue;if(ac.length){if(!Y){ac=ac.replace(/[ \\t\\r\\n]+/g,\" \")}else{ac=ac.replace(/\\r\\n?/g,\"\\n\")}X[W]=ac;Z[W<<1]=T;T+=ac.length;Z[(W++<<1)|1]=ab}break}}aa(V);return{sourceCode:X.join(\"\").replace(/\\n$/,\"\"),spans:Z}}function B(S,U,W,T){if(!U){return}var V={sourceCode:U,basePos:S};W(V);T.push.apply(T,V.decorations)}var v=/\\S/;function o(S){var V=undefined;for(var U=S.firstChild;U;U=U.nextSibling){var T=U.nodeType;V=(T===1)?(V?S:U):(T===3)?(v.test(U.nodeValue)?S:V):V}return V===S?undefined:V}function g(U,T){var S={};var V;(function(){var ad=U.concat(T);var ah=[];var ag={};for(var ab=0,Z=ad.length;ab<Z;++ab){var Y=ad[ab];var ac=Y[3];if(ac){for(var ae=ac.length;--ae>=0;){S[ac.charAt(ae)]=Y}}var af=Y[1];var aa=\"\"+af;if(!ag.hasOwnProperty(aa)){ah.push(af);ag[aa]=null}}ah.push(/[\\0-\\uffff]/);V=k(ah)})();var X=T.length;var W=function(ah){var Z=ah.sourceCode,Y=ah.basePos;var ad=[Y,F];var af=0;var an=Z.match(V)||[];var aj={};for(var ae=0,aq=an.length;ae<aq;++ae){var ag=an[ae];var ap=aj[ag];var ai=void 0;var am;if(typeof ap===\"string\"){am=false}else{var aa=S[ag.charAt(0)];if(aa){ai=ag.match(aa[1]);ap=aa[0]}else{for(var ao=0;ao<X;++ao){aa=T[ao];ai=ag.match(aa[1]);if(ai){ap=aa[0];break}}if(!ai){ap=F}}am=ap.length>=5&&\"lang-\"===ap.substring(0,5);if(am&&!(ai&&typeof ai[1]===\"string\")){am=false;ap=J}if(!am){aj[ag]=ap}}var ab=af;af+=ag.length;if(!am){ad.push(Y+ab,ap)}else{var al=ai[1];var ak=ag.indexOf(al);var ac=ak+al.length;if(ai[2]){ac=ag.length-ai[2].length;ak=ac-al.length}var ar=ap.substring(5);B(Y+ab,ag.substring(0,ak),W,ad);B(Y+ab+ak,al,q(ar,al),ad);B(Y+ab+ac,ag.substring(ac),W,ad)}}ah.decorations=ad};return W}function i(T){var W=[],S=[];if(T.tripleQuotedStrings){W.push([C,/^(?:\\'\\'\\'(?:[^\\'\\\\]|\\\\[\\s\\S]|\\'{1,2}(?=[^\\']))*(?:\\'\\'\\'|$)|\\\"\\\"\\\"(?:[^\\\"\\\\]|\\\\[\\s\\S]|\\\"{1,2}(?=[^\\\"]))*(?:\\\"\\\"\\\"|$)|\\'(?:[^\\\\\\']|\\\\[\\s\\S])*(?:\\'|$)|\\\"(?:[^\\\\\\\"]|\\\\[\\s\\S])*(?:\\\"|$))/,null,\"'\\\"\"])}else{if(T.multiLineStrings){W.push([C,/^(?:\\'(?:[^\\\\\\']|\\\\[\\s\\S])*(?:\\'|$)|\\\"(?:[^\\\\\\\"]|\\\\[\\s\\S])*(?:\\\"|$)|\\`(?:[^\\\\\\`]|\\\\[\\s\\S])*(?:\\`|$))/,null,\"'\\\"`\"])}else{W.push([C,/^(?:\\'(?:[^\\\\\\'\\r\\n]|\\\\.)*(?:\\'|$)|\\\"(?:[^\\\\\\\"\\r\\n]|\\\\.)*(?:\\\"|$))/,null,\"\\\"'\"])}}if(T.verbatimStrings){S.push([C,/^@\\\"(?:[^\\\"]|\\\"\\\")*(?:\\\"|$)/,null])}var Y=T.hashComments;if(Y){if(T.cStyleComments){if(Y>1){W.push([j,/^#(?:##(?:[^#]|#(?!##))*(?:###|$)|.*)/,null,\"#\"])}else{W.push([j,/^#(?:(?:define|elif|else|endif|error|ifdef|include|ifndef|line|pragma|undef|warning)\\b|[^\\r\\n]*)/,null,\"#\"])}S.push([C,/^<(?:(?:(?:\\.\\.\\/)*|\\/?)(?:[\\w-]+(?:\\/[\\w-]+)+)?[\\w-]+\\.h|[a-z]\\w*)>/,null])}else{W.push([j,/^#[^\\r\\n]*/,null,\"#\"])}}if(T.cStyleComments){S.push([j,/^\\/\\/[^\\r\\n]*/,null]);S.push([j,/^\\/\\*[\\s\\S]*?(?:\\*\\/|$)/,null])}if(T.regexLiterals){var X=(\"/(?=[^/*])(?:[^/\\\\x5B\\\\x5C]|\\\\x5C[\\\\s\\\\S]|\\\\x5B(?:[^\\\\x5C\\\\x5D]|\\\\x5C[\\\\s\\\\S])*(?:\\\\x5D|$))+/\");S.push([\"lang-regex\",new RegExp(\"^\"+M+\"(\"+X+\")\")])}var V=T.types;if(V){S.push([O,V])}var U=(\"\"+T.keywords).replace(/^ | $/g,\"\");if(U.length){S.push([z,new RegExp(\"^(?:\"+U.replace(/[\\s,]+/g,\"|\")+\")\\\\b\"),null])}W.push([F,/^\\s+/,null,\" \\r\\n\\t\\xA0\"]);S.push([G,/^@[a-z_$][a-z_$@0-9]*/i,null],[O,/^(?:[@_]?[A-Z]+[a-z][A-Za-z_$@0-9]*|\\w+_t\\b)/,null],[F,/^[a-z_$][a-z_$@0-9]*/i,null],[G,new RegExp(\"^(?:0x[a-f0-9]+|(?:\\\\d(?:_\\\\d+)*\\\\d*(?:\\\\.\\\\d*)?|\\\\.\\\\d\\\\+)(?:e[+\\\\-]?\\\\d+)?)[a-z]*\",\"i\"),null,\"0123456789\"],[F,/^\\\\[\\s\\S]?/,null],[L,/^.[^\\s\\w\\.$@\\'\\\"\\`\\/\\#\\\\]*/,null]);return g(W,S)}var K=i({keywords:A,hashComments:true,cStyleComments:true,multiLineStrings:true,regexLiterals:true});function Q(V,ag){var U=/(?:^|\\s)nocode(?:\\s|$)/;var ab=/\\r\\n?|\\n/;var ac=V.ownerDocument;var S;if(V.currentStyle){S=V.currentStyle.whiteSpace}else{if(window.getComputedStyle){S=ac.defaultView.getComputedStyle(V,null).getPropertyValue(\"white-space\")}}var Z=S&&\"pre\"===S.substring(0,3);var af=ac.createElement(\"LI\");while(V.firstChild){af.appendChild(V.firstChild)}var W=[af];function ae(al){switch(al.nodeType){case 1:if(U.test(al.className)){break}if(\"BR\"===al.nodeName){ad(al);if(al.parentNode){al.parentNode.removeChild(al)}}else{for(var an=al.firstChild;an;an=an.nextSibling){ae(an)}}break;case 3:case 4:if(Z){var am=al.nodeValue;var aj=am.match(ab);if(aj){var ai=am.substring(0,aj.index);al.nodeValue=ai;var ah=am.substring(aj.index+aj[0].length);if(ah){var ak=al.parentNode;ak.insertBefore(ac.createTextNode(ah),al.nextSibling)}ad(al);if(!ai){al.parentNode.removeChild(al)}}}break}}function ad(ak){while(!ak.nextSibling){ak=ak.parentNode;if(!ak){return}}function ai(al,ar){var aq=ar?al.cloneNode(false):al;var ao=al.parentNode;if(ao){var ap=ai(ao,1);var an=al.nextSibling;ap.appendChild(aq);for(var am=an;am;am=an){an=am.nextSibling;ap.appendChild(am)}}return aq}var ah=ai(ak.nextSibling,0);for(var aj;(aj=ah.parentNode)&&aj.nodeType===1;){ah=aj}W.push(ah)}for(var Y=0;Y<W.length;++Y){ae(W[Y])}if(ag===(ag|0)){W[0].setAttribute(\"value\",ag)}var aa=ac.createElement(\"OL\");aa.className=\"linenums\";var X=Math.max(0,((ag-1))|0)||0;for(var Y=0,T=W.length;Y<T;++Y){af=W[Y];af.className=\"L\"+((Y+X)%10);if(!af.firstChild){af.appendChild(ac.createTextNode(\"\\xA0\"))}aa.appendChild(af)}V.appendChild(aa)}function D(ac){var aj=/\\bMSIE\\b/.test(navigator.userAgent);var am=/\\n/g;var al=ac.sourceCode;var an=al.length;var V=0;var aa=ac.spans;var T=aa.length;var ah=0;var X=ac.decorations;var Y=X.length;var Z=0;X[Y]=an;var ar,aq;for(aq=ar=0;aq<Y;){if(X[aq]!==X[aq+2]){X[ar++]=X[aq++];X[ar++]=X[aq++]}else{aq+=2}}Y=ar;for(aq=ar=0;aq<Y;){var at=X[aq];var ab=X[aq+1];var W=aq+2;while(W+2<=Y&&X[W+1]===ab){W+=2}X[ar++]=at;X[ar++]=ab;aq=W}Y=X.length=ar;var ae=null;while(ah<T){var af=aa[ah];var S=aa[ah+2]||an;var ag=X[Z];var ap=X[Z+2]||an;var W=Math.min(S,ap);var ak=aa[ah+1];var U;if(ak.nodeType!==1&&(U=al.substring(V,W))){if(aj){U=U.replace(am,\"\\r\")}ak.nodeValue=U;var ai=ak.ownerDocument;var ao=ai.createElement(\"SPAN\");ao.className=X[Z+1];var ad=ak.parentNode;ad.replaceChild(ao,ak);ao.appendChild(ak);if(V<S){aa[ah+1]=ak=ai.createTextNode(al.substring(W,S));ad.insertBefore(ak,ao.nextSibling)}}V=W;if(V>=S){ah+=2}if(V>=ap){Z+=2}}}var t={};function c(U,V){for(var S=V.length;--S>=0;){var T=V[S];if(!t.hasOwnProperty(T)){t[T]=U}else{if(window.console){console.warn(\"cannot override language handler %s\",T)}}}}function q(T,S){if(!(T&&t.hasOwnProperty(T))){T=/^\\s*</.test(S)?\"default-markup\":\"default-code\"}return t[T]}c(K,[\"default-code\"]);c(g([],[[F,/^[^<?]+/],[E,/^<!\\w[^>]*(?:>|$)/],[j,/^<\\!--[\\s\\S]*?(?:-\\->|$)/],[\"lang-\",/^<\\?([\\s\\S]+?)(?:\\?>|$)/],[\"lang-\",/^<%([\\s\\S]+?)(?:%>|$)/],[L,/^(?:<[%?]|[%?]>)/],[\"lang-\",/^<xmp\\b[^>]*>([\\s\\S]+?)<\\/xmp\\b[^>]*>/i],[\"lang-js\",/^<script\\b[^>]*>([\\s\\S]*?)(<\\/script\\b[^>]*>)/i],[\"lang-css\",/^<style\\b[^>]*>([\\s\\S]*?)(<\\/style\\b[^>]*>)/i],[\"lang-in.tag\",/^(<\\/?[a-z][^<>]*>)/i]]),[\"default-markup\",\"htm\",\"html\",\"mxml\",\"xhtml\",\"xml\",\"xsl\"]);c(g([[F,/^[\\s]+/,null,\" \\t\\r\\n\"],[n,/^(?:\\\"[^\\\"]*\\\"?|\\'[^\\']*\\'?)/,null,\"\\\"'\"]],[[m,/^^<\\/?[a-z](?:[\\w.:-]*\\w)?|\\/?>$/i],[P,/^(?!style[\\s=]|on)[a-z](?:[\\w:-]*\\w)?/i],[\"lang-uq.val\",/^=\\s*([^>\\'\\\"\\s]*(?:[^>\\'\\\"\\s\\/]|\\/(?=\\s)))/],[L,/^[=<>\\/]+/],[\"lang-js\",/^on\\w+\\s*=\\s*\\\"([^\\\"]+)\\\"/i],[\"lang-js\",/^on\\w+\\s*=\\s*\\'([^\\']+)\\'/i],[\"lang-js\",/^on\\w+\\s*=\\s*([^\\\"\\'>\\s]+)/i],[\"lang-css\",/^style\\s*=\\s*\\\"([^\\\"]+)\\\"/i],[\"lang-css\",/^style\\s*=\\s*\\'([^\\']+)\\'/i],[\"lang-css\",/^style\\s*=\\s*([^\\\"\\'>\\s]+)/i]]),[\"in.tag\"]);c(g([],[[n,/^[\\s\\S]+/]]),[\"uq.val\"]);c(i({keywords:l,hashComments:true,cStyleComments:true,types:e}),[\"c\",\"cc\",\"cpp\",\"cxx\",\"cyc\",\"m\"]);c(i({keywords:\"null,true,false\"}),[\"json\"]);c(i({keywords:R,hashComments:true,cStyleComments:true,verbatimStrings:true,types:e}),[\"cs\"]);c(i({keywords:x,cStyleComments:true}),[\"java\"]);c(i({keywords:H,hashComments:true,multiLineStrings:true}),[\"bsh\",\"csh\",\"sh\"]);c(i({keywords:I,hashComments:true,multiLineStrings:true,tripleQuotedStrings:true}),[\"cv\",\"py\"]);c(i({keywords:s,hashComments:true,multiLineStrings:true,regexLiterals:true}),[\"perl\",\"pl\",\"pm\"]);c(i({keywords:f,hashComments:true,multiLineStrings:true,regexLiterals:true}),[\"rb\"]);c(i({keywords:w,cStyleComments:true,regexLiterals:true}),[\"js\"]);c(i({keywords:r,hashComments:3,cStyleComments:true,multilineStrings:true,tripleQuotedStrings:true,regexLiterals:true}),[\"coffee\"]);c(g([],[[C,/^[\\s\\S]+/]]),[\"regex\"]);function d(V){var U=V.langExtension;try{var S=a(V.sourceNode);var T=S.sourceCode;V.sourceCode=T;V.spans=S.spans;V.basePos=0;q(U,T)(V);D(V)}catch(W){if(\"console\" in window){console.log(W&&W.stack?W.stack:W)}}}function y(W,V,U){var S=document.createElement(\"PRE\");S.innerHTML=W;if(U){Q(S,U)}var T={langExtension:V,numberLines:U,sourceNode:S};d(T);return S.innerHTML}function b(ad){function Y(af){return document.getElementsByTagName(af)}var ac=[Y(\"pre\"),Y(\"code\"),Y(\"xmp\")];var T=[];for(var aa=0;aa<ac.length;++aa){for(var Z=0,V=ac[aa].length;Z<V;++Z){T.push(ac[aa][Z])}}ac=null;var W=Date;if(!W.now){W={now:function(){return +(new Date)}}}var X=0;var S;var ab=/\\blang(?:uage)?-([\\w.]+)(?!\\S)/;var ae=/\\bprettyprint\\b/;function U(){var ag=(window.PR_SHOULD_USE_CONTINUATION?W.now()+250:Infinity);for(;X<T.length&&W.now()<ag;X++){var aj=T[X];var ai=aj.className;if(ai.indexOf(\"prettyprint\")>=0){var ah=ai.match(ab);var am;if(!ah&&(am=o(aj))&&\"CODE\"===am.tagName){ah=am.className.match(ab)}if(ah){ah=ah[1]}var al=false;for(var ak=aj.parentNode;ak;ak=ak.parentNode){if((ak.tagName===\"pre\"||ak.tagName===\"code\"||ak.tagName===\"xmp\")&&ak.className&&ak.className.indexOf(\"prettyprint\")>=0){al=true;break}}if(!al){var af=aj.className.match(/\\blinenums\\b(?::(\\d+))?/);af=af?af[1]&&af[1].length?+af[1]:true:false;if(af){Q(aj,af)}S={langExtension:ah,sourceNode:aj,numberLines:af};d(S)}}}if(X<T.length){setTimeout(U,250)}else{if(ad){ad()}}}U()}window.prettyPrintOne=y;window.prettyPrint=b;window.PR={createSimpleLexer:g,registerLangHandler:c,sourceDecorator:i,PR_ATTRIB_NAME:P,PR_ATTRIB_VALUE:n,PR_COMMENT:j,PR_DECLARATION:E,PR_KEYWORD:z,PR_LITERAL:G,PR_NOCODE:N,PR_PLAIN:F,PR_PUNCTUATION:L,PR_SOURCE:J,PR_STRING:C,PR_TAG:m,PR_TYPE:O}})();PR.registerLangHandler(PR.createSimpleLexer([],[[PR.PR_DECLARATION,/^<!\\w[^>]*(?:>|$)/],[PR.PR_COMMENT,/^<\\!--[\\s\\S]*?(?:-\\->|$)/],[PR.PR_PUNCTUATION,/^(?:<[%?]|[%?]>)/],[\"lang-\",/^<\\?([\\s\\S]+?)(?:\\?>|$)/],[\"lang-\",/^<%([\\s\\S]+?)(?:%>|$)/],[\"lang-\",/^<xmp\\b[^>]*>([\\s\\S]+?)<\\/xmp\\b[^>]*>/i],[\"lang-handlebars\",/^<script\\b[^>]*type\\s*=\\s*['\"]?text\\/x-handlebars-template['\"]?\\b[^>]*>([\\s\\S]*?)(<\\/script\\b[^>]*>)/i],[\"lang-js\",/^<script\\b[^>]*>([\\s\\S]*?)(<\\/script\\b[^>]*>)/i],[\"lang-css\",/^<style\\b[^>]*>([\\s\\S]*?)(<\\/style\\b[^>]*>)/i],[\"lang-in.tag\",/^(<\\/?[a-z][^<>]*>)/i],[PR.PR_DECLARATION,/^{{[#^>/]?\\s*[\\w.][^}]*}}/],[PR.PR_DECLARATION,/^{{&?\\s*[\\w.][^}]*}}/],[PR.PR_DECLARATION,/^{{{>?\\s*[\\w.][^}]*}}}/],[PR.PR_COMMENT,/^{{![^}]*}}/]]),[\"handlebars\",\"hbs\"]);PR.registerLangHandler(PR.createSimpleLexer([[PR.PR_PLAIN,/^[ \\t\\r\\n\\f]+/,null,\" \\t\\r\\n\\f\"]],[[PR.PR_STRING,/^\\\"(?:[^\\n\\r\\f\\\\\\\"]|\\\\(?:\\r\\n?|\\n|\\f)|\\\\[\\s\\S])*\\\"/,null],[PR.PR_STRING,/^\\'(?:[^\\n\\r\\f\\\\\\']|\\\\(?:\\r\\n?|\\n|\\f)|\\\\[\\s\\S])*\\'/,null],[\"lang-css-str\",/^url\\(([^\\)\\\"\\']*)\\)/i],[PR.PR_KEYWORD,/^(?:url|rgb|\\!important|@import|@page|@media|@charset|inherit)(?=[^\\-\\w]|$)/i,null],[\"lang-css-kw\",/^(-?(?:[_a-z]|(?:\\\\[0-9a-f]+ ?))(?:[_a-z0-9\\-]|\\\\(?:\\\\[0-9a-f]+ ?))*)\\s*:/i],[PR.PR_COMMENT,/^\\/\\*[^*]*\\*+(?:[^\\/*][^*]*\\*+)*\\//],[PR.PR_COMMENT,/^(?:<!--|-->)/],[PR.PR_LITERAL,/^(?:\\d+|\\d*\\.\\d+)(?:%|[a-z]+)?/i],[PR.PR_LITERAL,/^#(?:[0-9a-f]{3}){1,2}/i],[PR.PR_PLAIN,/^-?(?:[_a-z]|(?:\\\\[\\da-f]+ ?))(?:[_a-z\\d\\-]|\\\\(?:\\\\[\\da-f]+ ?))*/i],[PR.PR_PUNCTUATION,/^[^\\s\\w\\'\\\"]+/]]),[\"css\"]);PR.registerLangHandler(PR.createSimpleLexer([],[[PR.PR_KEYWORD,/^-?(?:[_a-z]|(?:\\\\[\\da-f]+ ?))(?:[_a-z\\d\\-]|\\\\(?:\\\\[\\da-f]+ ?))*/i]]),[\"css-kw\"]);PR.registerLangHandler(PR.createSimpleLexer([],[[PR.PR_STRING,/^[^\\)\\\"\\']+/]]),[\"css-str\"]);\n","usedDeprecatedRules":[]},{"filePath":"/home/vonj/Github/Nexus/coverage/sorter.js","messages":[{"ruleId":null,"message":"Unused eslint-disable directive (no problems were reported).","line":1,"column":1,"severity":1,"nodeType":null,"fix":{"range":[0,20],"text":" "}}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":1,"source":"/* eslint-disable */\nvar addSorting = (function() {\n    'use strict';\n    var cols,\n        currentSort = {\n            index: 0,\n            desc: false\n        };\n\n    // returns the summary table element\n    function getTable() {\n        return document.querySelector('.coverage-summary');\n    }\n    // returns the thead element of the summary table\n    function getTableHeader() {\n        return getTable().querySelector('thead tr');\n    }\n    // returns the tbody element of the summary table\n    function getTableBody() {\n        return getTable().querySelector('tbody');\n    }\n    // returns the th element for nth column\n    function getNthColumn(n) {\n        return getTableHeader().querySelectorAll('th')[n];\n    }\n\n    function onFilterInput() {\n        const searchValue = document.getElementById('fileSearch').value;\n        const rows = document.getElementsByTagName('tbody')[0].children;\n        for (let i = 0; i < rows.length; i++) {\n            const row = rows[i];\n            if (\n                row.textContent\n                    .toLowerCase()\n                    .includes(searchValue.toLowerCase())\n            ) {\n                row.style.display = '';\n            } else {\n                row.style.display = 'none';\n            }\n        }\n    }\n\n    // loads the search box\n    function addSearchBox() {\n        var template = document.getElementById('filterTemplate');\n        var templateClone = template.content.cloneNode(true);\n        templateClone.getElementById('fileSearch').oninput = onFilterInput;\n        template.parentElement.appendChild(templateClone);\n    }\n\n    // loads all columns\n    function loadColumns() {\n        var colNodes = getTableHeader().querySelectorAll('th'),\n            colNode,\n            cols = [],\n            col,\n            i;\n\n        for (i = 0; i < colNodes.length; i += 1) {\n            colNode = colNodes[i];\n            col = {\n                key: colNode.getAttribute('data-col'),\n                sortable: !colNode.getAttribute('data-nosort'),\n                type: colNode.getAttribute('data-type') || 'string'\n            };\n            cols.push(col);\n            if (col.sortable) {\n                col.defaultDescSort = col.type === 'number';\n                colNode.innerHTML =\n                    colNode.innerHTML + '<span class=\"sorter\"></span>';\n            }\n        }\n        return cols;\n    }\n    // attaches a data attribute to every tr element with an object\n    // of data values keyed by column name\n    function loadRowData(tableRow) {\n        var tableCols = tableRow.querySelectorAll('td'),\n            colNode,\n            col,\n            data = {},\n            i,\n            val;\n        for (i = 0; i < tableCols.length; i += 1) {\n            colNode = tableCols[i];\n            col = cols[i];\n            val = colNode.getAttribute('data-value');\n            if (col.type === 'number') {\n                val = Number(val);\n            }\n            data[col.key] = val;\n        }\n        return data;\n    }\n    // loads all row data\n    function loadData() {\n        var rows = getTableBody().querySelectorAll('tr'),\n            i;\n\n        for (i = 0; i < rows.length; i += 1) {\n            rows[i].data = loadRowData(rows[i]);\n        }\n    }\n    // sorts the table using the data for the ith column\n    function sortByIndex(index, desc) {\n        var key = cols[index].key,\n            sorter = function(a, b) {\n                a = a.data[key];\n                b = b.data[key];\n                return a < b ? -1 : a > b ? 1 : 0;\n            },\n            finalSorter = sorter,\n            tableBody = document.querySelector('.coverage-summary tbody'),\n            rowNodes = tableBody.querySelectorAll('tr'),\n            rows = [],\n            i;\n\n        if (desc) {\n            finalSorter = function(a, b) {\n                return -1 * sorter(a, b);\n            };\n        }\n\n        for (i = 0; i < rowNodes.length; i += 1) {\n            rows.push(rowNodes[i]);\n            tableBody.removeChild(rowNodes[i]);\n        }\n\n        rows.sort(finalSorter);\n\n        for (i = 0; i < rows.length; i += 1) {\n            tableBody.appendChild(rows[i]);\n        }\n    }\n    // removes sort indicators for current column being sorted\n    function removeSortIndicators() {\n        var col = getNthColumn(currentSort.index),\n            cls = col.className;\n\n        cls = cls.replace(/ sorted$/, '').replace(/ sorted-desc$/, '');\n        col.className = cls;\n    }\n    // adds sort indicators for current column being sorted\n    function addSortIndicators() {\n        getNthColumn(currentSort.index).className += currentSort.desc\n            ? ' sorted-desc'\n            : ' sorted';\n    }\n    // adds event listeners for all sorter widgets\n    function enableUI() {\n        var i,\n            el,\n            ithSorter = function ithSorter(i) {\n                var col = cols[i];\n\n                return function() {\n                    var desc = col.defaultDescSort;\n\n                    if (currentSort.index === i) {\n                        desc = !currentSort.desc;\n                    }\n                    sortByIndex(i, desc);\n                    removeSortIndicators();\n                    currentSort.index = i;\n                    currentSort.desc = desc;\n                    addSortIndicators();\n                };\n            };\n        for (i = 0; i < cols.length; i += 1) {\n            if (cols[i].sortable) {\n                // add the click event handler on the th so users\n                // dont have to click on those tiny arrows\n                el = getNthColumn(i).querySelector('.sorter').parentElement;\n                if (el.addEventListener) {\n                    el.addEventListener('click', ithSorter(i));\n                } else {\n                    el.attachEvent('onclick', ithSorter(i));\n                }\n            }\n        }\n    }\n    // adds sorting functionality to the UI\n    return function() {\n        if (!getTable()) {\n            return;\n        }\n        cols = loadColumns();\n        loadData();\n        addSearchBox();\n        addSortIndicators();\n        enableUI();\n    };\n})();\n\nwindow.addEventListener('load', addSorting);\n","usedDeprecatedRules":[]},{"filePath":"/home/vonj/Github/Nexus/cypress.config.ts","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'on' is defined but never used.","line":5,"column":21,"nodeType":null,"messageId":"unusedVar","endLine":5,"endColumn":23},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'config' is defined but never used.","line":5,"column":25,"nodeType":null,"messageId":"unusedVar","endLine":5,"endColumn":31}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { defineConfig } from \"cypress\";\n\nexport default defineConfig({\n  e2e: {\n    setupNodeEvents(on, config) {\n      // implement node event listeners here\n    },\n    baseUrl: 'http://localhost:5173' // Assuming default Vite port\n  },\n}); ","usedDeprecatedRules":[]},{"filePath":"/home/vonj/Github/Nexus/cypress/e2e/ai/progressive_intelligence.cy.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/vonj/Github/Nexus/cypress/e2e/chat/slash_commands.cy.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/vonj/Github/Nexus/cypress/e2e/chat/slash_commands_autocomplete.cy.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/vonj/Github/Nexus/cypress/e2e/chat/streaming_composer.cy.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/vonj/Github/Nexus/cypress/e2e/chat/streaming_composer_stream.cy.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":8,"column":17,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":8,"endColumn":20,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[252,255],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[252,255],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'_url' is defined but never used.","line":16,"column":42,"nodeType":null,"messageId":"unusedVar","endLine":16,"endColumn":46},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'_init' is defined but never used.","line":16,"column":61,"nodeType":null,"messageId":"unusedVar","endLine":16,"endColumn":66}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/// <reference types=\"cypress\" />\n\ndescribe('StreamingComposer – streaming flow', () => {\n  beforeEach(() => {\n    cy.visit('/', {\n      onBeforeLoad(win) {\n        // Enable the v2 chat feature flag and set a predictable endpoint path\n        (win as any).importMeta = {\n          env: {\n            VITE_CHAT_V2: '1',\n            VITE_AI_CHAT_URL: '/functions/v1/ai_chat',\n          },\n        };\n\n        // Stub window.fetch to simulate a streaming response\n        cy.stub(win, 'fetch').callsFake((_url: RequestInfo, _init?: RequestInit) => {\n          const encoder = new TextEncoder();\n          const chunks = ['Hello ', 'world!'];\n\n          const stream = new ReadableStream<Uint8Array>({\n            start(controller) {\n              chunks.forEach((c) => controller.enqueue(encoder.encode(c)));\n              controller.close();\n            },\n          });\n\n          const response = new Response(stream, {\n            status: 200,\n            headers: {\n              'x-conversation-id': 'test-conv-1',\n            },\n          });\n\n          return Promise.resolve(response);\n        });\n      },\n    });\n  });\n\n  it('streams assistant response', () => {\n    cy.get('textarea[placeholder=\"Type your message...\"]').type('Hi there');\n    cy.contains('button', 'Send').click();\n\n    // Wait for streaming chunks to appear merged\n    cy.contains('Hello world!').should('exist');\n  });\n}); ","usedDeprecatedRules":[]},{"filePath":"/home/vonj/Github/Nexus/cypress/e2e/operations.cy.ts","messages":[],"suppressedMessages":[{"ruleId":"@typescript-eslint/ban-ts-comment","severity":2,"message":"Do not use \"@ts-nocheck\" because it alters compilation errors.","line":2,"column":1,"nodeType":"Line","messageId":"tsDirectiveComment","endLine":2,"endColumn":15,"suppressions":[{"kind":"directive","justification":""}]}],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/vonj/Github/Nexus/cypress/e2e/operations_playbook.cy.ts","messages":[],"suppressedMessages":[{"ruleId":"@typescript-eslint/ban-ts-comment","severity":2,"message":"Do not use \"@ts-nocheck\" because it alters compilation errors.","line":2,"column":1,"nodeType":"Line","messageId":"tsDirectiveComment","endLine":2,"endColumn":15,"suppressions":[{"kind":"directive","justification":""}]}],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/vonj/Github/Nexus/cypress/e2e/security/passkey_registration.cy.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/vonj/Github/Nexus/eslint.config.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/vonj/Github/Nexus/examples/AnalyticsDashboardUnified.tsx","messages":[{"ruleId":"no-restricted-syntax","severity":1,"message":"Use design tokens instead of hardcoded text colors (e.g., text-foreground, text-muted-foreground)","line":76,"column":71,"nodeType":"Literal","messageId":"restrictedSyntax","endLine":76,"endColumn":85}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\n * AnalyticsDashboardUnified.tsx\n * Example: Simplified analytics dashboard using unified components\n * \n * BEFORE: 429 lines with redundant patterns\n * AFTER: ~100 lines with reusable components\n * \n * Demonstrates 75% code reduction through component unification\n */\n\nimport React, { useState } from 'react';\nimport { Users, Activity, TrendingUp, Target, Filter, Download } from 'lucide-react';\nimport { Button } from '../src/components/ui/Button';\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from '../src/components/ui/Tabs';\nimport { \n  DashboardLayout, \n  ContentSection, \n  TableCard,\n  type UnifiedMetricCardProps \n} from '../src/components/patterns/UnifiedComponents';\nimport {\n  Select,\n  SelectContent,\n  SelectItem,\n  SelectTrigger,\n  SelectValue,\n} from '../src/components/ui/Select';\n\nconst AnalyticsDashboardUnified: React.FC = () => {\n  const [activeTimeframe, setActiveTimeframe] = useState<string>('month');\n\n  // Unified metrics configuration - replaces 80+ lines of custom metric cards\n  const performanceMetrics: UnifiedMetricCardProps[] = [\n    {\n      title: 'Active Users',\n      value: '24,892',\n      delta: '+12.3%',\n      icon: Users,\n      sparklineData: [20000, 21000, 22500, 24000, 24892]\n    },\n    {\n      title: 'Total Sessions',\n      value: '38,129',\n      delta: '+18.2%',\n      icon: Activity,\n      sparklineData: [30000, 32000, 35000, 37000, 38129]\n    },\n    {\n      title: 'Conversion Rate',\n      value: '6.4%',\n      delta: '+1.2%',\n      icon: TrendingUp\n    },\n    {\n      title: 'User Retention',\n      value: '78.5%',\n      delta: '-2.1%',\n      icon: Target\n    }\n  ];\n\n  // Table data - replaces custom table implementations\n  const usageData = [\n    { category: 'Finance Tools', usage: '32%', growth: '+15%' },\n    { category: 'AI Features', usage: '28%', growth: '+45%' },\n    { category: 'Reporting', usage: '18%', growth: '+12%' }\n  ];\n\n  const usageColumns = [\n    { key: 'category', header: 'Category' },\n    { key: 'usage', header: 'Usage %' },\n    { \n      key: 'growth', \n      header: 'Growth', \n      render: (value: string) => (\n        <span className={value.startsWith('+') ? 'text-emerald-600' : 'text-red-600'}>\n          {value}\n        </span>\n      )\n    }\n  ];\n\n  return (\n    <DashboardLayout\n      header={{\n        title: \"Analytics Dashboard\",\n        subtitle: \"Track performance, usage, and growth metrics\",\n        actions: (\n          <div className=\"flex items-center gap-2\">\n            <Select defaultValue={activeTimeframe} onValueChange={setActiveTimeframe}>\n              <SelectTrigger className=\"w-[160px]\">\n                <SelectValue />\n              </SelectTrigger>\n              <SelectContent>\n                <SelectItem value=\"month\">This Month</SelectItem>\n                <SelectItem value=\"quarter\">This Quarter</SelectItem>\n              </SelectContent>\n            </Select>\n            <Button variant=\"outline\" size=\"icon\">\n              <Filter className=\"h-4 w-4\" />\n            </Button>\n            <Button variant=\"outline\" size=\"icon\">\n              <Download className=\"h-4 w-4\" />\n            </Button>\n          </div>\n        )\n      }}\n      metrics={{\n        metrics: performanceMetrics,\n        columns: 4\n      }}\n    >\n      <Tabs defaultValue=\"overview\">\n        <TabsList>\n          <TabsTrigger value=\"overview\">Overview</TabsTrigger>\n          <TabsTrigger value=\"acquisition\">Acquisition</TabsTrigger>\n          <TabsTrigger value=\"behavior\">Behavior</TabsTrigger>\n        </TabsList>\n        \n        <TabsContent value=\"overview\" className=\"space-y-6\">\n          <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-6\">\n            <TableCard\n              title=\"Feature Usage\"\n              description=\"Most popular features and their growth\"\n              columns={usageColumns}\n              data={usageData}\n            />\n            \n            <ContentSection \n              title=\"Regional Performance\" \n              description=\"User distribution by region\"\n              variant=\"elevated\"\n            >\n              <p className=\"text-muted-foreground\">Regional analytics content...</p>\n            </ContentSection>\n          </div>\n        </TabsContent>\n        \n        <TabsContent value=\"acquisition\">\n          <ContentSection title=\"Acquisition Channels\" variant=\"elevated\">\n            <p className=\"text-muted-foreground\">Acquisition analytics...</p>\n          </ContentSection>\n        </TabsContent>\n        \n        <TabsContent value=\"behavior\">\n          <ContentSection title=\"User Behavior\" variant=\"elevated\">\n            <p className=\"text-muted-foreground\">Behavior analytics...</p>\n          </ContentSection>\n        </TabsContent>\n      </Tabs>\n    </DashboardLayout>\n  );\n};\n\nexport default AnalyticsDashboardUnified; ","usedDeprecatedRules":[]},{"filePath":"/home/vonj/Github/Nexus/examples/MigratedDepartmentPage.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/vonj/Github/Nexus/jest.config.cjs","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/vonj/Github/Nexus/jest.setup.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/vonj/Github/Nexus/postcss.config.cjs","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/vonj/Github/Nexus/prisma/seed.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/vonj/Github/Nexus/prisma/seed.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/vonj/Github/Nexus/scripts/ai-transformation-demo.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/vonj/Github/Nexus/scripts/analyze-consistency.cjs","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/vonj/Github/Nexus/scripts/analyze-unused.cjs","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/vonj/Github/Nexus/scripts/backfill-profiles.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/vonj/Github/Nexus/scripts/check_n8n_workflows.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/vonj/Github/Nexus/scripts/cleanup-modules.cjs","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/vonj/Github/Nexus/scripts/embed_ops_docs.ts","messages":[],"suppressedMessages":[{"ruleId":"@typescript-eslint/ban-ts-comment","severity":2,"message":"Do not use \"@ts-nocheck\" because it alters compilation errors.","line":2,"column":1,"nodeType":"Line","messageId":"tsDirectiveComment","endLine":2,"endColumn":15,"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":39,"column":32,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":39,"endColumn":35,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1479,1482],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1479,1482],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}],"suppressions":[{"kind":"directive","justification":""}]}],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/vonj/Github/Nexus/scripts/fix-consistency.cjs","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/vonj/Github/Nexus/scripts/fix-hardcoded-colors.cjs","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/vonj/Github/Nexus/scripts/integrations/paypal_worker.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":68,"column":15,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":68,"endColumn":18,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2429,2432],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2429,2432],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":89,"column":33,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":89,"endColumn":36,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3053,3056],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3053,3056],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/*\n * PayPal Finance Sync Worker\n * -----------------------------------------\n * 1. Auths with PayPal via client credentials to get an access token.\n * 2. Fetches all successful transactions since last sync (persisted in a simple `lastSync` file or env var).\n * 3. Transforms transactions into KPI snapshot rows.\n * 4. Calls the `upsert_kpis` Edge Function to persist them.\n *\n * ENV required:\n *   PAYPAL_CLIENT_ID\n *   PAYPAL_CLIENT_SECRET\n *   PAYPAL_ENV            =>  \"live\" | \"sandbox\" (default sandbox)\n *   SUPABASE_URL\n *   SUPABASE_EDGE_JWT     =>  Service role JWT with { org_id } claim\n */\nimport fs from 'fs/promises';\nimport path from 'path';\nimport fetch from 'node-fetch';\n\ninterface PayPalAccessTokenResponse {\n  access_token: string;\n  expires_in: number;\n  token_type: string;\n}\n\ninterface PayPalTransaction {\n  transaction_info: {\n    transaction_id: string;\n    transaction_initiation_date: string;\n    transaction_amount: { currency_code: string; value: string };\n    transaction_status: string;\n  };\n}\n\nconst {\n  PAYPAL_CLIENT_ID,\n  PAYPAL_CLIENT_SECRET,\n  PAYPAL_ENV = 'sandbox',\n  SUPABASE_URL,\n  SUPABASE_EDGE_JWT,\n} = process.env;\n\nif (!PAYPAL_CLIENT_ID || !PAYPAL_CLIENT_SECRET) throw new Error('Missing PayPal credentials');\nif (!SUPABASE_URL || !SUPABASE_EDGE_JWT) throw new Error('Missing Supabase env vars');\n\nconst PP_BASE = PAYPAL_ENV === 'live' ? 'https://api.paypal.com' : 'https://api.sandbox.paypal.com';\n\nasync function getAccessToken(): Promise<string> {\n  const res = await fetch(`${PP_BASE}/v1/oauth2/token`, {\n    method: 'POST',\n    headers: {\n      Authorization: `Basic ${Buffer.from(`${PAYPAL_CLIENT_ID}:${PAYPAL_CLIENT_SECRET}`).toString('base64')}`,\n      'Content-Type': 'application/x-www-form-urlencoded',\n    },\n    body: 'grant_type=client_credentials',\n  });\n  if (!res.ok) throw new Error(`PayPal token error ${res.status}`);\n  const json = (await res.json()) as PayPalAccessTokenResponse;\n  return json.access_token;\n}\n\nasync function fetchTransactions(token: string, start: string, end: string): Promise<PayPalTransaction[]> {\n  const url = `${PP_BASE}/v1/reporting/transactions?start_date=${encodeURIComponent(start)}&end_date=${encodeURIComponent(end)}&transaction_status=S&page_size=100`;\n  const res = await fetch(url, {\n    headers: { Authorization: `Bearer ${token}` },\n  });\n  if (!res.ok) throw new Error(`PayPal transactions error ${res.status}`);\n  const json: any = await res.json();\n  return json.transaction_details as PayPalTransaction[];\n}\n\nasync function getLastSync(): Promise<string> {\n  const file = path.resolve('.cache/paypal_last_sync');\n  try {\n    const str = await fs.readFile(file, 'utf-8');\n    return str.trim();\n  } catch {\n    // default 30 days ago\n    return new Date(Date.now() - 30 * 24 * 60 * 60 * 1000).toISOString();\n  }\n}\n\nasync function setLastSync(iso: string) {\n  const file = path.resolve('.cache/paypal_last_sync');\n  await fs.mkdir(path.dirname(file), { recursive: true });\n  await fs.writeFile(file, iso, 'utf-8');\n}\n\nasync function upsertKpis(rows: any[]) {\n  const res = await fetch(`${SUPABASE_URL}/functions/v1/upsert_kpis`, {\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/json',\n      Authorization: `Bearer ${SUPABASE_EDGE_JWT}`,\n    },\n    body: JSON.stringify({ snapshots: rows }),\n  });\n  if (!res.ok) throw new Error(`upsert_kpis failed ${res.status}`);\n  console.log('Inserted', rows.length, 'PayPal KPI snapshots');\n}\n\n(async () => {\n  const lastSync = await getLastSync();\n  const startIso = lastSync;\n  const endIso = new Date().toISOString();\n\n  const ppToken = await getAccessToken();\n  const txns = await fetchTransactions(ppToken, startIso, endIso);\n\n  const snapshots = txns.map((t) => ({\n    department_id: 'finance',\n    kpi_id: 'paypal_revenue',\n    value: {\n      amount: parseFloat(t.transaction_info.transaction_amount.value),\n      currency: t.transaction_info.transaction_amount.currency_code,\n      txn_id: t.transaction_info.transaction_id,\n    },\n    source: 'paypal',\n    captured_at: t.transaction_info.transaction_initiation_date,\n  }));\n\n  if (snapshots.length) {\n    await upsertKpis(snapshots);\n  }\n\n  await setLastSync(endIso);\n})(); ","usedDeprecatedRules":[]},{"filePath":"/home/vonj/Github/Nexus/scripts/migrate-redundant-components.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/vonj/Github/Nexus/scripts/migrate-redundant-pages.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/vonj/Github/Nexus/scripts/migrate-redundant-pages.mjs","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/vonj/Github/Nexus/scripts/scan-models.cjs","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/vonj/Github/Nexus/scripts/simple_db_check.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/vonj/Github/Nexus/src/App.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'BrowserRouter' is defined but never used.","line":2,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":2,"endColumn":23},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'ProfileSettings' is defined but never used.","line":25,"column":8,"nodeType":null,"messageId":"unusedVar","endLine":25,"endColumn":23},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'SecuritySettings' is defined but never used.","line":26,"column":8,"nodeType":null,"messageId":"unusedVar","endLine":26,"endColumn":24},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'TeamSettings' is defined but never used.","line":27,"column":8,"nodeType":null,"messageId":"unusedVar","endLine":27,"endColumn":20},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'BillingSettings' is defined but never used.","line":28,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":28,"endColumn":25},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'ApiLearningPage' is defined but never used.","line":63,"column":8,"nodeType":null,"messageId":"unusedVar","endLine":63,"endColumn":23},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'ClientIntelligencePage' is defined but never used.","line":66,"column":8,"nodeType":null,"messageId":"unusedVar","endLine":66,"endColumn":30}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React from 'react';\nimport { BrowserRouter, Routes, Route, Navigate, useParams, Outlet } from 'react-router-dom';\n\n// Layout Components\nimport { UnifiedLayout } from './components/layout/UnifiedLayout';\nimport { HelpLayout } from './layouts/HelpLayout';\nimport { AdminLayout } from './layouts/AdminLayout';\n\n// Providers\nimport { NotificationProvider } from './contexts/NotificationContext';\nimport { MicrosoftGraphProvider } from './lib/core/providers/MicrosoftGraphProvider';\nimport { SystemContextProvider } from './contexts/SystemContext';\nimport { OnboardingProvider } from './contexts/OnboardingContext';\n\n// Storage cleanup\nimport { cleanupCorruptedStorage } from './lib/security/secureStorage';\n\n// Pages\nimport EnhancedDashboard from './components/dashboard/EnhancedDashboard';\nimport NotFoundPage from './pages/NotFoundPage';\nimport AIHubPage from './pages/AIHubPage';\nimport WorkspacePage from './pages/WorkspacePage';\nimport ChatPage from './pages/ChatPage';\nimport SettingsPage from './pages/settings/SettingsPage';\nimport ProfileSettings from './pages/settings/ProfileSettings';\nimport SecuritySettings from './pages/settings/SecuritySettings';\nimport TeamSettings from './pages/settings/TeamSettings';\nimport { BillingSettings } from './pages/settings/BillingSettings';\nimport { Login } from './pages/Login';\nimport AuthCallback from './pages/AuthCallback';\nimport ResetPassword from './pages/ResetPassword';\nimport EmailNotVerified from './pages/EmailNotVerified';\nimport GoogleAnalyticsCallback from './pages/GoogleAnalyticsCallback';\nimport GoogleWorkspaceCallback from './pages/GoogleWorkspaceCallback';\nimport NinjaRmmCallback from './pages/NinjaRmmCallback';\nimport Microsoft365Callback from './pages/Microsoft365Callback';\n\n// Business Intelligence Components\nimport { QuickBusinessSetup } from './components/business/QuickBusinessSetup';\nimport { BusinessIntelligentChat } from './components/ai/BusinessIntelligentChat';\n\n// Marketing Landing Page\nimport MarketingLanding from './pages/MarketingLanding';\n\n// Department Pages\nimport FinancialOperationsPage from './pages/departments/finance/FinancialOperationsPage';\nimport SalesPerformancePage from './pages/departments/sales/SalesPerformancePage';\nimport MarketingAnalyticsPage from './pages/departments/marketing/MarketingAnalyticsPage';\nimport SupportAnalyticsPage from './pages/departments/support/SupportAnalyticsPage';\nimport MaturityAnalyticsPage from './pages/departments/maturity/MaturityAnalyticsPage';\nimport AnalyticsDashboardPage from './pages/departments/operations/AnalyticsDashboardPage';\nimport DepartmentHomePage from './pages/departments/DepartmentHomePage';\nimport OperationsPage from './pages/departments/operations/OperationsPage';\n\n// Analytics Pages\nimport AssessmentPage from './pages/AssessmentPage';\nimport CompanyStatusPage from './pages/CompanyStatusPage';\n\n// Data Warehouse\nimport DataWarehouseHome from './pages/analytics/DataWarehouseHome';\n\n// API Learning System\nimport ApiLearningPage from './pages/integrations/api-learning';\n\n// Client Intelligence\nimport ClientIntelligencePage from './pages/integrations/ClientIntelligencePage';\n\n// Billing\nimport { PricingPage } from './pages/billing/PricingPage';\n\n// Documents\nimport DocumentCenter from './pages/DocumentCenter';\n\n// Help & User Guide\nimport { UserGuidePage } from './pages/help/UserGuidePage';\nimport { PrivacyPolicyPage } from './pages/help/PrivacyPolicyPage';\nimport { DataUsagePage } from './pages/help/DataUsagePage';\nimport { SecurityCompliancePage } from './pages/help/SecurityCompliancePage';\nimport { AboutPage } from './pages/help/AboutPage';\nimport { AdminPage } from './pages/admin/AdminPage';\nimport { UserManagementPage } from './pages/admin/UserManagementPage';\n\n// Import at the top of the file\nimport { ProtectedRoute } from './components/auth/ProtectedRoute';\n\nimport UnifiedAnalyticsPage from '@/pages/analytics/UnifiedAnalyticsPage';\n\n// Redirect Components\nconst LegacyDeptRedirect: React.FC = () => {\n  const { departmentId } = useParams<{ departmentId: string }>();\n  if (!departmentId) return <Navigate to=\"/\" replace />;\n  return <Navigate to={`/${departmentId}`} replace />;\n};\n\nconst AppPathRedirect: React.FC = () => {\n  const path = window.location.pathname.replace(/^\\/app/, '') || '/';\n  return <Navigate to={path} replace />;\n};\n\n// --- Static Page Imports ---\nimport { CompanyProfilePage } from './pages/onboarding/CompanyProfilePage';\n\n// --- Dynamic Page Imports ---\n// These are pages that can be loaded on demand.\nconst ProfilePage = React.lazy(() => import('./pages/ProfilePage'));\n\n/**\n * Main App Component\n * \n * Routes for the application including all sidebar navigation items\n */\nfunction App() {\n  // Clean up any corrupted localStorage entries on app start\n  React.useEffect(() => {\n    try {\n      cleanupCorruptedStorage();\n    } catch (error) {\n      console.warn('Failed to cleanup corrupted storage:', error);\n    }\n  }, []);\n\n  return (\n    <MicrosoftGraphProvider>\n      <SystemContextProvider>\n        <NotificationProvider>\n          <OnboardingProvider>\n            <Routes>\n              {/* Public Marketing Landing Page */}\n              <Route path=\"/\" element={<MarketingLanding />} />\n              \n              {/* Public Marketing Pages */}\n              <Route path=\"/pricing\" element={<PricingPage />} />\n              \n              {/* Auth Routes */}\n              <Route path=\"/login\" element={<Login />} />\n              <Route path=\"/auth/callback\" element={<AuthCallback />} />\n              <Route path=\"/integrations/google-analytics/callback\" element={<GoogleAnalyticsCallback />} />\n              <Route path=\"/integrations/google-workspace/callback\" element={<GoogleWorkspaceCallback />} />\n              <Route path=\"/integrations/ninjarmm/callback\" element={<NinjaRmmCallback />} />\n              <Route path=\"/microsoft365/callback\" element={<Microsoft365Callback />} />\n              <Route path=\"/reset-password\" element={<ResetPassword />} />\n              <Route path=\"/email-not-verified\" element={<EmailNotVerified />} />\n              \n              {/* Help Center Routes (Publicly Accessible) */}\n              <Route path=\"/help\" element={<HelpLayout />}>\n                <Route index element={<Navigate to=\"/help/user-guide\" replace />} />\n                <Route path=\"user-guide\" element={<UserGuidePage />} />\n                <Route path=\"privacy-policy\" element={<PrivacyPolicyPage />} />\n                <Route path=\"data-usage\" element={<DataUsagePage />} />\n                <Route path=\"security-compliance\" element={<SecurityCompliancePage />} />\n                <Route path=\"about\" element={<AboutPage />} />\n              </Route>\n              \n              {/* Admin Routes */}\n              <Route path=\"/admin\" element={\n                <ProtectedRoute allowedRoles={['admin']}>\n                  <AdminLayout />\n                </ProtectedRoute>\n              }>\n                <Route index element={<AdminPage />} />\n                <Route path=\"users\" element={<UserManagementPage />} />\n              </Route>\n              \n              {/* Protected App Routes (now at root) */}\n              <Route element={\n                <ProtectedRoute>\n                  <UnifiedLayout><Outlet /></UnifiedLayout>\n                </ProtectedRoute>\n              }>\n                {/* Core Routes */}\n                <Route path=\"/dashboard\" element={<EnhancedDashboard />} />\n                <Route path=\"/company-status\" element={<CompanyStatusPage />} />\n                <Route path=\"/workspace\" element={<WorkspacePage />} />\n                <Route path=\"/documents\" element={<DocumentCenter />} />\n                <Route path=\"/assessment\" element={<AssessmentPage />} />\n                \n                {/* Department Routes - Standardized Structure */}\n                <Route path=\"/operations\" element={<OperationsPage />} />\n                <Route path=\"/operations/analytics\" element={<AnalyticsDashboardPage />} />\n                \n                <Route path=\"/sales\" element={<DepartmentHomePage />} />\n                <Route path=\"/sales/performance\" element={<SalesPerformancePage />} />\n                \n                <Route path=\"/finance\" element={<DepartmentHomePage />} />\n                <Route path=\"/finance/operations\" element={<FinancialOperationsPage />} />\n                \n                <Route path=\"/marketing\" element={<DepartmentHomePage />} />\n                <Route path=\"/marketing/analytics\" element={<MarketingAnalyticsPage />} />\n                \n                <Route path=\"/support\" element={<DepartmentHomePage />} />\n                <Route path=\"/support/analytics\" element={<SupportAnalyticsPage />} />\n                \n                <Route path=\"/maturity\" element={<DepartmentHomePage />} />\n                <Route path=\"/maturity/analytics\" element={<MaturityAnalyticsPage />} />\n                \n                <Route path=\"/hr\" element={<DepartmentHomePage />} />\n                <Route path=\"/it\" element={<DepartmentHomePage />} />\n                <Route path=\"/product\" element={<DepartmentHomePage />} />\n                <Route path=\"/customer-success\" element={<DepartmentHomePage />} />\n                <Route path=\"/legal\" element={<DepartmentHomePage />} />\n\n                {/* Analytics Routes - Consolidated Structure */}\n                <Route path=\"/analytics\" element={<DataWarehouseHome />} />\n                <Route path=\"/analytics/unified\" element={<UnifiedAnalyticsPage />} />\n                \n                {/* AI Routes */}\n                <Route path=\"/ai-hub\" element={<AIHubPage />} />\n                <Route path=\"/chat\" element={<ChatPage />} />\n                \n                {/* Business Intelligence Routes */}\n                <Route path=\"/business/setup\" element={<QuickBusinessSetup />} />\n                <Route path=\"/business/advisor\" element={<BusinessIntelligentChat />} />\n                \n                {/* Settings Routes */}\n                <Route path=\"/settings\" element={<SettingsPage />} />\n                \n                {/* Onboarding Routes */}\n                <Route path=\"/onboarding/company-profile\" element={<CompanyProfilePage />} />\n                \n                {/* Settings & Profile */}\n                <Route path=\"/profile\" element={<ProfilePage />} />\n                \n                {/* 404 Route */}\n                <Route path=\"*\" element={<NotFoundPage />} />\n              </Route>\n\n              {/* Legacy route redirects - consolidated */}\n              <Route path=\"/app/*\" element={<AppPathRedirect />} />\n              <Route path=\"/departments/:departmentId/*\" element={<LegacyDeptRedirect />} />\n              <Route path=\"/api-learning\" element={<Navigate to=\"/integrations/api-learning\" replace />} />\n              \n              {/* 404 Route */}\n              <Route path=\"*\" element={<NotFoundPage />} />\n            </Routes>\n          </OnboardingProvider>\n        </NotificationProvider>\n      </SystemContextProvider>\n    </MicrosoftGraphProvider>\n  );\n}\n\nexport default App;\n","usedDeprecatedRules":[]},{"filePath":"/home/vonj/Github/Nexus/src/components/Confetti.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/vonj/Github/Nexus/src/components/ai/AIFeatureCard.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'LucideIcon' is defined but never used.","line":7,"column":15,"nodeType":null,"messageId":"unusedVar","endLine":7,"endColumn":25}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\n * AIFeatureCard.tsx\n * Consistent AI feature card following Nexus design system\n */\n\nimport React from 'react';\nimport type { LucideIcon } from 'lucide-react';\nimport { Card } from '@/components/ui/Card';\nimport { Badge } from '@/components/ui/Badge';\nimport { Button } from '@/components/ui/Button';\n\ninterface AIFeature {\n  id: string;\n  title: string;\n  description: string;\n  icon: React.ComponentType<{ className?: string }>;\n  status: 'available' | 'demo' | 'development';\n  usage: number;\n  potential: number;\n}\n\ninterface AIFeatureCardProps {\n  feature: AIFeature;\n  onLearnMore?: (feature: AIFeature) => void;\n  onDemo?: (feature: AIFeature) => void;\n}\n\nexport const AIFeatureCard: React.FC<AIFeatureCardProps> = ({\n  feature,\n  onLearnMore,\n  onDemo\n}) => {\n  const getStatusVariant = (status: string) => {\n    return status === 'available' ? 'default' : 'secondary';\n  };\n\n  const getStatusLabel = (status: string) => {\n    switch (status) {\n      case 'available': return 'Available';\n      case 'demo': return 'Demo';\n      case 'development': return 'In Development';\n      default: return 'Unknown';\n    }\n  };\n\n  return (\n    <Card className=\"h-full\">\n      <div className=\"p-6 space-y-4 h-full flex flex-col\">\n        {/* Header */}\n        <div className=\"flex items-center justify-between\">\n          <feature.icon className=\"h-8 w-8 text-primary\" />\n          <Badge variant={getStatusVariant(feature.status)}>\n            {getStatusLabel(feature.status)}\n          </Badge>\n        </div>\n\n        {/* Content */}\n        <div className=\"flex-1 space-y-4\">\n          <div>\n            <h3 className=\"font-semibold text-lg\">{feature.title}</h3>\n            <p className=\"text-sm text-muted-foreground\">{feature.description}</p>\n          </div>\n\n          {/* Usage Progress */}\n          <div className=\"space-y-2\">\n            <div className=\"flex justify-between text-sm\">\n              <span>Usage: {feature.usage}%</span>\n              <span className=\"text-muted-foreground\">\n                {feature.potential - feature.usage}% untapped\n              </span>\n            </div>\n            <div className=\"w-full bg-secondary rounded-full h-2\">\n              <div \n                className=\"bg-primary h-2 rounded-full transition-all duration-300\" \n                style={{ width: `${feature.usage}%` }}\n              />\n            </div>\n          </div>\n        </div>\n\n        {/* Actions */}\n        <div className=\"flex space-x-2 pt-4\">\n          {onLearnMore && (\n            <Button \n              variant=\"secondary\" \n              className=\"flex-1\"\n              onClick={() => onLearnMore(feature)}\n            >\n              Learn More\n            </Button>\n          )}\n          {onDemo && feature.status !== 'development' && (\n            <Button \n              className=\"flex-1\"\n              onClick={() => onDemo(feature)}\n            >\n              {feature.status === 'available' ? 'Use' : 'Demo'}\n            </Button>\n          )}\n        </div>\n      </div>\n    </Card>\n  );\n}; ","usedDeprecatedRules":[]},{"filePath":"/home/vonj/Github/Nexus/src/components/ai/AISuggestionCard.tsx","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":53,"column":19,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":53,"endColumn":22,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1736,1739],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1736,1739],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState, useEffect } from 'react';\nimport { Card, CardHeader, CardTitle, CardDescription, CardContent } from '@/components/ui/Card';\nimport { Lightbulb, AlertTriangle, Loader2 } from 'lucide-react';\nimport type { DepartmentId } from '@/constants/departments';\nimport { Button } from '@/components/ui/Button';\nimport { useAuth } from '@/contexts/AuthContext';\nimport { API_CONFIG } from '@/lib/constants';\n\ninterface AISuggestionCardProps {\n  departmentId: DepartmentId;\n}\n\ninterface Suggestion {\n  title: string;\n  description: string;\n  actionLabel: string;\n}\n\nexport const AISuggestionCard: React.FC<AISuggestionCardProps> = ({ departmentId }) => {\n  const [suggestions, setSuggestions] = useState<Suggestion[]>([]);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState<string | null>(null);\n  const { session } = useAuth();\n\n  useEffect(() => {\n    const fetchSuggestions = async () => {\n      if (!session) {\n        setLoading(false);\n        setError('Authentication is required to get AI suggestions.');\n        return;\n      }\n\n      setLoading(true);\n      setError(null);\n\n      try {\n        const res = await fetch(`${API_CONFIG.BASE_URL}/functions/v1/ai_generate_suggestions`, {\n          method: 'POST',\n          headers: {\n            'Content-Type': 'application/json',\n            'Authorization': `Bearer ${session.access_token}`,\n          },\n          body: JSON.stringify({ departmentId }),\n        });\n\n        if (!res.ok) {\n          const errData = await res.json();\n          throw new Error(errData.error || 'Failed to fetch suggestions');\n        }\n\n        const data = await res.json();\n        setSuggestions(data.suggestions || data); \n      } catch (e: any) {\n        setError(e.message);\n      } finally {\n        setLoading(false);\n      }\n    };\n\n    fetchSuggestions();\n  }, [departmentId, session]);\n\n  const renderContent = () => {\n    if (loading) {\n      return (\n        <div className=\"flex items-center justify-center py-8\">\n          <Loader2 className=\"w-6 h-6 animate-spin text-muted-foreground\" />\n          <p className=\"ml-2\">Generating AI insights...</p>\n        </div>\n      );\n    }\n\n    if (error) {\n      return (\n        <div className=\"flex items-center justify-center py-8 text-destructive\">\n          <AlertTriangle className=\"w-6 h-6 mr-2\" />\n          <p>Error: {error}</p>\n        </div>\n      );\n    }\n\n    if (suggestions.length === 0) {\n      return (\n        <div className=\"text-center text-muted-foreground py-8\">\n          <p>No suggestions available for this department yet.</p>\n        </div>\n      );\n    }\n    \n    return suggestions.map((suggestion, index) => (\n      <div key={index} className=\"p-4 bg-muted/50 rounded-lg flex items-center justify-between\">\n        <div>\n          <h4 className=\"font-semibold\">{suggestion.title}</h4>\n          <p className=\"text-sm text-muted-foreground\">{suggestion.description}</p>\n        </div>\n        <Button variant=\"secondary\" size=\"sm\" onClick={() => alert(`Action: ${suggestion.actionLabel}`)}>\n          {suggestion.actionLabel}\n        </Button>\n      </div>\n    ));\n  };\n  \n  return (\n    <Card>\n      <CardHeader>\n        <div className=\"flex items-center gap-3\">\n          <Lightbulb className=\"w-6 h-6 text-warning\" />\n          <CardTitle>AI Suggestions</CardTitle>\n        </div>\n        <CardDescription>\n          Automated insights and next-best actions based on your department's data.\n        </CardDescription>\n      </CardHeader>\n      <CardContent className=\"space-y-4\">\n        {renderContent()}\n      </CardContent>\n    </Card>\n  );\n};\n","usedDeprecatedRules":[]},{"filePath":"/home/vonj/Github/Nexus/src/components/ai/ActionCard.tsx","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":17,"column":29,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":17,"endColumn":32,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[630,633],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[630,633],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":25,"column":29,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":25,"endColumn":32,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[787,790],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[787,790],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":90,"column":21,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":90,"endColumn":24,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2751,2754],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2751,2754],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState, useCallback } from 'react';\nimport { supabase } from '@/lib/core/supabase';\nimport type { SupabaseClient } from '@supabase/supabase-js';\nimport { Button } from '@/components/ui/Button';\nimport Modal from '@/components/ui/Modal';\nimport { toast } from 'sonner';\nimport { sendAuditLog } from '@/lib/services/auditLogService';\n\n// -----------------------------------------------------------------------------\n// Types\n// -----------------------------------------------------------------------------\n\nexport interface Action {\n  id: string;\n  label: string;\n  eventType?: string;\n  metadata?: Record<string, any>;\n}\n\nexport interface ActionCardRecord {\n  id: string;\n  title: string;\n  description?: string | null;\n  actions?: Action[];\n  metadata?: Record<string, any>;\n}\n\nexport interface ActionCardProps {\n  card: ActionCardRecord;\n  /**\n   * Called after an action is successfully executed so parent components can\n   * refresh data or update UI.\n   */\n  onCompleted?: (action: Action) => void;\n  /**\n   * Optionally override the Supabase client if a shared instance exists.\n   */\n  supabaseClient?: SupabaseClient;\n  className?: string;\n}\n\n// -----------------------------------------------------------------------------\n// Component\n// -----------------------------------------------------------------------------\n\nexport const ActionCard: React.FC<ActionCardProps> = ({\n  card,\n  onCompleted,\n  supabaseClient,\n  className = '',\n}) => {\n  const [modalOpen, setModalOpen] = useState(false);\n  const [executingActionId, setExecutingActionId] = useState<string | null>(null);\n\n  const client = supabaseClient ?? supabase;\n\n  const handleExecute = useCallback(\n    async (action: Action) => {\n      try {\n        setExecutingActionId(action.id);\n\n        // Get current user\n        const {\n          data: { user },\n          error: userErr,\n        } = await client.auth.getUser();\n        if (userErr) throw userErr;\n        if (!user) throw new Error('User must be logged in to execute an action');\n\n        const { error } = await client.functions.invoke('ai_execute_action', {\n          body: {\n            actionCardId: card.id,\n            userId: user.id,\n            eventType: action.eventType ?? 'execute',\n            metadata: action.metadata ?? {},\n          },\n        });\n        if (error) throw error;\n\n        toast.success('Action executed');\n\n        // Fire first_action audit log once per browser session\n        if (!sessionStorage.getItem('first_action_logged')) {\n          sendAuditLog('first_action', { actionId: action.id, cardId: card.id });\n          sessionStorage.setItem('first_action_logged', '1');\n        }\n\n        setModalOpen(false);\n        onCompleted?.(action);\n      } catch (err: any) {\n        console.error('[ActionCard] Execution failed', err);\n        toast.error(err?.message ?? 'Failed to execute action');\n      } finally {\n        setExecutingActionId(null);\n      }\n    },\n    [card.id, client, onCompleted],\n  );\n\n  return (\n    <div\n      className={`bg-card text-card-foreground border border-border rounded-lg shadow-sm p-4 cursor-pointer hover:shadow-md transition-shadow ${className}`}\n      onClick={() => setModalOpen(true)}\n      role=\"button\"\n      tabIndex={0}\n      onKeyDown={(e) => {\n        if (e.key === 'Enter') setModalOpen(true);\n      }}\n      aria-label={`Open action card ${card.title}`}\n    >\n      <h3 className=\"text-lg font-semibold mb-2 line-clamp-1\">{card.title}</h3>\n      {card.description && (\n        <p className=\"text-sm text-muted-foreground line-clamp-2\">{card.description}</p>\n      )}\n\n      {/* Badge for number of actions */}\n      {card.actions?.length ? (\n        <span className=\"mt-2 inline-flex items-center text-xs font-medium bg-secondary text-secondary-foreground px-2 py-0.5 rounded-full\">\n          {card.actions.length} action{card.actions.length > 1 ? 's' : ''}\n        </span>\n      ) : null}\n\n      {/* Modal ---------------------------------------------*/}\n      <Modal open={modalOpen} onClose={() => setModalOpen(false)} title={card.title}>\n        {card.description && <p className=\"text-sm mb-4 whitespace-pre-wrap\">{card.description}</p>}\n\n        {card.actions && card.actions.length > 0 ? (\n          <div className=\"space-y-3\">\n            {card.actions.map((action) => (\n              <Button\n                key={action.id}\n                variant=\"default\"\n                className=\"w-full justify-start\"\n                isLoading={executingActionId === action.id}\n                onClick={() => handleExecute(action)}\n              >\n                {action.label}\n              </Button>\n            ))}\n          </div>\n        ) : (\n          <p className=\"text-muted-foreground\">No executable actions.</p>\n        )}\n      </Modal>\n    </div>\n  );\n};\n\nexport default ActionCard; ","usedDeprecatedRules":[]},{"filePath":"/home/vonj/Github/Nexus/src/components/ai/AdvancedAICapabilitiesDemo.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'Bot' is defined but never used.","line":17,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":17,"endColumn":6},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'RefreshCw' is defined but never used.","line":26,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":26,"endColumn":12},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'businessProcessMining' is defined but never used.","line":35,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":35,"endColumn":31},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":54,"column":10,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":54,"endColumn":13,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1602,1605],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1602,1605],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\n * AdvancedAICapabilitiesDemo.tsx\n * Demonstrates advanced AI capabilities that are often underutilized\n * Shows how these can transform Nexus into a true Business Operating System\n */\n\nimport React, { useState, useCallback, useRef } from 'react';\nimport { \n  Brain, \n  Zap, \n  Eye, \n  Mic, \n  FileText, \n  BarChart3, \n  Settings, \n  Workflow,\n  Bot,\n  Lightbulb,\n  TrendingUp,\n  Shield,\n  Code,\n  Image as ImageIcon,\n  MessageSquare,\n  Play,\n  Pause,\n  RefreshCw\n} from 'lucide-react';\nimport { Button } from '../ui/Button';\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from '../ui/Card';\nimport { Badge } from '../ui/Badge';\nimport { Progress } from '../ui/Progress';\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from '../ui/Tabs';\nimport { Spinner } from '../ui/Spinner';\nimport { intelligentSystemEvolution } from '../../lib/intelligentSystemEvolution';\nimport { businessProcessMining } from '../../lib/businessProcessMining';\nimport { multiModalIntelligence } from '../../lib/multiModalIntelligence';\n\ninterface AICapability {\n  id: string;\n  title: string;\n  description: string;\n  icon: React.ComponentType<{ className?: string }>;\n  category: 'self-evolution' | 'process-mining' | 'multi-modal' | 'predictive' | 'automation';\n  usageLevel: 'underutilized' | 'partially-used' | 'well-utilized';\n  businessImpact: 'low' | 'medium' | 'high' | 'transformative';\n  implementationComplexity: 'low' | 'medium' | 'high';\n  examples: string[];\n  potentialROI: string;\n}\n\ninterface DemoResult {\n  capability: string;\n  status: 'running' | 'success' | 'error';\n  data?: any;\n  insights?: string[];\n  improvements?: string[];\n  timeElapsed?: number;\n}\n\nconst ADVANCED_CAPABILITIES: AICapability[] = [\n  {\n    id: 'self-evolution',\n    title: 'Self-Evolving System Architecture',\n    description: 'AI that analyzes usage patterns and automatically improves the system by generating new components, optimizing workflows, and adapting to business needs.',\n    icon: Brain,\n    category: 'self-evolution',\n    usageLevel: 'underutilized',\n    businessImpact: 'transformative',\n    implementationComplexity: 'high',\n    examples: [\n      'Auto-generates optimized components based on user behavior',\n      'Self-healing code that fixes bugs automatically',\n      'Adaptive UI that evolves with business needs',\n      'Real-time feature synthesis from natural language'\n    ],\n    potentialROI: '300-500% through continuous optimization'\n  },\n  {\n    id: 'process-mining',\n    title: 'Intelligent Business Process Mining',\n    description: 'AI discovers inefficient processes by analyzing user behavior, then automatically optimizes workflows and suggests improvements.',\n    icon: Workflow,\n    category: 'process-mining',\n    usageLevel: 'underutilized',\n    businessImpact: 'transformative',\n    implementationComplexity: 'medium',\n    examples: [\n      'Discovers hidden process bottlenecks',\n      'Auto-optimizes n8n workflows for efficiency',\n      'Predicts process failures before they happen',\n      'Generates smart automation suggestions'\n    ],\n    potentialROI: '200-400% through process optimization'\n  },\n  {\n    id: 'multi-modal',\n    title: 'Multi-Modal Intelligence Hub',\n    description: 'Processes documents, images, voice, and data simultaneously to provide comprehensive business intelligence and automation.',\n    icon: Eye,\n    category: 'multi-modal',\n    usageLevel: 'underutilized',\n    businessImpact: 'high',\n    implementationComplexity: 'medium',\n    examples: [\n      'Intelligent document processing and extraction',\n      'Voice-to-workflow conversion',\n      'Chart/graph data extraction and analysis',\n      'Cross-modal business insights'\n    ],\n    potentialROI: '150-250% through data intelligence'\n  },\n  {\n    id: 'predictive-analytics',\n    title: 'Autonomous Predictive Analytics',\n    description: 'Self-updating models that predict business outcomes, detect anomalies, and optimize resource allocation automatically.',\n    icon: TrendingUp,\n    category: 'predictive',\n    usageLevel: 'underutilized',\n    businessImpact: 'high',\n    implementationComplexity: 'high',\n    examples: [\n      'Predicts cash flow and revenue trends',\n      'Detects business anomalies in real-time',\n      'Optimizes resource allocation automatically',\n      'Forecasts customer behavior and churn'\n    ],\n    potentialROI: '200-350% through predictive optimization'\n  },\n  {\n    id: 'smart-integration',\n    title: 'Intelligent API Orchestration',\n    description: 'Automatically discovers, connects, and manages integrations with business tools, including self-healing capabilities.',\n    icon: Zap,\n    category: 'automation',\n    usageLevel: 'underutilized',\n    businessImpact: 'high',\n    implementationComplexity: 'medium',\n    examples: [\n      'Auto-discovers compatible business tools',\n      'Self-healing broken integrations',\n      'Dynamic schema adaptation',\n      'Intelligent webhook management'\n    ],\n    potentialROI: '100-200% through integration efficiency'\n  },\n  {\n    id: 'code-generation',\n    title: 'Advanced Code Generation Engine',\n    description: 'Generates complete features, components, and business logic from natural language descriptions with full testing.',\n    icon: Code,\n    category: 'automation',\n    usageLevel: 'underutilized',\n    businessImpact: 'transformative',\n    implementationComplexity: 'high',\n    examples: [\n      'Generates full React components from descriptions',\n      'Creates complete API endpoints and logic',\n      'Builds entire business workflows',\n      'Auto-generates tests and documentation'\n    ],\n    potentialROI: '400-600% through development acceleration'\n  }\n];\n\nexport const AdvancedAICapabilitiesDemo: React.FC = () => {\n  const [activeDemo, setActiveDemo] = useState<string | null>(null);\n  const [demoResults, setDemoResults] = useState<Map<string, DemoResult>>(new Map());\n  const [evolutionStatus, setEvolutionStatus] = useState<'stopped' | 'running'>('stopped');\n  const fileInputRef = useRef<HTMLInputElement>(null);\n  const [uploadedFile, setUploadedFile] = useState<File | null>(null);\n\n  const updateDemoResult = useCallback((capability: string, result: Partial<DemoResult>) => {\n    setDemoResults(prev => {\n      const newResults = new Map(prev);\n      const existing = newResults.get(capability) || { capability, status: 'running' };\n      newResults.set(capability, { ...existing, ...result });\n      return newResults;\n    });\n  }, []);\n\n  const runSelfEvolutionDemo = async () => {\n    setActiveDemo('self-evolution');\n    updateDemoResult('self-evolution', { status: 'running', timeElapsed: 0 });\n\n    try {\n      // Simulate system evolution analysis\n      const startTime = Date.now();\n      \n      // Start the evolution system\n      intelligentSystemEvolution.startEvolution();\n      setEvolutionStatus('running');\n\n      // Simulate collecting usage patterns\n      updateDemoResult('self-evolution', { \n        insights: ['Analyzing 1,247 user interactions...', 'Identifying usage patterns...'] \n      });\n\n      await new Promise(resolve => setTimeout(resolve, 2000));\n\n      // Simulate pattern analysis\n      updateDemoResult('self-evolution', { \n        insights: [\n          'Found 23 frequent component combinations',\n          'Identified 8 potential optimizations',\n          'Discovered 3 automation opportunities'\n        ] \n      });\n\n      await new Promise(resolve => setTimeout(resolve, 2000));\n\n      // Simulate improvement generation\n      const improvements = [\n        'Generated optimized SalesWorkflow component (saves 45s per use)',\n        'Created automated invoice processing workflow',\n        'Optimized database queries for 30% performance improvement',\n        'Suggested new dashboard layout based on user preferences'\n      ];\n\n      updateDemoResult('self-evolution', { \n        status: 'success',\n        insights: ['Evolution analysis complete!'],\n        improvements,\n        timeElapsed: Date.now() - startTime\n      });\n\n    } catch (error) {\n      updateDemoResult('self-evolution', { \n        status: 'error', \n        insights: [`Error: ${error}`] \n      });\n    }\n  };\n\n  const runProcessMiningDemo = async () => {\n    setActiveDemo('process-mining');\n    updateDemoResult('process-mining', { status: 'running' });\n\n    try {\n      const startTime = Date.now();\n\n      // Simulate process discovery\n      updateDemoResult('process-mining', { \n        insights: ['Discovering business processes from user behavior...'] \n      });\n\n      await new Promise(resolve => setTimeout(resolve, 1500));\n\n      // Simulate process analysis\n      const discoveredProcesses = [\n        'Invoice Creation Process (avg 4.2 mins, 78% success rate)',\n        'Customer Onboarding (avg 12.5 mins, 92% success rate)', \n        'Sales Quote Generation (avg 6.8 mins, 85% success rate)'\n      ];\n\n      updateDemoResult('process-mining', { \n        insights: [`Discovered ${discoveredProcesses.length} main business processes`, ...discoveredProcesses] \n      });\n\n      await new Promise(resolve => setTimeout(resolve, 2000));\n\n      // Simulate bottleneck identification\n      const bottlenecks = [\n        'Invoice approval step taking 2.5x average time',\n        'Manual data entry causing 15% of failures',\n        'Redundant verification steps in onboarding'\n      ];\n\n      const optimizations = [\n        'Automate invoice approval for amounts < $1000',\n        'Pre-fill forms using customer data APIs',\n        'Eliminate redundant verification steps',\n        'Create combined workflow for frequent processes'\n      ];\n\n      updateDemoResult('process-mining', { \n        status: 'success',\n        insights: ['Process mining complete!', `Found ${bottlenecks.length} bottlenecks`],\n        improvements: optimizations,\n        timeElapsed: Date.now() - startTime\n      });\n\n    } catch (error) {\n      updateDemoResult('process-mining', { \n        status: 'error', \n        insights: [`Error: ${error}`] \n      });\n    }\n  };\n\n  const runMultiModalDemo = async (file?: File) => {\n    setActiveDemo('multi-modal');\n    updateDemoResult('multi-modal', { status: 'running' });\n\n    try {\n      const startTime = Date.now();\n\n      if (file) {\n        // Simulate file processing\n        updateDemoResult('multi-modal', { \n          insights: [`Processing ${file.name}...`, 'Running OCR and AI analysis...'] \n        });\n\n        await new Promise(resolve => setTimeout(resolve, 2000));\n\n        // Simulate multi-modal analysis\n        const analysis = await multiModalIntelligence.processDocument(file);\n        \n        updateDemoResult('multi-modal', { \n          status: 'success',\n          data: analysis,\n          insights: [\n            `Document type: ${analysis.type}`,\n            `Confidence: ${(analysis.confidence * 100).toFixed(1)}%`,\n            `Extracted ${analysis.keyEntities.length} key entities`,\n            `Generated ${analysis.businessInsights.length} business insights`\n          ],\n          improvements: analysis.actionableItems.map(item => item.description),\n          timeElapsed: Date.now() - startTime\n        });\n      } else {\n        // Demo with sample data\n        updateDemoResult('multi-modal', { \n          insights: ['Analyzing sample business document...'] \n        });\n\n        await new Promise(resolve => setTimeout(resolve, 1500));\n\n        const insights = [\n          'Document Type: Invoice (95.8% confidence)',\n          'Extracted: Amount ($2,347.50), Date (2024-01-15), Vendor (TechSupply Co)',\n          'Business Insight: Amount 15% higher than average for this vendor',\n          'Action Required: Approval needed for payment processing'\n        ];\n\n        const improvements = [\n          'Auto-route to finance team for approval',\n          'Flag for vendor price negotiation',\n          'Add to cash flow forecast',\n          'Create payment reminder workflow'\n        ];\n\n        updateDemoResult('multi-modal', { \n          status: 'success',\n          insights,\n          improvements,\n          timeElapsed: Date.now() - startTime\n        });\n      }\n\n    } catch (error) {\n      updateDemoResult('multi-modal', { \n        status: 'error', \n        insights: [`Error: ${error}`] \n      });\n    }\n  };\n\n  const runVoiceDemo = async () => {\n    setActiveDemo('voice-processing');\n    updateDemoResult('voice-processing', { status: 'running' });\n\n    try {\n      const startTime = Date.now();\n      \n      updateDemoResult('voice-processing', { \n        insights: ['Processing voice command: \"Create a sales report for Q4 and send to finance team\"'] \n      });\n\n      await new Promise(resolve => setTimeout(resolve, 2000));\n\n      const insights = [\n        'Intent: Create Report (98.5% confidence)',\n        'Entities: Report Type (sales), Period (Q4), Recipient (finance team)',\n        'Sentiment: Neutral, Urgency: Medium',\n        'Generated workflow: sales-report-automation'\n      ];\n\n      const improvements = [\n        'Auto-generated Q4 sales report',\n        'Scheduled delivery to finance team',\n        'Added reminder for monthly reports',\n        'Created voice command shortcut'\n      ];\n\n      updateDemoResult('voice-processing', { \n        status: 'success',\n        insights,\n        improvements,\n        timeElapsed: Date.now() - startTime\n      });\n\n    } catch (error) {\n      updateDemoResult('voice-processing', { \n        status: 'error', \n        insights: [`Error: ${error}`] \n      });\n    }\n  };\n\n  const handleFileUpload = (event: React.ChangeEvent<HTMLInputElement>) => {\n    const file = event.target.files?.[0];\n    if (file) {\n      setUploadedFile(file);\n      runMultiModalDemo(file);\n    }\n  };\n\n  const toggleEvolution = () => {\n    if (evolutionStatus === 'running') {\n      intelligentSystemEvolution.stopEvolution();\n      setEvolutionStatus('stopped');\n    } else {\n      runSelfEvolutionDemo();\n    }\n  };\n\n  const getCapabilityCardClass = (capability: AICapability) => {\n    const baseClass = \"transition-all duration-300 hover:shadow-lg cursor-pointer border-2\";\n    \n    if (capability.usageLevel === 'underutilized') {\n      return `${baseClass} border-orange-200 hover:border-orange-400 bg-gradient-to-br from-orange-50 to-amber-50`;\n    }\n    \n    return `${baseClass} border-border hover:border-gray-400`;\n  };\n\n  const getImpactColor = (impact: string) => {\n    switch (impact) {\n      case 'transformative': return 'bg-secondary';\n      case 'high': return 'bg-destructive';\n      case 'medium': return 'bg-warning';\n      case 'low': return 'bg-success';\n      default: return 'bg-muted';\n    }\n  };\n\n  return (\n    <div className=\"max-w-7xl mx-auto p-6 space-y-8\">\n      <div className=\"text-center space-y-4\">\n        <h1 className=\"text-4xl font-bold text-primary\">\n          🧠 Advanced AI Capabilities for Nexus\n        </h1>\n        <p className=\"text-xl text-muted-foreground max-w-3xl mx-auto\">\n          Discover underutilized AI capabilities that could transform Nexus into a true \n          <span className=\"font-semibold text-primary\"> Business Operating System</span>\n        </p>\n        <div className=\"flex justify-center space-x-2\">\n          <Badge variant=\"outline\" className=\"text-warning border-orange-300\">\n            6 Transformative Capabilities\n          </Badge>\n          <Badge variant=\"outline\" className=\"text-secondary border-purple-300\">\n            300-600% ROI Potential\n          </Badge>\n        </div>\n      </div>\n\n      <Tabs defaultValue=\"overview\" className=\"space-y-6\">\n        <TabsList className=\"grid w-full grid-cols-4\">\n          <TabsTrigger value=\"overview\">Overview</TabsTrigger>\n          <TabsTrigger value=\"demos\">Live Demos</TabsTrigger>\n          <TabsTrigger value=\"implementation\">Implementation</TabsTrigger>\n          <TabsTrigger value=\"roadmap\">Roadmap</TabsTrigger>\n        </TabsList>\n\n        <TabsContent value=\"overview\" className=\"space-y-6\">\n          <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6\">\n            {ADVANCED_CAPABILITIES.map((capability) => (\n              <Card key={capability.id} className={getCapabilityCardClass(capability)}>\n                <CardHeader>\n                  <div className=\"flex items-center justify-between\">\n                    <capability.icon className=\"h-8 w-8 text-primary\" />\n                    <div className=\"flex space-x-1\">\n                      <Badge \n                        className={`${getImpactColor(capability.businessImpact)} text-primary-foreground`}\n                      >\n                        {capability.businessImpact}\n                      </Badge>\n                      {capability.usageLevel === 'underutilized' && (\n                        <Badge variant=\"outline\" className=\"text-warning border-orange-400\">\n                          Underutilized\n                        </Badge>\n                      )}\n                    </div>\n                  </div>\n                  <CardTitle className=\"text-lg\">{capability.title}</CardTitle>\n                  <CardDescription className=\"text-sm\">\n                    {capability.description}\n                  </CardDescription>\n                </CardHeader>\n                <CardContent>\n                  <div className=\"space-y-4\">\n                    <div>\n                      <h4 className=\"font-medium text-sm mb-2\">Key Examples:</h4>\n                      <ul className=\"text-xs space-y-1\">\n                        {capability.examples.slice(0, 3).map((example, idx) => (\n                          <li key={idx} className=\"flex items-start\">\n                            <span className=\"text-primary mr-2\">•</span>\n                            <span>{example}</span>\n                          </li>\n                        ))}\n                      </ul>\n                    </div>\n                    <div className=\"pt-2 border-t\">\n                      <div className=\"flex justify-between text-xs\">\n                        <span className=\"font-medium\">ROI Potential:</span>\n                        <span className=\"text-success font-semibold\">\n                          {capability.potentialROI}\n                        </span>\n                      </div>\n                    </div>\n                  </div>\n                </CardContent>\n              </Card>\n            ))}\n          </div>\n        </TabsContent>\n\n        <TabsContent value=\"demos\" className=\"space-y-6\">\n          <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-6\">\n            {/* Self-Evolution Demo */}\n            <Card className=\"lg:col-span-2\">\n              <CardHeader>\n                <div className=\"flex items-center justify-between\">\n                  <div className=\"flex items-center space-x-4\">\n                    <Brain className=\"h-6 w-6 text-secondary\" />\n                    <CardTitle>Self-Evolving System Demo</CardTitle>\n                  </div>\n                  <Button \n                    onClick={toggleEvolution}\n                    variant={evolutionStatus === 'running' ? 'destructive' : 'default'}\n                    className=\"flex items-center space-x-2\"\n                  >\n                    {evolutionStatus === 'running' ? (\n                      <>\n                        <Pause className=\"h-4 w-4\" />\n                        <span>Stop Evolution</span>\n                      </>\n                    ) : (\n                      <>\n                        <Play className=\"h-4 w-4\" />\n                        <span>Start Evolution</span>\n                      </>\n                    )}\n                  </Button>\n                </div>\n              </CardHeader>\n              <CardContent>\n                {demoResults.get('self-evolution') && (\n                  <DemoResultDisplay result={demoResults.get('self-evolution')!} />\n                )}\n              </CardContent>\n            </Card>\n\n            {/* Process Mining Demo */}\n            <Card>\n              <CardHeader>\n                <div className=\"flex items-center justify-between\">\n                  <div className=\"flex items-center space-x-4\">\n                    <Workflow className=\"h-6 w-6 text-primary\" />\n                    <CardTitle>Process Mining Demo</CardTitle>\n                  </div>\n                  <Button \n                    onClick={runProcessMiningDemo}\n                    disabled={activeDemo === 'process-mining'}\n                  >\n                    <BarChart3 className=\"h-4 w-4 mr-2\" />\n                    Analyze Processes\n                  </Button>\n                </div>\n              </CardHeader>\n              <CardContent>\n                {demoResults.get('process-mining') && (\n                  <DemoResultDisplay result={demoResults.get('process-mining')!} />\n                )}\n              </CardContent>\n            </Card>\n\n            {/* Multi-Modal Intelligence Demo */}\n            <Card>\n              <CardHeader>\n                <div className=\"flex items-center justify-between\">\n                  <div className=\"flex items-center space-x-4\">\n                    <Eye className=\"h-6 w-6 text-success\" />\n                    <CardTitle>Multi-Modal Intelligence</CardTitle>\n                  </div>\n                  <div className=\"flex space-x-2\">\n                    <Button \n                      onClick={() => runMultiModalDemo()}\n                      disabled={activeDemo === 'multi-modal'}\n                      variant=\"outline\"\n                      size=\"sm\"\n                    >\n                      <FileText className=\"h-4 w-4 mr-2\" />\n                      Demo\n                    </Button>\n                    <Button \n                      onClick={() => fileInputRef.current?.click()}\n                      disabled={activeDemo === 'multi-modal'}\n                      size=\"sm\"\n                    >\n                      <ImageIcon className=\"h-4 w-4 mr-2\" />\n                      Upload\n                    </Button>\n                  </div>\n                </div>\n                <input\n                  ref={fileInputRef}\n                  type=\"file\"\n                  onChange={handleFileUpload}\n                  accept=\".pdf,.jpg,.jpeg,.png,.doc,.docx\"\n                  className=\"hidden\"\n                />\n              </CardHeader>\n              <CardContent>\n                {uploadedFile && (\n                  <div className=\"mb-4 p-4 bg-background rounded text-sm\">\n                    Processing: {uploadedFile.name}\n                  </div>\n                )}\n                {demoResults.get('multi-modal') && (\n                  <DemoResultDisplay result={demoResults.get('multi-modal')!} />\n                )}\n              </CardContent>\n            </Card>\n\n            {/* Voice Processing Demo */}\n            <Card className=\"lg:col-span-2\">\n              <CardHeader>\n                <div className=\"flex items-center justify-between\">\n                  <div className=\"flex items-center space-x-4\">\n                    <Mic className=\"h-6 w-6 text-destructive\" />\n                    <CardTitle>Voice-to-Workflow Demo</CardTitle>\n                  </div>\n                  <Button \n                    onClick={runVoiceDemo}\n                    disabled={activeDemo === 'voice-processing'}\n                  >\n                    <MessageSquare className=\"h-4 w-4 mr-2\" />\n                    Process Voice Command\n                  </Button>\n                </div>\n              </CardHeader>\n              <CardContent>\n                {demoResults.get('voice-processing') && (\n                  <DemoResultDisplay result={demoResults.get('voice-processing')!} />\n                )}\n              </CardContent>\n            </Card>\n          </div>\n        </TabsContent>\n\n        <TabsContent value=\"implementation\">\n          <ImplementationGuide />\n        </TabsContent>\n\n        <TabsContent value=\"roadmap\">\n          <DevelopmentRoadmap />\n        </TabsContent>\n      </Tabs>\n    </div>\n  );\n};\n\nconst DemoResultDisplay: React.FC<{ result: DemoResult }> = ({ result }) => {\n  const getStatusColor = (status: string) => {\n    switch (status) {\n      case 'running': return 'text-primary';\n      case 'success': return 'text-success';\n      case 'error': return 'text-destructive';\n      default: return 'text-muted-foreground';\n    }\n  };\n\n  const getStatusIcon = (status: string) => {\n    switch (status) {\n      case 'running': return <Spinner />;\n      case 'success': return <span className=\"text-success\">✓</span>;\n      case 'error': return <span className=\"text-destructive\">✗</span>;\n      default: return null;\n    }\n  };\n\n  return (\n    <div className=\"space-y-4\">\n      <div className=\"flex items-center space-x-2\">\n        {getStatusIcon(result.status)}\n        <span className={`font-medium ${getStatusColor(result.status)}`}>\n          {result.status === 'running' ? 'Processing...' : \n           result.status === 'success' ? 'Complete' : 'Error'}\n        </span>\n        {result.timeElapsed && (\n          <span className=\"text-sm text-muted-foreground\">\n            ({(result.timeElapsed / 1000).toFixed(1)}s)\n          </span>\n        )}\n      </div>\n\n      {result.insights && result.insights.length > 0 && (\n        <div>\n          <h4 className=\"font-medium text-sm mb-2 flex items-center\">\n            <Lightbulb className=\"h-4 w-4 mr-1\" />\n            Insights:\n          </h4>\n          <div className=\"space-y-1\">\n            {result.insights.map((insight, idx) => (\n              <div key={idx} className=\"text-sm bg-primary/5 p-4 rounded\">\n                {insight}\n              </div>\n            ))}\n          </div>\n        </div>\n      )}\n\n      {result.improvements && result.improvements.length > 0 && (\n        <div>\n          <h4 className=\"font-medium text-sm mb-2 flex items-center\">\n            <TrendingUp className=\"h-4 w-4 mr-1\" />\n            Improvements:\n          </h4>\n          <div className=\"space-y-1\">\n            {result.improvements.map((improvement, idx) => (\n              <div key={idx} className=\"text-sm bg-success/5 p-4 rounded\">\n                {improvement}\n              </div>\n            ))}\n          </div>\n        </div>\n      )}\n    </div>\n  );\n};\n\nconst ImplementationGuide: React.FC = () => (\n  <div className=\"space-y-6\">\n    <h2 className=\"text-2xl font-bold\">Implementation Guide</h2>\n    \n    <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\n      <Card>\n        <CardHeader>\n          <CardTitle className=\"flex items-center\">\n            <Settings className=\"h-5 w-5 mr-2\" />\n            Phase 1: Foundation (Month 1-2)\n          </CardTitle>\n        </CardHeader>\n        <CardContent>\n          <ul className=\"space-y-2 text-sm\">\n            <li>• Set up usage analytics tracking</li>\n            <li>• Implement basic process mining</li>\n            <li>• Create multi-modal data pipeline</li>\n            <li>• Establish AI model infrastructure</li>\n          </ul>\n        </CardContent>\n      </Card>\n\n      <Card>\n        <CardHeader>\n          <CardTitle className=\"flex items-center\">\n            <Brain className=\"h-5 w-5 mr-2\" />\n            Phase 2: Intelligence (Month 3-4)\n          </CardTitle>\n        </CardHeader>\n        <CardContent>\n          <ul className=\"space-y-2 text-sm\">\n            <li>• Deploy self-evolution system</li>\n            <li>• Launch intelligent process optimization</li>\n            <li>• Implement predictive analytics</li>\n            <li>• Add voice processing capabilities</li>\n          </ul>\n        </CardContent>\n      </Card>\n\n      <Card>\n        <CardHeader>\n          <CardTitle className=\"flex items-center\">\n            <Zap className=\"h-5 w-5 mr-2\" />\n            Phase 3: Automation (Month 5-6)\n          </CardTitle>\n        </CardHeader>\n        <CardContent>\n          <ul className=\"space-y-2 text-sm\">\n            <li>• Full smart integration deployment</li>\n            <li>• Advanced code generation engine</li>\n            <li>• Autonomous decision making</li>\n            <li>• Complete business orchestration</li>\n          </ul>\n        </CardContent>\n      </Card>\n\n      <Card>\n        <CardHeader>\n          <CardTitle className=\"flex items-center\">\n            <Shield className=\"h-5 w-5 mr-2\" />\n            Phase 4: Optimization (Month 7+)\n          </CardTitle>\n        </CardHeader>\n        <CardContent>\n          <ul className=\"space-y-2 text-sm\">\n            <li>• Continuous learning and adaptation</li>\n            <li>• Advanced security and compliance</li>\n            <li>• Industry-specific optimizations</li>\n            <li>• Global scalability features</li>\n          </ul>\n        </CardContent>\n      </Card>\n    </div>\n  </div>\n);\n\nconst DevelopmentRoadmap: React.FC = () => (\n  <div className=\"space-y-6\">\n    <h2 className=\"text-2xl font-bold\">Development Roadmap</h2>\n    \n    <div className=\"space-y-4\">\n      {[\n        { quarter: 'Q1 2024', progress: 75, focus: 'Foundation & Process Mining', items: ['Analytics infrastructure', 'Basic process discovery', 'Multi-modal pipeline'] },\n        { quarter: 'Q2 2024', progress: 45, focus: 'Intelligence & Automation', items: ['Self-evolution system', 'Advanced process optimization', 'Predictive models'] },\n        { quarter: 'Q3 2024', progress: 20, focus: 'Advanced AI Integration', items: ['Voice processing', 'Code generation', 'Smart integrations'] },\n        { quarter: 'Q4 2024', progress: 5, focus: 'Business OS Completion', items: ['Full automation', 'Industry specialization', 'Global deployment'] }\n      ].map((phase, idx) => (\n        <Card key={idx}>\n          <CardHeader>\n            <div className=\"flex justify-between items-center\">\n              <CardTitle>{phase.quarter} - {phase.focus}</CardTitle>\n              <Badge variant=\"outline\">{phase.progress}% Complete</Badge>\n            </div>\n          </CardHeader>\n          <CardContent>\n            <Progress value={phase.progress} className=\"mb-4\" />\n            <div className=\"grid grid-cols-1 md:grid-cols-3 gap-2\">\n              {phase.items.map((item, itemIdx) => (\n                <div key={itemIdx} className=\"text-sm bg-background p-4 rounded\">\n                  {item}\n                </div>\n              ))}\n            </div>\n          </CardContent>\n        </Card>\n      ))}\n    </div>\n  </div>\n); ","usedDeprecatedRules":[]},{"filePath":"/home/vonj/Github/Nexus/src/components/ai/AssistantUpgradeStatus.tsx","messages":[{"ruleId":"no-restricted-syntax","severity":1,"message":"Use design tokens instead of hardcoded colors (e.g., bg-primary, bg-secondary)","line":14,"column":21,"nodeType":"Literal","messageId":"restrictedSyntax","endLine":14,"endColumn":119},{"ruleId":"no-restricted-syntax","severity":1,"message":"Use design tokens instead of hardcoded text colors (e.g., text-foreground, text-muted-foreground)","line":97,"column":46,"nodeType":"Literal","messageId":"restrictedSyntax","endLine":97,"endColumn":113},{"ruleId":"no-restricted-syntax","severity":1,"message":"Use design tokens instead of hardcoded text colors (e.g., text-foreground, text-muted-foreground)","line":112,"column":33,"nodeType":"Literal","messageId":"restrictedSyntax","endLine":112,"endColumn":89},{"ruleId":"no-restricted-syntax","severity":1,"message":"Use design tokens instead of hardcoded text colors (e.g., text-foreground, text-muted-foreground)","line":122,"column":33,"nodeType":"Literal","messageId":"restrictedSyntax","endLine":122,"endColumn":89},{"ruleId":"no-restricted-syntax","severity":1,"message":"Use design tokens instead of hardcoded text colors (e.g., text-foreground, text-muted-foreground)","line":132,"column":33,"nodeType":"Literal","messageId":"restrictedSyntax","endLine":132,"endColumn":89}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React from 'react';\nimport { CheckCircle, Sparkles, MessageSquare, Zap } from 'lucide-react';\nimport { Card, CardHeader, CardTitle, CardContent } from '@/components/ui/Card';\nimport { Button } from '@/components/ui/Button';\nimport { Badge } from '@/components/ui/Badge';\n\n/**\n * AssistantUpgradeStatus Component\n * \n * Shows users that the assistant has been successfully upgraded to the modern version\n */\nexport const AssistantUpgradeStatus: React.FC = () => {\n  return (\n    <Card className=\"w-full max-w-2xl mx-auto border-success/20 bg-success/5 dark:bg-green-950 dark:border-success/80\">\n      <CardHeader>\n        <div className=\"flex items-center gap-4\">\n          <div className=\"w-12 h-12 rounded-lg bg-success/10 dark:bg-success/20 flex items-center justify-center\">\n            <CheckCircle className=\"w-6 h-6 text-success dark:text-success\" />\n          </div>\n          <div>\n            <CardTitle className=\"text-success dark:text-success\">\n              Assistant Successfully Upgraded! 🎉\n            </CardTitle>\n            <p className=\"text-sm text-success dark:text-success mt-1\">\n              Your AI assistant is now powered by our enhanced modern system\n            </p>\n          </div>\n        </div>\n      </CardHeader>\n      <CardContent className=\"space-y-6\">\n        {/* What's New */}\n        <div>\n          <h3 className=\"text-lg font-semibold text-success dark:text-success mb-3\">\n            ✨ What's New\n          </h3>\n          <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n            <div className=\"flex items-start gap-4 p-4 rounded-lg bg-card dark:bg-success/20/50\">\n              <Sparkles className=\"w-5 h-5 text-success mt-0.5 flex-shrink-0\" />\n              <div>\n                <h4 className=\"font-medium text-success dark:text-success\">Enhanced Responses</h4>\n                <p className=\"text-sm text-success dark:text-success\">\n                  Streaming responses with typewriter effect and better context understanding\n                </p>\n              </div>\n            </div>\n            \n            <div className=\"flex items-start gap-4 p-4 rounded-lg bg-card dark:bg-success/20/50\">\n              <MessageSquare className=\"w-5 h-5 text-success mt-0.5 flex-shrink-0\" />\n              <div>\n                <h4 className=\"font-medium text-success dark:text-success\">Modern UI</h4>\n                <p className=\"text-sm text-success dark:text-success\">\n                  ChatGPT-inspired interface with message status indicators and reactions\n                </p>\n              </div>\n            </div>\n            \n            <div className=\"flex items-start gap-4 p-4 rounded-lg bg-card dark:bg-success/20/50\">\n              <Zap className=\"w-5 h-5 text-success mt-0.5 flex-shrink-0\" />\n              <div>\n                <h4 className=\"font-medium text-success dark:text-success\">Quick Chat</h4>\n                <p className=\"text-sm text-success dark:text-success\">\n                  Floating quick chat for instant help without leaving your workflow\n                </p>\n              </div>\n            </div>\n            \n            <div className=\"flex items-start gap-4 p-4 rounded-lg bg-card dark:bg-success/20/50\">\n              <CheckCircle className=\"w-5 h-5 text-success mt-0.5 flex-shrink-0\" />\n              <div>\n                <h4 className=\"font-medium text-success dark:text-success\">Reliability</h4>\n                <p className=\"text-sm text-success dark:text-success\">\n                  Better error handling, retry logic, and conversation persistence\n                </p>\n              </div>\n            </div>\n          </div>\n        </div>\n\n        {/* Features List */}\n        <div>\n          <h3 className=\"text-lg font-semibold text-success dark:text-success mb-3\">\n            🚀 Enhanced Features\n          </h3>\n          <div className=\"flex flex-wrap gap-2\">\n            {[\n              'Streaming Responses',\n              'Message Status Indicators',\n              'File Upload Support',\n              'Voice Input',\n              'Quick Actions',\n              'Conversation History',\n              'Dark Mode Support',\n              'Mobile Responsive',\n              'Accessibility Compliant',\n              'Error Recovery'\n            ].map((feature) => (\n              <Badge key={feature} className=\"bg-success/10 text-success dark:bg-success/80 dark:text-green-100\">\n                {feature}\n              </Badge>\n            ))}\n          </div>\n        </div>\n\n        {/* Where to Find */}\n        <div className=\"bg-card dark:bg-success/20/50 rounded-lg p-4\">\n          <h3 className=\"text-lg font-semibold text-success dark:text-success mb-3\">\n            📍 How to Access Your Enhanced Assistant\n          </h3>\n          <div className=\"space-y-4\">\n            <div className=\"flex items-center gap-4\">\n              <div className=\"w-8 h-8 rounded-full bg-success/10 dark:bg-success/80 flex items-center justify-center flex-shrink-0\">\n                <span className=\"text-xs font-semibold text-success dark:text-green-100\">1</span>\n              </div>\n              <div>\n                <p className=\"font-medium text-success dark:text-success\">Quick Chat (Floating Button)</p>\n                <p className=\"text-sm text-success dark:text-success\">Look for the floating chat button in the bottom-right corner</p>\n              </div>\n            </div>\n            \n            <div className=\"flex items-center gap-4\">\n              <div className=\"w-8 h-8 rounded-full bg-success/10 dark:bg-success/80 flex items-center justify-center flex-shrink-0\">\n                <span className=\"text-xs font-semibold text-success dark:text-green-100\">2</span>\n              </div>\n              <div>\n                <p className=\"font-medium text-success dark:text-success\">Header Assistant (Sparkles Icon)</p>\n                <p className=\"text-sm text-success dark:text-success\">Click the sparkles icon in the top header for the full assistant panel</p>\n              </div>\n            </div>\n            \n            <div className=\"flex items-center gap-4\">\n              <div className=\"w-8 h-8 rounded-full bg-success/10 dark:bg-success/80 flex items-center justify-center flex-shrink-0\">\n                <span className=\"text-xs font-semibold text-success dark:text-green-100\">3</span>\n              </div>\n              <div>\n                <p className=\"font-medium text-success dark:text-success\">Full Chat Page</p>\n                <p className=\"text-sm text-success dark:text-success\">Navigate to \"AI Chat\" in the sidebar or visit /chat for the complete experience</p>\n              </div>\n            </div>\n          </div>\n        </div>\n\n        {/* Action Buttons */}\n        <div className=\"flex gap-4 pt-2\">\n          <Button \n            onClick={() => window.location.href = '/chat'}\n            className=\"bg-success hover:bg-success/90 text-primary-foreground\"\n          >\n            Try Full Chat Experience\n          </Button>\n          <Button \n            variant=\"outline\" \n            onClick={() => {\n              // Trigger the quick chat if it exists\n              const quickChatTrigger = document.querySelector('[data-quick-chat-trigger]') as HTMLElement;\n              if (quickChatTrigger) {\n                quickChatTrigger.click();\n              }\n            }}\n            className=\"border-green-600 text-success hover:bg-success/5 dark:hover:bg-success/20/20\"\n          >\n            Open Quick Chat\n          </Button>\n        </div>\n      </CardContent>\n    </Card>\n  );\n};\n\nexport default AssistantUpgradeStatus; ","usedDeprecatedRules":[]},{"filePath":"/home/vonj/Github/Nexus/src/components/ai/BusinessIntelligentChat.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/vonj/Github/Nexus/src/components/ai/ChatIntegrationExample.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/vonj/Github/Nexus/src/components/ai/CrossPlatformIntelligenceDemo.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'useEffect' is defined but never used.","line":8,"column":27,"nodeType":null,"messageId":"unusedVar","endLine":8,"endColumn":36},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'TrendingUp' is defined but never used.","line":9,"column":22,"nodeType":null,"messageId":"unusedVar","endLine":9,"endColumn":32},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'AlertTriangle' is defined but never used.","line":9,"column":34,"nodeType":null,"messageId":"unusedVar","endLine":9,"endColumn":47},{"ruleId":"no-restricted-syntax","severity":1,"message":"Use design tokens instead of hardcoded text colors (e.g., text-foreground, text-muted-foreground)","line":142,"column":32,"nodeType":"Literal","messageId":"restrictedSyntax","endLine":142,"endColumn":48},{"ruleId":"no-restricted-syntax","severity":1,"message":"Use design tokens instead of hardcoded text colors (e.g., text-foreground, text-muted-foreground)","line":143,"column":30,"nodeType":"Literal","messageId":"restrictedSyntax","endLine":143,"endColumn":47},{"ruleId":"no-restricted-syntax","severity":1,"message":"Use design tokens instead of hardcoded text colors (e.g., text-foreground, text-muted-foreground)","line":144,"column":28,"nodeType":"Literal","messageId":"restrictedSyntax","endLine":144,"endColumn":42},{"ruleId":"no-restricted-syntax","severity":1,"message":"Use design tokens instead of hardcoded text colors (e.g., text-foreground, text-muted-foreground)","line":145,"column":23,"nodeType":"Literal","messageId":"restrictedSyntax","endLine":145,"endColumn":38},{"ruleId":"no-restricted-syntax","severity":1,"message":"Use design tokens instead of hardcoded colors (e.g., bg-primary, bg-secondary)","line":151,"column":27,"nodeType":"Literal","messageId":"restrictedSyntax","endLine":151,"endColumn":52},{"ruleId":"no-restricted-syntax","severity":1,"message":"Use design tokens instead of hardcoded text colors (e.g., text-foreground, text-muted-foreground)","line":151,"column":27,"nodeType":"Literal","messageId":"restrictedSyntax","endLine":151,"endColumn":52},{"ruleId":"no-restricted-syntax","severity":1,"message":"Use design tokens instead of hardcoded colors (e.g., bg-primary, bg-secondary)","line":152,"column":29,"nodeType":"Literal","messageId":"restrictedSyntax","endLine":152,"endColumn":60},{"ruleId":"no-restricted-syntax","severity":1,"message":"Use design tokens instead of hardcoded text colors (e.g., text-foreground, text-muted-foreground)","line":152,"column":29,"nodeType":"Literal","messageId":"restrictedSyntax","endLine":152,"endColumn":60},{"ruleId":"no-restricted-syntax","severity":1,"message":"Use design tokens instead of hardcoded colors (e.g., bg-primary, bg-secondary)","line":153,"column":26,"nodeType":"Literal","messageId":"restrictedSyntax","endLine":153,"endColumn":55},{"ruleId":"no-restricted-syntax","severity":1,"message":"Use design tokens instead of hardcoded text colors (e.g., text-foreground, text-muted-foreground)","line":153,"column":26,"nodeType":"Literal","messageId":"restrictedSyntax","endLine":153,"endColumn":55},{"ruleId":"no-restricted-syntax","severity":1,"message":"Use design tokens instead of hardcoded colors (e.g., bg-primary, bg-secondary)","line":154,"column":23,"nodeType":"Literal","messageId":"restrictedSyntax","endLine":154,"endColumn":50},{"ruleId":"no-restricted-syntax","severity":1,"message":"Use design tokens instead of hardcoded text colors (e.g., text-foreground, text-muted-foreground)","line":154,"column":23,"nodeType":"Literal","messageId":"restrictedSyntax","endLine":154,"endColumn":50},{"ruleId":"no-restricted-syntax","severity":1,"message":"Use design tokens instead of hardcoded text colors (e.g., text-foreground, text-muted-foreground)","line":163,"column":28,"nodeType":"Literal","messageId":"restrictedSyntax","endLine":163,"endColumn":53},{"ruleId":"no-restricted-syntax","severity":1,"message":"Use design tokens instead of hardcoded text colors (e.g., text-foreground, text-muted-foreground)","line":166,"column":22,"nodeType":"Literal","messageId":"restrictedSyntax","endLine":166,"endColumn":55},{"ruleId":"no-restricted-syntax","severity":1,"message":"Use design tokens instead of hardcoded text colors (e.g., text-foreground, text-muted-foreground)","line":215,"column":37,"nodeType":"Literal","messageId":"restrictedSyntax","endLine":215,"endColumn":63},{"ruleId":"no-restricted-syntax","severity":1,"message":"Use design tokens instead of hardcoded text colors (e.g., text-foreground, text-muted-foreground)","line":219,"column":32,"nodeType":"Literal","messageId":"restrictedSyntax","endLine":219,"endColumn":60},{"ruleId":"no-restricted-syntax","severity":1,"message":"Use design tokens instead of hardcoded text colors (e.g., text-foreground, text-muted-foreground)","line":225,"column":42,"nodeType":"Literal","messageId":"restrictedSyntax","endLine":225,"endColumn":66},{"ruleId":"no-restricted-syntax","severity":1,"message":"Use design tokens instead of hardcoded text colors (e.g., text-foreground, text-muted-foreground)","line":256,"column":41,"nodeType":"Literal","messageId":"restrictedSyntax","endLine":256,"endColumn":79},{"ruleId":"no-restricted-syntax","severity":1,"message":"Use design tokens instead of hardcoded text colors (e.g., text-foreground, text-muted-foreground)","line":260,"column":34,"nodeType":"Literal","messageId":"restrictedSyntax","endLine":260,"endColumn":57},{"ruleId":"no-restricted-syntax","severity":1,"message":"Use design tokens instead of hardcoded colors (e.g., bg-primary, bg-secondary)","line":269,"column":29,"nodeType":"Literal","messageId":"restrictedSyntax","endLine":269,"endColumn":61},{"ruleId":"no-restricted-syntax","severity":1,"message":"Use design tokens instead of hardcoded text colors (e.g., text-foreground, text-muted-foreground)","line":273,"column":38,"nodeType":"Literal","messageId":"restrictedSyntax","endLine":273,"endColumn":63},{"ruleId":"no-restricted-syntax","severity":1,"message":"Use design tokens instead of hardcoded text colors (e.g., text-foreground, text-muted-foreground)","line":284,"column":35,"nodeType":"Literal","messageId":"restrictedSyntax","endLine":284,"endColumn":58},{"ruleId":"no-restricted-syntax","severity":1,"message":"Use design tokens instead of hardcoded text colors (e.g., text-foreground, text-muted-foreground)","line":289,"column":35,"nodeType":"Literal","messageId":"restrictedSyntax","endLine":289,"endColumn":58},{"ruleId":"no-restricted-syntax","severity":1,"message":"Use design tokens instead of hardcoded text colors (e.g., text-foreground, text-muted-foreground)","line":295,"column":34,"nodeType":"Literal","messageId":"restrictedSyntax","endLine":295,"endColumn":74},{"ruleId":"no-restricted-syntax","severity":1,"message":"Use design tokens instead of hardcoded text colors (e.g., text-foreground, text-muted-foreground)","line":315,"column":41,"nodeType":"Literal","messageId":"restrictedSyntax","endLine":315,"endColumn":64},{"ruleId":"no-restricted-syntax","severity":1,"message":"Use design tokens instead of hardcoded text colors (e.g., text-foreground, text-muted-foreground)","line":341,"column":36,"nodeType":"Literal","messageId":"restrictedSyntax","endLine":341,"endColumn":59},{"ruleId":"no-restricted-syntax","severity":1,"message":"Use design tokens instead of hardcoded text colors (e.g., text-foreground, text-muted-foreground)","line":353,"column":39,"nodeType":"Literal","messageId":"restrictedSyntax","endLine":353,"endColumn":74},{"ruleId":"no-restricted-syntax","severity":1,"message":"Use design tokens instead of hardcoded text colors (e.g., text-foreground, text-muted-foreground)","line":358,"column":45,"nodeType":"Literal","messageId":"restrictedSyntax","endLine":358,"endColumn":68},{"ruleId":"no-restricted-syntax","severity":1,"message":"Use design tokens instead of hardcoded text colors (e.g., text-foreground, text-muted-foreground)","line":360,"column":41,"nodeType":"Literal","messageId":"restrictedSyntax","endLine":360,"endColumn":64},{"ruleId":"no-restricted-syntax","severity":1,"message":"Use design tokens instead of hardcoded text colors (e.g., text-foreground, text-muted-foreground)","line":362,"column":41,"nodeType":"Literal","messageId":"restrictedSyntax","endLine":362,"endColumn":64},{"ruleId":"no-restricted-syntax","severity":1,"message":"Use design tokens instead of hardcoded colors (e.g., bg-primary, bg-secondary)","line":366,"column":36,"nodeType":"Literal","messageId":"restrictedSyntax","endLine":366,"endColumn":70},{"ruleId":"no-restricted-syntax","severity":1,"message":"Use design tokens instead of hardcoded text colors (e.g., text-foreground, text-muted-foreground)","line":393,"column":32,"nodeType":"Literal","messageId":"restrictedSyntax","endLine":393,"endColumn":57},{"ruleId":"no-restricted-syntax","severity":1,"message":"Use design tokens instead of hardcoded text colors (e.g., text-foreground, text-muted-foreground)","line":404,"column":33,"nodeType":"Literal","messageId":"restrictedSyntax","endLine":404,"endColumn":59},{"ruleId":"no-restricted-syntax","severity":1,"message":"Use design tokens instead of hardcoded colors (e.g., bg-primary, bg-secondary)","line":405,"column":34,"nodeType":"Literal","messageId":"restrictedSyntax","endLine":405,"endColumn":82},{"ruleId":"no-restricted-syntax","severity":1,"message":"Use design tokens instead of hardcoded text colors (e.g., text-foreground, text-muted-foreground)","line":407,"column":36,"nodeType":"Literal","messageId":"restrictedSyntax","endLine":407,"endColumn":59},{"ruleId":"no-restricted-syntax","severity":1,"message":"Use design tokens instead of hardcoded text colors (e.g., text-foreground, text-muted-foreground)","line":411,"column":34,"nodeType":"Literal","messageId":"restrictedSyntax","endLine":411,"endColumn":57},{"ruleId":"no-restricted-syntax","severity":1,"message":"Use design tokens instead of hardcoded text colors (e.g., text-foreground, text-muted-foreground)","line":418,"column":33,"nodeType":"Literal","messageId":"restrictedSyntax","endLine":418,"endColumn":61},{"ruleId":"no-restricted-syntax","severity":1,"message":"Use design tokens instead of hardcoded colors (e.g., bg-primary, bg-secondary)","line":419,"column":34,"nodeType":"Literal","messageId":"restrictedSyntax","endLine":419,"endColumn":86},{"ruleId":"no-restricted-syntax","severity":1,"message":"Use design tokens instead of hardcoded text colors (e.g., text-foreground, text-muted-foreground)","line":421,"column":36,"nodeType":"Literal","messageId":"restrictedSyntax","endLine":421,"endColumn":69},{"ruleId":"no-restricted-syntax","severity":1,"message":"Use design tokens instead of hardcoded text colors (e.g., text-foreground, text-muted-foreground)","line":426,"column":38,"nodeType":"Literal","messageId":"restrictedSyntax","endLine":426,"endColumn":58},{"ruleId":"no-restricted-syntax","severity":1,"message":"Use design tokens instead of hardcoded text colors (e.g., text-foreground, text-muted-foreground)","line":431,"column":34,"nodeType":"Literal","messageId":"restrictedSyntax","endLine":431,"endColumn":57},{"ruleId":"no-restricted-syntax","severity":1,"message":"Use design tokens instead of hardcoded colors (e.g., bg-primary, bg-secondary)","line":446,"column":32,"nodeType":"Literal","messageId":"restrictedSyntax","endLine":446,"endColumn":82},{"ruleId":"no-restricted-syntax","severity":1,"message":"Use design tokens instead of hardcoded colors (e.g., bg-primary, bg-secondary)","line":458,"column":34,"nodeType":"Literal","messageId":"restrictedSyntax","endLine":458,"endColumn":70},{"ruleId":"no-restricted-syntax","severity":1,"message":"Use design tokens instead of hardcoded text colors (e.g., text-foreground, text-muted-foreground)","line":459,"column":36,"nodeType":"Literal","messageId":"restrictedSyntax","endLine":459,"endColumn":74},{"ruleId":"no-restricted-syntax","severity":1,"message":"Use design tokens instead of hardcoded colors (e.g., bg-primary, bg-secondary)","line":462,"column":34,"nodeType":"Literal","messageId":"restrictedSyntax","endLine":462,"endColumn":70},{"ruleId":"no-restricted-syntax","severity":1,"message":"Use design tokens instead of hardcoded text colors (e.g., text-foreground, text-muted-foreground)","line":463,"column":36,"nodeType":"Literal","messageId":"restrictedSyntax","endLine":463,"endColumn":74},{"ruleId":"no-restricted-syntax","severity":1,"message":"Use design tokens instead of hardcoded colors (e.g., bg-primary, bg-secondary)","line":466,"column":34,"nodeType":"Literal","messageId":"restrictedSyntax","endLine":466,"endColumn":70},{"ruleId":"no-restricted-syntax","severity":1,"message":"Use design tokens instead of hardcoded text colors (e.g., text-foreground, text-muted-foreground)","line":467,"column":36,"nodeType":"Literal","messageId":"restrictedSyntax","endLine":467,"endColumn":74},{"ruleId":"no-restricted-syntax","severity":1,"message":"Use design tokens instead of hardcoded text colors (e.g., text-foreground, text-muted-foreground)","line":481,"column":24,"nodeType":"Literal","messageId":"restrictedSyntax","endLine":481,"endColumn":57},{"ruleId":"no-restricted-syntax","severity":1,"message":"Use design tokens instead of hardcoded colors (e.g., bg-primary, bg-secondary)","line":489,"column":30,"nodeType":"Literal","messageId":"restrictedSyntax","endLine":489,"endColumn":45}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":53,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\n * CrossPlatformIntelligenceDemo.tsx\n * \n * Interactive demonstration of how cross-platform analytics data enhances\n * AI decision-making, LLM calls, and app routing throughout Nexus.\n */\n\nimport React, { useState, useEffect } from 'react';\nimport { Brain, Zap, TrendingUp, AlertTriangle, CheckCircle, ArrowRight, Activity, Database, Network } from 'lucide-react';\nimport { \n  Card, CardContent, CardDescription, CardHeader, CardTitle,\n  Button,\n  Badge,\n  Progress\n} from '@/components/ui';\n\ninterface PlatformData {\n  name: string;\n  status: 'connected' | 'syncing' | 'error';\n  lastUpdate: string;\n  keyMetrics: Record<string, string | number>;\n  icon: string;\n}\n\ninterface AIInsight {\n  type: 'correlation' | 'prediction' | 'recommendation';\n  confidence: number;\n  description: string;\n  platforms: string[];\n  impact: 'high' | 'medium' | 'low';\n  actionable: boolean;\n}\n\ninterface RoutingDecision {\n  query: string;\n  recommendedAgent: string;\n  confidence: number;\n  reasoning: string;\n  contextUsed: string[];\n}\n\nexport const CrossPlatformIntelligenceDemo: React.FC = () => {\n  const [selectedDemo, setSelectedDemo] = useState<'overview' | 'routing' | 'llm' | 'insights'>('overview');\n  const [isAnalyzing, setIsAnalyzing] = useState(false);\n  const [currentInsight, setCurrentInsight] = useState<AIInsight | null>(null);\n\n  // Mock cross-platform data\n  const platformData: PlatformData[] = [\n    {\n      name: 'HubSpot CRM',\n      status: 'connected',\n      lastUpdate: '2 minutes ago',\n      keyMetrics: { pipeline: '$245,000', deals: 47, conversion: '28%', trend: 'up' },\n      icon: '🎯'\n    },\n    {\n      name: 'Cloudflare',\n      status: 'connected',\n      lastUpdate: '1 minute ago',\n      keyMetrics: { uptime: '99.97%', response: '180ms', threats: 1247 },\n      icon: '🛡️'\n    },\n    {\n      name: 'Google Workspace',\n      status: 'connected',\n      lastUpdate: '3 minutes ago',\n      keyMetrics: { emails: '156/day', meetings: '12h/week', docs: 89 },\n      icon: '📧'\n    },\n    {\n      name: 'Marcoby Cloud',\n      status: 'connected',\n      lastUpdate: '5 minutes ago',\n      keyMetrics: { utilization: '72%', uptime: '99.95%', cost: '$1,250/mo' },\n      icon: '☁️'\n    }\n  ];\n\n  // Mock AI insights\n  const aiInsights: AIInsight[] = [\n    {\n      type: 'correlation',\n      confidence: 87,\n      description: 'High email volume correlates with 23% increase in deal velocity',\n      platforms: ['Google Workspace', 'HubSpot CRM'],\n      impact: 'high',\n      actionable: true\n    },\n    {\n      type: 'prediction',\n      confidence: 92,\n      description: 'Current trends suggest 34% Q1 lead increase',\n      platforms: ['HubSpot CRM', 'Cloudflare', 'Google Workspace'],\n      impact: 'high',\n      actionable: true\n    },\n    {\n      type: 'recommendation',\n      confidence: 79,\n      description: 'Infrastructure scaling needed by month-end (current 72% utilization)',\n      platforms: ['Marcoby Cloud', 'HubSpot CRM'],\n      impact: 'medium',\n      actionable: true\n    }\n  ];\n\n  // Mock routing decisions\n  const routingExamples: RoutingDecision[] = [\n    {\n      query: \"How's our sales performance?\",\n      recommendedAgent: \"Sales Specialist\",\n      confidence: 95,\n      reasoning: \"High deal velocity period detected - sales team performing exceptionally\",\n      contextUsed: ['HubSpot pipeline data', 'Email engagement patterns', 'Website performance']\n    },\n    {\n      query: \"Our website seems slow\",\n      recommendedAgent: \"Technical Operations\",\n      confidence: 89,\n      reasoning: \"Cloudflare shows 180ms response time (actually good) - likely perception issue\",\n      contextUsed: ['Cloudflare performance metrics', 'Infrastructure utilization', 'User traffic patterns']\n    },\n    {\n      query: \"Plan for Q1 growth\",\n      recommendedAgent: \"Executive Assistant\",\n      confidence: 93,\n      reasoning: \"Strategic planning needed - 34% lead increase predicted, infrastructure scaling required\",\n      contextUsed: ['Cross-platform trends', 'Predictive analytics', 'Resource capacity analysis']\n    }\n  ];\n\n  const simulateAnalysis = () => {\n    setIsAnalyzing(true);\n    setTimeout(() => {\n      setCurrentInsight(aiInsights[Math.floor(Math.random() * aiInsights.length)]);\n      setIsAnalyzing(false);\n    }, 2000);\n  };\n\n  const getStatusColor = (status: string) => {\n    switch (status) {\n      case 'connected': return 'text-green-600';\n      case 'syncing': return 'text-yellow-600';\n      case 'error': return 'text-red-600';\n      default: return 'text-gray-600';\n    }\n  };\n\n  const getImpactColor = (impact: string) => {\n    switch (impact) {\n      case 'high': return 'bg-red-100 text-red-800';\n      case 'medium': return 'bg-yellow-100 text-yellow-800';\n      case 'low': return 'bg-green-100 text-green-800';\n      default: return 'bg-gray-100 text-gray-800';\n    }\n  };\n\n  return (\n    <div className=\"max-w-6xl mx-auto p-6 space-y-6\">\n      {/* Header */}\n      <div className=\"text-center space-y-4\">\n        <div className=\"flex items-center justify-center gap-2\">\n          <Brain className=\"h-8 w-8 text-purple-600\" />\n          <h1 className=\"text-3xl font-bold\">Cross-Platform AI Intelligence</h1>\n        </div>\n        <p className=\"text-gray-600 max-w-2xl mx-auto\">\n          See how combining data from multiple platforms creates a contextual intelligence multiplier \n          that transforms AI decision-making, LLM calls, and app routing.\n        </p>\n      </div>\n\n      {/* Demo Navigation */}\n      <div className=\"flex justify-center gap-2\">\n        {[\n          { id: 'overview', label: 'Platform Overview', icon: Database },\n          { id: 'insights', label: 'AI Insights', icon: Brain },\n          { id: 'routing', label: 'Smart Routing', icon: Network },\n          { id: 'llm', label: 'Enhanced LLM', icon: Zap }\n        ].map(({ id, label, icon: Icon }) => (\n          <Button\n            key={id}\n            variant={selectedDemo === id ? 'default' : 'outline'}\n            onClick={() => setSelectedDemo(id as 'overview' | 'routing' | 'llm' | 'insights')}\n            className=\"flex items-center gap-2\"\n          >\n            <Icon className=\"h-4 w-4\" />\n            {label}\n          </Button>\n        ))}\n      </div>\n\n      {/* Platform Overview */}\n      {selectedDemo === 'overview' && (\n        <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-4\">\n          {platformData.map((platform, index) => (\n            <Card key={index} className=\"relative overflow-hidden\">\n              <CardHeader className=\"pb-3\">\n                <div className=\"flex items-center justify-between\">\n                  <div className=\"flex items-center gap-2\">\n                    <span className=\"text-2xl\">{platform.icon}</span>\n                    <div>\n                      <CardTitle className=\"text-sm\">{platform.name}</CardTitle>\n                      <CardDescription className=\"text-xs\">\n                        <span className={getStatusColor(platform.status)}>\n                          ● {platform.status}\n                        </span>\n                      </CardDescription>\n                    </div>\n                  </div>\n                </div>\n              </CardHeader>\n              <CardContent className=\"space-y-2\">\n                {Object.entries(platform.keyMetrics).map(([key, value]) => (\n                  <div key={key} className=\"flex justify-between text-sm\">\n                    <span className=\"text-gray-600 capitalize\">{key}:</span>\n                    <span className=\"font-medium\">{value}</span>\n                  </div>\n                ))}\n                <div className=\"text-xs text-gray-500 mt-2\">\n                  Updated {platform.lastUpdate}\n                </div>\n              </CardContent>\n              {platform.status === 'connected' && (\n                <div className=\"absolute top-2 right-2\">\n                  <CheckCircle className=\"h-4 w-4 text-green-500\" />\n                </div>\n              )}\n            </Card>\n          ))}\n        </div>\n      )}\n\n      {/* AI Insights */}\n      {selectedDemo === 'insights' && (\n        <div className=\"space-y-6\">\n          <div className=\"text-center\">\n            <Button \n              onClick={simulateAnalysis} \n              disabled={isAnalyzing}\n              className=\"flex items-center gap-2\"\n            >\n              {isAnalyzing ? (\n                <Activity className=\"h-4 w-4 animate-spin\" />\n              ) : (\n                <Brain className=\"h-4 w-4\" />\n              )}\n              {isAnalyzing ? 'Analyzing Cross-Platform Patterns...' : 'Discover New Insights'}\n            </Button>\n          </div>\n\n          {isAnalyzing && (\n            <Card>\n              <CardContent className=\"p-6\">\n                <div className=\"space-y-4\">\n                  <div className=\"flex items-center gap-2\">\n                    <Activity className=\"h-5 w-5 animate-spin text-purple-600\" />\n                    <span className=\"font-medium\">AI Correlation Engine Active</span>\n                  </div>\n                  <Progress value={75} className=\"w-full\" />\n                  <div className=\"text-sm text-gray-600\">\n                    Analyzing patterns across HubSpot, Cloudflare, Google Workspace, and Marcoby Cloud...\n                  </div>\n                </div>\n              </CardContent>\n            </Card>\n          )}\n\n          {currentInsight && (\n            <Card className=\"border-purple-200 bg-purple-50\">\n              <CardHeader>\n                <div className=\"flex items-center justify-between\">\n                  <CardTitle className=\"flex items-center gap-2\">\n                    <Brain className=\"h-5 w-5 text-purple-600\" />\n                    AI-Discovered Insight\n                  </CardTitle>\n                  <Badge className={getImpactColor(currentInsight.impact)}>\n                    {currentInsight.impact} impact\n                  </Badge>\n                </div>\n              </CardHeader>\n              <CardContent className=\"space-y-4\">\n                <p className=\"text-lg font-medium\">{currentInsight.description}</p>\n                <div className=\"flex items-center gap-2\">\n                  <span className=\"text-sm text-gray-600\">Confidence:</span>\n                  <Progress value={currentInsight.confidence} className=\"flex-1 max-w-32\" />\n                  <span className=\"text-sm font-medium\">{currentInsight.confidence}%</span>\n                </div>\n                <div className=\"flex flex-wrap gap-2\">\n                  <span className=\"text-sm text-gray-600\">Data sources:</span>\n                  {currentInsight.platforms.map((platform, idx) => (\n                    <Badge key={idx} variant=\"outline\">{platform}</Badge>\n                  ))}\n                </div>\n                {currentInsight.actionable && (\n                  <div className=\"flex items-center gap-2 text-green-700\">\n                    <CheckCircle className=\"h-4 w-4\" />\n                    <span className=\"text-sm\">Actionable recommendation available</span>\n                  </div>\n                )}\n              </CardContent>\n            </Card>\n          )}\n\n          <div className=\"grid gap-4\">\n            {aiInsights.map((insight, index) => (\n              <Card key={index} className=\"hover:shadow-md transition-shadow\">\n                <CardContent className=\"p-4\">\n                  <div className=\"flex items-start justify-between\">\n                    <div className=\"space-y-2 flex-1\">\n                      <div className=\"flex items-center gap-2\">\n                        <Badge variant={insight.type === 'correlation' ? 'default' : \n                                      insight.type === 'prediction' ? 'secondary' : 'outline'}>\n                          {insight.type}\n                        </Badge>\n                        <span className=\"text-sm text-gray-600\">{insight.confidence}% confidence</span>\n                      </div>\n                      <p className=\"font-medium\">{insight.description}</p>\n                      <div className=\"flex flex-wrap gap-1\">\n                        {insight.platforms.map((platform, idx) => (\n                          <Badge key={idx} variant=\"outline\" className=\"text-xs\">{platform}</Badge>\n                        ))}\n                      </div>\n                    </div>\n                    <Badge className={getImpactColor(insight.impact)}>\n                      {insight.impact}\n                    </Badge>\n                  </div>\n                </CardContent>\n              </Card>\n            ))}\n          </div>\n        </div>\n      )}\n\n      {/* Smart Routing */}\n      {selectedDemo === 'routing' && (\n        <div className=\"space-y-6\">\n          <Card>\n            <CardHeader>\n              <CardTitle className=\"flex items-center gap-2\">\n                <Network className=\"h-5 w-5 text-blue-600\" />\n                Intelligent Agent Routing\n              </CardTitle>\n              <CardDescription>\n                See how cross-platform context improves AI agent selection and routing decisions\n              </CardDescription>\n            </CardHeader>\n            <CardContent>\n              <div className=\"space-y-6\">\n                {routingExamples.map((example, index) => (\n                  <div key={index} className=\"border rounded-lg p-4 space-y-3\">\n                    <div className=\"flex items-center gap-2\">\n                      <span className=\"text-sm font-medium text-gray-600\">User Query:</span>\n                      <span className=\"font-medium\">\"{example.query}\"</span>\n                    </div>\n                    \n                    <div className=\"flex items-center gap-4\">\n                      <ArrowRight className=\"h-4 w-4 text-gray-400\" />\n                      <div className=\"flex items-center gap-2\">\n                        <span className=\"text-sm text-gray-600\">Routed to:</span>\n                        <Badge>{example.recommendedAgent}</Badge>\n                        <span className=\"text-sm text-gray-600\">({example.confidence}% confidence)</span>\n                      </div>\n                    </div>\n                    \n                    <div className=\"bg-gray-50 rounded p-3 space-y-2\">\n                      <div className=\"text-sm\">\n                        <span className=\"font-medium\">AI Reasoning:</span> {example.reasoning}\n                      </div>\n                      <div className=\"text-sm\">\n                        <span className=\"font-medium\">Context Used:</span>\n                        <div className=\"flex flex-wrap gap-1 mt-1\">\n                          {example.contextUsed.map((context, idx) => (\n                            <Badge key={idx} variant=\"outline\" className=\"text-xs\">{context}</Badge>\n                          ))}\n                        </div>\n                      </div>\n                    </div>\n                  </div>\n                ))}\n              </div>\n            </CardContent>\n          </Card>\n        </div>\n      )}\n\n      {/* Enhanced LLM */}\n      {selectedDemo === 'llm' && (\n        <div className=\"space-y-6\">\n          <Card>\n            <CardHeader>\n              <CardTitle className=\"flex items-center gap-2\">\n                <Zap className=\"h-5 w-5 text-yellow-600\" />\n                Enhanced LLM Calls\n              </CardTitle>\n              <CardDescription>\n                Compare responses with and without cross-platform context\n              </CardDescription>\n            </CardHeader>\n            <CardContent>\n              <div className=\"grid md:grid-cols-2 gap-6\">\n                {/* Before */}\n                <div className=\"space-y-3\">\n                  <h4 className=\"font-medium text-red-600\">❌ Without Cross-Platform Context</h4>\n                  <div className=\"bg-red-50 border border-red-200 rounded-lg p-4\">\n                    <div className=\"text-sm font-medium mb-2\">User: \"How's our sales performance?\"</div>\n                    <div className=\"text-sm text-gray-700\">\n                      \"I'd be happy to help you check your sales performance. Could you provide more details about what specific metrics you'd like to see?\"\n                    </div>\n                  </div>\n                  <div className=\"text-xs text-gray-600\">\n                    Generic response requiring clarification • No business context • Reactive assistance\n                  </div>\n                </div>\n\n                {/* After */}\n                <div className=\"space-y-3\">\n                  <h4 className=\"font-medium text-green-600\">✅ With Cross-Platform Intelligence</h4>\n                  <div className=\"bg-green-50 border border-green-200 rounded-lg p-4\">\n                    <div className=\"text-sm font-medium mb-2\">User: \"How's our sales performance?\"</div>\n                    <div className=\"text-sm text-gray-700 space-y-2\">\n                      <div>\"Your sales performance is strong! Based on real-time data:\"</div>\n                      <div>📊 Current Pipeline: $245,000 (47 active deals)</div>\n                      <div>📈 Conversion Rate: 28% (up 5% from last month)</div>\n                      <div>🚀 Deal Velocity: 23% faster due to high email engagement</div>\n                      <div className=\"mt-2 text-blue-700\">\n                        \"🧠 AI Insight: Your Google Workspace shows 156 emails/day, which correlates with improved deal velocity!\"\n                      </div>\n                    </div>\n                  </div>\n                  <div className=\"text-xs text-gray-600\">\n                    Immediately actionable • Complete business context • Proactive insights with correlations\n                  </div>\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n\n          {/* Context Enhancement Details */}\n          <Card>\n            <CardHeader>\n              <CardTitle className=\"text-lg\">LLM Context Enhancement</CardTitle>\n            </CardHeader>\n            <CardContent>\n              <div className=\"space-y-4\">\n                <div className=\"bg-blue-50 border border-blue-200 rounded-lg p-4\">\n                  <h5 className=\"font-medium mb-2\">Enhanced System Prompt Includes:</h5>\n                  <ul className=\"text-sm space-y-1\">\n                    <li>• Real-time data from all connected platforms</li>\n                    <li>• AI-discovered correlations and patterns</li>\n                    <li>• Predictive insights and recommendations</li>\n                    <li>• Business state context and resource utilization</li>\n                    <li>• Historical patterns and trend analysis</li>\n                  </ul>\n                </div>\n                \n                <div className=\"grid md:grid-cols-3 gap-4 text-sm\">\n                  <div className=\"text-center p-3 bg-gray-50 rounded\">\n                    <div className=\"font-medium text-2xl text-purple-600\">90%</div>\n                    <div>Response Relevance</div>\n                  </div>\n                  <div className=\"text-center p-3 bg-gray-50 rounded\">\n                    <div className=\"font-medium text-2xl text-purple-600\">85%</div>\n                    <div>Include Predictions</div>\n                  </div>\n                  <div className=\"text-center p-3 bg-gray-50 rounded\">\n                    <div className=\"font-medium text-2xl text-purple-600\">8+</div>\n                    <div>Data Sources</div>\n                  </div>\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n        </div>\n      )}\n\n      {/* Bottom CTA */}\n      <Card className=\"bg-gradient-to-r from-purple-50 to-blue-50 border-purple-200\">\n        <CardContent className=\"p-6 text-center space-y-4\">\n          <h3 className=\"text-xl font-bold\">The Intelligence Multiplier Effect</h3>\n          <p className=\"text-gray-700 max-w-2xl mx-auto\">\n            Cross-platform analytics doesn't just add data—it multiplies intelligence. \n            With 8+ integrated platforms, Nexus creates AI that truly understands your business holistically.\n          </p>\n          <div className=\"flex justify-center gap-4 text-sm\">\n            <Badge variant=\"outline\">1 Platform: Basic metrics</Badge>\n            <Badge variant=\"outline\">2-3 Platforms: Simple correlations</Badge>\n            <Badge variant=\"outline\">4-6 Platforms: Pattern recognition</Badge>\n            <Badge className=\"bg-purple-600\">8+ Platforms: Unified intelligence</Badge>\n          </div>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}; ","usedDeprecatedRules":[]},{"filePath":"/home/vonj/Github/Nexus/src/components/ai/DepartmentalAgent.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'useCallback' is defined but never used.","line":8,"column":46,"nodeType":null,"messageId":"unusedVar","endLine":8,"endColumn":57},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'Button' is defined but never used.","line":17,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":17,"endColumn":16},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'ScrollArea' is defined but never used.","line":18,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":18,"endColumn":20},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'Card' is defined but never used.","line":19,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":19,"endColumn":14},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'CardContent' is defined but never used.","line":19,"column":16,"nodeType":null,"messageId":"unusedVar","endLine":19,"endColumn":27},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'CardHeader' is defined but never used.","line":19,"column":29,"nodeType":null,"messageId":"unusedVar","endLine":19,"endColumn":39},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'CardTitle' is defined but never used.","line":19,"column":41,"nodeType":null,"messageId":"unusedVar","endLine":19,"endColumn":50},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'Avatar' is defined but never used.","line":20,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":20,"endColumn":16},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'AvatarFallback' is defined but never used.","line":20,"column":18,"nodeType":null,"messageId":"unusedVar","endLine":20,"endColumn":32},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'AvatarImage' is defined but never used.","line":20,"column":34,"nodeType":null,"messageId":"unusedVar","endLine":20,"endColumn":45},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'Badge' is defined but never used.","line":21,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":21,"endColumn":15},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'Tooltip' is defined but never used.","line":22,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":22,"endColumn":17},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'TooltipContent' is defined but never used.","line":22,"column":19,"nodeType":null,"messageId":"unusedVar","endLine":22,"endColumn":33},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'TooltipProvider' is defined but never used.","line":22,"column":35,"nodeType":null,"messageId":"unusedVar","endLine":22,"endColumn":50},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'TooltipTrigger' is defined but never used.","line":22,"column":52,"nodeType":null,"messageId":"unusedVar","endLine":22,"endColumn":66},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'Message' is defined but never used.","line":36,"column":11,"nodeType":null,"messageId":"unusedVar","endLine":36,"endColumn":18},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'onClose' is defined but never used.","line":125,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":125,"endColumn":10},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'error' is assigned a value but never used.","line":130,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":130,"endColumn":15},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'navigate' is assigned a value but never used.","line":134,"column":9,"nodeType":null,"messageId":"unusedVar","endLine":134,"endColumn":17},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'messagesLoading' is assigned a value but never used.","line":145,"column":14,"nodeType":null,"messageId":"unusedVar","endLine":145,"endColumn":29},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'messagesError' is assigned a value but never used.","line":146,"column":12,"nodeType":null,"messageId":"unusedVar","endLine":146,"endColumn":25}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":21,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\n * DepartmentalAgent.tsx\n * \n * Department AI assistant with intelligent routing to sub-assistants\n * Can switch between department head and specialists based on conversation needs\n */\n\nimport React, { useState, useRef, useEffect, useCallback } from 'react';\nimport PropTypes from 'prop-types';\nimport { useNavigate, useLocation } from 'react-router-dom';\nimport { Send, ArrowLeft, Users, ChevronDown, ChevronUp } from 'lucide-react';\nimport { chatHistory } from '../../lib/core/supabase';\nimport { useRealtimeChat } from '@/lib/hooks/useRealtimeChat';\nimport { useAuth } from '@/contexts/AuthContext';\nimport { getChildAgents, type Agent } from '@/lib/ai/agentRegistry';\nimport { supervisorAgent } from '@/lib/ai/assistant/supervisor';\nimport { Button } from '@/components/ui/Button';\nimport { ScrollArea } from '@/components/ui/ScrollArea';\nimport { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/Card';\nimport { Avatar, AvatarFallback, AvatarImage } from '@/components/ui/Avatar';\nimport { Badge } from '@/components/ui/Badge';\nimport { Tooltip, TooltipContent, TooltipProvider, TooltipTrigger } from '@/components/ui/Tooltip';\n\n/**\n * @interface DepartmentalAgentProps\n */\ninterface DepartmentalAgentProps {\n  agent: Agent;\n  onClose?: () => void;\n  onBack?: () => void;\n}\n\n/**\n * @interface Message\n */\ninterface Message {\n  sender: 'user' | 'assistant' | 'system';\n  text: string;\n}\n\n/**\n * Get department-specific system prompt with routing capabilities\n */\nconst getDepartmentSystemPrompt = (agent: Agent, specialists: Agent[]): string => {\n  const basePrompt = `You are ${agent.name}, a specialized AI assistant for the ${agent.department} department in the Nexus productivity platform.`;\n  \n  const specialistList = specialists.map(s => `${s.name} (${s.specialties?.join(', ')})`).join(', ');\n  \n  const departmentPrompts: Record<string, string> = {\n    sales: `${basePrompt} You help with lead qualification, pipeline management, CRM optimization, deal closing strategies, and sales performance analysis. \n\nYour specialties include: ${agent.specialties?.join(', ')}.\n\nYou have access to these specialist assistants: ${specialistList}. When a user's question is highly specific to one of these areas, suggest they could get more detailed help from the relevant specialist, but still provide helpful guidance yourself.\n\nBe results-focused and data-driven in your responses.`,\n    \n    marketing: `${basePrompt} You assist with campaign management, content strategy, lead generation, brand development, and marketing analytics.\n\nYour specialties include: ${agent.specialties?.join(', ')}.\n\nYou have access to these specialist assistants: ${specialistList}. When users need deep expertise in specific areas like SEO, content creation, or analytics, mention that specialists are available while still providing valuable insights.\n\nFocus on creative solutions and measurable ROI.`,\n    \n    finance: `${basePrompt} You handle financial planning, budgeting, accounting, reporting, and compliance matters.\n\nYour specialties include: ${agent.specialties?.join(', ')}.\n\nYou have access to these specialist assistants: ${specialistList}. For complex accounting, tax, or analytical questions, you can suggest consulting with specialists while providing general guidance.\n\nEnsure accuracy and regulatory compliance in all recommendations.`,\n    \n    operations: `${basePrompt} You manage process optimization, project coordination, quality assurance, and operational efficiency.\n\nYour specialties include: ${agent.specialties?.join(', ')}.\n\nYou have access to these specialist assistants: ${specialistList}. For technical IT issues, detailed project management, or quality processes, specialists are available for deeper expertise.\n\nFocus on streamlining processes and improving productivity.`\n  };\n\n  return departmentPrompts[agent.department || ''] || `${basePrompt} You are a helpful assistant specialized in ${agent.specialties?.join(', ')}.`;\n};\n\n/**\n * Get department-specific quick actions\n */\nconst getDepartmentQuickActions = (department: string): string[] => {\n  const actions: Record<string, string[]> = {\n    sales: [\n      \"Show me today's pipeline\",\n      \"Help me qualify this lead\",\n      \"Create a follow-up sequence\",\n      \"Analyze deal probability\"\n    ],\n    marketing: [\n      \"Plan a new campaign\",\n      \"Analyze campaign performance\", \n      \"Create content ideas\",\n      \"Review lead generation\"\n    ],\n    finance: [\n      \"Generate monthly report\",\n      \"Review budget variance\",\n      \"Calculate ROI\",\n      \"Check compliance status\"\n    ],\n    operations: [\n      \"Review project status\",\n      \"Optimize workflow\",\n      \"Quality check process\",\n      \"Resource allocation\"\n    ]\n  };\n\n  return actions[department] || [\"How can I help you today?\"];\n};\n\n/**\n * DepartmentalAgent Component\n */\nexport const DepartmentalAgent: React.FC<DepartmentalAgentProps> = ({ \n  agent, \n  onClose, \n  onBack \n}) => {\n  const [input, setInput] = useState('');\n  const [loading, setLoading] = useState(false);\n  const [error, setError] = useState<string | null>(null);\n  const [currentConversationId, setCurrentConversationId] = useState<string | null>(null);\n  const [showSpecialists, setShowSpecialists] = useState(false);\n  const [activeAgent, setActiveAgent] = useState<Agent>(agent); // Can switch between dept head and specialists\n  const navigate = useNavigate();\n  const location = useLocation();\n  const { user } = useAuth();\n  const transcriptRef = useRef<HTMLDivElement>(null);\n\n  // Get specialists under this department\n  const specialists = getChildAgents(agent.id);\n\n  // Use realtime chat hook for messages\n  const { \n    messages, \n    loading: messagesLoading, \n    error: messagesError \n  } = useRealtimeChat(currentConversationId || '');\n\n  // Get department-specific data\n  const systemPrompt = getDepartmentSystemPrompt(agent, specialists);\n  const quickActions = getDepartmentQuickActions(agent.department || '');\n\n  // Initialize conversation\n  useEffect(() => {\n    const initConversation = async () => {\n      if (!user) return;\n\n      try {\n        const conversation = await chatHistory.createConversation(\n          `${agent.name} Conversation`,\n          agent.id,\n          { \n            page: location.pathname,\n            user_id: user.id,\n            department: agent.department\n          }\n        );\n        setCurrentConversationId(conversation.id);\n        \n        // Add system message\n        const systemMessage = {\n          role: 'system' as const,\n          content: systemPrompt,\n          metadata: { \n            agent_id: agent.id,\n            department: agent.department\n          }\n        };\n        await chatHistory.addMessage(conversation.id, systemMessage);\n\n        // Add welcome message\n        const welcomeMessage = {\n          role: 'assistant' as const,\n          content: `Hello! I'm ${agent.name}. I'm here to help you with ${agent.department} tasks. ${agent.specialties ? `I specialize in ${agent.specialties.join(', ')}.` : ''} ${specialists.length > 0 ? `\\n\\nI also have access to ${specialists.length} specialist assistants who can provide deeper expertise when needed.` : ''} How can I assist you today?`,\n          metadata: { agent_id: agent.id }\n        };\n        await chatHistory.addMessage(conversation.id, welcomeMessage);\n      } catch (err) {\n        console.error('Failed to initialize conversation:', err);\n        setError('Failed to initialize chat. Please try again.');\n      }\n    };\n\n    initConversation();\n  }, [agent, user, location.pathname, systemPrompt, specialists.length]);\n\n  const handleSend = async (message?: string) => {\n    const textToSend = message || input.trim();\n    if (!textToSend || loading || !currentConversationId || !user) return;\n\n    try {\n      setLoading(true);\n      setError(null);\n      \n      if (!message) {\n        setInput('');\n      }\n\n      // Add user message\n      await chatHistory.addMessage(currentConversationId, {\n        role: 'user',\n        content: textToSend,\n        metadata: { \n          agent_id: activeAgent.id,\n          department: agent.department\n        }\n      });\n\n      // Call supervisor to see if we should route to a specialist\n      const routing = await supervisorAgent(textToSend, {\n        specialists,\n        department: agent.department,\n      });\n\n      // If supervisor suggests a specialist with reasonable confidence, switch\n      if (routing.routeToAgentId) {\n        const target = specialists.find((s) => s.id === routing.routeToAgentId);\n        if (target && routing.confidence >= 0.5) {\n          // Add system message about switch then change active agent\n          await chatHistory.addMessage(currentConversationId, {\n            role: 'assistant',\n            content: routing.content,\n            metadata: { agent_id: activeAgent.id, agent_switch_suggestion: true },\n          });\n\n          setActiveAgent(target);\n\n          await chatHistory.addMessage(currentConversationId, {\n            role: 'assistant',\n            content: `Switching you to ${target.name} for deeper expertise.`,\n            metadata: { agent_id: target.id, agent_switch: true },\n          });\n\n          setLoading(false);\n          return;\n        }\n      }\n\n      // Otherwise respond as current agent\n      await chatHistory.addMessage(currentConversationId, {\n        role: 'assistant',\n        content: routing.content,\n        metadata: { agent_id: activeAgent.id }\n      });\n\n      setLoading(false);\n\n    } catch (err) {\n      console.error('Error in handleSend:', err);\n      setError('Failed to send message. Please try again.');\n      setLoading(false);\n    }\n  };\n\n  const handleSpecialistSwitch = (specialist: Agent) => {\n    setActiveAgent(specialist);\n    setShowSpecialists(false);\n    \n    // Add a system message about the switch\n    if (currentConversationId) {\n      const switchMessage = {\n        role: 'assistant' as const,\n        content: `I'm now connecting you with ${specialist.name}, our ${specialist.name.toLowerCase()}. They specialize in ${specialist.specialties?.join(', ')}.`,\n        metadata: { \n          agent_id: specialist.id,\n          agent_switch: true\n        }\n      };\n      chatHistory.addMessage(currentConversationId, switchMessage);\n    }\n  };\n\n  const handleBackToDepartmentHead = () => {\n    setActiveAgent(agent);\n    \n    // Add a system message about switching back\n    if (currentConversationId) {\n      const switchMessage = {\n        role: 'assistant' as const,\n        content: `You're back with ${agent.name}. I can help with general ${agent.department} questions or connect you with other specialists as needed.`,\n        metadata: { \n          agent_id: agent.id,\n          agent_switch: true\n        }\n      };\n      chatHistory.addMessage(currentConversationId, switchMessage);\n    }\n  };\n\n  // Auto-scroll to bottom when messages change\n  useEffect(() => {\n    if (transcriptRef.current) {\n      transcriptRef.current.scrollTop = transcriptRef.current.scrollHeight;\n    }\n  }, [messages]);\n\n  const getDepartmentColor = (dept: string): string => {\n    const colors: Record<string, string> = {\n      sales: 'bg-success',\n      marketing: 'bg-secondary',\n      finance: 'bg-primary',\n      operations: 'bg-warning'\n    };\n    return colors[dept] || 'bg-muted';\n  };\n\n  return (\n    <div className=\"flex flex-col h-full bg-background\">\n      {/* Header */}\n      <div className=\"border-b border-border bg-background\">\n        {/* Main Header */}\n        <div className=\"flex items-center gap-4 p-4\">\n          {onBack && (\n            <button\n              onClick={onBack}\n                              className=\"p-4 rounded-lg hover:bg-muted transition-colors\"\n              aria-label=\"Back to department selection\"\n            >\n              <ArrowLeft className=\"w-4 h-4\" />\n            </button>\n          )}\n          <div className={`w-10 h-10 rounded-lg ${getDepartmentColor(agent.department || '')} flex items-center justify-center`}>\n            <span className=\"text-xl\">{activeAgent.avatar}</span>\n          </div>\n          <div className=\"flex-1\">\n            <h3 className=\"font-semibold text-foreground\">{activeAgent.name}</h3>\n            <p className=\"text-xs text-muted-foreground capitalize\">\n              {activeAgent.type === 'specialist' ? `${agent.department} Specialist` : `${agent.department} Department`}\n            </p>\n          </div>\n          <div className=\"flex items-center gap-1 text-xs text-muted-foreground\">\n            <Users className=\"w-3 h-3\" />\n            <span>{activeAgent.type}</span>\n          </div>\n        </div>\n\n        {/* Specialists Toggle */}\n        {specialists.length > 0 && (\n          <div className=\"px-4 pb-3\">\n            <button\n              onClick={() => setShowSpecialists(!showSpecialists)}\n              className=\"flex items-center gap-2 text-sm text-muted-foreground hover:text-foreground transition-colors\"\n            >\n              <span>{specialists.length} specialists available</span>\n              {showSpecialists ? (\n                <ChevronUp className=\"w-4 h-4\" />\n              ) : (\n                <ChevronDown className=\"w-4 h-4\" />\n              )}\n            </button>\n            \n            {/* Specialists List */}\n            {showSpecialists && (\n              <div className=\"mt-2 space-y-1\">\n                {activeAgent.id !== agent.id && (\n                  <button\n                    onClick={handleBackToDepartmentHead}\n                    className=\"w-full flex items-center gap-2 p-4 text-left text-sm bg-muted/50 hover:bg-muted rounded-lg transition-colors\"\n                  >\n                    <span className=\"text-base\">{agent.avatar}</span>\n                    <span className=\"font-medium\">{agent.name}</span>\n                    <span className=\"text-xs text-muted-foreground ml-auto\">Department Head</span>\n                  </button>\n                )}\n                {specialists.map((specialist) => (\n                  <button\n                    key={specialist.id}\n                    onClick={() => handleSpecialistSwitch(specialist)}\n                    className={`w-full flex items-center gap-2 p-4 text-left text-sm rounded-lg transition-colors ${\n                      activeAgent.id === specialist.id\n                        ? 'bg-primary/10 border border-primary/20'\n                        : 'bg-muted/50 hover:bg-muted'\n                    }`}\n                  >\n                    <span className=\"text-base\">{specialist.avatar}</span>\n                    <div className=\"flex-1\">\n                      <div className=\"font-medium\">{specialist.name}</div>\n                      <div className=\"text-xs text-muted-foreground\">\n                        {specialist.specialties?.slice(0, 2).join(', ')}\n                      </div>\n                    </div>\n                  </button>\n                ))}\n              </div>\n            )}\n          </div>\n        )}\n      </div>\n\n      {/* Messages */}\n      <div \n        className=\"flex-1 overflow-y-auto px-6 py-4\"\n        ref={transcriptRef}\n        tabIndex={0}\n      >\n        {messages.length === 0 ? (\n          <div className=\"h-full flex flex-col items-center justify-center text-center max-w-md mx-auto\">\n            <div className={`w-20 h-20 rounded-full ${getDepartmentColor(agent.department || '')} bg-opacity-10 flex items-center justify-center mb-6`}>\n              <span className=\"text-3xl\">{activeAgent.avatar}</span>\n            </div>\n            <h3 className=\"text-xl font-semibold text-foreground mb-2\">\n              {activeAgent.name}\n            </h3>\n            <p className=\"text-muted-foreground text-sm mb-6\">\n              {activeAgent.description}\n            </p>\n            \n            {/* Quick Actions */}\n            <div className=\"w-full space-y-2\">\n              <p className=\"text-sm font-medium text-foreground\">Quick Actions:</p>\n              {quickActions.map((action, index) => (\n                <button\n                  key={index}\n                  onClick={() => handleSend(action)}\n                  className=\"w-full p-4 text-left text-sm bg-muted hover:bg-muted/80 rounded-lg transition-colors border border-border hover:border-border/80\"\n                >\n                  {action}\n                </button>\n              ))}\n            </div>\n\n            {/* Specialists Preview */}\n            {specialists.length > 0 && (\n              <div className=\"w-full mt-6 p-4 bg-muted/30 rounded-lg\">\n                <p className=\"text-sm font-medium text-foreground mb-2\">Available Specialists:</p>\n                <div className=\"flex flex-wrap gap-2\">\n                  {specialists.map((specialist) => (\n                    <span\n                      key={specialist.id}\n                      className=\"px-4 py-4 bg-background text-muted-foreground text-xs rounded-full\"\n                    >\n                      {specialist.avatar} {specialist.name}\n                    </span>\n                  ))}\n                </div>\n              </div>\n            )}\n          </div>\n        ) : (\n          <div className=\"max-w-3xl mx-auto space-y-6\">\n            {messages.map((msg, idx) => {\n              if (msg.role === 'system') return null;\n              \n              const isUser = msg.role === 'user';\n              const isAgentSwitch = msg.metadata?.agent_switch;\n              \n              if (isAgentSwitch) {\n                return (\n                  <div key={idx} className=\"text-center text-xs text-muted-foreground py-4 bg-muted/20 rounded-lg\">\n                    {msg.content}\n                  </div>\n                );\n              }\n              \n              return (\n                <div key={idx} className=\"space-y-2\">\n                  <div className={`flex items-start gap-4 ${isUser ? 'flex-row-reverse' : 'flex-row'}`}>\n                    <div className={`w-7 h-7 rounded-full flex-shrink-0 flex items-center justify-center ${\n                      isUser \n                        ? 'bg-primary' \n                        : getDepartmentColor(agent.department || '')\n                    }`}>\n                      {isUser ? (\n                        <svg className=\"w-4 h-4 text-primary-foreground\" fill=\"none\" viewBox=\"0 0 24 24\" stroke=\"currentColor\">\n                          <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M16 7a4 4 0 11-8 0 4 4 0 018 0zM12 14a7 7 0 00-7 7h14a7 7 0 00-7-7z\" />\n                        </svg>\n                      ) : (\n                        <span className=\"text-sm text-primary-foreground\">{activeAgent.avatar}</span>\n                      )}\n                    </div>\n                    <div className={`flex-1 ${isUser ? 'text-right' : 'text-left'}`}>\n                      <div className={`inline-block max-w-full ${\n                        isUser \n                          ? 'bg-primary text-primary-foreground' \n                          : 'bg-muted text-foreground'\n                      } rounded-2xl px-4 py-4 break-words`}>\n                        <p className=\"text-sm leading-relaxed whitespace-pre-wrap\">{msg.content}</p>\n                      </div>\n                    </div>\n                  </div>\n                </div>\n              );\n            })}\n            \n            {loading && (\n              <div className=\"flex items-start gap-4\">\n                <div className={`w-7 h-7 rounded-full ${getDepartmentColor(agent.department || '')} flex-shrink-0 flex items-center justify-center`}>\n                  <span className=\"text-sm text-primary-foreground\">{activeAgent.avatar}</span>\n                </div>\n                <div className=\"flex-1\">\n                  <div className=\"inline-block bg-muted rounded-2xl px-4 py-4\">\n                    <div className=\"flex items-center gap-1\">\n                      <div className=\"w-2 h-2 bg-muted-foreground/50 rounded-full animate-bounce\" style={{ animationDelay: '0ms' }} />\n                      <div className=\"w-2 h-2 bg-muted-foreground/50 rounded-full animate-bounce\" style={{ animationDelay: '150ms' }} />\n                      <div className=\"w-2 h-2 bg-muted-foreground/50 rounded-full animate-bounce\" style={{ animationDelay: '300ms' }} />\n                    </div>\n                  </div>\n                </div>\n              </div>\n            )}\n          </div>\n        )}\n      </div>\n\n      {/* Input */}\n      <div className=\"border-t border-border p-4 bg-background\">\n        <div className=\"max-w-3xl mx-auto\">\n          <div className=\"flex items-end gap-4 bg-muted rounded-xl p-4 border border-border focus-within:border-primary focus-within:ring-1 focus-within:ring-blue-500 transition-all\">\n            <div className=\"flex-1\">\n              <textarea\n                value={input}\n                onChange={(e) => setInput(e.target.value)}\n                onKeyDown={(e) => {\n                  if (e.key === 'Enter' && !e.shiftKey) {\n                    e.preventDefault();\n                    handleSend();\n                  }\n                }}\n                placeholder={`Ask ${activeAgent.name} anything...`}\n                className=\"w-full bg-transparent resize-none border-none outline-none text-foreground placeholder-muted-foreground text-sm leading-relaxed min-h-[24px] max-h-32\"\n                rows={1}\n                onInput={(e) => {\n                  const target = e.target as HTMLTextAreaElement;\n                  target.style.height = 'auto';\n                  target.style.height = Math.min(target.scrollHeight, 128) + 'px';\n                }}\n              />\n            </div>\n            <button\n              onClick={() => handleSend()}\n              disabled={!input.trim() || loading}\n                              className={`p-4 rounded-lg transition-colors ${\n                input.trim() && !loading\n                  ? `${getDepartmentColor(agent.department || '')} hover:opacity-90 text-primary-foreground`\n                  : 'bg-muted-foreground/20 text-muted-foreground cursor-not-allowed'\n              }`}\n            >\n              <Send className=\"w-4 h-4\" />\n            </button>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nDepartmentalAgent.propTypes = {\n  agent: PropTypes.object.isRequired,\n  onClose: PropTypes.func,\n  onBack: PropTypes.func,\n};\n\nexport default DepartmentalAgent; ","usedDeprecatedRules":[]},{"filePath":"/home/vonj/Github/Nexus/src/components/ai/EABusinessObservationCard.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/vonj/Github/Nexus/src/components/ai/ExecutiveAssistant.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'MicOff' is defined but never used.","line":4,"column":49,"nodeType":null,"messageId":"unusedVar","endLine":4,"endColumn":55},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'Zap' is defined but never used.","line":4,"column":68,"nodeType":null,"messageId":"unusedVar","endLine":4,"endColumn":71},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'supabase' is defined but never used.","line":6,"column":23,"nodeType":null,"messageId":"unusedVar","endLine":6,"endColumn":31},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'SupabaseChatMessage' is defined but never used.","line":6,"column":53,"nodeType":null,"messageId":"unusedVar","endLine":6,"endColumn":72},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'agentRegistry' is defined but never used.","line":9,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":9,"endColumn":23},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'Message' is defined but never used.","line":18,"column":11,"nodeType":null,"messageId":"unusedVar","endLine":18,"endColumn":18},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'agents' is assigned a value but never used.","line":30,"column":7,"nodeType":null,"messageId":"unusedVar","endLine":30,"endColumn":13},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'onClose' is defined but never used.","line":39,"column":73,"nodeType":null,"messageId":"unusedVar","endLine":39,"endColumn":80},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'navigate' is assigned a value but never used.","line":43,"column":9,"nodeType":null,"messageId":"unusedVar","endLine":43,"endColumn":17},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'retryCount' is assigned a value but never used.","line":45,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":45,"endColumn":20},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'setRetryCount' is assigned a value but never used.","line":45,"column":22,"nodeType":null,"messageId":"unusedVar","endLine":45,"endColumn":35},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'setSelectedAgent' is assigned a value but never used.","line":46,"column":25,"nodeType":null,"messageId":"unusedVar","endLine":46,"endColumn":41},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'MAX_RETRIES' is assigned a value but never used.","line":50,"column":9,"nodeType":null,"messageId":"unusedVar","endLine":50,"endColumn":20},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'messagesLoading' is assigned a value but never used.","line":58,"column":14,"nodeType":null,"messageId":"unusedVar","endLine":58,"endColumn":29},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'messagesError' is assigned a value but never used.","line":59,"column":12,"nodeType":null,"messageId":"unusedVar","endLine":59,"endColumn":25},{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has a missing dependency: 'location.pathname'. Either include it or remove the dependency array.","line":114,"column":6,"nodeType":"ArrayExpression","endLine":114,"endColumn":27,"suggestions":[{"desc":"Update the dependencies array to be: [location.pathname, selectedAgent, user]","fix":{"range":[4253,4274],"text":"[location.pathname, selectedAgent, user]"}}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":16,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState, useRef, useEffect, type JSX } from 'react';\nimport PropTypes from 'prop-types';\nimport { useNavigate, useLocation } from 'react-router-dom';\nimport { MessageSquare, ChevronDown, Send, Mic, MicOff, Paperclip, Zap } from 'lucide-react';\nimport { Spinner } from '../ui/Spinner';\nimport { chatHistory, supabase, type ChatMessage as SupabaseChatMessage } from '../../lib/core/supabase';\nimport { useRealtimeChat } from '@/lib/hooks/useRealtimeChat';\nimport { useAuth } from '@/contexts/AuthContext';\nimport { agentRegistry } from '@/lib/ai/agentRegistry';\n\n/**\n * ExecutiveAssistant\n *\n * Clean, Microsoft Copilot-inspired AI assistant with minimal interface design\n * @component\n */\n\ninterface Message {\n  role: 'user' | 'assistant' | 'system';\n  content: string;\n}\n\ninterface ExecutiveAssistantProps {\n  onClose: () => void;\n  sessionId?: string;\n}\n\nconst SYSTEM_PROMPT = `You are Nexus, an intelligent AI assistant for a Microsoft 365-like productivity platform. You help users navigate their workspace, manage tasks, analyze data, and boost productivity. Be helpful, concise, and professional. When users ask about specific pages or features, provide guidance on how to use them effectively.`;\n\nconst agents = [\n  {\n    id: 'nexus',\n    name: 'Nexus Assistant',\n    description: 'Your intelligent productivity companion',\n    icon: '🤖'\n  }\n];\n\nexport const ExecutiveAssistant: React.FC<ExecutiveAssistantProps> = ({ onClose, sessionId = '' }): JSX.Element => {\n  const [input, setInput] = useState('');\n  const [loading, setLoading] = useState(false);\n  const [error, setError] = useState<string | null>(null);\n  const navigate = useNavigate();\n  const location = useLocation();\n  const [retryCount, setRetryCount] = useState(0);\n  const [selectedAgent, setSelectedAgent] = useState('nexus');\n  const [currentConversationId, setCurrentConversationId] = useState<string | null>(null);\n  const [showScrollButton, setShowScrollButton] = useState(false);\n  const { user } = useAuth();\n  const MAX_RETRIES = 3;\n\n  // Ref for the transcript container\n  const transcriptRef = useRef<HTMLDivElement>(null);\n\n  // Use realtime chat hook for messages\n  const { \n    messages, \n    loading: messagesLoading, \n    error: messagesError \n  } = useRealtimeChat(currentConversationId || '');\n\n  // Get current page name for context\n  const currentPageName = React.useMemo(() => {\n    const pathSegments = location.pathname.split('/').filter(Boolean);\n    if (pathSegments.length === 0) return 'Dashboard';\n    return pathSegments[pathSegments.length - 1]\n      .split('-')\n      .map(word => word.charAt(0).toUpperCase() + word.slice(1))\n      .join(' ');\n  }, [location.pathname]);\n\n  // Initialize conversation - use existing or create new\n  useEffect(() => {\n    const initConversation = async () => {\n      if (!user) return;\n\n      try {\n        // First, try to get the most recent conversation\n        const recentConversations = await chatHistory.getRecentConversations(1);\n        \n        if (recentConversations && recentConversations.length > 0) {\n          // Use the most recent conversation\n          const existingConversation = recentConversations[0];\n          setCurrentConversationId(existingConversation.id);\n          console.log('Using existing conversation:', existingConversation.id);\n        } else {\n          // Create a new conversation only if none exists\n          const conversation = await chatHistory.createConversation(\n            'New Conversation',\n            selectedAgent,\n            { \n              page: location.pathname,\n              user_id: user.id \n            }\n          );\n          setCurrentConversationId(conversation.id);\n          \n          // Add system message\n          const systemMessage = {\n            role: 'system' as const,\n            content: SYSTEM_PROMPT,\n            metadata: { agent_id: selectedAgent }\n          };\n          await chatHistory.addMessage(conversation.id, systemMessage);\n          console.log('Created new conversation:', conversation.id);\n        }\n      } catch (err) {\n        console.error('Failed to initialize conversation:', err);\n        setError('Failed to initialize chat. Please try again.');\n      }\n    };\n\n    initConversation();\n  }, [selectedAgent, user]);\n\n  const handleSend = async (message?: string) => {\n    const textToSend = message || input.trim();\n    if (!textToSend || loading || !currentConversationId || !user || !sessionId) return;\n\n    setLoading(true);\n    setError(null);\n    \n    if (!message) {\n      setInput('');\n    }\n\n    try {\n      await chatHistory.addMessage(currentConversationId, {\n        role: 'user',\n        content: textToSend,\n        metadata: { \n          agent_id: selectedAgent,\n          context: `Current page: ${currentPageName}`,\n          session_id: sessionId\n        }\n      });\n\n      // Simple fallback response\n      setTimeout(async () => {\n        await chatHistory.addMessage(currentConversationId, {\n          role: 'assistant',\n          content: `I understand you asked: \"${textToSend}\". I'm here to help you with your tasks and productivity needs. How can I assist you further?`,\n          metadata: { agent_id: selectedAgent }\n        });\n        setLoading(false);\n      }, 1000);\n    } catch (fallbackErr) {\n      console.error('Fallback also failed:', fallbackErr);\n      setError('Failed to send message. Please try again.');\n      setLoading(false);\n    }\n  };\n\n  // Auto-scroll to bottom when messages change or conversation loads\n  useEffect(() => {\n    if (transcriptRef.current && messages.length > 0) {\n      // Force scroll to bottom with slight delay\n      const scrollToBottom = () => {\n        if (transcriptRef.current) {\n          transcriptRef.current.scrollTo({\n            top: transcriptRef.current.scrollHeight,\n            behavior: 'smooth'\n          });\n        }\n      };\n      \n      // Immediate scroll\n      scrollToBottom();\n      \n      // Also scroll after a short delay to ensure DOM is fully updated\n      setTimeout(scrollToBottom, 50);\n      setTimeout(scrollToBottom, 200);\n    }\n  }, [messages, currentConversationId]);\n\n  // Monitor scroll position to show/hide scroll button\n  useEffect(() => {\n    const handleScroll = () => {\n      if (transcriptRef.current) {\n        const { scrollTop, scrollHeight, clientHeight } = transcriptRef.current;\n        const isNearBottom = scrollHeight - scrollTop - clientHeight < 100;\n        setShowScrollButton(!isNearBottom && messages.length > 3);\n      }\n    };\n\n    const scrollContainer = transcriptRef.current;\n    if (scrollContainer) {\n      scrollContainer.addEventListener('scroll', handleScroll);\n      return () => scrollContainer.removeEventListener('scroll', handleScroll);\n    }\n  }, [messages.length]);\n\n  const scrollToBottom = () => {\n    if (transcriptRef.current) {\n      transcriptRef.current.scrollTo({\n        top: transcriptRef.current.scrollHeight,\n        behavior: 'smooth'\n      });\n    }\n  };\n\n  // Simple scroll event handler without preventDefault (which causes passive event errors)\n  const handleScrollEvent = (e: React.UIEvent) => {\n    // Just stop propagation, no preventDefault needed\n    e.stopPropagation();\n  };\n\n  return (\n    <div className=\"flex flex-col h-full bg-background relative overflow-hidden\">\n      {/* Clean Messages Container - Copilot Style */}\n      <div\n        className=\"flex-1 overflow-y-auto px-6 py-4\"\n        ref={transcriptRef}\n        tabIndex={0}\n        onScroll={handleScrollEvent}\n        style={{ overscrollBehavior: 'contain' }}\n      >\n        {messages.length === 0 ? (\n          <div className=\"h-full flex flex-col items-center justify-center text-center max-w-md mx-auto\">\n            <div className=\"w-20 h-20 rounded-full bg-primary/10 flex items-center justify-center mb-6\">\n              <MessageSquare className=\"w-10 h-10 text-primary dark:text-primary\" />\n            </div>\n            <h3 className=\"text-2xl font-semibold text-foreground mb-3\">\n              Welcome to Nexus\n            </h3>\n            <p className=\"text-muted-foreground text-lg mb-6\">\n              Your AI-powered productivity assistant\n            </p>\n            <div className=\"space-y-4 w-full\">\n              <p className=\"text-sm text-muted-foreground mb-4\">Try asking me about:</p>\n              <div className=\"grid gap-2\">\n                <button\n                  onClick={() => handleSend('What can you help me with?')}\n                  className=\"text-left p-4 bg-muted hover:bg-muted/80 rounded-lg text-sm text-muted-foreground hover:text-foreground transition-colors\"\n                >\n                  💡 What can you help me with?\n                </button>\n                <button\n                  onClick={() => handleSend('Show me my schedule for today')}\n                  className=\"text-left p-4 bg-muted hover:bg-muted/80 rounded-lg text-sm text-muted-foreground hover:text-foreground transition-colors\"\n                >\n                  📅 Show me my schedule for today\n                </button>\n                <button\n                  onClick={() => handleSend('Help me organize my tasks')}\n                  className=\"text-left p-4 bg-muted hover:bg-muted/80 rounded-lg text-sm text-muted-foreground hover:text-foreground transition-colors\"\n                >\n                  ✅ Help me organize my tasks\n                </button>\n              </div>\n            </div>\n          </div>\n        ) : (\n          <div className=\"space-y-6\">\n            {messages.map((msg, index) => (\n              <div\n                key={`${currentConversationId}-${index}`}\n                className={`flex items-start gap-4 ${msg.role === 'user' ? 'justify-end' : ''}`}\n              >\n                {msg.role === 'assistant' && (\n                  <div className=\"w-8 h-8 rounded-full bg-primary/20 flex items-center justify-center text-primary text-sm font-semibold\">\n                    N\n                  </div>\n                )}\n                <div\n                  className={`max-w-xl p-4 rounded-xl ${\n                    msg.role === 'user'\n                      ? 'bg-primary text-primary-foreground'\n                      : 'bg-muted text-foreground'\n                  }`}\n                >\n                  <p className=\"text-sm whitespace-pre-wrap\">{msg.content}</p>\n                </div>\n              </div>\n            ))}\n          </div>\n        )}\n      </div>\n\n      {/* Scroll to bottom button */}\n      {showScrollButton && (\n        <button\n          onClick={scrollToBottom}\n          className=\"absolute bottom-24 right-6 w-10 h-10 bg-background/80 backdrop-blur-sm rounded-full flex items-center justify-center border transition-opacity\"\n        >\n          <ChevronDown className=\"w-5 h-5 text-muted-foreground\" />\n        </button>\n      )}\n\n      {/* Clean Input Area */}\n      <div className=\"border-t p-4\">\n        {error && (\n          <div className=\"bg-destructive/10 text-destructive text-sm p-3 rounded-md mb-3\">\n            {error}\n          </div>\n        )}\n        <div className=\"relative\">\n          <textarea\n            value={input}\n            onChange={(e) => setInput(e.target.value)}\n            onKeyDown={(e) => {\n              if (e.key === 'Enter' && !e.shiftKey) {\n                e.preventDefault();\n                handleSend();\n              }\n            }}\n            placeholder=\"Ask Nexus anything...\"\n            className=\"w-full bg-muted border-transparent rounded-lg py-3 pl-4 pr-28 resize-none focus:ring-2 focus:ring-primary focus:border-transparent transition-shadow\"\n            rows={1}\n            disabled={loading}\n          />\n          <div className=\"absolute right-2 top-1/2 -translate-y-1/2 flex items-center space-x-1\">\n            <button className=\"p-2 text-muted-foreground hover:text-foreground\">\n              <Paperclip className=\"w-5 h-5\" />\n            </button>\n            <button className=\"p-2 text-muted-foreground hover:text-foreground\">\n              <Mic className=\"w-5 h-5\" />\n            </button>\n            <button\n              onClick={() => handleSend()}\n              disabled={loading || !input.trim()}\n              className=\"p-2 rounded-full bg-primary text-primary-foreground disabled:bg-primary/50\"\n            >\n              {loading ? (\n                <Spinner className=\"w-5 h-5\" />\n              ) : (\n                <Send className=\"w-5 h-5\" />\n              )}\n            </button>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nExecutiveAssistant.propTypes = {\n  onClose: PropTypes.func.isRequired,\n  sessionId: PropTypes.string,\n};\n\nexport default ExecutiveAssistant; ","usedDeprecatedRules":[]},{"filePath":"/home/vonj/Github/Nexus/src/components/ai/InteractivePrompts.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'Image' is defined but never used.","line":16,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":16,"endColumn":8},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'Video' is defined but never used.","line":17,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":17,"endColumn":8},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'X' is defined but never used.","line":18,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":18,"endColumn":4},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'Loader2' is defined but never used.","line":19,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":19,"endColumn":10},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'CheckCircle' is defined but never used.","line":20,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":20,"endColumn":14},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'ThoughtCategory' is defined but never used.","line":29,"column":34,"nodeType":null,"messageId":"unusedVar","endLine":29,"endColumn":49},{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useCallback has a missing dependency: 'processVoiceInput'. Either include it or remove the dependency array.","line":116,"column":6,"nodeType":"ArrayExpression","endLine":116,"endColumn":8,"suggestions":[{"desc":"Update the dependencies array to be: [processVoiceInput]","fix":{"range":[3328,3330],"text":"[processVoiceInput]"}}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'audioBlob' is defined but never used.","line":125,"column":36,"nodeType":null,"messageId":"unusedVar","endLine":125,"endColumn":45},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'content' is defined but never used.","line":183,"column":38,"nodeType":null,"messageId":"unusedVar","endLine":183,"endColumn":45}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\n * @file InteractivePrompts.tsx\n * @description Interactive prompts component for Nexus Idea Management\n * Based on Marcoby Nexus: Interactive prompts diagram\n * Handles Text, Speech, Copy/Paste, Upload interactions\n */\n\nimport React, { useState, useRef, useCallback } from 'react';\nimport { \n  Mic, \n  Upload, \n  MessageCircle, \n  Copy, \n  Send, \n  FileText, \n  Image, \n  Video,\n  X,\n  Loader2,\n  CheckCircle\n} from 'lucide-react';\nimport { Card, CardContent, CardHeader, CardTitle } from '../ui/Card';\nimport { Button } from '../ui/Button';\nimport { Textarea } from '../ui/Textarea';\nimport { Badge } from '../ui/Badge';\nimport { Spinner } from '../ui/Spinner';\nimport { Alert } from '../ui/Alert';\nimport { thoughtsService } from '../../lib/services/thoughtsService';\nimport type { InteractionMethod, ThoughtCategory } from '../../lib/types/thoughts';\n\ninterface InteractivePromptsProps {\n  onThoughtCreated?: (thoughtId: string) => void;\n  className?: string;\n}\n\ninterface InputState {\n  content: string;\n  method: InteractionMethod;\n  isProcessing: boolean;\n  file?: File;\n}\n\nconst INTERACTION_METHODS = [\n  {\n    id: 'text' as InteractionMethod,\n    icon: MessageCircle,\n    label: 'Text Input',\n    description: 'Type your thoughts directly',\n    placeholder: 'Share your idea, task, or reminder...'\n  },\n  {\n    id: 'speech' as InteractionMethod,\n    icon: Mic,\n    label: 'Voice Input',\n    description: 'Speak your thoughts aloud',\n    placeholder: 'Click to start recording...'\n  },\n  {\n    id: 'copy_paste' as InteractionMethod,\n    icon: Copy,\n    label: 'Copy & Paste',\n    description: 'Paste content from clipboard',\n    placeholder: 'Paste your content here...'\n  },\n  {\n    id: 'upload' as InteractionMethod,\n    icon: Upload,\n    label: 'File Upload',\n    description: 'Upload documents or media',\n    placeholder: 'Upload files to extract ideas...'\n  }\n];\n\nexport const InteractivePrompts: React.FC<InteractivePromptsProps> = ({\n  onThoughtCreated,\n  className = ''\n}) => {\n  const [activeMethod, setActiveMethod] = useState<InteractionMethod>('text');\n  const [inputState, setInputState] = useState<InputState>({\n    content: '',\n    method: 'text',\n    isProcessing: false\n  });\n  const [isRecording, setIsRecording] = useState(false);\n  const [suggestions, setSuggestions] = useState<string[]>([]);\n  const [error, setError] = useState<string | null>(null);\n  \n  const fileInputRef = useRef<HTMLInputElement>(null);\n  const mediaRecorderRef = useRef<MediaRecorder | null>(null);\n\n  // ====== Voice Recording ======\n  \n  const startRecording = useCallback(async () => {\n    try {\n      const stream = await navigator.mediaDevices.getUserMedia({ audio: true });\n      const mediaRecorder = new MediaRecorder(stream);\n      mediaRecorderRef.current = mediaRecorder;\n      \n      const audioChunks: Blob[] = [];\n      \n      mediaRecorder.ondataavailable = (event) => {\n        audioChunks.push(event.data);\n      };\n      \n      mediaRecorder.onstop = async () => {\n        const audioBlob = new Blob(audioChunks, { type: 'audio/wav' });\n        await processVoiceInput(audioBlob);\n        stream.getTracks().forEach(track => track.stop());\n      };\n      \n      mediaRecorder.start();\n      setIsRecording(true);\n    } catch (error) {\n      console.error('Error starting recording:', error);\n    }\n  }, []);\n\n  const stopRecording = useCallback(() => {\n    if (mediaRecorderRef.current && isRecording) {\n      mediaRecorderRef.current.stop();\n      setIsRecording(false);\n    }\n  }, [isRecording]);\n\n  const processVoiceInput = async (audioBlob: Blob) => {\n    setInputState(prev => ({ ...prev, isProcessing: true }));\n    \n    try {\n      // Mock voice-to-text processing (replace with real Speech-to-Text API)\n      const mockTranscription = \"This is a transcribed voice input about implementing a new feature\";\n      \n      setInputState(prev => ({\n        ...prev,\n        content: mockTranscription,\n        method: 'speech',\n        isProcessing: false\n      }));\n      \n      // Auto-suggest categories based on voice content\n      await generateSuggestions(mockTranscription);\n    } catch (error) {\n      console.error('Error processing voice input:', error);\n      setInputState(prev => ({ ...prev, isProcessing: false }));\n    }\n  };\n\n  // ====== File Upload ======\n  \n  const handleFileUpload = useCallback(async (file: File) => {\n    setInputState(prev => ({ ...prev, isProcessing: true, file }));\n    \n    try {\n      let extractedContent = '';\n      \n      if (file.type.startsWith('text/')) {\n        extractedContent = await file.text();\n      } else if (file.type.startsWith('image/')) {\n        // Mock OCR processing (replace with real OCR API)\n        extractedContent = `Image uploaded: ${file.name}. Contains text about business processes and workflows.`;\n      } else if (file.type.includes('pdf')) {\n        // Mock PDF text extraction (replace with real PDF parser)\n        extractedContent = `PDF document: ${file.name}. Contains strategic planning information and project details.`;\n      } else {\n        extractedContent = `File uploaded: ${file.name}. Ready for processing.`;\n      }\n      \n      setInputState(prev => ({\n        ...prev,\n        content: extractedContent,\n        method: 'upload',\n        isProcessing: false\n      }));\n      \n      await generateSuggestions(extractedContent);\n    } catch (error) {\n      console.error('Error processing file:', error);\n      setInputState(prev => ({ ...prev, isProcessing: false }));\n    }\n  }, []);\n\n  // ====== Content Processing ======\n  \n  const generateSuggestions = async (content: string) => {\n    // Mock AI-powered suggestions (replace with real AI API)\n    const mockSuggestions = [\n      'Break this into actionable tasks',\n      'Set a timeline for implementation',\n      'Identify key stakeholders',\n      'Create milestone checkpoints'\n    ];\n    setSuggestions(mockSuggestions);\n  };\n\n  const handlePasteContent = useCallback(async () => {\n    try {\n      const clipboardText = await navigator.clipboard.readText();\n      setInputState(prev => ({\n        ...prev,\n        content: clipboardText,\n        method: 'copy_paste'\n      }));\n      await generateSuggestions(clipboardText);\n    } catch (error) {\n      console.error('Error reading clipboard:', error);\n    }\n  }, []);\n\n  // ====== Thought Creation ======\n  \n  const submitThought = async () => {\n    if (!inputState.content.trim()) return;\n    \n    setInputState(prev => ({ ...prev, isProcessing: true }));\n    setError(null);\n    \n    try {\n      const thought = await thoughtsService.createThought({\n        content: inputState.content,\n        interaction_method: inputState.method,\n        status: 'not_started'\n      });\n      \n      // Reset form\n      setInputState({\n        content: '',\n        method: activeMethod,\n        isProcessing: false\n      });\n      setSuggestions([]);\n      \n      onThoughtCreated?.(thought.id);\n    } catch (error) {\n      console.error('Error creating thought:', error);\n      setError('Failed to create thought. Please try again.');\n      setInputState(prev => ({ ...prev, isProcessing: false }));\n    }\n  };\n\n  // ====== Render ======\n  \n  const renderMethodButtons = () => (\n    <div className=\"grid grid-cols-2 lg:grid-cols-4 gap-4 mb-6\">\n      {INTERACTION_METHODS.map((method) => {\n        const Icon = method.icon;\n        const isActive = activeMethod === method.id;\n        \n        return (\n          <Button\n            key={method.id}\n            variant={isActive ? \"default\" : \"outline\"}\n            className={`h-auto p-4 flex flex-col gap-2 transition-all ${\n              isActive ? 'ring-2 ring-blue-500' : ''\n            }`}\n            onClick={() => {\n              setActiveMethod(method.id);\n              setInputState(prev => ({ ...prev, method: method.id }));\n              \n              // Special handling for different methods\n              if (method.id === 'copy_paste') {\n                handlePasteContent();\n              } else if (method.id === 'upload') {\n                fileInputRef.current?.click();\n              }\n            }}\n          >\n            <Icon className=\"h-5 w-5\" />\n            <div className=\"text-center\">\n              <div className=\"font-medium text-sm\">{method.label}</div>\n              <div className=\"text-xs text-muted-foreground\">{method.description}</div>\n            </div>\n          </Button>\n        );\n      })}\n    </div>\n  );\n\n  const renderActiveInput = () => {\n    const activeMethodConfig = INTERACTION_METHODS.find(m => m.id === activeMethod);\n    \n    if (activeMethod === 'speech') {\n      return (\n        <div className=\"space-y-4\">\n          <div className=\"flex items-center justify-center p-8 border-2 border-dashed border-border rounded-lg\">\n            {isRecording ? (\n              <div className=\"text-center\">\n                <div className=\"h-16 w-16 bg-destructive rounded-full flex items-center justify-center animate-pulse mx-auto mb-4\">\n                  <Mic className=\"h-8 w-8 text-primary-foreground\" />\n                </div>\n                <p className=\"text-sm text-muted-foreground mb-4\">Recording in progress...</p>\n                <Button onClick={stopRecording} variant=\"outline\">\n                  Stop Recording\n                </Button>\n              </div>\n            ) : (\n              <div className=\"text-center\">\n                <Mic className=\"h-12 w-12 text-muted-foreground mb-4 mx-auto\" />\n                <p className=\"text-sm text-muted-foreground mb-4\">Click to start voice recording</p>\n                <Button onClick={startRecording}>\n                  Start Recording\n                </Button>\n              </div>\n            )}\n          </div>\n          \n          {inputState.content && (\n            <div className=\"p-4 bg-background rounded-lg\">\n              <p className=\"text-sm font-medium mb-2\">Transcribed:</p>\n              <p className=\"text-sm\">{inputState.content}</p>\n            </div>\n          )}\n        </div>\n      );\n    }\n\n    if (activeMethod === 'upload') {\n      return (\n        <div className=\"space-y-4\">\n          <input\n            ref={fileInputRef}\n            type=\"file\"\n            className=\"hidden\"\n            accept=\"*/*\"\n            onChange={(e) => {\n              const file = e.target.files?.[0];\n              if (file) handleFileUpload(file);\n            }}\n          />\n          \n          <div className=\"flex items-center justify-center p-8 border-2 border-dashed border-border rounded-lg\">\n            <div className=\"text-center\">\n              <Upload className=\"h-12 w-12 text-muted-foreground mb-4 mx-auto\" />\n              <p className=\"text-sm text-muted-foreground mb-4\">\n                Upload documents, images, or any files\n              </p>\n              <Button onClick={() => fileInputRef.current?.click()}>\n                Choose File\n              </Button>\n            </div>\n          </div>\n          \n          {inputState.file && (\n            <div className=\"p-4 bg-background rounded-lg\">\n              <div className=\"flex items-center gap-2 mb-2\">\n                <FileText className=\"h-4 w-4\" />\n                <span className=\"text-sm font-medium\">{inputState.file.name}</span>\n              </div>\n              {inputState.content && (\n                <p className=\"text-sm\">{inputState.content}</p>\n              )}\n            </div>\n          )}\n        </div>\n      );\n    }\n\n    // Text and Copy/Paste input\n    return (\n      <Textarea\n        value={inputState.content}\n        onChange={(e: React.ChangeEvent<HTMLTextAreaElement>) => setInputState(prev => ({ ...prev, content: e.target.value }))}\n        placeholder={activeMethodConfig?.placeholder}\n        className=\"min-h-[120px] resize-none\"\n        disabled={inputState.isProcessing}\n      />\n    );\n  };\n\n  return (\n    <Card className={`w-full ${className}`}>\n      <CardHeader>\n        <CardTitle className=\"flex items-center gap-2\">\n          <MessageCircle className=\"h-5 w-5\" />\n          Interactive Prompts\n        </CardTitle>\n        <p className=\"text-sm text-muted-foreground\">\n          Capture your thoughts through text, speech, copy/paste, or file upload\n        </p>\n      </CardHeader>\n      \n      <CardContent className=\"space-y-6\">\n        {renderMethodButtons()}\n        \n        <div className=\"space-y-4\">\n          {/* Error Alert */}\n          {error && (\n            <Alert variant=\"error\" className=\"mb-4\">\n              {error}\n            </Alert>\n          )}\n          \n          {renderActiveInput()}\n          \n          {/* AI Suggestions */}\n          {suggestions.length > 0 && (\n            <div className=\"space-y-2\">\n              <p className=\"text-sm font-medium\">AI Suggestions:</p>\n              <div className=\"flex flex-wrap gap-2\">\n                {suggestions.map((suggestion, index) => (\n                  <Badge\n                    key={index}\n                    variant=\"secondary\"\n                    className=\"cursor-pointer hover:bg-primary/10\"\n                    onClick={() => {\n                      setInputState(prev => ({\n                        ...prev,\n                        content: prev.content + (prev.content ? '\\n' : '') + suggestion\n                      }));\n                    }}\n                  >\n                    {suggestion}\n                  </Badge>\n                ))}\n              </div>\n            </div>\n          )}\n          \n          {/* Submit Button */}\n          <div className=\"flex justify-end\">\n            <Button\n              onClick={submitThought}\n              disabled={!inputState.content.trim() || inputState.isProcessing}\n              className=\"min-w-[120px]\"\n            >\n              {inputState.isProcessing ? (\n                <>\n                  <Spinner size={16} className=\"mr-2\" />\n                  Processing...\n                </>\n              ) : (\n                <>\n                  <Send className=\"h-4 w-4 mr-2\" />\n                  Submit\n                </>\n              )}\n            </Button>\n          </div>\n        </div>\n      </CardContent>\n    </Card>\n  );\n}; ","usedDeprecatedRules":[]},{"filePath":"/home/vonj/Github/Nexus/src/components/ai/N8nAssistantPanel.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'CheckCircle' is defined but never used.","line":7,"column":34,"nodeType":null,"messageId":"unusedVar","endLine":7,"endColumn":45},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'err' is defined but never used.","line":100,"column":14,"nodeType":null,"messageId":"unusedVar","endLine":100,"endColumn":17}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\n * N8nAssistantPanel.tsx\n * Enhanced AI Assistant Panel that connects to n8n workflows\n * Provides department-specific assistants and workflow automation\n */\nimport React, { useState, useRef, useEffect } from 'react';\nimport { Send, Bot, AlertCircle, CheckCircle, Settings, Workflow } from 'lucide-react';\nimport { Spinner } from '../ui/Spinner';\nimport { useDepartmentAssistant, useWorkflowBuilder } from '../../lib/useN8n';\nimport type { Department } from '../../lib/n8nService';\n\ninterface Message {\n  id: string;\n  content: string;\n  role: 'user' | 'assistant';\n  timestamp: Date;\n  department?: Department;\n  executionId?: string;\n}\n\ninterface N8nAssistantPanelProps {\n  department: Department;\n  onClose?: () => void;\n  className?: string;\n}\n\nexport const N8nAssistantPanel: React.FC<N8nAssistantPanelProps> = ({\n  department,\n  onClose,\n  className = ''\n}) => {\n  const [messages, setMessages] = useState<Message[]>([\n    {\n      id: '1',\n      content: `Hello! I'm your ${department} department assistant powered by n8n workflows. How can I help you today?`,\n      role: 'assistant',\n      timestamp: new Date(),\n      department\n    }\n  ]);\n  const [inputValue, setInputValue] = useState('');\n  const [showWorkflowBuilder, setShowWorkflowBuilder] = useState(false);\n  \n  const messagesEndRef = useRef<HTMLDivElement>(null);\n  \n  const {\n    askAssistant,\n    isLoading,\n    error,\n    isConnected,\n    clearError,\n    checkHealth\n  } = useDepartmentAssistant(department);\n  \n  const workflowBuilder = useWorkflowBuilder();\n\n  // Auto-scroll to bottom when new messages are added\n  useEffect(() => {\n    messagesEndRef.current?.scrollIntoView({ behavior: 'smooth' });\n  }, [messages]);\n\n  // Check n8n connection on mount\n  useEffect(() => {\n    checkHealth();\n  }, [checkHealth]);\n\n  const handleSendMessage = async () => {\n    if (!inputValue.trim() || isLoading) return;\n\n    const userMessage: Message = {\n      id: Date.now().toString(),\n      content: inputValue.trim(),\n      role: 'user',\n      timestamp: new Date(),\n      department\n    };\n\n    setMessages(prev => [...prev, userMessage]);\n    setInputValue('');\n\n    try {\n      const response = await askAssistant(inputValue.trim(), {\n        department,\n        userId: 'current-user', // Replace with actual user ID\n        previousMessages: messages.slice(-5) // Send last 5 messages for context\n      });\n\n      const assistantMessage: Message = {\n        id: (Date.now() + 1).toString(),\n        content: response.success \n          ? (response.data?.output || response.data || 'Task completed successfully!')\n          : (response.error || 'Sorry, I encountered an error.'),\n        role: 'assistant',\n        timestamp: new Date(),\n        department,\n        executionId: response.executionId\n      };\n\n      setMessages(prev => [...prev, assistantMessage]);\n    } catch (err) {\n      const errorMessage: Message = {\n        id: (Date.now() + 1).toString(),\n        content: 'Sorry, I\\'m having trouble connecting to the workflow service. Please try again.',\n        role: 'assistant',\n        timestamp: new Date(),\n        department\n      };\n      setMessages(prev => [...prev, errorMessage]);\n    }\n  };\n\n  const handleKeyPress = (e: React.KeyboardEvent) => {\n    if (e.key === 'Enter' && !e.shiftKey) {\n      e.preventDefault();\n      handleSendMessage();\n    }\n  };\n\n  const handleCreateWorkflow = async (requirements: string) => {\n    const response = await workflowBuilder.buildWorkflow(requirements);\n    \n    const workflowMessage: Message = {\n      id: Date.now().toString(),\n      content: response.success \n        ? `✅ Workflow creation initiated: ${requirements}`\n        : `❌ Failed to create workflow: ${response.error}`,\n      role: 'assistant',\n      timestamp: new Date(),\n      department\n    };\n    \n    setMessages(prev => [...prev, workflowMessage]);\n    setShowWorkflowBuilder(false);\n  };\n\n  const getDepartmentColor = (dept: Department) => {\n    const colors = {\n      sales: 'text-success dark:text-success',\n      finance: 'text-primary dark:text-primary',\n      operations: 'text-secondary dark:text-secondary',\n      marketing: 'text-pink-600 dark:text-pink-400',\n      general: 'text-muted-foreground dark:text-muted-foreground'\n    };\n    return colors[dept] || colors.general;\n  };\n\n  const getDepartmentBg = (dept: Department) => {\n    const colors = {\n      sales: 'bg-success/5',\n      finance: 'bg-primary/5',\n      operations: 'bg-secondary/5',\n      marketing: 'bg-accent/5',\n      general: 'bg-background'\n    };\n    return colors[dept] || colors.general;\n  };\n\n  return (\n    <div className={`flex flex-col h-full bg-card dark:bg-background ${className}`}>\n      {/* Header */}\n      <div className={`${getDepartmentBg(department)} px-4 py-4 border-b border-border dark:border-border`}>\n        <div className=\"flex items-center justify-between\">\n          <div className=\"flex items-center space-x-4\">\n            <Bot className={`h-6 w-6 ${getDepartmentColor(department)}`} />\n            <div>\n              <h3 className=\"font-semibold text-foreground dark:text-primary-foreground capitalize\">\n                {department} Assistant\n              </h3>\n              <div className=\"flex items-center space-x-2 text-sm text-muted-foreground dark:text-muted-foreground\">\n                <div className={`w-2 h-2 rounded-full ${isConnected ? 'bg-success' : 'bg-destructive'}`} />\n                <span>{isConnected ? 'Connected to n8n' : 'Disconnected'}</span>\n              </div>\n            </div>\n          </div>\n          <div className=\"flex items-center space-x-2\">\n            <button\n              onClick={() => setShowWorkflowBuilder(!showWorkflowBuilder)}\n              className=\"p-4 text-muted-foreground hover:text-muted-foreground dark:hover:text-muted-foreground/60 transition-colors\"\n              title=\"Workflow Builder\"\n            >\n              <Workflow className=\"h-5 w-5\" />\n            </button>\n            <button\n              onClick={checkHealth}\n              className=\"p-4 text-muted-foreground hover:text-muted-foreground dark:hover:text-muted-foreground/60 transition-colors\"\n              title=\"Check Connection\"\n            >\n              <Settings className=\"h-5 w-5\" />\n            </button>\n            {onClose && (\n              <button\n                onClick={onClose}\n                className=\"p-4 text-muted-foreground hover:text-muted-foreground dark:hover:text-muted-foreground/60 transition-colors\"\n              >\n                ×\n              </button>\n            )}\n          </div>\n        </div>\n      </div>\n\n      {/* Error Display */}\n      {error && (\n        <div className=\"px-4 py-4 bg-destructive/5 dark:bg-destructive/20 border-b border-destructive/20 dark:border-red-800\">\n          <div className=\"flex items-center justify-between\">\n            <div className=\"flex items-center space-x-2 text-destructive dark:text-destructive\">\n              <AlertCircle className=\"h-4 w-4\" />\n              <span className=\"text-sm\">{error}</span>\n            </div>\n            <button\n              onClick={clearError}\n              className=\"text-destructive hover:text-destructive dark:hover:text-destructive\"\n            >\n              ×\n            </button>\n          </div>\n        </div>\n      )}\n\n      {/* Workflow Builder */}\n      {showWorkflowBuilder && (\n        <div className=\"px-4 py-4 bg-primary/5 border-b border-border\">\n          <WorkflowBuilder \n            department={department}\n            onCreateWorkflow={handleCreateWorkflow}\n            isLoading={workflowBuilder.isLoading}\n            onClose={() => setShowWorkflowBuilder(false)}\n          />\n        </div>\n      )}\n\n      {/* Messages */}\n      <div className=\"flex-1 overflow-y-auto p-4 space-y-4\">\n        {messages.map((message) => (\n          <div\n            key={message.id}\n            className={`flex ${message.role === 'user' ? 'justify-end' : 'justify-start'}`}\n          >\n            <div\n              className={`max-w-[80%] rounded-lg px-4 py-4 ${\n                message.role === 'user'\n                  ? 'bg-primary text-primary-foreground'\n                  : `${getDepartmentBg(department)} text-foreground dark:text-primary-foreground`\n              }`}\n            >\n              <div className=\"whitespace-pre-wrap\">{message.content}</div>\n              <div className=\"text-xs mt-1 opacity-70\">\n                {message.timestamp.toLocaleTimeString()}\n                {message.executionId && (\n                  <span className=\"ml-2\">• Execution: {message.executionId.slice(-6)}</span>\n                )}\n              </div>\n            </div>\n          </div>\n        ))}\n        <div ref={messagesEndRef} />\n      </div>\n\n      {/* Input */}\n      <div className=\"border-t border-border dark:border-border p-4\">\n        <div className=\"flex space-x-2\">\n          <textarea\n            value={inputValue}\n            onChange={(e) => setInputValue(e.target.value)}\n            onKeyPress={handleKeyPress}\n            placeholder={`Ask your ${department} assistant anything...`}\n            className=\"flex-1 resize-none border border-border rounded-lg px-4 py-4 bg-card text-foreground placeholder-muted-foreground focus:outline-none focus:ring-2 focus:ring-primary focus:border-transparent\"\n            rows={2}\n            disabled={isLoading}\n          />\n          <button\n            onClick={handleSendMessage}\n            disabled={isLoading || !inputValue.trim()}\n            className={`px-4 py-4 rounded-lg transition-colors ${\n              isLoading || !inputValue.trim()\n                ? 'bg-muted cursor-not-allowed'\n                : `bg-primary hover:bg-primary/90 text-primary-foreground`\n            }`}\n          >\n            {isLoading ? (\n              <Spinner size={20} />\n            ) : (\n              <Send className=\"h-5 w-5\" />\n            )}\n          </button>\n        </div>\n      </div>\n    </div>\n  );\n};\n\n// Workflow Builder Component\ninterface WorkflowBuilderProps {\n  department: Department;\n  onCreateWorkflow: (requirements: string) => void;\n  isLoading: boolean;\n  onClose: () => void;\n}\n\nconst WorkflowBuilder: React.FC<WorkflowBuilderProps> = ({\n  department,\n  onCreateWorkflow,\n  isLoading,\n  onClose\n}) => {\n  const [requirements, setRequirements] = useState('');\n\n  const handleSubmit = () => {\n    if (!requirements.trim()) return;\n    onCreateWorkflow(requirements.trim());\n    setRequirements('');\n  };\n\n  return (\n    <div className=\"space-y-4\">\n      <div className=\"flex items-center justify-between\">\n        <h4 className=\"font-medium text-primary\">\n          Create New Workflow for {department.charAt(0).toUpperCase() + department.slice(1)}\n        </h4>\n        <button\n          onClick={onClose}\n          className=\"text-primary hover:text-primary/80\"\n        >\n          ×\n        </button>\n      </div>\n      <textarea\n        value={requirements}\n        onChange={(e) => setRequirements(e.target.value)}\n        placeholder=\"Describe what you want this workflow to do...\"\n        className=\"w-full border border-border rounded-lg px-4 py-4 bg-card text-foreground placeholder-muted-foreground focus:outline-none focus:ring-2 focus:ring-primary\"\n        rows={3}\n      />\n      <div className=\"flex justify-end space-x-2\">\n        <button\n          onClick={onClose}\n          className=\"px-4 py-4 text-muted-foreground hover:text-foreground\"\n        >\n          Cancel\n        </button>\n        <button\n          onClick={handleSubmit}\n          disabled={isLoading || !requirements.trim()}\n          className=\"px-4 py-4 bg-primary text-primary-foreground rounded hover:bg-primary/90 disabled:opacity-50 disabled:cursor-not-allowed\"\n        >\n          {isLoading ? 'Creating...' : 'Create Workflow'}\n        </button>\n      </div>\n    </div>\n  );\n};\n\nexport default N8nAssistantPanel; ","usedDeprecatedRules":[]},{"filePath":"/home/vonj/Github/Nexus/src/components/ai/NexusAIController.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'useCallback' is defined but never used.","line":7,"column":35,"nodeType":null,"messageId":"unusedVar","endLine":7,"endColumn":46},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'Brain' is defined but never used.","line":9,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":9,"endColumn":8},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'Mic' is defined but never used.","line":12,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":12,"endColumn":6},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'FileText' is defined but never used.","line":13,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":13,"endColumn":11},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'TrendingUp' is defined but never used.","line":19,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":19,"endColumn":13},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'Camera' is defined but never used.","line":25,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":25,"endColumn":9},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'Cpu' is defined but never used.","line":26,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":26,"endColumn":6},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'Shield' is defined but never used.","line":28,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":28,"endColumn":9},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'DollarSign' is defined but never used.","line":33,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":33,"endColumn":13},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'Users' is defined but never used.","line":34,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":34,"endColumn":8},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":50,"column":13,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":50,"endColumn":16,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[912,915],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[912,915],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'error' is defined but never used.","line":236,"column":14,"nodeType":null,"messageId":"unusedVar","endLine":236,"endColumn":19},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'error' is defined but never used.","line":265,"column":14,"nodeType":null,"messageId":"unusedVar","endLine":265,"endColumn":19},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'error' is defined but never used.","line":297,"column":14,"nodeType":null,"messageId":"unusedVar","endLine":297,"endColumn":19},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'error' is defined but never used.","line":356,"column":14,"nodeType":null,"messageId":"unusedVar","endLine":356,"endColumn":19},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'error' is defined but never used.","line":388,"column":14,"nodeType":null,"messageId":"unusedVar","endLine":388,"endColumn":19},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'error' is defined but never used.","line":417,"column":14,"nodeType":null,"messageId":"unusedVar","endLine":417,"endColumn":19},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":426,"column":15,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":426,"endColumn":18,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[13880,13883],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[13880,13883],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":18,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\n * NexusAIController.tsx\n * Main control interface for all advanced AI capabilities\n * Demonstrates the transformation of Nexus into a Business Operating System\n */\n\nimport React, { useState, useRef, useCallback, useEffect } from 'react';\nimport { \n  Brain, \n  Zap, \n  Eye, \n  Mic, \n  FileText, \n  BarChart3, \n  Settings, \n  Workflow,\n  Bot,\n  Lightbulb,\n  TrendingUp,\n  Code,\n  Play,\n  Pause,\n  Upload,\n  MicIcon,\n  Camera,\n  Cpu,\n  Network,\n  Shield,\n  Rocket,\n  AlertTriangle,\n  CheckCircle,\n  Clock,\n  DollarSign,\n  Users,\n  Target\n} from 'lucide-react';\nimport { \n  Button,\n  Card, CardContent, CardDescription, CardHeader, CardTitle,\n  Badge,\n} from '@/components/ui';\nimport { nexusAIOrchestrator } from '../../lib/nexusAIOrchestrator';\n\ninterface AICapabilityStatus {\n  id: string;\n  name: string;\n  status: 'idle' | 'running' | 'success' | 'error';\n  progress: number;\n  lastRun?: Date;\n  results?: any;\n  metrics?: {\n    timesSaved: number;\n    efficiencyGain: number;\n    businessImpact: number;\n  };\n}\n\ninterface BusinessMetrics {\n  totalTimeSaved: number;\n  processesOptimized: number;\n  featuresGenerated: number;\n  integrationsHealed: number;\n  predictionsAccuracy: number;\n  automationLevel: number;\n}\n\ninterface AIInsight {\n  type: 'optimization' | 'prediction' | 'anomaly' | 'opportunity';\n  title: string;\n  description: string;\n  impact: 'low' | 'medium' | 'high' | 'critical';\n  confidence: number;\n  actionable: boolean;\n  estimatedValue: number;\n}\n\nexport const NexusAIController: React.FC = () => {\n  const [orchestratorStatus, setOrchestratorStatus] = useState<'stopped' | 'running'>('stopped');\n  const [capabilities, setCapabilities] = useState<Map<string, AICapabilityStatus>>(new Map());\n  const [businessMetrics, setBusinessMetrics] = useState<BusinessMetrics>({\n    totalTimeSaved: 0,\n    processesOptimized: 0,\n    featuresGenerated: 0,\n    integrationsHealed: 0,\n    predictionsAccuracy: 0,\n    automationLevel: 0\n  });\n  const [insights, setInsights] = useState<AIInsight[]>([]);\n  const [selectedCapability, setSelectedCapability] = useState<string | null>(null);\n  const [isRecording, setIsRecording] = useState(false);\n  const [uploadedFile, setUploadedFile] = useState<File | null>(null);\n\n  const fileInputRef = useRef<HTMLInputElement>(null);\n  const mediaRecorderRef = useRef<MediaRecorder | null>(null);\n  const audioChunksRef = useRef<Blob[]>([]);\n\n  // Initialize capabilities status\n  useEffect(() => {\n    const initialCapabilities = new Map<string, AICapabilityStatus>([\n      ['system-evolution', { \n        id: 'system-evolution', \n        name: 'Self-Evolving System', \n        status: 'idle' as const, \n        progress: 0,\n        metrics: { timesSaved: 0, efficiencyGain: 0, businessImpact: 0 }\n      }],\n      ['process-mining', { \n        id: 'process-mining', \n        name: 'Process Intelligence', \n        status: 'idle' as const, \n        progress: 0,\n        metrics: { timesSaved: 0, efficiencyGain: 0, businessImpact: 0 }\n      }],\n      ['multi-modal', { \n        id: 'multi-modal', \n        name: 'Multi-Modal AI', \n        status: 'idle' as const, \n        progress: 0,\n        metrics: { timesSaved: 0, efficiencyGain: 0, businessImpact: 0 }\n      }],\n      ['predictive', { \n        id: 'predictive', \n        name: 'Predictive Analytics', \n        status: 'idle' as const, \n        progress: 0,\n        metrics: { timesSaved: 0, efficiencyGain: 0, businessImpact: 0 }\n      }],\n      ['code-generation', { \n        id: 'code-generation', \n        name: 'Code Generation', \n        status: 'idle' as const, \n        progress: 0,\n        metrics: { timesSaved: 0, efficiencyGain: 0, businessImpact: 0 }\n      }],\n      ['smart-integration', { \n        id: 'smart-integration', \n        name: 'Smart Integration', \n        status: 'idle' as const, \n        progress: 0,\n        metrics: { timesSaved: 0, efficiencyGain: 0, businessImpact: 0 }\n      }]\n    ]);\n    setCapabilities(initialCapabilities);\n  }, []);\n\n  const toggleOrchestrator = async () => {\n    if (orchestratorStatus === 'running') {\n      nexusAIOrchestrator.stopOrchestration();\n      setOrchestratorStatus('stopped');\n    } else {\n      try {\n        await nexusAIOrchestrator.startOrchestration();\n        setOrchestratorStatus('running');\n        \n        // Run comprehensive analysis\n        runComprehensiveAnalysis();\n      } catch (error) {\n        console.error('Failed to start orchestrator:', error);\n      }\n    }\n  };\n\n  const runComprehensiveAnalysis = async () => {\n    updateCapabilityStatus('system-evolution', 'running', 10);\n    \n    try {\n      const results = await nexusAIOrchestrator.runComprehensiveAnalysis();\n      \n      // Update capabilities with results\n      updateCapabilityStatus('system-evolution', 'success', 100, results);\n      \n      // Update business metrics\n      setBusinessMetrics(prev => ({\n        ...prev,\n        totalTimeSaved: prev.totalTimeSaved + 3600, // 1 hour saved\n        processesOptimized: prev.processesOptimized + results.optimizations.length,\n        automationLevel: Math.min(prev.automationLevel + 15, 100)\n      }));\n\n      // Generate insights\n      const newInsights: AIInsight[] = [\n        {\n          type: 'optimization',\n          title: 'System Self-Optimization Active',\n          description: `Identified ${results.optimizations.length} optimization opportunities. Auto-implemented ${results.implementations.length} safe improvements.`,\n          impact: 'high',\n          confidence: 0.95,\n          actionable: true,\n          estimatedValue: 15000\n        },\n        {\n          type: 'prediction',\n          title: 'Business Process Improvements',\n          description: `Discovered ${results.insights.length} process inefficiencies. Potential 40% efficiency gain identified.`,\n          impact: 'critical',\n          confidence: 0.88,\n          actionable: true,\n          estimatedValue: 25000\n        }\n      ];\n      \n      setInsights(prev => [...newInsights, ...prev].slice(0, 10));\n      \n    } catch (error) {\n      updateCapabilityStatus('system-evolution', 'error', 0);\n      console.error('Comprehensive analysis failed:', error);\n    }\n  };\n\n  const runProcessOptimization = async () => {\n    updateCapabilityStatus('process-mining', 'running', 0);\n    \n    try {\n      const results = await nexusAIOrchestrator.optimizeBusinessProcesses();\n      updateCapabilityStatus('process-mining', 'success', 100, results);\n      \n      setBusinessMetrics(prev => ({\n        ...prev,\n        totalTimeSaved: prev.totalTimeSaved + results.time_savings,\n        processesOptimized: prev.processesOptimized + results.discovered_processes.length,\n        automationLevel: Math.min(prev.automationLevel + results.efficiency_gains, 100)\n      }));\n\n      const insight: AIInsight = {\n        type: 'optimization',\n        title: 'Business Processes Optimized',\n        description: `Optimized ${results.discovered_processes.length} processes, saving ${results.time_savings} seconds total. ${results.efficiency_gains.toFixed(1)}% efficiency improvement.`,\n        impact: 'high',\n        confidence: 0.92,\n        actionable: false,\n        estimatedValue: results.time_savings * 0.5 // $0.50 per second saved\n      };\n      \n      setInsights(prev => [insight, ...prev].slice(0, 10));\n      \n    } catch (error) {\n      updateCapabilityStatus('process-mining', 'error', 0);\n    }\n  };\n\n  const generateBusinessIntelligence = async () => {\n    updateCapabilityStatus('predictive', 'running', 0);\n    \n    try {\n      const results = await nexusAIOrchestrator.generateBusinessIntelligence();\n      updateCapabilityStatus('predictive', 'success', 100, results);\n      \n      setBusinessMetrics(prev => ({\n        ...prev,\n        predictionsAccuracy: 89.5\n      }));\n\n      const insight: AIInsight = {\n        type: 'prediction',\n        title: 'Business Intelligence Generated',\n        description: `Generated ${results.recommendations.length} strategic recommendations. Detected ${results.anomalies.length} business anomalies requiring attention.`,\n        impact: 'critical',\n        confidence: 0.89,\n        actionable: true,\n        estimatedValue: 50000\n      };\n      \n      setInsights(prev => [insight, ...prev].slice(0, 10));\n      \n    } catch (error) {\n      updateCapabilityStatus('predictive', 'error', 0);\n    }\n  };\n\n  const handleFileUpload = async (event: React.ChangeEvent<HTMLInputElement>) => {\n    const file = event.target.files?.[0];\n    if (!file) return;\n\n    setUploadedFile(file);\n    updateCapabilityStatus('multi-modal', 'running', 0);\n\n    try {\n      const results = await nexusAIOrchestrator.processMultiModalInput({\n        type: 'document',\n        data: file\n      });\n\n      updateCapabilityStatus('multi-modal', 'success', 100, results);\n      \n      const insight: AIInsight = {\n        type: 'optimization',\n        title: 'Document Processed with AI',\n        description: `Extracted data from ${file.name}. Generated ${results.actions.length} actionable items and ${results.workflows.length} automated workflows.`,\n        impact: 'medium',\n        confidence: results.intelligence.confidence,\n        actionable: true,\n        estimatedValue: results.actions.reduce((sum, action) => sum + action.estimated_time_saving, 0) * 0.5\n      };\n      \n      setInsights(prev => [insight, ...prev].slice(0, 10));\n      \n    } catch (error) {\n      updateCapabilityStatus('multi-modal', 'error', 0);\n    }\n  };\n\n  const startVoiceRecording = async () => {\n    try {\n      const stream = await navigator.mediaDevices.getUserMedia({ audio: true });\n      const mediaRecorder = new MediaRecorder(stream);\n      mediaRecorderRef.current = mediaRecorder;\n      audioChunksRef.current = [];\n\n      mediaRecorder.ondataavailable = (event) => {\n        audioChunksRef.current.push(event.data);\n      };\n\n      mediaRecorder.onstop = async () => {\n        const audioBlob = new Blob(audioChunksRef.current, { type: 'audio/wav' });\n        await processVoiceInput(audioBlob);\n        stream.getTracks().forEach(track => track.stop());\n      };\n\n      mediaRecorder.start();\n      setIsRecording(true);\n    } catch (error) {\n      console.error('Failed to start recording:', error);\n    }\n  };\n\n  const stopVoiceRecording = () => {\n    if (mediaRecorderRef.current && isRecording) {\n      mediaRecorderRef.current.stop();\n      setIsRecording(false);\n    }\n  };\n\n  const processVoiceInput = async (audioBlob: Blob) => {\n    updateCapabilityStatus('multi-modal', 'running', 0);\n\n    try {\n      const results = await nexusAIOrchestrator.processMultiModalInput({\n        type: 'voice',\n        data: audioBlob\n      });\n\n      updateCapabilityStatus('multi-modal', 'success', 100, results);\n      \n      const insight: AIInsight = {\n        type: 'optimization',\n        title: 'Voice Command Processed',\n        description: `Interpreted: \"${results.intelligence.transcription}\". Generated ${results.workflows.length} workflows and ${results.actions.length} action items.`,\n        impact: 'medium',\n        confidence: results.intelligence.confidence,\n        actionable: true,\n        estimatedValue: 300 // 5 minutes saved\n      };\n      \n      setInsights(prev => [insight, ...prev].slice(0, 10));\n      \n    } catch (error) {\n      updateCapabilityStatus('multi-modal', 'error', 0);\n    }\n  };\n\n  const generateFeature = async () => {\n    const description = \"Create an automated expense approval workflow that routes expenses under $500 to auto-approve and higher amounts to manager approval\";\n    \n    updateCapabilityStatus('code-generation', 'running', 0);\n\n    try {\n      const results = await nexusAIOrchestrator.generateFeatureFromDescription(description);\n      updateCapabilityStatus('code-generation', 'success', 100, results);\n      \n      setBusinessMetrics(prev => ({\n        ...prev,\n        featuresGenerated: prev.featuresGenerated + 1,\n        totalTimeSaved: prev.totalTimeSaved + results.estimated_time_saving\n      }));\n\n      const insight: AIInsight = {\n        type: 'optimization',\n        title: 'Feature Generated Automatically',\n        description: `Created complete expense approval system with ${results.feature.components.length} components and ${results.feature.api_endpoints.length} API endpoints. Estimated ${results.estimated_time_saving} seconds saved per use.`,\n        impact: 'high',\n        confidence: 0.94,\n        actionable: true,\n        estimatedValue: results.estimated_time_saving * 10 // $10 per saved minute\n      };\n      \n      setInsights(prev => [insight, ...prev].slice(0, 10));\n      \n    } catch (error) {\n      updateCapabilityStatus('code-generation', 'error', 0);\n    }\n  };\n\n  const optimizeIntegrations = async () => {\n    updateCapabilityStatus('smart-integration', 'running', 0);\n\n    try {\n      const results = await nexusAIOrchestrator.optimizeIntegrations();\n      updateCapabilityStatus('smart-integration', 'success', 100, results);\n      \n      setBusinessMetrics(prev => ({\n        ...prev,\n        integrationsHealed: prev.integrationsHealed + results.healed_connections.length\n      }));\n\n      const insight: AIInsight = {\n        type: 'optimization',\n        title: 'Integrations Optimized',\n        description: `Configured ${results.configured_integrations.length} new integrations and healed ${results.healed_connections.length} broken connections. ${results.efficiency_improvement}% efficiency improvement.`,\n        impact: 'medium',\n        confidence: 0.91,\n        actionable: false,\n        estimatedValue: results.efficiency_improvement * 100\n      };\n      \n      setInsights(prev => [insight, ...prev].slice(0, 10));\n      \n    } catch (error) {\n      updateCapabilityStatus('smart-integration', 'error', 0);\n    }\n  };\n\n  const updateCapabilityStatus = (\n    id: string, \n    status: AICapabilityStatus['status'], \n    progress: number, \n    results?: any\n  ) => {\n    setCapabilities(prev => {\n      const updated = new Map(prev);\n      const capability = updated.get(id);\n      if (capability) {\n        updated.set(id, {\n          ...capability,\n          status,\n          progress,\n          lastRun: new Date(),\n          results\n        });\n      }\n      return updated;\n    });\n  };\n\n  const getStatusIcon = (status: AICapabilityStatus['status']) => {\n    switch (status) {\n      case 'running': return <Settings className=\"h-4 w-4 animate-spin text-primary\" />;\n      case 'success': return <CheckCircle className=\"h-4 w-4 text-success\" />;\n      case 'error': return <AlertTriangle className=\"h-4 w-4 text-destructive\" />;\n      default: return <Clock className=\"h-4 w-4 text-muted-foreground\" />;\n    }\n  };\n\n  const getImpactColor = (impact: string) => {\n    switch (impact) {\n      case 'critical': return 'bg-destructive';\n      case 'high': return 'bg-warning';\n      case 'medium': return 'bg-warning';\n      case 'low': return 'bg-success';\n      default: return 'bg-muted';\n    }\n  };\n\n  return (\n    <div className=\"max-w-7xl mx-auto p-6 space-y-8\">\n      {/* Header */}\n      <div className=\"text-center space-y-4\">\n        <div className=\"flex justify-center items-center space-x-4 mb-4\">\n          <Bot className=\"h-12 w-12 text-primary\" />\n          <h1 className=\"text-4xl font-bold bg-gradient-to-r from-primary via-secondary to-primary bg-clip-text text-transparent\">\n            Nexus AI Business Operating System\n          </h1>\n        </div>\n        \n        <p className=\"text-xl text-muted-foreground max-w-4xl mx-auto\">\n          Transform your business with advanced AI capabilities that are rarely utilized but offer \n          <span className=\"font-bold text-primary\"> extraordinary business value</span>\n        </p>\n        \n        {/* Master Control */}\n        <div className=\"flex justify-center items-center space-x-4 mt-6\">\n          <Button \n            onClick={toggleOrchestrator}\n            size=\"lg\"\n            variant={orchestratorStatus === 'running' ? 'destructive' : 'default'}\n            className=\"flex items-center space-x-2\"\n          >\n            {orchestratorStatus === 'running' ? (\n              <>\n                <Pause className=\"h-5 w-5\" />\n                <span>Stop AI Orchestrator</span>\n              </>\n            ) : (\n              <>\n                <Play className=\"h-5 w-5\" />\n                <span>Start AI Orchestrator</span>\n              </>\n            )}\n          </Button>\n          \n          <Badge \n            variant={orchestratorStatus === 'running' ? 'default' : 'secondary'}\n            className=\"text-lg px-4 py-4\"\n          >\n            {orchestratorStatus === 'running' ? 'ACTIVE' : 'STOPPED'}\n          </Badge>\n        </div>\n      </div>\n\n      {/* Business Metrics Dashboard */}\n      <Card className=\"border-2 border-primary/20\">\n        <CardHeader>\n          <CardTitle className=\"flex items-center\">\n            <BarChart3 className=\"h-6 w-6 mr-2\" />\n            Business Impact Metrics\n          </CardTitle>\n          <CardDescription>\n            Real-time measurement of AI transformation value\n          </CardDescription>\n        </CardHeader>\n        <CardContent>\n          <div className=\"grid grid-cols-2 md:grid-cols-3 lg:grid-cols-6 gap-4\">\n            <div className=\"text-center p-4 bg-primary/10 rounded-lg\">\n              <Clock className=\"h-8 w-8 mx-auto mb-2 text-primary\" />\n              <div className=\"text-2xl font-bold text-primary\">\n                {Math.floor(businessMetrics.totalTimeSaved / 60)}m\n              </div>\n              <div className=\"text-sm text-primary\">Time Saved</div>\n            </div>\n            \n            <div className=\"text-center p-4 bg-success/10 rounded-lg\">\n              <Workflow className=\"h-8 w-8 mx-auto mb-2 text-success\" />\n              <div className=\"text-2xl font-bold text-success\">\n                {businessMetrics.processesOptimized}\n              </div>\n              <div className=\"text-sm text-success\">Processes Optimized</div>\n            </div>\n            \n            <div className=\"text-center p-4 bg-secondary/10 rounded-lg\">\n              <Code className=\"h-8 w-8 mx-auto mb-2 text-secondary\" />\n              <div className=\"text-2xl font-bold text-secondary\">\n                {businessMetrics.featuresGenerated}\n              </div>\n              <div className=\"text-sm text-secondary\">Features Generated</div>\n            </div>\n            \n            <div className=\"text-center p-4 bg-warning/10 rounded-lg\">\n              <Network className=\"h-8 w-8 mx-auto mb-2 text-warning\" />\n              <div className=\"text-2xl font-bold text-warning\">\n                {businessMetrics.integrationsHealed}\n              </div>\n              <div className=\"text-sm text-warning\">Integrations Healed</div>\n            </div>\n            \n            <div className=\"text-center p-4 bg-destructive/10 rounded-lg\">\n              <Target className=\"h-8 w-8 mx-auto mb-2 text-destructive\" />\n              <div className=\"text-2xl font-bold text-destructive\">\n                {businessMetrics.predictionsAccuracy.toFixed(1)}%\n              </div>\n              <div className=\"text-sm text-destructive\">Prediction Accuracy</div>\n            </div>\n            \n            <div className=\"text-center p-4 bg-primary/10 rounded-lg\">\n              <Zap className=\"h-8 w-8 mx-auto mb-2 text-primary\" />\n              <div className=\"text-2xl font-bold text-primary\">\n                {businessMetrics.automationLevel.toFixed(0)}%\n              </div>\n              <div className=\"text-sm text-primary\">Automation Level</div>\n            </div>\n          </div>\n        </CardContent>\n      </Card>\n\n      {/* AI Capabilities Control Panel */}\n      <div className=\"grid grid-cols-1 lg:grid-cols-2 xl:grid-cols-3 gap-6\">\n        {Array.from(capabilities.values()).map((capability) => (\n          <Card \n            key={capability.id} \n            className={`cursor-pointer transition-all duration-300 hover:shadow-lg ${\n              selectedCapability === capability.id ? 'border-primary shadow-lg' : 'border-border'\n            }`}\n            onClick={() => setSelectedCapability(capability.id)}\n          >\n            <CardHeader className=\"pb-3\">\n              <div className=\"flex items-center justify-between\">\n                <div className=\"flex items-center space-x-2\">\n                  {getStatusIcon(capability.status)}\n                  <CardTitle className=\"text-lg\">{capability.name}</CardTitle>\n                </div>\n                <Badge variant={capability.status === 'success' ? 'default' : 'secondary'}>\n                  {capability.status}\n                </Badge>\n              </div>\n            </CardHeader>\n            \n            <CardContent>\n              <div className=\"space-y-4\">\n                {/* Progress Bar */}\n                {capability.status === 'running' && (\n                  <div className=\"w-full bg-muted rounded-full h-2\">\n                    <div \n                      className=\"bg-primary h-2 rounded-full transition-all duration-300\" \n                      style={{ width: `${capability.progress}%` }}\n                    ></div>\n                  </div>\n                )}\n\n                {/* Metrics */}\n                {capability.metrics && (\n                  <div className=\"grid grid-cols-3 gap-2 text-center\">\n                    <div>\n                      <div className=\"text-sm font-bold\">{capability.metrics.timesSaved}</div>\n                      <div className=\"text-xs text-muted-foreground\">Times Saved</div>\n                    </div>\n                    <div>\n                      <div className=\"text-sm font-bold\">{capability.metrics.efficiencyGain}%</div>\n                      <div className=\"text-xs text-muted-foreground\">Efficiency</div>\n                    </div>\n                    <div>\n                      <div className=\"text-sm font-bold\">${capability.metrics.businessImpact}</div>\n                      <div className=\"text-xs text-muted-foreground\">Impact</div>\n                    </div>\n                  </div>\n                )}\n\n                {/* Last Run */}\n                {capability.lastRun && (\n                  <div className=\"text-xs text-muted-foreground\">\n                    Last run: {capability.lastRun.toLocaleTimeString()}\n                  </div>\n                )}\n\n                {/* Action Button */}\n                <Button \n                  className=\"w-full\" \n                  variant=\"outline\"\n                  disabled={capability.status === 'running'}\n                  onClick={(e) => {\n                    e.stopPropagation();\n                    switch (capability.id) {\n                      case 'system-evolution':\n                        runComprehensiveAnalysis();\n                        break;\n                      case 'process-mining':\n                        runProcessOptimization();\n                        break;\n                      case 'predictive':\n                        generateBusinessIntelligence();\n                        break;\n                      case 'code-generation':\n                        generateFeature();\n                        break;\n                      case 'smart-integration':\n                        optimizeIntegrations();\n                        break;\n                    }\n                  }}\n                >\n                  {capability.status === 'running' ? 'Running...' : 'Execute'}\n                </Button>\n              </div>\n            </CardContent>\n          </Card>\n        ))}\n      </div>\n\n      {/* Multi-Modal Input Controls */}\n      <Card>\n        <CardHeader>\n          <CardTitle className=\"flex items-center\">\n            <Eye className=\"h-6 w-6 mr-2\" />\n            Multi-Modal AI Interface\n          </CardTitle>\n          <CardDescription>\n            Process documents, voice commands, and images with advanced AI\n          </CardDescription>\n        </CardHeader>\n        <CardContent>\n          <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4\">\n            {/* Document Upload */}\n            <div className=\"text-center space-y-2\">\n              <Button \n                onClick={() => fileInputRef.current?.click()}\n                variant=\"outline\"\n                className=\"w-full\"\n              >\n                <Upload className=\"h-4 w-4 mr-2\" />\n                Upload Document\n              </Button>\n              <input\n                ref={fileInputRef}\n                type=\"file\"\n                onChange={handleFileUpload}\n                accept=\".pdf,.jpg,.jpeg,.png,.doc,.docx\"\n                className=\"hidden\"\n              />\n              {uploadedFile && (\n                <div className=\"text-xs text-muted-foreground\">\n                  {uploadedFile.name}\n                </div>\n              )}\n            </div>\n\n            {/* Voice Input */}\n            <div className=\"text-center space-y-2\">\n              <Button \n                onClick={isRecording ? stopVoiceRecording : startVoiceRecording}\n                variant={isRecording ? \"destructive\" : \"outline\"}\n                className=\"w-full\"\n              >\n                <MicIcon className=\"h-4 w-4 mr-2\" />\n                {isRecording ? 'Stop Recording' : 'Voice Command'}\n              </Button>\n              {isRecording && (\n                <div className=\"text-xs text-destructive animate-pulse\">\n                  Recording...\n                </div>\n              )}\n            </div>\n\n            {/* Feature Generation */}\n            <div className=\"text-center space-y-2\">\n              <Button \n                onClick={generateFeature}\n                variant=\"outline\"\n                className=\"w-full\"\n              >\n                <Code className=\"h-4 w-4 mr-2\" />\n                Generate Feature\n              </Button>\n              <div className=\"text-xs text-muted-foreground\">\n                Auto-create complete features\n              </div>\n            </div>\n          </div>\n        </CardContent>\n      </Card>\n\n      {/* AI Insights Feed */}\n      <Card>\n        <CardHeader>\n          <CardTitle className=\"flex items-center\">\n            <Lightbulb className=\"h-6 w-6 mr-2\" />\n            AI Insights & Recommendations\n          </CardTitle>\n          <CardDescription>\n            Real-time business intelligence and optimization suggestions\n          </CardDescription>\n        </CardHeader>\n        <CardContent>\n          <div className=\"space-y-4 max-h-96 overflow-y-auto\">\n            {insights.length === 0 ? (\n              <div className=\"text-center text-muted-foreground py-8\">\n                Start the AI Orchestrator to begin receiving insights\n              </div>\n            ) : (\n              insights.map((insight, index) => (\n                <div \n                  key={index} \n                  className=\"p-4 border rounded-lg hover:shadow-md transition-shadow\"\n                >\n                  <div className=\"flex items-start justify-between mb-2\">\n                    <div className=\"flex items-center space-x-2\">\n                      <div className={`w-3 h-3 rounded-full ${getImpactColor(insight.impact)}`}></div>\n                      <h4 className=\"font-medium\">{insight.title}</h4>\n                      <Badge variant=\"secondary\">\n                        {(insight.confidence * 100).toFixed(0)}% confidence\n                      </Badge>\n                    </div>\n                    <div className=\"flex items-center space-x-2\">\n                      {insight.actionable && (\n                        <Badge variant=\"default\">Actionable</Badge>\n                      )}\n                      <div className=\"text-sm font-bold text-success\">\n                        ${insight.estimatedValue.toLocaleString()}\n                      </div>\n                    </div>\n                  </div>\n                  <p className=\"text-sm text-muted-foreground\">{insight.description}</p>\n                  <div className=\"mt-4 flex space-x-2\">\n                    <Button size=\"sm\" variant=\"outline\">\n                      <Eye className=\"h-4 w-4 mr-2\" />\n                      View Details\n                    </Button>\n                    <Button size=\"sm\">\n                      <Zap className=\"h-4 w-4 mr-2\" />\n                      Take Action\n                    </Button>\n                    <div className=\"flex items-center space-x-2 ml-auto\">\n                      {insight.actionable && (\n                        <div className=\"flex items-center space-x-2\">\n                          <span className=\"text-xs font-semibold\">\n                            <Badge variant=\"default\">Actionable</Badge>\n                          </span>\n                        </div>\n                      )}\n                      {!insight.actionable && (\n                        <div className=\"flex items-center space-x-2\">\n                          <span className=\"text-xs font-semibold\">\n                            <Badge variant=\"secondary\">Not Actionable</Badge>\n                          </span>\n                        </div>\n                      )}\n                    </div>\n                  </div>\n                </div>\n              ))\n            )}\n          </div>\n        </CardContent>\n      </Card>\n\n      {/* Call to Action */}\n      <Card className=\"bg-gradient-to-r from-primary to-primary/80 text-primary-foreground\">\n        <CardContent className=\"p-8\">\n          <div className=\"text-center space-y-4\">\n            <h2 className=\"text-3xl font-bold\">Transform Your Business Today</h2>\n            <p className=\"text-xl text-primary-foreground/90 max-w-3xl mx-auto\">\n              These AI capabilities represent the future of business operations. Start with one capability \n              and watch as your business transforms into an intelligent, self-optimizing system.\n            </p>\n            <div className=\"flex justify-center space-x-4 mt-6\">\n              <Button \n                variant=\"secondary\" \n                size=\"lg\"\n                className=\"bg-card text-primary hover:bg-muted\"\n                onClick={toggleOrchestrator}\n              >\n                <Rocket className=\"h-5 w-5 mr-2\" />\n                {orchestratorStatus === 'running' ? 'AI System Active' : 'Start Transformation'}\n              </Button>\n            </div>\n          </div>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}; ","usedDeprecatedRules":[]},{"filePath":"/home/vonj/Github/Nexus/src/components/ai/OrganizationalChatPanel.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/vonj/Github/Nexus/src/components/ai/PersonalMemoryCapture.test.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/vonj/Github/Nexus/src/components/ai/PersonalMemoryCapture.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'dedupResult' is assigned a value but never used.","line":58,"column":13,"nodeType":null,"messageId":"unusedVar","endLine":58,"endColumn":24}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState } from 'react';\nimport { Brain, Lightbulb, Target, BookOpen, Tag } from 'lucide-react';\nimport { useAuth } from '@/contexts/AuthContext';\nimport { supabase } from '../../lib/core/supabase';\nimport { thoughtsService } from '@/lib/services/thoughtsService';\n\n/**\n * PersonalMemoryCapture\n * \n * Allows users to capture personal thoughts, insights, and goals\n * within their business context for long-term memory and AI reference\n */\n\ninterface PersonalThought {\n  content: string;\n  category: 'idea' | 'learning' | 'reflection' | 'goal';\n  tags: string[];\n  businessContext?: {\n    department?: string;\n    project?: string;\n    relatedTo?: string;\n  };\n}\n\ninterface PersonalMemoryCaptureProps {\n  currentContext?: {\n    department?: string;\n    page?: string;\n    conversationTopic?: string;\n  };\n  onThoughtSaved?: (thought: PersonalThought) => void;\n}\n\nexport const PersonalMemoryCapture: React.FC<PersonalMemoryCaptureProps> = ({\n  currentContext,\n  onThoughtSaved\n}) => {\n  const [isOpen, setIsOpen] = useState(true);\n  const [content, setContent] = useState('');\n  const [category, setCategory] = useState<PersonalThought['category']>('idea');\n  const [tags, setTags] = useState<string>('');\n  const [loading, setLoading] = useState(false);\n  const { user } = useAuth();\n\n  const categories = [\n    { value: 'idea', label: 'Idea', icon: Lightbulb, color: 'bg-warning/10 text-warning-foreground' },\n    { value: 'learning', label: 'Learning', icon: BookOpen, color: 'bg-primary/10 text-primary' },\n    { value: 'reflection', label: 'Reflection', icon: Brain, color: 'bg-accent/10 text-accent-foreground' },\n    { value: 'goal', label: 'Goal', icon: Target, color: 'bg-success/10 text-success' }\n  ];\n\n  const handleSave = async () => {\n    if (!content.trim() || !user) return;\n\n    setLoading(true);\n    try {\n      // ---- Check for similar thoughts first (Smart Deduplication) ----\n      const dedupResult = await supabase.functions.invoke('trigger-n8n-workflow', {\n        body: {\n          workflow_name: 'smart_thought_deduplication',\n          content: content.trim(),\n          user_id: user.id,\n          company_id: user.company_id,\n          category: category,\n          context: currentContext\n        },\n      });\n\n      // If deduplication found matches, it will create an action card for user approval\n      // For now, we'll continue with creation (future: wait for user decision)\n      \n      // ---- Map capture category to thoughts table schema ----\n      const categoryMap: Record<string, 'idea' | 'task' | 'update' | 'reminder'> = {\n        idea: 'idea',\n        learning: 'update',\n        reflection: 'update',\n        goal: 'task',\n      };\n\n      const createReq = {\n        content: content.trim(),\n        category: categoryMap[category],\n        status: 'concept' as const,\n        main_sub_categories: tags.split(',').map(t => t.trim()).filter(Boolean),\n        personal_or_professional: 'personal' as const,\n        interaction_method: 'text' as const,\n        // Put department/page context into impact field for now (future structured)\n        impact: currentContext?.department ? `Dept:${currentContext.department}` : undefined,\n      };\n\n      const inserted = await thoughtsService.createThought(createReq);\n\n      // Reset form\n      setContent('');\n      setTags('');\n      setIsOpen(false);\n      \n      const savedThought: PersonalThought = {\n        content: createReq.content,\n        category,\n        tags: createReq.main_sub_categories ?? [],\n        businessContext: currentContext,\n      };\n      onThoughtSaved?.(savedThought);\n      \n      console.log('Personal thought saved with business context:', currentContext);\n\n      // Fire-and-forget AI processing (no await to keep UI snappy)\n      if (inserted?.id) {\n        // Fire embedding\n        supabase.functions.invoke('ai_embed_thought', {\n          body: {\n            thoughtId: inserted.id,\n            content: inserted.content,\n          },\n        }).catch((err) => {\n          console.error('Failed to invoke ai_embed_thought:', err);\n        });\n\n        // Trigger n8n Intelligent Thought Processor workflow\n        supabase.functions.invoke('trigger-n8n-workflow', {\n          body: {\n            workflow_name: 'intelligent_thought_processor',\n            thought_id: inserted.id,\n            user_id: user.id,\n            company_id: user.company_id,\n            trigger_source: 'thought_creation',\n            context: currentContext\n          },\n        }).catch((err) => {\n          console.error('Failed to trigger intelligent thought processor:', err);\n        });\n\n        // Legacy: Trigger suggestion generation (integration-aware) - will be replaced by n8n\n        supabase.functions.invoke('ai_generate_thought_suggestions', {\n          body: { thoughtId: inserted.id },\n        }).catch((err) => {\n          console.error('Failed to invoke ai_generate_thought_suggestions:', err);\n        });\n      }\n    } catch (error) {\n      console.error('Failed to save personal thought:', error);\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  if (!isOpen) {\n    return (\n      <button\n        onClick={() => setIsOpen(true)}\n        className=\"flex items-center gap-2 px-4 py-2 text-sm bg-muted hover:bg-muted/80 rounded-lg border text-foreground transition-all\"\n      >\n        <Brain className=\"w-4 h-4\" />\n        <span>Capture Thought</span>\n      </button>\n    );\n  }\n\n  return (\n    <div className=\"bg-muted/50 rounded-xl p-4 border\">\n      <div className=\"flex items-center gap-2 mb-3\">\n        <Brain className=\"w-5 h-5 text-primary\" />\n        <h3 className=\"text-sm font-semibold text-foreground\">Capture Personal Thought</h3>\n        {currentContext?.department && (\n          <span className=\"text-xs bg-primary/10 text-primary px-2 py-1 rounded-full\">\n            {currentContext.department}\n          </span>\n        )}\n      </div>\n\n      {/* Category Selection */}\n      <div className=\"grid grid-cols-4 gap-2 mb-3\">\n        {categories.map(({ value, label, icon: Icon, color }) => (\n          <button\n            key={value}\n            onClick={() => setCategory(value as PersonalThought['category'])}\n            className={`flex flex-col items-center gap-1 p-4 rounded-lg text-xs transition-all ${\n              category === value\n                ? color\n                : 'bg-card hover:bg-background text-muted-foreground'\n            }`}\n          >\n            <Icon className=\"w-4 h-4\" />\n            <span>{label}</span>\n          </button>\n        ))}\n      </div>\n\n      {/* Content Input */}\n      <textarea\n        value={content}\n        onChange={(e) => setContent(e.target.value)}\n        placeholder={`What's on your mind? This will be remembered and connected to your ${currentContext?.department || 'work'} context...`}\n        className=\"w-full p-2 border bg-background border-border rounded-lg resize-none text-sm focus:ring-2 focus:ring-primary focus:border-transparent\"\n        rows={3}\n        autoFocus\n      />\n\n      {/* Tags Input */}\n      <div className=\"flex items-center gap-2 mt-2 mb-4\">\n        <Tag className=\"w-4 h-4 text-muted-foreground\" />\n        <input\n          type=\"text\"\n          value={tags}\n          onChange={(e) => setTags(e.target.value)}\n          placeholder=\"Tags (comma separated)\"\n          className=\"flex-1 p-2 border bg-background border-border rounded text-sm focus:ring-2 focus:ring-primary focus:border-transparent\"\n        />\n      </div>\n\n      {/* Context Display */}\n      {currentContext && (\n        <div className=\"mb-3 p-4 bg-card rounded border\">\n          <p className=\"text-xs text-muted-foreground mb-1\">Business Context:</p>\n          <div className=\"flex flex-wrap gap-1\">\n            {currentContext.department && (\n              <span className=\"text-xs bg-primary/10 text-primary px-2 py-1 rounded\">\n                {currentContext.department}\n              </span>\n            )}\n            {currentContext.page && (\n              <span className=\"text-xs bg-success/10 text-success px-2 py-1 rounded\">\n                {currentContext.page}\n              </span>\n            )}\n            {currentContext.conversationTopic && (\n                                    <span className=\"text-xs bg-warning/10 text-warning-foreground px-2 py-1 rounded\">\n                Topic: {currentContext.conversationTopic}\n              </span>\n            )}\n          </div>\n        </div>\n      )}\n\n      {/* Actions */}\n      <div className=\"flex items-center justify-between\">\n        <button\n          onClick={() => setIsOpen(false)}\n          className=\"px-4 py-4 text-sm text-muted-foreground hover:text-foreground\"\n        >\n          Cancel\n        </button>\n        <button\n          onClick={handleSave}\n          disabled={!content.trim() || loading}\n          className=\"px-4 py-2 bg-primary text-primary-foreground text-sm rounded-lg hover:bg-primary/90 disabled:opacity-50 disabled:cursor-not-allowed\"\n        >\n          {loading ? 'Saving...' : 'Save Thought'}\n        </button>\n      </div>\n    </div>\n  );\n}; ","usedDeprecatedRules":[]},{"filePath":"/home/vonj/Github/Nexus/src/components/ai/ProfessionalEmailActionCard.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'Mail' is defined but never used.","line":9,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":9,"endColumn":14},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'Crown' is defined but never used.","line":9,"column":16,"nodeType":null,"messageId":"unusedVar","endLine":9,"endColumn":21},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'TrendingUp' is defined but never used.","line":9,"column":23,"nodeType":null,"messageId":"unusedVar","endLine":9,"endColumn":33},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'userId' is defined but never used.","line":18,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":18,"endColumn":9},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'handleSetupEmail' is assigned a value but never used.","line":22,"column":9,"nodeType":null,"messageId":"unusedVar","endLine":22,"endColumn":25},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'handleAlreadyHave' is assigned a value but never used.","line":28,"column":9,"nodeType":null,"messageId":"unusedVar","endLine":28,"endColumn":26}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\n * Professional Email Action Card\n * Action card for professional email setup recommendations\n * Pillar: 1,2 - Business health improvement and revenue generation\n */\n\nimport React from 'react';\nimport { ActionCard } from './ActionCard';\nimport { Mail, Crown, TrendingUp } from 'lucide-react';\n\ninterface ProfessionalEmailActionCardProps {\n  userId?: string;\n  urgency?: 'low' | 'medium' | 'high';\n  onComplete?: () => void;\n}\n\nexport const ProfessionalEmailActionCard: React.FC<ProfessionalEmailActionCardProps> = ({\n  userId,\n  urgency = 'medium',\n  onComplete\n}) => {\n  const handleSetupEmail = () => {\n    // Open Microsoft 365 setup\n    window.open('https://www.microsoft.com/en-us/microsoft-365/business/compare-all-microsoft-365-business-products', '_blank');\n    onComplete?.();\n  };\n\n  const handleAlreadyHave = () => {\n    // Mark as completed\n    onComplete?.();\n  };\n\n  const cardData = {\n    id: \"professional_email_setup\",\n    title: \"Set Up Professional Email\",\n    description: \"Boost your business credibility with a custom domain email address.\\n\\nBenefits:\\n• Custom domain email (you@yourcompany.com)\\n• Enhanced security and compliance features\\n• 50GB mailbox with advanced filtering\\n• Integrated Office apps (Word, Excel, PowerPoint)\\n• Professional appearance increases customer trust\\n• 99.9% uptime guarantee\\n\\nEstimated time: 15-30 minutes\\nCost: $6-22/user/month\",\n    actions: [\n      {\n        id: \"setup_microsoft365\",\n        label: \"Set Up Microsoft 365\",\n        eventType: \"external_link\",\n        metadata: {\n          url: \"https://www.microsoft.com/en-us/microsoft-365/business\",\n          urgency,\n          businessHealthImpact: \"+7 points\"\n        }\n      },\n      {\n        id: \"already_have_professional_email\",\n        label: \"I Already Have Professional Email\",\n        eventType: \"mark_completed\",\n        metadata: {\n          kpi: \"professional_email_domain\",\n          value: true\n        }\n      }\n    ],\n    metadata: {\n      urgency,\n      businessHealthImpact: \"+7 points\",\n      category: \"maturity\",\n      estimatedTime: \"15-30 minutes\",\n      estimatedCost: \"$6-22/user/month\"\n    }\n  };\n\n  return (\n    <ActionCard\n      card={cardData}\n      onCompleted={(action) => {\n        if (action.id === \"setup_microsoft365\") {\n          window.open(\"https://www.microsoft.com/en-us/microsoft-365/business\", \"_blank\");\n        }\n        onComplete?.();\n      }}\n    />\n  );\n}; ","usedDeprecatedRules":[]},{"filePath":"/home/vonj/Github/Nexus/src/components/ai/ProfessionalEmailUpsell.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'errorMessage' is assigned a value but never used.","line":67,"column":15,"nodeType":null,"messageId":"unusedVar","endLine":67,"endColumn":27},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'errorMessage' is assigned a value but never used.","line":100,"column":13,"nodeType":null,"messageId":"unusedVar","endLine":100,"endColumn":25},{"ruleId":"no-restricted-syntax","severity":1,"message":"Use design tokens instead of hardcoded colors (e.g., bg-primary, bg-secondary)","line":148,"column":30,"nodeType":"Literal","messageId":"restrictedSyntax","endLine":148,"endColumn":58},{"ruleId":"no-restricted-syntax","severity":1,"message":"Use design tokens instead of hardcoded text colors (e.g., text-foreground, text-muted-foreground)","line":149,"column":33,"nodeType":"Literal","messageId":"restrictedSyntax","endLine":149,"endColumn":56},{"ruleId":"no-restricted-syntax","severity":1,"message":"Use design tokens instead of hardcoded text colors (e.g., text-foreground, text-muted-foreground)","line":177,"column":30,"nodeType":"Literal","messageId":"restrictedSyntax","endLine":177,"endColumn":53},{"ruleId":"no-restricted-syntax","severity":1,"message":"Use design tokens instead of hardcoded text colors (e.g., text-foreground, text-muted-foreground)","line":196,"column":29,"nodeType":"Literal","messageId":"restrictedSyntax","endLine":196,"endColumn":59},{"ruleId":"no-restricted-syntax","severity":1,"message":"Use design tokens instead of hardcoded text colors (e.g., text-foreground, text-muted-foreground)","line":202,"column":40,"nodeType":"Literal","messageId":"restrictedSyntax","endLine":202,"endColumn":78},{"ruleId":"no-restricted-syntax","severity":1,"message":"Use design tokens instead of hardcoded text colors (e.g., text-foreground, text-muted-foreground)","line":214,"column":28,"nodeType":"Literal","messageId":"restrictedSyntax","endLine":214,"endColumn":61},{"ruleId":"no-restricted-syntax","severity":1,"message":"Use design tokens instead of hardcoded text colors (e.g., text-foreground, text-muted-foreground)","line":219,"column":39,"nodeType":"Literal","messageId":"restrictedSyntax","endLine":219,"endColumn":68},{"ruleId":"no-restricted-syntax","severity":1,"message":"Use design tokens instead of hardcoded text colors (e.g., text-foreground, text-muted-foreground)","line":220,"column":33,"nodeType":"Literal","messageId":"restrictedSyntax","endLine":220,"endColumn":63},{"ruleId":"no-restricted-syntax","severity":1,"message":"Use design tokens instead of hardcoded text colors (e.g., text-foreground, text-muted-foreground)","line":230,"column":33,"nodeType":"Literal","messageId":"restrictedSyntax","endLine":230,"endColumn":61},{"ruleId":"no-restricted-syntax","severity":1,"message":"Use design tokens instead of hardcoded text colors (e.g., text-foreground, text-muted-foreground)","line":235,"column":40,"nodeType":"Literal","messageId":"restrictedSyntax","endLine":235,"endColumn":64},{"ruleId":"no-restricted-syntax","severity":1,"message":"Use design tokens instead of hardcoded text colors (e.g., text-foreground, text-muted-foreground)","line":239,"column":40,"nodeType":"Literal","messageId":"restrictedSyntax","endLine":239,"endColumn":64},{"ruleId":"no-restricted-syntax","severity":1,"message":"Use design tokens instead of hardcoded text colors (e.g., text-foreground, text-muted-foreground)","line":243,"column":40,"nodeType":"Literal","messageId":"restrictedSyntax","endLine":243,"endColumn":64},{"ruleId":"no-restricted-syntax","severity":1,"message":"Use design tokens instead of hardcoded text colors (e.g., text-foreground, text-muted-foreground)","line":247,"column":40,"nodeType":"Literal","messageId":"restrictedSyntax","endLine":247,"endColumn":64},{"ruleId":"no-restricted-syntax","severity":1,"message":"Use design tokens instead of hardcoded colors (e.g., bg-primary, bg-secondary)","line":258,"column":23,"nodeType":"Literal","messageId":"restrictedSyntax","endLine":258,"endColumn":61}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":16,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\n * Professional Email Upsell Component\n * Shows Microsoft 365 upsell opportunities based on domain analysis\n * Pillar: 1,2 - Business health improvement and revenue generation\n */\n\nimport React, { useState, useEffect } from 'react';\nimport { \n  Card, CardContent, CardHeader, CardTitle,\n  Button,\n  Badge\n} from '@/components/ui';\nimport { useToast } from '@/components/ui/use-toast';\nimport { logger } from '@/lib/security/logger';\nimport { \n  Mail, \n  Shield, \n  CheckCircle, \n  ExternalLink, \n  TrendingUp,\n  Crown,\n  Star\n} from 'lucide-react';\nimport { domainAnalysisService } from '@/lib/services/domainAnalysisService';\nimport { useAuth } from '@/contexts/AuthContext';\n\ninterface ProfessionalEmailUpsellProps {\n  userId?: string;\n  compact?: boolean;\n  onDismiss?: () => void;\n}\n\ninterface UpsellRecommendation {\n  title: string;\n  description: string;\n  urgency: 'low' | 'medium' | 'high';\n  benefits: string[];\n  pricing: string;\n  ctaText: string;\n}\n\nexport const ProfessionalEmailUpsell: React.FC<ProfessionalEmailUpsellProps> = ({\n  userId,\n  compact = false,\n  onDismiss\n}) => {\n  const { user } = useAuth();\n  const { toast } = useToast();\n  const [loading, setLoading] = useState(true);\n  const [recommendation, setRecommendation] = useState<UpsellRecommendation | null>(null);\n  const [showDetails, setShowDetails] = useState(false);\n\n  const effectiveUserId = userId || user?.id;\n\n  useEffect(() => {\n    const fetchUpsellRecommendation = async () => {\n      if (!effectiveUserId) return;\n\n      try {\n        setLoading(true);\n        const result = await domainAnalysisService.getMicrosoft365UpsellRecommendation(effectiveUserId);\n        \n        if (result.shouldShowUpsell && result.recommendation) {\n          setRecommendation(result.recommendation as UpsellRecommendation);\n        }\n      } catch (error) {\n        const errorMessage = error instanceof Error ? error.message : String(error);\n        logger.error({ err: error }, 'Error fetching upsell recommendation');\n      } finally {\n        setLoading(false);\n      }\n    };\n\n    fetchUpsellRecommendation();\n  }, [effectiveUserId]);\n\n  const handleGetStarted = () => {\n    // Track the upsell click\n    toast({\n      title: 'Redirecting to Microsoft 365',\n      description: 'We\\'ll help you set up professional email for your business.',\n    });\n\n    // In a real implementation, this would redirect to Microsoft 365 signup\n    // or open a setup flow within the app\n    window.open('https://www.microsoft.com/en-us/microsoft-365/business', '_blank');\n  };\n\n  const handleUpdateKPI = async () => {\n    if (!effectiveUserId) return;\n\n    try {\n      await domainAnalysisService.updateProfessionalEmailKPI(effectiveUserId, user?.company_id || '');\n      toast({\n        title: 'Business Health Updated',\n        description: 'Your professional email status has been updated.',\n      });\n      onDismiss?.();\n    } catch (error) {\n      const errorMessage = error instanceof Error ? error.message : String(error);\n      logger.error({ err: error }, 'Failed to update professional email KPI');\n      toast({\n        title: 'Update Failed',\n        description: 'Failed to update your business health metrics.',\n        variant: 'destructive'\n      });\n    }\n  };\n\n  if (loading) {\n    return (\n      <Card className=\"animate-pulse\">\n        <CardHeader>\n          <div className=\"h-4 bg-muted rounded w-3/4\"></div>\n        </CardHeader>\n        <CardContent>\n          <div className=\"space-y-2\">\n            <div className=\"h-3 bg-muted rounded\"></div>\n            <div className=\"h-3 bg-muted rounded w-5/6\"></div>\n          </div>\n        </CardContent>\n      </Card>\n    );\n  }\n\n  if (!recommendation) {\n    return null; // Don't show anything if no upsell needed\n  }\n\n  const urgencyColors = {\n    low: 'bg-primary/5 border-border',\n    medium: 'bg-warning/5 border-border',\n    high: 'bg-destructive/5 border-border'\n  };\n\n  const urgencyBadgeColors = {\n    low: 'bg-primary/10 text-primary',\n    medium: 'bg-warning/10 text-warning',\n    high: 'bg-destructive/10 text-destructive'\n  };\n\n  if (compact) {\n    return (\n      <Card className={`${urgencyColors[recommendation.urgency]} border-l-4`}>\n        <CardContent className=\"p-4\">\n          <div className=\"flex items-center justify-between\">\n            <div className=\"flex items-center space-x-3\">\n              <div className=\"p-2 bg-blue-100 rounded-lg\">\n                <Mail className=\"h-5 w-5 text-blue-600\" />\n              </div>\n              <div>\n                <h4 className=\"font-semibold text-sm\">{recommendation.title}</h4>\n                <p className=\"text-xs text-muted-foreground\">\n                  Boost credibility with professional email\n                </p>\n              </div>\n            </div>\n            <div className=\"flex items-center space-x-2\">\n              <Badge className={urgencyBadgeColors[recommendation.urgency]}>\n                {recommendation.urgency} priority\n              </Badge>\n              <Button size=\"sm\" onClick={handleGetStarted}>\n                Setup\n              </Button>\n            </div>\n          </div>\n        </CardContent>\n      </Card>\n    );\n  }\n\n  return (\n    <Card className={`${urgencyColors[recommendation.urgency]} border-l-4`}>\n      <CardHeader>\n        <div className=\"flex items-center justify-between\">\n          <CardTitle className=\"flex items-center space-x-2\">\n            <Crown className=\"h-5 w-5 text-blue-600\" />\n            <span>{recommendation.title}</span>\n            <Badge className={urgencyBadgeColors[recommendation.urgency]}>\n              {recommendation.urgency} priority\n            </Badge>\n          </CardTitle>\n          {onDismiss && (\n            <Button variant=\"ghost\" size=\"sm\" onClick={onDismiss}>\n              ×\n            </Button>\n          )}\n        </div>\n        <p className=\"text-muted-foreground\">{recommendation.description}</p>\n      </CardHeader>\n\n      <CardContent className=\"space-y-4\">\n        {/* Benefits */}\n        <div>\n          <h4 className=\"font-semibold mb-2 flex items-center\">\n            <Star className=\"h-4 w-4 mr-1 text-yellow-500\" />\n            Benefits\n          </h4>\n          <div className=\"grid grid-cols-1 md:grid-cols-2 gap-2\">\n            {recommendation.benefits.map((benefit: string, index: number) => (\n              <div key={index} className=\"flex items-center space-x-2 text-sm\">\n                <CheckCircle className=\"h-4 w-4 text-green-500 flex-shrink-0\" />\n                <span>{benefit}</span>\n              </div>\n            ))}\n          </div>\n        </div>\n\n        {/* Pricing */}\n        <div className=\"bg-white/50 rounded-lg p-3\">\n          <div className=\"flex items-center justify-between\">\n            <div>\n              <h4 className=\"font-semibold\">Pricing</h4>\n              <p className=\"text-lg font-bold text-blue-600\">{recommendation.pricing}</p>\n            </div>\n            <div className=\"text-right\">\n              <p className=\"text-sm text-muted-foreground\">Business Health Impact</p>\n              <div className=\"flex items-center\">\n                <TrendingUp className=\"h-4 w-4 text-green-500 mr-1\" />\n                <span className=\"font-semibold text-green-600\">+7 points</span>\n              </div>\n            </div>\n          </div>\n        </div>\n\n        {/* Security Features */}\n        {showDetails && (\n          <div className=\"space-y-3\">\n            <h4 className=\"font-semibold flex items-center\">\n              <Shield className=\"h-4 w-4 mr-1 text-blue-500\" />\n              Security & Compliance Features\n            </h4>\n            <div className=\"grid grid-cols-1 md:grid-cols-2 gap-2 text-sm\">\n              <div className=\"flex items-center space-x-2\">\n                <CheckCircle className=\"h-4 w-4 text-green-500\" />\n                <span>Advanced Threat Protection</span>\n              </div>\n              <div className=\"flex items-center space-x-2\">\n                <CheckCircle className=\"h-4 w-4 text-green-500\" />\n                <span>Data Loss Prevention</span>\n              </div>\n              <div className=\"flex items-center space-x-2\">\n                <CheckCircle className=\"h-4 w-4 text-green-500\" />\n                <span>Multi-factor Authentication</span>\n              </div>\n              <div className=\"flex items-center space-x-2\">\n                <CheckCircle className=\"h-4 w-4 text-green-500\" />\n                <span>Compliance Center</span>\n              </div>\n            </div>\n          </div>\n        )}\n\n        {/* Action Buttons */}\n        <div className=\"flex flex-col sm:flex-row gap-3\">\n          <Button \n            onClick={handleGetStarted}\n            className=\"flex-1 bg-blue-600 hover:bg-blue-700\"\n          >\n            <ExternalLink className=\"h-4 w-4 mr-2\" />\n            {recommendation.ctaText}\n          </Button>\n          <Button \n            variant=\"outline\" \n            onClick={() => setShowDetails(!showDetails)}\n            className=\"flex-1\"\n          >\n            {showDetails ? 'Hide Details' : 'Show Details'}\n          </Button>\n          <Button \n            variant=\"ghost\" \n            onClick={handleUpdateKPI}\n            className=\"flex-1\"\n          >\n            Already Have It\n          </Button>\n        </div>\n\n        {/* Additional Info */}\n        <div className=\"text-xs text-muted-foreground bg-white/30 rounded p-2\">\n          <p>\n            💡 <strong>Tip:</strong> Professional email addresses increase customer trust by \n            up to 42% and improve email deliverability rates significantly.\n          </p>\n        </div>\n      </CardContent>\n    </Card>\n  );\n}; ","usedDeprecatedRules":[]},{"filePath":"/home/vonj/Github/Nexus/src/components/ai/ProgressiveIntelligence.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'X' is defined but never used.","line":15,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":15,"endColumn":4},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":224,"column":21,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":224,"endColumn":24,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[6574,6577],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[6574,6577],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":236,"column":50,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":236,"endColumn":53,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[6895,6898],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[6895,6898],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":255,"column":48,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":255,"endColumn":51,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[7434,7437],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[7434,7437],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'executeApiCall' is assigned a value but never used.","line":265,"column":9,"nodeType":null,"messageId":"unusedVar","endLine":265,"endColumn":23},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":265,"column":41,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":265,"endColumn":44,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[7809,7812],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[7809,7812],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":289,"column":38,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":289,"endColumn":41,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[8419,8422],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[8419,8422],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":304,"column":47,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":304,"endColumn":50,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[8812,8815],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[8812,8815],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\n * Progressive Intelligence Component\n * Provides contextual insights, actions, and automation opportunities on any page\n * This component makes every page in Nexus \"learn\" and provide progressive value\n */\n\nimport React, { useState } from 'react';\nimport { \n  Brain, \n  TrendingUp, \n  AlertTriangle, \n  CheckCircle, \n  Clock, \n  Zap, \n  X, \n  ChevronRight,\n  Lightbulb,\n  Target,\n  Rocket,\n  Settings\n} from 'lucide-react';\nimport { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/Card';\nimport { Button } from '@/components/ui/Button';\nimport { Badge } from '@/components/ui/Badge';\nimport { useToast } from '@/components/ui/Toast';\n// import { useSecondBrain } from '@/lib/hooks/useSecondBrain';\nimport type { \n  BusinessInsight, \n  ProgressiveAction, \n  AutomationOpportunity \n} from '@/lib/types/learning-system';\n\ninterface ProgressiveIntelligenceProps {\n  pageId: string;\n  position?: 'sidebar' | 'header' | 'floating' | 'inline';\n  maxInsights?: number;\n  maxActions?: number;\n  showAutomations?: boolean;\n  compact?: boolean;\n}\n\nexport function ProgressiveIntelligence({\n  pageId,\n  position = 'sidebar',\n  maxInsights = 3,\n  maxActions = 2,\n  showAutomations = true,\n  compact = false\n}: ProgressiveIntelligenceProps) {\n  const [expandedInsight, setExpandedInsight] = useState<string | null>(null);\n  const [executingAction, setExecutingAction] = useState<string | null>(null);\n    const { showToast } = useToast();\n\n  // Mock data for demonstration - replace with actual hook when ready\n  const mockInsights: BusinessInsight[] = [\n    {\n      id: 'insight-1',\n      type: 'opportunity',\n      priority: 'high',\n      category: 'Revenue Growth',\n      title: 'Website conversion rate is 23% above industry average',\n      description: 'Your current conversion rate of 4.2% shows strong potential for scaling marketing efforts.',\n      dataSource: ['google-analytics', 'stripe'],\n      metrics: {\n        impact: 9,\n        confidence: 0.95,\n        timeToValue: 15,\n        effort: 2\n      },\n      suggestedActions: [],\n      automationPotential: null,\n      context: {\n        pageRelevance: [pageId],\n        triggerConditions: {},\n        historicalData: []\n      },\n      createdAt: new Date().toISOString(),\n      status: 'active'\n    },\n    {\n      id: 'insight-2',\n      type: 'risk',\n      priority: 'medium',\n      category: 'Team Performance',\n      title: 'Response time increasing in customer support',\n      description: 'Average response time has increased by 34% over the last week.',\n      dataSource: ['zendesk', 'slack'],\n      metrics: {\n        impact: 7,\n        confidence: 0.87,\n        timeToValue: 30,\n        effort: 3\n      },\n      suggestedActions: [],\n      automationPotential: null,\n      context: {\n        pageRelevance: [pageId],\n        triggerConditions: {},\n        historicalData: []\n      },\n      createdAt: new Date().toISOString(),\n      status: 'active'\n    }\n  ];\n\n  const mockActions: ProgressiveAction[] = [\n    {\n      id: 'action-1',\n      pageId,\n      position: 'contextual',\n      trigger: { type: 'page_load', conditions: {} },\n      action: {\n        id: 'optimize-landing-page',\n        type: 'guided_workflow',\n        title: 'Optimize Your Top Landing Page',\n        description: 'Improve the page that drives 67% of your conversions',\n        estimatedTime: 25,\n        difficulty: 'medium',\n        prerequisites: ['Google Analytics access'],\n        steps: [],\n        expectedOutcome: 'Increase conversion rate by 15-20%',\n        trackingMetrics: ['conversion_rate', 'bounce_rate']\n      },\n      displayConfig: {\n        style: 'card',\n        variant: 'primary',\n        dismissible: true,\n        persistent: false\n      },\n      analytics: {\n        impressions: 0,\n        clicks: 0,\n        completions: 0,\n        dismissals: 0,\n        avgTimeToAction: 0\n      }\n    }\n  ];\n\n  const mockAutomations: AutomationOpportunity[] = [\n    {\n      id: 'auto-1',\n      title: 'Automated Customer Onboarding Sequence',\n      description: 'Set up personalized email sequences based on user signup behavior',\n      type: 'n8n_workflow',\n      complexity: 'moderate',\n      estimatedSetupTime: 45,\n      estimatedTimeSavings: 180,\n      requiredIntegrations: ['mailchimp', 'stripe', 'slack'],\n      workflow: {\n        trigger: { type: 'webhook', config: {}, description: 'New customer signup' },\n        actions: []\n      },\n      riskLevel: 'low',\n      testingRequired: true\n    }\n  ];\n\n  const getInsightIcon = (type: BusinessInsight['type']) => {\n    switch (type) {\n      case 'opportunity': return <TrendingUp className=\"h-4 w-4 text-success\" />;\n      case 'risk': return <AlertTriangle className=\"h-4 w-4 text-warning\" />;\n      case 'achievement': return <CheckCircle className=\"h-4 w-4 text-primary\" />;\n      default: return <Lightbulb className=\"h-4 w-4 text-secondary\" />;\n    }\n  };\n\n  const getPriorityColor = (priority: string) => {\n    switch (priority) {\n      case 'high': return 'destructive';\n      case 'medium': return 'default';\n      case 'low': return 'secondary';\n      default: return 'outline';\n    }\n  };\n\n  const getDifficultyColor = (difficulty: string) => {\n    switch (difficulty) {\n      case 'easy': return 'bg-success/10 text-success';\n      case 'medium': return 'bg-warning/10 text-warning/80';\n      case 'hard': return 'bg-destructive/10 text-destructive';\n      default: return 'bg-muted text-foreground';\n    }\n  };\n\n  const handleExecuteAction = async (actionId: string) => {\n    setExecutingAction(actionId);\n    \n    try {\n      // Find the action to execute\n      const progressiveAction = mockActions.find(pa => pa.action.id === actionId);\n      if (!progressiveAction) {\n        throw new Error('Action not found');\n      }\n\n      const action = progressiveAction.action;\n\n      // Execute based on action type\n      switch (action.type) {\n        case 'automation':\n          await executeAutomationAction(action);\n          break;\n        case 'guided_workflow':\n          await executeGuidedWorkflow(action);\n          break;\n        case 'external_link':\n          executeNavigation(action);\n          break;\n        case 'quick_action':\n          await executeGenericAction(action);\n          break;\n        default:\n          // Generic action execution\n          await executeGenericAction(action);\n      }\n\n      // Mark action as completed\n      showToast({\n        title: 'Action Completed',\n        description: `Action \"${action.title}\" completed successfully`,\n        type: 'success'\n      });\n      \n    } catch (error: any) {\n      console.error('Action execution failed:', error);\n      showToast({\n        title: 'Action Failed',\n        description: `Failed to execute action: ${error.message}`,\n        type: 'error'\n      });\n    } finally {\n      setExecutingAction(null);\n    }\n  };\n\n  const executeAutomationAction = async (action: any) => {\n    // For automation actions, call the appropriate API or service\n    const response = await fetch('/api/ai/execute-automation', {\n      method: 'POST',\n      headers: { 'Content-Type': 'application/json' },\n      body: JSON.stringify({\n        actionId: action.id,\n        actionType: 'automation',\n        parameters: action.parameters || {}\n      })\n    });\n\n    if (!response.ok) {\n      throw new Error('Automation execution failed');\n    }\n\n    return response.json();\n  };\n\n  const executeGuidedWorkflow = async (action: any) => {\n    // For guided workflows, navigate to the workflow page or open modal\n    if (action.steps && action.steps.length > 0) {\n      // Open workflow modal or navigate to dedicated workflow page\n      window.location.href = `/workflows/${action.id}`;\n    } else {\n      throw new Error('No workflow steps defined');\n    }\n  };\n\n  const executeApiCall = async (action: any) => {\n    // Execute API calls based on action configuration\n    const { endpoint, method = 'POST', headers = {}, body } = action.apiConfig || {};\n    \n    if (!endpoint) {\n      throw new Error('No API endpoint configured');\n    }\n\n    const response = await fetch(endpoint, {\n      method,\n      headers: {\n        'Content-Type': 'application/json',\n        ...headers\n      },\n      body: body ? JSON.stringify(body) : undefined\n    });\n\n    if (!response.ok) {\n      throw new Error(`API call failed: ${response.status}`);\n    }\n\n    return response.json();\n  };\n\n  const executeNavigation = (action: any) => {\n    // For navigation actions, redirect to the specified URL\n    const { url, target = '_self' } = action.navigationConfig || {};\n    \n    if (!url) {\n      throw new Error('No navigation URL configured');\n    }\n\n    if (target === '_blank') {\n      window.open(url, '_blank');\n    } else {\n      window.location.href = url;\n    }\n  };\n\n  const executeGenericAction = async (action: any) => {\n    // For generic actions, simulate execution with realistic delay\n    const delay = Math.min(action.estimatedTime * 100, 3000); // Max 3 seconds\n    await new Promise(resolve => setTimeout(resolve, delay));\n  };\n\n  if (compact) {\n    return (\n      <div className=\"fixed bottom-4 right-4 z-50\">\n        <div className=\"bg-card rounded-full p-4 shadow-lg border cursor-pointer hover:shadow-xl transition-shadow\">\n          <Brain className=\"h-6 w-6 text-secondary\" />\n          <Badge className=\"absolute -top-2 -right-2 px-1 min-w-[20px] h-5 text-xs\">\n            {mockInsights.length}\n          </Badge>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className={`space-y-4 ${position === 'sidebar' ? 'w-80' : 'w-full'}`}>\n      {/* Header */}\n      <div className=\"flex items-center gap-4\">\n        <div className=\"p-2 bg-secondary/10 rounded-lg\">\n          <Brain className=\"h-5 w-5 text-secondary\" />\n        </div>\n        <div>\n          <h3 className=\"font-semibold text-foreground\">Nexus Intelligence</h3>\n          <p className=\"text-sm text-muted-foreground\">Learning from your business patterns</p>\n        </div>\n      </div>\n\n      {/* Insights Section */}\n      {mockInsights.length > 0 && (\n        <Card>\n          <CardHeader className=\"pb-3\">\n            <CardTitle className=\"text-sm font-medium flex items-center gap-2\">\n              <Target className=\"h-4 w-4\" />\n              Business Insights\n              <Badge variant=\"secondary\" className=\"ml-auto\">\n                {mockInsights.length}\n              </Badge>\n            </CardTitle>\n          </CardHeader>\n          <CardContent className=\"space-y-4\">\n            {mockInsights.slice(0, maxInsights).map((insight) => (\n              <div\n                key={insight.id}\n                className=\"border rounded-lg p-4 space-y-2\"\n              >\n                <div className=\"flex items-start gap-4\">\n                  {getInsightIcon(insight.type)}\n                  <div className=\"flex-1 min-w-0\">\n                    <div className=\"flex items-center gap-2 mb-1\">\n                      <h4 className=\"text-sm font-medium text-foreground truncate\">\n                        {insight.title}\n                      </h4>\n                      <Badge variant={getPriorityColor(insight.priority)} className=\"text-xs\">\n                        {insight.priority}\n                      </Badge>\n                    </div>\n                    <p className=\"text-xs text-muted-foreground mb-2\">\n                      {insight.description}\n                    </p>\n                    \n                    {/* Metrics */}\n                    <div className=\"flex items-center gap-4 text-xs text-muted-foreground\">\n                      <div className=\"flex items-center gap-1\">\n                        <TrendingUp className=\"h-3 w-3\" />\n                        Impact: {insight.metrics.impact}/10\n                      </div>\n                      <div className=\"flex items-center gap-1\">\n                        <Clock className=\"h-3 w-3\" />\n                        {insight.metrics.timeToValue}m\n                      </div>\n                    </div>\n                  </div>\n                  <Button\n                    variant=\"ghost\"\n                    size=\"sm\"\n                    onClick={() => setExpandedInsight(\n                      expandedInsight === insight.id ? null : insight.id\n                    )}\n                  >\n                    <ChevronRight className={`h-4 w-4 transition-transform ${\n                      expandedInsight === insight.id ? 'rotate-90' : ''\n                    }`} />\n                  </Button>\n                </div>\n\n                {/* Expanded Content */}\n                {expandedInsight === insight.id && (\n                  <div className=\"pt-2 border-t space-y-2\">\n                    <div className=\"text-xs text-muted-foreground\">\n                      <strong>Data Sources:</strong> {insight.dataSource.join(', ')}\n                    </div>\n                    <div className=\"text-xs text-muted-foreground\">\n                      <strong>Confidence:</strong> {(insight.metrics.confidence * 100).toFixed(0)}%\n                    </div>\n                    {insight.automationPotential && (\n                      <div className=\"text-xs text-secondary\">\n                        <Zap className=\"h-3 w-3 inline mr-1\" />\n                        Automation opportunity available\n                      </div>\n                    )}\n                  </div>\n                )}\n              </div>\n            ))}\n          </CardContent>\n        </Card>\n      )}\n\n      {/* Progressive Actions */}\n      {mockActions.length > 0 && (\n        <Card>\n          <CardHeader className=\"pb-3\">\n            <CardTitle className=\"text-sm font-medium flex items-center gap-2\">\n              <Rocket className=\"h-4 w-4\" />\n              Suggested Actions\n            </CardTitle>\n          </CardHeader>\n          <CardContent className=\"space-y-4\">\n            {mockActions.slice(0, maxActions).map((progressiveAction) => {\n              const action = progressiveAction.action;\n              return (\n                <div key={action.id} className=\"border rounded-lg p-4 space-y-4\">\n                  <div className=\"flex items-start justify-between\">\n                    <div className=\"flex-1\">\n                      <h4 className=\"text-sm font-medium text-foreground mb-1\">\n                        {action.title}\n                      </h4>\n                      <p className=\"text-xs text-muted-foreground mb-2\">\n                        {action.description}\n                      </p>\n                      \n                      <div className=\"flex items-center gap-4 text-xs\">\n                        <span className={`px-2 py-1 rounded-full ${getDifficultyColor(action.difficulty)}`}>\n                          {action.difficulty}\n                        </span>\n                        <div className=\"flex items-center gap-1 text-muted-foreground\">\n                          <Clock className=\"h-3 w-3\" />\n                          {action.estimatedTime}m\n                        </div>\n                      </div>\n                    </div>\n                  </div>\n\n                  <div className=\"space-y-2\">\n                    <div className=\"text-xs text-muted-foreground\">\n                      <strong>Expected Outcome:</strong> {action.expectedOutcome}\n                    </div>\n                    \n                    <Button\n                      size=\"sm\"\n                      className=\"w-full\"\n                      disabled={executingAction === action.id}\n                      onClick={() => handleExecuteAction(action.id)}\n                    >\n                      {executingAction === action.id ? (\n                        <>\n                          <div className=\"h-3 w-3 animate-spin rounded-full border-2 border-white border-t-transparent mr-2\" />\n                          Executing...\n                        </>\n                      ) : (\n                        <>\n                          <ChevronRight className=\"h-4 w-4 mr-2\" />\n                          Take Action\n                        </>\n                      )}\n                    </Button>\n                  </div>\n                </div>\n              );\n            })}\n          </CardContent>\n        </Card>\n      )}\n\n      {/* Automation Opportunities */}\n      {showAutomations && mockAutomations.length > 0 && (\n        <Card>\n          <CardHeader className=\"pb-3\">\n            <CardTitle className=\"text-sm font-medium flex items-center gap-2\">\n              <Zap className=\"h-4 w-4\" />\n              Automation Opportunities\n            </CardTitle>\n          </CardHeader>\n          <CardContent className=\"space-y-4\">\n            {mockAutomations.map((automation) => (\n              <div key={automation.id} className=\"border rounded-lg p-4 space-y-2\">\n                <div className=\"flex items-start justify-between\">\n                  <div className=\"flex-1\">\n                    <h4 className=\"text-sm font-medium text-foreground mb-1\">\n                      {automation.title}\n                    </h4>\n                    <p className=\"text-xs text-muted-foreground mb-2\">\n                      {automation.description}\n                    </p>\n                  </div>\n                </div>\n\n                <div className=\"grid grid-cols-2 gap-4 text-xs\">\n                  <div>\n                    <span className=\"text-muted-foreground\">Setup Time:</span>\n                    <div className=\"font-medium\">{automation.estimatedSetupTime}m</div>\n                  </div>\n                  <div>\n                    <span className=\"text-muted-foreground\">Weekly Savings:</span>\n                    <div className=\"font-medium text-success\">\n                      {Math.floor(automation.estimatedTimeSavings / 60)}h {automation.estimatedTimeSavings % 60}m\n                    </div>\n                  </div>\n                </div>\n\n                <div className=\"text-xs text-muted-foreground\">\n                  <strong>Required:</strong> {automation.requiredIntegrations.join(', ')}\n                </div>\n\n                <Button size=\"sm\" variant=\"outline\" className=\"w-full\">\n                  <Settings className=\"h-3 w-3 mr-2\" />\n                  Set Up Automation\n                </Button>\n              </div>\n            ))}\n          </CardContent>\n        </Card>\n      )}\n    </div>\n  );\n} ","usedDeprecatedRules":[]},{"filePath":"/home/vonj/Github/Nexus/src/components/ai/QuickChat.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'ChevronDown' is defined but never used.","line":8,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":8,"endColumn":14},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'MessageSquare' is defined but never used.","line":9,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":9,"endColumn":16},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'Zap' is defined but never used.","line":10,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":10,"endColumn":6},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'executiveAgent' is defined but never used.","line":15,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":15,"endColumn":24},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'handleExpandToFullChat' is assigned a value but never used.","line":136,"column":9,"nodeType":null,"messageId":"unusedVar","endLine":136,"endColumn":31},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'idx' is defined but never used.","line":169,"column":43,"nodeType":null,"messageId":"unusedVar","endLine":169,"endColumn":46}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState, useRef, useEffect } from 'react';\nimport PropTypes from 'prop-types';\nimport { \n  Send, \n  Sparkles, \n  Maximize2, \n  X,\n  ChevronDown,\n  MessageSquare,\n  Zap\n} from 'lucide-react';\nimport { useAuth } from '@/contexts/AuthContext';\nimport { useNavigate } from 'react-router-dom';\nimport { useAIChatStore, useActiveConversation } from '@/lib/stores/useAIChatStore';\nimport { executiveAgent } from '@/lib/ai/agentRegistry';\nimport { MVPScopeIndicator } from '@/components/chat/MVPScopeIndicator';\nimport { MessageFeedback } from '@/components/chat/MessageFeedback';\n\n/**\n * Quick Chat - Compact sidebar chat for quick interactions\n * Similar to GitHub Copilot Chat or VS Code chat assistants\n */\ninterface QuickChatProps {\n  isOpen: boolean;\n  onClose: () => void;\n  onExpandToFullChat: () => void;\n}\n\n/**\n * Compact message bubble for sidebar\n */\nconst CompactMessage: React.FC<{\n  message: { role: 'user' | 'assistant' | 'system'; content: string };\n  isUser: boolean;\n}> = ({ message, isUser }) => (\n  <div className={`flex gap-2 mb-3 ${isUser ? 'flex-row-reverse' : 'flex-row'}`}>\n    <div className={`w-6 h-6 rounded-full flex-shrink-0 flex items-center justify-center text-xs ${\n      isUser ? 'bg-primary text-primary-foreground' : 'bg-muted text-muted-foreground'\n    }`}>\n      {isUser ? 'U' : 'AI'}\n    </div>\n    <div className={`flex-1 min-w-0 ${isUser ? 'text-right' : 'text-left'}`}>\n      <div className={`inline-block max-w-full p-2 rounded-lg text-xs leading-relaxed ${\n        isUser \n          ? 'bg-primary text-primary-foreground ml-2' \n          : 'bg-muted text-foreground mr-2'\n      }`}>\n        <p className=\"whitespace-pre-wrap break-words\">{message.content}</p>\n      </div>\n    </div>\n  </div>\n);\n\n/**\n * Quick action suggestions\n */\nconst QuickActions: React.FC<{ onAction: (prompt: string) => void }> = ({ onAction }) => {\n  const actions = [\n    { label: 'Explain this code', prompt: 'Explain the current code I\\'m looking at' },\n    { label: 'Find bugs', prompt: 'Help me find potential bugs in this code' },\n    { label: 'Optimize', prompt: 'How can I optimize this code?' },\n    { label: 'Add comments', prompt: 'Add helpful comments to this code' }\n  ];\n\n  return (\n    <div className=\"p-4 border-b border-border\">\n      <h4 className=\"text-xs font-medium text-muted-foreground mb-2\">Quick Actions</h4>\n      <div className=\"grid grid-cols-2 gap-1\">\n        {actions.map((action) => (\n          <button\n            key={action.label}\n            onClick={() => onAction(action.prompt)}\n            className=\"p-2 text-xs rounded-md bg-muted/50 hover:bg-muted transition-colors text-left\"\n          >\n            {action.label}\n          </button>\n        ))}\n      </div>\n    </div>\n  );\n};\n\nconst QuickChatContent: React.FC<QuickChatProps> = ({ \n  isOpen, \n  onClose, \n  onExpandToFullChat \n}) => {\n  const [input, setInput] = useState('');\n  const { user } = useAuth();\n  const navigate = useNavigate();\n  const { sendMessage, loading, error, newConversation, setActiveConversation } = useAIChatStore();\n  const [conversationId, setConversationId] = useState<string>('');\n  const conversation = useActiveConversation();\n  const messagesEndRef = useRef<HTMLDivElement>(null);\n  const inputRef = useRef<HTMLTextAreaElement>(null);\n\n  useEffect(() => {\n    (async () => {\n      if (!conversationId && user?.id) {\n        // Use a stable quick chat conversation per user session\n        const id = await newConversation('Quick Chat');\n        setConversationId(id);\n        setActiveConversation(id);\n      }\n    })();\n  }, [user?.id, conversationId, newConversation, setActiveConversation]);\n\n  useEffect(() => {\n    messagesEndRef.current?.scrollIntoView({ behavior: 'smooth' });\n  }, [conversation?.messages.length]);\n\n  useEffect(() => {\n    if (inputRef.current) {\n      inputRef.current.style.height = 'auto';\n      inputRef.current.style.height = Math.min(inputRef.current.scrollHeight, 80) + 'px';\n    }\n  }, [input]);\n\n  const handleSend = async () => {\n    if (!input.trim() || !conversationId || !user?.id) return;\n    await sendMessage(conversationId, input, user.id, user.company_id || undefined);\n    setInput('');\n  };\n\n  const handleKeyDown = (e: React.KeyboardEvent) => {\n    if (e.key === 'Enter' && !e.shiftKey) {\n      e.preventDefault();\n      handleSend();\n    }\n  };\n\n  const handleQuickAction = (prompt: string) => {\n    setInput(prompt);\n  };\n\n  const handleExpandToFullChat = () => {\n    navigate('/chat', { \n      state: { \n        quickChatHistory: conversation?.messages || [],\n        initialPrompt: input \n      } \n    });\n    onExpandToFullChat();\n  };\n\n  if (!isOpen) return null;\n\n  return (\n    <div className=\"fixed right-4 bottom-4 w-80 h-96 bg-background border border-border rounded-xl shadow-2xl z-[120] flex flex-col overflow-hidden\">\n      {/* Header */}\n      <div className=\"flex items-center justify-between p-4 border-b border-border bg-background\">\n        <div className=\"flex items-center gap-2\">\n          <Sparkles className=\"w-5 h-5 text-primary\" />\n          <span className=\"font-semibold text-foreground\">Quick Chat</span>\n        </div>\n        <div className=\"flex items-center gap-2\">\n          <button onClick={onExpandToFullChat} title=\"Expand to full chat\" className=\"p-2 rounded hover:bg-muted transition-colors\">\n            <Maximize2 className=\"w-4 h-4\" />\n          </button>\n          <button onClick={onClose} title=\"Close\" className=\"p-2 rounded hover:bg-muted transition-colors\">\n            <X className=\"w-4 h-4\" />\n          </button>\n        </div>\n      </div>\n      <QuickActions onAction={handleQuickAction} />\n      {/* Messages */}\n      <div className=\"flex-1 overflow-y-auto p-4\">\n        {conversation?.messages && conversation.messages.length > 0 ? (\n          conversation.messages.map((msg, idx) => (\n            <div key={msg.id} className=\"mb-3\">\n              <CompactMessage message={msg} isUser={msg.role === 'user'} />\n              {/* Add feedback for AI responses */}\n              {msg.role === 'assistant' && (\n                <div className=\"mt-2 pl-8\">\n                  <MessageFeedback\n                    messageId={msg.id}\n                    conversationId={conversationId}\n                    agentId=\"quick-chat\"\n                    messageContent={msg.content}\n                    compact\n                  />\n                </div>\n              )}\n            </div>\n          ))\n        ) : (\n          <div className=\"h-full flex flex-col items-center justify-center\">\n            <div className=\"w-full mb-4\">\n              <MVPScopeIndicator compact />\n            </div>\n            <p className=\"text-xs text-muted-foreground text-center\">\n              Start a conversation with our IT Support assistant\n            </p>\n          </div>\n        )}\n        <div ref={messagesEndRef} />\n      </div>\n      {/* Input */}\n      <div className=\"p-2 border-t border-border flex items-center gap-2 bg-background\">\n        <textarea\n          ref={inputRef}\n          value={input}\n          onChange={e => setInput(e.target.value)}\n          onKeyDown={handleKeyDown}\n          placeholder=\"Type your message...\"\n          className=\"flex-1 resize-none rounded-lg border border-border p-2 text-xs bg-background focus:outline-none focus:ring-2 focus:ring-primary\"\n          rows={1}\n          disabled={loading}\n        />\n        <button\n          onClick={handleSend}\n          disabled={loading || !input.trim()}\n          className=\"ml-2 p-2 rounded-lg bg-primary text-primary-foreground hover:bg-primary/90 transition-colors disabled:opacity-50\"\n        >\n          <Send className=\"w-4 h-4\" />\n        </button>\n      </div>\n      {error && <div className=\"p-2 text-destructive text-xs\">{error}</div>}\n    </div>\n  );\n};\n\n// Error boundary wrapper\nexport const QuickChat: React.FC<QuickChatProps> = (props) => {\n  try {\n    return <QuickChatContent {...props} />;\n  } catch (error) {\n    console.error('QuickChat error:', error);\n    return (\n      <div className=\"fixed right-4 bottom-4 w-80 h-48 bg-background border border-border rounded-xl shadow-2xl z-50 flex flex-col items-center justify-center p-4\">\n        <X className=\"w-6 h-6 text-muted-foreground mb-2\" />\n        <p className=\"text-sm text-muted-foreground text-center\">\n          Chat temporarily unavailable. Please try again.\n        </p>\n        <button \n          onClick={props.onClose}\n          className=\"mt-2 px-4 py-1 text-xs bg-muted rounded-md hover:bg-muted/80\"\n        >\n          Close\n        </button>\n      </div>\n    );\n  }\n};\n\nQuickChat.propTypes = {\n  isOpen: PropTypes.bool.isRequired,\n  onClose: PropTypes.func.isRequired,\n  onExpandToFullChat: PropTypes.func.isRequired,\n};\n\nexport default QuickChat; ","usedDeprecatedRules":[]},{"filePath":"/home/vonj/Github/Nexus/src/components/ai/QuickChatTrigger.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/vonj/Github/Nexus/src/components/ai/ToolEnabledDemo.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'ExternalLink' is defined but never used.","line":15,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":15,"endColumn":15},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":32,"column":16,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":32,"endColumn":19,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[715,718],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[715,718],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\n * ToolEnabledDemo.tsx\n * Demonstrates the tool-enabled AI agent capabilities\n * Shows how Nex can access real business data and perform actions\n */\n\nimport React, { useState } from 'react';\nimport { \n  Zap, \n  Database, \n  Send, \n  Bot, \n  User, \n  CheckCircle, \n  ExternalLink,\n  BarChart3,\n  Calendar,\n  FileText,\n  Settings\n} from 'lucide-react';\nimport { motion } from 'framer-motion';\nimport { toolEnabledAgent } from '@/lib/aiAgentWithTools';\nimport { executiveAgent } from '@/lib/ai/agentRegistry';\nimport { useAuth } from '@/contexts/AuthContext';\n\ninterface DemoMessage {\n  id: string;\n  role: 'user' | 'assistant' | 'system';\n  content: string;\n  timestamp: Date;\n  toolUsed?: string;\n  toolResult?: any;\n}\n\nexport const ToolEnabledDemo: React.FC = () => {\n  const { user } = useAuth();\n  const [messages, setMessages] = useState<DemoMessage[]>([\n    {\n      id: '1',\n      role: 'system',\n      content: 'Welcome to the Tool-Enabled AI Demo! Try asking Nex to perform real business actions.',\n      timestamp: new Date()\n    }\n  ]);\n  const [input, setInput] = useState('');\n  const [isLoading, setIsLoading] = useState(false);\n\n  const demoQueries = [\n    {\n      icon: <BarChart3 className=\"w-4 h-4\" />,\n      text: \"Show me our sales metrics for this month\",\n      description: \"Access real sales data from CRM\"\n    },\n    {\n      icon: <Calendar className=\"w-4 h-4\" />,\n      text: \"Schedule a team meeting for next week\",\n      description: \"Create calendar events automatically\"\n    },\n    {\n      icon: <FileText className=\"w-4 h-4\" />,\n      text: \"Generate a proposal for a new client\",\n      description: \"Create business content using AI\"\n    },\n    {\n      icon: <Settings className=\"w-4 h-4\" />,\n      text: \"Create a workflow to automate our onboarding process\",\n      description: \"Build custom n8n workflows\"\n    }\n  ];\n\n  const handleSendMessage = async (message?: string) => {\n    const messageText = message || input.trim();\n    if (!messageText || isLoading || !user) return;\n\n    setInput('');\n    setIsLoading(true);\n\n    // Add user message\n    const userMessage: DemoMessage = {\n      id: Date.now().toString(),\n      role: 'user',\n      content: messageText,\n      timestamp: new Date()\n    };\n    setMessages(prev => [...prev, userMessage]);\n\n    try {\n      // Use tool-enabled agent\n      const result = await toolEnabledAgent.sendMessageWithTools(\n        'demo-conversation',\n        messageText,\n        executiveAgent,\n        `demo-session-${Date.now()}`,\n        { currentStep: 'demo' }\n      );\n\n      // Add AI response\n      const aiMessage: DemoMessage = {\n        id: (Date.now() + 1).toString(),\n        role: 'assistant',\n        content: result.content,\n        timestamp: new Date(),\n        toolUsed: result.toolUsed,\n        toolResult: result.toolResult\n      };\n      setMessages(prev => [...prev, aiMessage]);\n\n    } catch (error) {\n      console.error('Demo error:', error);\n      const errorMessage: DemoMessage = {\n        id: (Date.now() + 1).toString(),\n        role: 'assistant',\n        content: 'I encountered an error. In a real environment, I would have access to your business systems through n8n workflows.',\n        timestamp: new Date()\n      };\n      setMessages(prev => [...prev, errorMessage]);\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  const handleKeyDown = (e: React.KeyboardEvent) => {\n    if (e.key === 'Enter' && !e.shiftKey) {\n      e.preventDefault();\n      handleSendMessage();\n    }\n  };\n\n  return (\n    <div className=\"max-w-4xl mx-auto p-6\">\n      <div className=\"bg-gradient-to-r from-purple-50 to-blue-50 dark:from-purple-900/20 dark:to-blue-900/20 rounded-xl p-6 mb-6\">\n        <div className=\"flex items-center gap-4 mb-4\">\n          <div className=\"p-2 bg-primary/20 rounded-lg\">\n            <Zap className=\"w-6 h-6 text-primary\" />\n          </div>\n          <div>\n            <h2 className=\"text-xl font-bold text-foreground\">Tool-Enabled AI Agent Demo</h2>\n            <p className=\"text-muted-foreground\">Nex with real business capabilities through n8n workflows</p>\n          </div>\n        </div>\n\n        <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n          <div className=\"space-y-2\">\n            <h3 className=\"font-semibold text-foreground flex items-center gap-2\">\n              <Database className=\"w-4 h-4\" />\n              Business Intelligence\n            </h3>\n            <ul className=\"text-sm text-muted-foreground space-y-1\">\n              <li>• Access real sales metrics and financial data</li>\n              <li>• Analyze performance trends</li>\n              <li>• Generate business insights</li>\n            </ul>\n          </div>\n          <div className=\"space-y-2\">\n            <h3 className=\"font-semibold text-foreground flex items-center gap-2\">\n              <Settings className=\"w-4 h-4\" />\n              Action Execution\n            </h3>\n            <ul className=\"text-sm text-muted-foreground space-y-1\">\n              <li>• Create tasks and schedule meetings</li>\n              <li>• Send notifications to team members</li>\n              <li>• Build custom workflows</li>\n            </ul>\n          </div>\n        </div>\n      </div>\n\n      {/* Quick Actions */}\n      <div className=\"mb-6\">\n        <h3 className=\"text-lg font-semibold mb-3\">Try These Demo Queries</h3>\n        <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n          {demoQueries.map((query, index) => (\n            <button\n              key={index}\n              onClick={() => handleSendMessage(query.text)}\n              disabled={isLoading}\n              className=\"p-4 text-left border border-border rounded-lg hover:bg-primary/5 hover:border-primary/30 transition-all disabled:opacity-50\"\n            >\n              <div className=\"flex items-start gap-4\">\n                <div className=\"p-1 bg-primary/10 rounded\">\n                  {query.icon}\n                </div>\n                <div>\n                  <div className=\"font-medium text-foreground\">{query.text}</div>\n                  <div className=\"text-xs text-muted-foreground\">{query.description}</div>\n                </div>\n              </div>\n            </button>\n          ))}\n        </div>\n      </div>\n\n      {/* Chat Interface */}\n      <div className=\"border border-border rounded-xl overflow-hidden bg-background\">\n        {/* Messages */}\n        <div className=\"h-96 overflow-y-auto p-4 space-y-4\">\n          {messages.map((message) => (\n            <motion.div\n              key={message.id}\n              initial={{ opacity: 0, y: 20 }}\n              animate={{ opacity: 1, y: 0 }}\n              className={`flex gap-4 ${\n                message.role === 'user' ? 'flex-row-reverse' : 'flex-row'\n              }`}\n            >\n              <div className={`w-8 h-8 rounded-full flex items-center justify-center flex-shrink-0 ${\n                message.role === 'user' \n                  ? 'bg-primary text-primary-foreground' \n                  : message.role === 'system'\n                  ? 'bg-muted text-muted-foreground'\n                  : 'bg-gradient-to-br from-purple-500 to-blue-500 text-primary-foreground'\n              }`}>\n                {message.role === 'user' ? (\n                  <User className=\"w-4 h-4\" />\n                ) : (\n                  <Bot className=\"w-4 h-4\" />\n                )}\n              </div>\n              \n              <div className={`flex-1 max-w-[80%] ${\n                message.role === 'user' ? 'text-right' : 'text-left'\n              }`}>\n                <div className={`rounded-xl p-4 ${\n                  message.role === 'user'\n                    ? 'bg-primary text-primary-foreground ml-auto'\n                    : message.role === 'system'\n                    ? 'bg-muted text-muted-foreground'\n                    : 'bg-card border border-border'\n                }`}>\n                  <div className=\"text-sm leading-relaxed whitespace-pre-wrap\">\n                    {message.content}\n                  </div>\n                  \n                  {/* Tool Usage Indicator */}\n                  {message.toolUsed && (\n                    <div className=\"mt-2 pt-2 border-t border-border/50\">\n                      <div className=\"flex items-center gap-2 text-xs text-muted-foreground\">\n                        <Zap className=\"w-3 h-3\" />\n                        <span>Used tool: {message.toolUsed.replace(/_/g, ' ')}</span>\n                        {message.toolResult && (\n                          <div className=\"ml-auto\">\n                            <CheckCircle className=\"w-3 h-3 text-success\" />\n                          </div>\n                        )}\n                      </div>\n                    </div>\n                  )}\n                </div>\n                \n                <div className=\"text-xs text-muted-foreground mt-1\">\n                  {message.timestamp.toLocaleTimeString([], { \n                    hour: '2-digit', \n                    minute: '2-digit' \n                  })}\n                </div>\n              </div>\n            </motion.div>\n          ))}\n\n          {/* Loading indicator */}\n          {isLoading && (\n            <motion.div\n              initial={{ opacity: 0, y: 20 }}\n              animate={{ opacity: 1, y: 0 }}\n              className=\"flex gap-4\"\n            >\n              <div className=\"w-8 h-8 rounded-full bg-gradient-to-br from-purple-500 to-blue-500 text-primary-foreground flex items-center justify-center\">\n                <Bot className=\"w-4 h-4\" />\n              </div>\n              <div className=\"bg-card border border-border rounded-xl p-4\">\n                <div className=\"flex items-center gap-2 text-sm text-muted-foreground\">\n                  <div className=\"w-2 h-2 bg-primary rounded-full animate-bounce\" />\n                  <div className=\"w-2 h-2 bg-primary rounded-full animate-bounce\" style={{ animationDelay: '0.1s' }} />\n                  <div className=\"w-2 h-2 bg-primary rounded-full animate-bounce\" style={{ animationDelay: '0.2s' }} />\n                  <span className=\"ml-2\">Nex is working with business tools...</span>\n                </div>\n              </div>\n            </motion.div>\n          )}\n        </div>\n\n        {/* Input */}\n        <div className=\"border-t border-border p-4\">\n          <div className=\"flex gap-4\">\n            <input\n              type=\"text\"\n              value={input}\n              onChange={(e) => setInput(e.target.value)}\n              onKeyDown={handleKeyDown}\n              placeholder=\"Ask Nex to access business data or perform actions...\"\n              disabled={isLoading}\n              className=\"flex-1 px-4 py-2 text-sm bg-background border border-border rounded-lg focus:outline-none focus:ring-2 focus:ring-primary focus:border-primary\"\n            />\n            <button\n              onClick={() => handleSendMessage()}\n              disabled={!input.trim() || isLoading}\n              className=\"px-4 py-2 bg-primary text-primary-foreground rounded-lg hover:bg-primary/90 disabled:opacity-50 transition-all\"\n            >\n              <Send className=\"w-4 h-4\" />\n            </button>\n          </div>\n          <div className=\"text-xs text-muted-foreground mt-2\">\n            💡 This demo shows how Nex would interact with your business systems through n8n workflows\n          </div>\n        </div>\n      </div>\n\n      {/* Tool Capabilities */}\n      <div className=\"mt-6 p-4 bg-muted/30 rounded-lg\">\n        <h4 className=\"font-semibold mb-2 flex items-center gap-2\">\n          <Database className=\"w-4 h-4\" />\n          Available Tools\n        </h4>\n        <div className=\"grid grid-cols-2 md:grid-cols-4 gap-2 text-xs\">\n          {toolEnabledAgent.getAvailableTools().map((tool) => (\n            <div key={tool} className=\"p-2 bg-background rounded border border-border\">\n              <span className=\"font-mono\">{tool.replace(/_/g, ' ')}</span>\n            </div>\n          ))}\n        </div>\n      </div>\n    </div>\n  );\n}; ","usedDeprecatedRules":[]},{"filePath":"/home/vonj/Github/Nexus/src/components/ai/UserKnowledgeViewer.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'Separator' is defined but never used.","line":7,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":7,"endColumn":19},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'Settings' is defined but never used.","line":21,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":21,"endColumn":11},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'Clock' is defined but never used.","line":25,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":25,"endColumn":8},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'MapPin' is defined but never used.","line":28,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":28,"endColumn":9},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'Mail' is defined but never used.","line":29,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":29,"endColumn":7},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'Phone' is defined but never used.","line":30,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":30,"endColumn":8},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'Heart' is defined but never used.","line":34,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":34,"endColumn":8},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'ChevronRight' is defined but never used.","line":38,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":38,"endColumn":15},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":44,"column":27,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":44,"endColumn":30,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1086,1089],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1086,1089],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":45,"column":34,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":45,"endColumn":37,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1125,1128],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1125,1128],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":46,"column":33,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":46,"endColumn":36,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1163,1166],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1163,1166],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":50,"column":29,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":50,"endColumn":32,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1250,1253],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1250,1253],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":51,"column":34,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":51,"endColumn":37,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1289,1292],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1289,1292],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":52,"column":27,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":52,"endColumn":30,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1321,1324],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1321,1324],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":56,"column":34,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":56,"endColumn":37,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1414,1417],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1414,1417],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":57,"column":36,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":57,"endColumn":39,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1455,1458],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1455,1458],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":59,"column":42,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":59,"endColumn":45,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1531,1534],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1531,1534],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":64,"column":39,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":64,"endColumn":42,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1660,1663],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1660,1663],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":68,"column":25,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":68,"endColumn":28,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1748,1751],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1748,1751],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":70,"column":33,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":70,"endColumn":36,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1815,1818],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1815,1818],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":73,"column":24,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":73,"endColumn":27,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1866,1869],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1866,1869],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":74,"column":28,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":74,"endColumn":31,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1900,1903],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1900,1903],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":75,"column":26,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":75,"endColumn":29,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1932,1935],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1932,1935],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":76,"column":27,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":76,"endColumn":30,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1965,1968],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1965,1968],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has a missing dependency: 'loadUserKnowledge'. Either include it or remove the dependency array.","line":97,"column":6,"nodeType":"ArrayExpression","endLine":97,"endColumn":12,"suggestions":[{"desc":"Update the dependencies array to be: [loadUserKnowledge, user]","fix":{"range":[2483,2489],"text":"[loadUserKnowledge, user]"}}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":160,"column":29,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":160,"endColumn":32,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[4629,4632],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[4629,4632],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":165,"column":29,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":165,"endColumn":32,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[4809,4812],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[4809,4812],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":170,"column":29,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":170,"endColumn":32,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[4986,4989],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[4986,4989],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":189,"column":22,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":189,"endColumn":25,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[5649,5652],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[5649,5652],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'error' is defined but never used.","line":244,"column":14,"nodeType":null,"messageId":"unusedVar","endLine":244,"endColumn":19},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":276,"column":31,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":276,"endColumn":34,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[8340,8343],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[8340,8343],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":313,"column":51,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":313,"endColumn":54,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[9356,9359],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[9356,9359],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":313,"column":66,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":313,"endColumn":69,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[9371,9374],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[9371,9374],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":313,"column":85,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":313,"endColumn":88,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[9390,9393],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[9390,9393],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":328,"column":50,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":328,"endColumn":53,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[9861,9864],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[9861,9864],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":342,"column":49,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":342,"endColumn":52,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[10399,10402],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[10399,10402],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":352,"column":46,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":352,"endColumn":49,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[10707,10710],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[10707,10710],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":365,"column":55,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":365,"endColumn":58,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[11120,11123],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[11120,11123],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":375,"column":54,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":375,"endColumn":57,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[11577,11580],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[11577,11580],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":377,"column":21,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":377,"endColumn":24,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[11677,11680],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[11677,11680],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":378,"column":25,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":378,"endColumn":28,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[11713,11716],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[11713,11716],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":403,"column":50,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":403,"endColumn":53,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[12498,12501],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[12498,12501],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":414,"column":46,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":414,"endColumn":49,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[12853,12856],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[12853,12856],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":423,"column":54,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":423,"endColumn":57,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[13174,13177],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[13174,13177],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":432,"column":52,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":432,"endColumn":55,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[13506,13509],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[13506,13509],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":441,"column":54,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":441,"endColumn":57,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[13817,13820],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[13817,13820],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":452,"column":53,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":452,"endColumn":56,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[14136,14139],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[14136,14139],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":460,"column":46,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":460,"endColumn":49,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[14423,14426],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[14423,14426],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":476,"column":52,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":476,"endColumn":55,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[14911,14914],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[14911,14914],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":487,"column":51,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":487,"endColumn":54,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[15323,15326],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[15323,15326],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":501,"column":49,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":501,"endColumn":52,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[16017,16020],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[16017,16020],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":51,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState, useEffect } from 'react';\nimport { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/Card';\nimport { Badge } from '@/components/ui/Badge';\nimport { Button } from '@/components/ui/Button';\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from '@/components/ui/Tabs';\nimport { Progress } from '@/components/ui/Progress';\nimport { Separator } from '@/components/ui/Separator';\nimport { Alert, AlertDescription } from '@/components/ui/Alert';\nimport { useAuth } from '@/contexts/AuthContext';\nimport { supabase } from '../../lib/core/supabase';\nimport { ContextualRAG } from '@/lib/ai/contextualRAG';\nimport { thoughtsService } from '@/lib/services/thoughtsService';\nimport {\n  Brain,\n  User,\n  Building2,\n  Target,\n  Activity,\n  Lightbulb,\n  BarChart3,\n  Settings,\n  Eye,\n  RefreshCw,\n  Download,\n  Clock,\n  TrendingUp,\n  MessageSquare,\n  MapPin,\n  Mail,\n  Phone,\n  Globe,\n  Award,\n  Briefcase,\n  Heart,\n  Zap,\n  Database,\n  Shield,\n  ChevronRight,\n  Info\n} from 'lucide-react';\n\ninterface UserKnowledge {\n  profile: {\n    basic: Record<string, any>;\n    professional: Record<string, any>;\n    preferences: Record<string, any>;\n    completeness: number;\n  };\n  business_context: {\n    company: Record<string, any>;\n    role_context: Record<string, any>;\n    goals: Record<string, any>;\n    challenges: string[];\n  };\n  activity_patterns: {\n    session_data: Record<string, any>;\n    usage_patterns: Record<string, any>;\n    feature_usage: string[];\n    productivity_metrics: Record<string, any>;\n  };\n  ai_insights: {\n    thoughts_captured: number;\n    interactions_count: number;\n    learning_progress: Record<string, any>;\n    personalization_score: number;\n  };\n  integrations: {\n    connected_services: any[];\n    data_sources: string[];\n    sync_status: Record<string, any>;\n  };\n  memory_bank: {\n    personal_thoughts: any[];\n    business_observations: any[];\n    contextual_insights: any[];\n    conversation_history: any[];\n  };\n}\n\ninterface UserKnowledgeViewerProps {\n  className?: string;\n}\n\nexport const UserKnowledgeViewer: React.FC<UserKnowledgeViewerProps> = ({ \n  className = '' \n}) => {\n  const { user } = useAuth();\n  const [knowledge, setKnowledge] = useState<UserKnowledge | null>(null);\n  const [loading, setLoading] = useState(true);\n  const [activeTab, setActiveTab] = useState('overview');\n  const [refreshing, setRefreshing] = useState(false);\n\n  useEffect(() => {\n    if (user) {\n      loadUserKnowledge();\n    }\n  }, [user]);\n\n  const loadUserKnowledge = async () => {\n    if (!user) return;\n    \n    setLoading(true);\n    try {\n      // Fetch comprehensive user knowledge from multiple sources\n      const [\n        profileData,\n        thoughtsData,\n        interactionsData,\n        integrationsData,\n        conversationsData\n      ] = await Promise.all([\n        fetchProfileKnowledge(),\n        fetchThoughtsKnowledge(),\n        fetchInteractionsKnowledge(),\n        fetchIntegrationsKnowledge(),\n        fetchConversationKnowledge()\n      ]);\n\n      const compiledKnowledge: UserKnowledge = {\n        profile: profileData,\n        business_context: await fetchBusinessContext(),\n        activity_patterns: await fetchActivityPatterns(),\n        ai_insights: {\n          thoughts_captured: thoughtsData.total || 0,\n          interactions_count: interactionsData.total || 0,\n          learning_progress: thoughtsData.metrics || {},\n          personalization_score: calculatePersonalizationScore(profileData, thoughtsData, interactionsData)\n        },\n        integrations: integrationsData,\n        memory_bank: {\n          personal_thoughts: thoughtsData.recent || [],\n          business_observations: interactionsData.observations || [],\n          contextual_insights: await fetchContextualInsights(),\n          conversation_history: conversationsData.recent || []\n        }\n      };\n\n      setKnowledge(compiledKnowledge);\n    } catch (error) {\n      console.error('Error loading user knowledge:', error);\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const fetchProfileKnowledge = async () => {\n    const { data: profile } = await supabase\n      .from('user_profiles')\n      .select('*')\n      .eq('id', user?.id)\n      .single();\n\n    const basicFields = ['first_name', 'last_name', 'display_name', 'bio', 'location'];\n    const professionalFields = ['job_title', 'department', 'role', 'skills', 'hire_date'];\n    const preferenceFields = ['preferences', 'timezone', 'work_location'];\n\n    const basic = basicFields.reduce((acc, field) => {\n      if (profile?.[field]) acc[field] = profile[field];\n      return acc;\n    }, {} as Record<string, any>);\n\n    const professional = professionalFields.reduce((acc, field) => {\n      if (profile?.[field]) acc[field] = profile[field];\n      return acc;\n    }, {} as Record<string, any>);\n\n    const preferences = preferenceFields.reduce((acc, field) => {\n      if (profile?.[field]) acc[field] = profile[field];\n      return acc;\n    }, {} as Record<string, any>);\n\n    const totalFields = [...basicFields, ...professionalFields, ...preferenceFields];\n    const completedFields = totalFields.filter(field => profile?.[field]);\n    const completeness = Math.round((completedFields.length / totalFields.length) * 100);\n\n    return { basic, professional, preferences, completeness };\n  };\n\n  const fetchBusinessContext = async () => {\n    // Get company data\n    const { data: company } = await supabase\n      .from('companies')\n      .select('*')\n      .eq('id', user?.profile?.company_id)\n      .single();\n\n    // Define an interface for the expected preferences shape\n    interface UserPreferences {\n      user_context?: any;\n    }\n\n    // Get user context from onboarding\n    const preferences = user?.profile?.preferences as UserPreferences | null;\n    const userContext = preferences?.user_context || {};\n\n    return {\n      company: company || {},\n      role_context: userContext,\n      goals: {\n        immediate_goals: userContext.ideal_outcome || '',\n        biggest_challenge: userContext.biggest_challenge || '',\n        daily_frustration: userContext.daily_frustration || ''\n      },\n      challenges: [\n        userContext.biggest_challenge,\n        userContext.daily_frustration\n      ].filter(Boolean)\n    };\n  };\n\n  const fetchActivityPatterns = async () => {\n    // Get recent activity from ai_interactions\n    const { data: interactions } = await supabase\n      .from('ai_interactions')\n      .select('*')\n      .eq('user_id', user?.id)\n      .order('created_at', { ascending: false })\n      .limit(100);\n\n    const sessionData = calculateSessionMetrics(interactions || []);\n    const usagePatterns = calculateUsagePatterns(interactions || []);\n    const featureUsage = extractFeatureUsage(interactions || []);\n\n    return {\n      session_data: sessionData,\n      usage_patterns: usagePatterns,\n      feature_usage: featureUsage,\n      productivity_metrics: calculateProductivityMetrics(interactions || [])\n    };\n  };\n\n  const fetchThoughtsKnowledge = async () => {\n    try {\n      const [thoughts, metrics] = await Promise.all([\n        thoughtsService.getThoughts({}, 10),\n        thoughtsService.getMetrics()\n      ]);\n\n      return {\n        total: thoughts.thoughts.length,\n        recent: thoughts.thoughts.slice(0, 5),\n        metrics: metrics\n      };\n    } catch (error) {\n      return { total: 0, recent: [], metrics: {} };\n    }\n  };\n\n  const fetchInteractionsKnowledge = async () => {\n    const { data: interactions } = await supabase\n      .from('ai_interactions')\n      .select('*')\n      .eq('user_id', user?.id)\n      .order('created_at', { ascending: false })\n      .limit(50);\n\n    return {\n      total: interactions?.length || 0,\n      observations: extractBusinessObservations(interactions || []),\n      patterns: analyzeInteractionPatterns(interactions || [])\n    };\n  };\n\n  const fetchIntegrationsKnowledge = async () => {\n    const { data: integrations } = await supabase\n      .from('user_integrations')\n      .select('*')\n      .eq('user_id', user?.id);\n\n    return {\n      connected_services: integrations || [],\n      data_sources: (integrations || []).map(i => i.integration_type),\n      sync_status: (integrations || []).reduce((acc, integration) => {\n        acc[integration.integration_type] = integration.status;\n        return acc;\n      }, {} as Record<string, any>)\n    };\n  };\n\n  const fetchConversationKnowledge = async () => {\n    const { data: conversations } = await supabase\n      .from('conversations')\n      .select('*, chat_messages(*)')\n      .eq('user_id', user?.id)\n      .order('updated_at', { ascending: false })\n      .limit(10);\n\n    return {\n      recent: conversations || [],\n      total_conversations: conversations?.length || 0,\n      total_messages: conversations?.reduce((acc, conv) => acc + (conv.chat_messages?.length || 0), 0) || 0\n    };\n  };\n\n  const fetchContextualInsights = async () => {\n    // Initialize ContextualRAG to get insights\n    const rag = new ContextualRAG();\n    await rag.initialize(user?.id || '');\n    \n    // Extract personalization insights\n    const insights = rag.generatePersonalizationInsights();\n    \n    return [\n      {\n        type: 'personalization',\n        content: insights,\n        generated_at: new Date().toISOString()\n      }\n    ];\n  };\n\n  // Helper functions\n  const calculatePersonalizationScore = (profile: any, thoughts: any, interactions: any): number => {\n    let score = 0;\n    \n    // Profile completeness (40 points)\n    score += (profile.completeness / 100) * 40;\n    \n    // Thoughts captured (30 points)\n    if (thoughts.total > 0) score += Math.min(thoughts.total * 2, 30);\n    \n    // Interaction history (30 points)\n    if (interactions.total > 0) score += Math.min(interactions.total * 1, 30);\n    \n    return Math.min(Math.round(score), 100);\n  };\n\n  const calculateSessionMetrics = (interactions: any[]) => {\n    if (interactions.length === 0) return {};\n    \n    const sessions = groupInteractionsBySessions(interactions);\n    const avgSessionLength = sessions.reduce((acc, session) => acc + session.duration, 0) / sessions.length;\n    \n    return {\n      total_sessions: sessions.length,\n      avg_session_duration: Math.round(avgSessionLength / 60), // minutes\n      last_active: interactions[0]?.created_at,\n      most_active_time: findMostActiveTimeOfDay(interactions)\n    };\n  };\n\n  const calculateUsagePatterns = (interactions: any[]) => {\n    const patterns = {\n      daily_usage: calculateDailyUsage(interactions),\n      feature_preferences: calculateFeaturePreferences(interactions),\n      interaction_types: calculateInteractionTypes(interactions)\n    };\n    \n    return patterns;\n  };\n\n  const extractFeatureUsage = (interactions: any[]): string[] => {\n    const features = new Set<string>();\n    interactions.forEach(interaction => {\n      if (interaction.metadata?.feature) {\n        features.add(interaction.metadata.feature);\n      }\n      if (interaction.metadata?.agent_id) {\n        features.add(interaction.metadata.agent_id);\n      }\n    });\n    return Array.from(features);\n  };\n\n  const calculateProductivityMetrics = (interactions: any[]) => {\n    return {\n      questions_asked: interactions.filter(i => i.interaction_type === 'question').length,\n      actions_taken: interactions.filter(i => i.interaction_type === 'action').length,\n      insights_generated: interactions.filter(i => i.interaction_type === 'insight').length,\n      avg_response_satisfaction: calculateAverageRating(interactions)\n    };\n  };\n\n  // UI Helper functions\n  const groupInteractionsBySessions = (interactions: any[]) => {\n    // Group interactions into sessions (30 min gaps = new session)\n    const sessions: any[] = [];\n    let currentSession: any = null;\n    \n    interactions.forEach(interaction => {\n      const timestamp = new Date(interaction.created_at).getTime();\n      \n      if (!currentSession || (timestamp - currentSession.lastActivity) > 30 * 60 * 1000) {\n        currentSession = {\n          start: timestamp,\n          end: timestamp,\n          lastActivity: timestamp,\n          interactions: [interaction],\n          duration: 0\n        };\n        sessions.push(currentSession);\n      } else {\n        currentSession.interactions.push(interaction);\n        currentSession.end = timestamp;\n        currentSession.lastActivity = timestamp;\n        currentSession.duration = currentSession.end - currentSession.start;\n      }\n    });\n    \n    return sessions;\n  };\n\n  const findMostActiveTimeOfDay = (interactions: any[]): string => {\n    const hourCounts = new Array(24).fill(0);\n    interactions.forEach(interaction => {\n      const hour = new Date(interaction.created_at).getHours();\n      hourCounts[hour]++;\n    });\n    \n    const maxHour = hourCounts.indexOf(Math.max(...hourCounts));\n    return `${maxHour}:00`;\n  };\n\n  const calculateDailyUsage = (interactions: any[]) => {\n    const dailyCounts: Record<string, number> = {};\n    interactions.forEach(interaction => {\n      const date = new Date(interaction.created_at).toDateString();\n      dailyCounts[date] = (dailyCounts[date] || 0) + 1;\n    });\n    return dailyCounts;\n  };\n\n  const calculateFeaturePreferences = (interactions: any[]) => {\n    const featureCounts: Record<string, number> = {};\n    interactions.forEach(interaction => {\n      const feature = interaction.metadata?.agent_id || 'general';\n      featureCounts[feature] = (featureCounts[feature] || 0) + 1;\n    });\n    return featureCounts;\n  };\n\n  const calculateInteractionTypes = (interactions: any[]) => {\n    const typeCounts: Record<string, number> = {};\n    interactions.forEach(interaction => {\n      const type = interaction.interaction_type || 'unknown';\n      typeCounts[type] = (typeCounts[type] || 0) + 1;\n    });\n    return typeCounts;\n  };\n\n  const extractBusinessObservations = (interactions: any[]) => {\n    return interactions\n      .filter(i => i.metadata?.business_observation)\n      .map(i => ({\n        observation: i.metadata.business_observation,\n        context: i.metadata.context,\n        timestamp: i.created_at\n      }))\n      .slice(0, 5);\n  };\n\n  const analyzeInteractionPatterns = (interactions: any[]) => {\n    return {\n      most_common_topics: extractCommonTopics(interactions),\n      preferred_interaction_style: determineInteractionStyle(interactions),\n      learning_progression: trackLearningProgression(interactions)\n    };\n  };\n\n  const extractCommonTopics = (interactions: any[]): string[] => {\n    const topics: Record<string, number> = {};\n    interactions.forEach(interaction => {\n      if (interaction.metadata?.topic_tags) {\n        interaction.metadata.topic_tags.forEach((topic: string) => {\n          topics[topic] = (topics[topic] || 0) + 1;\n        });\n      }\n    });\n    \n    return Object.entries(topics)\n      .sort(([,a], [,b]) => b - a)\n      .slice(0, 5)\n      .map(([topic]) => topic);\n  };\n\n  const determineInteractionStyle = (interactions: any[]): string => {\n    const styles = analyzeInteractionPatterns(interactions);\n    if (Object.values(styles).every(v => v === 0)) return 'balanced';\n    \n    type StyleKey = keyof typeof styles;\n    const maxStyle = Object.entries(styles).reduce((a, b) => \n      styles[a[0] as StyleKey] > styles[b[0] as StyleKey] ? a : b\n    );\n    return maxStyle[0];\n  };\n\n  const trackLearningProgression = (interactions: any[]) => {\n    // Analyze how user's questions/interactions have evolved over time\n    const early = interactions.slice(-Math.floor(interactions.length * 0.7));\n    const recent = interactions.slice(0, Math.floor(interactions.length * 0.3));\n    \n    return {\n      early_topics: extractCommonTopics(early).slice(0, 3),\n      recent_topics: extractCommonTopics(recent).slice(0, 3),\n      complexity_increase: recent.length > 0 && early.length > 0 ? \n        (recent.reduce((acc, i) => acc + (i.content?.length || 0), 0) / recent.length) >\n        (early.reduce((acc, i) => acc + (i.content?.length || 0), 0) / early.length) : false\n    };\n  };\n\n  const calculateAverageRating = (interactions: any[]): number => {\n    const ratedInteractions = interactions.filter(i => i.metadata?.user_rating);\n    if (ratedInteractions.length === 0) return 0;\n    \n    const totalRating = ratedInteractions.reduce((acc, i) => acc + (i.metadata.user_rating || 0), 0);\n    return Math.round((totalRating / ratedInteractions.length) * 10) / 10;\n  };\n\n  const handleRefresh = async () => {\n    setRefreshing(true);\n    await loadUserKnowledge();\n    setRefreshing(false);\n  };\n\n  const handleExportData = async () => {\n    if (!knowledge) return;\n    \n    const dataBlob = new Blob([JSON.stringify(knowledge, null, 2)], {\n      type: 'application/json'\n    });\n    \n    const url = URL.createObjectURL(dataBlob);\n    const a = document.createElement('a');\n    a.href = url;\n    a.download = `nexus-user-knowledge-${new Date().toISOString().split('T')[0]}.json`;\n    document.body.appendChild(a);\n    a.click();\n    document.body.removeChild(a);\n    URL.revokeObjectURL(url);\n  };\n\n  if (loading) {\n    return (\n      <div className={`space-y-6 ${className}`}>\n        <div className=\"flex items-center justify-center py-12\">\n          <RefreshCw className=\"h-8 w-8 animate-spin text-primary\" />\n          <span className=\"ml-3 text-lg\">Loading your knowledge profile...</span>\n        </div>\n      </div>\n    );\n  }\n\n  if (!knowledge) {\n    return (\n      <Alert>\n        <Info className=\"h-4 w-4\" />\n        <AlertDescription>\n          Unable to load your knowledge profile. Please try refreshing the page.\n        </AlertDescription>\n      </Alert>\n    );\n  }\n\n  return (\n    <div className={`space-y-6 ${className}`}>\n      {/* Header */}\n      <div className=\"flex items-center justify-between\">\n        <div>\n          <h1 className=\"text-3xl font-bold flex items-center gap-3\">\n            <Brain className=\"h-8 w-8 text-primary\" />\n            What Nexus Knows About You\n          </h1>\n          <p className=\"text-muted-foreground mt-2\">\n            Complete overview of your personal and business context that powers your AI experience\n          </p>\n        </div>\n        <div className=\"flex gap-2\">\n          <Button \n            variant=\"outline\" \n            onClick={handleRefresh}\n            disabled={refreshing}\n          >\n            <RefreshCw className={`h-4 w-4 mr-2 ${refreshing ? 'animate-spin' : ''}`} />\n            Refresh\n          </Button>\n          <Button \n            variant=\"outline\" \n            onClick={handleExportData}\n          >\n            <Download className=\"h-4 w-4 mr-2\" />\n            Export Data\n          </Button>\n        </div>\n      </div>\n\n      {/* Knowledge Overview Cards */}\n      <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-4\">\n        <Card>\n          <CardContent className=\"p-6\">\n            <div className=\"flex items-center justify-between\">\n              <div>\n                <p className=\"text-sm font-medium text-muted-foreground\">Profile Completeness</p>\n                <p className=\"text-2xl font-bold\">{knowledge.profile.completeness}%</p>\n              </div>\n              <User className=\"h-8 w-8 text-primary\" />\n            </div>\n            <Progress value={knowledge.profile.completeness} className=\"mt-3\" />\n          </CardContent>\n        </Card>\n\n        <Card>\n          <CardContent className=\"p-6\">\n            <div className=\"flex items-center justify-between\">\n              <div>\n                <p className=\"text-sm font-medium text-muted-foreground\">Personalization Score</p>\n                <p className=\"text-2xl font-bold\">{knowledge.ai_insights.personalization_score}%</p>\n              </div>\n              <Zap className=\"h-8 w-8 text-primary\" />\n            </div>\n            <Progress value={knowledge.ai_insights.personalization_score} className=\"mt-3\" />\n          </CardContent>\n        </Card>\n\n        <Card>\n          <CardContent className=\"p-6\">\n            <div className=\"flex items-center justify-between\">\n              <div>\n                <p className=\"text-sm font-medium text-muted-foreground\">Thoughts Captured</p>\n                <p className=\"text-2xl font-bold\">{knowledge.ai_insights.thoughts_captured}</p>\n              </div>\n              <Lightbulb className=\"h-8 w-8 text-primary\" />\n            </div>\n          </CardContent>\n        </Card>\n\n        <Card>\n          <CardContent className=\"p-6\">\n            <div className=\"flex items-center justify-between\">\n              <div>\n                <p className=\"text-sm font-medium text-muted-foreground\">Connected Services</p>\n                <p className=\"text-2xl font-bold\">{knowledge.integrations.connected_services.length}</p>\n              </div>\n              <Database className=\"h-8 w-8 text-primary\" />\n            </div>\n          </CardContent>\n        </Card>\n      </div>\n\n      {/* Detailed Knowledge Tabs */}\n      <Tabs value={activeTab} onValueChange={setActiveTab}>\n        <TabsList className=\"grid w-full grid-cols-6\">\n          <TabsTrigger value=\"overview\">Overview</TabsTrigger>\n          <TabsTrigger value=\"profile\">Profile</TabsTrigger>\n          <TabsTrigger value=\"business\">Business</TabsTrigger>\n          <TabsTrigger value=\"activity\">Activity</TabsTrigger>\n          <TabsTrigger value=\"memory\">Memory</TabsTrigger>\n          <TabsTrigger value=\"integrations\">Integrations</TabsTrigger>\n        </TabsList>\n\n        {/* Overview Tab */}\n        <TabsContent value=\"overview\" className=\"space-y-6\">\n          <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-6\">\n            {/* Personal Context */}\n            <Card>\n              <CardHeader>\n                <CardTitle className=\"flex items-center gap-2\">\n                  <User className=\"h-5 w-5\" />\n                  Personal Context\n                </CardTitle>\n              </CardHeader>\n              <CardContent className=\"space-y-4\">\n                <div>\n                  <h4 className=\"font-medium text-sm text-muted-foreground\">Name</h4>\n                  <p className=\"text-lg\">{knowledge.profile.basic.display_name || knowledge.profile.basic.first_name || 'Not provided'}</p>\n                </div>\n                <div>\n                  <h4 className=\"font-medium text-sm text-muted-foreground\">Role</h4>\n                  <p>{knowledge.profile.professional.job_title || 'Not specified'}</p>\n                </div>\n                <div>\n                  <h4 className=\"font-medium text-sm text-muted-foreground\">Department</h4>\n                  <p>{knowledge.profile.professional.department || 'Not specified'}</p>\n                </div>\n                <div>\n                  <h4 className=\"font-medium text-sm text-muted-foreground\">Location</h4>\n                  <p>{knowledge.profile.basic.location || 'Not provided'}</p>\n                </div>\n              </CardContent>\n            </Card>\n\n            {/* Business Context */}\n            <Card>\n              <CardHeader>\n                <CardTitle className=\"flex items-center gap-2\">\n                  <Building2 className=\"h-5 w-5\" />\n                  Business Context\n                </CardTitle>\n              </CardHeader>\n              <CardContent className=\"space-y-4\">\n                <div>\n                  <h4 className=\"font-medium text-sm text-muted-foreground\">Company</h4>\n                  <p className=\"text-lg\">{knowledge.business_context.company.name || 'Not provided'}</p>\n                </div>\n                <div>\n                  <h4 className=\"font-medium text-sm text-muted-foreground\">Industry</h4>\n                  <p>{knowledge.business_context.company.industry || 'Not specified'}</p>\n                </div>\n                <div>\n                  <h4 className=\"font-medium text-sm text-muted-foreground\">Company Size</h4>\n                  <p>{knowledge.business_context.company.size || 'Not specified'}</p>\n                </div>\n                <div>\n                  <h4 className=\"font-medium text-sm text-muted-foreground\">Current Goals</h4>\n                  <p className=\"text-sm\">{knowledge.business_context.goals.immediate_goals || 'Not defined'}</p>\n                </div>\n              </CardContent>\n            </Card>\n          </div>\n\n          {/* AI Intelligence Summary */}\n          <Card>\n            <CardHeader>\n              <CardTitle className=\"flex items-center gap-2\">\n                <Brain className=\"h-5 w-5\" />\n                AI Intelligence Summary\n              </CardTitle>\n            </CardHeader>\n            <CardContent>\n              <div className=\"grid grid-cols-1 md:grid-cols-3 gap-6\">\n                <div className=\"text-center\">\n                  <div className=\"text-3xl font-bold text-primary\">{knowledge.ai_insights.thoughts_captured}</div>\n                  <p className=\"text-sm text-muted-foreground\">Personal thoughts captured</p>\n                </div>\n                <div className=\"text-center\">\n                  <div className=\"text-3xl font-bold text-primary\">{knowledge.ai_insights.interactions_count}</div>\n                  <p className=\"text-sm text-muted-foreground\">AI interactions</p>\n                </div>\n                <div className=\"text-center\">\n                  <div className=\"text-3xl font-bold text-primary\">{knowledge.integrations.connected_services.length}</div>\n                  <p className=\"text-sm text-muted-foreground\">Data sources connected</p>\n                </div>\n              </div>\n              \n              {knowledge.business_context.challenges.length > 0 && (\n                <div className=\"mt-6\">\n                  <h4 className=\"font-medium mb-3\">Known Challenges</h4>\n                  <div className=\"space-y-2\">\n                    {knowledge.business_context.challenges.map((challenge, index) => (\n                      <div key={index} className=\"flex items-start gap-2\">\n                        <Target className=\"h-4 w-4 mt-1 text-warning\" />\n                        <p className=\"text-sm\">{challenge}</p>\n                      </div>\n                    ))}\n                  </div>\n                </div>\n              )}\n            </CardContent>\n          </Card>\n        </TabsContent>\n\n        {/* Profile Tab */}\n        <TabsContent value=\"profile\" className=\"space-y-6\">\n          <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-6\">\n            {/* Basic Information */}\n            <Card>\n              <CardHeader>\n                <CardTitle>Basic Information</CardTitle>\n              </CardHeader>\n              <CardContent className=\"space-y-3\">\n                {Object.entries(knowledge.profile.basic).map(([key, value]) => (\n                  <div key={key} className=\"flex justify-between\">\n                    <span className=\"text-sm text-muted-foreground capitalize\">\n                      {key.replace('_', ' ')}\n                    </span>\n                    <span className=\"text-sm font-medium\">{value || 'Not provided'}</span>\n                  </div>\n                ))}\n              </CardContent>\n            </Card>\n\n            {/* Professional Information */}\n            <Card>\n              <CardHeader>\n                <CardTitle>Professional Information</CardTitle>\n              </CardHeader>\n              <CardContent className=\"space-y-3\">\n                {Object.entries(knowledge.profile.professional).map(([key, value]) => (\n                  <div key={key} className=\"flex justify-between\">\n                    <span className=\"text-sm text-muted-foreground capitalize\">\n                      {key.replace('_', ' ')}\n                    </span>\n                    <span className=\"text-sm font-medium\">\n                      {Array.isArray(value) ? value.join(', ') : (value || 'Not provided')}\n                    </span>\n                  </div>\n                ))}\n              </CardContent>\n            </Card>\n          </div>\n\n          {/* Skills */}\n          {knowledge.profile.professional.skills && (\n            <Card>\n              <CardHeader>\n                <CardTitle className=\"flex items-center gap-2\">\n                  <Award className=\"h-5 w-5\" />\n                  Skills & Expertise\n                </CardTitle>\n              </CardHeader>\n              <CardContent>\n                <div className=\"flex flex-wrap gap-2\">\n                  {knowledge.profile.professional.skills.map((skill: string, index: number) => (\n                    <Badge key={index} variant=\"secondary\">\n                      {skill}\n                    </Badge>\n                  ))}\n                </div>\n              </CardContent>\n            </Card>\n          )}\n        </TabsContent>\n\n        {/* Business Tab */}\n        <TabsContent value=\"business\" className=\"space-y-6\">\n          <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-6\">\n            {/* Company Information */}\n            <Card>\n              <CardHeader>\n                <CardTitle className=\"flex items-center gap-2\">\n                  <Building2 className=\"h-5 w-5\" />\n                  Company Information\n                </CardTitle>\n              </CardHeader>\n              <CardContent className=\"space-y-3\">\n                {Object.entries(knowledge.business_context.company).map(([key, value]) => (\n                  <div key={key} className=\"flex justify-between\">\n                    <span className=\"text-sm text-muted-foreground capitalize\">\n                      {key.replace('_', ' ')}\n                    </span>\n                    <span className=\"text-sm font-medium\">{value || 'Not provided'}</span>\n                  </div>\n                ))}\n              </CardContent>\n            </Card>\n\n            {/* Role Context */}\n            <Card>\n              <CardHeader>\n                <CardTitle className=\"flex items-center gap-2\">\n                  <Briefcase className=\"h-5 w-5\" />\n                  Role Context\n                </CardTitle>\n              </CardHeader>\n              <CardContent className=\"space-y-3\">\n                {Object.entries(knowledge.business_context.role_context).map(([key, value]) => (\n                  <div key={key}>\n                    <h4 className=\"text-sm font-medium text-muted-foreground capitalize mb-1\">\n                      {key.replace('_', ' ')}\n                    </h4>\n                    <p className=\"text-sm\">{value || 'Not provided'}</p>\n                  </div>\n                ))}\n              </CardContent>\n            </Card>\n          </div>\n\n          {/* Goals and Challenges */}\n          <Card>\n            <CardHeader>\n              <CardTitle className=\"flex items-center gap-2\">\n                <Target className=\"h-5 w-5\" />\n                Goals & Challenges\n              </CardTitle>\n            </CardHeader>\n            <CardContent className=\"space-y-4\">\n              {Object.entries(knowledge.business_context.goals).map(([key, value]) => (\n                <div key={key}>\n                  <h4 className=\"text-sm font-medium text-muted-foreground capitalize mb-2\">\n                    {key.replace('_', ' ')}\n                  </h4>\n                  <p className=\"text-sm bg-muted p-3 rounded-lg\">{value || 'Not defined'}</p>\n                </div>\n              ))}\n            </CardContent>\n          </Card>\n        </TabsContent>\n\n        {/* Activity Tab */}\n        <TabsContent value=\"activity\" className=\"space-y-6\">\n          <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-6\">\n            {/* Session Data */}\n            <Card>\n              <CardHeader>\n                <CardTitle className=\"flex items-center gap-2\">\n                  <Activity className=\"h-5 w-5\" />\n                  Session Analytics\n                </CardTitle>\n              </CardHeader>\n              <CardContent className=\"space-y-3\">\n                {Object.entries(knowledge.activity_patterns.session_data).map(([key, value]) => (\n                  <div key={key} className=\"flex justify-between\">\n                    <span className=\"text-sm text-muted-foreground capitalize\">\n                      {key.replace('_', ' ')}\n                    </span>\n                    <span className=\"text-sm font-medium\">\n                      {key.includes('time') || key.includes('active') ? \n                        (typeof value === 'string' ? new Date(value).toLocaleDateString() : value) : \n                        value\n                      }\n                    </span>\n                  </div>\n                ))}\n              </CardContent>\n            </Card>\n\n            {/* Productivity Metrics */}\n            <Card>\n              <CardHeader>\n                <CardTitle className=\"flex items-center gap-2\">\n                  <TrendingUp className=\"h-5 w-5\" />\n                  Productivity Metrics\n                </CardTitle>\n              </CardHeader>\n              <CardContent className=\"space-y-3\">\n                {Object.entries(knowledge.activity_patterns.productivity_metrics).map(([key, value]) => (\n                  <div key={key} className=\"flex justify-between\">\n                    <span className=\"text-sm text-muted-foreground capitalize\">\n                      {key.replace('_', ' ')}\n                    </span>\n                    <span className=\"text-sm font-medium\">{value}</span>\n                  </div>\n                ))}\n              </CardContent>\n            </Card>\n          </div>\n\n          {/* Feature Usage */}\n          <Card>\n            <CardHeader>\n              <CardTitle className=\"flex items-center gap-2\">\n                <BarChart3 className=\"h-5 w-5\" />\n                Feature Usage\n              </CardTitle>\n            </CardHeader>\n            <CardContent>\n              <div className=\"flex flex-wrap gap-2\">\n                {knowledge.activity_patterns.feature_usage.map((feature, index) => (\n                  <Badge key={index} variant=\"outline\">\n                    {feature}\n                  </Badge>\n                ))}\n              </div>\n            </CardContent>\n          </Card>\n        </TabsContent>\n\n        {/* Memory Tab */}\n        <TabsContent value=\"memory\" className=\"space-y-6\">\n          {/* Personal Thoughts */}\n          {knowledge.memory_bank.personal_thoughts.length > 0 && (\n            <Card>\n              <CardHeader>\n                <CardTitle className=\"flex items-center gap-2\">\n                  <Lightbulb className=\"h-5 w-5\" />\n                  Recent Personal Thoughts\n                </CardTitle>\n              </CardHeader>\n              <CardContent className=\"space-y-3\">\n                {knowledge.memory_bank.personal_thoughts.map((thought, index) => (\n                  <div key={index} className=\"border rounded-lg p-3\">\n                    <div className=\"flex items-center justify-between mb-2\">\n                      <Badge variant=\"secondary\">{thought.category}</Badge>\n                      <span className=\"text-xs text-muted-foreground\">\n                        {new Date(thought.created_at).toLocaleDateString()}\n                      </span>\n                    </div>\n                    <p className=\"text-sm\">{thought.content}</p>\n                    {thought.main_sub_categories && thought.main_sub_categories.length > 0 && (\n                      <div className=\"flex flex-wrap gap-1 mt-2\">\n                        {thought.main_sub_categories.map((tag: string, tagIndex: number) => (\n                          <Badge key={tagIndex} variant=\"outline\" className=\"text-xs\">\n                            {tag}\n                          </Badge>\n                        ))}\n                      </div>\n                    )}\n                  </div>\n                ))}\n              </CardContent>\n            </Card>\n          )}\n\n          {/* Business Observations */}\n          {knowledge.memory_bank.business_observations.length > 0 && (\n            <Card>\n              <CardHeader>\n                <CardTitle className=\"flex items-center gap-2\">\n                  <Eye className=\"h-5 w-5\" />\n                  Business Observations\n                </CardTitle>\n              </CardHeader>\n              <CardContent className=\"space-y-3\">\n                {knowledge.memory_bank.business_observations.map((observation, index) => (\n                  <div key={index} className=\"border rounded-lg p-3\">\n                    <p className=\"text-sm\">{observation.observation}</p>\n                    <div className=\"flex items-center justify-between mt-2\">\n                      <span className=\"text-xs text-muted-foreground\">{observation.context}</span>\n                      <span className=\"text-xs text-muted-foreground\">\n                        {new Date(observation.timestamp).toLocaleDateString()}\n                      </span>\n                    </div>\n                  </div>\n                ))}\n              </CardContent>\n            </Card>\n          )}\n\n          {/* Conversation History Summary */}\n          <Card>\n            <CardHeader>\n              <CardTitle className=\"flex items-center gap-2\">\n                <MessageSquare className=\"h-5 w-5\" />\n                Conversation History\n              </CardTitle>\n            </CardHeader>\n            <CardContent>\n              <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4\">\n                <div className=\"text-center\">\n                  <div className=\"text-2xl font-bold text-primary\">\n                    {knowledge.memory_bank.conversation_history.length}\n                  </div>\n                  <p className=\"text-sm text-muted-foreground\">Recent conversations</p>\n                </div>\n                <div className=\"text-center\">\n                  <div className=\"text-2xl font-bold text-primary\">\n                    {knowledge.memory_bank.conversation_history.reduce(\n                      (acc, conv) => acc + (conv.chat_messages?.length || 0), 0\n                    )}\n                  </div>\n                  <p className=\"text-sm text-muted-foreground\">Total messages</p>\n                </div>\n                <div className=\"text-center\">\n                  <div className=\"text-2xl font-bold text-primary\">\n                    {knowledge.memory_bank.conversation_history.length > 0 ? \n                      new Date(knowledge.memory_bank.conversation_history[0].updated_at).toLocaleDateString() :\n                      'Never'\n                    }\n                  </div>\n                  <p className=\"text-sm text-muted-foreground\">Last conversation</p>\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n        </TabsContent>\n\n        {/* Integrations Tab */}\n        <TabsContent value=\"integrations\" className=\"space-y-6\">\n          {/* Connected Services */}\n          <Card>\n            <CardHeader>\n              <CardTitle className=\"flex items-center gap-2\">\n                <Database className=\"h-5 w-5\" />\n                Connected Services\n              </CardTitle>\n            </CardHeader>\n            <CardContent>\n              {knowledge.integrations.connected_services.length > 0 ? (\n                <div className=\"space-y-3\">\n                  {knowledge.integrations.connected_services.map((service, index) => (\n                    <div key={index} className=\"flex items-center justify-between p-3 border rounded-lg\">\n                      <div>\n                        <h4 className=\"font-medium capitalize\">{service.integration_type}</h4>\n                        <p className=\"text-sm text-muted-foreground\">\n                          Connected on {new Date(service.created_at).toLocaleDateString()}\n                        </p>\n                      </div>\n                      <div className=\"flex items-center gap-2\">\n                        <Badge \n                          variant={service.status === 'active' ? 'default' : 'secondary'}\n                        >\n                          {service.status}\n                        </Badge>\n                        {service.last_sync_at && (\n                          <span className=\"text-xs text-muted-foreground\">\n                            Last sync: {new Date(service.last_sync_at).toLocaleDateString()}\n                          </span>\n                        )}\n                      </div>\n                    </div>\n                  ))}\n                </div>\n              ) : (\n                <div className=\"text-center py-8\">\n                  <Database className=\"h-12 w-12 mx-auto text-muted-foreground mb-4\" />\n                  <p className=\"text-muted-foreground\">No integrations connected yet</p>\n                  <Button className=\"mt-4\" onClick={() => window.location.href = '/settings'}>\n                    Connect Services\n                  </Button>\n                </div>\n              )}\n            </CardContent>\n          </Card>\n\n          {/* Data Sources */}\n          <Card>\n            <CardHeader>\n              <CardTitle className=\"flex items-center gap-2\">\n                <Globe className=\"h-5 w-5\" />\n                Data Sources\n              </CardTitle>\n            </CardHeader>\n            <CardContent>\n              <div className=\"flex flex-wrap gap-2\">\n                {knowledge.integrations.data_sources.map((source, index) => (\n                  <Badge key={index} variant=\"outline\">\n                    {source}\n                  </Badge>\n                ))}\n              </div>\n              {knowledge.integrations.data_sources.length === 0 && (\n                <p className=\"text-muted-foreground text-center py-4\">\n                  No data sources connected\n                </p>\n              )}\n            </CardContent>\n          </Card>\n        </TabsContent>\n      </Tabs>\n\n      {/* Privacy Notice */}\n      <Alert>\n        <Shield className=\"h-4 w-4\" />\n        <AlertDescription>\n          This information is stored securely and used only to personalize your Nexus experience. \n          You can export or delete your data at any time through your account settings.\n        </AlertDescription>\n      </Alert>\n    </div>\n  );\n};","usedDeprecatedRules":[]},{"filePath":"/home/vonj/Github/Nexus/src/components/ai/enhanced/ModernExecutiveAssistant.tsx","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":123,"column":41,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":123,"endColumn":44,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[4769,4772],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[4769,4772],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'onClose' is defined but never used.","line":154,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":154,"endColumn":10},{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has a missing dependency: 'conversation'. Either include it or remove the dependency array.","line":205,"column":6,"nodeType":"ArrayExpression","endLine":205,"endColumn":38,"suggestions":[{"desc":"Update the dependencies array to be: [conversation, conversation.messages.length]","fix":{"range":[7775,7807],"text":"[conversation, conversation.messages.length]"}}]}],"suppressedMessages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'node' is defined but never used.","line":123,"column":24,"nodeType":null,"messageId":"unusedVar","endLine":123,"endColumn":28,"suppressions":[{"kind":"directive","justification":""}]}],"errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState, useRef, useEffect, useCallback } from 'react';\nimport PropTypes from 'prop-types';\nimport { useAuth } from '@/contexts/AuthContext';\nimport { Sparkles, FileText, Code, Lightbulb, MessageSquare, Send } from 'lucide-react';\nimport { useAIChatStore, useActiveConversation, type AIConversation } from '@/lib/stores/useAIChatStore';\nimport { VirtualizedMessageList } from './VirtualizedMessageList';\nimport { MVPScopeIndicator } from '@/components/chat/MVPScopeIndicator';\nimport { MessageFeedback } from '@/components/chat/MessageFeedback';\nimport ReactMarkdown from 'react-markdown';\nimport remarkGfm from 'remark-gfm';\nimport rehypeHighlight from 'rehype-highlight';\nimport { ActionCard } from '../ActionCard';\nimport { useActionCards } from '@/lib/hooks/useActionCards';\n\n/**\n * Modern Executive Assistant inspired by ChatGPT and Claude interfaces\n */\ninterface ModernExecutiveAssistantProps {\n  onClose?: () => void;\n  sessionId?: string;\n}\n\n/**\n * Welcome screen component (Claude-inspired)\n */\nconst WelcomeScreen: React.FC<{\n  userName?: string;\n  onQuickAction: (prompt: string) => void;\n}> = ({ userName, onQuickAction }) => {\n  const quickActions = [\n    {\n      icon: <FileText className=\"w-5 h-5\" />,\n      label: 'Write',\n      description: 'Help with documents and content',\n      prompt: 'Help me write a professional document'\n    },\n    {\n      icon: <Code className=\"w-5 h-5\" />,\n      label: 'Code',\n      description: 'Debug and write code',\n      prompt: 'Help me with a coding problem'\n    },\n    {\n      icon: <Lightbulb className=\"w-5 h-5\" />,\n      label: 'Ideas',\n      description: 'Brainstorm and strategize',\n      prompt: 'Help me brainstorm ideas for'\n    },\n    {\n      icon: <MessageSquare className=\"w-5 h-5\" />,\n      label: 'Chat',\n      description: 'General conversation',\n      prompt: 'Let\\'s have a conversation about'\n    }\n  ];\n\n  return (\n    <div className=\"flex-1 flex flex-col items-center justify-center p-8 text-center\">\n      {/* Personalized greeting (Claude-style) */}\n      <div className=\"mb-8\">\n        <div className=\"w-16 h-16 bg-gradient-to-br from-primary to-secondary rounded-full flex items-center justify-center mb-4 mx-auto\">\n          <Sparkles className=\"w-8 h-8 text-primary-foreground\" />\n        </div>\n        <h1 className=\"text-2xl font-semibold text-foreground mb-2\">\n          {userName ? `Back at it, ${userName}` : 'Welcome to Nex'}\n        </h1>\n        <p className=\"text-muted-foreground\">\n          Your intelligent business companion\n        </p>\n      </div>\n\n      {/* Quick action buttons (Claude-inspired) */}\n      <div className=\"grid grid-cols-2 gap-4 w-full max-w-md\">\n        {quickActions.map((action) => (\n          <button\n            key={action.label}\n            onClick={() => onQuickAction(action.prompt)}\n            className=\"p-4 rounded-xl border border-border hover:border-primary/50 hover:bg-muted/50 transition-all text-left group\"\n          >\n            <div className=\"flex items-center gap-4 mb-2\">\n              <div className=\"text-primary group-hover:scale-110 transition-transform\">\n                {action.icon}\n              </div>\n              <span className=\"font-medium text-foreground\">{action.label}</span>\n            </div>\n            <p className=\"text-sm text-muted-foreground\">{action.description}</p>\n          </button>\n        ))}\n      </div>\n\n      {/* MVP Scope Indicator */}\n      <div className=\"mt-8 w-full max-w-2xl\">\n        <MVPScopeIndicator />\n      </div>\n\n      {/* Suggestions */}\n      <div className=\"mt-6 text-sm text-muted-foreground max-w-md\">\n        <p>Try asking about your current page, data analysis, or workflow optimization.</p>\n      </div>\n    </div>\n  );\n};\n\ntype MessageType = import('@/lib/stores/useAIChatStore').AIMessage;\nconst MessageBubble: React.FC<{ msg: MessageType; conversationId: string }> = React.memo(\n  ({ msg, conversationId }) => {\n    const isUser = msg.role === 'user';\n    return (\n      <div className={`mb-4 flex ${isUser ? 'justify-end' : 'justify-start'}`}>\n        <div className={`max-w-[80%] ${isUser ? 'flex flex-col items-end' : 'flex flex-col items-start'}`}>\n          <div\n            className={`px-4 py-2 rounded-lg whitespace-pre-wrap break-words ${isUser ? 'bg-primary text-primary-foreground' : 'bg-muted text-foreground'}`}\n          >\n            {isUser ? (\n              msg.content\n            ) : (\n              <ReactMarkdown\n                remarkPlugins={[remarkGfm]}\n                rehypePlugins={[rehypeHighlight]}\n                className=\"prose prose-sm dark:prose-invert max-w-none\"\n                components={{\n                  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n                  a: ({node, ...props}: any) => <a {...props} target=\"_blank\" rel=\"noreferrer\" />,\n                }}\n              >\n                {msg.content}\n              </ReactMarkdown>\n            )}\n          </div>\n          \n          {/* Message Feedback for AI responses */}\n          {!isUser && (\n            <div className=\"mt-2 w-full\">\n                             <MessageFeedback\n                 messageId={msg.id}\n                 conversationId={conversationId}\n                 agentId=\"executive\"\n                 messageContent={msg.content}\n                 compact\n               />\n            </div>\n          )}\n        </div>\n      </div>\n    );\n  }\n);\nMessageBubble.displayName = 'MessageBubble';\n\n/**\n * Main Modern Executive Assistant Component\n */\nexport const ModernExecutiveAssistant: React.FC<ModernExecutiveAssistantProps> = ({ \n  onClose, \n  sessionId = '' \n}) => {\n  const { user } = useAuth();\n  const [input, setInput] = useState('');\n  const [conversationId, setConversationId] = useState<string>('');\n  const { sendMessage, loading, error, newConversation, setActiveConversation, loadOlderMessages, loadConversation } = useAIChatStore();\n  const conversation = useActiveConversation();\n  const chatContainerRef = useRef<HTMLDivElement>(null);\n  const autoScrollRef = useRef(true);\n  const textareaRef = useRef<HTMLTextAreaElement>(null);\n  const [loadingOlder, setLoadingOlder] = useState(false);\n  const { cards: actionCards } = useActionCards(conversationId);\n\n  const conv = conversation as AIConversation | undefined;\n  const messagesLength = conv?.messages ? conv.messages.length : 0;\n  const isConversationEmpty = !conversation || messagesLength === 0;\n\n  // If a sessionId prop is passed, initialise that conversation\n  useEffect(() => {\n    if (sessionId && sessionId !== conversationId) {\n      setConversationId(sessionId);\n      setActiveConversation(sessionId);\n      loadConversation(sessionId).catch(() => {/* ignore */});\n    }\n  }, [sessionId, conversationId, setActiveConversation, loadConversation]);\n\n  // Auto-create a new conversation when none provided\n  useEffect(() => {\n    (async () => {\n      if (!sessionId && !conversationId && user?.id) {\n        const id = await newConversation('Executive Assistant');\n        setConversationId(id);\n        setActiveConversation(id);\n      }\n    })();\n  }, [sessionId, user?.id, conversationId, newConversation, setActiveConversation]);\n\n  const handleSend = useCallback(async () => {\n    if (!input.trim() || !conversationId || !user?.id) return;\n    await sendMessage(conversationId, input, user.id, user.company_id || undefined);\n    setInput('');\n    if (textareaRef.current) {\n      textareaRef.current.style.height = 'auto';\n    }\n  }, [input, conversationId, user?.id, user?.company_id, sendMessage]);\n\n  useEffect(() => {\n    if (autoScrollRef.current && conversation && conversation.messages.length) {\n      chatContainerRef.current?.scrollTo({ top: chatContainerRef.current.scrollHeight, behavior: 'smooth' });\n    }\n  }, [conversation?.messages?.length]);\n\n  // Global keyboard shortcuts\n  useEffect(() => {\n    const handler = (e: KeyboardEvent) => {\n      const isMac = navigator.platform.toUpperCase().indexOf('MAC') >= 0;\n      const kKey = isMac ? e.metaKey && e.key.toLowerCase() === 'k' : e.ctrlKey && e.key.toLowerCase() === 'k';\n      if (kKey) {\n        e.preventDefault();\n        textareaRef.current?.focus();\n      }\n\n      const sendCombo = (isMac ? e.metaKey : e.ctrlKey) && e.shiftKey && e.key === 'Enter';\n      if (sendCombo) {\n        e.preventDefault();\n        handleSend();\n      }\n    };\n    window.addEventListener('keydown', handler);\n    return () => window.removeEventListener('keydown', handler);\n  }, [handleSend]);\n\n  const handleKeyDown = (e: React.KeyboardEvent) => {\n    if (e.key === 'Enter' && !e.shiftKey) {\n      e.preventDefault();\n      handleSend();\n    }\n  };\n\n  const handleQuickAction = (prompt: string) => {\n    setInput(prompt);\n  };\n\n  if (!conversation) {\n    return <WelcomeScreen userName={user?.name} onQuickAction={handleQuickAction} />;\n  }\n\n  return (\n    <div className=\"flex flex-col h-full\">\n      {/* Chat messages */}\n      <div\n        ref={chatContainerRef}\n        className=\"flex-1 min-h-0 overflow-hidden p-6\"\n      >\n        {/* Action Cards at top */}\n        {actionCards.length > 0 && (\n          <div className=\"mb-6 space-y-3\">\n            {actionCards.map(card => (\n              <ActionCard key={card.id} card={card} className=\"max-w-md\" />\n            ))}\n          </div>\n        )}\n        {isConversationEmpty ? (\n          <WelcomeScreen userName={user?.name} onQuickAction={handleQuickAction} />\n        ) : (\n          <VirtualizedMessageList\n            messages={conversation!.messages}\n            renderRow={(msg) => <MessageBubble key={msg.id} msg={msg} conversationId={conversation!.id} />}\n            followOutput={autoScrollRef.current}\n            onLoadMore={async () => {\n              if (loadingOlder) return;\n              setLoadingOlder(true);\n              await loadOlderMessages(conversation!.id);\n              setLoadingOlder(false);\n            }}\n            loadingMore={loadingOlder}\n          />\n        )}\n      </div>\n      {/* Input */}\n      <div className=\"p-4 border-t border-border flex items-center gap-2 bg-background\">\n        <textarea\n          ref={textareaRef}\n          value={input}\n          onInput={(e) => {\n            const el = e.currentTarget;\n            el.style.height = 'auto';\n            el.style.height = `${el.scrollHeight}px`;\n          }}\n          onChange={e => setInput(e.target.value)}\n          onKeyDown={handleKeyDown}\n          placeholder=\"Type your message...\"\n          className=\"flex-1 resize-none rounded-lg border border-border p-2 text-sm bg-background focus:outline-none focus:ring-2 focus:ring-primary\"\n          rows={1}\n          disabled={loading}\n        />\n        <button\n          onClick={handleSend}\n          disabled={loading || !input.trim()}\n          className=\"ml-2 p-2 rounded-lg bg-primary text-primary-foreground hover:bg-primary/90 transition-colors disabled:opacity-50\"\n        >\n          <Send className=\"w-5 h-5\" />\n        </button>\n      </div>\n      {/* Error Toast (optional, can be handled globally) */}\n      {error && <div className=\"p-2 text-destructive text-xs\">{error}</div>}\n    </div>\n  );\n};\n\nModernExecutiveAssistant.propTypes = {\n  onClose: PropTypes.func,\n  sessionId: PropTypes.string,\n};\n\nexport default ModernExecutiveAssistant; ","usedDeprecatedRules":[]},{"filePath":"/home/vonj/Github/Nexus/src/components/ai/enhanced/VirtualizedMessageList.tsx","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":30,"column":26,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":30,"endColumn":29,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1042,1045],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1042,1045],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useCallback has a missing dependency: 'setSize'. Either include it or remove the dependency array.","line":69,"column":5,"nodeType":"ArrayExpression","endLine":69,"endColumn":26,"suggestions":[{"desc":"Update the dependencies array to be: [messages, renderRow, setSize]","fix":{"range":[2238,2259],"text":"[messages, renderRow, setSize]"}}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":106,"column":37,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":106,"endColumn":40,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3550,3553],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3550,3553],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useCallback, useMemo, useRef, useEffect } from 'react';\nimport AutoSizer from 'react-virtualized-auto-sizer';\nimport { VariableSizeList as List } from 'react-window';\nimport type { AIMessage } from '@/lib/stores/useAIChatStore';\n\ninterface VirtualizedMessageListProps {\n  messages: AIMessage[];\n  renderRow: (msg: AIMessage) => React.ReactNode;\n  onLoadMore?: () => Promise<void>;\n  loadingMore?: boolean;\n  followOutput?: boolean;\n}\n\n/**\n * A virtualization wrapper around react-window that supports dynamic row heights.\n * It measures each row on initial render and stores the heights so we can provide\n * them back to react-window via getItemSize.\n */\nconst ROW_GAP = 16; // gap (px) between bubbles – must match CSS margin-bottom\n\nexport const VirtualizedMessageList: React.FC<VirtualizedMessageListProps> = ({\n  messages,\n  renderRow,\n  onLoadMore,\n  loadingMore = false,\n  followOutput = true,\n}) => {\n  // Heights cache, keyed by row index\n  const sizeMap = useRef<Record<number, number>>({});\n  const listRef = useRef<any>(null);\n  const prevCountRef = useRef(messages.length);\n\n  const getItemSize = useCallback(\n    (index: number) => {\n      return sizeMap.current[index] ?? 80; // Fallback height\n    },\n    []\n  );\n\n  const setSize = useCallback((index: number, size: number) => {\n    if (sizeMap.current[index] !== size) {\n      sizeMap.current = { ...sizeMap.current, [index]: size };\n      // Defer resetAfterIndex so we don't trigger nested updates synchronously\n      window.requestAnimationFrame(() => {\n        listRef.current?.resetAfterIndex(index);\n      });\n    }\n  }, []);\n\n  // Wrapper row renderer that measures actual DOM height\n  const Row = useCallback(\n    ({ index, style }: { index: number; style: React.CSSProperties }) => {\n      const setRowRef = (node: HTMLDivElement | null) => {\n        if (node) {\n          const newHeight = node.getBoundingClientRect().height + ROW_GAP; // Height inc. margin\n          setSize(index, newHeight);\n        }\n      };\n\n      const msg = messages[index];\n      return (\n        <div style={style}>\n          <div ref={setRowRef} style={{ paddingBottom: ROW_GAP / 2 }}>\n            {renderRow(msg)}\n          </div>\n        </div>\n      );\n    },\n    [messages, renderRow]\n  );\n\n  // Handle infinite scroll (load older messages)\n  const handleScroll = useCallback(\n    async ({ scrollOffset }: { scrollDirection: 'forward' | 'backward'; scrollOffset: number; scrollUpdateWasRequested: boolean }) => {\n      if (scrollOffset === 0 && onLoadMore && !loadingMore) {\n        await onLoadMore();\n        // After loading more messages we'll keep the current view stable by\n        // scrolling to roughly the height of newly loaded items.\n        listRef.current?.scrollTo(1); // small offset to prevent refiring\n      }\n    },\n    [onLoadMore, loadingMore]\n  );\n\n  // React-window requires a stable item count memo\n  const itemCount = useMemo(() => messages.length, [messages.length]);\n\n  // Auto-follow new output\n  useEffect(() => {\n    if (followOutput && messages.length > prevCountRef.current) {\n      listRef.current?.scrollToItem(messages.length - 1, 'end');\n    }\n    prevCountRef.current = messages.length;\n  }, [messages.length, followOutput]);\n\n  return (\n    <AutoSizer>\n      {({ height, width }: { height: number; width: number }) => (\n        <List\n          ref={listRef}\n          height={height}\n          width={width}\n          itemCount={itemCount}\n          itemSize={getItemSize}\n          overscanCount={8}\n          onScroll={handleScroll as any}\n        >\n          {Row}\n        </List>\n      )}\n    </AutoSizer>\n  );\n};\n\nexport default VirtualizedMessageList; ","usedDeprecatedRules":[]},{"filePath":"/home/vonj/Github/Nexus/src/components/ai/index.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/vonj/Github/Nexus/src/components/analytics/CrossPlatformInsightsEngine.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'Alert' is defined but never used.","line":6,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":6,"endColumn":15},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'AlertDescription' is defined but never used.","line":6,"column":17,"nodeType":null,"messageId":"unusedVar","endLine":6,"endColumn":33},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'ExternalLink' is defined but never used.","line":25,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":25,"endColumn":15},{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has a missing dependency: 'loadInsightsData'. Either include it or remove the dependency array.","line":84,"column":6,"nodeType":"ArrayExpression","endLine":84,"endColumn":16,"suggestions":[{"desc":"Update the dependencies array to be: [loadInsightsData, user?.id]","fix":{"range":[2292,2302],"text":"[loadInsightsData, user?.id]"}}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'integrations' is defined but never used.","line":117,"column":39,"nodeType":null,"messageId":"unusedVar","endLine":117,"endColumn":51},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":117,"column":53,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":117,"endColumn":56,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3184,3187],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3184,3187],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'integrations' is defined but never used.","line":177,"column":38,"nodeType":null,"messageId":"unusedVar","endLine":177,"endColumn":50},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":177,"column":52,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":177,"endColumn":55,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[5174,5177],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[5174,5177],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'integrations' is defined but never used.","line":232,"column":47,"nodeType":null,"messageId":"unusedVar","endLine":232,"endColumn":59},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":232,"column":61,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":232,"endColumn":64,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[7067,7070],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[7067,7070],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":10,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState, useEffect } from 'react';\nimport { Card, CardContent, CardHeader, CardTitle, CardDescription } from '@/components/ui/Card';\nimport { Badge } from '@/components/ui/Badge';\nimport { Button } from '@/components/ui/Button';\nimport { Progress } from '@/components/ui/Progress';\nimport { Alert, AlertDescription } from '@/components/ui/Alert';\nimport { useAuth } from '@/contexts/AuthContext';\nimport { supabase } from '../../lib/core/supabase';\nimport {\n  Brain,\n  TrendingUp,\n  TrendingDown,\n  BarChart3,\n  Target,\n  Zap,\n  AlertTriangle,\n  CheckCircle2,\n  ArrowRight,\n  Lightbulb,\n  DollarSign,\n  Clock,\n  Users,\n  Activity,\n  RefreshCw,\n  ExternalLink\n} from 'lucide-react';\n\ninterface DataCorrelation {\n  id: string;\n  sourceA: string;\n  sourceB: string;\n  metricA: string;\n  metricB: string;\n  correlation: number;\n  confidence: number;\n  relationship: 'positive' | 'negative' | 'neutral';\n  strength: 'strong' | 'moderate' | 'weak';\n  timeframe: string;\n  businessImplication: string;\n}\n\ninterface PredictiveInsight {\n  id: string;\n  type: 'forecast' | 'anomaly' | 'pattern' | 'recommendation';\n  title: string;\n  description: string;\n  prediction: {\n    metric: string;\n    currentValue: number;\n    predictedValue: number;\n    timeframe: string;\n    confidence: number;\n  };\n  factors: string[];\n  actionable: boolean;\n  impact: 'high' | 'medium' | 'low';\n}\n\ninterface BusinessIntelligence {\n  id: string;\n  category: 'revenue' | 'efficiency' | 'risk' | 'growth' | 'customer';\n  title: string;\n  insight: string;\n  evidence: string[];\n  recommendation: string;\n  expectedOutcome: string;\n  effort: 'low' | 'medium' | 'high';\n  timeToValue: string;\n  confidence: number;\n}\n\nconst CrossPlatformInsightsEngine: React.FC = () => {\n  const { user } = useAuth();\n  const [loading, setLoading] = useState(true);\n  const [correlations, setCorrelations] = useState<DataCorrelation[]>([]);\n  const [predictions, setPredictions] = useState<PredictiveInsight[]>([]);\n  const [businessIntelligence, setBusinessIntelligence] = useState<BusinessIntelligence[]>([]);\n  const [selectedCategory, setSelectedCategory] = useState<'all' | 'revenue' | 'efficiency' | 'risk' | 'growth' | 'customer'>('all');\n\n  useEffect(() => {\n    if (user?.id) {\n      loadInsightsData();\n    }\n  }, [user?.id]);\n\n  const loadInsightsData = async () => {\n    try {\n      setLoading(true);\n      \n      // Fetch user's active integrations to understand available data sources\n      const { data: integrations } = await supabase\n        .from('user_integrations')\n        .select(`\n          integrations (\n            name,\n            slug,\n            category\n          )\n        `)\n        .eq('user_id', user!.id)\n        .eq('status', 'active');\n\n      // Generate insights based on available integrations\n      await Promise.all([\n        generateCorrelations(integrations || []),\n        generatePredictions(integrations || []),\n        generateBusinessIntelligence(integrations || [])\n      ]);\n      \n    } catch (error) {\n      console.error('Error loading insights:', error);\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const generateCorrelations = async (integrations: any[]) => {\n    // Simulate AI-generated correlations based on available data sources\n    const correlations: DataCorrelation[] = [\n      {\n        id: 'revenue-traffic',\n        sourceA: 'Google Analytics',\n        sourceB: 'PayPal',\n        metricA: 'Website Traffic',\n        metricB: 'Transaction Volume',\n        correlation: 0.89,\n        confidence: 94,\n        relationship: 'positive',\n        strength: 'strong',\n        timeframe: '30 days',\n        businessImplication: 'Every 1000 additional website visitors correlates with $2,340 in additional revenue'\n      },\n      {\n        id: 'uptime-satisfaction',\n        sourceA: 'NinjaRMM',\n        sourceB: 'HubSpot',\n        metricA: 'System Uptime',\n        metricB: 'Customer Satisfaction',\n        correlation: 0.76,\n        confidence: 87,\n        relationship: 'positive',\n        strength: 'strong',\n        timeframe: '60 days',\n        businessImplication: 'System reliability directly impacts customer satisfaction scores'\n      },\n      {\n        id: 'response-time-productivity',\n        sourceA: 'Microsoft 365',\n        sourceB: 'Google Workspace',\n        metricA: 'Email Response Time',\n        metricB: 'Team Productivity',\n        correlation: -0.65,\n        confidence: 78,\n        relationship: 'negative',\n        strength: 'moderate',\n        timeframe: '45 days',\n        businessImplication: 'Faster email responses correlate with higher overall team productivity'\n      },\n      {\n        id: 'automation-costs',\n        sourceA: 'Marcoby Cloud',\n        sourceB: 'QuickBooks',\n        metricA: 'Automation Coverage',\n        metricB: 'Operational Costs',\n        correlation: -0.82,\n        confidence: 91,\n        relationship: 'negative',\n        strength: 'strong',\n        timeframe: '90 days',\n        businessImplication: 'Higher automation coverage significantly reduces operational costs'\n      }\n    ];\n\n    setCorrelations(correlations);\n  };\n\n  const generatePredictions = async (integrations: any[]) => {\n    const predictions: PredictiveInsight[] = [\n      {\n        id: 'revenue-forecast',\n        type: 'forecast',\n        title: 'Monthly Revenue Projection',\n        description: 'Based on current traffic trends and conversion patterns, revenue is projected to increase significantly next month.',\n        prediction: {\n          metric: 'Monthly Revenue',\n          currentValue: 127450,\n          predictedValue: 156800,\n          timeframe: 'Next 30 days',\n          confidence: 87\n        },\n        factors: ['Website traffic growth', 'Seasonal trends', 'Conversion rate improvements'],\n        actionable: true,\n        impact: 'high'\n      },\n      {\n        id: 'capacity-warning',\n        type: 'anomaly',\n        title: 'Infrastructure Capacity Alert',\n        description: 'Current growth rate will exceed infrastructure capacity in approximately 45 days without scaling.',\n        prediction: {\n          metric: 'System Capacity',\n          currentValue: 78,\n          predictedValue: 95,\n          timeframe: '45 days',\n          confidence: 92\n        },\n        factors: ['User growth rate', 'Data volume increase', 'Processing requirements'],\n        actionable: true,\n        impact: 'high'\n      },\n      {\n        id: 'customer-churn',\n        type: 'pattern',\n        title: 'Customer Retention Pattern',\n        description: 'Analysis shows improved customer retention due to faster support response times.',\n        prediction: {\n          metric: 'Customer Retention',\n          currentValue: 89,\n          predictedValue: 93,\n          timeframe: 'Next quarter',\n          confidence: 81\n        },\n        factors: ['Support response time', 'Product satisfaction', 'Engagement metrics'],\n        actionable: false,\n        impact: 'medium'\n      }\n    ];\n\n    setPredictions(predictions);\n  };\n\n  const generateBusinessIntelligence = async (integrations: any[]) => {\n    const intelligence: BusinessIntelligence[] = [\n      {\n        id: 'revenue-optimization',\n        category: 'revenue',\n        title: 'Revenue Stream Optimization',\n        insight: 'Cross-platform analysis reveals that customers acquired through organic search have 34% higher lifetime value than paid acquisition channels.',\n        evidence: [\n          'Google Analytics shows organic traffic converts at 12.3% vs 8.7% for paid',\n          'PayPal data indicates organic customers have higher average order values',\n          'HubSpot CRM shows longer customer lifecycles for organic acquisitions'\n        ],\n        recommendation: 'Shift 25% of paid advertising budget to SEO and content marketing initiatives',\n        expectedOutcome: 'Increase overall customer lifetime value by 15-20% within 6 months',\n        effort: 'medium',\n        timeToValue: '3-6 months',\n        confidence: 89\n      },\n      {\n        id: 'operational-efficiency',\n        category: 'efficiency',\n        title: 'Automation ROI Opportunity',\n        insight: 'Infrastructure monitoring shows manual processes consume 40% of team time, with automation tools already in place but underutilized.',\n        evidence: [\n          'Marcoby Cloud shows infrastructure capable of handling automated workflows',\n          'Microsoft 365 data reveals repetitive task patterns',\n          'Time tracking indicates 16 hours/week spent on automatable tasks'\n        ],\n        recommendation: 'Implement comprehensive workflow automation using existing infrastructure',\n        expectedOutcome: 'Reduce operational overhead by $8,000/month and improve team satisfaction',\n        effort: 'low',\n        timeToValue: '2-4 weeks',\n        confidence: 94\n      },\n      {\n        id: 'risk-mitigation',\n        category: 'risk',\n        title: 'Business Continuity Risk',\n        insight: 'Single points of failure identified in critical business systems could result in significant revenue loss.',\n        evidence: [\n          'NinjaRMM shows 3 critical systems without redundancy',\n          'Cloudflare analytics indicate revenue loss during downtime events',\n          'Historical data shows $3,200 lost per hour of downtime'\n        ],\n        recommendation: 'Implement redundant systems and automated failover for critical infrastructure',\n        expectedOutcome: 'Reduce downtime risk by 90% and protect $38,400 annual revenue exposure',\n        effort: 'high',\n        timeToValue: '6-8 weeks',\n        confidence: 96\n      },\n      {\n        id: 'growth-acceleration',\n        category: 'growth',\n        title: 'Market Expansion Opportunity',\n        insight: 'Geographic analysis reveals untapped markets with high conversion potential based on current customer patterns.',\n        evidence: [\n          'Google Analytics shows high engagement from unexplored regions',\n          'PayPal data indicates strong purchasing power in target markets',\n          'Competitive analysis shows low market saturation'\n        ],\n        recommendation: 'Launch targeted marketing campaigns in identified high-potential regions',\n        expectedOutcome: 'Expand market reach by 30% and increase revenue by $45,000/quarter',\n        effort: 'medium',\n        timeToValue: '8-12 weeks',\n        confidence: 78\n      },\n      {\n        id: 'customer-experience',\n        category: 'customer',\n        title: 'Customer Experience Enhancement',\n        insight: 'Communication platform analysis reveals opportunities to improve customer touchpoint experiences.',\n        evidence: [\n          'Microsoft 365 email analytics show response time improvements',\n          'HubSpot CRM indicates correlation between communication quality and satisfaction',\n          'Cross-platform data shows customer preference patterns'\n        ],\n        recommendation: 'Implement unified customer communication strategy across all platforms',\n        expectedOutcome: 'Improve customer satisfaction scores by 25% and reduce support costs',\n        effort: 'low',\n        timeToValue: '4-6 weeks',\n        confidence: 85\n      }\n    ];\n\n    setBusinessIntelligence(intelligence);\n  };\n\n  const getCorrelationStrengthColor = (strength: string) => {\n    switch (strength) {\n      case 'strong': return 'text-success border-success';\n      case 'moderate': return 'text-warning border-warning';\n      case 'weak': return 'text-muted-foreground border-muted';\n      default: return 'text-muted-foreground border-muted';\n    }\n  };\n\n  const getImpactColor = (impact: string) => {\n    switch (impact) {\n      case 'high': return 'text-destructive';\n      case 'medium': return 'text-warning';\n      case 'low': return 'text-muted-foreground';\n      default: return 'text-muted-foreground';\n    }\n  };\n\n  const getCategoryIcon = (category: string) => {\n    switch (category) {\n      case 'revenue': return <DollarSign className=\"w-5 h-5 text-success\" />;\n      case 'efficiency': return <Zap className=\"w-5 h-5 text-primary\" />;\n      case 'risk': return <AlertTriangle className=\"w-5 h-5 text-destructive\" />;\n      case 'growth': return <TrendingUp className=\"w-5 h-5 text-success\" />;\n      case 'customer': return <Users className=\"w-5 h-5 text-primary\" />;\n      default: return <Activity className=\"w-5 h-5 text-muted-foreground\" />;\n    }\n  };\n\n  const getEffortBadge = (effort: string) => {\n    const colors = {\n      low: 'bg-success/10 text-success border-success',\n      medium: 'bg-warning/10 text-warning border-warning',\n      high: 'bg-destructive/10 text-destructive border-destructive'\n    };\n    return colors[effort as keyof typeof colors] || colors.medium;\n  };\n\n  const filteredIntelligence = selectedCategory === 'all' \n    ? businessIntelligence \n    : businessIntelligence.filter(item => item.category === selectedCategory);\n\n  if (loading) {\n    return (\n      <div className=\"flex items-center justify-center py-8\">\n        <RefreshCw className=\"w-6 h-6 animate-spin text-primary\" />\n        <span className=\"ml-2 text-muted-foreground\">Analyzing cross-platform data...</span>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"space-y-6\">\n      {/* Header */}\n      <div className=\"flex items-center justify-between\">\n        <div className=\"flex items-center space-x-3\">\n          <Brain className=\"w-8 h-8 text-primary\" />\n          <div>\n            <h2 className=\"text-2xl font-bold\">Cross-Platform Intelligence</h2>\n            <p className=\"text-muted-foreground\">AI-powered insights from your connected data sources</p>\n          </div>\n        </div>\n        <Button variant=\"outline\" size=\"sm\" onClick={loadInsightsData}>\n          <RefreshCw className=\"w-4 h-4 mr-2\" />\n          Refresh Analysis\n        </Button>\n      </div>\n\n      {/* Data Correlations */}\n      <Card>\n        <CardHeader>\n          <CardTitle className=\"flex items-center\">\n            <BarChart3 className=\"w-5 h-5 mr-2\" />\n            Cross-Platform Data Correlations\n          </CardTitle>\n          <CardDescription>\n            Statistical relationships discovered between your different data sources\n          </CardDescription>\n        </CardHeader>\n        <CardContent>\n          <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n            {correlations.map((correlation) => (\n              <div key={correlation.id} className=\"p-4 border rounded-lg space-y-3\">\n                <div className=\"flex items-center justify-between\">\n                  <Badge variant=\"outline\" className={getCorrelationStrengthColor(correlation.strength)}>\n                    {correlation.strength} correlation\n                  </Badge>\n                  <span className=\"text-sm font-mono\">{(correlation.correlation * 100).toFixed(0)}%</span>\n                </div>\n                \n                <div className=\"space-y-2\">\n                  <div className=\"flex items-center justify-between text-sm\">\n                    <span className=\"font-medium\">{correlation.metricA}</span>\n                    <span className=\"text-muted-foreground\">{correlation.sourceA}</span>\n                  </div>\n                  <div className=\"flex items-center justify-center\">\n                    {correlation.relationship === 'positive' ? (\n                      <TrendingUp className=\"w-4 h-4 text-success\" />\n                    ) : (\n                      <TrendingDown className=\"w-4 h-4 text-destructive\" />\n                    )}\n                  </div>\n                  <div className=\"flex items-center justify-between text-sm\">\n                    <span className=\"font-medium\">{correlation.metricB}</span>\n                    <span className=\"text-muted-foreground\">{correlation.sourceB}</span>\n                  </div>\n                </div>\n                \n                <Progress value={correlation.confidence} className=\"h-1\" />\n                <p className=\"text-xs text-muted-foreground\">{correlation.businessImplication}</p>\n                \n                <div className=\"flex items-center justify-between text-xs text-muted-foreground\">\n                  <span>Timeframe: {correlation.timeframe}</span>\n                  <span>{correlation.confidence}% confidence</span>\n                </div>\n              </div>\n            ))}\n          </div>\n        </CardContent>\n      </Card>\n\n      {/* Predictive Insights */}\n      <Card>\n        <CardHeader>\n          <CardTitle className=\"flex items-center\">\n            <Target className=\"w-5 h-5 mr-2\" />\n            Predictive Insights\n          </CardTitle>\n          <CardDescription>\n            AI-powered forecasts and trend predictions based on your data\n          </CardDescription>\n        </CardHeader>\n        <CardContent>\n          <div className=\"grid grid-cols-1 lg:grid-cols-3 gap-4\">\n            {predictions.map((prediction) => (\n              <div key={prediction.id} className=\"p-4 border rounded-lg space-y-3\">\n                <div className=\"flex items-center justify-between\">\n                  <Badge variant={prediction.type === 'anomaly' ? 'destructive' : 'default'}>\n                    {prediction.type === 'anomaly' && <AlertTriangle className=\"h-4 w-4 mr-2\" />}\n                    {prediction.type === 'forecast' && <TrendingUp className=\"h-4 w-4 mr-2\" />}\n                  </Badge>\n                  <Badge variant=\"outline\" className={getImpactColor(prediction.impact)}>\n                    {prediction.impact} impact\n                  </Badge>\n                </div>\n                \n                <div>\n                  <h4 className=\"font-semibold text-sm\">{prediction.title}</h4>\n                  <p className=\"text-xs text-muted-foreground mt-1\">{prediction.description}</p>\n                </div>\n                \n                <div className=\"space-y-2\">\n                  <div className=\"flex items-center justify-between text-sm\">\n                    <span>{prediction.prediction.metric}</span>\n                    <span className=\"font-mono\">{prediction.prediction.confidence}%</span>\n                  </div>\n                  \n                  <div className=\"flex items-center justify-between\">\n                    <span className=\"text-sm text-muted-foreground\">Current</span>\n                    <span className=\"font-semibold\">{prediction.prediction.currentValue.toLocaleString()}</span>\n                  </div>\n                  \n                  <div className=\"flex items-center justify-between\">\n                    <span className=\"text-sm text-muted-foreground\">Predicted</span>\n                    <span className=\"font-semibold text-primary\">{prediction.prediction.predictedValue.toLocaleString()}</span>\n                  </div>\n                  \n                  <Progress \n                    value={(prediction.prediction.predictedValue / prediction.prediction.currentValue) * 50} \n                    className=\"h-1\" \n                  />\n                </div>\n                \n                <div className=\"text-xs text-muted-foreground\">\n                  <div>Timeframe: {prediction.prediction.timeframe}</div>\n                  <div>Key factors: {prediction.factors.slice(0, 2).join(', ')}</div>\n                </div>\n              </div>\n            ))}\n          </div>\n        </CardContent>\n      </Card>\n\n      {/* Business Intelligence */}\n      <Card>\n        <CardHeader>\n          <div className=\"flex items-center justify-between\">\n            <div>\n              <CardTitle className=\"flex items-center\">\n                <Lightbulb className=\"w-5 h-5 mr-2\" />\n                Strategic Business Intelligence\n              </CardTitle>\n              <CardDescription>\n                Actionable insights and recommendations for business growth\n              </CardDescription>\n            </div>\n            <div className=\"flex items-center space-x-2\">\n              {(['all', 'revenue', 'efficiency', 'risk', 'growth', 'customer'] as const).map((category) => (\n                <Button\n                  key={category}\n                  variant={selectedCategory === category ? 'default' : 'outline'}\n                  size=\"sm\"\n                  onClick={() => setSelectedCategory(category)}\n                >\n                  {category === 'all' ? 'All' : category.charAt(0).toUpperCase() + category.slice(1)}\n                </Button>\n              ))}\n            </div>\n          </div>\n        </CardHeader>\n        <CardContent>\n          <div className=\"space-y-6\">\n            {filteredIntelligence.map((intelligence) => (\n              <div key={intelligence.id} className=\"p-6 border rounded-lg space-y-4\">\n                <div className=\"flex items-start justify-between\">\n                  <div className=\"flex items-center space-x-3\">\n                    {getCategoryIcon(intelligence.category)}\n                    <div>\n                      <h4 className=\"font-semibold text-lg\">{intelligence.title}</h4>\n                      <Badge variant=\"outline\" className=\"mt-1\">\n                        {intelligence.category}\n                      </Badge>\n                    </div>\n                  </div>\n                  <div className=\"flex items-center space-x-2\">\n                    <Badge variant=\"outline\" className={getEffortBadge(intelligence.effort)}>\n                      {intelligence.effort} effort\n                    </Badge>\n                    <Badge variant=\"outline\">\n                      {intelligence.confidence}% confidence\n                    </Badge>\n                  </div>\n                </div>\n                \n                <div className=\"space-y-3\">\n                  <div>\n                    <h5 className=\"font-medium text-sm mb-1\">Key Insight</h5>\n                    <p className=\"text-sm text-muted-foreground\">{intelligence.insight}</p>\n                  </div>\n                  \n                  <div>\n                    <h5 className=\"font-medium text-sm mb-1\">Supporting Evidence</h5>\n                    <ul className=\"space-y-1\">\n                      {intelligence.evidence.map((evidence, index) => (\n                        <li key={index} className=\"flex items-start space-x-2 text-xs text-muted-foreground\">\n                          <CheckCircle2 className=\"w-3 h-3 mt-0.5 text-success\" />\n                          <span>{evidence}</span>\n                        </li>\n                      ))}\n                    </ul>\n                  </div>\n                  \n                  <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n                    <div>\n                      <h5 className=\"font-medium text-sm mb-1\">Recommendation</h5>\n                      <p className=\"text-sm text-muted-foreground\">{intelligence.recommendation}</p>\n                    </div>\n                    <div>\n                      <h5 className=\"font-medium text-sm mb-1\">Expected Outcome</h5>\n                      <p className=\"text-sm text-primary font-medium\">{intelligence.expectedOutcome}</p>\n                    </div>\n                  </div>\n                </div>\n                \n                <div className=\"flex items-center justify-between pt-3 border-t\">\n                  <div className=\"flex items-center space-x-4 text-xs text-muted-foreground\">\n                    <div className=\"flex items-center space-x-1\">\n                      <Clock className=\"w-3 h-3\" />\n                      <span>Time to value: {intelligence.timeToValue}</span>\n                    </div>\n                  </div>\n                  <Button variant=\"outline\" size=\"sm\">\n                    Implement Strategy\n                    <ArrowRight className=\"w-4 h-4 ml-1\" />\n                  </Button>\n                </div>\n              </div>\n            ))}\n          </div>\n        </CardContent>\n      </Card>\n    </div>\n  );\n};\n\nexport default CrossPlatformInsightsEngine; ","usedDeprecatedRules":[]},{"filePath":"/home/vonj/Github/Nexus/src/components/analytics/DigestibleMetricsDashboard.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'Alert' is defined but never used.","line":7,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":7,"endColumn":15},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'AlertDescription' is defined but never used.","line":7,"column":17,"nodeType":null,"messageId":"unusedVar","endLine":7,"endColumn":33},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'Target' is defined but never used.","line":14,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":14,"endColumn":9},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'Clock' is defined but never used.","line":15,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":15,"endColumn":8},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'BarChart3' is defined but never used.","line":20,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":20,"endColumn":12},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'PieChart' is defined but never used.","line":21,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":21,"endColumn":11},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'Zap' is defined but never used.","line":23,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":23,"endColumn":6},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'ExternalLink' is defined but never used.","line":29,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":29,"endColumn":15},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":403,"column":33,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":403,"endColumn":36,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[14515,14518],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[14515,14518],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":411,"column":32,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":411,"endColumn":35,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[14759,14762],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[14759,14762],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":509,"column":57,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":509,"endColumn":60,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[18479,18482],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[18479,18482],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":11,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState, useEffect } from 'react';\nimport { Card, CardContent, CardHeader, CardTitle, CardDescription } from '@/components/ui/Card';\nimport { Badge } from '@/components/ui/Badge';\nimport { Button } from '@/components/ui/Button';\nimport { Progress } from '@/components/ui/Progress';\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from '@/components/ui/Tabs';\nimport { Alert, AlertDescription } from '@/components/ui/Alert';\nimport { useAuth } from '@/contexts/AuthContext';\nimport {\n  TrendingUp,\n  TrendingDown,\n  DollarSign,\n  Users,\n  Target,\n  Clock,\n  CheckCircle2,\n  AlertTriangle,\n  ArrowRight,\n  Lightbulb,\n  BarChart3,\n  PieChart,\n  Activity,\n  Zap,\n  Globe,\n  Mail,\n  Settings,\n  RefreshCw,\n  HelpCircle,\n  ExternalLink,\n  Play\n} from 'lucide-react';\n\ninterface DigestibleMetric {\n  id: string;\n  title: string;\n  subtitle: string;\n  value: string | number;\n  unit?: string;\n  trend: {\n    direction: 'up' | 'down' | 'stable';\n    percentage: number;\n    period: string;\n    isGood: boolean;\n  };\n  context: {\n    whatItMeans: string;\n    whyItMatters: string;\n    whatToDoNext: string[];\n  };\n  healthStatus: 'excellent' | 'good' | 'warning' | 'critical';\n  category: 'revenue' | 'customers' | 'operations' | 'marketing' | 'team';\n  sources: string[];\n  lastUpdated: string;\n  benchmark?: {\n    industry: number;\n    yourTarget: number;\n    status: 'above' | 'at' | 'below';\n  };\n}\n\ninterface BusinessStory {\n  id: string;\n  title: string;\n  narrative: string;\n  keyMetrics: string[];\n  insights: string[];\n  recommendations: {\n    action: string;\n    effort: 'low' | 'medium' | 'high';\n    impact: 'low' | 'medium' | 'high';\n    timeframe: string;\n  }[];\n  urgency: 'low' | 'medium' | 'high' | 'critical';\n}\n\nconst DigestibleMetricsDashboard: React.FC = () => {\n  const { user } = useAuth();\n  const [loading, setLoading] = useState(true);\n  const [selectedCategory, setSelectedCategory] = useState<'all' | 'revenue' | 'customers' | 'operations' | 'marketing' | 'team'>('all');\n  const [selectedView, setSelectedView] = useState<'metrics' | 'stories' | 'actions'>('metrics');\n  \n  const [metrics, setMetrics] = useState<DigestibleMetric[]>([]);\n  const [businessStories, setBusinessStories] = useState<BusinessStory[]>([]);\n\n  useEffect(() => {\n    if (user?.id) {\n      loadDigestibleData();\n    }\n  }, [user?.id]);\n\n  const loadDigestibleData = async () => {\n    try {\n      setLoading(true);\n      \n      // Generate digestible metrics with business context\n      const digestibleMetrics: DigestibleMetric[] = [\n        {\n          id: 'monthly-revenue',\n          title: 'Monthly Revenue',\n          subtitle: 'Total income from all sources',\n          value: 127450,\n          unit: '$',\n          trend: {\n            direction: 'up',\n            percentage: 23.5,\n            period: 'vs last month',\n            isGood: true\n          },\n          context: {\n            whatItMeans: 'Your business generated $127,450 in revenue this month, which is $24,300 more than last month.',\n            whyItMatters: 'Revenue growth indicates business health and validates your market strategy. This 23.5% increase suggests strong demand.',\n            whatToDoNext: [\n              'Analyze which products/services drove the increase',\n              'Invest more in successful revenue channels',\n              'Plan for scaling operations to support growth'\n            ]\n          },\n          healthStatus: 'excellent',\n          category: 'revenue',\n          sources: ['PayPal', 'Stripe', 'QuickBooks'],\n          lastUpdated: new Date().toISOString(),\n          benchmark: {\n            industry: 95000,\n            yourTarget: 150000,\n            status: 'above'\n          }\n        },\n        {\n          id: 'customer-acquisition',\n          title: 'New Customers',\n          subtitle: 'People who became customers this month',\n          value: 89,\n          trend: {\n            direction: 'up',\n            percentage: 12.3,\n            period: 'vs last month',\n            isGood: true\n          },\n          context: {\n            whatItMeans: 'You gained 89 new customers this month, which is 10 more than last month.',\n            whyItMatters: 'Steady customer acquisition means your marketing and sales efforts are working. This growth rate supports sustainable business expansion.',\n            whatToDoNext: [\n              'Identify your most effective customer acquisition channels',\n              'Optimize onboarding process for new customers',\n              'Set up referral programs to accelerate growth'\n            ]\n          },\n          healthStatus: 'good',\n          category: 'customers',\n          sources: ['HubSpot', 'PayPal', 'Google Analytics'],\n          lastUpdated: new Date().toISOString(),\n          benchmark: {\n            industry: 65,\n            yourTarget: 100,\n            status: 'above'\n          }\n        },\n        {\n          id: 'system-reliability',\n          title: 'System Uptime',\n          subtitle: 'How often your systems are working',\n          value: 99.8,\n          unit: '%',\n          trend: {\n            direction: 'up',\n            percentage: 0.2,\n            period: 'vs last month',\n            isGood: true\n          },\n          context: {\n            whatItMeans: 'Your systems were operational 99.8% of the time this month, meaning only 1.4 hours of downtime.',\n            whyItMatters: 'High uptime ensures customers can always access your services, protecting revenue and maintaining trust.',\n            whatToDoNext: [\n              'Identify what caused the remaining 0.2% downtime',\n              'Implement redundancy for critical systems',\n              'Set up proactive monitoring alerts'\n            ]\n          },\n          healthStatus: 'excellent',\n          category: 'operations',\n          sources: ['NinjaRMM', 'Cloudflare', 'Marcoby Cloud'],\n          lastUpdated: new Date().toISOString(),\n          benchmark: {\n            industry: 99.5,\n            yourTarget: 99.9,\n            status: 'above'\n          }\n        },\n        {\n          id: 'website-performance',\n          title: 'Website Visitors',\n          subtitle: 'People visiting your website',\n          value: '45.2K',\n          trend: {\n            direction: 'up',\n            percentage: 18.7,\n            period: 'vs last month',\n            isGood: true\n          },\n          context: {\n            whatItMeans: 'Your website attracted 45,200 visitors this month, an increase of 7,100 from last month.',\n            whyItMatters: 'More website traffic typically leads to more customers and revenue. This growth suggests effective marketing.',\n            whatToDoNext: [\n              'Analyze which marketing channels drove the traffic increase',\n              'Optimize high-traffic pages for better conversion',\n              'Create more content similar to what\\'s working'\n            ]\n          },\n          healthStatus: 'excellent',\n          category: 'marketing',\n          sources: ['Google Analytics', 'Cloudflare'],\n          lastUpdated: new Date().toISOString(),\n          benchmark: {\n            industry: 32000,\n            yourTarget: 50000,\n            status: 'above'\n          }\n        },\n        {\n          id: 'team-productivity',\n          title: 'Team Response Time',\n          subtitle: 'How quickly your team responds to customers',\n          value: '2.3',\n          unit: 'hours',\n          trend: {\n            direction: 'down',\n            percentage: 15.2,\n            period: 'vs last month',\n            isGood: true\n          },\n          context: {\n            whatItMeans: 'Your team now responds to customer inquiries in an average of 2.3 hours, down from 2.7 hours last month.',\n            whyItMatters: 'Faster response times improve customer satisfaction and can lead to higher retention and referrals.',\n            whatToDoNext: [\n              'Recognize team members for improved response times',\n              'Document what processes led to the improvement',\n              'Set goal to reach under 2 hours average response time'\n            ]\n          },\n          healthStatus: 'good',\n          category: 'team',\n          sources: ['Microsoft 365', 'HubSpot'],\n          lastUpdated: new Date().toISOString(),\n          benchmark: {\n            industry: 4.2,\n            yourTarget: 2.0,\n            status: 'above'\n          }\n        },\n        {\n          id: 'customer-satisfaction',\n          title: 'Customer Happiness',\n          subtitle: 'How satisfied your customers are',\n          value: 8.7,\n          unit: '/10',\n          trend: {\n            direction: 'up',\n            percentage: 5.4,\n            period: 'vs last month',\n            isGood: true\n          },\n          context: {\n            whatItMeans: 'Customers rate their satisfaction with your service as 8.7 out of 10, up from 8.2 last month.',\n            whyItMatters: 'High customer satisfaction leads to repeat business, referrals, and positive reviews that drive growth.',\n            whatToDoNext: [\n              'Ask top customers what they love most about your service',\n              'Address feedback from customers who rated below 7',\n              'Create case studies from your happiest customers'\n            ]\n          },\n          healthStatus: 'excellent',\n          category: 'customers',\n          sources: ['HubSpot', 'Survey Data'],\n          lastUpdated: new Date().toISOString(),\n          benchmark: {\n            industry: 7.8,\n            yourTarget: 9.0,\n            status: 'above'\n          }\n        }\n      ];\n\n      // Generate business stories that connect the dots\n      const stories: BusinessStory[] = [\n        {\n          id: 'growth-momentum',\n          title: 'Strong Growth Momentum Across All Areas',\n          narrative: 'Your business is experiencing exceptional growth this month. Revenue is up 23.5%, new customers increased by 12.3%, and website traffic grew by 18.7%. This suggests your marketing efforts are effectively attracting the right customers who are willing to pay for your services.',\n          keyMetrics: ['monthly-revenue', 'customer-acquisition', 'website-performance'],\n          insights: [\n            'Revenue growth is outpacing customer growth, indicating higher customer value',\n            'Website traffic increase correlates strongly with customer acquisition',\n            'System reliability remains high despite increased demand'\n          ],\n          recommendations: [\n            {\n              action: 'Scale successful marketing channels',\n              effort: 'medium',\n              impact: 'high',\n              timeframe: '2-4 weeks'\n            },\n            {\n              action: 'Prepare infrastructure for continued growth',\n              effort: 'high',\n              impact: 'high',\n              timeframe: '4-6 weeks'\n            },\n            {\n              action: 'Document successful processes',\n              effort: 'low',\n              impact: 'medium',\n              timeframe: '1 week'\n            }\n          ],\n          urgency: 'medium'\n        },\n        {\n          id: 'operational-excellence',\n          title: 'Operational Excellence Supporting Growth',\n          narrative: 'While your business grows rapidly, your operational metrics remain strong. System uptime is at 99.8%, team response times have improved by 15.2%, and customer satisfaction increased to 8.7/10. This operational foundation is enabling sustainable growth.',\n          keyMetrics: ['system-reliability', 'team-productivity', 'customer-satisfaction'],\n          insights: [\n            'Improved team efficiency is driving better customer experiences',\n            'High system reliability is protecting revenue during growth phase',\n            'Customer satisfaction improvements suggest operational changes are working'\n          ],\n          recommendations: [\n            {\n              action: 'Implement team recognition program',\n              effort: 'low',\n              impact: 'medium',\n              timeframe: '1 week'\n            },\n            {\n              action: 'Add redundancy to critical systems',\n              effort: 'high',\n              impact: 'high',\n              timeframe: '6-8 weeks'\n            },\n            {\n              action: 'Create customer feedback loop',\n              effort: 'medium',\n              impact: 'medium',\n              timeframe: '2-3 weeks'\n            }\n          ],\n          urgency: 'low'\n        },\n        {\n          id: 'scaling-readiness',\n          title: 'Preparing for Next Growth Phase',\n          narrative: 'Your current growth trajectory suggests you\\'ll reach your revenue target of $150K within 2-3 months. However, this will require scaling your operations, team, and infrastructure to maintain quality while growing.',\n          keyMetrics: ['monthly-revenue', 'system-reliability', 'team-productivity'],\n          insights: [\n            'Current growth rate will require operational scaling soon',\n            'Team efficiency improvements buy time for hiring decisions',\n            'Infrastructure is performing well but may need expansion'\n          ],\n          recommendations: [\n            {\n              action: 'Plan hiring for key roles',\n              effort: 'high',\n              impact: 'high',\n              timeframe: '4-8 weeks'\n            },\n            {\n              action: 'Automate routine processes',\n              effort: 'medium',\n              impact: 'high',\n              timeframe: '3-5 weeks'\n            },\n            {\n              action: 'Upgrade infrastructure capacity',\n              effort: 'high',\n              impact: 'high',\n              timeframe: '6-10 weeks'\n            }\n          ],\n          urgency: 'high'\n        }\n      ];\n\n      setMetrics(digestibleMetrics);\n      setBusinessStories(stories);\n      \n    } catch (error) {\n      console.error('Error loading digestible data:', error);\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const getHealthStatusColor = (status: string) => {\n    switch (status) {\n      case 'excellent': return 'text-success border-success bg-success/10';\n      case 'good': return 'text-primary border-primary bg-primary/10';\n      case 'warning': return 'text-warning border-warning bg-warning/10';\n      case 'critical': return 'text-destructive border-destructive bg-destructive/10';\n      default: return 'text-muted-foreground border-muted bg-muted/10';\n    }\n  };\n\n  const getTrendColor = (trend: any) => {\n    if (trend.isGood) {\n      return trend.direction === 'up' ? 'text-success' : 'text-success';\n    } else {\n      return trend.direction === 'up' ? 'text-destructive' : 'text-destructive';\n    }\n  };\n\n  const getTrendIcon = (trend: any) => {\n    const color = getTrendColor(trend);\n    if (trend.direction === 'up') {\n      return <TrendingUp className={`w-4 h-4 ${color}`} />;\n    } else if (trend.direction === 'down') {\n      return <TrendingDown className={`w-4 h-4 ${color}`} />;\n    } else {\n      return <Activity className=\"w-4 h-4 text-muted-foreground\" />;\n    }\n  };\n\n  const getCategoryIcon = (category: string) => {\n    switch (category) {\n      case 'revenue': return <DollarSign className=\"w-5 h-5 text-success\" />;\n      case 'customers': return <Users className=\"w-5 h-5 text-primary\" />;\n      case 'operations': return <Settings className=\"w-5 h-5 text-muted-foreground\" />;\n      case 'marketing': return <Globe className=\"w-5 h-5 text-warning\" />;\n      case 'team': return <Mail className=\"w-5 h-5 text-secondary\" />;\n      default: return <Activity className=\"w-5 h-5 text-muted-foreground\" />;\n    }\n  };\n\n  const getUrgencyColor = (urgency: string) => {\n    switch (urgency) {\n      case 'critical': return 'border-l-destructive bg-destructive/5';\n      case 'high': return 'border-l-warning bg-warning/5';\n      case 'medium': return 'border-l-primary bg-primary/5';\n      case 'low': return 'border-l-success bg-success/5';\n      default: return 'border-l-muted bg-muted/5';\n    }\n  };\n\n  const getEffortImpactBadge = (effort: string, impact: string) => {\n    const effortColors = {\n      low: 'bg-success/10 text-success',\n      medium: 'bg-warning/10 text-warning',\n      high: 'bg-destructive/10 text-destructive'\n    };\n    \n    const impactColors = {\n      low: 'bg-muted/10 text-muted-foreground',\n      medium: 'bg-primary/10 text-primary',\n      high: 'bg-success/10 text-success'\n    };\n\n    return { effort: effortColors[effort as keyof typeof effortColors], impact: impactColors[impact as keyof typeof impactColors] };\n  };\n\n  const filteredMetrics = selectedCategory === 'all' \n    ? metrics \n    : metrics.filter(metric => metric.category === selectedCategory);\n\n  if (loading) {\n    return (\n      <div className=\"flex items-center justify-center py-8\">\n        <RefreshCw className=\"w-6 h-6 animate-spin text-primary\" />\n        <span className=\"ml-2 text-muted-foreground\">Loading your business insights...</span>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"space-y-6\">\n      {/* Header */}\n      <div className=\"flex items-center justify-between\">\n        <div>\n          <h2 className=\"text-3xl font-bold\">Business Dashboard</h2>\n          <p className=\"text-muted-foreground\">Your business metrics in plain English</p>\n        </div>\n        <div className=\"flex items-center space-x-2\">\n          <Button variant=\"outline\" size=\"sm\">\n            <HelpCircle className=\"w-4 h-4 mr-2\" />\n            How to Read This\n          </Button>\n          <Button variant=\"outline\" size=\"sm\" onClick={loadDigestibleData}>\n            <RefreshCw className=\"w-4 h-4 mr-2\" />\n            Refresh\n          </Button>\n        </div>\n      </div>\n\n      {/* Category Filter */}\n      <div className=\"flex items-center space-x-2\">\n        {(['all', 'revenue', 'customers', 'operations', 'marketing', 'team'] as const).map((category) => (\n          <Button\n            key={category}\n            variant={selectedCategory === category ? 'default' : 'outline'}\n            size=\"sm\"\n            onClick={() => setSelectedCategory(category)}\n            className=\"flex items-center space-x-1\"\n          >\n            {category !== 'all' && getCategoryIcon(category)}\n            <span>{category === 'all' ? 'All Metrics' : category.charAt(0).toUpperCase() + category.slice(1)}</span>\n          </Button>\n        ))}\n      </div>\n\n      {/* Main Content */}\n      <Tabs value={selectedView} onValueChange={(value: any) => setSelectedView(value)} className=\"space-y-6\">\n        <TabsList className=\"grid w-full grid-cols-3\">\n          <TabsTrigger value=\"metrics\">Key Metrics</TabsTrigger>\n          <TabsTrigger value=\"stories\">Business Stories</TabsTrigger>\n          <TabsTrigger value=\"actions\">Action Items</TabsTrigger>\n        </TabsList>\n\n        {/* Metrics Tab */}\n        <TabsContent value=\"metrics\" className=\"space-y-6\">\n          <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-6\">\n            {filteredMetrics.map((metric) => (\n              <Card key={metric.id} className={`border-l-4 ${getHealthStatusColor(metric.healthStatus).split(' ')[1]} ${getHealthStatusColor(metric.healthStatus).split(' ')[2]}`}>\n                <CardHeader className=\"pb-3\">\n                  <div className=\"flex items-center justify-between\">\n                    <div className=\"flex items-center space-x-2\">\n                      {getCategoryIcon(metric.category)}\n                      <div>\n                        <CardTitle className=\"text-lg\">{metric.title}</CardTitle>\n                        <CardDescription>{metric.subtitle}</CardDescription>\n                      </div>\n                    </div>\n                    <Badge variant=\"outline\" className={getHealthStatusColor(metric.healthStatus)}>\n                      {metric.healthStatus}\n                    </Badge>\n                  </div>\n                </CardHeader>\n                <CardContent className=\"space-y-4\">\n                  {/* Main Value */}\n                  <div className=\"flex items-center justify-between\">\n                    <div>\n                      <span className=\"text-3xl font-bold\">\n                        {metric.unit === '$' && '$'}{metric.value}{metric.unit && metric.unit !== '$' && metric.unit}\n                      </span>\n                    </div>\n                    <div className=\"flex items-center space-x-1\">\n                      {getTrendIcon(metric.trend)}\n                      <span className={`font-medium ${getTrendColor(metric.trend)}`}>\n                        {metric.trend.percentage}% {metric.trend.period}\n                      </span>\n                    </div>\n                  </div>\n\n                  {/* Benchmark Progress */}\n                  {metric.benchmark && (\n                    <div className=\"space-y-2\">\n                      <div className=\"flex items-center justify-between text-sm\">\n                        <span>Progress to your target</span>\n                        <span className=\"font-medium\">\n                          {metric.benchmark.yourTarget}{metric.unit}\n                        </span>\n                      </div>\n                      <Progress \n                        value={Math.min(100, (typeof metric.value === 'number' ? metric.value : parseFloat(metric.value.toString().replace(/[^0-9.]/g, ''))) / metric.benchmark.yourTarget * 100)} \n                        className=\"h-2\"\n                      />\n                      <div className=\"flex items-center justify-between text-xs text-muted-foreground\">\n                        <span>Industry avg: {metric.benchmark.industry}{metric.unit}</span>\n                        <Badge variant=\"outline\" className={metric.benchmark.status === 'above' ? 'text-success border-success' : 'text-warning border-warning'}>\n                          {metric.benchmark.status} average\n                        </Badge>\n                      </div>\n                    </div>\n                  )}\n\n                  {/* Context */}\n                  <div className=\"space-y-3 pt-3 border-t\">\n                    <div>\n                      <h5 className=\"font-medium text-sm mb-1\">What this means</h5>\n                      <p className=\"text-sm text-muted-foreground\">{metric.context.whatItMeans}</p>\n                    </div>\n                    \n                    <div>\n                      <h5 className=\"font-medium text-sm mb-1\">Why it matters</h5>\n                      <p className=\"text-sm text-muted-foreground\">{metric.context.whyItMatters}</p>\n                    </div>\n                    \n                    <div>\n                      <h5 className=\"font-medium text-sm mb-1\">What to do next</h5>\n                      <ul className=\"space-y-1\">\n                        {metric.context.whatToDoNext.slice(0, 2).map((action, index) => (\n                          <li key={index} className=\"flex items-start space-x-2 text-sm text-muted-foreground\">\n                            <CheckCircle2 className=\"w-3 h-3 mt-0.5 text-primary\" />\n                            <span>{action}</span>\n                          </li>\n                        ))}\n                      </ul>\n                    </div>\n                  </div>\n\n                  {/* Footer */}\n                  <div className=\"flex items-center justify-between text-xs text-muted-foreground pt-2 border-t\">\n                    <span>Sources: {metric.sources.join(', ')}</span>\n                    <span>Updated {new Date(metric.lastUpdated).toLocaleDateString()}</span>\n                  </div>\n                </CardContent>\n              </Card>\n            ))}\n          </div>\n        </TabsContent>\n\n        {/* Stories Tab */}\n        <TabsContent value=\"stories\" className=\"space-y-6\">\n          <div className=\"space-y-6\">\n            {businessStories.map((story) => (\n              <Card key={story.id} className={`border-l-4 ${getUrgencyColor(story.urgency)}`}>\n                <CardHeader>\n                  <div className=\"flex items-center justify-between\">\n                    <CardTitle className=\"text-xl\">{story.title}</CardTitle>\n                    <Badge variant={story.urgency === 'critical' ? 'destructive' : story.urgency === 'high' ? 'destructive' : 'default'}>\n                      {story.urgency === 'critical' && <AlertTriangle className=\"h-4 w-4 mr-2\" />}\n                      {story.urgency === 'high' && <AlertTriangle className=\"h-4 w-4 mr-2\" />}\n                      {story.urgency}\n                    </Badge>\n                  </div>\n                </CardHeader>\n                <CardContent className=\"space-y-4\">\n                  <p className=\"text-muted-foreground leading-relaxed\">{story.narrative}</p>\n                  \n                  <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n                    <div>\n                      <h5 className=\"font-medium text-sm mb-2\">Key Insights</h5>\n                      <ul className=\"space-y-1\">\n                        {story.insights.map((insight, index) => (\n                          <li key={index} className=\"flex items-start space-x-2 text-sm text-muted-foreground\">\n                            <Lightbulb className=\"w-3 h-3 mt-0.5 text-warning\" />\n                            <span>{insight}</span>\n                          </li>\n                        ))}\n                      </ul>\n                    </div>\n                    \n                    <div>\n                      <h5 className=\"font-medium text-sm mb-2\">Related Metrics</h5>\n                      <div className=\"flex flex-wrap gap-1\">\n                        {story.keyMetrics.map((metricId) => {\n                          const metric = metrics.find(m => m.id === metricId);\n                          return metric ? (\n                            <Badge key={metricId} variant=\"secondary\" className=\"text-xs\">\n                              {metric.title}\n                            </Badge>\n                          ) : null;\n                        })}\n                      </div>\n                    </div>\n                  </div>\n                  \n                  <div>\n                    <h5 className=\"font-medium text-sm mb-2\">Recommended Actions</h5>\n                    <div className=\"space-y-2\">\n                      {story.recommendations.map((rec, index) => {\n                        const badges = getEffortImpactBadge(rec.effort, rec.impact);\n                        return (\n                          <div key={index} className=\"flex items-center justify-between p-3 bg-muted/30 rounded-lg\">\n                            <div>\n                              <span className=\"font-medium text-sm\">{rec.action}</span>\n                              <div className=\"flex items-center space-x-2 mt-1\">\n                                <Badge variant=\"outline\" className={badges.effort}>\n                                  {rec.effort} effort\n                                </Badge>\n                                <Badge variant=\"outline\" className={badges.impact}>\n                                  {rec.impact} impact\n                                </Badge>\n                                <span className=\"text-xs text-muted-foreground\">{rec.timeframe}</span>\n                              </div>\n                            </div>\n                            <Button variant=\"outline\" size=\"sm\">\n                              <Play className=\"w-3 h-3 mr-1\" />\n                              Start\n                            </Button>\n                          </div>\n                        );\n                      })}\n                    </div>\n                  </div>\n                </CardContent>\n              </Card>\n            ))}\n          </div>\n        </TabsContent>\n\n        {/* Actions Tab */}\n        <TabsContent value=\"actions\" className=\"space-y-6\">\n          <Card>\n            <CardHeader>\n              <CardTitle>Prioritized Action Items</CardTitle>\n              <CardDescription>Based on your current metrics and business stories</CardDescription>\n            </CardHeader>\n            <CardContent>\n              <div className=\"space-y-4\">\n                {businessStories\n                  .flatMap(story => story.recommendations.map(rec => ({ ...rec, storyTitle: story.title, urgency: story.urgency })))\n                  .sort((a, b) => {\n                    const urgencyOrder = { critical: 4, high: 3, medium: 2, low: 1 };\n                    const impactOrder = { high: 3, medium: 2, low: 1 };\n                    return (urgencyOrder[b.urgency as keyof typeof urgencyOrder] * impactOrder[b.impact as keyof typeof impactOrder]) - \n                           (urgencyOrder[a.urgency as keyof typeof urgencyOrder] * impactOrder[a.impact as keyof typeof impactOrder]);\n                  })\n                  .slice(0, 8)\n                  .map((action, index) => {\n                    const badges = getEffortImpactBadge(action.effort, action.impact);\n                    return (\n                      <div key={index} className=\"flex items-center justify-between p-4 border rounded-lg\">\n                        <div className=\"space-y-1\">\n                          <div className=\"flex items-center space-x-2\">\n                            <span className=\"font-medium\">{action.action}</span>\n                            <Badge variant=\"outline\" className=\"text-xs\">\n                              #{index + 1}\n                            </Badge>\n                          </div>\n                          <div className=\"flex items-center space-x-2\">\n                            <Badge variant=\"outline\" className={badges.effort}>\n                              {action.effort} effort\n                            </Badge>\n                            <Badge variant=\"outline\" className={badges.impact}>\n                              {action.impact} impact\n                            </Badge>\n                            <span className=\"text-xs text-muted-foreground\">{action.timeframe}</span>\n                          </div>\n                          <p className=\"text-xs text-muted-foreground\">From: {action.storyTitle}</p>\n                        </div>\n                        <Button variant=\"outline\" size=\"sm\">\n                          Take Action\n                          <ArrowRight className=\"w-4 h-4 ml-1\" />\n                        </Button>\n                      </div>\n                    );\n                  })}\n              </div>\n            </CardContent>\n          </Card>\n        </TabsContent>\n      </Tabs>\n    </div>\n  );\n};\n\nexport default DigestibleMetricsDashboard; ","usedDeprecatedRules":[]},{"filePath":"/home/vonj/Github/Nexus/src/components/analytics/UnifiedAnalyticsDashboard.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/vonj/Github/Nexus/src/components/assessment/AnswerInput.tsx","messages":[{"ruleId":"no-restricted-syntax","severity":1,"message":"Use design tokens instead of hardcoded text colors (e.g., text-foreground, text-muted-foreground)","line":60,"column":29,"nodeType":"Literal","messageId":"restrictedSyntax","endLine":60,"endColumn":43},{"ruleId":"no-restricted-syntax","severity":1,"message":"Use design tokens instead of hardcoded text colors (e.g., text-foreground, text-muted-foreground)","line":74,"column":22,"nodeType":"Literal","messageId":"restrictedSyntax","endLine":74,"endColumn":58}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState } from 'react';\nimport type { AssessmentQuestion } from '@prisma/client';\nimport { Button } from '@/components/ui/Button';\nimport { Input } from '@/components/ui/Input';\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/Select';\n\ninterface AnswerInputProps {\n  question: AssessmentQuestion;\n  onAnswer: (questionId: string, value: string | number | boolean | null) => void;\n  isAnswered: boolean;\n}\n\nconst AnswerInput: React.FC<AnswerInputProps> = ({ question, onAnswer, isAnswered }) => {\n  const [value, setValue] = useState<string | number>('');\n\n  const renderInput = () => {\n    let inputComponent;\n\n    switch (question.question_type) {\n      case 'bool':\n        inputComponent = (\n          <div className=\"flex gap-2\">\n            <Button onClick={() => onAnswer(question.id, true)} variant=\"outline\">Yes</Button>\n            <Button onClick={() => onAnswer(question.id, false)} variant=\"outline\">No</Button>\n          </div>\n        );\n        break;\n      case 'number':\n      case 'text':\n      case 'date':\n        inputComponent = (\n          <div className=\"flex gap-2\">\n            <Input\n              type={question.question_type}\n              value={value as string}\n              onChange={(e) => setValue(e.target.value)}\n              className=\"max-w-xs\"\n              placeholder={`Enter value...`}\n            />\n            <Button onClick={() => onAnswer(question.id, value)}>Submit</Button>\n          </div>\n        );\n        break;\n      case 'enum':\n        inputComponent = (\n          <Select onValueChange={(val) => onAnswer(question.id, val)}>\n            <SelectTrigger className=\"max-w-xs\">\n              <SelectValue placeholder=\"Select an option\" />\n            </SelectTrigger>\n            <SelectContent>\n              {question.options && typeof question.options === 'object' && !Array.isArray(question.options) ?\n                Object.keys(question.options).map((key) => (\n                  <SelectItem key={key} value={key}>{key}</SelectItem>\n                )) : null}\n            </SelectContent>\n          </Select>\n        );\n        break;\n      default:\n        return <p className=\"text-red-500\">Unknown question type</p>;\n    }\n\n    return (\n      <div className=\"flex items-center gap-4 mt-2\">\n        {inputComponent}\n        <Button onClick={() => onAnswer(question.id, null)} variant=\"ghost\" size=\"sm\">N/A</Button>\n      </div>\n    );\n  };\n\n  return (\n    <div className=\"mt-4\">\n      {isAnswered ? (\n        <p className=\"text-sm text-green-600 font-medium\">Answered, thank you!</p>\n      ) : (\n        renderInput()\n      )}\n    </div>\n  );\n};\n\nexport default AnswerInput; ","usedDeprecatedRules":[]},{"filePath":"/home/vonj/Github/Nexus/src/components/assessment/Questionnaire.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/vonj/Github/Nexus/src/components/auth/AuthDebugPanel.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/vonj/Github/Nexus/src/components/auth/ProtectedRoute.tsx","messages":[{"ruleId":"no-restricted-syntax","severity":1,"message":"Use design tokens instead of hardcoded text colors (e.g., text-foreground, text-muted-foreground)","line":34,"column":28,"nodeType":"Literal","messageId":"restrictedSyntax","endLine":34,"endColumn":47},{"ruleId":"no-restricted-syntax","severity":1,"message":"Use design tokens instead of hardcoded text colors (e.g., text-foreground, text-muted-foreground)","line":80,"column":26,"nodeType":"Literal","messageId":"restrictedSyntax","endLine":80,"endColumn":48}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import type { ReactNode } from 'react';\nimport { Navigate, useLocation } from 'react-router-dom';\nimport { useAuth } from '@/contexts/AuthContext';\nimport { Spinner } from '@/components/ui/Spinner';\nimport EmailNotVerified from '@/pages/EmailNotVerified';\nimport { Button } from '@/components/ui/Button';\nimport React, { useEffect, useState } from 'react';\n\ninterface ProtectedRouteProps {\n  children: ReactNode;\n  allowedRoles?: string[];\n}\n\nexport const ProtectedRoute = ({ children, allowedRoles }: ProtectedRouteProps) => {\n  const { user, session, loading, error } = useAuth();\n  const location = useLocation();\n  const [loadingTimeout, setLoadingTimeout] = useState(false);\n\n  useEffect(() => {\n    if (!loading) return;\n    const timer = setTimeout(() => setLoadingTimeout(true), 10000); // 10 seconds\n    return () => clearTimeout(timer);\n  }, [loading]);\n\n  // Show error state if there's an auth error\n  if (error) {\n    console.error('Auth error in ProtectedRoute:', error);\n    \n    // If it's a timeout error, show a retry option\n    if (error.message.includes('timeout')) {\n      return (\n        <div className=\"min-h-screen flex items-center justify-center bg-background\">\n          <div className=\"text-center max-w-md mx-auto p-6\">\n            <div className=\"text-red-500 mb-4\">\n              <svg className=\"w-16 h-16 mx-auto\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\n                <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M12 8v4m0 4h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z\" />\n              </svg>\n            </div>\n            <h2 className=\"text-xl font-semibold text-foreground mb-2\">Authentication Timeout</h2>\n            <p className=\"text-muted-foreground mb-6\">\n              The authentication process is taking longer than expected. Please try refreshing the page.\n            </p>\n            <Button onClick={() => window.location.reload()} className=\"mr-3\">\n              Refresh Page\n            </Button>\n            <Button variant=\"outline\" onClick={() => window.location.href = '/login'}>\n              Go to Login\n            </Button>\n          </div>\n        </div>\n      );\n    }\n    \n    // For other errors, redirect to login with error message\n    return <Navigate to=\"/login\" state={{ from: location, error: error.message }} replace />;\n  }\n\n  // Show loading spinner while auth is initializing or loading\n  if (loading && !loadingTimeout) {\n    return (\n      <div className=\"min-h-screen flex items-center justify-center bg-background\">\n        <div className=\"text-center\">\n          <Spinner size={32} />\n          <p className=\"mt-4 text-sm text-muted-foreground\">\n            Loading...\n          </p>\n          <p className=\"mt-2 text-xs text-muted-foreground/70\">\n            This usually takes just a moment\n          </p>\n        </div>\n      </div>\n    );\n  }\n\n  // Timeout fallback if loading takes too long\n  if (loading && loadingTimeout) {\n    return (\n      <div className=\"min-h-screen flex items-center justify-center bg-background\">\n        <div className=\"text-center max-w-md mx-auto p-6\">\n          <div className=\"text-yellow-500 mb-4\">\n            <svg className=\"w-16 h-16 mx-auto\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\n              <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M12 8v4m0 4h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z\" />\n            </svg>\n          </div>\n          <h2 className=\"text-xl font-semibold text-foreground mb-2\">Loading Timeout</h2>\n          <p className=\"text-muted-foreground mb-6\">\n            The authentication process is taking longer than expected. Please try refreshing the page or check your network connection.\n          </p>\n          <Button onClick={() => window.location.reload()} className=\"mr-3\">\n            Retry\n          </Button>\n        </div>\n      </div>\n    );\n  }\n\n  // Check email verification\n  if (session && !session.user.email_confirmed_at) {\n    return <EmailNotVerified />;\n  }\n\n  // Redirect to login if loading is finished and there's no user or session.\n  // This is more robust against HMR issues in development.\n  if (!loading && !user && !session) {\n    return <Navigate to=\"/login\" state={{ from: location }} replace />;\n  }\n\n  // If we have a session but the user profile is still loading,\n  // it's better to keep showing the loading spinner than to redirect.\n  if (loading || !user) {\n    return (\n      <div className=\"min-h-screen flex items-center justify-center bg-background\">\n        <div className=\"text-center\">\n          <Spinner size={32} />\n          <p className=\"mt-4 text-sm text-muted-foreground\">\n            Initializing Session...\n          </p>\n        </div>\n      </div>\n    );\n  }\n\n  // Check for required role\n  if (allowedRoles && user && !allowedRoles.includes(user.role || '')) {\n    return (\n      <div className=\"min-h-screen flex items-center justify-center bg-background\">\n        <div className=\"text-center\">\n          <h1 className=\"text-2xl font-bold\">Not Authorized</h1>\n          <p className=\"mt-4 text-muted-foreground\">You do not have permission to view this page.</p>\n        </div>\n      </div>\n    );\n  }\n\n  // Render protected content\n  return <>{children}</>;\n}; ","usedDeprecatedRules":[]},{"filePath":"/home/vonj/Github/Nexus/src/components/billing/BillingDashboard.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'usageBilling' is assigned a value but never used.","line":32,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":32,"endColumn":22},{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has a missing dependency: 'loadBillingData'. Either include it or remove the dependency array.","line":40,"column":6,"nodeType":"ArrayExpression","endLine":40,"endColumn":12,"suggestions":[{"desc":"Update the dependencies array to be: [loadBillingData, user]","fix":{"range":[1472,1478],"text":"[loadBillingData, user]"}}]},{"ruleId":"no-restricted-syntax","severity":1,"message":"Use design tokens instead of hardcoded colors (e.g., bg-primary, bg-secondary)","line":119,"column":26,"nodeType":"Literal","messageId":"restrictedSyntax","endLine":119,"endColumn":60},{"ruleId":"no-restricted-syntax","severity":1,"message":"Use design tokens instead of hardcoded colors (e.g., bg-primary, bg-secondary)","line":121,"column":28,"nodeType":"Literal","messageId":"restrictedSyntax","endLine":121,"endColumn":57},{"ruleId":"no-restricted-syntax","severity":1,"message":"Use design tokens instead of hardcoded colors (e.g., bg-primary, bg-secondary)","line":122,"column":28,"nodeType":"Literal","messageId":"restrictedSyntax","endLine":122,"endColumn":57},{"ruleId":"no-restricted-syntax","severity":1,"message":"Use design tokens instead of hardcoded text colors (e.g., text-foreground, text-muted-foreground)","line":317,"column":34,"nodeType":"Literal","messageId":"restrictedSyntax","endLine":317,"endColumn":71}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState, useEffect } from 'react';\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from '../ui/Card';\nimport { Button } from '../ui/Button';\nimport { Badge } from '../ui/Badge';\nimport { Separator } from '../ui/Separator';\nimport { \n  CreditCard, \n  Calendar, \n  TrendingUp, \n  Zap, \n  Shield, \n  Crown,\n  ExternalLink,\n  AlertTriangle\n} from 'lucide-react';\nimport { billingService } from '../../lib/services/billingService';\nimport { quotaService } from '../../lib/services/quotaService';\nimport { useAuth } from '../../contexts/AuthContext';\nimport type { BillingStatus, UsageBilling } from '../../lib/types/billing';\nimport type { ChatQuotas, UsageTracking } from '../../lib/types/licensing';\nimport { LoadingSkeleton } from '@/components/patterns/LoadingStates';\n\ninterface BillingDashboardProps {\n  className?: string;\n}\n\nexport const BillingDashboard: React.FC<BillingDashboardProps> = ({ className }) => {\n  const { user } = useAuth();\n  const [billingStatus, setBillingStatus] = useState<BillingStatus | null>(null);\n  const [quotaStatus, setQuotaStatus] = useState<ChatQuotas | null>(null);\n  const [usageData, setUsageData] = useState<UsageTracking | null>(null);\n  const [usageBilling, setUsageBilling] = useState<UsageBilling | null>(null);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState<string | null>(null);\n\n  useEffect(() => {\n    if (user) {\n      loadBillingData();\n    }\n  }, [user]);\n\n  const loadBillingData = async () => {\n    if (!user) return;\n\n    try {\n      setLoading(true);\n      setError(null);\n\n      const [billing, usageStats, usage] = await Promise.all([\n        billingService.getBillingStatus(user.id),\n        quotaService.getUserUsageStats(user.id),\n        billingService.getUsageBilling(user.id)\n      ]);\n\n      setBillingStatus(billing);\n      setQuotaStatus(usageStats.currentQuotas);\n      setUsageData(usageStats.todayUsage);\n      setUsageBilling(usage);\n    } catch (err) {\n      console.error('Error loading billing data:', err);\n      setError('Failed to load billing information');\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const handleUpgrade = (plan: 'pro' | 'enterprise') => {\n    const paymentLinks = billingService.getPaymentLinks();\n    const url = plan === 'pro' ? paymentLinks.pro : paymentLinks.enterprise;\n    window.open(url, '_blank');\n  };\n\n  const handleCustomerPortal = async () => {\n    if (!user) return;\n    \n    try {\n      const { portalUrl } = await billingService.createCustomerPortalSession(user.id);\n      window.open(portalUrl, '_blank');\n    } catch (error) {\n      console.error('Error opening customer portal:', error);\n      setError('Failed to open customer portal. Please try again.');\n    }\n  };\n\n  const getTierIcon = (tier: string) => {\n    switch (tier) {\n      case 'free': return <Zap className=\"h-5 w-5 text-primary\" />;\n      case 'pro': return <Shield className=\"h-5 w-5 text-secondary\" />;\n      case 'enterprise': return <Crown className=\"h-5 w-5 text-warning\" />;\n      default: return <Zap className=\"h-5 w-5\" />;\n    }\n  };\n\n  const getTierColor = (tier: string) => {\n    switch (tier) {\n      case 'free':\n        return 'bg-primary/10 text-primary';\n      case 'pro':\n        return 'bg-secondary/10 text-secondary';\n      case 'enterprise':\n        return 'bg-warning/10 text-warning';\n      default:\n        return 'bg-muted text-foreground';\n    }\n  };\n\n  const formatCurrency = (amount: number) => {\n    return new Intl.NumberFormat('en-US', {\n      style: 'currency',\n      currency: 'USD',\n    }).format(amount);\n  };\n\n  if (loading) {\n    return (\n      <div className={`space-y-6 ${className}`}>\n        <LoadingSkeleton />\n        <div>\n          <div className=\"h-32 bg-gray-200 rounded-lg mb-4\"></div>\n          <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n            <div className=\"h-48 bg-gray-200 rounded-lg\"></div>\n            <div className=\"h-48 bg-gray-200 rounded-lg\"></div>\n          </div>\n        </div>\n      </div>\n    );\n  }\n\n  if (error) {\n    return (\n      <div className={`${className}`}>\n        <Card>\n          <CardContent className=\"p-6\">\n            <div className=\"flex items-center space-x-2 text-destructive\">\n              <AlertTriangle className=\"h-5 w-5\" />\n              <span>{error}</span>\n            </div>\n            <Button onClick={loadBillingData} className=\"mt-4\">\n              Try Again\n            </Button>\n          </CardContent>\n        </Card>\n      </div>\n    );\n  }\n\n  if (!billingStatus || !quotaStatus) {\n    return null;\n  }\n\n  return (\n    <div className={`space-y-6 ${className}`}>\n      {/* Current Plan Overview */}\n      <Card>\n        <CardHeader>\n          <div className=\"flex items-center justify-between\">\n            <div className=\"flex items-center space-x-4\">\n              {getTierIcon(billingStatus.currentPlan)}\n              <div>\n                <CardTitle className=\"text-xl\">\n                  {billingStatus.currentPlan === 'free' && 'Free Plan'}\n                  {billingStatus.currentPlan === 'pro' && 'Pro Plan'}\n                  {billingStatus.currentPlan === 'enterprise' && 'Enterprise Plan'}\n                </CardTitle>\n                <CardDescription>\n                  {billingStatus.currentPlan === 'free' && 'Basic AI chat features'}\n                  {billingStatus.currentPlan === 'pro' && 'Professional AI tools for growing teams'}\n                  {billingStatus.currentPlan === 'enterprise' && 'Enterprise-grade AI solutions'}\n                </CardDescription>\n              </div>\n            </div>\n            <Badge className={getTierColor(billingStatus.currentPlan)}>\n              {billingStatus.currentPlan.toUpperCase()}\n            </Badge>\n          </div>\n        </CardHeader>\n        <CardContent>\n          <div className=\"grid grid-cols-2 md:grid-cols-4 gap-4\">\n            <div className=\"text-center\">\n              <div className=\"text-2xl font-bold text-primary\">\n                {quotaStatus.max_messages_per_day}\n              </div>\n              <div className=\"text-sm text-muted-foreground\">Messages/day</div>\n            </div>\n            <div className=\"text-center\">\n              <div className=\"text-2xl font-bold text-primary\">\n                {quotaStatus.max_messages_per_hour}\n              </div>\n              <div className=\"text-sm text-muted-foreground\">Messages/hour</div>\n            </div>\n            <div className=\"text-center\">\n              <div className=\"text-2xl font-bold text-primary\">\n                {formatCurrency(\n                  billingStatus.currentPlan === 'pro' ? 29 : \n                  billingStatus.currentPlan === 'enterprise' ? 99 : 0\n                )}\n              </div>\n              <div className=\"text-sm text-muted-foreground\">\n                {billingStatus.currentPlan === 'free' ? 'Free' : 'Per month'}\n              </div>\n            </div>\n            <div className=\"text-center\">\n              <div className=\"text-2xl font-bold text-primary\">\n                {quotaStatus.streaming_enabled ? 'Yes' : 'No'}\n              </div>\n              <div className=\"text-sm text-muted-foreground\">Streaming</div>\n            </div>\n          </div>\n\n          {billingStatus.billingPeriodEnd && (\n            <div className=\"mt-4 p-4 bg-muted rounded-lg\">\n              <div className=\"flex items-center space-x-2 text-sm\">\n                <Calendar className=\"h-4 w-4\" />\n                <span>\n                  {billingStatus.cancelAtPeriodEnd ? 'Cancels' : 'Renews'} on{' '}\n                  {billingStatus.billingPeriodEnd.toLocaleDateString()}\n                </span>\n              </div>\n            </div>\n          )}\n        </CardContent>\n      </Card>\n\n      <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\n        {/* Usage Statistics */}\n        <Card>\n          <CardHeader>\n            <CardTitle className=\"flex items-center space-x-2\">\n              <TrendingUp className=\"h-5 w-5\" />\n              <span>Usage Summary</span>\n            </CardTitle>\n            <CardDescription>\n              Your current usage and limits\n            </CardDescription>\n          </CardHeader>\n          <CardContent className=\"space-y-4\">\n            <div className=\"grid grid-cols-2 gap-4\">\n              <div className=\"text-center p-4 bg-muted rounded-lg\">\n                <div className=\"text-lg font-semibold\">\n                  {usageData?.message_count || 0}\n                </div>\n                <div className=\"text-sm text-muted-foreground\">Messages Today</div>\n              </div>\n              <div className=\"text-center p-4 bg-muted rounded-lg\">\n                <div className=\"text-lg font-semibold\">\n                  {usageData?.ai_requests_made || 0}\n                </div>\n                <div className=\"text-sm text-muted-foreground\">AI Requests</div>\n              </div>\n            </div>\n\n            {quotaStatus.max_file_uploads_per_day > 0 && (\n              <div className=\"grid grid-cols-2 gap-4\">\n                <div className=\"text-center p-4 bg-muted rounded-lg\">\n                  <div className=\"text-lg font-semibold\">\n                    {usageData?.files_uploaded || 0}\n                  </div>\n                  <div className=\"text-sm text-muted-foreground\">Files Uploaded</div>\n                </div>\n                <div className=\"text-center p-4 bg-muted rounded-lg\">\n                  <div className=\"text-lg font-semibold\">\n                    {formatCurrency(usageData?.estimated_cost_usd || 0)}\n                  </div>\n                  <div className=\"text-sm text-muted-foreground\">Est. Cost</div>\n                </div>\n              </div>\n            )}\n          </CardContent>\n        </Card>\n\n        {/* Billing & Upgrade */}\n        <Card>\n          <CardHeader>\n            <CardTitle className=\"flex items-center space-x-2\">\n              <CreditCard className=\"h-5 w-5\" />\n              <span>Billing & Upgrades</span>\n            </CardTitle>\n            <CardDescription>\n              Manage your subscription and billing\n            </CardDescription>\n          </CardHeader>\n          <CardContent className=\"space-y-4\">\n            {billingStatus.currentPlan === 'free' && (\n              <>\n                <div className=\"space-y-4\">\n                  <Button \n                    onClick={() => handleUpgrade('pro')} \n                    className=\"w-full\"\n                    variant=\"default\"\n                  >\n                    <Shield className=\"h-4 w-4 mr-2\" />\n                    Upgrade to Pro - $29/month\n                    <ExternalLink className=\"h-4 w-4 ml-2\" />\n                  </Button>\n                  <Button \n                    onClick={() => handleUpgrade('enterprise')} \n                    className=\"w-full\"\n                    variant=\"outline\"\n                  >\n                    <Crown className=\"h-4 w-4 mr-2\" />\n                    Upgrade to Enterprise - $99/month\n                    <ExternalLink className=\"h-4 w-4 ml-2\" />\n                  </Button>\n                </div>\n                <Separator />\n                <div className=\"text-sm text-muted-foreground\">\n                  <p>✓ No credit card required for free plan</p>\n                  <p>✓ Cancel anytime</p>\n                  <p>✓ Instant activation</p>\n                </div>\n              </>\n            )}\n\n            {billingStatus.currentPlan === 'pro' && (\n              <>\n                <div className=\"p-4 bg-secondary/5 rounded-lg border border-purple-200\">\n                  <div className=\"text-sm font-medium text-purple-800\">Pro Plan Active</div>\n                  <div className=\"text-sm text-secondary\">\n                    Next billing: {billingStatus.billingPeriodEnd?.toLocaleDateString()}\n                  </div>\n                </div>\n                <Button \n                  onClick={() => handleUpgrade('enterprise')} \n                  className=\"w-full\"\n                  variant=\"outline\"\n                >\n                  <Crown className=\"h-4 w-4 mr-2\" />\n                  Upgrade to Enterprise\n                  <ExternalLink className=\"h-4 w-4 ml-2\" />\n                </Button>\n              </>\n            )}\n\n            {billingStatus.currentPlan === 'enterprise' && (\n              <div className=\"p-4 bg-warning/5 rounded-lg border border-warning/20\">\n                <div className=\"text-sm font-medium text-warning/80\">Enterprise Plan Active</div>\n                <div className=\"text-sm text-warning\">\n                  You have access to all premium features\n                </div>\n              </div>\n            )}\n\n            {billingStatus.hasActiveSubscription && (\n              <div className=\"pt-2 text-xs text-muted-foreground\">\n                Manage your subscription and view invoices in the{' '}\n                <button className=\"text-primary underline\" onClick={handleCustomerPortal}>customer portal</button>\n              </div>\n            )}\n          </CardContent>\n        </Card>\n      </div>\n    </div>\n  );\n}; ","usedDeprecatedRules":[]},{"filePath":"/home/vonj/Github/Nexus/src/components/business/BusinessProfileSetup.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'AlertCircle' is defined but never used.","line":17,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":17,"endColumn":14},{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has a missing dependency: 'loadExistingProfile'. Either include it or remove the dependency array.","line":46,"column":6,"nodeType":"ArrayExpression","endLine":46,"endColumn":12,"suggestions":[{"desc":"Update the dependencies array to be: [loadExistingProfile, user]","fix":{"range":[1664,1670],"text":"[loadExistingProfile, user]"}}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":139,"column":99,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":139,"endColumn":102,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[5041,5044],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[5041,5044],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState, useEffect } from 'react';\nimport { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/Card';\nimport { Button } from '@/components/ui/Button';\nimport { Input } from '@/components/ui/Input';\nimport { Textarea } from '@/components/ui/Textarea';\nimport { Badge } from '@/components/ui/Badge';\nimport { useToast } from '@/components/ui/Toast';\nimport { useAuth } from '@/contexts/AuthContext';\nimport { businessProfileService, BusinessProfile } from '@/lib/business/businessProfileService';\nimport {\n  Building2,\n  Users,\n  Target,\n  DollarSign,\n  Lightbulb,\n  TrendingUp,\n  AlertCircle,\n  CheckCircle2,\n  Plus,\n  X\n} from 'lucide-react';\n\ninterface BusinessProfileSetupProps {\n  onComplete?: () => void;\n}\n\nexport const BusinessProfileSetup: React.FC<BusinessProfileSetupProps> = ({ onComplete }) => {\n  const { user } = useAuth();\n  const { toast } = useToast();\n  const [currentStep, setCurrentStep] = useState(0);\n  const [profile, setProfile] = useState<Partial<BusinessProfile>>({});\n  const [isLoading, setIsLoading] = useState(false);\n\n  const steps = [\n    { title: 'Company Identity', icon: <Building2 className=\"w-5 h-5\" /> },\n    { title: 'What We Do', icon: <Lightbulb className=\"w-5 h-5\" /> },\n    { title: 'Who We Serve', icon: <Users className=\"w-5 h-5\" /> },\n    { title: 'How We Serve', icon: <Target className=\"w-5 h-5\" /> },\n    { title: 'Current Clients', icon: <Users className=\"w-5 h-5\" /> },\n    { title: 'Revenue & Pricing', icon: <DollarSign className=\"w-5 h-5\" /> },\n    { title: 'Goals & Strategy', icon: <TrendingUp className=\"w-5 h-5\" /> },\n  ];\n\n  useEffect(() => {\n    loadExistingProfile();\n  }, [user]);\n\n  const loadExistingProfile = async () => {\n    if (!user?.org_id) return;\n    \n    const existingProfile = await businessProfileService.getBusinessProfile(user.org_id);\n    if (existingProfile) {\n      setProfile(existingProfile);\n    }\n  };\n\n  const handleSave = async () => {\n    if (!user?.org_id) return;\n    \n    setIsLoading(true);\n    const success = await businessProfileService.saveBusinessProfile(user.org_id, profile);\n    \n    if (success) {\n      toast({\n        title: 'Success',\n        description: 'Business profile saved successfully!',\n        variant: 'default'\n      });\n      onComplete?.();\n    } else {\n      toast({\n        title: 'Error',\n        description: 'Failed to save business profile',\n        variant: 'destructive'\n      });\n    }\n    setIsLoading(false);\n  };\n\n  const addToArray = (field: keyof BusinessProfile, value: string) => {\n    if (!value.trim()) return;\n    \n    setProfile(prev => ({\n      ...prev,\n      [field]: [...(prev[field] as string[] || []), value.trim()]\n    }));\n  };\n\n  const removeFromArray = (field: keyof BusinessProfile, index: number) => {\n    setProfile(prev => ({\n      ...prev,\n      [field]: (prev[field] as string[])?.filter((_, i) => i !== index) || []\n    }));\n  };\n\n  const renderStep = () => {\n    switch (currentStep) {\n      case 0: // Company Identity\n        return (\n          <div className=\"space-y-6\">\n            <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n              <div>\n                <label className=\"block text-sm font-medium mb-2\">Company Name</label>\n                <Input\n                  value={profile.company_name || ''}\n                  onChange={(e) => setProfile(prev => ({ ...prev, company_name: e.target.value }))}\n                  placeholder=\"e.g., Marcoby\"\n                />\n              </div>\n              <div>\n                <label className=\"block text-sm font-medium mb-2\">Industry</label>\n                <Input\n                  value={profile.industry || ''}\n                  onChange={(e) => setProfile(prev => ({ ...prev, industry: e.target.value }))}\n                  placeholder=\"e.g., Technology Consulting\"\n                />\n              </div>\n              <div>\n                <label className=\"block text-sm font-medium mb-2\">Business Model</label>\n                <select\n                  className=\"w-full p-2 border rounded-md\"\n                  value={profile.business_model || ''}\n                  onChange={(e) => setProfile(prev => ({ ...prev, business_model: e.target.value }))}\n                >\n                  <option value=\"\">Select business model</option>\n                  <option value=\"B2B\">B2B</option>\n                  <option value=\"B2C\">B2C</option>\n                  <option value=\"SaaS\">SaaS</option>\n                  <option value=\"Consulting\">Consulting</option>\n                  <option value=\"E-commerce\">E-commerce</option>\n                  <option value=\"Marketplace\">Marketplace</option>\n                </select>\n              </div>\n              <div>\n                <label className=\"block text-sm font-medium mb-2\">Company Size</label>\n                <select\n                  className=\"w-full p-2 border rounded-md\"\n                  value={profile.company_size || ''}\n                  onChange={(e) => setProfile(prev => ({ ...prev, company_size: e.target.value as any }))}\n                >\n                  <option value=\"\">Select size</option>\n                  <option value=\"solopreneur\">Solopreneur</option>\n                  <option value=\"startup\">Startup (2-10)</option>\n                  <option value=\"small\">Small (11-50)</option>\n                  <option value=\"medium\">Medium (51-200)</option>\n                  <option value=\"enterprise\">Enterprise (200+)</option>\n                </select>\n              </div>\n            </div>\n            \n            <div>\n              <label className=\"block text-sm font-medium mb-2\">Mission Statement</label>\n              <Textarea\n                value={profile.mission_statement || ''}\n                onChange={(e) => setProfile(prev => ({ ...prev, mission_statement: e.target.value }))}\n                placeholder=\"What is your company's purpose and mission?\"\n                rows={3}\n              />\n            </div>\n          </div>\n        );\n\n      case 1: // What We Do\n        return (\n          <div className=\"space-y-6\">\n            <div>\n              <label className=\"block text-sm font-medium mb-2\">Primary Services</label>\n              <ArrayInput\n                items={profile.primary_services || []}\n                onAdd={(value) => addToArray('primary_services', value)}\n                onRemove={(index) => removeFromArray('primary_services', index)}\n                placeholder=\"e.g., IT Consulting, Cloud Migration\"\n              />\n            </div>\n            \n            <div>\n              <label className=\"block text-sm font-medium mb-2\">Unique Value Proposition</label>\n              <Textarea\n                value={profile.unique_value_proposition || ''}\n                onChange={(e) => setProfile(prev => ({ ...prev, unique_value_proposition: e.target.value }))}\n                placeholder=\"What makes your business unique? Why do clients choose you?\"\n                rows={3}\n              />\n            </div>\n            \n            <div>\n              <label className=\"block text-sm font-medium mb-2\">Competitive Advantages</label>\n              <ArrayInput\n                items={profile.competitive_advantages || []}\n                onAdd={(value) => addToArray('competitive_advantages', value)}\n                onRemove={(index) => removeFromArray('competitive_advantages', index)}\n                placeholder=\"e.g., 15+ years experience, proprietary methodology\"\n              />\n            </div>\n          </div>\n        );\n\n      case 2: // Who We Serve\n        return (\n          <div className=\"space-y-6\">\n            <div>\n              <label className=\"block text-sm font-medium mb-2\">Target Markets</label>\n              <ArrayInput\n                items={profile.target_markets || []}\n                onAdd={(value) => addToArray('target_markets', value)}\n                onRemove={(index) => removeFromArray('target_markets', index)}\n                placeholder=\"e.g., Small Businesses, Healthcare, Manufacturing\"\n              />\n            </div>\n            \n            <div>\n              <label className=\"block text-sm font-medium mb-2\">Ideal Customer Pain Points</label>\n              <ArrayInput\n                items={profile.ideal_customer_profile?.pain_points || []}\n                onAdd={(value) => {\n                  setProfile(prev => ({\n                    ...prev,\n                    ideal_customer_profile: {\n                      ...prev.ideal_customer_profile,\n                      pain_points: [...(prev.ideal_customer_profile?.pain_points || []), value]\n                    }\n                  }));\n                }}\n                onRemove={(index) => {\n                  setProfile(prev => ({\n                    ...prev,\n                    ideal_customer_profile: {\n                      ...prev.ideal_customer_profile,\n                      pain_points: prev.ideal_customer_profile?.pain_points?.filter((_, i) => i !== index) || []\n                    }\n                  }));\n                }}\n                placeholder=\"e.g., Outdated technology, Security concerns\"\n              />\n            </div>\n          </div>\n        );\n\n      case 3: // How We Serve\n        return (\n          <div className=\"space-y-6\">\n            <div>\n              <label className=\"block text-sm font-medium mb-2\">Service Delivery Methods</label>\n              <ArrayInput\n                items={profile.service_delivery_methods || []}\n                onAdd={(value) => addToArray('service_delivery_methods', value)}\n                onRemove={(index) => removeFromArray('service_delivery_methods', index)}\n                placeholder=\"e.g., On-site consulting, Remote support, Training\"\n              />\n            </div>\n            \n            <div>\n              <label className=\"block text-sm font-medium mb-2\">Communication Channels</label>\n              <ArrayInput\n                items={profile.communication_channels || []}\n                onAdd={(value) => addToArray('communication_channels', value)}\n                onRemove={(index) => removeFromArray('communication_channels', index)}\n                placeholder=\"e.g., Email, Phone, Slack, Teams\"\n              />\n            </div>\n          </div>\n        );\n\n      case 4: // Current Clients\n        return (\n          <div className=\"space-y-6\">\n            <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n              <div>\n                <label className=\"block text-sm font-medium mb-2\">Total Clients</label>\n                <Input\n                  type=\"number\"\n                  value={profile.total_clients || ''}\n                  onChange={(e) => setProfile(prev => ({ ...prev, total_clients: parseInt(e.target.value) || 0 }))}\n                  placeholder=\"e.g., 25\"\n                />\n              </div>\n              <div>\n                <label className=\"block text-sm font-medium mb-2\">Active Clients</label>\n                <Input\n                  type=\"number\"\n                  value={profile.active_clients || ''}\n                  onChange={(e) => setProfile(prev => ({ ...prev, active_clients: parseInt(e.target.value) || 0 }))}\n                  placeholder=\"e.g., 20\"\n                />\n              </div>\n            </div>\n          </div>\n        );\n\n      case 5: // Revenue & Pricing\n        return (\n          <div className=\"space-y-6\">\n            <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n              <div>\n                <label className=\"block text-sm font-medium mb-2\">Monthly Recurring Revenue</label>\n                <Input\n                  type=\"number\"\n                  value={profile.monthly_recurring_revenue || ''}\n                  onChange={(e) => setProfile(prev => ({ ...prev, monthly_recurring_revenue: parseInt(e.target.value) || 0 }))}\n                  placeholder=\"e.g., 15000\"\n                />\n              </div>\n              <div>\n                <label className=\"block text-sm font-medium mb-2\">Average Deal Size</label>\n                <Input\n                  type=\"number\"\n                  value={profile.average_deal_size || ''}\n                  onChange={(e) => setProfile(prev => ({ ...prev, average_deal_size: parseInt(e.target.value) || 0 }))}\n                  placeholder=\"e.g., 2500\"\n                />\n              </div>\n            </div>\n            \n            <div>\n              <label className=\"block text-sm font-medium mb-2\">Payment Methods</label>\n              <ArrayInput\n                items={profile.payment_methods || []}\n                onAdd={(value) => addToArray('payment_methods', value)}\n                onRemove={(index) => removeFromArray('payment_methods', index)}\n                placeholder=\"e.g., Credit Card, ACH, Check\"\n              />\n            </div>\n          </div>\n        );\n\n      case 6: // Goals & Strategy\n        return (\n          <div className=\"space-y-6\">\n            <div>\n              <label className=\"block text-sm font-medium mb-2\">Short-term Goals (6-12 months)</label>\n              <ArrayInput\n                items={profile.short_term_goals || []}\n                onAdd={(value) => addToArray('short_term_goals', value)}\n                onRemove={(index) => removeFromArray('short_term_goals', index)}\n                placeholder=\"e.g., Increase revenue by 30%, Hire 2 developers\"\n              />\n            </div>\n            \n            <div>\n              <label className=\"block text-sm font-medium mb-2\">Long-term Goals (1-3 years)</label>\n              <ArrayInput\n                items={profile.long_term_goals || []}\n                onAdd={(value) => addToArray('long_term_goals', value)}\n                onRemove={(index) => removeFromArray('long_term_goals', index)}\n                placeholder=\"e.g., Expand to new markets, Launch SaaS product\"\n              />\n            </div>\n            \n            <div>\n              <label className=\"block text-sm font-medium mb-2\">Current Challenges</label>\n              <ArrayInput\n                items={profile.current_challenges || []}\n                onAdd={(value) => addToArray('current_challenges', value)}\n                onRemove={(index) => removeFromArray('current_challenges', index)}\n                placeholder=\"e.g., Finding qualified talent, Scaling operations\"\n              />\n            </div>\n          </div>\n        );\n\n      default:\n        return null;\n    }\n  };\n\n  return (\n    <div className=\"max-w-4xl mx-auto p-6\">\n      <Card>\n        <CardHeader>\n          <CardTitle className=\"flex items-center gap-2\">\n            <Building2 className=\"w-6 h-6\" />\n            Business Profile Setup\n          </CardTitle>\n          <p className=\"text-muted-foreground\">\n            Help Nexus understand your business so it can provide intelligent advice and insights.\n          </p>\n        </CardHeader>\n        \n        <CardContent>\n          {/* Progress Steps */}\n          <div className=\"flex items-center justify-between mb-8\">\n            {steps.map((step, index) => (\n              <div\n                key={index}\n                className={`flex items-center ${index < steps.length - 1 ? 'flex-1' : ''}`}\n              >\n                <div\n                  className={`flex items-center justify-center w-10 h-10 rounded-full border-2 ${\n                    index <= currentStep\n                      ? 'bg-primary border-primary text-primary-foreground'\n                      : 'border-muted bg-background'\n                  }`}\n                >\n                  {index < currentStep ? (\n                    <CheckCircle2 className=\"w-5 h-5\" />\n                  ) : (\n                    step.icon\n                  )}\n                </div>\n                {index < steps.length - 1 && (\n                  <div\n                    className={`flex-1 h-0.5 mx-4 ${\n                      index < currentStep ? 'bg-primary' : 'bg-muted'\n                    }`}\n                  />\n                )}\n              </div>\n            ))}\n          </div>\n\n          {/* Current Step */}\n          <div className=\"mb-8\">\n            <h3 className=\"text-xl font-semibold mb-4\">{steps[currentStep].title}</h3>\n            {renderStep()}\n          </div>\n\n          {/* Navigation */}\n          <div className=\"flex justify-between\">\n            <Button\n              variant=\"outline\"\n              onClick={() => setCurrentStep(Math.max(0, currentStep - 1))}\n              disabled={currentStep === 0}\n            >\n              Previous\n            </Button>\n            \n            <div className=\"flex gap-2\">\n              {currentStep < steps.length - 1 ? (\n                <Button onClick={() => setCurrentStep(currentStep + 1)}>\n                  Next\n                </Button>\n              ) : (\n                <Button onClick={handleSave} disabled={isLoading}>\n                  {isLoading ? 'Saving...' : 'Complete Setup'}\n                </Button>\n              )}\n            </div>\n          </div>\n        </CardContent>\n      </Card>\n    </div>\n  );\n};\n\n// Helper component for array inputs\nconst ArrayInput: React.FC<{\n  items: string[];\n  onAdd: (value: string) => void;\n  onRemove: (index: number) => void;\n  placeholder: string;\n}> = ({ items, onAdd, onRemove, placeholder }) => {\n  const [inputValue, setInputValue] = useState('');\n\n  const handleAdd = () => {\n    if (inputValue.trim()) {\n      onAdd(inputValue);\n      setInputValue('');\n    }\n  };\n\n  return (\n    <div className=\"space-y-2\">\n      <div className=\"flex gap-2\">\n        <Input\n          value={inputValue}\n          onChange={(e) => setInputValue(e.target.value)}\n          placeholder={placeholder}\n          onKeyPress={(e) => e.key === 'Enter' && handleAdd()}\n        />\n        <Button onClick={handleAdd} size=\"sm\">\n          <Plus className=\"w-4 h-4\" />\n        </Button>\n      </div>\n      \n      <div className=\"flex flex-wrap gap-2\">\n        {items.map((item, index) => (\n          <Badge key={index} variant=\"secondary\" className=\"flex items-center gap-1\">\n            {item}\n            <button onClick={() => onRemove(index)} className=\"ml-1\">\n              <X className=\"w-3 h-3\" />\n            </button>\n          </Badge>\n        ))}\n      </div>\n    </div>\n  );\n}; ","usedDeprecatedRules":[]},{"filePath":"/home/vonj/Github/Nexus/src/components/business/QuickBusinessSetup.tsx","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":39,"column":46,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":39,"endColumn":49,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1187,1190],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1187,1190],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":126,"column":19,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":126,"endColumn":22,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[4242,4245],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[4242,4245],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook React.useEffect has missing dependencies: 'loadMemberships' and 'user'. Either include them or remove the dependency array.","line":199,"column":6,"nodeType":"ArrayExpression","endLine":199,"endColumn":16,"suggestions":[{"desc":"Update the dependencies array to be: [loadMemberships, user, user.id]","fix":{"range":[6327,6337],"text":"[loadMemberships, user, user.id]"}}],"suppressions":[{"kind":"directive","justification":""}]}],"errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState } from 'react';\nimport { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/Card';\nimport { Button } from '@/components/ui/Button';\nimport { Input } from '@/components/ui/Input';\nimport { Textarea } from '@/components/ui/Textarea';\nimport { Badge } from '@/components/ui/Badge';\nimport { useToast } from '@/components/ui/Toast';\nimport { Building2, Users, DollarSign, Target, TrendingUp } from 'lucide-react';\nimport { useAuth } from '@/contexts/AuthContext';\nimport { supabase } from '@/lib/core/supabase';\nimport { useOrganizationStore } from '@/lib/stores/organizationStore';\n\ninterface MarcobyProfile {\n  // Core Info\n  companyName: string;\n  industry: string;\n  businessModel: string;\n  \n  // Services\n  primaryServices: string[];\n  valueProposition: string;\n  \n  // Market\n  targetMarkets: string[];\n  idealCustomerProfile: string;\n  \n  // Current State\n  totalClients: number;\n  activeClients: number;\n  monthlyRevenue: number;\n  averageDealSize: number;\n  \n  // Goals & Challenges\n  shortTermGoals: string[];\n  currentChallenges: string[];\n}\n\nexport const QuickBusinessSetup: React.FC = () => {\n  const { toast, showToast } = useToast() as any;\n  const { user } = useAuth();\n  const { activeOrgId, loadMemberships } = useOrganizationStore();\n  const [profile, setProfile] = useState<MarcobyProfile>({\n    companyName: 'Marcoby',\n    industry: 'Technology Consulting',\n    businessModel: 'B2B Consulting',\n    primaryServices: [],\n    valueProposition: '',\n    targetMarkets: [],\n    idealCustomerProfile: '',\n    totalClients: 0,\n    activeClients: 0,\n    monthlyRevenue: 0,\n    averageDealSize: 0,\n    shortTermGoals: [],\n    currentChallenges: []\n  });\n\n  const [newService, setNewService] = useState('');\n  const [newMarket, setNewMarket] = useState('');\n  const [newGoal, setNewGoal] = useState('');\n  const [newChallenge, setNewChallenge] = useState('');\n\n  const addToArray = (field: keyof MarcobyProfile, value: string, setter: (val: string) => void) => {\n    if (!value.trim()) return;\n    \n    setProfile(prev => ({\n      ...prev,\n      [field]: [...(prev[field] as string[]), value.trim()]\n    }));\n    setter('');\n  };\n\n  const removeFromArray = (field: keyof MarcobyProfile, index: number) => {\n    setProfile(prev => ({\n      ...prev,\n      [field]: (prev[field] as string[]).filter((_, i) => i !== index)\n    }));\n  };\n\n  const handleSave = async () => {\n    try {\n      if (!user) throw new Error('You must be logged in to save your business profile');\n\n      // Determine organisation context (take first membership for now)\n      const orgId = activeOrgId;\n      if (!orgId) throw new Error('No organisation selected.');\n\n      // Persist to Supabase (upsert per-org)\n      const { error } = await supabase\n        .from('ai_business_profiles')\n        .upsert(\n          {\n            user_id: user.id,\n            org_id: orgId,\n            company_name: profile.companyName,\n            industry: profile.industry,\n            business_model: profile.businessModel,\n            primary_services: profile.primaryServices,\n            value_proposition: profile.valueProposition,\n            target_markets: profile.targetMarkets,\n            ideal_customer_profile: profile.idealCustomerProfile,\n            total_clients: profile.totalClients,\n            active_clients: profile.activeClients,\n            monthly_revenue: profile.monthlyRevenue,\n            average_deal_size: profile.averageDealSize,\n            short_term_goals: profile.shortTermGoals,\n            current_challenges: profile.currentChallenges,\n          },\n          { onConflict: 'org_id' }\n        );\n\n      if (error) throw error;\n\n      // Also cache locally so advisor can work offline / before round-trip fetch\n      localStorage.setItem('marcoby_business_profile', JSON.stringify(profile));\n\n      // Generate AI context for business understanding and cache\n      const businessContext = generateBusinessContext(profile);\n      localStorage.setItem('business_ai_context', businessContext);\n\n      (showToast || toast)({\n        title: 'Success!',\n        description: 'Marcoby business profile saved. Nexus now understands your business!',\n        variant: 'default'\n      });\n    } catch (err: any) {\n      console.error('Failed to save business profile', err);\n      (showToast || toast)({\n        title: 'Error',\n        description: err?.message ?? 'Failed to save business profile',\n        variant: 'destructive'\n      });\n    }\n  };\n\n  const generateBusinessContext = (profile: MarcobyProfile): string => {\n    return `\nBUSINESS CONTEXT FOR AI ASSISTANCE:\n\nCompany: ${profile.companyName}\nIndustry: ${profile.industry}\nBusiness Model: ${profile.businessModel}\n\nSERVICES PROVIDED:\n${profile.primaryServices.join(', ')}\n\nVALUE PROPOSITION:\n${profile.valueProposition}\n\nTARGET MARKETS:\n${profile.targetMarkets.join(', ')}\n\nIDEAL CUSTOMER:\n${profile.idealCustomerProfile}\n\nCURRENT BUSINESS METRICS:\n- Total Clients: ${profile.totalClients}\n- Active Clients: ${profile.activeClients}\n- Monthly Revenue: $${profile.monthlyRevenue.toLocaleString()}\n- Average Deal Size: $${profile.averageDealSize.toLocaleString()}\n\nBUSINESS GOALS:\n${profile.shortTermGoals.join(', ')}\n\nCURRENT CHALLENGES:\n${profile.currentChallenges.join(', ')}\n\nBUSINESS INTELLIGENCE INSIGHTS:\n${generateInsights(profile)}\n\nUse this context to provide specific, actionable business advice tailored to Marcoby's situation as a ${profile.businessModel} in the ${profile.industry} space.\n    `.trim();\n  };\n\n  const generateInsights = (profile: MarcobyProfile): string => {\n    const insights = [];\n    \n    if (profile.totalClients > 0 && profile.monthlyRevenue > 0) {\n      const revenuePerClient = profile.monthlyRevenue / profile.totalClients;\n      insights.push(`Average revenue per client: $${revenuePerClient.toFixed(0)}/month`);\n    }\n    \n    if (profile.totalClients > 20) {\n      insights.push('Client base indicates readiness for scaling operations');\n    }\n    \n    if (profile.activeClients / profile.totalClients < 0.8) {\n      insights.push('Client retention may need attention - focus on engagement');\n    }\n    \n    return insights.join('. ');\n  };\n\n  React.useEffect(() => {\n    if (user) {\n      loadMemberships(user.id);\n    }\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [user?.id]);\n\n  return (\n    <div className=\"max-w-4xl mx-auto p-6 space-y-6\">\n      <Card>\n        <CardHeader>\n          <CardTitle className=\"flex items-center gap-2\">\n            <Building2 className=\"w-6 h-6\" />\n            Marcoby Business Profile Setup\n          </CardTitle>\n          <p className=\"text-muted-foreground\">\n            Tell Nexus about your business so it can provide intelligent, personalized advice.\n          </p>\n        </CardHeader>\n      </Card>\n\n      {/* Company Identity */}\n      <Card>\n        <CardHeader>\n          <CardTitle className=\"flex items-center gap-2\">\n            <Building2 className=\"w-5 h-5\" />\n            Company Identity\n          </CardTitle>\n        </CardHeader>\n        <CardContent className=\"space-y-4\">\n          <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4\">\n            <div>\n              <label className=\"block text-sm font-medium mb-2\">Company Name</label>\n              <Input\n                value={profile.companyName}\n                onChange={(e) => setProfile(prev => ({ ...prev, companyName: e.target.value }))}\n                placeholder=\"Marcoby\"\n              />\n            </div>\n            <div>\n              <label className=\"block text-sm font-medium mb-2\">Industry</label>\n              <Input\n                value={profile.industry}\n                onChange={(e) => setProfile(prev => ({ ...prev, industry: e.target.value }))}\n                placeholder=\"Technology Consulting\"\n              />\n            </div>\n            <div>\n              <label className=\"block text-sm font-medium mb-2\">Business Model</label>\n              <select\n                className=\"w-full p-2 border rounded-md\"\n                value={profile.businessModel}\n                onChange={(e) => setProfile(prev => ({ ...prev, businessModel: e.target.value }))}\n              >\n                <option value=\"B2B Consulting\">B2B Consulting</option>\n                <option value=\"B2C Services\">B2C Services</option>\n                <option value=\"SaaS\">SaaS</option>\n                <option value=\"E-commerce\">E-commerce</option>\n              </select>\n            </div>\n          </div>\n        </CardContent>\n      </Card>\n\n      {/* Services */}\n      <Card>\n        <CardHeader>\n          <CardTitle className=\"flex items-center gap-2\">\n            <Target className=\"w-5 h-5\" />\n            What You Do\n          </CardTitle>\n        </CardHeader>\n        <CardContent className=\"space-y-4\">\n          <div>\n            <label className=\"block text-sm font-medium mb-2\">Primary Services</label>\n            <div className=\"flex gap-2 mb-2\">\n              <Input\n                value={newService}\n                onChange={(e) => setNewService(e.target.value)}\n                placeholder=\"e.g., IT Consulting, Cloud Migration\"\n                onKeyPress={(e) => e.key === 'Enter' && addToArray('primaryServices', newService, setNewService)}\n              />\n              <Button onClick={() => addToArray('primaryServices', newService, setNewService)}>\n                Add\n              </Button>\n            </div>\n            <div className=\"flex flex-wrap gap-2\">\n              {profile.primaryServices.map((service, index) => (\n                <Badge key={index} variant=\"secondary\" className=\"cursor-pointer\" \n                       onClick={() => removeFromArray('primaryServices', index)}>\n                  {service} ×\n                </Badge>\n              ))}\n            </div>\n          </div>\n          \n          <div>\n            <label className=\"block text-sm font-medium mb-2\">Unique Value Proposition</label>\n            <Textarea\n              value={profile.valueProposition}\n              onChange={(e) => setProfile(prev => ({ ...prev, valueProposition: e.target.value }))}\n              placeholder=\"What makes Marcoby unique? Why do clients choose you over competitors?\"\n              rows={3}\n            />\n          </div>\n        </CardContent>\n      </Card>\n\n      {/* Target Market */}\n      <Card>\n        <CardHeader>\n          <CardTitle className=\"flex items-center gap-2\">\n            <Users className=\"w-5 h-5\" />\n            Who You Serve\n          </CardTitle>\n        </CardHeader>\n        <CardContent className=\"space-y-4\">\n          <div>\n            <label className=\"block text-sm font-medium mb-2\">Target Markets</label>\n            <div className=\"flex gap-2 mb-2\">\n              <Input\n                value={newMarket}\n                onChange={(e) => setNewMarket(e.target.value)}\n                placeholder=\"e.g., Healthcare, Small Business, Manufacturing\"\n                onKeyPress={(e) => e.key === 'Enter' && addToArray('targetMarkets', newMarket, setNewMarket)}\n              />\n              <Button onClick={() => addToArray('targetMarkets', newMarket, setNewMarket)}>\n                Add\n              </Button>\n            </div>\n            <div className=\"flex flex-wrap gap-2\">\n              {profile.targetMarkets.map((market, index) => (\n                <Badge key={index} variant=\"secondary\" className=\"cursor-pointer\"\n                       onClick={() => removeFromArray('targetMarkets', index)}>\n                  {market} ×\n                </Badge>\n              ))}\n            </div>\n          </div>\n          \n          <div>\n            <label className=\"block text-sm font-medium mb-2\">Ideal Customer Profile</label>\n            <Textarea\n              value={profile.idealCustomerProfile}\n              onChange={(e) => setProfile(prev => ({ ...prev, idealCustomerProfile: e.target.value }))}\n              placeholder=\"Describe your ideal client: company size, industry, pain points, budget range...\"\n              rows={3}\n            />\n          </div>\n        </CardContent>\n      </Card>\n\n      {/* Current Metrics */}\n      <Card>\n        <CardHeader>\n          <CardTitle className=\"flex items-center gap-2\">\n            <DollarSign className=\"w-5 h-5\" />\n            Current Business Metrics\n          </CardTitle>\n        </CardHeader>\n        <CardContent>\n          <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-4\">\n            <div>\n              <label className=\"block text-sm font-medium mb-2\">Total Clients</label>\n              <Input\n                type=\"number\"\n                value={profile.totalClients || ''}\n                onChange={(e) => setProfile(prev => ({ ...prev, totalClients: parseInt(e.target.value) || 0 }))}\n                placeholder=\"25\"\n              />\n            </div>\n            <div>\n              <label className=\"block text-sm font-medium mb-2\">Active Clients</label>\n              <Input\n                type=\"number\"\n                value={profile.activeClients || ''}\n                onChange={(e) => setProfile(prev => ({ ...prev, activeClients: parseInt(e.target.value) || 0 }))}\n                placeholder=\"18\"\n              />\n            </div>\n            <div>\n              <label className=\"block text-sm font-medium mb-2\">Monthly Revenue ($)</label>\n              <Input\n                type=\"number\"\n                value={profile.monthlyRevenue || ''}\n                onChange={(e) => setProfile(prev => ({ ...prev, monthlyRevenue: parseInt(e.target.value) || 0 }))}\n                placeholder=\"15000\"\n              />\n            </div>\n            <div>\n              <label className=\"block text-sm font-medium mb-2\">Average Deal Size ($)</label>\n              <Input\n                type=\"number\"\n                value={profile.averageDealSize || ''}\n                onChange={(e) => setProfile(prev => ({ ...prev, averageDealSize: parseInt(e.target.value) || 0 }))}\n                placeholder=\"2500\"\n              />\n            </div>\n          </div>\n        </CardContent>\n      </Card>\n\n      {/* Goals & Challenges */}\n      <Card>\n        <CardHeader>\n          <CardTitle className=\"flex items-center gap-2\">\n            <TrendingUp className=\"w-5 h-5\" />\n            Goals & Challenges\n          </CardTitle>\n        </CardHeader>\n        <CardContent className=\"space-y-4\">\n          <div>\n            <label className=\"block text-sm font-medium mb-2\">Short-term Goals (6-12 months)</label>\n            <div className=\"flex gap-2 mb-2\">\n              <Input\n                value={newGoal}\n                onChange={(e) => setNewGoal(e.target.value)}\n                placeholder=\"e.g., Increase revenue by 30%, Hire assistant\"\n                onKeyPress={(e) => e.key === 'Enter' && addToArray('shortTermGoals', newGoal, setNewGoal)}\n              />\n              <Button onClick={() => addToArray('shortTermGoals', newGoal, setNewGoal)}>\n                Add\n              </Button>\n            </div>\n            <div className=\"flex flex-wrap gap-2\">\n              {profile.shortTermGoals.map((goal, index) => (\n                <Badge key={index} variant=\"secondary\" className=\"cursor-pointer\"\n                       onClick={() => removeFromArray('shortTermGoals', index)}>\n                  {goal} ×\n                </Badge>\n              ))}\n            </div>\n          </div>\n          \n          <div>\n            <label className=\"block text-sm font-medium mb-2\">Current Challenges</label>\n            <div className=\"flex gap-2 mb-2\">\n              <Input\n                value={newChallenge}\n                onChange={(e) => setNewChallenge(e.target.value)}\n                placeholder=\"e.g., Time management, Lead generation, Administrative overhead\"\n                onKeyPress={(e) => e.key === 'Enter' && addToArray('currentChallenges', newChallenge, setNewChallenge)}\n              />\n              <Button onClick={() => addToArray('currentChallenges', newChallenge, setNewChallenge)}>\n                Add\n              </Button>\n            </div>\n            <div className=\"flex flex-wrap gap-2\">\n              {profile.currentChallenges.map((challenge, index) => (\n                <Badge key={index} variant=\"secondary\" className=\"cursor-pointer\"\n                       onClick={() => removeFromArray('currentChallenges', index)}>\n                  {challenge} ×\n                </Badge>\n              ))}\n            </div>\n          </div>\n        </CardContent>\n      </Card>\n\n      {/* Save Button */}\n      <Card>\n        <CardContent className=\"pt-6\">\n          <Button onClick={handleSave} className=\"w-full\" size=\"lg\">\n            Save Marcoby Profile & Enable AI Business Intelligence\n          </Button>\n          <p className=\"text-sm text-muted-foreground mt-2 text-center\">\n            This will enable Nexus to understand your business and provide personalized advice\n          </p>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}; ","usedDeprecatedRules":[]},{"filePath":"/home/vonj/Github/Nexus/src/components/chat/AgentPicker.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/vonj/Github/Nexus/src/components/chat/MVPScopeIndicator.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/vonj/Github/Nexus/src/components/chat/MessageFeedback.tsx","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":94,"column":49,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":94,"endColumn":52,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3085,3088],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3085,3088],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":162,"column":29,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":162,"endColumn":32,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[5184,5187],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[5184,5187],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\n * MessageFeedback Component\n * Pillar: 1,2 - Continuous improvement through user feedback loops\n * Provides immediate feedback collection on AI responses with follow-up tracking\n */\n\nimport React, { useState } from 'react';\nimport { Button } from '@/components/ui/Button';\nimport { Textarea } from '@/components/ui/Textarea';\nimport { Card, CardContent } from '@/components/ui/Card';\nimport { Badge } from '@/components/ui/Badge';\nimport { \n  ThumbsUp, \n  ThumbsDown, \n  MessageCircle, \n  CheckCircle2,\n  AlertCircle,\n  Lightbulb,\n  X\n} from 'lucide-react';\nimport { useToast } from '@/components/ui/Toast';\nimport { supabase } from '../../lib/core/supabase';\nimport { useAuth } from '@/contexts/AuthContext';\n\ninterface MessageFeedbackProps {\n  messageId: string;\n  conversationId: string;\n  agentId?: string;\n  messageContent: string;\n  compact?: boolean;\n  onFeedbackSubmitted?: (feedback: MessageFeedback) => void;\n}\n\ninterface MessageFeedback {\n  messageId: string;\n  rating: 'helpful' | 'unhelpful';\n  category?: 'accuracy' | 'relevance' | 'completeness' | 'clarity' | 'actionability';\n  comment?: string;\n  followUpNeeded?: boolean;\n  improvementSuggestion?: string;\n}\n\nexport const MessageFeedback: React.FC<MessageFeedbackProps> = ({\n  messageId,\n  conversationId,\n  agentId,\n  messageContent,\n  compact = false,\n  onFeedbackSubmitted\n}) => {\n  const [rating, setRating] = useState<'helpful' | 'unhelpful' | null>(null);\n  const [showDetailedFeedback, setShowDetailedFeedback] = useState(false);\n  const [category, setCategory] = useState<string>('');\n  const [comment, setComment] = useState('');\n  const [followUpNeeded, setFollowUpNeeded] = useState(false);\n  const [isSubmitting, setIsSubmitting] = useState(false);\n  const [isSubmitted, setIsSubmitted] = useState(false);\n  \n  const { user } = useAuth();\n  const { showToast } = useToast();\n\n  const feedbackCategories = [\n    { id: 'accuracy', label: 'Accuracy', icon: <CheckCircle2 className=\"h-4 w-4\" /> },\n    { id: 'relevance', label: 'Relevance', icon: <Lightbulb className=\"h-4 w-4\" /> },\n    { id: 'completeness', label: 'Completeness', icon: <MessageCircle className=\"h-4 w-4\" /> },\n    { id: 'clarity', label: 'Clarity', icon: <AlertCircle className=\"h-4 w-4\" /> },\n    { id: 'actionability', label: 'Actionability', icon: <CheckCircle2 className=\"h-4 w-4\" /> }\n  ];\n\n  const handleRatingClick = (newRating: 'helpful' | 'unhelpful') => {\n    setRating(newRating);\n    \n    if (newRating === 'helpful') {\n      // For positive feedback, submit immediately unless they want to add details\n      submitFeedback(newRating);\n    } else {\n      // For negative feedback, always show detailed form\n      setShowDetailedFeedback(true);\n    }\n  };\n\n  const submitFeedback = async (\n    feedbackRating: 'helpful' | 'unhelpful',\n    detailedFeedback?: Partial<MessageFeedback>\n  ) => {\n    if (!user?.id || isSubmitting) return;\n    \n    setIsSubmitting(true);\n    \n    try {\n      const feedback: MessageFeedback = {\n        messageId,\n        rating: feedbackRating,\n        category: detailedFeedback?.category as any,\n        comment: detailedFeedback?.comment,\n        followUpNeeded: detailedFeedback?.followUpNeeded || false,\n        improvementSuggestion: detailedFeedback?.improvementSuggestion\n      };\n\n      // Store feedback in database\n      await supabase.from('ai_message_feedback').insert({\n        message_id: messageId,\n        conversation_id: conversationId,\n        user_id: user.id,\n        agent_id: agentId,\n        rating: feedbackRating,\n        feedback_category: feedback.category,\n        comment: feedback.comment,\n        follow_up_needed: feedback.followUpNeeded,\n        improvement_suggestion: feedback.improvementSuggestion,\n        message_content_hash: btoa(messageContent).slice(0, 50), // For analysis\n        created_at: new Date().toISOString()\n      });\n\n      // Track in analytics\n      await supabase.from('ai_audit_logs').insert({\n        user_id: user.id,\n        action: 'message_feedback_submitted',\n        table_name: 'ai_message_feedback',\n        record_id: messageId,\n        details: {\n          rating: feedbackRating,\n          category: feedback.category,\n          has_comment: !!feedback.comment,\n          follow_up_needed: feedback.followUpNeeded,\n          agent_id: agentId\n        }\n      });\n\n      setIsSubmitted(true);\n      onFeedbackSubmitted?.(feedback);\n      \n      showToast({\n        title: 'Feedback Submitted',\n        description: feedbackRating === 'helpful' \n          ? 'Thanks for the positive feedback!' \n          : 'Thanks for helping us improve!',\n        type: 'success'\n      });\n\n      // Auto-hide after successful submission\n      setTimeout(() => {\n        setShowDetailedFeedback(false);\n      }, 2000);\n\n    } catch (error) {\n      console.error('Error submitting feedback:', error);\n      showToast({\n        title: 'Feedback Failed',\n        description: 'Unable to submit feedback. Please try again.',\n        type: 'error'\n      });\n    } finally {\n      setIsSubmitting(false);\n    }\n  };\n\n  const handleDetailedSubmit = () => {\n    if (!rating) return;\n    \n    submitFeedback(rating, {\n      category: category as any,\n      comment: comment.trim() || undefined,\n      followUpNeeded,\n      improvementSuggestion: comment.trim() || undefined\n    });\n  };\n\n  if (isSubmitted && !showDetailedFeedback) {\n    return (\n      <div className=\"flex items-center gap-2 text-sm text-muted-foreground\">\n        <CheckCircle2 className=\"h-4 w-4 text-success\" />\n        <span>Feedback submitted</span>\n      </div>\n    );\n  }\n\n  if (compact) {\n    return (\n      <div className=\"flex items-center gap-1\">\n        <Button\n          variant=\"ghost\"\n          size=\"sm\"\n          onClick={() => handleRatingClick('helpful')}\n          className={`h-8 px-2 ${rating === 'helpful' ? 'bg-success/10 text-success' : ''}`}\n          disabled={isSubmitting}\n        >\n          <ThumbsUp className=\"h-3 w-3\" />\n        </Button>\n        <Button\n          variant=\"ghost\"\n          size=\"sm\"\n          onClick={() => handleRatingClick('unhelpful')}\n          className={`h-8 px-2 ${rating === 'unhelpful' ? 'bg-destructive/10 text-destructive' : ''}`}\n          disabled={isSubmitting}\n        >\n          <ThumbsDown className=\"h-3 w-3\" />\n        </Button>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"space-y-3\">\n      {/* Initial Rating */}\n      {!rating && (\n        <div className=\"flex items-center gap-2\">\n          <span className=\"text-sm text-muted-foreground\">Was this helpful?</span>\n          <Button\n            variant=\"ghost\"\n            size=\"sm\"\n            onClick={() => handleRatingClick('helpful')}\n            className=\"h-8 px-3\"\n            disabled={isSubmitting}\n          >\n            <ThumbsUp className=\"h-4 w-4 mr-1\" />\n            Yes\n          </Button>\n          <Button\n            variant=\"ghost\"\n            size=\"sm\"\n            onClick={() => handleRatingClick('unhelpful')}\n            className=\"h-8 px-3\"\n            disabled={isSubmitting}\n          >\n            <ThumbsDown className=\"h-4 w-4 mr-1\" />\n            No\n          </Button>\n        </div>\n      )}\n\n      {/* Detailed Feedback Form */}\n      {showDetailedFeedback && (\n        <Card className=\"border-amber-200 bg-amber-50/50 dark:bg-amber-900/10\">\n          <CardContent className=\"p-4 space-y-4\">\n            <div className=\"flex items-center justify-between\">\n              <h4 className=\"font-medium\">Help us improve</h4>\n              <Button\n                variant=\"ghost\"\n                size=\"sm\"\n                onClick={() => setShowDetailedFeedback(false)}\n              >\n                <X className=\"h-4 w-4\" />\n              </Button>\n            </div>\n\n            {/* Feedback Category */}\n            <div className=\"space-y-2\">\n              <label className=\"text-sm font-medium\">What could be better?</label>\n              <div className=\"flex flex-wrap gap-2\">\n                {feedbackCategories.map((cat) => (\n                  <Button\n                    key={cat.id}\n                    variant={category === cat.id ? \"default\" : \"outline\"}\n                    size=\"sm\"\n                    onClick={() => setCategory(category === cat.id ? '' : cat.id)}\n                    className=\"h-8\"\n                  >\n                    {cat.icon}\n                    <span className=\"ml-1\">{cat.label}</span>\n                  </Button>\n                ))}\n              </div>\n            </div>\n\n            {/* Comment */}\n            <div className=\"space-y-2\">\n              <label className=\"text-sm font-medium\">Additional feedback (optional)</label>\n              <Textarea\n                placeholder=\"What would make this response more helpful?\"\n                value={comment}\n                onChange={(e) => setComment(e.target.value)}\n                className=\"min-h-[80px]\"\n              />\n            </div>\n\n            {/* Follow-up */}\n            <div className=\"flex items-center gap-2\">\n              <input\n                type=\"checkbox\"\n                id=\"followUp\"\n                checked={followUpNeeded}\n                onChange={(e) => setFollowUpNeeded(e.target.checked)}\n                className=\"rounded\"\n              />\n              <label htmlFor=\"followUp\" className=\"text-sm\">\n                I'd like someone to follow up on this\n              </label>\n            </div>\n\n            {/* Submit */}\n            <div className=\"flex gap-2\">\n              <Button\n                onClick={handleDetailedSubmit}\n                disabled={isSubmitting}\n                size=\"sm\"\n              >\n                {isSubmitting ? 'Submitting...' : 'Submit Feedback'}\n              </Button>\n              <Button\n                variant=\"ghost\"\n                onClick={() => setShowDetailedFeedback(false)}\n                size=\"sm\"\n              >\n                Cancel\n              </Button>\n            </div>\n          </CardContent>\n        </Card>\n      )}\n\n      {/* Success State */}\n      {rating && !showDetailedFeedback && (\n        <div className=\"flex items-center gap-2\">\n          <Badge variant={rating === 'helpful' ? 'default' : 'secondary'}>\n            {rating === 'helpful' ? (\n              <>\n                <ThumbsUp className=\"h-3 w-3 mr-1\" />\n                Helpful\n              </>\n            ) : (\n              <>\n                <ThumbsDown className=\"h-3 w-3 mr-1\" />\n                Needs improvement\n              </>\n            )}\n          </Badge>\n          {rating === 'unhelpful' && (\n            <Button\n              variant=\"ghost\"\n              size=\"sm\"\n              onClick={() => setShowDetailedFeedback(true)}\n              className=\"h-6 text-xs\"\n            >\n              Add details\n            </Button>\n          )}\n        </div>\n      )}\n    </div>\n  );\n}; ","usedDeprecatedRules":[]},{"filePath":"/home/vonj/Github/Nexus/src/components/chat/SlashCommandMenu.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/vonj/Github/Nexus/src/components/chat/SourceChip.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/vonj/Github/Nexus/src/components/chat/SourceDrawer.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/vonj/Github/Nexus/src/components/chat/StreamingComposer.test.tsx","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":17,"column":21,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":17,"endColumn":24,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[603,606],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[603,606],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":65,"column":37,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":65,"endColumn":40,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2329,2332],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2329,2332],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":66,"column":41,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":66,"endColumn":44,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2385,2388],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2385,2388],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React from 'react';\nimport { render, screen, fireEvent, waitFor } from '@testing-library/react';\nimport { StreamingComposer } from './StreamingComposer';\nimport * as slashCommandService from '@/lib/services/slashCommandService';\n\n// Mock the slash command service\njest.mock('@/lib/services/slashCommandService', () => ({\n  getSlashCommands: jest.fn(),\n  filterSlashCommands: jest.fn(),\n}));\n\nconst mockSlashCommandService = slashCommandService as jest.Mocked<typeof slashCommandService>;\n\ndescribe('StreamingComposer', () => {\n  beforeAll(() => {\n    // Mock VITE_CHAT_V2 env\n    (import.meta as any).env = { ...import.meta.env, VITE_CHAT_V2: '1' };\n  });\n\n  beforeEach(() => {\n    jest.clearAllMocks();\n    \n    // Mock default commands\n    mockSlashCommandService.getSlashCommands.mockResolvedValue([\n      { slug: 'create-task', title: 'Create Task', description: 'Create a task in your PM tool', category: 'productivity' },\n      { slug: 'send-invoice', title: 'Send Invoice', description: 'Send a Stripe invoice', category: 'finance' },\n    ]);\n    \n    mockSlashCommandService.filterSlashCommands.mockImplementation((commands, query) => {\n      return commands.filter(cmd => cmd.slug.toLowerCase().includes(query.toLowerCase()));\n    });\n  });\n\n  it('renders textarea', () => {\n    render(<StreamingComposer agentId=\"executive\" />);\n    expect(screen.getByPlaceholderText('Type your message...')).toBeInTheDocument();\n  });\n\n  it('loads slash commands on mount', async () => {\n    render(<StreamingComposer agentId=\"executive\" />);\n    \n    await waitFor(() => {\n      expect(mockSlashCommandService.getSlashCommands).toHaveBeenCalledTimes(1);\n    });\n  });\n\n  it('shows slash-command suggestions', async () => {\n    render(<StreamingComposer agentId=\"executive\" />);\n    \n    // Wait for commands to load\n    await waitFor(() => {\n      expect(mockSlashCommandService.getSlashCommands).toHaveBeenCalled();\n    });\n    \n    const textarea = screen.getByPlaceholderText('Type your message...');\n    fireEvent.change(textarea, { target: { value: '/cr' } });\n    \n    await waitFor(() => {\n      expect(screen.getByRole('listbox')).toBeInTheDocument();\n    });\n  });\n\n  it('shows loading state while fetching commands', async () => {\n    // Make the service return a pending promise\n    let resolveCommands: (commands: any[]) => void;\n    const commandsPromise = new Promise<any[]>((resolve) => {\n      resolveCommands = resolve;\n    });\n    mockSlashCommandService.getSlashCommands.mockReturnValue(commandsPromise);\n    \n    render(<StreamingComposer agentId=\"executive\" />);\n    \n    const textarea = screen.getByPlaceholderText('Type your message...');\n    fireEvent.change(textarea, { target: { value: '/' } });\n    \n    // Should show loading state\n    expect(screen.getByText('Loading commands...')).toBeInTheDocument();\n    \n    // Resolve the promise\n    resolveCommands!([]);\n    \n    await waitFor(() => {\n      expect(screen.queryByText('Loading commands...')).not.toBeInTheDocument();\n    });\n  });\n}); ","usedDeprecatedRules":[]},{"filePath":"/home/vonj/Github/Nexus/src/components/chat/StreamingComposer.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'CodeProps' is defined but never used.","line":26,"column":6,"nodeType":null,"messageId":"unusedVar","endLine":26,"endColumn":15},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":32,"column":28,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":32,"endColumn":31,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1527,1530],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1527,1530],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'conversationId' is assigned a value but never used.","line":48,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":48,"endColumn":24},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'setConversationId' is assigned a value but never used.","line":48,"column":26,"nodeType":null,"messageId":"unusedVar","endLine":48,"endColumn":43},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'setHasFirstChunk' is assigned a value but never used.","line":51,"column":25,"nodeType":null,"messageId":"unusedVar","endLine":51,"endColumn":41},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'setAssistantStreamingIndex' is assigned a value but never used.","line":55,"column":35,"nodeType":null,"messageId":"unusedVar","endLine":55,"endColumn":61},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'composerContext' is assigned a value but never used.","line":61,"column":14,"nodeType":null,"messageId":"unusedVar","endLine":61,"endColumn":29},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'restProps' is assigned a value but never used.","line":62,"column":8,"nodeType":null,"messageId":"unusedVar","endLine":62,"endColumn":17},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":78,"column":52,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":78,"endColumn":55,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3150,3153],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3150,3153],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":84,"column":31,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":84,"endColumn":34,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3378,3381],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3378,3381],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'_' is defined but never used.","line":86,"column":16,"nodeType":null,"messageId":"unusedVar","endLine":86,"endColumn":17},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":187,"column":19,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":187,"endColumn":22,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[6855,6858],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[6855,6858],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"no-restricted-syntax","severity":1,"message":"Use design tokens instead of hardcoded colors (e.g., bg-primary, bg-secondary)","line":206,"column":13,"nodeType":"Literal","messageId":"restrictedSyntax","endLine":206,"endColumn":56},{"ruleId":"no-restricted-syntax","severity":1,"message":"Use design tokens instead of hardcoded text colors (e.g., text-foreground, text-muted-foreground)","line":206,"column":13,"nodeType":"Literal","messageId":"restrictedSyntax","endLine":206,"endColumn":56},{"ruleId":"no-restricted-syntax","severity":1,"message":"Use design tokens instead of hardcoded text colors (e.g., text-foreground, text-muted-foreground)","line":331,"column":30,"nodeType":"Literal","messageId":"restrictedSyntax","endLine":331,"endColumn":57}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":15,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState, useRef, useEffect } from 'react';\nimport type { ComponentProps } from 'react';\nimport ReactMarkdown from 'react-markdown';\nimport remarkGfm from 'remark-gfm';\nimport rehypeHighlight from 'rehype-highlight';\nimport { supabase } from '../../lib/core/supabase';\nimport { env } from '@/lib/core/environment';\nimport { Card, CardContent } from '@/components/ui/Card';\nimport { Textarea } from '@/components/ui/Textarea';\nimport { Button } from '@/components/ui/Button';\nimport SourceChip from './SourceChip';\nimport SourceDrawer from './SourceDrawer';\nimport type { SourceMeta } from './SourceDrawer';\nimport { sendAuditLog } from '@/lib/services/auditLogService';\nimport { getSlashCommands, filterSlashCommands, type SlashCommand } from '@/lib/services/slashCommandService';\nimport SlashCommandMenu from './SlashCommandMenu';\n\n// Chat is always enabled; previous VITE_CHAT_V2 gate removed\nconst isChatEnabled = true;\n\n// Backend Edge Function URL (configure in .env)\n// When VITE_EA_CHAT_URL is not explicitly provided, fall back to the Supabase project URL so that\n// the path resolves correctly both in local (supabase start → http://localhost:54321) and production.\nconst AI_CHAT_FUNC_URL = `${env.supabase.url}/functions/v1/ai-rag-assessment-chat`;\n\ntype CodeProps = ComponentProps<'code'> & { inline?: boolean; children?: React.ReactNode };\n\ninterface StreamingComposerProps {\n  conversationId?: string | null;\n  onConversationId?: (id: string) => void;\n  agentId: string;\n  context?: Record<string, any>;\n}\n\ninterface ChatMessage {\n  role: 'user' | 'assistant';\n  content: string;\n  sources?: SourceMeta[];\n}\n\nexport const StreamingComposer: React.FC<StreamingComposerProps> = ({\n  conversationId: initialId = null,\n  onConversationId,\n  agentId,\n  context = {},\n}) => {\n  const [input, setInput] = useState('');\n  const [conversationId, setConversationId] = useState<string | null>(initialId);\n  const [isStreaming, setIsStreaming] = useState(false);\n  const [error, setError] = useState<string | null>(null);\n  const [hasFirstChunk, setHasFirstChunk] = useState(false);\n  const [messages, setMessages] = useState<ChatMessage[]>([]);\n  const [activeSource, setActiveSource] = useState<SourceMeta | null>(null);\n  const chatRef = useRef<HTMLDivElement | null>(null);\n  const [assistantStreamingIndex, setAssistantStreamingIndex] = useState<number | null>(null);\n\n  // Determine enabled flag via constant for future gating if needed\n  const enabled = isChatEnabled;\n\n  const {\n    context: composerContext,\n    ...restProps\n  } = { context: {}, ...{ conversationId: initialId, onConversationId, agentId } };\n\n  // Ref for auto-scrolling streamed output (not currently used)\n  const textareaRef = useRef<HTMLTextAreaElement | null>(null);\n\n  // Auto-scroll preview div when streaming\n  useEffect(() => {\n    chatRef.current?.scrollTo({ top: chatRef.current.scrollHeight, behavior: 'smooth' });\n  }, [messages]);\n\n  // Load history if an initial conversationId was supplied\n  useEffect(() => {\n    const loadHistory = async () => {\n      if (!initialId) return;\n      try {\n        const { data, error } = await (supabase as any)\n          .from('ai_messages')\n          .select('role, content')\n          .eq('conversation_id', initialId)\n          .order('created_at', { ascending: true });\n        if (!error && data) {\n          setMessages(data as any);\n        }\n      } catch (_) {/* ignore */}\n    };\n    loadHistory();\n  }, [initialId]);\n\n  // Slash-command state -------------------------------------------------------\n  const [showCommandMenu, setShowCommandMenu] = useState(false);\n  const [commandQuery, setCommandQuery] = useState('');\n  const [commandStartIdx, setCommandStartIdx] = useState<number | null>(null);\n  const [selectedCmdIdx, setSelectedCmdIdx] = useState(0);\n  const [availableCommands, setAvailableCommands] = useState<SlashCommand[]>([]);\n  const [commandsLoading, setCommandsLoading] = useState(false);\n\n  // Load slash commands on component mount\n  useEffect(() => {\n    const loadCommands = async () => {\n      setCommandsLoading(true);\n      try {\n        const commands = await getSlashCommands();\n        setAvailableCommands(commands);\n      } catch (error) {\n        console.error('[StreamingComposer] Failed to load slash commands:', error);\n        // Fallback to empty array - the service handles fallbacks internally\n        setAvailableCommands([]);\n      } finally {\n        setCommandsLoading(false);\n      }\n    };\n    loadCommands();\n  }, []);\n\n  const filteredCommands = React.useMemo(() => {\n    if (!showCommandMenu || commandsLoading) return [] as SlashCommand[];\n    return filterSlashCommands(availableCommands, commandQuery);\n  }, [commandQuery, showCommandMenu, availableCommands, commandsLoading]);\n\n  if (!enabled) return null;\n\n  const handleSend = async () => {\n    if (!input.trim()) return;\n    setError(null);\n    setIsStreaming(true);\n\n    const userMessage: ChatMessage = { role: 'user', content: input.trim() };\n    const newMessages: ChatMessage[] = [...messages, userMessage, { role: 'assistant', content: '' }];\n    setMessages(newMessages);\n\n    const assistantMessageIndex = newMessages.length - 1;\n    const currentInput = input;\n    setInput('');\n\n    try {\n      const { data: { session } } = await supabase.auth.getSession();\n      if (!session) throw new Error(\"Not authenticated\");\n\n      const res = await fetch(AI_CHAT_FUNC_URL, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n          Authorization: `Bearer ${session.access_token}`,\n        },\n        body: JSON.stringify({\n          query: currentInput,\n          context,\n        }),\n      });\n\n      if (!res.ok || !res.body) {\n        throw new Error(`Request failed: ${res.status}`);\n      }\n\n      sendAuditLog('chat_message_sent', { agentId });\n\n      const reader = res.body.getReader();\n      const decoder = new TextDecoder();\n      let done = false;\n\n      while (!done) {\n        const { value, done: doneReading } = await reader.read();\n        done = doneReading;\n        const chunk = decoder.decode(value);\n        \n        // SSE format is `data: {\"content\": \"...\"}\\n\\n`\n        const lines = chunk.split('\\n\\n').filter(line => line.startsWith('data: '));\n        for (const line of lines) {\n          const jsonString = line.replace('data: ', '');\n          const parsed = JSON.parse(jsonString);\n          const content = parsed.content;\n          \n          if (content) {\n            setMessages(prev => {\n              const updated = [...prev];\n              updated[assistantMessageIndex] = {\n                ...updated[assistantMessageIndex],\n                content: updated[assistantMessageIndex].content + content,\n              };\n              return updated;\n            });\n          }\n        }\n      }\n    } catch (err: any) {\n      console.error('Streaming error', err);\n      const errorMessage = `Error: ${err.message}`;\n      setMessages(prev => {\n        const updated = [...prev];\n        updated[assistantMessageIndex] = { ...updated[assistantMessageIndex], content: errorMessage };\n        return updated;\n      });\n      setError(err.message || 'An error occurred.');\n    } finally {\n      setIsStreaming(false);\n    }\n  };\n\n  const ChatBubble: React.FC<{ role: 'user' | 'assistant'; children: React.ReactNode }> = ({ role, children }) => (\n    <div className={`flex ${role === 'user' ? 'justify-end' : 'justify-start'}`}>\n      <div className={`max-w-[75%] whitespace-pre-wrap break-words px-4 py-2 rounded-2xl text-sm shadow ${\n        role === 'user'\n          ? 'bg-primary text-white rounded-br-none'\n          : 'bg-gray-200 text-gray-900 rounded-bl-none'\n      }`}>\n        {children}\n      </div>\n    </div>\n  );\n\n  return (\n    <div className=\"streaming-composer flex flex-col h-full max-h-[90vh] gap-2 relative\">\n      <Card className=\"flex-1 overflow-hidden\">\n        <CardContent ref={chatRef} className=\"overflow-y-auto space-y-2 p-4 h-full\">\n          {messages.map((m, idx) => (\n            <ChatBubble key={idx} role={m.role}>\n              {m.role === 'assistant' ? (\n                <ReactMarkdown\n                  remarkPlugins={[remarkGfm]}\n                  rehypePlugins={[rehypeHighlight]}\n                  className=\"prose prose-sm dark:prose-invert max-w-none\"\n                >\n                  {m.content || (idx === assistantStreamingIndex && isStreaming ? '…' : '')}\n                </ReactMarkdown>\n              ) : (\n                m.content\n              )}\n              {m.sources && m.sources.length > 0 && (\n                <div className=\"flex gap-1 mt-2\">\n                  {m.sources.map((s, i) => (\n                    <SourceChip key={i} index={i + 1} onClick={() => setActiveSource(s)} />\n                  ))}\n                </div>\n              )}\n            </ChatBubble>\n          ))}\n          {isStreaming && !hasFirstChunk && (\n            <ChatBubble role=\"assistant\">\n              <span className=\"animate-pulse\">…</span>\n            </ChatBubble>\n          )}\n        </CardContent>\n      </Card>\n\n      {/* input area */}\n      <Textarea\n        ref={textareaRef}\n        value={input}\n        onChange={e => {\n          const value = e.target.value;\n          const cursorPos = e.target.selectionStart ?? value.length;\n\n          // Detect the most recent '/'\n          const slashIdx = value.lastIndexOf('/', cursorPos - 1);\n          if (slashIdx >= 0) {\n            const charBefore = slashIdx === 0 ? ' ' : value[slashIdx - 1];\n            // Only trigger if slash is at start of line or preceded by whitespace\n            if (charBefore === ' ' || charBefore === '\\n') {\n              const query = value.slice(slashIdx + 1, cursorPos);\n              if (/^[\\w-]*$/.test(query)) {\n                setShowCommandMenu(true);\n                setCommandQuery(query);\n                setCommandStartIdx(slashIdx);\n              } else {\n                setShowCommandMenu(false);\n              }\n            } else {\n              setShowCommandMenu(false);\n            }\n          } else {\n            setShowCommandMenu(false);\n          }\n\n          setInput(value);\n        }}\n        onKeyDown={(e) => {\n          // When command menu is open, intercept nav keys\n          if (showCommandMenu) {\n            if (e.key === 'ArrowDown') {\n              e.preventDefault();\n              setSelectedCmdIdx((prev) => Math.min(prev + 1, filteredCommands.length - 1));\n              return;\n            }\n            if (e.key === 'ArrowUp') {\n              e.preventDefault();\n              setSelectedCmdIdx((prev) => Math.max(prev - 1, 0));\n              return;\n            }\n            if (e.key === 'Enter') {\n              e.preventDefault();\n              if (filteredCommands.length > 0) {\n                const cmd = filteredCommands[selectedCmdIdx] ?? filteredCommands[0];\n                insertCommand(cmd);\n              }\n              return;\n            }\n            if (e.key === 'Escape') {\n              e.preventDefault();\n              setShowCommandMenu(false);\n              return;\n            }\n          }\n\n          if (e.key === 'Enter' && !e.shiftKey) {\n            e.preventDefault();\n            if (!isStreaming && input.trim()) {\n              handleSend();\n            }\n          }\n        }}\n        placeholder=\"Type your message...\"\n        rows={2}\n        disabled={isStreaming}\n      />\n      {/* Slash command menu ---------------------------------------------------*/}\n      {showCommandMenu && (\n        <SlashCommandMenu\n          commands={filteredCommands}\n          selectedIndex={selectedCmdIdx}\n          onSelectCommand={insertCommand}\n          onMouseEnter={setSelectedCmdIdx}\n          loading={commandsLoading}\n          query={commandQuery}\n        />\n      )}\n      <Button onClick={handleSend} disabled={!input || isStreaming} className=\"self-end\">\n        {isStreaming ? 'Streaming…' : 'Send'}\n      </Button>\n      {error && <p className=\"text-red-600 text-sm mb-2\">{error}</p>}\n\n      {/* Source Drawer */}\n      <SourceDrawer open={!!activeSource} source={activeSource} onClose={() => setActiveSource(null)} />\n    </div>\n  );\n\n  // -------------------------------------------------------------------------\n  // Helpers\n  // -------------------------------------------------------------------------\n\n  function insertCommand(cmd: SlashCommand) {\n    if (commandStartIdx == null) return;\n    const textarea = textareaRef.current;\n    const cursor = textarea?.selectionStart ?? input.length;\n    const before = input.slice(0, commandStartIdx);\n    const after = input.slice(cursor);\n    const newValue = `${before}/${cmd.slug} ${after}`;\n    setInput(newValue);\n    // Move caret to after inserted command + space\n    requestAnimationFrame(() => {\n      const pos = before.length + cmd.slug.length + 2; // '/' + slug + ' '\n      textarea?.setSelectionRange(pos, pos);\n    });\n    setShowCommandMenu(false);\n  }\n};\n\nexport default StreamingComposer; ","usedDeprecatedRules":[]},{"filePath":"/home/vonj/Github/Nexus/src/components/chat/SuccessOutcomeTracker.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'Progress' is defined but never used.","line":11,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":11,"endColumn":18},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'Users' is defined but never used.","line":20,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":20,"endColumn":8},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'MessageCircle' is defined but never used.","line":22,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":22,"endColumn":16},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'X' is defined but never used.","line":23,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":23,"endColumn":4},{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has a missing dependency: 'loadExistingOutcome'. Either include it or remove the dependency array.","line":88,"column":6,"nodeType":"ArrayExpression","endLine":88,"endColumn":17,"suggestions":[{"desc":"Update the dependencies array to be: [loadExistingOutcome, messageId]","fix":{"range":[2535,2546],"text":"[loadExistingOutcome, messageId]"}}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'error' is defined but never used.","line":110,"column":14,"nodeType":null,"messageId":"unusedVar","endLine":110,"endColumn":19}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\n * SuccessOutcomeTracker Component\n * Pillar: 1,2 - Measure business impact and close feedback loops\n * Tracks outcomes of AI recommendations and measures success over time\n */\n\nimport React, { useState, useEffect } from 'react';\nimport { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/Card';\nimport { Button } from '@/components/ui/Button';\nimport { Badge } from '@/components/ui/Badge';\nimport { Progress } from '@/components/ui/Progress';\nimport { Textarea } from '@/components/ui/Textarea';\nimport { \n  CheckCircle2, \n  Clock, \n  TrendingUp, \n  AlertTriangle,\n  Target,\n  DollarSign,\n  Users,\n  Zap,\n  MessageCircle,\n  X\n} from 'lucide-react';\nimport { useToast } from '@/components/ui/Toast';\nimport { supabase } from '../../lib/core/supabase';\nimport { useAuth } from '@/contexts/AuthContext';\n\ninterface SuccessOutcome {\n  id: string;\n  message_id: string;\n  conversation_id: string;\n  recommendation: string;\n  expected_outcome: string;\n  actual_outcome?: string;\n  status: 'pending' | 'in_progress' | 'completed' | 'failed' | 'not_applicable';\n  impact_type: 'time_savings' | 'cost_reduction' | 'revenue_increase' | 'efficiency_gain' | 'quality_improvement';\n  quantified_impact?: {\n    metric: string;\n    before: number;\n    after?: number;\n    unit: string;\n    timeframe: string;\n  };\n  follow_up_date: string;\n  completed_at?: string;\n  user_notes?: string;\n}\n\ninterface SuccessOutcomeTrackerProps {\n  messageId: string;\n  conversationId: string;\n  recommendation: string;\n  expectedOutcome: string;\n  impactType?: SuccessOutcome['impact_type'];\n  followUpDays?: number;\n  onOutcomeTracked?: (outcome: SuccessOutcome) => void;\n}\n\nexport const SuccessOutcomeTracker: React.FC<SuccessOutcomeTrackerProps> = ({\n  messageId,\n  conversationId,\n  recommendation,\n  expectedOutcome,\n  impactType = 'efficiency_gain',\n  followUpDays = 7,\n  onOutcomeTracked\n}) => {\n  const [outcome, setOutcome] = useState<SuccessOutcome | null>(null);\n  const [showTracker, setShowTracker] = useState(false);\n  const [status, setStatus] = useState<SuccessOutcome['status']>('pending');\n  const [actualOutcome, setActualOutcome] = useState('');\n  const [userNotes, setUserNotes] = useState('');\n  const [quantifiedImpact, setQuantifiedImpact] = useState({\n    metric: '',\n    before: 0,\n    after: 0,\n    unit: '',\n    timeframe: 'week'\n  });\n  const [isSubmitting, setIsSubmitting] = useState(false);\n  \n  const { user } = useAuth();\n  const { showToast } = useToast();\n\n  useEffect(() => {\n    loadExistingOutcome();\n  }, [messageId]);\n\n  const loadExistingOutcome = async () => {\n    if (!user?.id) return;\n\n    try {\n      const { data } = await supabase\n        .from('ai_success_outcomes')\n        .select('*')\n        .eq('message_id', messageId)\n        .eq('user_id', user.id)\n        .single();\n\n      if (data) {\n        setOutcome(data);\n        setStatus(data.status);\n        setActualOutcome(data.actual_outcome || '');\n        setUserNotes(data.user_notes || '');\n        if (data.quantified_impact) {\n          setQuantifiedImpact(data.quantified_impact);\n        }\n      }\n    } catch (error) {\n      // No existing outcome found, which is fine\n    }\n  };\n\n  const createInitialOutcome = async () => {\n    if (!user?.id || outcome) return;\n\n    try {\n      const followUpDate = new Date();\n      followUpDate.setDate(followUpDate.getDate() + followUpDays);\n\n      const newOutcome: Partial<SuccessOutcome> = {\n        message_id: messageId,\n        conversation_id: conversationId,\n        recommendation,\n        expected_outcome: expectedOutcome,\n        status: 'pending',\n        impact_type: impactType,\n        follow_up_date: followUpDate.toISOString(),\n      };\n\n      const { data, error } = await supabase\n        .from('ai_success_outcomes')\n        .insert(newOutcome)\n        .select()\n        .single();\n\n      if (error) throw error;\n\n      setOutcome(data);\n      setShowTracker(true);\n\n      // Schedule follow-up notification\n      await supabase.from('ai_audit_logs').insert({\n        user_id: user.id,\n        action: 'success_outcome_created',\n        table_name: 'ai_success_outcomes',\n        record_id: data.id,\n        details: {\n          recommendation,\n          expected_outcome: expectedOutcome,\n          follow_up_date: followUpDate.toISOString(),\n          impact_type: impactType\n        }\n      });\n\n    } catch (error) {\n      console.error('Error creating success outcome:', error);\n    }\n  };\n\n  const updateOutcome = async () => {\n    if (!outcome || !user?.id || isSubmitting) return;\n\n    setIsSubmitting(true);\n\n    try {\n      const updates: Partial<SuccessOutcome> = {\n        status,\n        actual_outcome: actualOutcome.trim() || undefined,\n        user_notes: userNotes.trim() || undefined,\n      };\n\n      if (status === 'completed' || status === 'failed') {\n        updates.completed_at = new Date().toISOString();\n      }\n\n      if (quantifiedImpact.metric && quantifiedImpact.before > 0) {\n        updates.quantified_impact = quantifiedImpact;\n      }\n\n      const { data, error } = await supabase\n        .from('ai_success_outcomes')\n        .update(updates)\n        .eq('id', outcome.id)\n        .select()\n        .single();\n\n      if (error) throw error;\n\n      setOutcome(data);\n      onOutcomeTracked?.(data);\n\n      // Track in analytics\n      await supabase.from('ai_audit_logs').insert({\n        user_id: user.id,\n        action: 'success_outcome_updated',\n        table_name: 'ai_success_outcomes',\n        record_id: outcome.id,\n        details: {\n          status,\n          has_quantified_impact: !!updates.quantified_impact,\n          impact_type: impactType\n        }\n      });\n\n      showToast({\n        title: 'Outcome Updated',\n        description: 'Thanks for tracking your progress!',\n        type: 'success'\n      });\n\n    } catch (error) {\n      console.error('Error updating outcome:', error);\n      showToast({\n        title: 'Update Failed',\n        description: 'Unable to save outcome. Please try again.',\n        type: 'error'\n      });\n    } finally {\n      setIsSubmitting(false);\n    }\n  };\n\n  const getStatusIcon = (status: SuccessOutcome['status']) => {\n    switch (status) {\n      case 'completed':\n        return <CheckCircle2 className=\"h-4 w-4 text-success\" />;\n      case 'in_progress':\n        return <Clock className=\"h-4 w-4 text-primary\" />;\n      case 'failed':\n        return <AlertTriangle className=\"h-4 w-4 text-destructive\" />;\n      default:\n        return <Target className=\"h-4 w-4 text-muted-foreground\" />;\n    }\n  };\n\n  const getStatusColor = (status: SuccessOutcome['status']) => {\n    switch (status) {\n      case 'completed':\n        return 'bg-success/10 text-success border-success/20';\n      case 'in_progress':\n        return 'bg-primary/10 text-primary border-primary/20';\n      case 'failed':\n        return 'bg-destructive/10 text-destructive border-destructive/20';\n      default:\n        return 'bg-muted/10 text-muted-foreground border-border';\n    }\n  };\n\n  const getImpactIcon = (type: SuccessOutcome['impact_type']) => {\n    switch (type) {\n      case 'time_savings':\n        return <Clock className=\"h-4 w-4\" />;\n      case 'cost_reduction':\n        return <DollarSign className=\"h-4 w-4\" />;\n      case 'revenue_increase':\n        return <TrendingUp className=\"h-4 w-4\" />;\n      case 'efficiency_gain':\n        return <Zap className=\"h-4 w-4\" />;\n      default:\n        return <Target className=\"h-4 w-4\" />;\n    }\n  };\n\n  // Don't show tracker for very old messages\n  const isRecentMessage = () => {\n    const oneDayAgo = new Date();\n    oneDayAgo.setDate(oneDayAgo.getDate() - 1);\n    return true; // For now, always show\n  };\n\n  if (!isRecentMessage()) {\n    return null;\n  }\n\n  // Show initial tracking prompt\n  if (!outcome && !showTracker) {\n    return (\n      <div className=\"mt-3 p-3 bg-primary/5 border border-primary/20 rounded-lg\">\n        <div className=\"flex items-start gap-3\">\n          <Target className=\"h-5 w-5 text-primary mt-0.5\" />\n          <div className=\"flex-1\">\n            <p className=\"text-sm font-medium\">Track the outcome of this recommendation</p>\n            <p className=\"text-xs text-muted-foreground mt-1\">\n              Help us measure impact: {expectedOutcome}\n            </p>\n            <div className=\"flex gap-2 mt-2\">\n              <Button size=\"sm\" onClick={createInitialOutcome}>\n                <Target className=\"h-3 w-3 mr-1\" />\n                Track Outcome\n              </Button>\n              <Button variant=\"ghost\" size=\"sm\" onClick={() => setShowTracker(false)}>\n                Not now\n              </Button>\n            </div>\n          </div>\n        </div>\n      </div>\n    );\n  }\n\n  // Show outcome tracker\n  if (outcome || showTracker) {\n    return (\n      <Card className=\"mt-3 border-primary/20 bg-primary/5\">\n        <CardHeader className=\"pb-3\">\n          <div className=\"flex items-center justify-between\">\n            <CardTitle className=\"text-sm flex items-center gap-2\">\n              {getImpactIcon(impactType)}\n              Outcome Tracking\n            </CardTitle>\n            <Badge className={getStatusColor(status)}>\n              {getStatusIcon(status)}\n              <span className=\"ml-1 capitalize\">{status.replace('_', ' ')}</span>\n            </Badge>\n          </div>\n        </CardHeader>\n        <CardContent className=\"space-y-4\">\n          {/* Expected vs Actual */}\n          <div className=\"space-y-2\">\n            <div className=\"text-xs text-muted-foreground\">Expected outcome:</div>\n            <div className=\"text-sm bg-background/50 p-2 rounded border\">\n              {expectedOutcome}\n            </div>\n          </div>\n\n          {/* Status Selection */}\n          <div className=\"space-y-2\">\n            <label className=\"text-xs font-medium\">Current status:</label>\n            <div className=\"flex flex-wrap gap-1\">\n              {(['pending', 'in_progress', 'completed', 'failed', 'not_applicable'] as const).map((s) => (\n                <Button\n                  key={s}\n                  variant={status === s ? \"default\" : \"outline\"}\n                  size=\"sm\"\n                  onClick={() => setStatus(s)}\n                  className=\"h-7 text-xs\"\n                >\n                  {getStatusIcon(s)}\n                  <span className=\"ml-1 capitalize\">{s.replace('_', ' ')}</span>\n                </Button>\n              ))}\n            </div>\n          </div>\n\n          {/* Actual Outcome */}\n          {(status === 'completed' || status === 'failed') && (\n            <div className=\"space-y-2\">\n              <label className=\"text-xs font-medium\">What actually happened?</label>\n              <Textarea\n                placeholder=\"Describe the actual outcome...\"\n                value={actualOutcome}\n                onChange={(e) => setActualOutcome(e.target.value)}\n                className=\"min-h-[60px] text-sm\"\n              />\n            </div>\n          )}\n\n          {/* Quantified Impact */}\n          {status === 'completed' && (\n            <div className=\"space-y-2\">\n              <label className=\"text-xs font-medium\">Quantify the impact (optional):</label>\n              <div className=\"grid grid-cols-2 gap-2\">\n                <input\n                  type=\"text\"\n                  placeholder=\"Metric (e.g., Hours saved)\"\n                  value={quantifiedImpact.metric}\n                  onChange={(e) => setQuantifiedImpact(prev => ({ ...prev, metric: e.target.value }))}\n                  className=\"px-2 py-1 text-xs border rounded\"\n                />\n                <input\n                  type=\"number\"\n                  placeholder=\"Before\"\n                  value={quantifiedImpact.before || ''}\n                  onChange={(e) => setQuantifiedImpact(prev => ({ ...prev, before: Number(e.target.value) }))}\n                  className=\"px-2 py-1 text-xs border rounded\"\n                />\n                <input\n                  type=\"number\"\n                  placeholder=\"After\"\n                  value={quantifiedImpact.after || ''}\n                  onChange={(e) => setQuantifiedImpact(prev => ({ ...prev, after: Number(e.target.value) }))}\n                  className=\"px-2 py-1 text-xs border rounded\"\n                />\n                <input\n                  type=\"text\"\n                  placeholder=\"Unit\"\n                  value={quantifiedImpact.unit}\n                  onChange={(e) => setQuantifiedImpact(prev => ({ ...prev, unit: e.target.value }))}\n                  className=\"px-2 py-1 text-xs border rounded\"\n                />\n              </div>\n            </div>\n          )}\n\n          {/* Notes */}\n          <div className=\"space-y-2\">\n            <label className=\"text-xs font-medium\">Additional notes:</label>\n            <Textarea\n              placeholder=\"Any additional context or learnings...\"\n              value={userNotes}\n              onChange={(e) => setUserNotes(e.target.value)}\n              className=\"min-h-[50px] text-sm\"\n            />\n          </div>\n\n          {/* Actions */}\n          <div className=\"flex gap-2\">\n            <Button\n              size=\"sm\"\n              onClick={updateOutcome}\n              disabled={isSubmitting}\n            >\n              {isSubmitting ? 'Saving...' : 'Update Outcome'}\n            </Button>\n            {!outcome && (\n              <Button\n                variant=\"ghost\"\n                size=\"sm\"\n                onClick={() => setShowTracker(false)}\n              >\n                Cancel\n              </Button>\n            )}\n          </div>\n        </CardContent>\n      </Card>\n    );\n  }\n\n  return null;\n}; ","usedDeprecatedRules":[]},{"filePath":"/home/vonj/Github/Nexus/src/components/chat/commands.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/vonj/Github/Nexus/src/components/common/ErrorBoundary.tsx","messages":[{"ruleId":"no-restricted-syntax","severity":1,"message":"Use design tokens instead of hardcoded colors (e.g., bg-primary, bg-secondary)","line":34,"column":24,"nodeType":"Literal","messageId":"restrictedSyntax","endLine":34,"endColumn":94},{"ruleId":"no-restricted-syntax","severity":1,"message":"Use design tokens instead of hardcoded text colors (e.g., text-foreground, text-muted-foreground)","line":34,"column":24,"nodeType":"Literal","messageId":"restrictedSyntax","endLine":34,"endColumn":94},{"ruleId":"no-restricted-syntax","severity":1,"message":"Use design tokens instead of hardcoded colors (e.g., bg-primary, bg-secondary)","line":38,"column":23,"nodeType":"Literal","messageId":"restrictedSyntax","endLine":38,"endColumn":81}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React from \"react\";\n\ninterface ErrorBoundaryProps {\n  children: React.ReactNode;\n}\n\ninterface ErrorBoundaryState {\n  hasError: boolean;\n  error: Error | null;\n}\n\nexport class ErrorBoundary extends React.Component<ErrorBoundaryProps, ErrorBoundaryState> {\n  constructor(props: ErrorBoundaryProps) {\n    super(props);\n    this.state = { hasError: false, error: null };\n  }\n\n  static getDerivedStateFromError(error: Error): ErrorBoundaryState {\n    return { hasError: true, error };\n  }\n\n  componentDidCatch(error: Error, errorInfo: React.ErrorInfo) {\n    // Optionally log error to a monitoring service\n    console.error(\"ErrorBoundary caught an error:\", error, errorInfo);\n  }\n\n  handleRetry = () => {\n    this.setState({ hasError: false, error: null });\n  };\n\n  render() {\n    if (this.state.hasError) {\n      return (\n        <div className=\"p-6 bg-red-50 border border-red-200 rounded text-red-700 text-center\">\n          <h2 className=\"text-lg font-semibold mb-2\">Something went wrong.</h2>\n          <p className=\"mb-4\">An unexpected error occurred. Please try again.</p>\n          <button\n            className=\"px-4 py-2 bg-red-600 text-white rounded hover:bg-red-700\"\n            onClick={this.handleRetry}\n          >\n            Retry\n          </button>\n        </div>\n      );\n    }\n    return this.props.children;\n  }\n} ","usedDeprecatedRules":[]},{"filePath":"/home/vonj/Github/Nexus/src/components/dashboard/ActivityFeed.test.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/vonj/Github/Nexus/src/components/dashboard/AdminHome.test.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/vonj/Github/Nexus/src/components/dashboard/AdminHome.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'Database' is defined but never used.","line":2,"column":45,"nodeType":null,"messageId":"unusedVar","endLine":2,"endColumn":53},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'Server' is defined but never used.","line":2,"column":55,"nodeType":null,"messageId":"unusedVar","endLine":2,"endColumn":61}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React from 'react';\nimport { Users, Settings, Shield, Activity, Database, Server, AlertTriangle, CheckCircle } from 'lucide-react';\nimport { PageTemplates } from '@/components/patterns/PageTemplates';\nimport { ContentCard } from '@/components/patterns/ContentCard';\nimport { KpiCard } from '@/components/dashboard/KpiCard';\nimport { SimpleBarChart } from '@/components/dashboard/SimpleBarChart';\n\n/**\n * @name AdminHome\n * @description Admin panel dashboard for managing NEXUS settings and system administration.\n * @returns {JSX.Element} The rendered AdminHome component.\n */\n\n// Sample data for the admin dashboard\nconst adminKpiData = [\n  { title: 'Active Users', value: 24, delta: '+3', trend: 'up' },\n  { title: 'System Uptime', value: '99.9%', delta: '+0.1%', trend: 'up' },\n  { title: 'Storage Used', value: '1.2TB', delta: '+8.5%', trend: 'up' },\n  { title: 'API Calls', value: '45.2K', delta: '+12.3%', trend: 'up' },\n];\n\nconst userActivityData = [\n  { name: 'Mon', value: 18 },\n  { name: 'Tue', value: 22 },\n  { name: 'Wed', value: 19 },\n  { name: 'Thu', value: 24 },\n  { name: 'Fri', value: 21 },\n  { name: 'Sat', value: 8 },\n  { name: 'Sun', value: 6 },\n];\n\nconst systemHealthData = [\n  { name: 'CPU', value: 65 },\n  { name: 'Memory', value: 78 },\n  { name: 'Storage', value: 45 },\n  { name: 'Network', value: 32 },\n];\n\nconst recentUsers = [\n  { name: 'John Doe', email: 'john@company.com', role: 'Admin', lastActive: '2 minutes ago', status: 'online' },\n  { name: 'Jane Smith', email: 'jane@company.com', role: 'Manager', lastActive: '15 minutes ago', status: 'online' },\n  { name: 'Mike Johnson', email: 'mike@company.com', role: 'User', lastActive: '1 hour ago', status: 'offline' },\n  { name: 'Sarah Wilson', email: 'sarah@company.com', role: 'User', lastActive: '2 hours ago', status: 'offline' },\n];\n\nconst systemAlerts = [\n  { type: 'warning', message: 'High memory usage detected on server 2', time: '5 minutes ago' },\n  { type: 'info', message: 'Scheduled backup completed successfully', time: '1 hour ago' },\n  { type: 'success', message: 'System update installed successfully', time: '2 hours ago' },\n  { type: 'warning', message: 'SSL certificate expires in 30 days', time: '1 day ago' },\n];\n\nconst quickActions = [\n  { label: 'User Management', icon: <Users className=\"w-5 h-5\" />, onClick: () => console.log('User Management') },\n  { label: 'System Settings', icon: <Settings className=\"w-5 h-5\" />, onClick: () => console.log('System Settings') },\n  { label: 'Security Center', icon: <Shield className=\"w-5 h-5\" />, onClick: () => console.log('Security Center') },\n  { label: 'System Logs', icon: <Activity className=\"w-5 h-5\" />, onClick: () => console.log('System Logs') },\n];\n\nconst AdminHome: React.FC = () => {\n  return (\n    <PageTemplates.Department\n      title=\"Admin Panel\"\n      subtitle=\"Manage your NEXUS settings, users, and system administration\"\n    >\n      {/* Quick Actions */}\n      <ContentCard title=\"Quick Actions\" variant=\"elevated\" className=\"mb-8\">\n        <div className=\"grid grid-cols-2 md:grid-cols-4 gap-4\">\n          {quickActions.map((action, index) => (\n            <button\n              key={index}\n              onClick={action.onClick}\n              className=\"flex flex-col items-center p-4 rounded-lg border border-border hover:border-primary hover:bg-primary/5 transition-all duration-200 group\"\n            >\n              <div className=\"p-4 rounded-lg bg-primary/10 text-primary group-hover:bg-primary group-hover:text-primary-foreground transition-all duration-200 mb-3\">\n                {action.icon}\n              </div>\n              <span className=\"text-sm font-medium text-foreground group-hover:text-primary transition-colors duration-200\">\n                {action.label}\n              </span>\n            </button>\n          ))}\n        </div>\n      </ContentCard>\n\n      {/* KPI Cards */}\n      <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6 mb-8\">\n        {adminKpiData.map((kpi, index) => (\n          <KpiCard key={index} {...kpi} />\n        ))}\n      </div>\n\n      {/* System Health and User Activity */}\n      <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-8 mb-8\">\n        <ContentCard \n          title=\"User Activity\" \n          variant=\"elevated\"\n          className=\"hover:shadow-xl transition-all duration-300\"\n        >\n          <div className=\"mb-6\">\n            <p className=\"text-sm text-muted-foreground\">Daily active users (last 7 days)</p>\n          </div>\n          <SimpleBarChart data={userActivityData} />\n        </ContentCard>\n\n        <ContentCard \n          title=\"System Health\" \n          variant=\"elevated\"\n          className=\"hover:shadow-xl transition-all duration-300\"\n        >\n          <div className=\"mb-6\">\n            <p className=\"text-sm text-muted-foreground\">Resource utilization percentage</p>\n          </div>\n          <SimpleBarChart data={systemHealthData} />\n        </ContentCard>\n      </div>\n\n      {/* Recent Users and System Alerts */}\n      <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-8\">\n        <ContentCard \n          title=\"Recent Users\" \n          variant=\"elevated\"\n          action={\n            <button className=\"px-4 py-4 bg-primary/5 text-primary hover:bg-primary/10 hover:text-primary/90 rounded-lg transition-all duration-200 text-sm font-medium border border-border\">\n              Manage Users\n            </button>\n          }\n        >\n          <div className=\"space-y-4\">\n            {recentUsers.map((user, index) => (\n              <div key={index} className=\"flex items-center justify-between p-4 rounded-lg hover:bg-muted/50 transition-colors duration-200\">\n                <div className=\"flex items-center space-x-4\">\n                  <div className=\"p-4 rounded-lg bg-primary/10\">\n                    <Users className=\"w-5 h-5 text-primary\" />\n                  </div>\n                  <div>\n                    <h4 className=\"font-medium text-foreground\">{user.name}</h4>\n                    <p className=\"text-sm text-muted-foreground\">{user.email} • {user.role}</p>\n                  </div>\n                </div>\n                <div className=\"text-right\">\n                  <div className={`inline-flex px-4 py-4 rounded-full text-xs font-medium ${\n                    user.status === 'online' ? 'bg-success/10 text-success' : 'bg-muted text-foreground'\n                  }`}>\n                    {user.status}\n                  </div>\n                  <p className=\"text-xs text-muted-foreground mt-1\">{user.lastActive}</p>\n                </div>\n              </div>\n            ))}\n          </div>\n        </ContentCard>\n\n        <ContentCard \n          title=\"System Alerts\" \n          variant=\"elevated\"\n          action={\n            <button className=\"px-4 py-4 bg-primary/5 text-primary hover:bg-primary/10 hover:text-primary/90 rounded-lg transition-all duration-200 text-sm font-medium border border-border\">\n              View All Alerts\n            </button>\n          }\n        >\n          <div className=\"space-y-4\">\n            {systemAlerts.map((alert, index) => {\n              const getIcon = (type: string) => {\n                switch (type) {\n                  case 'warning': return <AlertTriangle className=\"w-5 h-5\" />;\n                  case 'success': return <CheckCircle className=\"w-5 h-5\" />;\n                  case 'info': return <Activity className=\"w-5 h-5\" />;\n                  default: return <Activity className=\"w-5 h-5\" />;\n                }\n              };\n\n              const getColor = (type: string) => {\n                switch (type) {\n                  case 'warning': return 'bg-warning/10 text-warning';\n                  case 'success': return 'bg-success/10 text-success';\n                  case 'info': return 'bg-primary/10 text-primary';\n                  default: return 'bg-muted text-muted-foreground';\n                }\n              };\n\n              return (\n                <div key={index} className=\"flex items-start space-x-4 p-4 rounded-lg hover:bg-muted/50 transition-colors duration-200\">\n                  <div className={`p-4 rounded-lg ${getColor(alert.type)}`}>\n                    {getIcon(alert.type)}\n                  </div>\n                  <div className=\"flex-1\">\n                    <p className=\"text-sm text-foreground\">{alert.message}</p>\n                    <p className=\"text-xs text-muted-foreground mt-1\">{alert.time}</p>\n                  </div>\n                </div>\n              );\n            })}\n          </div>\n        </ContentCard>\n      </div>\n    </PageTemplates.Department>\n  );\n};\n\nexport default AdminHome; ","usedDeprecatedRules":[]},{"filePath":"/home/vonj/Github/Nexus/src/components/dashboard/CentralizedAppsHub.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'Pause' is defined but never used.","line":10,"column":19,"nodeType":null,"messageId":"unusedVar","endLine":10,"endColumn":24},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'Bell' is defined but never used.","line":12,"column":14,"nodeType":null,"messageId":"unusedVar","endLine":12,"endColumn":18},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":27,"column":62,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":27,"endColumn":65,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1193,1196],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1193,1196],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":28,"column":44,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":28,"endColumn":47,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1248,1251],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1248,1251],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":368,"column":40,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":368,"endColumn":43,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[14881,14884],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[14881,14884],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\n * Centralized Apps Hub\n * Unified control center for all business applications and functions\n * Demonstrates the vision of centralized business operations through AI orchestration\n */\n\nimport React, { useState, useEffect } from 'react';\nimport { \n  Building2, Zap, Brain, TrendingUp, AlertCircle, CheckCircle, \n  Settings, Play, Pause, BarChart3, Users, DollarSign, \n  MessageSquare, Globe, Database, Layers, ArrowRight,\n  RefreshCw, Bell, Target, Workflow, Plus\n} from 'lucide-react';\nimport { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/Card';\nimport { Badge } from '@/components/ui/Badge';\nimport { Button } from '@/components/ui/Button';\nimport { centralizedAppsOrchestrator } from '@/lib/centralizedAppsOrchestrator';\nimport type { BusinessApp, BusinessFunction, AppCategory } from '@/lib/centralizedAppsOrchestrator';\n\ninterface CentralizedAppsHubProps {\n  className?: string;\n}\n\nexport const CentralizedAppsHub: React.FC<CentralizedAppsHubProps> = ({ className = '' }) => {\n  const [apps, setApps] = useState<BusinessApp[]>([]);\n  const [functions, setFunctions] = useState<BusinessFunction[]>([]);\n  const [centralizedStatus, setCentralizedStatus] = useState<any>(null);\n  const [insights, setInsights] = useState<any>(null);\n  const [loading, setLoading] = useState(true);\n  const [activeCommand, setActiveCommand] = useState('');\n  const [selectedApps, setSelectedApps] = useState<string[]>([]);\n\n  useEffect(() => {\n    initializeDashboard();\n  }, []);\n\n  const initializeDashboard = async (): Promise<void> => {\n    try {\n      // Get all connected apps and business functions\n      const connectedApps = centralizedAppsOrchestrator.getConnectedApps();\n      const businessFunctions = centralizedAppsOrchestrator.getBusinessFunctions();\n      const status = centralizedAppsOrchestrator.getAppsCentralizedStatus();\n      \n      setApps(connectedApps);\n      setFunctions(businessFunctions);\n      setCentralizedStatus(status);\n\n      // Get business insights (mock for demo)\n      const businessInsights = await centralizedAppsOrchestrator.getBusinessInsights('current-user');\n      setInsights(businessInsights);\n\n    } catch (error) {\n      console.error('Failed to initialize centralized dashboard:', error);\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const executeUnifiedCommand = async (): Promise<void> => {\n    if (!activeCommand.trim() || selectedApps.length === 0) return;\n\n    try {\n      const result = await centralizedAppsOrchestrator.executeUnifiedCommand(\n        activeCommand,\n        selectedApps,\n        'current-user'\n      );\n\n      console.log('Unified command executed:', result);\n      // Show success/results in UI\n    } catch (error) {\n      console.error('Failed to execute unified command:', error);\n    }\n  };\n\n  const executeBusinessFunction = async (functionId: string): Promise<void> => {\n    try {\n      const result = await centralizedAppsOrchestrator.executeBusinessFunction(\n        functionId,\n        { initiated: 'dashboard' },\n        'current-user'\n      );\n\n      console.log('Business function executed:', result);\n    } catch (error) {\n      console.error('Failed to execute business function:', error);\n    }\n  };\n\n  const getStatusIcon = (status: string): React.JSX.Element => {\n    switch (status) {\n      case 'connected': return <CheckCircle className=\"w-4 h-4 text-success\" />;\n      case 'disconnected': return <AlertCircle className=\"w-4 h-4 text-destructive\" />;\n      case 'configuring': return <RefreshCw className=\"w-4 h-4 text-warning animate-spin\" />;\n      default: return <AlertCircle className=\"w-4 h-4 text-muted-foreground\" />;\n    }\n  };\n\n  const getCategoryIcon = (category: AppCategory): React.JSX.Element => {\n    const iconClass = \"w-5 h-5\";\n    switch (category) {\n      case 'crm-sales': return <Users className={`${iconClass} text-primary`} />;\n      case 'finance-accounting': return <DollarSign className={`${iconClass} text-success`} />;\n      case 'marketing-advertising': return <Target className={`${iconClass} text-pink-600`} />;\n      case 'operations-productivity': return <Settings className={`${iconClass} text-secondary`} />;\n      case 'analytics-bi': return <BarChart3 className={`${iconClass} text-warning`} />;\n      case 'communication': return <MessageSquare className={`${iconClass} text-primary`} />;\n      default: return <Layers className={`${iconClass} text-muted-foreground`} />;\n    }\n  };\n\n  const getAutomationColor = (level: number): string => {\n    if (level >= 80) return 'text-success bg-success/5';\n    if (level >= 60) return 'text-warning bg-warning/5';\n    return 'text-destructive bg-destructive/5';\n  };\n\n  if (loading) {\n    return (\n      <div className=\"flex items-center justify-center h-64\">\n        <RefreshCw className=\"w-8 h-8 animate-spin text-primary\" />\n        <span className=\"ml-2 text-lg\">Centralizing your business apps...</span>\n      </div>\n    );\n  }\n\n  return (\n    <div className={`space-y-6 ${className}`}>\n      {/* Header */}\n      <div className=\"flex items-center justify-between\">\n        <div>\n          <h1 className=\"text-3xl font-bold text-foreground dark:text-primary-foreground flex items-center\">\n            <Brain className=\"w-8 h-8 mr-3 text-primary\" />\n            Centralized Business OS\n          </h1>\n          <p className=\"text-muted-foreground dark:text-muted-foreground mt-1\">\n            Unified control center for all your business applications and workflows\n          </p>\n        </div>\n        <div className=\"flex items-center space-x-4\">\n          <Badge variant=\"outline\" className=\"px-4 py-2\">\n            <Zap className=\"w-4 h-4 mr-2\" />\n            {centralizedStatus?.connectedApps} Apps Connected\n          </Badge>\n          <Button className=\"bg-primary hover:bg-primary/90\">\n            <Plus className=\"w-4 h-4 mr-2\" />\n            Connect New App\n          </Button>\n        </div>\n      </div>\n\n      {/* Centralized Status Overview */}\n      <div className=\"grid grid-cols-1 md:grid-cols-4 gap-6\">\n        <Card>\n          <CardContent className=\"p-6\">\n            <div className=\"flex items-center justify-between\">\n              <div>\n                <p className=\"text-sm text-muted-foreground\">Connected Apps</p>\n                <p className=\"text-2xl font-bold\">{centralizedStatus?.connectedApps}</p>\n              </div>\n              <Building2 className=\"w-8 h-8 text-primary\" />\n            </div>\n          </CardContent>\n        </Card>\n\n        <Card>\n          <CardContent className=\"p-6\">\n            <div className=\"flex items-center justify-between\">\n              <div>\n                <p className=\"text-sm text-muted-foreground\">Business Functions</p>\n                <p className=\"text-2xl font-bold\">{functions.length}</p>\n              </div>\n              <Workflow className=\"w-8 h-8 text-secondary\" />\n            </div>\n          </CardContent>\n        </Card>\n\n        <Card>\n          <CardContent className=\"p-6\">\n            <div className=\"flex items-center justify-between\">\n              <div>\n                <p className=\"text-sm text-muted-foreground\">Data Points</p>\n                <p className=\"text-2xl font-bold\">{centralizedStatus?.totalDataPoints?.toLocaleString()}</p>\n              </div>\n              <Database className=\"w-8 h-8 text-success\" />\n            </div>\n          </CardContent>\n        </Card>\n\n        <Card>\n          <CardContent className=\"p-6\">\n            <div className=\"flex items-center justify-between\">\n              <div>\n                <p className=\"text-sm text-muted-foreground\">System Health</p>\n                <p className=\"text-2xl font-bold\">{Math.round((centralizedStatus?.healthyApps / centralizedStatus?.connectedApps) * 100)}%</p>\n              </div>\n              <TrendingUp className=\"w-8 h-8 text-success\" />\n            </div>\n          </CardContent>\n        </Card>\n      </div>\n\n      {/* Unified Command Center */}\n      <Card>\n        <CardHeader>\n          <CardTitle className=\"flex items-center\">\n            <Brain className=\"w-5 h-5 mr-2\" />\n            Unified Command Center\n          </CardTitle>\n        </CardHeader>\n        <CardContent>\n          <div className=\"space-y-4\">\n            <div>\n              <label className=\"block text-sm font-medium mb-2\">Execute Across Multiple Apps</label>\n              <div className=\"flex space-x-2\">\n                <input\n                  type=\"text\"\n                  value={activeCommand}\n                  onChange={(e) => setActiveCommand(e.target.value)}\n                  placeholder=\"e.g., Generate monthly sales report, Update customer contact info, Send marketing campaign...\"\n                  className=\"flex-1 px-4 py-2 border border-border rounded-md focus:outline-none focus:ring-2 focus:ring-primary\"\n                />\n                <Button onClick={executeUnifiedCommand} disabled={!activeCommand.trim() || selectedApps.length === 0}>\n                  <Zap className=\"w-4 h-4 mr-2\" />\n                  Execute\n                </Button>\n              </div>\n            </div>\n            \n            <div>\n              <label className=\"block text-sm font-medium mb-2\">Target Applications</label>\n              <div className=\"flex flex-wrap gap-2\">\n                {apps.slice(0, 6).map(app => (\n                  <button\n                    key={app.id}\n                    onClick={() => {\n                      if (selectedApps.includes(app.id)) {\n                        setSelectedApps(selectedApps.filter(id => id !== app.id));\n                      } else {\n                        setSelectedApps([...selectedApps, app.id]);\n                      }\n                    }}\n                    className={`px-4 py-1 rounded-full text-sm border transition-all ${\n                      selectedApps.includes(app.id)\n                        ? 'bg-primary text-primary-foreground border-primary'\n                        : 'bg-background text-foreground/90 border-border hover:border-primary'\n                    }`}\n                  >\n                    {getCategoryIcon(app.category)}\n                    <span className=\"ml-1\">{app.name}</span>\n                  </button>\n                ))}\n              </div>\n            </div>\n          </div>\n        </CardContent>\n      </Card>\n\n      {/* Business Functions - Automated Workflows */}\n      <Card>\n        <CardHeader>\n          <CardTitle className=\"flex items-center\">\n            <Workflow className=\"w-5 h-5 mr-2\" />\n            Automated Business Functions\n          </CardTitle>\n        </CardHeader>\n        <CardContent>\n          <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n            {functions.map(func => (\n              <div key={func.id} className=\"border border-border rounded-lg p-4\">\n                <div className=\"flex items-center justify-between mb-3\">\n                  <div className=\"flex items-center\">\n                    {getCategoryIcon(func.category)}\n                    <h3 className=\"font-semibold ml-2\">{func.name}</h3>\n                  </div>\n                  <Badge className={getAutomationColor(func.automationLevel)}>\n                    {func.automationLevel}% Automated\n                  </Badge>\n                </div>\n                \n                <p className=\"text-sm text-muted-foreground mb-3\">{func.description}</p>\n                \n                <div className=\"flex items-center justify-between\">\n                  <div className=\"text-xs text-muted-foreground\">\n                    {func.requiredApps.length} apps • {func.supportingAgents.length} agents\n                  </div>\n                  <Button \n                    size=\"sm\" \n                    onClick={() => executeBusinessFunction(func.id)}\n                    className=\"bg-primary/10 text-primary hover:bg-primary hover:text-primary-foreground\"\n                  >\n                    <Play className=\"w-3 h-3 mr-1\" />\n                    Execute\n                  </Button>\n                </div>\n              </div>\n            ))}\n          </div>\n        </CardContent>\n      </Card>\n\n      {/* Connected Applications Grid */}\n      <Card>\n        <CardHeader>\n          <CardTitle className=\"flex items-center\">\n            <Globe className=\"w-5 h-5 mr-2\" />\n            Connected Applications\n          </CardTitle>\n        </CardHeader>\n        <CardContent>\n          <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4\">\n            {apps.map(app => (\n              <div key={app.id} className=\"border border-border rounded-lg p-4\">\n                <div className=\"flex items-center justify-between mb-3\">\n                  <div className=\"flex items-center\">\n                    {getCategoryIcon(app.category)}\n                    <div className=\"ml-3\">\n                      <h3 className=\"font-semibold\">{app.name}</h3>\n                      <p className=\"text-xs text-muted-foreground capitalize\">{app.category.replace('-', ' & ')}</p>\n                    </div>\n                  </div>\n                  {getStatusIcon(app.status)}\n                </div>\n\n                <div className=\"space-y-2 mb-3\">\n                  <div className=\"flex justify-between text-sm\">\n                    <span>Integration Level:</span>\n                    <Badge variant=\"outline\" className=\"capitalize\">{app.integrationLevel}</Badge>\n                  </div>\n                  {app.dataPoints && (\n                    <div className=\"flex justify-between text-sm\">\n                      <span>Data Points:</span>\n                      <span className=\"font-medium\">{app.dataPoints.toLocaleString()}</span>\n                    </div>\n                  )}\n                  <div className=\"flex justify-between text-sm\">\n                    <span>Success Rate:</span>\n                    <span className=\"font-medium text-success\">{app.metrics.successRate}%</span>\n                  </div>\n                </div>\n\n                <div className=\"flex items-center justify-between\">\n                  <div className=\"text-xs text-muted-foreground\">\n                    {app.capabilities.length} capabilities\n                  </div>\n                  <Button size=\"sm\" variant=\"outline\">\n                    <Settings className=\"w-3 h-3 mr-1\" />\n                    Configure\n                  </Button>\n                </div>\n              </div>\n            ))}\n          </div>\n        </CardContent>\n      </Card>\n\n      {/* Business Insights */}\n      {insights && (\n        <Card>\n          <CardHeader>\n            <CardTitle className=\"flex items-center\">\n              <BarChart3 className=\"w-5 h-5 mr-2\" />\n              Cross-Platform Business Insights\n            </CardTitle>\n          </CardHeader>\n          <CardContent>\n            <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-4 mb-6\">\n              {insights.kpis.map((kpi: any, index: number) => (\n                <div key={index} className=\"text-center\">\n                  <p className=\"text-2xl font-bold\">{kpi.value}</p>\n                  <p className=\"text-sm text-muted-foreground\">{kpi.name}</p>\n                  <p className=\"text-xs text-muted-foreground\">\n                    Sources: {kpi.source.join(', ')}\n                  </p>\n                </div>\n              ))}\n            </div>\n\n            <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\n              <div>\n                <h4 className=\"font-semibold mb-3\">AI Recommendations</h4>\n                <ul className=\"space-y-2\">\n                  {insights.recommendations.map((rec: string, index: number) => (\n                    <li key={index} className=\"flex items-start\">\n                      <ArrowRight className=\"w-4 h-4 mt-0.5 mr-2 text-primary\" />\n                      <span className=\"text-sm\">{rec}</span>\n                    </li>\n                  ))}\n                </ul>\n              </div>\n\n              <div>\n                <h4 className=\"font-semibold mb-3\">Cross-App Opportunities</h4>\n                <ul className=\"space-y-2\">\n                  {insights.crossAppOpportunities.map((opp: string, index: number) => (\n                    <li key={index} className=\"flex items-start\">\n                      <Zap className=\"w-4 h-4 mt-0.5 mr-2 text-warning\" />\n                      <span className=\"text-sm\">{opp}</span>\n                    </li>\n                  ))}\n                </ul>\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n      )}\n    </div>\n  );\n}; ","usedDeprecatedRules":[]},{"filePath":"/home/vonj/Github/Nexus/src/components/dashboard/CompanyStatusDashboard.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'Target' is defined but never used.","line":20,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":20,"endColumn":9},{"ruleId":"no-restricted-syntax","severity":1,"message":"Use design tokens instead of hardcoded colors (e.g., bg-primary, bg-secondary)","line":73,"column":16,"nodeType":"Literal","messageId":"restrictedSyntax","endLine":73,"endColumn":118},{"ruleId":"no-restricted-syntax","severity":1,"message":"Use design tokens instead of hardcoded text colors (e.g., text-foreground, text-muted-foreground)","line":73,"column":16,"nodeType":"Literal","messageId":"restrictedSyntax","endLine":73,"endColumn":118},{"ruleId":"no-restricted-syntax","severity":1,"message":"Use design tokens instead of hardcoded text colors (e.g., text-foreground, text-muted-foreground)","line":77,"column":16,"nodeType":"Literal","messageId":"restrictedSyntax","endLine":77,"endColumn":135},{"ruleId":"no-restricted-syntax","severity":1,"message":"Use design tokens instead of hardcoded text colors (e.g., text-foreground, text-muted-foreground)","line":99,"column":39,"nodeType":"Literal","messageId":"restrictedSyntax","endLine":99,"endColumn":62},{"ruleId":"no-restricted-syntax","severity":1,"message":"Use design tokens instead of hardcoded text colors (e.g., text-foreground, text-muted-foreground)","line":179,"column":146,"nodeType":"Literal","messageId":"restrictedSyntax","endLine":179,"endColumn":161},{"ruleId":"no-restricted-syntax","severity":1,"message":"Use design tokens instead of hardcoded text colors (e.g., text-foreground, text-muted-foreground)","line":326,"column":29,"nodeType":"Literal","messageId":"restrictedSyntax","endLine":326,"endColumn":44}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState, useEffect } from 'react';\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/Card';\nimport { Button } from '@/components/ui/Button';\nimport { Badge } from '@/components/ui/Badge';\nimport { Skeleton } from '@/components/ui/Skeleton';\nimport { \n  TrendingUp, \n  TrendingDown, \n  Minus, \n  AlertTriangle, \n  CheckCircle, \n  XCircle, \n  RefreshCw,\n  DollarSign,\n  Users,\n  Activity,\n  Heart,\n  Lightbulb,\n  Settings,\n  Target,\n  Zap\n} from 'lucide-react';\nimport { companyStatusService, type CompanyStatusOverview, type DimensionStatus } from '@/lib/services/companyStatusService';\nimport { logger } from '@/lib/security/logger';\n\ninterface CompanyStatusDashboardProps {\n  className?: string;\n}\n\nexport const CompanyStatusDashboard: React.FC<CompanyStatusDashboardProps> = ({ className = '' }) => {\n  const [status, setStatus] = useState<CompanyStatusOverview | null>(null);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState<string | null>(null);\n  const [refreshing, setRefreshing] = useState(false);\n\n  const fetchStatus = async () => {\n    try {\n      setRefreshing(true);\n      const statusData = await companyStatusService.getCompanyStatusOverview();\n      setStatus(statusData);\n      setError(null);\n      logger.info({ overallScore: statusData.overallHealth.score }, 'Company status loaded');\n    } catch (err) {\n      const errorMessage = err instanceof Error ? err.message : 'Failed to load company status';\n      setError(errorMessage);\n      logger.error({ err }, 'Failed to load company status');\n    } finally {\n      setLoading(false);\n      setRefreshing(false);\n    }\n  };\n\n  useEffect(() => {\n    fetchStatus();\n  }, []);\n\n  const getTrendIcon = (trend: string, size = 'h-4 w-4') => {\n    switch (trend) {\n      case 'improving':\n        return <TrendingUp className={`${size} text-emerald-500`} />;\n      case 'declining':\n        return <TrendingDown className={`${size} text-destructive`} />;\n      default:\n        return <Minus className={`${size} text-amber-500`} />;\n    }\n  };\n\n  const getStatusColor = (status: string) => {\n    switch (status) {\n      case 'excellent':\n        return 'text-emerald-500 bg-emerald-50 border-emerald-200 dark:bg-emerald-900/20 dark:text-emerald-300 dark:border-emerald-800';\n      case 'good':\n        return 'text-blue-500 bg-blue-50 border-blue-200 dark:bg-blue-900/20 dark:text-blue-300 dark:border-blue-800';\n      case 'warning':\n        return 'text-amber-500 bg-amber-50 border-amber-200 dark:bg-amber-900/20 dark:text-amber-300 dark:border-amber-800';\n      default:\n        return 'text-destructive bg-destructive/10 border-destructive/20 dark:bg-destructive/20 dark:text-red-300 dark:border-red-800';\n    }\n  };\n\n  const getDimensionIcon = (dimension: string) => {\n    const iconMap = {\n      financial: <DollarSign className=\"h-5 w-5\" />,\n      operational: <Settings className=\"h-5 w-5\" />,\n      innovation: <Lightbulb className=\"h-5 w-5\" />,\n      customer: <Heart className=\"h-5 w-5\" />,\n      team: <Users className=\"h-5 w-5\" />\n    };\n    return iconMap[dimension as keyof typeof iconMap] || <Activity className=\"h-5 w-5\" />;\n  };\n\n  const getAlertIcon = (type: string) => {\n    switch (type) {\n      case 'critical':\n        return <XCircle className=\"h-4 w-4 text-destructive\" />;\n      case 'warning':\n        return <AlertTriangle className=\"h-4 w-4 text-amber-500\" />;\n      default:\n        return <CheckCircle className=\"h-4 w-4 text-blue-500\" />;\n    }\n  };\n\n  if (loading) {\n    return (\n      <div className={`space-y-6 ${className}`}>\n        <Card>\n          <CardHeader>\n            <Skeleton className=\"h-6 w-1/3\" />\n            <Skeleton className=\"h-4 w-2/3\" />\n          </CardHeader>\n          <CardContent>\n            <Skeleton className=\"h-32 w-full\" />\n          </CardContent>\n        </Card>\n        <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4\">\n          {[...Array(5)].map((_, i) => (\n            <Card key={i}>\n              <CardContent className=\"p-4\">\n                <Skeleton className=\"h-20 w-full\" />\n              </CardContent>\n            </Card>\n          ))}\n        </div>\n      </div>\n    );\n  }\n\n  if (error) {\n    return (\n      <Card className={className}>\n        <CardHeader>\n          <CardTitle className=\"flex items-center gap-2\">\n            <XCircle className=\"h-5 w-5 text-destructive\" />\n            Error Loading Company Status\n          </CardTitle>\n          <CardDescription>\n            We couldn't load your company status overview.\n          </CardDescription>\n        </CardHeader>\n        <CardContent>\n          <p className=\"text-sm text-destructive mb-4\">{error}</p>\n          <Button onClick={fetchStatus} variant=\"outline\">\n            <RefreshCw className=\"mr-2 h-4 w-4\" />\n            Retry\n          </Button>\n        </CardContent>\n      </Card>\n    );\n  }\n\n  if (!status) return null;\n\n  return (\n    <div className={`space-y-6 ${className}`}>\n      {/* Overall Health Header */}\n      <Card className=\"relative overflow-hidden\">\n        <div className=\"absolute inset-0 bg-gradient-to-r from-blue-50 via-indigo-50 to-purple-50 dark:from-blue-950/20 dark:via-indigo-950/20 dark:to-purple-950/20\" />\n        <CardContent className=\"relative p-6\">\n          <div className=\"flex items-center justify-between mb-6\">\n            <div>\n              <h1 className=\"text-3xl font-bold text-foreground dark:text-primary-foreground\">\n                Company Status Overview\n              </h1>\n              <p className=\"text-muted-foreground dark:text-muted-foreground mt-1\">\n                Real-time business intelligence across all dimensions\n              </p>\n            </div>\n            <div className=\"flex items-center gap-4\">\n              <Button \n                onClick={fetchStatus} \n                variant=\"outline\" \n                size=\"sm\"\n                disabled={refreshing}\n              >\n                <RefreshCw className={`mr-2 h-4 w-4 ${refreshing ? 'animate-spin' : ''}`} />\n                Refresh\n              </Button>\n              <div className=\"text-right\">\n                <div className={`text-5xl font-bold ${status.overallHealth.score >= 85 ? 'text-emerald-500' : status.overallHealth.score >= 70 ? 'text-blue-500' : status.overallHealth.score >= 50 ? 'text-amber-500' : 'text-destructive'}`}>\n                  {status.overallHealth.score}%\n                </div>\n                <div className=\"flex items-center gap-2 mt-1\">\n                  <Badge variant=\"outline\" className={getStatusColor(status.overallHealth.status)}>\n                    {status.overallHealth.status.charAt(0).toUpperCase() + status.overallHealth.status.slice(1)}\n                  </Badge>\n                  {getTrendIcon(status.overallHealth.trend)}\n                </div>\n              </div>\n            </div>\n          </div>\n\n          {/* Key Metrics Row */}\n          <div className=\"grid grid-cols-1 md:grid-cols-4 gap-4 mb-6\">\n            {Object.entries(status.keyMetrics).map(([key, metric]) => (\n              <div key={key} className=\"bg-card/80 dark:bg-background/80 backdrop-blur-sm rounded-lg p-4 border border-border/50\">\n                <div className=\"flex items-center justify-between mb-2\">\n                  <span className=\"text-sm font-medium text-muted-foreground capitalize\">\n                    {key}\n                  </span>\n                  {getTrendIcon(metric.trend > 0 ? 'improving' : metric.trend < 0 ? 'declining' : 'stable', 'h-3 w-3')}\n                </div>\n                <div className=\"text-lg font-bold text-foreground\">\n                  {key === 'revenue' ? `$${metric.value.toLocaleString()}` : \n                   key === 'uptime' || key === 'satisfaction' ? `${metric.value}${key === 'uptime' ? '%' : '/10'}` :\n                   metric.value.toLocaleString()}\n                </div>\n                <div className=\"text-xs text-muted-foreground\">\n                  {metric.trend > 0 ? '+' : ''}{metric.trend.toFixed(1)}% this {metric.period}\n                </div>\n              </div>\n            ))}\n          </div>\n        </CardContent>\n      </Card>\n\n      {/* Dimensional Health Cards */}\n      <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6\">\n        {Object.entries(status.dimensions).map(([dimension, data]) => (\n          <DimensionCard \n            key={dimension} \n            dimension={dimension} \n            data={data} \n            icon={getDimensionIcon(dimension)}\n          />\n        ))}\n      </div>\n\n      {/* Alerts and Insights */}\n      <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-6\">\n        {/* Alerts */}\n        <Card>\n          <CardHeader>\n            <CardTitle className=\"flex items-center gap-2\">\n              <AlertTriangle className=\"h-5 w-5\" />\n              Active Alerts\n            </CardTitle>\n            <CardDescription>\n              Issues requiring attention\n            </CardDescription>\n          </CardHeader>\n          <CardContent>\n            {status.alerts.length === 0 ? (\n              <div className=\"flex items-center gap-2 text-muted-foreground\">\n                <CheckCircle className=\"h-4 w-4 text-emerald-500\" />\n                No active alerts - all systems healthy\n              </div>\n            ) : (\n              <div className=\"space-y-3\">\n                {status.alerts.map((alert) => (\n                  <div key={alert.id} className=\"flex items-start gap-3 p-3 rounded-lg border border-border/50\">\n                    {getAlertIcon(alert.type)}\n                    <div className=\"flex-1\">\n                      <div className=\"font-medium\">{alert.title}</div>\n                      <div className=\"text-sm text-muted-foreground\">{alert.description}</div>\n                      {alert.actionRequired && (\n                        <Badge variant=\"destructive\" className=\"mt-1\">\n                          Action Required\n                        </Badge>\n                      )}\n                    </div>\n                  </div>\n                ))}\n              </div>\n            )}\n          </CardContent>\n        </Card>\n\n        {/* Insights */}\n        <Card>\n          <CardHeader>\n            <CardTitle className=\"flex items-center gap-2\">\n              <Zap className=\"h-5 w-5\" />\n              AI Insights\n            </CardTitle>\n            <CardDescription>\n              Opportunities and recommendations\n            </CardDescription>\n          </CardHeader>\n          <CardContent>\n            {status.insights.length === 0 ? (\n              <div className=\"text-muted-foreground\">\n                No insights available at the moment\n              </div>\n            ) : (\n              <div className=\"space-y-3\">\n                {status.insights.map((insight) => (\n                  <div key={insight.id} className=\"p-3 rounded-lg border border-border/50\">\n                    <div className=\"flex items-center justify-between mb-2\">\n                      <div className=\"font-medium\">{insight.title}</div>\n                      <div className=\"flex items-center gap-2\">\n                        <Badge variant={insight.impact === 'high' ? 'default' : insight.impact === 'medium' ? 'secondary' : 'outline'}>\n                          {insight.impact} impact\n                        </Badge>\n                        <span className=\"text-xs text-muted-foreground\">\n                          {insight.confidence}% confidence\n                        </span>\n                      </div>\n                    </div>\n                    <div className=\"text-sm text-muted-foreground\">{insight.description}</div>\n                  </div>\n                ))}\n              </div>\n            )}\n          </CardContent>\n        </Card>\n      </div>\n\n      {/* Last Updated */}\n      <div className=\"text-center text-sm text-muted-foreground\">\n        Last updated: {new Date(status.lastUpdated).toLocaleString()}\n      </div>\n    </div>\n  );\n};\n\n// Dimension Card Component\ninterface DimensionCardProps {\n  dimension: string;\n  data: DimensionStatus;\n  icon: React.ReactNode;\n}\n\nconst DimensionCard: React.FC<DimensionCardProps> = ({ dimension, data, icon }) => {\n  const getScoreColor = (score: number) => {\n    if (score >= 85) return 'text-emerald-500';\n    if (score >= 70) return 'text-blue-500';\n    if (score >= 50) return 'text-amber-500';\n    return 'text-destructive';\n  };\n\n  const getTrendIcon = (trend: string) => {\n    switch (trend) {\n      case 'improving':\n        return <TrendingUp className=\"h-4 w-4 text-emerald-500\" />;\n      case 'declining':\n        return <TrendingDown className=\"h-4 w-4 text-destructive\" />;\n      default:\n        return <Minus className=\"h-4 w-4 text-amber-500\" />;\n    }\n  };\n\n  return (\n    <Card className=\"relative overflow-hidden\">\n      <CardHeader className=\"pb-2\">\n        <CardTitle className=\"flex items-center justify-between\">\n          <div className=\"flex items-center gap-2\">\n            {icon}\n            <span className=\"capitalize\">{dimension}</span>\n          </div>\n          <div className=\"flex items-center gap-2\">\n            <span className={`text-2xl font-bold ${getScoreColor(data.score)}`}>\n              {data.score}%\n            </span>\n            {getTrendIcon(data.trend)}\n          </div>\n        </CardTitle>\n      </CardHeader>\n      <CardContent>\n        <div className=\"space-y-3\">\n          {/* Key Indicators */}\n          <div>\n            <h4 className=\"text-sm font-medium mb-2\">Key Indicators</h4>\n            <div className=\"space-y-1\">\n              {data.keyIndicators.map((indicator, index) => (\n                <div key={index} className=\"text-sm text-muted-foreground\">\n                  • {indicator}\n                </div>\n              ))}\n            </div>\n          </div>\n\n          {/* Action Items */}\n          {data.actionItems.length > 0 && (\n            <div>\n              <h4 className=\"text-sm font-medium mb-2\">Recommended Actions</h4>\n              <div className=\"space-y-1\">\n                {data.actionItems.slice(0, 2).map((action, index) => (\n                  <div key={index} className=\"text-sm text-muted-foreground\">\n                    • {action}\n                  </div>\n                ))}\n              </div>\n            </div>\n          )}\n        </div>\n      </CardContent>\n    </Card>\n  );\n}; ","usedDeprecatedRules":[]},{"filePath":"/home/vonj/Github/Nexus/src/components/dashboard/CrossDepartmentMatrix.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'getStatusColor' is assigned a value but never used.","line":141,"column":9,"nodeType":null,"messageId":"unusedVar","endLine":141,"endColumn":23},{"ruleId":"no-restricted-syntax","severity":1,"message":"Use design tokens instead of hardcoded colors (e.g., bg-primary, bg-secondary)","line":146,"column":16,"nodeType":"Literal","messageId":"restrictedSyntax","endLine":146,"endColumn":87},{"ruleId":"no-restricted-syntax","severity":1,"message":"Use design tokens instead of hardcoded colors (e.g., bg-primary, bg-secondary)","line":150,"column":16,"nodeType":"Literal","messageId":"restrictedSyntax","endLine":150,"endColumn":95},{"ruleId":"no-restricted-syntax","severity":1,"message":"Use design tokens instead of hardcoded text colors (e.g., text-foreground, text-muted-foreground)","line":163,"column":16,"nodeType":"Literal","messageId":"restrictedSyntax","endLine":163,"endColumn":115}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React from 'react';\nimport { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/Card';\nimport { Badge } from '@/components/ui/Badge';\nimport { \n  DollarSign, \n  Settings, \n  TrendingUp, \n  Megaphone, \n  Users, \n  Monitor, \n  Scale, \n  Target,\n  ArrowUp,\n  ArrowDown,\n  Minus\n} from 'lucide-react';\n\ninterface DepartmentMetric {\n  icon: React.ReactNode;\n  department: string;\n  primaryMetric: string;\n  primaryValue: string;\n  secondaryMetric: string;\n  secondaryValue: string;\n  tertiaryMetric: string;\n  tertiaryValue: string;\n  status: 'excellent' | 'good' | 'warning' | 'critical';\n  trend: 'up' | 'down' | 'stable';\n}\n\ninterface CrossDepartmentMatrixProps {\n  className?: string;\n}\n\n/**\n * CrossDepartmentMatrix displays metrics from all business departments\n * in a unified grid view for organizational intelligence\n */\nconst CrossDepartmentMatrix: React.FC<CrossDepartmentMatrixProps> = ({ \n  className = '' \n}) => {\n  const departmentMetrics: DepartmentMetric[] = [\n    {\n      icon: <DollarSign className=\"h-5 w-5\" />,\n      department: 'FINANCE',\n      primaryMetric: 'Cash Flow',\n      primaryValue: '+$1.2M',\n      secondaryMetric: 'Burn Rate',\n      secondaryValue: '8%',\n      tertiaryMetric: 'Runway',\n      tertiaryValue: '18mo',\n      status: 'excellent',\n      trend: 'up'\n    },\n    {\n      icon: <Settings className=\"h-5 w-5\" />,\n      department: 'OPERATIONS',\n      primaryMetric: 'Efficiency',\n      primaryValue: '94%',\n      secondaryMetric: 'Quality',\n      secondaryValue: '99.1%',\n      tertiaryMetric: 'Capacity',\n      tertiaryValue: '78%',\n      status: 'excellent',\n      trend: 'up'\n    },\n    {\n      icon: <TrendingUp className=\"h-5 w-5\" />,\n      department: 'SALES',\n      primaryMetric: 'Pipeline',\n      primaryValue: '$1.2M',\n      secondaryMetric: 'Close Rate',\n      secondaryValue: '23%',\n      tertiaryMetric: 'Velocity',\n      tertiaryValue: '14d',\n      status: 'good',\n      trend: 'up'\n    },\n    {\n      icon: <Megaphone className=\"h-5 w-5\" />,\n      department: 'MARKETING',\n      primaryMetric: 'CAC',\n      primaryValue: '$127',\n      secondaryMetric: 'LTV',\n      secondaryValue: '$2,840',\n      tertiaryMetric: 'ROAS',\n      tertiaryValue: '4.2x',\n      status: 'excellent',\n      trend: 'up'\n    },\n    {\n      icon: <Users className=\"h-5 w-5\" />,\n      department: 'PEOPLE',\n      primaryMetric: 'Engagement',\n      primaryValue: '87%',\n      secondaryMetric: 'Productivity',\n      secondaryValue: '↑12%',\n      tertiaryMetric: 'Skills Gap',\n      tertiaryValue: '12%',\n      status: 'good',\n      trend: 'stable'\n    },\n    {\n      icon: <Monitor className=\"h-5 w-5\" />,\n      department: 'TECHNOLOGY',\n      primaryMetric: 'System Health',\n      primaryValue: '98.2%',\n      secondaryMetric: 'Security Score',\n      secondaryValue: 'A+',\n      tertiaryMetric: 'Data Quality',\n      tertiaryValue: '96%',\n      status: 'excellent',\n      trend: 'up'\n    },\n    {\n      icon: <Scale className=\"h-5 w-5\" />,\n      department: 'LEGAL',\n      primaryMetric: 'Compliance',\n      primaryValue: '98%',\n      secondaryMetric: 'Risk Level',\n      secondaryValue: 'Low',\n      tertiaryMetric: 'Contracts Due',\n      tertiaryValue: '3',\n      status: 'excellent',\n      trend: 'stable'\n    },\n    {\n      icon: <Target className=\"h-5 w-5\" />,\n      department: 'STRATEGY',\n      primaryMetric: 'OKRs',\n      primaryValue: '67%',\n      secondaryMetric: 'Innovation Idx',\n      secondaryValue: '8.4',\n      tertiaryMetric: 'Market Share',\n      tertiaryValue: '12%',\n      status: 'warning',\n      trend: 'up'\n    }\n  ];\n\n  const getStatusColor = (status: string) => {\n    switch (status) {\n      case 'excellent':\n        return 'bg-emerald-50 border-emerald-200 dark:bg-emerald-950/20 dark:border-emerald-800';\n      case 'good':\n        return 'bg-primary/5 border-border dark:bg-blue-950/20 dark:border-primary/80';\n      case 'warning':\n        return 'bg-amber-50 border-amber-200 dark:bg-amber-950/20 dark:border-amber-800';\n      default:\n        return 'bg-destructive/5 border-destructive/20 dark:bg-red-950/20 dark:border-red-800';\n    }\n  };\n\n  const getStatusBadgeColor = (status: string) => {\n    switch (status) {\n      case 'excellent':\n        return 'bg-emerald-100 text-emerald-800 border-emerald-200 dark:bg-emerald-900/20 dark:text-emerald-300';\n      case 'good':\n        return 'bg-primary/10 text-primary border-border dark:bg-primary/20/20 dark:text-primary';\n      case 'warning':\n        return 'bg-amber-100 text-amber-800 border-amber-200 dark:bg-amber-900/20 dark:text-amber-300';\n      default:\n        return 'bg-destructive/10 text-destructive border-destructive/20 dark:bg-destructive/20 dark:text-red-300';\n    }\n  };\n\n  const getTrendIcon = (trend: string) => {\n    switch (trend) {\n      case 'up':\n        return <ArrowUp className=\"h-3 w-3 text-emerald-500\" />;\n      case 'down':\n        return <ArrowDown className=\"h-3 w-3 text-destructive\" />;\n      default:\n        return <Minus className=\"h-3 w-3 text-amber-500\" />;\n    }\n  };\n\n  return (\n    <div className={className}>\n      <div className=\"mb-6\">\n        <h3 className=\"text-xl font-bold text-foreground dark:text-primary-foreground mb-2\">\n          Cross-Functional Intelligence Grid\n        </h3>\n        <p className=\"text-sm text-muted-foreground dark:text-muted-foreground\">\n          Real-time performance metrics across all business departments\n        </p>\n      </div>\n\n      <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-4\">\n        {departmentMetrics.map((dept, index) => (\n          <Card \n            key={index}\n            className=\"relative overflow-hidden transition-all hover:shadow-md\"\n          >\n            <CardHeader className=\"pb-3\">\n              <CardTitle className=\"flex items-center justify-between text-sm font-semibold\">\n                <div className=\"flex items-center gap-2\">\n                  <div className=\"text-muted-foreground dark:text-muted-foreground\">\n                    {dept.icon}\n                  </div>\n                  <span className=\"text-foreground dark:text-primary-foreground\">\n                    {dept.department}\n                  </span>\n                </div>\n                <div className=\"flex items-center gap-1\">\n                  {getTrendIcon(dept.trend)}\n                  <Badge \n                    variant=\"outline\" \n                    className={`text-xs px-1.5 py-0.5 ${getStatusBadgeColor(dept.status)}`}\n                  >\n                    {dept.status}\n                  </Badge>\n                </div>\n              </CardTitle>\n            </CardHeader>\n            \n            <CardContent className=\"pt-0 space-y-4\">\n              {/* Primary Metric */}\n              <div>\n                <div className=\"text-xs text-muted-foreground dark:text-muted-foreground mb-1\">\n                  {dept.primaryMetric}\n                </div>\n                <div className=\"text-lg font-bold text-foreground dark:text-primary-foreground\">\n                  {dept.primaryValue}\n                </div>\n              </div>\n\n              {/* Secondary Metrics */}\n              <div className=\"grid grid-cols-2 gap-4 pt-2 border-t border-border/50 dark:border-border/50\">\n                <div>\n                  <div className=\"text-xs text-muted-foreground dark:text-muted-foreground mb-1\">\n                    {dept.secondaryMetric}\n                  </div>\n                  <div className=\"text-sm font-semibold text-foreground/90 dark:text-muted-foreground/60\">\n                    {dept.secondaryValue}\n                  </div>\n                </div>\n                <div>\n                  <div className=\"text-xs text-muted-foreground dark:text-muted-foreground mb-1\">\n                    {dept.tertiaryMetric}\n                  </div>\n                  <div className=\"text-sm font-semibold text-foreground/90 dark:text-muted-foreground/60\">\n                    {dept.tertiaryValue}\n                  </div>\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n        ))}\n      </div>\n    </div>\n  );\n};\n\nexport default CrossDepartmentMatrix; ","usedDeprecatedRules":[]},{"filePath":"/home/vonj/Github/Nexus/src/components/dashboard/DashboardOnboarding.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/vonj/Github/Nexus/src/components/dashboard/EnhancedDashboard.stories.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/vonj/Github/Nexus/src/components/dashboard/EnhancedDashboard.test.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/vonj/Github/Nexus/src/components/dashboard/EnhancedDashboard.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'TrendingUp' is defined but never used.","line":6,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":6,"endColumn":13},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'AlertCircle' is defined but never used.","line":7,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":7,"endColumn":14},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'Users' is defined but never used.","line":8,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":8,"endColumn":8},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'Target' is defined but never used.","line":9,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":9,"endColumn":9},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'Clock' is defined but never used.","line":14,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":14,"endColumn":8},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'CheckCircle2' is defined but never used.","line":15,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":15,"endColumn":15},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'Database' is defined but never used.","line":17,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":17,"endColumn":11},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'Settings' is defined but never used.","line":18,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":18,"endColumn":11},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'GripVertical' is defined but never used.","line":19,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":19,"endColumn":15},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'CommonErrorBoundary' is defined but never used.","line":35,"column":27,"nodeType":null,"messageId":"unusedVar","endLine":35,"endColumn":46},{"ruleId":"no-restricted-syntax","severity":1,"message":"Use design tokens instead of hardcoded colors (e.g., bg-primary, bg-secondary)","line":171,"column":16,"nodeType":"Literal","messageId":"restrictedSyntax","endLine":171,"endColumn":45},{"ruleId":"no-restricted-syntax","severity":1,"message":"Use design tokens instead of hardcoded text colors (e.g., text-foreground, text-muted-foreground)","line":171,"column":16,"nodeType":"Literal","messageId":"restrictedSyntax","endLine":171,"endColumn":45},{"ruleId":"no-restricted-syntax","severity":1,"message":"Use design tokens instead of hardcoded colors (e.g., bg-primary, bg-secondary)","line":173,"column":16,"nodeType":"Literal","messageId":"restrictedSyntax","endLine":173,"endColumn":47},{"ruleId":"no-restricted-syntax","severity":1,"message":"Use design tokens instead of hardcoded text colors (e.g., text-foreground, text-muted-foreground)","line":173,"column":16,"nodeType":"Literal","messageId":"restrictedSyntax","endLine":173,"endColumn":47},{"ruleId":"no-restricted-syntax","severity":1,"message":"Use design tokens instead of hardcoded colors (e.g., bg-primary, bg-secondary)","line":175,"column":16,"nodeType":"Literal","messageId":"restrictedSyntax","endLine":175,"endColumn":41},{"ruleId":"no-restricted-syntax","severity":1,"message":"Use design tokens instead of hardcoded text colors (e.g., text-foreground, text-muted-foreground)","line":175,"column":16,"nodeType":"Literal","messageId":"restrictedSyntax","endLine":175,"endColumn":41}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":16,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState, useEffect, Suspense, lazy } from 'react';\nimport { \n  Brain, \n  Eye, \n  Zap, \n  TrendingUp, \n  AlertCircle, \n  Users, \n  Target,\n  Activity,\n  BarChart3,\n  ArrowUpRight,\n  Sparkles,\n  Clock,\n  CheckCircle2,\n  Lightbulb,\n  Database,\n  Settings,\n  GripVertical,\n  Eye as EyeIcon,\n  EyeOff,\n  PlusCircle\n} from 'lucide-react';\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/Card';\nimport { Badge } from '@/components/ui/Badge';\nimport { Button } from '@/components/ui/Button';\nimport { ContentCard } from '@/components/patterns/ContentCard';\nimport { SimpleBarChart } from './SimpleBarChart';\nimport { dashboardService, type DashboardMetrics, type DashboardActivity } from '../../lib/services/dashboardService';\nimport { motion, AnimatePresence } from 'framer-motion';\nimport ErrorBoundary from '@/components/ui/ErrorBoundary';\nimport { useAuth } from '@/contexts/AuthContext';\nimport { DashboardOnboarding } from './DashboardOnboarding';\nimport { analyticsService } from '@/lib/services/analyticsService';\nimport { ErrorBoundary as CommonErrorBoundary } from \"@/components/common/ErrorBoundary\";\nimport { Recents } from \"./Recents\";\nimport { Pins } from \"./Pins\";\nimport { QuickActionsPanel } from \"./QuickActionsPanel\";\n\n/**\n * @name EnhancedDashboard\n * @description Modern Trinity-powered dashboard with contemporary design principles\n * @returns {JSX.Element} The rendered enhanced dashboard component.\n */\n\n// All color classes use design tokens per design system\n\ninterface WidgetConfig {\n  key: 'think' | 'see' | 'act';\n  label: string;\n  visible: boolean;\n}\n\nconst DEFAULT_WIDGETS: WidgetConfig[] = [\n  { key: 'think', label: 'THINK', visible: true },\n  { key: 'see', label: 'SEE', visible: true },\n  { key: 'act', label: 'ACT', visible: true },\n];\n\n// Lazy load heavy widgets\nconst OrganizationalHealthScore = lazy(() => import('./OrganizationalHealthScore'));\nconst CrossDepartmentMatrix = lazy(() => import('./CrossDepartmentMatrix'));\nconst TrinityInsightsEngine = lazy(() => import('./TrinityInsightsEngine'));\n\nconst EnhancedDashboard: React.FC = () => {\n  const { user, completeOnboarding } = useAuth();\n  const [dashboardMetrics, setDashboardMetrics] = useState<DashboardMetrics>({\n    think: {\n      ideasCaptured: 0,\n      collaborationSessions: 0,\n      innovationScore: 0,\n      crossDeptConnections: 0\n    },\n    see: {\n      dataSourcesConnected: 0,\n      realTimeInsights: 0,\n      predictiveAccuracy: 0,\n      alertsGenerated: 0\n    },\n    act: {\n      automationsRunning: 0,\n      workflowsOptimized: 0,\n      timeSaved: 0,\n      processEfficiency: 0\n    }\n  });\n  const [recentActivities, setRecentActivities] = useState<DashboardActivity[]>([]);\n  const [loading, setLoading] = useState(true);\n  const [showOnboarding, setShowOnboarding] = useState(false);\n  const [showBriefing, setShowBriefing] = useState(() => {\n    const today = new Date().toISOString().slice(0, 10);\n    return localStorage.getItem('aiBriefingDismissed') !== today;\n  });\n\n  const trinityData = [\n    { name: 'Ideas', value: dashboardMetrics.think.ideasCaptured },\n    { name: 'Insights', value: dashboardMetrics.see.realTimeInsights },\n    { name: 'Actions', value: dashboardMetrics.act.automationsRunning }\n  ];\n\n  const [widgetConfigs, setWidgetConfigs] = useState<WidgetConfig[]>(() => {\n    const saved = localStorage.getItem('nexus_dashboard_widgets');\n    if (saved) {\n      try {\n        return JSON.parse(saved);\n      } catch {\n        // fallback to default\n      }\n    }\n    return DEFAULT_WIDGETS;\n  });\n\n  // Initialize analytics\n  useEffect(() => {\n    if (user) {\n      const userRole = user.role || '';\n      const userDepartment = user.department || '';\n      analyticsService.init(user.id, {\n        email: user.email,\n        role: userRole,\n        department: userDepartment,\n      });\n    }\n    // Cleanup on unmount or user change\n    return () => {\n      analyticsService.reset();\n    };\n  }, [user]);\n\n  // Check for onboarding status\n  useEffect(() => {\n    if (user && !user.onboardingCompleted) {\n      setShowOnboarding(true);\n    }\n  }, [user]);\n\n  const handleCompleteOnboarding = async () => {\n    await completeOnboarding();\n    setShowOnboarding(false);\n  };\n\n  const handleWidgetToggle = (key: WidgetConfig['key']) => {\n    setWidgetConfigs(prev => {\n      const updated = prev.map(w => w.key === key ? { ...w, visible: !w.visible } : w);\n      localStorage.setItem('nexus_dashboard_widgets', JSON.stringify(updated));\n      analyticsService.track('dashboard_widget_toggle', { widget: key, visible: !prev.find(w => w.key === key)?.visible });\n      return updated;\n    });\n  };\n\n  // Fetch real Dashboard data\n  useEffect(() => {\n    const fetchDashboardData = async () => {\n      try {\n        const { metrics, activities } = await dashboardService.getDashboardData();\n        setDashboardMetrics(metrics);\n        setRecentActivities(activities);\n      } catch (error) {\n        console.error('Error fetching dashboard data:', error);\n      } finally {\n        setLoading(false);\n      }\n    };\n\n    fetchDashboardData();\n  }, []);\n\n  function getStatusColor(status: string): string {\n    switch (status) {\n      case \"success\":\n        return \"bg-green-100 text-green-700\";\n      case \"warning\":\n        return \"bg-yellow-100 text-yellow-700\";\n      case \"error\":\n        return \"bg-red-100 text-red-700\";\n      default:\n        return \"\";\n    }\n  }\n\n  const getTypeIcon = (type: string) => {\n    switch (type) {\n      case 'think': return <Brain className=\"w-4 h-4\" />;\n      case 'see': return <Eye className=\"w-4 h-4\" />;\n      case 'act': return <Zap className=\"w-4 h-4\" />;\n      default: return <Activity className=\"w-4 h-4\" />;\n    }\n  };\n\n  const handleDismissBriefing = () => {\n    const today = new Date().toISOString().slice(0, 10);\n    localStorage.setItem('aiBriefingDismissed', today);\n    setShowBriefing(false);\n  };\n\n  // Widget access control by role/department\n  const isWidgetAllowed = (key: WidgetConfig['key']) => {\n    if (!user) return false;\n    const role = user.role || '';\n    const department = user.department || '';\n    // Demo config: adjust as needed\n    switch (key) {\n      case 'think':\n        return true; // All users\n      case 'see':\n        return ['admin', 'owner'].includes(role) || department.toLowerCase() === 'finance';\n      case 'act':\n        return ['admin', 'manager'].includes(role) || department.toLowerCase() === 'operations';\n      default:\n        return true;\n    }\n  };\n\n  // Filter widgetConfigs by access control before rendering/toggling\n  const allowedWidgetConfigs = widgetConfigs.filter(w => isWidgetAllowed(w.key));\n\n  if (showOnboarding) {\n    return (\n      <div className=\"p-6\">\n        <DashboardOnboarding \n          onComplete={handleCompleteOnboarding}\n          userName={user?.name}\n        />\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"min-h-screen p-6\">\n      <div className=\"flex items-center justify-between mb-6\">\n        <div>\n          <h1 className=\"text-3xl font-bold\">\n            Dashboard\n          </h1>\n          <p className=\"text-muted-foreground mt-1\">\n            Your organizational command center, powered by Trinity.\n          </p>\n        </div>\n        <div className=\"flex items-center space-x-4\">\n          <Button \n            variant=\"outline\" \n            size=\"sm\"\n            onClick={async () => {\n              try {\n                const { metrics, activities } = await dashboardService.getDashboardData();\n                setDashboardMetrics(metrics);\n                setRecentActivities(activities);\n                analyticsService.track('dashboard_refresh_manual');\n              } catch (error) {\n                console.error(\"Failed to refresh dashboard data\", error);\n              }\n            }}\n          >\n            Refresh\n          </Button>\n        </div>\n      </div>\n\n      <div className=\"p-6 space-y-8\">\n        {/* AI Daily Briefing Widget */}\n        <AnimatePresence>\n          {showBriefing && !showOnboarding && (\n            <motion.div\n              initial={{ opacity: 0, y: -24 }}\n              animate={{ opacity: 1, y: 0 }}\n              exit={{ opacity: 0, y: -24 }}\n              transition={{ duration: 0.4 }}\n            >\n              <ContentCard\n                title=\"AI Daily Briefing\"\n                variant=\"elevated\"\n                className=\"mb-6 relative\"\n                aria-live=\"polite\"\n                aria-label=\"AI Daily Briefing\"\n              >\n                <button\n                  onClick={() => { handleDismissBriefing(); analyticsService.track('dashboard_briefing_dismissed'); }}\n                  aria-label=\"Dismiss daily briefing\"\n                  className=\"absolute top-4 right-4 text-muted-foreground hover:text-destructive focus:outline-none\"\n                  tabIndex={0}\n                >\n                  <span aria-hidden=\"true\">&times;</span>\n                </button>\n                <div className=\"flex items-center gap-3 mb-2\">\n                  <Sparkles className=\"w-5 h-5 text-warning\" />\n                  <span className=\"font-semibold text-lg\">Your AI-powered summary for {new Date().toLocaleDateString()}</span>\n                </div>\n                <div className=\"text-base text-muted-foreground\">\n                  Welcome back! Here's your daily snapshot:\n                  <ul className=\"list-disc ml-6 mt-2\">\n                    <li>Revenue is up 4.2% week-over-week.</li>\n                    <li>3 new cross-department projects started.</li>\n                    <li>AI detected a workflow bottleneck in onboarding—review suggested optimizations.</li>\n                  </ul>\n                  <span className=\"block mt-2 text-xs text-muted-foreground\">(This briefing updates daily. Dismiss to hide until tomorrow.)</span>\n                </div>\n              </ContentCard>\n            </motion.div>\n          )}\n        </AnimatePresence>\n\n        {/* Trinity Performance Overview */}\n        <div className=\"grid grid-cols-1 lg:grid-cols-3 gap-6\">\n          <AnimatePresence>\n            {allowedWidgetConfigs.filter(w => w.visible).map((w, i) => (\n              <motion.div\n                key={w.key}\n                initial={{ opacity: 0, y: 24 }}\n                animate={{ opacity: 1, y: 0 }}\n                exit={{ opacity: 0, y: 24 }}\n                transition={{ duration: 0.4, delay: i * 0.1 }}\n                onViewportEnter={() => analyticsService.track('dashboard_widget_view', { widget: w.key })}\n              >\n                <ErrorBoundary>\n                  {w.key === 'think' && (\n                    <Card className=\"group hover:shadow-xl transition-all duration-300\">\n                      <CardHeader className=\"pb-3\">\n                        <div className=\"flex items-center justify-between\">\n                          <div className=\"flex items-center space-x-4\">\n                            <div className=\"p-4 rounded-xl bg-primary/10 text-primary\">\n                              <Brain className=\"w-6 h-6\" />\n                            </div>\n                            <div>\n                              <CardTitle className=\"text-lg\">THINK Engine</CardTitle>\n                              <CardDescription>Creative Intelligence</CardDescription>\n                            </div>\n                          </div>\n                        </div>\n                      </CardHeader>\n                      <CardContent className=\"space-y-4\">\n                        <div className=\"grid grid-cols-2 gap-4\">\n                          <div className=\"text-center p-4 rounded-lg bg-card/60 dark:bg-background/40\">\n                            <div className=\"text-2xl font-bold text-primary\">\n                              {loading ? '...' : dashboardMetrics.think.ideasCaptured}\n                            </div>\n                            <div className=\"text-sm text-muted-foreground dark:text-muted-foreground\">Ideas Captured</div>\n                          </div>\n                          <div className=\"text-center p-4 rounded-lg bg-card/60 dark:bg-background/40\">\n                            <div className=\"text-2xl font-bold text-primary\">\n                              {loading ? '...' : dashboardMetrics.think.collaborationSessions}\n                            </div>\n                            <div className=\"text-sm text-muted-foreground dark:text-muted-foreground\">Active Sessions</div>\n                          </div>\n                        </div>\n                      </CardContent>\n                    </Card>\n                  )}\n                  {w.key === 'see' && (\n                    <Card className=\"group hover:shadow-xl transition-all duration-300\">\n                      <CardHeader className=\"pb-3\">\n                        <div className=\"flex items-center justify-between\">\n                          <div className=\"flex items-center space-x-4\">\n                            <div className=\"p-4 rounded-xl bg-secondary/10 text-secondary\">\n                              <Eye className=\"w-6 h-6\" />\n                            </div>\n                            <div>\n                              <CardTitle className=\"text-lg\">SEE Analytics</CardTitle>\n                              <CardDescription>Business Intelligence</CardDescription>\n                            </div>\n                          </div>\n                        </div>\n                      </CardHeader>\n                      <CardContent className=\"space-y-4\">\n                        <div className=\"grid grid-cols-2 gap-4\">\n                          <div className=\"text-center p-4 rounded-lg bg-card/60 dark:bg-background/40\">\n                            <div className=\"text-2xl font-bold text-secondary\">\n                              {loading ? '...' : dashboardMetrics.see.dataSourcesConnected}\n                            </div>\n                            <div className=\"text-sm text-muted-foreground dark:text-muted-foreground\">Data Sources</div>\n                          </div>\n                          <div className=\"text-center p-4 rounded-lg bg-card/60 dark:bg-background/40\">\n                            <div className=\"text-2xl font-bold text-secondary\">\n                              {loading ? '...' : dashboardMetrics.see.realTimeInsights}\n                            </div>\n                            <div className=\"text-sm text-muted-foreground dark:text-muted-foreground\">Live Insights</div>\n                          </div>\n                        </div>\n                      </CardContent>\n                    </Card>\n                  )}\n                  {w.key === 'act' && (\n                    <Card className=\"group hover:shadow-xl transition-all duration-300\">\n                      <CardHeader className=\"pb-3\">\n                        <div className=\"flex items-center justify-between\">\n                          <div className=\"flex items-center space-x-4\">\n                            <div className=\"p-4 rounded-xl bg-primary/10 text-primary\">\n                              <Zap className=\"w-6 h-6\" />\n                            </div>\n                            <div>\n                              <CardTitle className=\"text-lg\">ACT Automation</CardTitle>\n                              <CardDescription>Operational Intelligence</CardDescription>\n                            </div>\n                          </div>\n                        </div>\n                      </CardHeader>\n                      <CardContent className=\"space-y-4\">\n                        <div className=\"grid grid-cols-2 gap-4\">\n                          <div className=\"text-center p-4 rounded-lg bg-card/60 dark:bg-background/40\">\n                            <div className=\"text-2xl font-bold text-primary\">\n                              {loading ? '...' : dashboardMetrics.act.automationsRunning}\n                            </div>\n                            <div className=\"text-sm text-muted-foreground dark:text-muted-foreground\">Active Automations</div>\n                          </div>\n                          <div className=\"text-center p-4 rounded-lg bg-card/60 dark:bg-background/40\">\n                            <div className=\"text-2xl font-bold text-primary\">\n                              {loading ? '...' : `${Math.floor(dashboardMetrics.act.timeSaved / 60)}h`}\n                            </div>\n                            <div className=\"text-sm text-muted-foreground dark:text-muted-foreground\">Time Saved</div>\n                          </div>\n                        </div>\n                      </CardContent>\n                    </Card>\n                  )}\n                </ErrorBoundary>\n              </motion.div>\n            ))}\n          </AnimatePresence>\n        </div>\n\n        {/* Organizational Health Score - New Command Center View */}\n        <Suspense fallback={<div className=\"mb-8\"><div className=\"animate-pulse h-24 bg-muted rounded-lg\" /></div>}>\n          <ErrorBoundary>\n            <OrganizationalHealthScore className=\"mb-8\" />\n          </ErrorBoundary>\n        </Suspense>\n\n        {/* Cross-Department Intelligence Grid */}\n        <Suspense fallback={<div className=\"mb-8\"><div className=\"animate-pulse h-24 bg-muted rounded-lg\" /></div>}>\n          <ErrorBoundary>\n            <CrossDepartmentMatrix className=\"mb-8\" />\n          </ErrorBoundary>\n        </Suspense>\n\n        {/* Trinity Insights Engine */}\n        <Suspense fallback={<div className=\"mb-8\"><div className=\"animate-pulse h-24 bg-muted rounded-lg\" /></div>}>\n          <ErrorBoundary>\n            <TrinityInsightsEngine className=\"mb-8\" />\n          </ErrorBoundary>\n        </Suspense>\n\n        {/* Trinity Flow Visualization and Activity Feed */}\n        <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-8\">\n          {/* Trinity Flow Chart */}\n          <Card className=\"border-0\">\n            <CardHeader>\n              <div className=\"flex items-center justify-between\">\n                <div>\n                  <CardTitle className=\"flex items-center\">\n                    <BarChart3 className=\"w-5 h-5 mr-2 text-primary\" />\n                    Trinity Performance Flow\n                  </CardTitle>\n                  <CardDescription>Real-time intelligence cycle metrics</CardDescription>\n                </div>\n                <Button variant=\"outline\" size=\"sm\" className=\"text-xs\">\n                  View Details <ArrowUpRight className=\"w-3 h-3 ml-1\" />\n                </Button>\n              </div>\n            </CardHeader>\n            <CardContent>\n              <SimpleBarChart data={trinityData} />\n            </CardContent>\n          </Card>\n\n          {/* Enhanced Activity Feed */}\n          <Card className=\"border-0\">\n            <CardHeader>\n              <div className=\"flex items-center justify-between\">\n                <div>\n                  <CardTitle className=\"flex items-center\">\n                    <Activity className=\"w-5 h-5 mr-2 text-success\" />\n                    Trinity Activity Stream\n                  </CardTitle>\n                  <CardDescription>Live organizational intelligence flow</CardDescription>\n                </div>\n                <Badge variant=\"outline\" className=\"animate-pulse\">\n                  <div className=\"w-2 h-2 bg-success rounded-full mr-2\" />\n                  Live\n                </Badge>\n              </div>\n            </CardHeader>\n            <CardContent className=\"space-y-4\">\n              <AnimatePresence>\n                {!loading && recentActivities.length === 0 ? (\n                  <div className=\"text-center py-8 text-muted-foreground\">\n                    <Zap className=\"mx-auto h-12 w-12 mb-4\" />\n                    <h3 className=\"text-lg font-semibold\">No Activity Yet</h3>\n                    <p className=\"text-sm\">\n                      Connect a data source or start a new workflow to see your activity stream here.\n                    </p>\n                    <Button variant=\"outline\" size=\"sm\" className=\"mt-4\">\n                      <PlusCircle className=\"mr-2 h-4 w-4\" />\n                      Connect Source\n                    </Button>\n                  </div>\n                ) : (\n                  recentActivities.map((activity, index) => (\n                    <motion.div\n                      key={index}\n                      initial={{ opacity: 0, x: 32 }}\n                      animate={{ opacity: 1, x: 0 }}\n                      exit={{ opacity: 0, x: 32 }}\n                      transition={{ duration: 0.3, delay: index * 0.05 }}\n                      className=\"flex items-start space-x-4 p-4 rounded-xl bg-slate-50/60 dark:bg-background/40 hover:bg-muted/60 dark:hover:bg-slate-700/40 transition-colors\"\n                    >\n                      <div className={`p-2 rounded-lg ${getStatusColor(activity.status) || \"\"}`}>{getTypeIcon(activity.type)}</div>\n                      <div className=\"flex-1\">\n                        <div className=\"font-medium text-slate-900 dark:text-slate-100\">{activity.title}</div>\n                        <div className=\"text-sm text-muted-foreground dark:text-muted-foreground\">{activity.department}</div>\n                      </div>\n                      <div className=\"text-xs text-muted-foreground dark:text-muted-foreground\">{activity.time}</div>\n                    </motion.div>\n                  ))\n                )}\n              </AnimatePresence>\n            </CardContent>\n          </Card>\n        </div>\n\n        {/* Smart Insights Panel */}\n        <Card className=\"border-0\">\n          <CardHeader>\n            <div className=\"flex items-center justify-between\">\n              <div>\n                <CardTitle className=\"flex items-center text-xl\">\n                  <Sparkles className=\"w-6 h-6 mr-3 text-warning\" />\n                  AI-Powered Trinity Insights\n                </CardTitle>\n                <CardDescription>Intelligent recommendations from your organizational data</CardDescription>\n              </div>\n              <Button variant=\"default\" className=\"bg-primary text-white shadow focus:ring-2 focus:ring-primary/50\">\n                <Lightbulb className=\"w-4 h-4 mr-2\" />\n                Generate New Insights\n              </Button>\n            </div>\n          </CardHeader>\n          <CardContent>\n            <div className=\"grid grid-cols-1 md:grid-cols-3 gap-6\">\n              <div className=\"p-6 rounded-xl bg-card/60 dark:bg-background/40 space-y-4\">\n                <div className=\"flex items-center text-primary\">\n                  <Brain className=\"w-5 h-5 mr-2\" />\n                  <span className=\"font-medium\">Think Insight</span>\n                </div>\n                <p className=\"text-sm text-slate-700 dark:text-slate-300\">\n                  Cross-department collaboration has increased 34% this week. Consider expanding innovation sessions.\n                </p>\n              </div>\n              <div className=\"p-6 rounded-xl bg-card/60 dark:bg-background/40 space-y-4\">\n                <div className=\"flex items-center text-secondary\">\n                  <Eye className=\"w-5 h-5 mr-2\" />\n                  <span className=\"font-medium\">See Insight</span>\n                </div>\n                <p className=\"text-sm text-slate-700 dark:text-slate-300\">\n                  Revenue pattern shows 15% uptick correlation with new automation deployment.\n                </p>\n              </div>\n              <div className=\"p-6 rounded-xl bg-card/60 dark:bg-background/40 space-y-4\">\n                <div className=\"flex items-center text-primary\">\n                  <Zap className=\"w-5 h-5 mr-2\" />\n                  <span className=\"font-medium\">Act Insight</span>\n                </div>\n                <p className=\"text-sm text-slate-700 dark:text-slate-300\">\n                  Workflow optimization opportunity detected in customer onboarding process.\n                </p>\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n\n        {/* Widget Visibility Controls */}\n        <div className=\"flex gap-2 mb-4\" role=\"group\" aria-label=\"Widget visibility controls\">\n          {allowedWidgetConfigs.map(w => (\n            <Button\n              key={w.key}\n              variant={w.visible ? 'default' : 'outline'}\n              size=\"sm\"\n              aria-pressed={w.visible}\n              aria-label={`Toggle ${w.label} widget`}\n              onClick={() => handleWidgetToggle(w.key)}\n              tabIndex={0}\n            >\n              {w.visible ? <EyeIcon className=\"w-4 h-4 mr-1\" /> : <EyeOff className=\"w-4 h-4 mr-1\" />}\n              {w.label}\n            </Button>\n          ))}\n        </div>\n\n        {/* Recents */}\n        <ErrorBoundary>\n          <Recents />\n        </ErrorBoundary>\n\n        {/* Pins */}\n        <ErrorBoundary>\n          <Pins />\n        </ErrorBoundary>\n\n        {/* Quick Actions Panel */}\n        <ErrorBoundary>\n          <QuickActionsPanel />\n        </ErrorBoundary>\n      </div>\n    </div>\n  );\n};\n\nexport default EnhancedDashboard;","usedDeprecatedRules":[]},{"filePath":"/home/vonj/Github/Nexus/src/components/dashboard/KpiCard.test.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/vonj/Github/Nexus/src/components/dashboard/KpiCard.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/vonj/Github/Nexus/src/components/dashboard/ModelManagementDashboard.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'Tabs' is defined but never used.","line":4,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":4,"endColumn":14},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'TabsContent' is defined but never used.","line":4,"column":16,"nodeType":null,"messageId":"unusedVar","endLine":4,"endColumn":27},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'TabsList' is defined but never used.","line":4,"column":29,"nodeType":null,"messageId":"unusedVar","endLine":4,"endColumn":37},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'TabsTrigger' is defined but never used.","line":4,"column":39,"nodeType":null,"messageId":"unusedVar","endLine":4,"endColumn":50},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'TrendingDown' is defined but never used.","line":27,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":27,"endColumn":15},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'Clock' is defined but never used.","line":28,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":28,"endColumn":8},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'XCircle' is defined but never used.","line":30,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":30,"endColumn":10},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'user' is assigned a value but never used.","line":46,"column":11,"nodeType":null,"messageId":"unusedVar","endLine":46,"endColumn":15},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'isLoading' is assigned a value but never used.","line":49,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":49,"endColumn":19},{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has a missing dependency: 'fetchReport'. Either include it or remove the dependency array.","line":54,"column":6,"nodeType":"ArrayExpression","endLine":54,"endColumn":17,"suggestions":[{"desc":"Update the dependencies array to be: [fetchReport, timeRange]","fix":{"range":[1356,1367],"text":"[fetchReport, timeRange]"}}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'error' is defined but never used.","line":61,"column":14,"nodeType":null,"messageId":"unusedVar","endLine":61,"endColumn":19}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":11,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState, useEffect } from 'react';\nimport { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/Card';\nimport { Button } from '@/components/ui/Button';\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from '@/components/ui/Tabs';\nimport { useToast } from '@/components/ui/Toast';\nimport { useAuth } from '@/contexts/AuthContext';\nimport { modelManager } from '@/lib/ai/modelManager';\nimport {\n  BarChart,\n  Bar,\n  XAxis,\n  YAxis,\n  CartesianGrid,\n  Tooltip,\n  ResponsiveContainer,\n  LineChart,\n  Line,\n  PieChart,\n  Pie,\n  Cell\n} from 'recharts';\nimport {\n  DollarSign,\n  Activity,\n  AlertCircle,\n  TrendingUp,\n  TrendingDown,\n  Clock,\n  CheckCircle2,\n  XCircle\n} from 'lucide-react';\nimport { chartColors } from '@/lib/chartColors';\n\ninterface ModelReport {\n  monthlyCost: number;\n  modelPerformance: Record<string, {\n    successRate: number;\n    averageLatency: number;\n    averageCost: number;\n    errorCount: number;\n  }>;\n  suggestions: string[];\n}\n\nexport const ModelManagementDashboard: React.FC = () => {\n  const { user } = useAuth();\n  const { showToast } = useToast();\n  const [report, setReport] = useState<ModelReport | null>(null);\n  const [isLoading, setIsLoading] = useState(true);\n  const [timeRange, setTimeRange] = useState<'day' | 'week' | 'month'>('month');\n\n  useEffect(() => {\n    fetchReport();\n  }, [timeRange]);\n\n  const fetchReport = async () => {\n    try {\n      setIsLoading(true);\n      const data = await modelManager.generateReport();\n      setReport(data);\n    } catch (error) {\n      showToast({\n        title: 'Error',\n        description: 'Failed to load model management data',\n        type: 'error'\n      });\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  const getCostEfficiency = () => {\n    if (!report) return 0;\n    const totalCost = report.monthlyCost;\n    const totalSuccess = Object.values(report.modelPerformance).reduce(\n      (sum, perf) => sum + (perf.successRate * 100),\n      0\n    );\n    return totalSuccess / totalCost;\n  };\n\n  const getPerformanceData = () => {\n    if (!report) return [];\n    return Object.entries(report.modelPerformance).map(([model, perf]) => ({\n      model,\n      successRate: perf.successRate * 100,\n      averageLatency: perf.averageLatency,\n      averageCost: perf.averageCost,\n      errorCount: perf.errorCount\n    }));\n  };\n\n  const COLOR_PALETTE = chartColors.categorical;\n\n  return (\n    <div className=\"space-y-6 p-6\">\n      {/* Header */}\n      <div className=\"flex justify-between items-center\">\n        <h1 className=\"text-2xl font-bold\">Model Management</h1>\n        <div className=\"flex space-x-4\">\n          <Button variant=\"outline\" onClick={() => setTimeRange('day')}>\n            Day\n          </Button>\n          <Button variant=\"outline\" onClick={() => setTimeRange('week')}>\n            Week\n          </Button>\n          <Button variant=\"outline\" onClick={() => setTimeRange('month')}>\n            Month\n          </Button>\n        </div>\n      </div>\n\n      {/* Stats Overview */}\n      <div className=\"grid grid-cols-1 md:grid-cols-4 gap-4\">\n        <Card>\n          <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n            <CardTitle className=\"text-sm font-medium\">Monthly Cost</CardTitle>\n            <DollarSign className=\"h-4 w-4 text-muted-foreground\" />\n          </CardHeader>\n          <CardContent>\n            <div className=\"text-2xl font-bold\">\n              ${report?.monthlyCost.toFixed(2)}\n            </div>\n            <p className=\"text-xs text-muted-foreground\">\n              Current month\n            </p>\n          </CardContent>\n        </Card>\n        <Card>\n          <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n            <CardTitle className=\"text-sm font-medium\">Cost Efficiency</CardTitle>\n            <Activity className=\"h-4 w-4 text-muted-foreground\" />\n          </CardHeader>\n          <CardContent>\n            <div className=\"text-2xl font-bold\">\n              {getCostEfficiency().toFixed(2)}%\n            </div>\n            <p className=\"text-xs text-muted-foreground\">\n              Success rate per dollar\n            </p>\n          </CardContent>\n        </Card>\n        <Card>\n          <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n            <CardTitle className=\"text-sm font-medium\">Active Models</CardTitle>\n            <CheckCircle2 className=\"h-4 w-4 text-muted-foreground\" />\n          </CardHeader>\n          <CardContent>\n            <div className=\"text-2xl font-bold\">\n              {report ? Object.keys(report.modelPerformance).length : 0}\n            </div>\n            <p className=\"text-xs text-muted-foreground\">\n              Currently in use\n            </p>\n          </CardContent>\n        </Card>\n        <Card>\n          <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n            <CardTitle className=\"text-sm font-medium\">Error Rate</CardTitle>\n            <AlertCircle className=\"h-4 w-4 text-muted-foreground\" />\n          </CardHeader>\n          <CardContent>\n            <div className=\"text-2xl font-bold\">\n              {report\n                ? (\n                    Object.values(report.modelPerformance).reduce(\n                      (sum, perf) => sum + perf.errorCount,\n                      0\n                    ) /\n                    Object.values(report.modelPerformance).length\n                  ).toFixed(1)\n                : 0}\n            </div>\n            <p className=\"text-xs text-muted-foreground\">\n              Average per model\n            </p>\n          </CardContent>\n        </Card>\n      </div>\n\n      {/* Main Content */}\n      <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-6\">\n        {/* Performance Chart */}\n        <Card>\n          <CardHeader>\n            <CardTitle>Model Performance</CardTitle>\n          </CardHeader>\n          <CardContent>\n            <div className=\"h-[300px]\">\n              <ResponsiveContainer width=\"100%\" height=\"100%\">\n                <BarChart data={getPerformanceData()}>\n                  <CartesianGrid strokeDasharray=\"3 3\" />\n                  <XAxis dataKey=\"model\" />\n                  <YAxis />\n                  <Tooltip />\n                  <Bar dataKey=\"successRate\" fill={chartColors.primary} name=\"Success Rate (%)\" />\n                  <Bar dataKey=\"errorCount\" fill={chartColors.warning} name=\"Error Count\" />\n                </BarChart>\n              </ResponsiveContainer>\n            </div>\n          </CardContent>\n        </Card>\n\n        {/* Cost Distribution */}\n        <Card>\n          <CardHeader>\n            <CardTitle>Cost Distribution</CardTitle>\n          </CardHeader>\n          <CardContent>\n            <div className=\"h-[300px]\">\n              <ResponsiveContainer width=\"100%\" height=\"100%\">\n                <PieChart>\n                  <Pie\n                    data={getPerformanceData()}\n                    cx=\"50%\"\n                    cy=\"50%\"\n                    innerRadius={60}\n                    outerRadius={80}\n                    paddingAngle={5}\n                    dataKey=\"averageCost\"\n                    nameKey=\"model\"\n                  >\n                    {getPerformanceData().map((_, index) => (\n                      <Cell key={`cell-${index}`} fill={COLOR_PALETTE[index % COLOR_PALETTE.length]} />\n                    ))}\n                  </Pie>\n                  <Tooltip />\n                </PieChart>\n              </ResponsiveContainer>\n            </div>\n          </CardContent>\n        </Card>\n\n        {/* Latency Trends */}\n        <Card>\n          <CardHeader>\n            <CardTitle>Latency Trends</CardTitle>\n          </CardHeader>\n          <CardContent>\n            <div className=\"h-[300px]\">\n              <ResponsiveContainer width=\"100%\" height=\"100%\">\n                <LineChart data={getPerformanceData()}>\n                  <CartesianGrid strokeDasharray=\"3 3\" />\n                  <XAxis dataKey=\"model\" />\n                  <YAxis />\n                  <Tooltip />\n                  <Line\n                    type=\"monotone\"\n                    dataKey=\"averageLatency\"\n                    stroke={chartColors.accent}\n                    name=\"Average Latency (ms)\"\n                  />\n                </LineChart>\n              </ResponsiveContainer>\n            </div>\n          </CardContent>\n        </Card>\n\n        {/* Optimization Suggestions */}\n        <Card>\n          <CardHeader>\n            <CardTitle>Optimization Suggestions</CardTitle>\n          </CardHeader>\n          <CardContent>\n            <div className=\"space-y-4\">\n              {report?.suggestions.map((suggestion, index) => (\n                <div\n                  key={index}\n                  className=\"p-3 border rounded-lg flex items-start space-x-2\"\n                >\n                  {suggestion.includes('budget') ? (\n                    <DollarSign className=\"w-4 h-4 mt-1 text-warning\" />\n                  ) : suggestion.includes('error') ? (\n                    <AlertCircle className=\"w-4 h-4 mt-1 text-destructive\" />\n                  ) : (\n                    <TrendingUp className=\"w-4 h-4 mt-1 text-success\" />\n                  )}\n                  <p className=\"text-sm\">{suggestion}</p>\n                </div>\n              ))}\n            </div>\n          </CardContent>\n        </Card>\n      </div>\n    </div>\n  );\n}; ","usedDeprecatedRules":[]},{"filePath":"/home/vonj/Github/Nexus/src/components/dashboard/MultiAgentPanel.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'useState' is defined but never used.","line":1,"column":17,"nodeType":null,"messageId":"unusedVar","endLine":1,"endColumn":25}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState, useEffect } from 'react';\nimport PropTypes from 'prop-types';\nimport { Sparkles, X } from 'lucide-react';\nimport { OrganizationalChatPanel } from '../ai/OrganizationalChatPanel';\n\n/**\n * @interface MultiAgentPanelProps\n * @description Props for the MultiAgentPanel component.\n * @property {boolean} [open] - Whether the panel is open (default: true).\n * @property {() => void} [onClose] - Optional close handler.\n */\nexport interface MultiAgentPanelProps {\n  open?: boolean;\n  onClose?: () => void;\n}\n\n/**\n * @name MultiAgentPanel\n * @description Clean, Microsoft Copilot-inspired AI chat panel with organizational hierarchy\n * @param {MultiAgentPanelProps} props\n * @returns {JSX.Element}\n */\nconst MultiAgentPanel: React.FC<MultiAgentPanelProps> = React.memo(({ open = true, onClose }) => {\n  // Prevent body scroll when modal is open\n  useEffect(() => {\n    if (open) {\n      document.body.style.overflow = 'hidden';\n      return () => {\n        document.body.style.overflow = 'unset';\n      };\n    }\n  }, [open]);\n\n  if (!open) return null;\n\n  const handleModalScroll = (e: React.UIEvent) => {\n    // Prevent scroll events from bubbling to the background page\n    e.stopPropagation();\n  };\n\n  const handleModalKeyDown = (e: React.KeyboardEvent) => {\n    // Prevent keyboard scroll events from bubbling\n    if (e.key === 'ArrowUp' || e.key === 'ArrowDown' || e.key === 'PageUp' || e.key === 'PageDown') {\n      e.stopPropagation();\n    }\n    // Close on Escape key\n    if (e.key === 'Escape' && onClose) {\n      onClose();\n    }\n  };\n\n  // Prevent clicks on the modal content from closing the modal\n  const handleModalClick = (e: React.MouseEvent) => {\n    e.stopPropagation();\n  };\n\n  return (\n    <aside\n      className={`fixed right-0 top-0 h-full w-full max-w-lg bg-background shadow-2xl z-drawer flex flex-col transition-transform duration-300 ${\n        open ? 'translate-x-0' : 'translate-x-full'\n      }`}\n      role=\"dialog\"\n      aria-modal=\"true\"\n      aria-label=\"AI Assistant Panel\"\n      onScroll={handleModalScroll}\n      onKeyDown={handleModalKeyDown}\n      onClick={handleModalClick}\n      style={{ overscrollBehavior: 'contain' }}\n    >\n      {/* Clean Header - Copilot Style */}\n      <div className=\"flex items-center justify-between px-6 py-4 border-b border-border bg-background\">\n        <div className=\"flex items-center gap-4\">\n          <div className=\"w-8 h-8 rounded-lg bg-gradient-to-br from-blue-600 to-purple-600 flex items-center justify-center\">\n            <Sparkles className=\"w-4 h-4 text-primary-foreground\" />\n          </div>\n          <div>\n            <h2 className=\"text-lg font-semibold text-foreground\">Nex</h2>\n            <p className=\"text-xs text-muted-foreground\">Your business AI assistant</p>\n          </div>\n        </div>\n        {onClose && (\n          <button\n            onClick={onClose}\n            className=\"p-4 rounded-lg bg-transparent hover:bg-muted transition-colors group\"\n            aria-label=\"Close chat\"\n          >\n            <X className=\"w-5 h-5 text-muted-foreground group-hover:text-foreground\" />\n          </button>\n        )}\n      </div>\n      \n      {/* Organizational Chat Content */}\n      <div className=\"flex-1 bg-background overflow-auto\">\n        <OrganizationalChatPanel onClose={onClose} />\n      </div>\n    </aside>\n  );\n});\n\nMultiAgentPanel.displayName = 'MultiAgentPanel';\n\nMultiAgentPanel.propTypes = {\n  open: PropTypes.bool,\n  onClose: PropTypes.func,\n};\n\nexport default MultiAgentPanel; ","usedDeprecatedRules":[]},{"filePath":"/home/vonj/Github/Nexus/src/components/dashboard/OrganizationalHealthScore.tsx","messages":[{"ruleId":"no-restricted-syntax","severity":1,"message":"Use design tokens instead of hardcoded text colors (e.g., text-foreground, text-muted-foreground)","line":78,"column":16,"nodeType":"Literal","messageId":"restrictedSyntax","endLine":78,"endColumn":135}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React from 'react';\nimport { Card, CardContent } from '@/components/ui/Card';\nimport { Badge } from '@/components/ui/Badge';\nimport { TrendingUp, TrendingDown, Minus } from 'lucide-react';\n\ninterface HealthMetric {\n  label: string;\n  value: string;\n  trend: 'up' | 'down' | 'stable';\n  trendValue: string;\n  status: 'excellent' | 'good' | 'warning' | 'critical';\n}\n\ninterface OrganizationalHealthScoreProps {\n  className?: string;\n}\n\n/**\n * OrganizationalHealthScore displays the top-level organizational health metrics\n * providing executives with a quick overview of business performance across all departments\n */\nconst OrganizationalHealthScore: React.FC<OrganizationalHealthScoreProps> = ({ \n  className = '' \n}) => {\n  const overallScore = 94;\n  \n  const healthMetrics: HealthMetric[] = [\n    {\n      label: 'Revenue Flow',\n      value: '$2.4M/month',\n      trend: 'up',\n      trendValue: '+12%',\n      status: 'excellent'\n    },\n    {\n      label: 'Operations',\n      value: '98% uptime',\n      trend: 'up',\n      trendValue: '2.1s response',\n      status: 'excellent'\n    },\n    {\n      label: 'People',\n      value: '89% satisfaction',\n      trend: 'stable',\n      trendValue: '5% turnover',\n      status: 'good'\n    },\n    {\n      label: 'Strategic',\n      value: '78% on track',\n      trend: 'up',\n      trendValue: 'Q2 targets',\n      status: 'good'\n    }\n  ];\n\n  const getTrendIcon = (trend: string) => {\n    switch (trend) {\n      case 'up':\n        return <TrendingUp className=\"h-3 w-3 text-emerald-500\" />;\n      case 'down':\n        return <TrendingDown className=\"h-3 w-3 text-destructive\" />;\n      default:\n        return <Minus className=\"h-3 w-3 text-amber-500\" />;\n    }\n  };\n\n  const getStatusColor = (status: string) => {\n    switch (status) {\n      case 'excellent':\n        return 'bg-emerald-100 text-emerald-800 border-emerald-200 dark:bg-emerald-900/20 dark:text-emerald-300 dark:border-emerald-800';\n      case 'good':\n        return 'bg-primary/10 text-primary border-border dark:bg-primary/20/20 dark:text-primary dark:border-primary/80';\n      case 'warning':\n        return 'bg-amber-100 text-amber-800 border-amber-200 dark:bg-amber-900/20 dark:text-amber-300 dark:border-amber-800';\n      default:\n        return 'bg-destructive/10 text-destructive border-destructive/20 dark:bg-destructive/20 dark:text-red-300 dark:border-red-800';\n    }\n  };\n\n  const getScoreColor = () => {\n    if (overallScore >= 90) return 'text-success dark:text-emerald-400';\n    if (overallScore >= 75) return 'text-primary dark:text-primary';\n    if (overallScore >= 60) return 'text-warning dark:text-amber-400';\n    return 'text-destructive dark:text-destructive';\n  };\n\n  return (\n    <Card className={className}>\n      <CardContent className=\"p-6\">\n        {/* Header */}\n        <div className=\"flex items-center justify-between mb-6\">\n          <div>\n            <h2 className=\"text-2xl font-bold text-foreground dark:text-primary-foreground\">\n              Organizational Health Score\n            </h2>\n            <p className=\"text-sm text-muted-foreground dark:text-muted-foreground mt-1\">\n              Real-time business intelligence across all departments\n            </p>\n          </div>\n          <div className=\"text-right\">\n            <div className={`text-4xl font-bold ${getScoreColor()}`}>\n              {overallScore}%\n            </div>\n            <Badge variant=\"outline\" className=\"mt-1\">\n              Excellent Health\n            </Badge>\n          </div>\n        </div>\n\n        {/* Metrics Grid */}\n        <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-4\">\n          {healthMetrics.map((metric, index) => (\n            <div\n              key={index}\n              className=\"rounded-lg p-4 border border-border/50\"\n            >\n              <div className=\"flex items-center justify-between mb-2\">\n                <span className=\"text-sm font-medium text-muted-foreground dark:text-muted-foreground\">\n                  {metric.label}\n                </span>\n                {getTrendIcon(metric.trend)}\n              </div>\n              \n              <div className=\"space-y-1\">\n                <div className=\"text-lg font-bold text-foreground dark:text-primary-foreground\">\n                  {metric.value}\n                </div>\n                <div className=\"flex items-center justify-between\">\n                  <span className=\"text-xs text-muted-foreground dark:text-muted-foreground\">\n                    {metric.trendValue}\n                  </span>\n                  <Badge \n                    variant=\"outline\" \n                    className={`text-xs ${getStatusColor(metric.status)}`}\n                  >\n                    {metric.status}\n                  </Badge>\n                </div>\n              </div>\n            </div>\n          ))}\n        </div>\n\n        {/* Quick Actions */}\n        <div className=\"mt-6 flex flex-wrap gap-2\">\n          <Badge variant=\"secondary\">\n            🔵 THINK: Cross-pattern analysis active\n          </Badge>\n          <Badge variant=\"secondary\">\n            🟣 SEE: Real-time monitoring engaged\n          </Badge>\n          <Badge variant=\"secondary\">\n            🟠 ACT: 3 optimization opportunities detected\n          </Badge>\n        </div>\n      </CardContent>\n    </Card>\n  );\n};\n\nexport default OrganizationalHealthScore; ","usedDeprecatedRules":[]},{"filePath":"/home/vonj/Github/Nexus/src/components/dashboard/Pins.tsx","messages":[{"ruleId":"no-restricted-syntax","severity":1,"message":"Use design tokens instead of hardcoded colors (e.g., bg-primary, bg-secondary)","line":49,"column":24,"nodeType":"Literal","messageId":"restrictedSyntax","endLine":49,"endColumn":74},{"ruleId":"no-restricted-syntax","severity":1,"message":"Use design tokens instead of hardcoded colors (e.g., bg-primary, bg-secondary)","line":50,"column":24,"nodeType":"Literal","messageId":"restrictedSyntax","endLine":50,"endColumn":69},{"ruleId":"no-restricted-syntax","severity":1,"message":"Use design tokens instead of hardcoded text colors (e.g., text-foreground, text-muted-foreground)","line":56,"column":27,"nodeType":"Literal","messageId":"restrictedSyntax","endLine":56,"endColumn":45},{"ruleId":"no-restricted-syntax","severity":1,"message":"Use design tokens instead of hardcoded text colors (e.g., text-foreground, text-muted-foreground)","line":61,"column":22,"nodeType":"Literal","messageId":"restrictedSyntax","endLine":61,"endColumn":53},{"ruleId":"no-restricted-syntax","severity":1,"message":"Use design tokens instead of hardcoded text colors (e.g., text-foreground, text-muted-foreground)","line":64,"column":21,"nodeType":"Literal","messageId":"restrictedSyntax","endLine":64,"endColumn":59},{"ruleId":"no-restricted-syntax","severity":1,"message":"Use design tokens instead of hardcoded text colors (e.g., text-foreground, text-muted-foreground)","line":79,"column":29,"nodeType":"Literal","messageId":"restrictedSyntax","endLine":79,"endColumn":57},{"ruleId":"no-restricted-syntax","severity":1,"message":"Use design tokens instead of hardcoded text colors (e.g., text-foreground, text-muted-foreground)","line":84,"column":23,"nodeType":"Literal","messageId":"restrictedSyntax","endLine":84,"endColumn":59}],"suppressedMessages":[{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has a missing dependency: 'logWidgetEvent'. Either include it or remove the dependency array.","line":35,"column":6,"nodeType":"ArrayExpression","endLine":35,"endColumn":8,"suggestions":[{"desc":"Update the dependencies array to be: [logWidgetEvent]","fix":{"range":[1039,1041],"text":"[logWidgetEvent]"}}],"suppressions":[{"kind":"directive","justification":""}]}],"errorCount":0,"fatalErrorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { useQuery, useQueryClient } from \"@tanstack/react-query\";\nimport { useRealtimeTable } from \"@/hooks/useRealtimeTable\";\nimport { supabase } from \"@/lib/core/supabase\";\nimport type { PostgrestError } from \"@supabase/supabase-js\";\nimport { formatDistanceToNow } from \"date-fns\";\nimport { useWidgetAnalytics } from \"@/hooks/useWidgetAnalytics\";\nimport { useEffect } from \"react\";\n\ntype PinItem = {\n  id: string;\n  userId: string;\n  entityType: string;\n  entityId: string;\n  pinnedAt: string;\n};\n\nasync function fetchPins(): Promise<PinItem[]> {\n  const { data, error }: { data: PinItem[] | null; error: PostgrestError | null } = await supabase\n    .from(\"Pin\")\n    .select(\"*\")\n    .order(\"pinnedAt\", { ascending: false })\n    .limit(20);\n  if (error) throw error;\n  return data ?? [];\n}\n\nexport function Pins() {\n  const queryClient = useQueryClient();\n  const { logWidgetEvent } = useWidgetAnalytics();\n  const widgetId = \"pins-widget\";\n\n  useEffect(() => {\n    logWidgetEvent(widgetId, \"view\");\n    // eslint-disable-next-line\n  }, []);\n\n  const { data, isLoading, error } = useQuery({\n    queryKey: [\"pins\"],\n    queryFn: fetchPins,\n  });\n\n  useRealtimeTable(\"Pin\", () => {\n    queryClient.invalidateQueries({ queryKey: [\"pins\"] });\n  });\n\n  if (isLoading) {\n    return (\n      <div className=\"p-4\">\n        <div className=\"animate-pulse h-6 bg-gray-200 rounded w-1/2 mb-2\" />\n        <div className=\"animate-pulse h-6 bg-gray-200 rounded w-1/3\" />\n      </div>\n    );\n  }\n\n  if (error) {\n    return <div className=\"text-red-600 p-4\">Error loading pins. Please try again.</div>;\n  }\n\n  if (!data || data.length === 0) {\n    return (\n      <div className=\"p-4 text-center text-gray-500\">\n        No pinned items.\n        <button\n          className=\"ml-2 text-xs text-blue-600 underline\"\n          onClick={() => logWidgetEvent(widgetId, \"dismiss\")}\n        >\n          Dismiss\n        </button>\n      </div>\n    );\n  }\n\n  return (\n    <ul className=\"divide-y divide-gray-200\">\n      {data.map(item => (\n        <li key={item.id} className=\"flex items-center justify-between py-2\">\n          <span>\n            {item.entityType}: {item.entityId}\n            <span className=\"ml-2 text-xs text-gray-400\">\n              Pinned {formatDistanceToNow(new Date(item.pinnedAt))} ago\n            </span>\n          </span>\n          <button\n            className=\"ml-4 text-blue-600 hover:underline\"\n            onClick={() => logWidgetEvent(widgetId, \"click\", { itemId: item.id })}\n          >\n            Open\n          </button>\n        </li>\n      ))}\n    </ul>\n  );\n} ","usedDeprecatedRules":[]},{"filePath":"/home/vonj/Github/Nexus/src/components/dashboard/QuickActionsPanel.tsx","messages":[{"ruleId":"no-restricted-syntax","severity":1,"message":"Use design tokens instead of hardcoded text colors (e.g., text-foreground, text-muted-foreground)","line":77,"column":22,"nodeType":"Literal","messageId":"restrictedSyntax","endLine":77,"endColumn":53},{"ruleId":"no-restricted-syntax","severity":1,"message":"Use design tokens instead of hardcoded colors (e.g., bg-primary, bg-secondary)","line":86,"column":21,"nodeType":"Literal","messageId":"restrictedSyntax","endLine":86,"endColumn":157}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React from \"react\";\nimport { useNavigate } from \"react-router-dom\";\n\n// Local starter config for demonstration\nexport type QuickActionType = 'global' | 'department' | 'page';\nexport type HandlerType = 'crud_create' | 'crud_read' | 'crud_update' | 'crud_delete' | 'ai_chat' | 'rag' | 'custom';\n\nexport interface QuickAction {\n  id: string;\n  label: string;\n  icon: string;\n  type: QuickActionType;\n  handlerType: HandlerType;\n  entity?: string;\n  department?: string;\n  page?: string;\n  permission?: string;\n  description?: string;\n}\n\nconst quickActions: QuickAction[] = [\n  {\n    id: 'ai-chat',\n    label: 'Chat with AI',\n    icon: '💬',\n    type: 'global',\n    handlerType: 'ai_chat',\n    permission: 'all',\n    description: 'Ask the AI assistant anything or use RAG features.',\n  },\n  {\n    id: 'view-exec-notes',\n    label: 'View Executive Notes',\n    icon: '📝',\n    type: 'global',\n    handlerType: 'crud_read',\n    entity: 'Note',\n    permission: 'all',\n    description: 'View notes from your executive assistant.',\n  },\n];\n\n// Placeholder user and context\nconst user = { permissions: ['all'], department: 'Sales' };\nconst department = 'Sales';\nconst page = 'Dashboard';\n\nfunction handleQuickAction(action: QuickAction, { navigate }: { navigate: ReturnType<typeof useNavigate> }) {\n  if (action.handlerType === 'ai_chat') {\n    navigate('/ai-chat');\n  } else if (action.handlerType === 'crud_read' && action.entity === 'Note') {\n    navigate('/notes');\n  } else {\n    alert(`Action: ${action.label}`);\n  }\n}\n\nexport const QuickActionsPanel: React.FC = () => {\n  const navigate = useNavigate();\n\n  // Filter actions by user, department, and page\n  const availableActions = quickActions.filter((action: QuickAction) => {\n    if (action.permission && action.permission !== \"all\" && !user?.permissions?.includes(action.permission)) {\n      return false;\n    }\n    if (action.type === \"department\" && action.department && action.department !== department) {\n      return false;\n    }\n    if (action.type === \"page\" && action.page && action.page !== page) {\n      return false;\n    }\n    return true;\n  });\n\n  if (availableActions.length === 0) {\n    return (\n      <div className=\"p-4 text-center text-gray-500\">No quick actions available for your current context.</div>\n    );\n  }\n\n  return (\n    <div className=\"flex flex-wrap gap-3 p-4 bg-white rounded-lg shadow\">\n      {availableActions.map((action: QuickAction) => (\n        <button\n          key={action.id}\n          className=\"flex items-center gap-2 px-4 py-2 bg-blue-600 text-white rounded hover:bg-blue-700 focus:outline-none focus:ring-2 focus:ring-blue-400\"\n          aria-label={action.label}\n          onClick={() => handleQuickAction(action, { navigate })}\n        >\n          <span aria-hidden=\"true\">{action.icon}</span>\n          <span>{action.label}</span>\n        </button>\n      ))}\n    </div>\n  );\n}; ","usedDeprecatedRules":[]},{"filePath":"/home/vonj/Github/Nexus/src/components/dashboard/QuickLaunchTiles.test.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/vonj/Github/Nexus/src/components/dashboard/QuickLaunchTiles.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'Card' is defined but never used.","line":2,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":2,"endColumn":14}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React from 'react';\nimport { Card } from '@/components/ui/Card';\nimport PropTypes from 'prop-types';\n\nexport interface QuickLaunchAction {\n  label: string;\n  icon?: React.ReactNode;\n  onClick: () => void;\n  loading?: boolean;\n}\n\n/**\n * @name QuickLaunchTiles\n * @description Displays a grid of quick-launch action tiles with consistent light styling.\n * @param {object} props\n * @param {QuickLaunchAction[]} props.actions - The actions to display as tiles.\n * @returns {JSX.Element}\n */\nconst QuickLaunchTiles: React.FC<{ actions: QuickLaunchAction[] }> = ({ actions }) => {\n  return (\n    <div className=\"grid grid-cols-2 sm:grid-cols-3 lg:grid-cols-6 gap-4\">\n      {actions.map((action) => (\n        <button\n          key={action.label}\n          onClick={action.onClick}\n          className=\"flex flex-col items-center p-6 rounded-lg bg-background border border-border hover:border-primary hover:bg-primary/5 hover:shadow-md transition-all duration-200 group\"\n          aria-label={action.label}\n          disabled={action.loading}\n        >\n          <div className=\"p-4 rounded-lg bg-primary/10 text-primary group-hover:bg-primary/20 transition-all duration-200 mb-3\">\n            {action.icon && <span className=\"text-lg\">{action.icon}</span>}\n          </div>\n          <span className=\"text-sm font-medium text-foreground group-hover:text-primary transition-colors duration-200\">\n            {action.label}\n          </span>\n        </button>\n      ))}\n    </div>\n  );\n};\n\nQuickLaunchTiles.propTypes = {\n  actions: PropTypes.arrayOf(\n    PropTypes.shape({\n      label: PropTypes.string.isRequired,\n      icon: PropTypes.node,\n      onClick: PropTypes.func.isRequired,\n      loading: PropTypes.bool,\n    })\n  ).isRequired,\n};\n\nexport default QuickLaunchTiles; ","usedDeprecatedRules":[]},{"filePath":"/home/vonj/Github/Nexus/src/components/dashboard/Recents.tsx","messages":[{"ruleId":"no-restricted-syntax","severity":1,"message":"Use design tokens instead of hardcoded colors (e.g., bg-primary, bg-secondary)","line":49,"column":24,"nodeType":"Literal","messageId":"restrictedSyntax","endLine":49,"endColumn":74},{"ruleId":"no-restricted-syntax","severity":1,"message":"Use design tokens instead of hardcoded colors (e.g., bg-primary, bg-secondary)","line":50,"column":24,"nodeType":"Literal","messageId":"restrictedSyntax","endLine":50,"endColumn":69},{"ruleId":"no-restricted-syntax","severity":1,"message":"Use design tokens instead of hardcoded text colors (e.g., text-foreground, text-muted-foreground)","line":56,"column":27,"nodeType":"Literal","messageId":"restrictedSyntax","endLine":56,"endColumn":45},{"ruleId":"no-restricted-syntax","severity":1,"message":"Use design tokens instead of hardcoded text colors (e.g., text-foreground, text-muted-foreground)","line":61,"column":22,"nodeType":"Literal","messageId":"restrictedSyntax","endLine":61,"endColumn":53},{"ruleId":"no-restricted-syntax","severity":1,"message":"Use design tokens instead of hardcoded text colors (e.g., text-foreground, text-muted-foreground)","line":64,"column":21,"nodeType":"Literal","messageId":"restrictedSyntax","endLine":64,"endColumn":59},{"ruleId":"no-restricted-syntax","severity":1,"message":"Use design tokens instead of hardcoded text colors (e.g., text-foreground, text-muted-foreground)","line":79,"column":29,"nodeType":"Literal","messageId":"restrictedSyntax","endLine":79,"endColumn":57},{"ruleId":"no-restricted-syntax","severity":1,"message":"Use design tokens instead of hardcoded text colors (e.g., text-foreground, text-muted-foreground)","line":84,"column":23,"nodeType":"Literal","messageId":"restrictedSyntax","endLine":84,"endColumn":59}],"suppressedMessages":[{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has a missing dependency: 'logWidgetEvent'. Either include it or remove the dependency array.","line":35,"column":6,"nodeType":"ArrayExpression","endLine":35,"endColumn":8,"suggestions":[{"desc":"Update the dependencies array to be: [logWidgetEvent]","fix":{"range":[1060,1062],"text":"[logWidgetEvent]"}}],"suppressions":[{"kind":"directive","justification":""}]}],"errorCount":0,"fatalErrorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { useQuery, useQueryClient } from \"@tanstack/react-query\";\nimport { useRealtimeTable } from \"@/hooks/useRealtimeTable\";\nimport { supabase } from \"@/lib/core/supabase\";\nimport type { PostgrestError } from \"@supabase/supabase-js\";\nimport { formatDistanceToNow } from \"date-fns\";\nimport { useWidgetAnalytics } from \"@/hooks/useWidgetAnalytics\";\nimport { useEffect } from \"react\";\n\ntype RecentItem = {\n  id: string;\n  userId: string;\n  entityType: string;\n  entityId: string;\n  viewedAt: string;\n};\n\nasync function fetchRecents(): Promise<RecentItem[]> {\n  const { data, error }: { data: RecentItem[] | null; error: PostgrestError | null } = await supabase\n    .from(\"Recent\")\n    .select(\"*\")\n    .order(\"viewedAt\", { ascending: false })\n    .limit(20);\n  if (error) throw error;\n  return data ?? [];\n}\n\nexport function Recents() {\n  const queryClient = useQueryClient();\n  const { logWidgetEvent } = useWidgetAnalytics();\n  const widgetId = \"recents-widget\";\n\n  useEffect(() => {\n    logWidgetEvent(widgetId, \"view\");\n    // eslint-disable-next-line\n  }, []);\n\n  const { data, isLoading, error } = useQuery({\n    queryKey: [\"recents\"],\n    queryFn: fetchRecents,\n  });\n\n  useRealtimeTable(\"Recent\", () => {\n    queryClient.invalidateQueries({ queryKey: [\"recents\"] });\n  });\n\n  if (isLoading) {\n    return (\n      <div className=\"p-4\">\n        <div className=\"animate-pulse h-6 bg-gray-200 rounded w-1/2 mb-2\" />\n        <div className=\"animate-pulse h-6 bg-gray-200 rounded w-1/3\" />\n      </div>\n    );\n  }\n\n  if (error) {\n    return <div className=\"text-red-600 p-4\">Error loading recents. Please try again.</div>;\n  }\n\n  if (!data || data.length === 0) {\n    return (\n      <div className=\"p-4 text-center text-gray-500\">\n        No recent items.\n        <button\n          className=\"ml-2 text-xs text-blue-600 underline\"\n          onClick={() => logWidgetEvent(widgetId, \"dismiss\")}\n        >\n          Dismiss\n        </button>\n      </div>\n    );\n  }\n\n  return (\n    <ul className=\"divide-y divide-gray-200\">\n      {data.map(item => (\n        <li key={item.id} className=\"flex items-center justify-between py-2\">\n          <span>\n            {item.entityType}: {item.entityId}\n            <span className=\"ml-2 text-xs text-gray-400\">\n              Viewed {formatDistanceToNow(new Date(item.viewedAt))} ago\n            </span>\n          </span>\n          <button\n            className=\"ml-4 text-blue-600 hover:underline\"\n            onClick={() => logWidgetEvent(widgetId, \"click\", { itemId: item.id })}\n          >\n            Open\n          </button>\n        </li>\n      ))}\n    </ul>\n  );\n} ","usedDeprecatedRules":[]},{"filePath":"/home/vonj/Github/Nexus/src/components/dashboard/SecurityDashboard.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'Badge' is defined but never used.","line":14,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":14,"endColumn":8},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'Lock' is defined but never used.","line":22,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":22,"endColumn":7},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'RefreshCw' is defined but never used.","line":22,"column":9,"nodeType":null,"messageId":"unusedVar","endLine":22,"endColumn":18},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'User' is defined but never used.","line":22,"column":28,"nodeType":null,"messageId":"unusedVar","endLine":22,"endColumn":32},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'TrendingUp' is defined but never used.","line":24,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":24,"endColumn":20},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":31,"column":18,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":31,"endColumn":21,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[965,968],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[965,968],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has a missing dependency: 'loadSecurityData'. Either include it or remove the dependency array.","line":71,"column":6,"nodeType":"ArrayExpression","endLine":71,"endColumn":17,"suggestions":[{"desc":"Update the dependencies array to be: [loadSecurityData, timeRange]","fix":{"range":[1960,1971],"text":"[loadSecurityData, timeRange]"}}]},{"ruleId":"no-restricted-syntax","severity":1,"message":"Use design tokens instead of hardcoded text colors (e.g., text-foreground, text-muted-foreground)","line":181,"column":40,"nodeType":"Literal","messageId":"restrictedSyntax","endLine":181,"endColumn":65},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'getEventTypeColor' is assigned a value but never used.","line":187,"column":9,"nodeType":null,"messageId":"unusedVar","endLine":187,"endColumn":26},{"ruleId":"no-restricted-syntax","severity":1,"message":"Use design tokens instead of hardcoded text colors (e.g., text-foreground, text-muted-foreground)","line":196,"column":26,"nodeType":"Literal","messageId":"restrictedSyntax","endLine":196,"endColumn":59},{"ruleId":"no-restricted-syntax","severity":1,"message":"Use design tokens instead of hardcoded colors (e.g., bg-primary, bg-secondary)","line":198,"column":20,"nodeType":"Literal","messageId":"restrictedSyntax","endLine":198,"endColumn":51},{"ruleId":"no-restricted-syntax","severity":1,"message":"Use design tokens instead of hardcoded text colors (e.g., text-foreground, text-muted-foreground)","line":198,"column":20,"nodeType":"Literal","messageId":"restrictedSyntax","endLine":198,"endColumn":51}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":12,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\n * Security Dashboard - Comprehensive security monitoring and audit trail\n * Provides real-time insights into system security, user activities, and threat detection\n */\n\nimport React, { useState, useEffect } from 'react';\nimport { \n  AreaChart, Area, XAxis, YAxis, CartesianGrid, Tooltip, ResponsiveContainer \n} from 'recharts';\nimport { chartColors } from '../../lib/chartColors';\nimport { format } from 'date-fns';\nimport { \n  Card, CardContent, CardDescription, CardHeader, CardTitle,\n  Badge,\n  Button,\n  Tabs, TabsContent, TabsList, TabsTrigger,\n  Alert, AlertDescription,\n  Progress\n} from '@/components/ui';\nimport { \n  Activity, AlertTriangle, CheckCircle, FileText, Key, \n  Lock, RefreshCw, Shield, User, XCircle, Eye \n} from 'lucide-react';\nimport { TrendingUp, Download, Settings } from 'lucide-react';\nimport { supabase } from '@/lib/core/supabase';\n\ninterface SecurityEvent {\n  id: string;\n  user_id: string;\n  event_type: string;\n  event_details: any;\n  ip_address: string;\n  user_agent: string;\n  created_at: string;\n}\n\ninterface SecurityMetrics {\n  totalEvents: number;\n  suspiciousActivity: number;\n  failedLogins: number;\n  successfulLogins: number;\n  dataAccess: number;\n  integrationChanges: number;\n}\n\ninterface SecurityAlert {\n  id: string;\n  type: 'critical' | 'warning' | 'info';\n  title: string;\n  description: string;\n  timestamp: string;\n  resolved: boolean;\n}\n\nexport const SecurityDashboard: React.FC = () => {\n  const [securityEvents, setSecurityEvents] = useState<SecurityEvent[]>([]);\n  const [metrics, setMetrics] = useState<SecurityMetrics>({\n    totalEvents: 0,\n    suspiciousActivity: 0,\n    failedLogins: 0,\n    successfulLogins: 0,\n    dataAccess: 0,\n    integrationChanges: 0,\n  });\n  const [alerts, setAlerts] = useState<SecurityAlert[]>([]);\n  const [loading, setLoading] = useState(true);\n  const [timeRange, setTimeRange] = useState<'24h' | '7d' | '30d'>('24h');\n\n  useEffect(() => {\n    loadSecurityData();\n  }, [timeRange]);\n\n  const loadSecurityData = async (): Promise<void> => {\n    try {\n      setLoading(true);\n      \n      // Calculate time range\n      const now = new Date();\n      const timeRangeMap = {\n        '24h': new Date(now.getTime() - 24 * 60 * 60 * 1000),\n        '7d': new Date(now.getTime() - 7 * 24 * 60 * 60 * 1000),\n        '30d': new Date(now.getTime() - 30 * 24 * 60 * 60 * 1000),\n      };\n      \n      const startTime = timeRangeMap[timeRange];\n\n      // Load security events\n      const { data: events, error: eventsError } = await supabase\n        .from('security_audit_log')\n        .select('*')\n        .gte('created_at', startTime.toISOString())\n        .order('created_at', { ascending: false })\n        .limit(100);\n\n      if (eventsError) throw eventsError;\n\n      setSecurityEvents(events || []);\n\n      // Calculate metrics\n      const eventsByType = (events || []).reduce((acc, event) => {\n        acc[event.event_type] = (acc[event.event_type] || 0) + 1;\n        return acc;\n      }, {} as Record<string, number>);\n\n      setMetrics({\n        totalEvents: events?.length || 0,\n        suspiciousActivity: eventsByType.suspicious_activity || 0,\n        failedLogins: eventsByType.failed_login || 0,\n        successfulLogins: eventsByType.login || 0,\n        dataAccess: eventsByType.data_access || 0,\n        integrationChanges: (eventsByType.integration_added || 0) + (eventsByType.integration_removed || 0),\n      });\n\n      // Generate security alerts based on patterns\n      generateSecurityAlerts(events || []);\n\n    } catch (error) {\n      console.error('Failed to load security data:', error);\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const generateSecurityAlerts = (events: SecurityEvent[]): void => {\n    const newAlerts: SecurityAlert[] = [];\n    const now = new Date();\n\n    // Check for multiple failed logins\n    const failedLogins = events.filter(e => e.event_type === 'failed_login');\n    if (failedLogins.length >= 5) {\n      newAlerts.push({\n        id: `failed-logins-${Date.now()}`,\n        type: 'critical',\n        title: 'Multiple Failed Login Attempts',\n        description: `${failedLogins.length} failed login attempts detected in the last ${timeRange}`,\n        timestamp: now.toISOString(),\n        resolved: false,\n      });\n    }\n\n    // Check for suspicious activity\n    const suspiciousEvents = events.filter(e => e.event_type === 'suspicious_activity');\n    if (suspiciousEvents.length > 0) {\n      newAlerts.push({\n        id: `suspicious-${Date.now()}`,\n        type: 'warning',\n        title: 'Suspicious Activity Detected',\n        description: `${suspiciousEvents.length} suspicious activities detected`,\n        timestamp: now.toISOString(),\n        resolved: false,\n      });\n    }\n\n    // Check for unusual data access patterns\n    const dataAccessEvents = events.filter(e => e.event_type === 'data_access');\n    if (dataAccessEvents.length > 100) {\n      newAlerts.push({\n        id: `data-access-${Date.now()}`,\n        type: 'warning',\n        title: 'High Data Access Volume',\n        description: `Unusual amount of data access detected (${dataAccessEvents.length} events)`,\n        timestamp: now.toISOString(),\n        resolved: false,\n      });\n    }\n\n    setAlerts(newAlerts);\n  };\n\n  const getEventIcon = (eventType: string): React.ReactNode => {\n    const iconMap: Record<string, React.ReactNode> = {\n      login: <CheckCircle className=\"h-4 w-4 text-success\" />,\n      logout: <XCircle className=\"h-4 w-4 text-muted-foreground\" />,\n      failed_login: <XCircle className=\"h-4 w-4 text-destructive\" />,\n      suspicious_activity: <AlertTriangle className=\"h-4 w-4 text-warning\" />,\n      data_access: <Eye className=\"h-4 w-4 text-primary\" />,\n      integration_added: <Settings className=\"h-4 w-4 text-success\" />,\n      integration_removed: <Settings className=\"h-4 w-4 text-destructive\" />,\n      data_modification: <FileText className=\"h-4 w-4 text-secondary\" />,\n      permission_change: <Key className=\"h-4 w-4 text-warning\" />,\n      data_export: <Download className=\"h-4 w-4 text-indigo-500\" />,\n    };\n\n    return iconMap[eventType] || <Activity className=\"h-4 w-4 text-muted-foreground\" />;\n  };\n\n  const getEventTypeColor = (eventType: string): string => {\n    const colorMap: Record<string, string> = {\n      login: 'bg-success/10 text-success',\n      logout: 'bg-muted text-foreground',\n      failed_login: 'bg-destructive/10 text-destructive',\n      suspicious_activity: 'bg-warning/10 text-orange-800',\n      data_access: 'bg-primary/10 text-primary',\n      integration_added: 'bg-success/10 text-success',\n      integration_removed: 'bg-destructive/10 text-destructive',\n      data_modification: 'bg-secondary/10 text-purple-800',\n      permission_change: 'bg-warning/10 text-warning/80',\n      data_export: 'bg-indigo-100 text-indigo-800',\n    };\n\n    return colorMap[eventType] || 'bg-muted text-foreground';\n  };\n\n  const exportSecurityReport = async (): Promise<void> => {\n    const report = {\n      timestamp: new Date().toISOString(),\n      timeRange,\n      metrics,\n      alerts,\n      events: securityEvents.slice(0, 50), // Export top 50 events\n    };\n\n    const blob = new Blob([JSON.stringify(report, null, 2)], { type: 'application/json' });\n    const url = URL.createObjectURL(blob);\n    const a = document.createElement('a');\n    a.href = url;\n    a.download = `security-report-${format(new Date(), 'yyyy-MM-dd-HH-mm')}.json`;\n    document.body.appendChild(a);\n    a.click();\n    document.body.removeChild(a);\n    URL.revokeObjectURL(url);\n  };\n\n  if (loading) {\n    return (\n      <div className=\"flex items-center justify-center h-64\">\n        <div className=\"text-center\">\n          <Shield className=\"h-8 w-8 animate-spin mx-auto mb-4\" />\n          <p>Loading security data...</p>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"space-y-6\">\n      {/* Header */}\n      <div className=\"flex justify-between items-center\">\n        <div>\n          <h2 className=\"text-3xl font-bold tracking-tight flex items-center gap-2\">\n            <Shield className=\"h-8 w-8 text-primary\" />\n            Security Dashboard\n          </h2>\n          <p className=\"text-muted-foreground\">\n            Monitor security events, audit trails, and system integrity\n          </p>\n        </div>\n        <div className=\"flex gap-2\">\n          <Button variant=\"outline\" onClick={exportSecurityReport}>\n            <Download className=\"h-4 w-4 mr-2\" />\n            Export Report\n          </Button>\n          <Tabs value={timeRange} onValueChange={(value: string) => setTimeRange(value as '24h' | '7d' | '30d')}>\n            <TabsList>\n              <TabsTrigger value=\"24h\">24h</TabsTrigger>\n              <TabsTrigger value=\"7d\">7d</TabsTrigger>\n              <TabsTrigger value=\"30d\">30d</TabsTrigger>\n            </TabsList>\n          </Tabs>\n        </div>\n      </div>\n\n      {/* Active Security Alerts */}\n      <Card>\n        <CardHeader>\n          <CardTitle>Active Security Alerts</CardTitle>\n        </CardHeader>\n        <CardContent className=\"space-y-4\">\n          {alerts.length > 0 ? (\n            alerts.map(alert => (\n              <Alert key={alert.id} variant={alert.type === 'critical' ? 'destructive' : 'warning'}>\n                <AlertTriangle className=\"h-4 w-4\" />\n                <div className=\"font-bold\">{alert.title}</div>\n                <AlertDescription>\n                  {alert.description} - {new Date(alert.timestamp).toLocaleString()}\n                </AlertDescription>\n              </Alert>\n            ))\n          ) : (\n            <p className=\"text-muted-foreground text-sm\">No active alerts.</p>\n          )}\n        </CardContent>\n      </Card>\n\n      {/* Recent Security Events */}\n      <Card>\n        <CardHeader>\n          <CardTitle>Recent Security Events</CardTitle>\n          <CardDescription>\n            Showing last 100 events in the selected time range.\n          </CardDescription>\n        </CardHeader>\n        <CardContent>\n          <div className=\"h-[400px] overflow-y-auto\">\n            {securityEvents.map(event => (\n              <div key={event.id} className=\"flex items-center space-x-4 p-2 hover:bg-muted/50 rounded-lg\">\n                <div className=\"p-2 bg-muted rounded-full\">\n                  {getEventIcon(event.event_type)}\n                </div>\n                <div className=\"flex-1\">\n                  <p className=\"font-semibold\">{event.event_details.message || event.event_type.replace(/_/g, ' ')}</p>\n                  <p className=\"text-sm text-muted-foreground\">\n                    User: {event.user_id} - IP: {event.ip_address}\n                  </p>\n                </div>\n                <div className=\"text-right text-sm text-muted-foreground\">\n                  {format(new Date(event.created_at), 'Pp')}\n                </div>\n              </div>\n            ))}\n          </div>\n        </CardContent>\n      </Card>\n\n      {/* Security Metrics */}\n      <div className=\"grid gap-4 md:grid-cols-2 lg:grid-cols-4\">\n        <Card>\n          <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n            <CardTitle className=\"text-sm font-medium\">Total Events</CardTitle>\n            <Activity className=\"h-4 w-4 text-muted-foreground\" />\n          </CardHeader>\n          <CardContent>\n            <div className=\"text-2xl font-bold\">{metrics.totalEvents}</div>\n            <p className=\"text-xs text-muted-foreground\">Last {timeRange}</p>\n          </CardContent>\n        </Card>\n\n        <Card>\n          <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n            <CardTitle className=\"text-sm font-medium\">Failed Logins</CardTitle>\n            <XCircle className=\"h-4 w-4 text-destructive\" />\n          </CardHeader>\n          <CardContent>\n            <div className=\"text-2xl font-bold text-destructive\">{metrics.failedLogins}</div>\n            <p className=\"text-xs text-muted-foreground\">Security concern</p>\n          </CardContent>\n        </Card>\n\n        <Card>\n          <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n            <CardTitle className=\"text-sm font-medium\">Suspicious Activity</CardTitle>\n            <AlertTriangle className=\"h-4 w-4 text-warning\" />\n          </CardHeader>\n          <CardContent>\n            <div className=\"text-2xl font-bold text-warning\">{metrics.suspiciousActivity}</div>\n            <p className=\"text-xs text-muted-foreground\">Requires attention</p>\n          </CardContent>\n        </Card>\n\n        <Card>\n          <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n            <CardTitle className=\"text-sm font-medium\">Data Access</CardTitle>\n            <Eye className=\"h-4 w-4 text-primary\" />\n          </CardHeader>\n          <CardContent>\n            <div className=\"text-2xl font-bold\">{metrics.dataAccess}</div>\n            <p className=\"text-xs text-muted-foreground\">Read operations</p>\n          </CardContent>\n        </Card>\n      </div>\n\n      {/* Main Content Tabs */}\n      <Tabs defaultValue=\"events\" className=\"space-y-4\">\n        <TabsList>\n          <TabsTrigger value=\"events\">Security Events</TabsTrigger>\n          <TabsTrigger value=\"analytics\">Analytics</TabsTrigger>\n          <TabsTrigger value=\"config\">Security Config</TabsTrigger>\n        </TabsList>\n\n        <TabsContent value=\"events\" className=\"space-y-4\">\n          <Card>\n            <CardHeader>\n              <CardTitle>Recent Security Events</CardTitle>\n              <CardDescription>\n                Real-time audit trail of all security-relevant activities\n              </CardDescription>\n            </CardHeader>\n            <CardContent>\n              <div className=\"h-[400px] overflow-y-auto\">\n                {securityEvents.map((event) => (\n                  <div key={event.id} className=\"flex items-center space-x-4 p-2 hover:bg-muted/50 rounded-lg\">\n                    <div className=\"p-2 bg-muted rounded-full\">\n                      {getEventIcon(event.event_type)}\n                    </div>\n                    <div className=\"flex-1\">\n                      <p className=\"font-semibold\">{event.event_details?.description || `${event.event_type} event`}</p>\n                      <p className=\"text-sm text-muted-foreground\">\n                        IP: {event.ip_address || 'Unknown'} • \n                        {format(new Date(event.created_at), 'PPpp')}\n                      </p>\n                    </div>\n                  </div>\n                ))}\n              </div>\n            </CardContent>\n          </Card>\n        </TabsContent>\n\n        <TabsContent value=\"analytics\" className=\"space-y-4\">\n          <div className=\"grid gap-4 md:grid-cols-2\">\n            <Card>\n              <CardHeader>\n                <CardTitle>Event Timeline</CardTitle>\n                <CardDescription>Security events over time</CardDescription>\n              </CardHeader>\n              <CardContent>\n                <ResponsiveContainer width=\"100%\" height={200}>\n                  <AreaChart data={[]}>\n                    <CartesianGrid strokeDasharray=\"3 3\" />\n                    <XAxis dataKey=\"time\" />\n                    <YAxis />\n                    <Tooltip />\n                    <Area type=\"monotone\" dataKey=\"events\" stroke={chartColors.primary} fill={chartColors.primaryLight} />\n                  </AreaChart>\n                </ResponsiveContainer>\n              </CardContent>\n            </Card>\n\n            <Card>\n              <CardHeader>\n                <CardTitle>Threat Level</CardTitle>\n                <CardDescription>Current security status</CardDescription>\n              </CardHeader>\n              <CardContent className=\"space-y-4\">\n                <div>\n                  <div className=\"flex justify-between text-sm mb-2\">\n                    <span>Overall Security Score</span>\n                    <span>85%</span>\n                  </div>\n                  <Progress value={85} className=\"h-2\" />\n                </div>\n                <div className=\"space-y-2\">\n                  <div className=\"flex justify-between text-sm\">\n                    <span>Authentication</span>\n                    <CheckCircle className=\"h-4 w-4 text-success\" />\n                  </div>\n                  <div className=\"flex justify-between text-sm\">\n                    <span>Data Encryption</span>\n                    <CheckCircle className=\"h-4 w-4 text-success\" />\n                  </div>\n                  <div className=\"flex justify-between text-sm\">\n                    <span>Access Control</span>\n                    <CheckCircle className=\"h-4 w-4 text-success\" />\n                  </div>\n                  <div className=\"flex justify-between text-sm\">\n                    <span>Audit Logging</span>\n                    <CheckCircle className=\"h-4 w-4 text-success\" />\n                  </div>\n                </div>\n              </CardContent>\n            </Card>\n          </div>\n        </TabsContent>\n\n        <TabsContent value=\"config\" className=\"space-y-4\">\n          <Card>\n            <CardHeader>\n              <CardTitle>Security Configuration</CardTitle>\n              <CardDescription>Current security policies and settings</CardDescription>\n            </CardHeader>\n            <CardContent className=\"space-y-4\">\n              <div className=\"grid gap-4 md:grid-cols-2\">\n                <div className=\"space-y-2\">\n                  <h4 className=\"font-medium\">Password Policy</h4>\n                  <ul className=\"text-sm text-muted-foreground space-y-1\">\n                    <li>• Minimum 12 characters</li>\n                    <li>• Requires uppercase letters</li>\n                    <li>• Requires numbers</li>\n                    <li>• Requires special characters</li>\n                  </ul>\n                </div>\n                <div className=\"space-y-2\">\n                  <h4 className=\"font-medium\">Session Management</h4>\n                  <ul className=\"text-sm text-muted-foreground space-y-1\">\n                    <li>• 24-hour session timeout</li>\n                    <li>• Auto-logout on inactivity</li>\n                    <li>• Secure session storage</li>\n                  </ul>\n                </div>\n                <div className=\"space-y-2\">\n                  <h4 className=\"font-medium\">Data Protection</h4>\n                  <ul className=\"text-sm text-muted-foreground space-y-1\">\n                    <li>• AES-256 encryption</li>\n                    <li>• Row-level security</li>\n                    <li>• Automatic data retention</li>\n                  </ul>\n                </div>\n                <div className=\"space-y-2\">\n                  <h4 className=\"font-medium\">Monitoring</h4>\n                  <ul className=\"text-sm text-muted-foreground space-y-1\">\n                    <li>• Real-time threat detection</li>\n                    <li>• Comprehensive audit logs</li>\n                    <li>• Automated alerts</li>\n                  </ul>\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n        </TabsContent>\n      </Tabs>\n    </div>\n  );\n}; ","usedDeprecatedRules":[]},{"filePath":"/home/vonj/Github/Nexus/src/components/dashboard/SimpleBarChart.test.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/vonj/Github/Nexus/src/components/dashboard/SimpleBarChart.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/vonj/Github/Nexus/src/components/dashboard/StatsCard.test.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/vonj/Github/Nexus/src/components/dashboard/StatsCard.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/vonj/Github/Nexus/src/components/dashboard/TrinityInsightsEngine.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'TrendingUp' is defined but never used.","line":10,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":10,"endColumn":13},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'Users' is defined but never used.","line":11,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":11,"endColumn":8},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'DollarSign' is defined but never used.","line":12,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":12,"endColumn":13},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'ChevronRight' is defined but never used.","line":16,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":16,"endColumn":15},{"ruleId":"no-restricted-syntax","severity":1,"message":"Use design tokens instead of hardcoded text colors (e.g., text-foreground, text-muted-foreground)","line":135,"column":16,"nodeType":"Literal","messageId":"restrictedSyntax","endLine":135,"endColumn":115}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState } from 'react';\nimport { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/Card';\nimport { Badge } from '@/components/ui/Badge';\nimport { Button } from '@/components/ui/Button';\nimport { \n  Brain, \n  Eye, \n  Zap, \n  AlertTriangle, \n  TrendingUp, \n  Users,\n  DollarSign,\n  ArrowRight,\n  Lightbulb,\n  Target,\n  ChevronRight\n} from 'lucide-react';\n\ninterface TrinityInsight {\n  type: 'think' | 'see' | 'act';\n  title: string;\n  description: string;\n  impact: 'high' | 'medium' | 'low';\n  urgency: 'urgent' | 'normal' | 'low';\n  departments: string[];\n  recommendation?: string;\n  estimatedValue?: string;\n}\n\ninterface TrinityInsightsEngineProps {\n  className?: string;\n}\n\n/**\n * TrinityInsightsEngine displays AI-powered insights using the THINK/SEE/ACT framework\n * for organizational intelligence and decision support\n */\nconst TrinityInsightsEngine: React.FC<TrinityInsightsEngineProps> = ({ \n  className = '' \n}) => {\n  const [activeTab, setActiveTab] = useState<'think' | 'see' | 'act'>('think');\n\n  const insights: TrinityInsight[] = [\n    {\n      type: 'think',\n      title: 'Cross-departmental Pattern Analysis',\n      description: 'Marketing spend increase correlating with sales velocity decrease suggests misaligned campaign targeting affecting lead quality.',\n      impact: 'high',\n      urgency: 'urgent',\n      departments: ['Marketing', 'Sales', 'Finance'],\n      recommendation: 'Realign marketing campaigns with high-converting customer profiles',\n      estimatedValue: '+$340K ARR'\n    },\n    {\n      type: 'think',\n      title: 'Resource Optimization Opportunity',\n      description: 'Operations capacity at 78% while customer satisfaction declining suggests bottleneck in service delivery processes.',\n      impact: 'medium',\n      urgency: 'normal',\n      departments: ['Operations', 'Customer Success'],\n      recommendation: 'Implement automated escalation workflows',\n      estimatedValue: '+15% CSAT'\n    },\n    {\n      type: 'see',\n      title: 'Real-time Performance Anomaly',\n      description: 'System response time increased 23% in last 4 hours. Potential infrastructure strain detected.',\n      impact: 'medium',\n      urgency: 'urgent',\n      departments: ['Technology', 'Operations'],\n      recommendation: 'Scale infrastructure resources immediately',\n      estimatedValue: 'Prevent downtime'\n    },\n    {\n      type: 'see',\n      title: 'Revenue Flow Disruption Risk',\n      description: 'Three major contracts (totaling $280K) approaching renewal with below-average engagement scores.',\n      impact: 'high',\n      urgency: 'urgent',\n      departments: ['Sales', 'Customer Success'],\n      recommendation: 'Immediate customer health intervention required',\n      estimatedValue: 'Protect $280K ARR'\n    },\n    {\n      type: 'act',\n      title: 'Automated Workflow Optimization',\n      description: 'Customer onboarding time can be reduced by 40% through process automation and resource reallocation.',\n      impact: 'high',\n      urgency: 'normal',\n      departments: ['Operations', 'Technology'],\n      recommendation: 'Deploy automated onboarding sequences',\n      estimatedValue: '+28% NPS'\n    },\n    {\n      type: 'act',\n      title: 'Strategic Resource Reallocation',\n      description: 'Moving 2 engineers from feature development to infrastructure can reduce customer churn by 15%.',\n      impact: 'medium',\n      urgency: 'normal',\n      departments: ['Technology', 'People', 'Strategy'],\n      recommendation: 'Implement immediate team restructuring',\n      estimatedValue: '+$180K ARR'\n    }\n  ];\n\n  const getTabConfig = (type: 'think' | 'see' | 'act') => {\n    switch (type) {\n      case 'think':\n        return {\n          icon: <Brain className=\"h-4 w-4\" />,\n          label: 'THINK',\n          color: 'blue',\n          description: 'Cross-pattern analysis'\n        };\n      case 'see':\n        return {\n          icon: <Eye className=\"h-4 w-4\" />,\n          label: 'SEE', \n          color: 'purple',\n          description: 'Real-time monitoring'\n        };\n      case 'act':\n        return {\n          icon: <Zap className=\"h-4 w-4\" />,\n          label: 'ACT',\n          color: 'orange',\n          description: 'Automated optimization'\n        };\n    }\n  };\n\n  const getImpactColor = (impact: string) => {\n    switch (impact) {\n      case 'high':\n        return 'bg-destructive/10 text-destructive border-destructive/20 dark:bg-destructive/20 dark:text-red-300';\n      case 'medium':\n        return 'bg-amber-100 text-amber-800 border-amber-200 dark:bg-amber-900/20 dark:text-amber-300';\n      default:\n        return 'bg-success/10 text-success border-success/20 dark:bg-success/20 dark:text-success';\n    }\n  };\n\n  const getUrgencyIcon = (urgency: string) => {\n    switch (urgency) {\n      case 'urgent':\n        return <AlertTriangle className=\"h-4 w-4 text-destructive\" />;\n      case 'normal':\n        return <Target className=\"h-4 w-4 text-amber-500\" />;\n      default:\n        return <Lightbulb className=\"h-4 w-4 text-success\" />;\n    }\n  };\n\n  const filteredInsights = insights.filter(insight => insight.type === activeTab);\n\n  return (\n    <div className={className}>\n      <div className=\"mb-6\">\n        <h3 className=\"text-xl font-bold text-foreground dark:text-primary-foreground mb-2\">\n          Trinity Intelligence Engine\n        </h3>\n        <p className=\"text-sm text-muted-foreground dark:text-muted-foreground\">\n          AI-powered insights for organizational optimization and decision support\n        </p>\n      </div>\n\n      {/* Trinity Tabs */}\n      <div className=\"flex gap-2 mb-6\">\n        {(['think', 'see', 'act'] as const).map((type) => {\n          const config = getTabConfig(type);\n          const isActive = activeTab === type;\n          \n          return (\n            <Button\n              key={type}\n              variant={isActive ? \"default\" : \"outline\"}\n              size=\"sm\"\n              onClick={() => setActiveTab(type)}\n              className={`flex items-center gap-2 ${\n                isActive \n                  ? `bg-${config.color}-600 hover:bg-${config.color}-700 text-primary-foreground` \n                  : `hover:bg-${config.color}-50 dark:hover:bg-${config.color}-950/20`\n              }`}\n            >\n              {config.icon}\n              <span className=\"font-semibold\">🔵 {config.label}</span>\n              <span className=\"text-xs opacity-75\">{config.description}</span>\n            </Button>\n          );\n        })}\n      </div>\n\n      {/* Insights Grid */}\n      <div className=\"grid gap-4\">\n        {filteredInsights.map((insight, index) => (\n          <Card key={index} className=\"relative overflow-hidden hover:shadow-md transition-all\">\n            <CardHeader className=\"pb-3\">\n              <CardTitle className=\"flex items-start justify-between\">\n                <div className=\"flex items-start gap-4\">\n                  <div className=\"mt-1\">\n                    {getUrgencyIcon(insight.urgency)}\n                  </div>\n                  <div>\n                    <h4 className=\"text-lg font-semibold text-foreground dark:text-primary-foreground mb-1\">\n                      {insight.title}\n                    </h4>\n                    <div className=\"flex items-center gap-2 mb-2\">\n                      <Badge variant=\"outline\" className={getImpactColor(insight.impact)}>\n                        {insight.impact} impact\n                      </Badge>\n                      <Badge variant=\"secondary\" className=\"text-xs\">\n                        {insight.urgency}\n                      </Badge>\n                    </div>\n                  </div>\n                </div>\n              </CardTitle>\n            </CardHeader>\n            \n            <CardContent className=\"pt-0\">\n              <p className=\"text-muted-foreground dark:text-muted-foreground mb-4\">\n                {insight.description}\n              </p>\n\n              {/* Departments Affected */}\n              <div className=\"mb-4\">\n                <div className=\"text-xs font-medium text-muted-foreground dark:text-muted-foreground mb-2\">\n                  Departments Affected:\n                </div>\n                <div className=\"flex flex-wrap gap-1\">\n                  {insight.departments.map((dept, i) => (\n                    <Badge key={i} variant=\"secondary\" className=\"text-xs\">\n                      {dept}\n                    </Badge>\n                  ))}\n                </div>\n              </div>\n\n              {/* Recommendation */}\n              {insight.recommendation && (\n                <div className=\"bg-background dark:bg-background/50 rounded-lg p-4 mb-4\">\n                  <div className=\"flex items-start gap-2\">\n                    <ArrowRight className=\"h-4 w-4 text-primary dark:text-primary mt-0.5 flex-shrink-0\" />\n                    <div>\n                      <div className=\"text-sm font-medium text-foreground dark:text-primary-foreground mb-1\">\n                        Recommended Action:\n                      </div>\n                      <div className=\"text-sm text-muted-foreground dark:text-muted-foreground\">\n                        {insight.recommendation}\n                      </div>\n                    </div>\n                  </div>\n                </div>\n              )}\n\n              {/* Estimated Value */}\n              {insight.estimatedValue && (\n                <div className=\"flex items-center justify-between\">\n                  <span className=\"text-sm font-medium text-muted-foreground dark:text-muted-foreground\">\n                    Estimated Value:\n                  </span>\n                  <Badge className=\"bg-success/10 text-success border-success/20 dark:bg-success/20 dark:text-success\">\n                    {insight.estimatedValue}\n                  </Badge>\n                </div>\n              )}\n            </CardContent>\n          </Card>\n        ))}\n      </div>\n\n      {/* Summary Stats */}\n      <div className=\"mt-6 p-4 rounded-lg\">\n        <div className=\"grid grid-cols-3 gap-4 text-center\">\n          <div>\n            <div className=\"text-2xl font-bold text-primary dark:text-primary\">\n              {insights.filter(i => i.type === 'think').length}\n            </div>\n            <div className=\"text-xs text-muted-foreground dark:text-muted-foreground\">\n              Pattern Insights\n            </div>\n          </div>\n          <div>\n            <div className=\"text-2xl font-bold text-secondary dark:text-secondary\">\n              {insights.filter(i => i.type === 'see').length}\n            </div>\n            <div className=\"text-xs text-muted-foreground dark:text-muted-foreground\">\n              Live Alerts\n            </div>\n          </div>\n          <div>\n            <div className=\"text-2xl font-bold text-warning dark:text-warning\">\n              {insights.filter(i => i.type === 'act').length}\n            </div>\n            <div className=\"text-xs text-muted-foreground dark:text-muted-foreground\">\n              Auto Actions\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default TrinityInsightsEngine; ","usedDeprecatedRules":[]},{"filePath":"/home/vonj/Github/Nexus/src/components/dashboard/UnifiedCommunicationDashboard.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'Alert' is defined but never used.","line":12,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":12,"endColumn":15},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'AlertDescription' is defined but never used.","line":12,"column":17,"nodeType":null,"messageId":"unusedVar","endLine":12,"endColumn":33},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'Calendar' is defined but never used.","line":17,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":17,"endColumn":11},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'BarChart3' is defined but never used.","line":21,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":21,"endColumn":12},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'AlertTriangle' is defined but never used.","line":25,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":25,"endColumn":16},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'CheckCircle2' is defined but never used.","line":26,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":26,"endColumn":15},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'UnifiedCommunicationInsights' is defined but never used.","line":34,"column":46,"nodeType":null,"messageId":"unusedVar","endLine":34,"endColumn":74},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'CommunicationHealthScore' is defined but never used.","line":34,"column":81,"nodeType":null,"messageId":"unusedVar","endLine":34,"endColumn":105},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'setSelectedTimeframe' is assigned a value but never used.","line":77,"column":29,"nodeType":null,"messageId":"unusedVar","endLine":77,"endColumn":49},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'setAutoRefresh' is assigned a value but never used.","line":78,"column":23,"nodeType":null,"messageId":"unusedVar","endLine":78,"endColumn":37},{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has a missing dependency: 'loadDashboardData'. Either include it or remove the dependency array.","line":89,"column":6,"nodeType":"ArrayExpression","endLine":89,"endColumn":38,"suggestions":[{"desc":"Update the dependencies array to be: [selectedTimeframe, autoRefresh, loadDashboardData]","fix":{"range":[2532,2564],"text":"[selectedTimeframe, autoRefresh, loadDashboardData]"}}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":173,"column":71,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":173,"endColumn":74,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[5963,5966],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[5963,5966],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":12,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\n * Unified Communication Analytics Dashboard\n * Combines Slack and Microsoft Teams data for comprehensive communication intelligence\n * Powers cross-platform insights and optimization recommendations\n */\n\nimport React, { useState, useEffect } from 'react';\nimport { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/Card';\nimport { Button } from '@/components/ui/Button';\nimport { Badge } from '@/components/ui/Badge';\nimport { Progress } from '@/components/ui/Progress';\nimport { Alert, AlertDescription } from '@/components/ui/Alert';\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from '@/components/ui/Tabs';\nimport { \n  MessageSquare, \n  Users, \n  Calendar, \n  Video, \n  TrendingUp,\n  TrendingDown,\n  BarChart3,\n  Clock,\n  Target,\n  Zap,\n  AlertTriangle,\n  CheckCircle2,\n  ArrowRight,\n  Activity,\n  Lightbulb,\n  Settings,\n  RefreshCw,\n  ExternalLink\n} from 'lucide-react';\nimport { communicationAnalyticsService, type UnifiedCommunicationInsights, type CommunicationHealthScore } from '@/lib/services/communicationAnalyticsService';\n\ninterface PlatformStatus {\n  slack: {\n    connected: boolean;\n    lastSync: string | null;\n    messageCount: number;\n    channelCount: number;\n    userCount: number;\n    responseTime: number;\n  };\n  teams: {\n    connected: boolean;\n    lastSync: string | null;\n    messageCount: number;\n    meetingCount: number;\n    teamCount: number;\n    responseTime: number;\n  };\n}\n\ninterface CrossPlatformInsight {\n  id: string;\n  type: 'optimization' | 'pattern' | 'recommendation' | 'alert';\n  priority: 'high' | 'medium' | 'low';\n  title: string;\n  description: string;\n  impact: string;\n  actionable: boolean;\n  platforms: string[];\n  metrics?: {\n    current: number;\n    target?: number;\n    change?: number;\n    unit: string;\n  };\n}\n\nconst UnifiedCommunicationDashboard: React.FC = () => {\n  const [isLoading, setIsLoading] = useState(true);\n  const [platformStatus, setPlatformStatus] = useState<PlatformStatus | null>(null);\n  const [insights, setInsights] = useState<CrossPlatformInsight[]>([]);\n  const [healthScore, setHealthScore] = useState<number>(0);\n  const [selectedTimeframe, setSelectedTimeframe] = useState<'7d' | '30d' | '90d'>('30d');\n  const [autoRefresh, setAutoRefresh] = useState(true);\n\n  const communicationService = communicationAnalyticsService;\n\n  useEffect(() => {\n    loadDashboardData();\n    \n    if (autoRefresh) {\n      const interval = setInterval(loadDashboardData, 300000); // 5 minutes\n      return () => clearInterval(interval);\n    }\n  }, [selectedTimeframe, autoRefresh]);\n\n  const loadDashboardData = async () => {\n    try {\n      setIsLoading(true);\n      \n      const [unifiedInsights, healthData] = await Promise.all([\n        communicationService.getUnifiedInsights(),\n        communicationService.getCommunicationHealthScore()\n      ]);\n\n      // Extract platform status\n      setPlatformStatus({\n        slack: {\n          connected: unifiedInsights.platformComparison.slack.connected,\n          lastSync: new Date().toISOString(), // Would come from actual service\n          messageCount: unifiedInsights.platformComparison.slack.messageVolume,\n          channelCount: 0, // Would come from Slack service\n          userCount: unifiedInsights.platformComparison.slack.activeUsers,\n          responseTime: unifiedInsights.platformComparison.slack.responseTime\n        },\n        teams: {\n          connected: unifiedInsights.platformComparison.teams.connected,\n          lastSync: new Date().toISOString(), // Would come from actual service\n          messageCount: unifiedInsights.platformComparison.teams.messageVolume,\n          meetingCount: unifiedInsights.platformComparison.teams.meetingVolume,\n          teamCount: 0, // Would come from Teams service\n          responseTime: unifiedInsights.platformComparison.teams.responseTime\n        }\n      });\n\n      // Transform insights into UI format\n      const transformedInsights: CrossPlatformInsight[] = [\n        {\n          id: 'platform-efficiency',\n          type: 'optimization',\n          priority: 'high',\n          title: `${unifiedInsights.platformComparison.recommendation.primaryPlatform === 'slack' ? 'Slack' : 'Teams'} is your primary communication platform`,\n          description: unifiedInsights.platformComparison.recommendation.reasoning,\n          impact: 'Optimize workflow by consolidating communication',\n          actionable: true,\n          platforms: ['slack', 'teams'],\n          metrics: {\n            current: Math.round(unifiedInsights.efficiencyMetrics.communicationEfficiency),\n            target: 85,\n            change: 12,\n            unit: '%'\n          }\n        },\n        {\n          id: 'response-time',\n          type: 'pattern',\n          priority: 'medium',\n          title: 'Cross-platform response time analysis',\n          description: `Average response time is ${unifiedInsights.efficiencyMetrics.overallResponseTime} minutes`,\n          impact: 'Faster responses improve team productivity',\n          actionable: true,\n          platforms: ['slack', 'teams'],\n          metrics: {\n            current: unifiedInsights.efficiencyMetrics.overallResponseTime,\n            target: 15,\n            change: -5,\n            unit: 'min'\n          }\n        },\n        {\n          id: 'collaboration-score',\n          type: 'recommendation',\n          priority: 'medium',\n          title: 'Team collaboration effectiveness',\n          description: 'Your team collaboration score indicates good cross-platform engagement',\n          impact: 'Strong collaboration leads to better outcomes',\n          actionable: false,\n          platforms: ['slack', 'teams'],\n          metrics: {\n            current: unifiedInsights.efficiencyMetrics.collaborationScore,\n            target: 90,\n            change: 8,\n            unit: '/100'\n          }\n        }\n      ];\n\n      // Add optimization recommendations\n      unifiedInsights.efficiencyMetrics.recommendations.forEach((rec: any, index: number) => {\n        transformedInsights.push({\n          id: `recommendation-${index}`,\n          type: 'recommendation',\n          priority: rec.priority,\n          title: rec.title,\n          description: rec.description,\n          impact: rec.expectedImpact,\n          actionable: true,\n          platforms: ['slack', 'teams']\n        });\n      });\n\n      setInsights(transformedInsights);\n      setHealthScore(healthData.overall);\n      \n    } catch (error) {\n      console.error('Failed to load dashboard data:', error);\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  const getHealthScoreColor = (score: number) => {\n    if (score >= 80) return 'text-success';\n    if (score >= 60) return 'text-warning';\n    return 'text-destructive';\n  };\n\n  const getHealthScoreMessage = (score: number) => {\n    if (score >= 80) return 'Excellent communication health';\n    if (score >= 60) return 'Good communication with room for improvement';\n    return 'Communication needs attention';\n  };\n\n  const formatTimeAgo = (timestamp: string | null) => {\n    if (!timestamp) return 'Never';\n    const diff = Date.now() - new Date(timestamp).getTime();\n    const minutes = Math.floor(diff / 60000);\n    if (minutes < 60) return `${minutes}m ago`;\n    const hours = Math.floor(minutes / 60);\n    return `${hours}h ago`;\n  };\n\n  const handleConnectPlatform = (platform: 'slack' | 'teams') => {\n    // Would open integration setup modal\n    console.log(`Connecting ${platform}...`);\n  };\n\n  const handleRefreshData = () => {\n    loadDashboardData();\n  };\n\n  if (isLoading && !platformStatus) {\n    return (\n      <div className=\"flex items-center justify-center h-64\">\n        <div className=\"flex items-center space-x-2\">\n          <RefreshCw className=\"w-4 h-4 animate-spin\" />\n          <span>Loading communication analytics...</span>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"space-y-6\">\n      {/* Header */}\n      <div className=\"flex items-center justify-between\">\n        <div>\n          <h2 className=\"text-2xl font-bold\">Communication Intelligence</h2>\n          <p className=\"text-muted-foreground\">\n            Unified insights from Slack and Microsoft Teams\n          </p>\n        </div>\n        <div className=\"flex items-center space-x-2\">\n          <Button \n            variant=\"outline\" \n            size=\"sm\"\n            onClick={handleRefreshData}\n            disabled={isLoading}\n          >\n            <RefreshCw className={`w-4 h-4 mr-2 ${isLoading ? 'animate-spin' : ''}`} />\n            Refresh\n          </Button>\n          <Button variant=\"outline\" size=\"sm\">\n            <Settings className=\"w-4 h-4 mr-2\" />\n            Settings\n          </Button>\n        </div>\n      </div>\n\n      {/* Communication Health Score */}\n      <Card>\n        <CardHeader>\n          <CardTitle className=\"flex items-center space-x-2\">\n            <Activity className=\"w-5 h-5\" />\n            <span>Communication Health Score</span>\n          </CardTitle>\n        </CardHeader>\n        <CardContent>\n          <div className=\"flex items-center space-x-6\">\n            <div className=\"text-center\">\n              <div className={`text-4xl font-bold ${getHealthScoreColor(healthScore)}`}>\n                {healthScore}\n              </div>\n              <div className=\"text-sm text-muted-foreground\">out of 100</div>\n            </div>\n            <div className=\"flex-1\">\n              <Progress value={healthScore} className=\"h-3 mb-2\" />\n              <p className=\"text-sm text-muted-foreground\">\n                {getHealthScoreMessage(healthScore)}\n              </p>\n            </div>\n          </div>\n        </CardContent>\n      </Card>\n\n      {/* Platform Status Overview */}\n      <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\n        {/* Slack Status */}\n        <Card>\n          <CardHeader>\n            <CardTitle className=\"flex items-center justify-between\">\n              <div className=\"flex items-center space-x-2\">\n                <MessageSquare className=\"w-5 h-5 text-secondary\" />\n                <span>Slack</span>\n              </div>\n              {platformStatus?.slack.connected ? (\n                <Badge variant=\"default\" className=\"bg-success/10 text-success\">\n                  Connected\n                </Badge>\n              ) : (\n                <Badge variant=\"secondary\" className=\"bg-muted text-foreground\">\n                  Not Connected\n                </Badge>\n              )}\n            </CardTitle>\n          </CardHeader>\n          <CardContent>\n            {platformStatus?.slack.connected ? (\n              <div className=\"space-y-4\">\n                <div className=\"grid grid-cols-2 gap-4\">\n                  <div>\n                    <div className=\"text-2xl font-bold\">{platformStatus.slack.messageCount.toLocaleString()}</div>\n                    <div className=\"text-sm text-muted-foreground\">Messages</div>\n                  </div>\n                  <div>\n                    <div className=\"text-2xl font-bold\">{platformStatus.slack.userCount}</div>\n                    <div className=\"text-sm text-muted-foreground\">Active Users</div>\n                  </div>\n                </div>\n                <div className=\"flex items-center justify-between text-sm\">\n                  <span>Avg Response Time</span>\n                  <span className=\"font-medium\">{platformStatus.slack.responseTime}min</span>\n                </div>\n                <div className=\"flex items-center justify-between text-sm\">\n                  <span>Last Sync</span>\n                  <span className=\"text-muted-foreground\">{formatTimeAgo(platformStatus.slack.lastSync)}</span>\n                </div>\n              </div>\n            ) : (\n              <div className=\"text-center py-6\">\n                <MessageSquare className=\"w-12 h-12 mx-auto text-muted-foreground mb-4\" />\n                <p className=\"text-muted-foreground mb-4\">\n                  Connect Slack to get communication insights\n                </p>\n                <Button onClick={() => handleConnectPlatform('slack')}>\n                  Connect Slack\n                </Button>\n              </div>\n            )}\n          </CardContent>\n        </Card>\n\n        {/* Teams Status */}\n        <Card>\n          <CardHeader>\n            <CardTitle className=\"flex items-center justify-between\">\n              <div className=\"flex items-center space-x-2\">\n                <Video className=\"w-5 h-5 text-primary\" />\n                <span>Microsoft Teams</span>\n              </div>\n              {platformStatus?.teams.connected ? (\n                <Badge variant=\"default\" className=\"bg-success/10 text-success\">\n                  Connected\n                </Badge>\n              ) : (\n                <Badge variant=\"secondary\" className=\"bg-muted text-foreground\">\n                  Not Connected\n                </Badge>\n              )}\n            </CardTitle>\n          </CardHeader>\n          <CardContent>\n            {platformStatus?.teams.connected ? (\n              <div className=\"space-y-4\">\n                <div className=\"grid grid-cols-2 gap-4\">\n                  <div>\n                    <div className=\"text-2xl font-bold\">{platformStatus.teams.messageCount.toLocaleString()}</div>\n                    <div className=\"text-sm text-muted-foreground\">Messages</div>\n                  </div>\n                  <div>\n                    <div className=\"text-2xl font-bold\">{platformStatus.teams.meetingCount}</div>\n                    <div className=\"text-sm text-muted-foreground\">Meetings</div>\n                  </div>\n                </div>\n                <div className=\"flex items-center justify-between text-sm\">\n                  <span>Avg Response Time</span>\n                  <span className=\"font-medium\">{platformStatus.teams.responseTime}min</span>\n                </div>\n                <div className=\"flex items-center justify-between text-sm\">\n                  <span>Last Sync</span>\n                  <span className=\"text-muted-foreground\">{formatTimeAgo(platformStatus.teams.lastSync)}</span>\n                </div>\n              </div>\n            ) : (\n              <div className=\"text-center py-6\">\n                <Video className=\"w-12 h-12 mx-auto text-muted-foreground mb-4\" />\n                <p className=\"text-muted-foreground mb-4\">\n                  Connect Teams to get meeting and communication insights\n                </p>\n                <Button onClick={() => handleConnectPlatform('teams')}>\n                  Connect Teams\n                </Button>\n              </div>\n            )}\n          </CardContent>\n        </Card>\n      </div>\n\n      {/* Insights and Recommendations */}\n      <Tabs defaultValue=\"insights\" className=\"space-y-4\">\n        <TabsList>\n          <TabsTrigger value=\"insights\">AI Insights</TabsTrigger>\n          <TabsTrigger value=\"patterns\">Communication Patterns</TabsTrigger>\n          <TabsTrigger value=\"recommendations\">Recommendations</TabsTrigger>\n          <TabsTrigger value=\"automations\">Automations</TabsTrigger>\n        </TabsList>\n\n        <TabsContent value=\"insights\" className=\"space-y-4\">\n          <div className=\"grid gap-4\">\n            {insights.filter(insight => insight.type === 'pattern' || insight.type === 'optimization').map((insight) => (\n              <Card key={insight.id}>\n                <CardContent className=\"p-6\">\n                  <div className=\"flex items-start justify-between\">\n                    <div className=\"flex-1\">\n                      <div className=\"flex items-center space-x-2 mb-2\">\n                        <Badge \n                          variant={insight.priority === 'high' ? 'destructive' : insight.priority === 'medium' ? 'default' : 'secondary'}\n                          className=\"text-xs\"\n                        >\n                          {insight.priority} priority\n                        </Badge>\n                        <div className=\"flex space-x-1\">\n                          {insight.platforms.map(platform => (\n                            <Badge key={platform} variant=\"outline\" className=\"text-xs\">\n                              {platform}\n                            </Badge>\n                          ))}\n                        </div>\n                      </div>\n                      <h3 className=\"font-semibold mb-1\">{insight.title}</h3>\n                      <p className=\"text-muted-foreground text-sm mb-2\">{insight.description}</p>\n                      <p className=\"text-sm text-primary\">{insight.impact}</p>\n                    </div>\n                    {insight.metrics && (\n                      <div className=\"text-right\">\n                        <div className=\"text-2xl font-bold\">\n                          {insight.metrics.current}{insight.metrics.unit}\n                        </div>\n                        {insight.metrics.change && (\n                          <div className={`text-sm flex items-center ${\n                            insight.metrics.change > 0 ? 'text-success' : 'text-destructive'\n                          }`}>\n                            {insight.metrics.change > 0 ? (\n                              <TrendingUp className=\"w-3 h-3 mr-1\" />\n                            ) : (\n                              <TrendingDown className=\"w-3 h-3 mr-1\" />\n                            )}\n                            {Math.abs(insight.metrics.change)}%\n                          </div>\n                        )}\n                      </div>\n                    )}\n                  </div>\n                </CardContent>\n              </Card>\n            ))}\n          </div>\n        </TabsContent>\n\n        <TabsContent value=\"patterns\" className=\"space-y-4\">\n          <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4\">\n            <Card>\n              <CardHeader>\n                <CardTitle className=\"text-lg flex items-center space-x-2\">\n                  <Clock className=\"w-5 h-5\" />\n                  <span>Peak Hours</span>\n                </CardTitle>\n              </CardHeader>\n              <CardContent>\n                <div className=\"space-y-2\">\n                  <div className=\"flex justify-between\">\n                    <span className=\"text-sm\">Slack</span>\n                    <span className=\"text-sm font-medium\">9-11 AM, 2-4 PM</span>\n                  </div>\n                  <div className=\"flex justify-between\">\n                    <span className=\"text-sm\">Teams</span>\n                    <span className=\"text-sm font-medium\">10 AM-12 PM, 3-5 PM</span>\n                  </div>\n                </div>\n              </CardContent>\n            </Card>\n\n            <Card>\n              <CardHeader>\n                <CardTitle className=\"text-lg flex items-center space-x-2\">\n                  <Users className=\"w-5 h-5\" />\n                  <span>Team Preferences</span>\n                </CardTitle>\n              </CardHeader>\n              <CardContent>\n                <div className=\"space-y-2\">\n                  <div className=\"flex justify-between\">\n                    <span className=\"text-sm\">Quick Decisions</span>\n                    <span className=\"text-sm font-medium\">Slack (70%)</span>\n                  </div>\n                  <div className=\"flex justify-between\">\n                    <span className=\"text-sm\">Formal Planning</span>\n                    <span className=\"text-sm font-medium\">Teams (85%)</span>\n                  </div>\n                </div>\n              </CardContent>\n            </Card>\n\n            <Card>\n              <CardHeader>\n                <CardTitle className=\"text-lg flex items-center space-x-2\">\n                  <Target className=\"w-5 h-5\" />\n                  <span>Efficiency Metrics</span>\n                </CardTitle>\n              </CardHeader>\n              <CardContent>\n                <div className=\"space-y-2\">\n                  <div className=\"flex justify-between\">\n                    <span className=\"text-sm\">Response Rate</span>\n                    <span className=\"text-sm font-medium\">92%</span>\n                  </div>\n                  <div className=\"flex justify-between\">\n                    <span className=\"text-sm\">Meeting Attendance</span>\n                    <span className=\"text-sm font-medium\">87%</span>\n                  </div>\n                </div>\n              </CardContent>\n            </Card>\n          </div>\n        </TabsContent>\n\n        <TabsContent value=\"recommendations\" className=\"space-y-4\">\n          <div className=\"grid gap-4\">\n            {insights.filter(insight => insight.type === 'recommendation').map((insight) => (\n              <Card key={insight.id}>\n                <CardContent className=\"p-6\">\n                  <div className=\"flex items-start space-x-4\">\n                    <Lightbulb className=\"w-6 h-6 text-warning mt-1\" />\n                    <div className=\"flex-1\">\n                      <h3 className=\"font-semibold mb-1\">{insight.title}</h3>\n                      <p className=\"text-muted-foreground text-sm mb-3\">{insight.description}</p>\n                      <div className=\"flex items-center justify-between\">\n                        <span className=\"text-sm text-success\">{insight.impact}</span>\n                        {insight.actionable && (\n                          <Button size=\"sm\" variant=\"outline\">\n                            Take Action <ArrowRight className=\"w-3 h-3 ml-1\" />\n                          </Button>\n                        )}\n                      </div>\n                    </div>\n                  </div>\n                </CardContent>\n              </Card>\n            ))}\n          </div>\n        </TabsContent>\n\n        <TabsContent value=\"automations\" className=\"space-y-4\">\n          <div className=\"text-center py-12\">\n            <Zap className=\"w-16 h-16 mx-auto text-muted-foreground mb-4\" />\n            <h3 className=\"text-lg font-semibold mb-2\">Smart Automations Coming Soon</h3>\n            <p className=\"text-muted-foreground mb-4\">\n              AI-powered automations to optimize your team's communication workflow\n            </p>\n            <Button variant=\"outline\">\n              <ExternalLink className=\"w-4 h-4 mr-2\" />\n              Learn More\n            </Button>\n          </div>\n        </TabsContent>\n      </Tabs>\n    </div>\n  );\n};\n\nexport default UnifiedCommunicationDashboard; ","usedDeprecatedRules":[]},{"filePath":"/home/vonj/Github/Nexus/src/components/dashboard/VARLeadDashboard.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'Tabs' is defined but never used.","line":7,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":7,"endColumn":14},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'TabsContent' is defined but never used.","line":7,"column":16,"nodeType":null,"messageId":"unusedVar","endLine":7,"endColumn":27},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'TabsList' is defined but never used.","line":7,"column":29,"nodeType":null,"messageId":"unusedVar","endLine":7,"endColumn":37},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'TabsTrigger' is defined but never used.","line":7,"column":39,"nodeType":null,"messageId":"unusedVar","endLine":7,"endColumn":50},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'useIntegrations' is defined but never used.","line":10,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":10,"endColumn":25},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'Filter' is defined but never used.","line":25,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":25,"endColumn":9},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'Building' is defined but never used.","line":29,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":29,"endColumn":11},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'AlertCircle' is defined but never used.","line":33,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":33,"endColumn":14},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'Clock' is defined but never used.","line":35,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":35,"endColumn":8},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'XCircle' is defined but never used.","line":36,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":36,"endColumn":10},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":53,"column":17,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":53,"endColumn":20,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1241,1244],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1241,1244],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'user' is assigned a value but never used.","line":78,"column":11,"nodeType":null,"messageId":"unusedVar","endLine":78,"endColumn":15},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'isLoading' is assigned a value but never used.","line":82,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":82,"endColumn":19},{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has a missing dependency: 'fetchLeads'. Either include it or remove the dependency array.","line":90,"column":6,"nodeType":"ArrayExpression","endLine":90,"endColumn":8,"suggestions":[{"desc":"Update the dependencies array to be: [fetchLeads]","fix":{"range":[2224,2226],"text":"[fetchLeads]"}}]},{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has a missing dependency: 'filterLeads'. Either include it or remove the dependency array.","line":94,"column":6,"nodeType":"ArrayExpression","endLine":94,"endColumn":52,"suggestions":[{"desc":"Update the dependencies array to be: [leads, searchTerm, statusFilter, scoreFilter, filterLeads]","fix":{"range":[2274,2320],"text":"[leads, searchTerm, statusFilter, scoreFilter, filterLeads]"}}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'error' is defined but never used.","line":103,"column":14,"nodeType":null,"messageId":"unusedVar","endLine":103,"endColumn":19},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'error' is defined but never used.","line":161,"column":14,"nodeType":null,"messageId":"unusedVar","endLine":161,"endColumn":19},{"ruleId":"no-restricted-syntax","severity":1,"message":"Use design tokens instead of hardcoded colors (e.g., bg-primary, bg-secondary)","line":349,"column":38,"nodeType":"Literal","messageId":"restrictedSyntax","endLine":349,"endColumn":80},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'index' is defined but never used.","line":385,"column":70,"nodeType":null,"messageId":"unusedVar","endLine":385,"endColumn":75},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'e' is defined but never used.","line":490,"column":30,"nodeType":null,"messageId":"unusedVar","endLine":490,"endColumn":31}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":20,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState, useEffect } from 'react';\nimport { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/Card';\nimport { Badge } from '@/components/ui/Badge';\nimport { Button } from '@/components/ui/Button';\nimport { Input } from '@/components/ui/Input';\nimport { Select } from '@/components/ui/Select';\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from '@/components/ui/Tabs';\nimport { useToast } from '@/components/ui/Toast';\nimport { useAuth } from '@/contexts/AuthContext';\nimport { useIntegrations } from '@/lib/hooks/useIntegrations';\nimport {\n  BarChart,\n  Bar,\n  XAxis,\n  YAxis,\n  CartesianGrid,\n  Tooltip,\n  ResponsiveContainer,\n  PieChart,\n  Pie,\n  Cell\n} from 'recharts';\nimport {\n  Search,\n  Filter,\n  Download,\n  Mail,\n  Phone,\n  Building,\n  Users,\n  TrendingUp,\n  Star,\n  AlertCircle,\n  CheckCircle2,\n  Clock,\n  XCircle\n} from 'lucide-react';\n\ninterface VARLead {\n  id: string;\n  email: string;\n  company: string;\n  status: 'new' | 'contacted' | 'qualified' | 'proposal' | 'negotiation' | 'closed' | 'lost';\n  score: number;\n  source: string;\n  notes?: string;\n  createdAt: string;\n  updatedAt: string;\n  contact: {\n    firstName?: string;\n    lastName?: string;\n    phone?: string;\n    properties: any;\n  };\n}\n\nconst COLORS = {\n  new: '#3b82f6',\n  contacted: '#8b5cf6',\n  qualified: '#10b981',\n  proposal: '#f59e0b',\n  negotiation: '#ef4444',\n  closed: '#22c55e',\n  lost: '#6b7280'\n};\n\nconst STATUS_LABELS = {\n  new: 'New Lead',\n  contacted: 'Contacted',\n  qualified: 'Qualified',\n  proposal: 'Proposal Sent',\n  negotiation: 'In Negotiation',\n  closed: 'Closed Won',\n  lost: 'Closed Lost'\n};\n\nexport const VARLeadDashboard: React.FC = () => {\n  const { user } = useAuth();\n  const { toast } = useToast();\n  const [leads, setLeads] = useState<VARLead[]>([]);\n  const [filteredLeads, setFilteredLeads] = useState<VARLead[]>([]);\n  const [isLoading, setIsLoading] = useState(true);\n  const [searchTerm, setSearchTerm] = useState('');\n  const [statusFilter, setStatusFilter] = useState<string>('all');\n  const [scoreFilter, setScoreFilter] = useState<string>('all');\n  const [selectedLead, setSelectedLead] = useState<VARLead | null>(null);\n\n  useEffect(() => {\n    fetchLeads();\n  }, []);\n\n  useEffect(() => {\n    filterLeads();\n  }, [leads, searchTerm, statusFilter, scoreFilter]);\n\n  const fetchLeads = async () => {\n    try {\n      setIsLoading(true);\n      const response = await fetch('/api/var-leads');\n      if (!response.ok) throw new Error('Failed to fetch leads');\n      const data = await response.json();\n      setLeads(data);\n    } catch (error) {\n      toast({\n        title: 'Error',\n        description: 'Failed to load VAR leads',\n        variant: 'destructive'\n      });\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  const filterLeads = () => {\n    let filtered = [...leads];\n\n    // Apply search filter\n    if (searchTerm) {\n      const searchLower = searchTerm.toLowerCase();\n      filtered = filtered.filter(lead => \n        lead.email.toLowerCase().includes(searchLower) ||\n        lead.company.toLowerCase().includes(searchLower) ||\n        lead.contact.firstName?.toLowerCase().includes(searchLower) ||\n        lead.contact.lastName?.toLowerCase().includes(searchLower)\n      );\n    }\n\n    // Apply status filter\n    if (statusFilter !== 'all') {\n      filtered = filtered.filter(lead => lead.status === statusFilter);\n    }\n\n    // Apply score filter\n    if (scoreFilter !== 'all') {\n      const scoreThreshold = parseFloat(scoreFilter);\n      filtered = filtered.filter(lead => lead.score >= scoreThreshold);\n    }\n\n    setFilteredLeads(filtered);\n  };\n\n  const updateLeadStatus = async (leadId: string, newStatus: VARLead['status']) => {\n    try {\n      const response = await fetch(`/api/var-leads/${leadId}`, {\n        method: 'PATCH',\n        headers: { 'Content-Type': 'application/json' },\n        body: JSON.stringify({ status: newStatus })\n      });\n\n      if (!response.ok) throw new Error('Failed to update lead status');\n\n      setLeads(leads.map(lead => \n        lead.id === leadId ? { ...lead, status: newStatus } : lead\n      ));\n\n      toast({\n        title: 'Success',\n        description: 'Lead status updated successfully',\n        variant: 'success'\n      });\n    } catch (error) {\n      toast({\n        title: 'Error',\n        description: 'Failed to update lead status',\n        variant: 'destructive'\n      });\n    }\n  };\n\n  const getStatusColor = (status: VARLead['status']) => {\n    return COLORS[status];\n  };\n\n  const getLeadStats = () => {\n    const total = leads.length;\n    const byStatus = leads.reduce((acc, lead) => {\n      acc[lead.status] = (acc[lead.status] || 0) + 1;\n      return acc;\n    }, {} as Record<string, number>);\n\n    const avgScore = leads.reduce((sum, lead) => sum + lead.score, 0) / total;\n    const highValueLeads = leads.filter(lead => lead.score >= 0.8).length;\n\n    return {\n      total,\n      byStatus,\n      avgScore,\n      highValueLeads\n    };\n  };\n\n  const stats = getLeadStats();\n\n  return (\n    <div className=\"space-y-6 p-6\">\n      {/* Header */}\n      <div className=\"flex justify-between items-center\">\n        <h1 className=\"text-2xl font-bold\">VAR Lead Management</h1>\n        <div className=\"flex space-x-4\">\n          <Button variant=\"outline\" onClick={() => window.print()}>\n            <Download className=\"w-4 h-4 mr-2\" />\n            Export\n          </Button>\n          <Button>\n            <Mail className=\"w-4 h-4 mr-2\" />\n            Send Campaign\n          </Button>\n        </div>\n      </div>\n\n      {/* Stats Overview */}\n      <div className=\"grid grid-cols-1 md:grid-cols-4 gap-4\">\n        <Card>\n          <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n            <CardTitle className=\"text-sm font-medium\">Total Leads</CardTitle>\n            <Users className=\"h-4 w-4 text-muted-foreground\" />\n          </CardHeader>\n          <CardContent>\n            <div className=\"text-2xl font-bold\">{stats.total}</div>\n            <p className=\"text-xs text-muted-foreground\">\n              Across all sources\n            </p>\n          </CardContent>\n        </Card>\n        <Card>\n          <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n            <CardTitle className=\"text-sm font-medium\">High Value Leads</CardTitle>\n            <Star className=\"h-4 w-4 text-muted-foreground\" />\n          </CardHeader>\n          <CardContent>\n            <div className=\"text-2xl font-bold\">{stats.highValueLeads}</div>\n            <p className=\"text-xs text-muted-foreground\">\n              Score ≥ 0.8\n            </p>\n          </CardContent>\n        </Card>\n        <Card>\n          <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n            <CardTitle className=\"text-sm font-medium\">Average Score</CardTitle>\n            <TrendingUp className=\"h-4 w-4 text-muted-foreground\" />\n          </CardHeader>\n          <CardContent>\n            <div className=\"text-2xl font-bold\">\n              {(stats.avgScore * 100).toFixed(1)}%\n            </div>\n            <p className=\"text-xs text-muted-foreground\">\n              Lead quality score\n            </p>\n          </CardContent>\n        </Card>\n        <Card>\n          <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n            <CardTitle className=\"text-sm font-medium\">Conversion Rate</CardTitle>\n            <CheckCircle2 className=\"h-4 w-4 text-muted-foreground\" />\n          </CardHeader>\n          <CardContent>\n            <div className=\"text-2xl font-bold\">\n              {((stats.byStatus['closed'] || 0) / stats.total * 100).toFixed(1)}%\n            </div>\n            <p className=\"text-xs text-muted-foreground\">\n              Closed won deals\n            </p>\n          </CardContent>\n        </Card>\n      </div>\n\n      {/* Filters */}\n      <div className=\"flex flex-col md:flex-row gap-4\">\n        <div className=\"flex-1\">\n          <Input\n            placeholder=\"Search leads...\"\n            value={searchTerm}\n            onChange={(e) => setSearchTerm(e.target.value)}\n            className=\"w-full\"\n            icon={<Search className=\"w-4 h-4\" />}\n          />\n        </div>\n        <Select\n          value={statusFilter}\n          onValueChange={setStatusFilter}\n          options={[\n            { value: 'all', label: 'All Statuses' },\n            ...Object.entries(STATUS_LABELS).map(([value, label]) => ({\n              value,\n              label\n            }))\n          ]}\n        />\n        <Select\n          value={scoreFilter}\n          onValueChange={setScoreFilter}\n          options={[\n            { value: 'all', label: 'All Scores' },\n            { value: '0.8', label: 'High (≥ 0.8)' },\n            { value: '0.6', label: 'Medium (≥ 0.6)' },\n            { value: '0.4', label: 'Low (≥ 0.4)' }\n          ]}\n        />\n      </div>\n\n      {/* Main Content */}\n      <div className=\"grid grid-cols-1 lg:grid-cols-3 gap-6\">\n        {/* Lead List */}\n        <div className=\"lg:col-span-2\">\n          <Card>\n            <CardHeader>\n              <CardTitle>Lead Pipeline</CardTitle>\n            </CardHeader>\n            <CardContent>\n              <div className=\"space-y-4\">\n                {filteredLeads.map(lead => (\n                  <div\n                    key={lead.id}\n                    className=\"p-4 border rounded-lg hover:bg-accent cursor-pointer\"\n                    onClick={() => setSelectedLead(lead)}\n                  >\n                    <div className=\"flex justify-between items-start\">\n                      <div>\n                        <h3 className=\"font-medium\">{lead.company}</h3>\n                        <p className=\"text-sm text-muted-foreground\">\n                          {lead.contact.firstName} {lead.contact.lastName}\n                        </p>\n                      </div>\n                      <Badge\n                        style={{ backgroundColor: getStatusColor(lead.status) }}\n                      >\n                        {STATUS_LABELS[lead.status]}\n                      </Badge>\n                    </div>\n                    <div className=\"mt-2 flex items-center space-x-4 text-sm text-muted-foreground\">\n                      <span className=\"flex items-center\">\n                        <Mail className=\"w-4 h-4 mr-1\" />\n                        {lead.email}\n                      </span>\n                      {lead.contact.phone && (\n                        <span className=\"flex items-center\">\n                          <Phone className=\"w-4 h-4 mr-1\" />\n                          {lead.contact.phone}\n                        </span>\n                      )}\n                    </div>\n                    <div className=\"mt-2\">\n                      <div className=\"flex items-center justify-between\">\n                        <span className=\"text-sm\">Lead Score</span>\n                        <span className=\"text-sm font-medium\">\n                          {(lead.score * 100).toFixed(0)}%\n                        </span>\n                      </div>\n                      <div className=\"w-full bg-gray-200 rounded-full h-2 mt-1\">\n                        <div\n                          className=\"bg-primary rounded-full h-2\"\n                          style={{ width: `${lead.score * 100}%` }}\n                        />\n                      </div>\n                    </div>\n                  </div>\n                ))}\n              </div>\n            </CardContent>\n          </Card>\n        </div>\n\n        {/* Analytics */}\n        <div className=\"space-y-6\">\n          <Card>\n            <CardHeader>\n              <CardTitle>Lead Distribution</CardTitle>\n            </CardHeader>\n            <CardContent>\n              <div className=\"h-[300px]\">\n                <ResponsiveContainer width=\"100%\" height=\"100%\">\n                  <PieChart>\n                    <Pie\n                      data={Object.entries(stats.byStatus).map(([status, count]) => ({\n                        name: STATUS_LABELS[status as VARLead['status']],\n                        value: count\n                      }))}\n                      cx=\"50%\"\n                      cy=\"50%\"\n                      innerRadius={60}\n                      outerRadius={80}\n                      paddingAngle={5}\n                      dataKey=\"value\"\n                    >\n                      {Object.entries(stats.byStatus).map(([status], index) => (\n                        <Cell\n                          key={status}\n                          fill={COLORS[status as VARLead['status']]}\n                        />\n                      ))}\n                    </Pie>\n                    <Tooltip />\n                  </PieChart>\n                </ResponsiveContainer>\n              </div>\n            </CardContent>\n          </Card>\n\n          <Card>\n            <CardHeader>\n              <CardTitle>Lead Sources</CardTitle>\n            </CardHeader>\n            <CardContent>\n              <div className=\"h-[300px]\">\n                <ResponsiveContainer width=\"100%\" height=\"100%\">\n                  <BarChart\n                    data={Object.entries(\n                      leads.reduce((acc, lead) => {\n                        acc[lead.source] = (acc[lead.source] || 0) + 1;\n                        return acc;\n                      }, {} as Record<string, number>)\n                    ).map(([source, count]) => ({\n                      name: source,\n                      value: count\n                    }))}\n                  >\n                    <CartesianGrid strokeDasharray=\"3 3\" />\n                    <XAxis dataKey=\"name\" />\n                    <YAxis />\n                    <Tooltip />\n                    <Bar dataKey=\"value\" fill=\"#3b82f6\" />\n                  </BarChart>\n                </ResponsiveContainer>\n              </div>\n            </CardContent>\n          </Card>\n        </div>\n      </div>\n\n      {/* Lead Details Modal */}\n      {selectedLead && (\n        <div className=\"fixed inset-0 bg-black/50 flex items-center justify-center z-50\">\n          <Card className=\"w-full max-w-2xl\">\n            <CardHeader className=\"flex justify-between items-center\">\n              <CardTitle>Lead Details</CardTitle>\n              <Button\n                variant=\"ghost\"\n                size=\"sm\"\n                onClick={() => setSelectedLead(null)}\n              >\n                <X className=\"w-4 h-4\" />\n              </Button>\n            </CardHeader>\n            <CardContent className=\"space-y-6\">\n              <div className=\"grid grid-cols-2 gap-4\">\n                <div>\n                  <h3 className=\"font-medium\">Company</h3>\n                  <p className=\"text-muted-foreground\">{selectedLead.company}</p>\n                </div>\n                <div>\n                  <h3 className=\"font-medium\">Contact</h3>\n                  <p className=\"text-muted-foreground\">\n                    {selectedLead.contact.firstName} {selectedLead.contact.lastName}\n                  </p>\n                </div>\n                <div>\n                  <h3 className=\"font-medium\">Email</h3>\n                  <p className=\"text-muted-foreground\">{selectedLead.email}</p>\n                </div>\n                <div>\n                  <h3 className=\"font-medium\">Phone</h3>\n                  <p className=\"text-muted-foreground\">\n                    {selectedLead.contact.phone || 'N/A'}\n                  </p>\n                </div>\n              </div>\n\n              <div>\n                <h3 className=\"font-medium mb-2\">Lead Status</h3>\n                <div className=\"flex space-x-2\">\n                  {Object.entries(STATUS_LABELS).map(([status, label]) => (\n                    <Button\n                      key={status}\n                      variant={selectedLead.status === status ? 'default' : 'outline'}\n                      size=\"sm\"\n                      onClick={() => updateLeadStatus(selectedLead.id, status as VARLead['status'])}\n                    >\n                      {label}\n                    </Button>\n                  ))}\n                </div>\n              </div>\n\n              <div>\n                <h3 className=\"font-medium mb-2\">Notes</h3>\n                <textarea\n                  className=\"w-full p-2 border rounded\"\n                  rows={4}\n                  value={selectedLead.notes || ''}\n                  onChange={(e) => {\n                    // Handle notes update\n                  }}\n                  placeholder=\"Add notes about this lead...\"\n                />\n              </div>\n\n              <div className=\"flex justify-end space-x-2\">\n                <Button variant=\"outline\" onClick={() => setSelectedLead(null)}>\n                  Close\n                </Button>\n                <Button>Save Changes</Button>\n              </div>\n            </CardContent>\n          </Card>\n        </div>\n      )}\n    </div>\n  );\n}; ","usedDeprecatedRules":[]},{"filePath":"/home/vonj/Github/Nexus/src/components/features/FeatureExplorer.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'useState' is defined but never used.","line":1,"column":17,"nodeType":null,"messageId":"unusedVar","endLine":1,"endColumn":25},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'useEffect' is defined but never used.","line":1,"column":27,"nodeType":null,"messageId":"unusedVar","endLine":1,"endColumn":36},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'Filter' is defined but never used.","line":2,"column":18,"nodeType":null,"messageId":"unusedVar","endLine":2,"endColumn":24},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'ChevronRight' is defined but never used.","line":2,"column":26,"nodeType":null,"messageId":"unusedVar","endLine":2,"endColumn":38},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'Star' is defined but never used.","line":2,"column":40,"nodeType":null,"messageId":"unusedVar","endLine":2,"endColumn":44},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'Clock' is defined but never used.","line":2,"column":46,"nodeType":null,"messageId":"unusedVar","endLine":2,"endColumn":51},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'Bookmark' is defined but never used.","line":2,"column":53,"nodeType":null,"messageId":"unusedVar","endLine":2,"endColumn":61},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'Plus' is defined but never used.","line":2,"column":63,"nodeType":null,"messageId":"unusedVar","endLine":2,"endColumn":67},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'Calendar' is defined but never used.","line":2,"column":92,"nodeType":null,"messageId":"unusedVar","endLine":2,"endColumn":100},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'getAllFeatures' is defined but never used.","line":6,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":6,"endColumn":17},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'getFeaturesByCategory' is defined but never used.","line":7,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":7,"endColumn":24},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'getFeaturesByAccessLevel' is defined but never used.","line":8,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":8,"endColumn":27},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'searchFeatures' is defined but never used.","line":9,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":9,"endColumn":17},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'FeatureDefinition' is defined but never used.","line":10,"column":8,"nodeType":null,"messageId":"unusedVar","endLine":10,"endColumn":25},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'FeatureCategory' is defined but never used.","line":11,"column":8,"nodeType":null,"messageId":"unusedVar","endLine":11,"endColumn":23},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'FeatureAccessLevel' is defined but never used.","line":12,"column":8,"nodeType":null,"messageId":"unusedVar","endLine":12,"endColumn":26},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'Tabs' is defined but never used.","line":20,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":20,"endColumn":7},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'TabsContent' is defined but never used.","line":20,"column":9,"nodeType":null,"messageId":"unusedVar","endLine":20,"endColumn":20},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'TabsList' is defined but never used.","line":20,"column":22,"nodeType":null,"messageId":"unusedVar","endLine":20,"endColumn":30},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'TabsTrigger' is defined but never used.","line":20,"column":32,"nodeType":null,"messageId":"unusedVar","endLine":20,"endColumn":43},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'Separator' is defined but never used.","line":21,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":21,"endColumn":12},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'FeatureExplorerProps' is defined but never used.","line":24,"column":11,"nodeType":null,"messageId":"unusedVar","endLine":24,"endColumn":31},{"ruleId":"no-restricted-syntax","severity":1,"message":"Use design tokens instead of hardcoded colors (e.g., bg-primary, bg-secondary)","line":105,"column":18,"nodeType":"Literal","messageId":"restrictedSyntax","endLine":105,"endColumn":33},{"ruleId":"no-restricted-syntax","severity":1,"message":"Use design tokens instead of hardcoded colors (e.g., bg-primary, bg-secondary)","line":131,"column":18,"nodeType":"Literal","messageId":"restrictedSyntax","endLine":131,"endColumn":31}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":24,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState, useEffect } from 'react';\nimport { Search, Filter, ChevronRight, Star, Clock, Bookmark, Plus, Zap, BarChart2, Users, Calendar, MessageSquare, FileText, Settings, CreditCard, ArrowRight } from 'lucide-react';\nimport { useNavigate } from 'react-router-dom';\n\nimport { \n  getAllFeatures, \n  getFeaturesByCategory,\n  getFeaturesByAccessLevel,\n  searchFeatures,\n  type FeatureDefinition,\n  type FeatureCategory,\n  type FeatureAccessLevel\n} from '../../lib/featureRegistry';\n\nimport { \n  Card, CardContent, CardDescription, CardHeader, CardTitle,\n  Button,\n  Badge,\n  Input,\n  Tabs, TabsContent, TabsList, TabsTrigger,\n  Separator\n} from '@/components/ui';\n\ninterface FeatureExplorerProps {\n  /** User's current plan */\n  userPlan?: 'free' | 'pro' | 'enterprise';\n  /** Whether user is admin */\n  isAdmin?: boolean;\n  /** Whether user is owner */\n  isOwner?: boolean;\n  /** Callback for when feature is pinned */\n  onFeaturePin?: (featureId: string) => void;\n  /** IDs of already pinned features */\n  pinnedFeatures?: string[];\n  /** Show recent features first */\n  showRecentFirst?: boolean;\n  /** Callback for when feature is launched */\n  onFeatureLaunch?: (featureId: string) => void;\n}\n\n/**\n * FeatureExplorer - Showcases all available features in the application\n * \n * Provides a central hub for discovering and accessing all Nexus capabilities\n */\nexport const FeatureExplorer: React.FC = () => {\n  const navigate = useNavigate();\n\n  // Feature categories\n  const featureCategories = [\n    {\n      name: 'Core Features',\n      features: [\n        { \n          name: 'Dashboard', \n          description: 'Overview of key metrics and performance indicators', \n          icon: <BarChart2 className=\"h-5 w-5\" />, \n          path: '/dashboard',\n          color: 'bg-primary'\n        },\n        { \n          name: 'AI Hub', \n          description: 'AI-powered insights and automation tools', \n          icon: <Zap className=\"h-5 w-5\" />, \n          path: '/ai-dashboard',\n          color: 'bg-secondary',\n          new: true\n        },\n      ]\n    },\n    {\n      name: 'Departments',\n      features: [\n        { \n          name: 'Sales', \n          description: 'Manage leads, deals and sales processes', \n          icon: <CreditCard className=\"h-5 w-5\" />, \n          path: '/sales',\n          color: 'bg-success'\n        },\n        { \n          name: 'Finance', \n          description: 'Financial reports, invoices and budgets', \n          icon: <CreditCard className=\"h-5 w-5\" />, \n          path: '/finance',\n          color: 'bg-warning'\n        },\n        { \n          name: 'Operations', \n          description: 'Workflow management and operational metrics', \n          icon: <BarChart2 className=\"h-5 w-5\" />, \n          path: '/operations',\n          color: 'bg-warning'\n        },\n      ]\n    },\n    {\n      name: 'Tools',\n      features: [\n        { \n          name: 'Messaging', \n          description: 'Internal communication and team chat', \n          icon: <MessageSquare className=\"h-5 w-5\" />, \n          path: '/messages',\n          color: 'bg-indigo-500'\n        },\n        { \n          name: 'Documents', \n          description: 'Create and manage documents and files', \n          icon: <FileText className=\"h-5 w-5\" />, \n          path: '/documents',\n          color: 'bg-destructive'\n        },\n        { \n          name: 'Team', \n          description: 'Manage users, roles and permissions', \n          icon: <Users className=\"h-5 w-5\" />, \n          path: '/team',\n          color: 'bg-cyan-500'\n        },\n      ]\n    },\n    {\n      name: 'Settings & Administration',\n      features: [\n        { \n          name: 'Settings', \n          description: 'Configure application preferences and account settings', \n          icon: <Settings className=\"h-5 w-5\" />, \n          path: '/settings',\n          color: 'bg-gray-500'\n        },\n      ]\n    }\n  ];\n\n  return (\n    <div className=\"space-y-6\">\n      <div className=\"flex items-center justify-between\">\n        <div>\n          <h1 className=\"text-2xl font-bold\">Feature Explorer</h1>\n          <p className=\"text-muted-foreground\">Discover all capabilities of Nexus</p>\n        </div>\n      </div>\n\n      {/* Search */}\n      <Card>\n        <CardContent className=\"p-4\">\n          <div className=\"relative\">\n            <Search className=\"absolute left-3 top-1/2 transform -translate-y-1/2 h-4 w-4 text-muted-foreground\" />\n            <Input\n              placeholder=\"Search features...\"\n              className=\"pl-10\"\n            />\n          </div>\n        </CardContent>\n      </Card>\n\n      {/* Feature Categories */}\n      {featureCategories.map((category) => (\n        <div key={category.name} className=\"space-y-4\">\n          <h2 className=\"text-xl font-semibold\">{category.name}</h2>\n          <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4\">\n            {category.features.map((feature) => (\n              <Card \n                key={feature.name} \n                className=\"overflow-hidden hover:shadow-md transition-shadow cursor-pointer\"\n                onClick={() => navigate(feature.path)}\n              >\n                <div className={`h-1 ${feature.color}`}></div>\n                <CardHeader>\n                  <div className=\"flex items-center justify-between\">\n                    <div className=\"flex items-center space-x-3\">\n                      <div className={`p-2 rounded-md ${feature.color} bg-opacity-10`}>\n                        {feature.icon}\n                      </div>\n                      <CardTitle className=\"text-lg\">{feature.name}</CardTitle>\n                    </div>\n                    {feature.new && (\n                      <Badge className=\"bg-secondary\">New</Badge>\n                    )}\n                  </div>\n                  <CardDescription>{feature.description}</CardDescription>\n                </CardHeader>\n                <CardContent>\n                  <Button variant=\"ghost\" className=\"pl-0 hover:pl-2 transition-all\">\n                    Explore <ArrowRight className=\"h-4 w-4 ml-2\" />\n                  </Button>\n                </CardContent>\n              </Card>\n            ))}\n          </div>\n        </div>\n      ))}\n    </div>\n  );\n}; ","usedDeprecatedRules":[]},{"filePath":"/home/vonj/Github/Nexus/src/components/help/ContextualHelp.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'Video' is defined but never used.","line":9,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":9,"endColumn":8},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'ExternalLink' is defined but never used.","line":10,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":10,"endColumn":15},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'X' is defined but never used.","line":13,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":13,"endColumn":4},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'PlayCircle' is defined but never used.","line":14,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":14,"endColumn":13},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'MessageCircle' is defined but never used.","line":15,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":15,"endColumn":16},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'placement' is assigned a value but never used.","line":158,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":158,"endColumn":12},{"ruleId":"react-refresh/only-export-components","severity":1,"message":"Fast refresh only works when a file only exports components. Use a new file to share constants or functions between components.","line":353,"column":14,"nodeType":"Identifier","messageId":"namedExport","endLine":353,"endColumn":31}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState } from 'react';\nimport { Button } from '@/components/ui/Button';\nimport { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/Card';\nimport { Badge } from '@/components/ui/Badge';\nimport { Dialog, DialogContent, DialogHeader, DialogTitle, DialogTrigger } from '@/components/ui/Dialog';\nimport { \n  HelpCircle, \n  BookOpen, \n  Video, \n  ExternalLink, \n  Lightbulb, \n  ArrowRight,\n  X,\n  PlayCircle,\n  MessageCircle\n} from 'lucide-react';\nimport { useNavigate } from 'react-router-dom';\n\ninterface ContextualHelpProps {\n  topic: string;\n  title?: string;\n  description?: string;\n  tips?: string[];\n  relatedJourneys?: string[];\n  quickActions?: Array<{\n    label: string;\n    action: string;\n    route?: string;\n  }>;\n  variant?: 'icon' | 'card' | 'inline';\n  placement?: 'top' | 'bottom' | 'left' | 'right';\n}\n\ninterface HelpContent {\n  [key: string]: {\n    title: string;\n    description: string;\n    tips: string[];\n    relatedJourneys: string[];\n    quickActions: Array<{\n      label: string;\n      action: string;\n      route?: string;\n    }>;\n    videoUrl?: string;\n    documentationUrl?: string;\n  };\n}\n\n// Comprehensive help content database\nconst helpContent: HelpContent = {\n  'dashboard': {\n    title: 'Business Dashboard',\n    description: 'Your central command center for business insights and AI-powered recommendations.',\n    tips: [\n      'Check your business health score daily for early warning signs',\n      'Click on any metric to drill down into detailed analytics',\n      'Use the AI chat to ask questions about your data',\n      'Set up alerts for important KPI changes'\n    ],\n    relatedJourneys: ['getting-started', 'business-intelligence'],\n    quickActions: [\n      { label: 'View Analytics', action: 'Open detailed analytics', route: '/analytics' },\n      { label: 'AI Chat', action: 'Ask AI about your data', route: '/chat' },\n      { label: 'Customize Dashboard', action: 'Personalize your view', route: '/settings' }\n    ]\n  },\n  'integrations': {\n    title: 'Business Integrations',\n    description: 'Connect your business tools to unlock AI-powered automation and insights.',\n    tips: [\n      'Start with your most-used business tool for immediate value',\n      'Microsoft 365 provides instant email and calendar intelligence',\n      'PayPal integration gives real-time financial insights',\n      'Each integration unlocks new AI capabilities'\n    ],\n    relatedJourneys: ['getting-started', 'integration-mastery'],\n    quickActions: [\n      { label: 'Connect Microsoft 365', action: 'Set up email integration', route: '/integrations' },\n      { label: 'Connect PayPal', action: 'Add financial data', route: '/integrations' },\n      { label: 'View All Integrations', action: 'Browse available tools', route: '/integrations' }\n    ]\n  },\n  'ai-chat': {\n    title: 'AI Assistant',\n    description: 'Your intelligent business partner that learns from your data and provides personalized insights.',\n    tips: [\n      'Ask specific questions about your business metrics',\n      'Use slash commands for quick actions (/help, /analyze, /create)',\n      'Request insights: \"What should I focus on today?\"',\n      'Ask for recommendations: \"How can I improve my cash flow?\"'\n    ],\n    relatedJourneys: ['getting-started', 'ai-transformation'],\n    quickActions: [\n      { label: 'Start Chat', action: 'Begin conversation', route: '/chat' },\n      { label: 'View AI Hub', action: 'Explore AI features', route: '/ai-hub' },\n      { label: 'Learn Slash Commands', action: 'Master quick actions', route: '/user-guide' }\n    ]\n  },\n  'analytics': {\n    title: 'Business Intelligence',\n    description: 'Comprehensive analytics and KPI tracking powered by your connected business data.',\n    tips: [\n      'Monitor your business health score for overall performance',\n      'Set up custom KPIs specific to your business goals',\n      'Use predictive analytics to forecast trends',\n      'Export reports for stakeholder meetings'\n    ],\n    relatedJourneys: ['business-intelligence'],\n    quickActions: [\n      { label: 'Data Warehouse', action: 'Deep dive into data', route: '/analytics/data-warehouse' },\n      { label: 'Custom KPIs', action: 'Set up metrics', route: '/analytics' },\n      { label: 'Export Report', action: 'Generate report', route: '/analytics' }\n    ]\n  },\n  'documents': {\n    title: 'Document Management',\n    description: 'AI-powered document organization, search, and collaboration.',\n    tips: [\n      'Upload documents for AI-powered analysis and insights',\n      'Use semantic search to find documents by content',\n      'Get document summaries and key points extraction',\n      'Set up automated document workflows'\n    ],\n    relatedJourneys: ['team-collaboration'],\n    quickActions: [\n      { label: 'Upload Document', action: 'Add new file', route: '/documents' },\n      { label: 'Search Documents', action: 'Find content', route: '/documents' },\n      { label: 'AI Analysis', action: 'Get insights', route: '/documents' }\n    ]\n  },\n  'automation': {\n    title: 'Workflow Automation',\n    description: 'Pre-built automation recipes and custom workflow creation.',\n    tips: [\n      'Start with pre-built recipes for common business tasks',\n      'Customize workflows to match your specific processes',\n      'Test automations in sandbox mode before going live',\n      'Monitor automation performance and ROI'\n    ],\n    relatedJourneys: ['productivity-mastery', 'ai-transformation'],\n    quickActions: [\n      { label: 'Browse Recipes', action: 'Find automation templates', route: '/automation-recipes' },\n      { label: 'Create Custom', action: 'Build your own', route: '/api-learning' },\n      { label: 'Monitor Performance', action: 'Check automation health', route: '/analytics' }\n    ]\n  }\n};\n\nexport const ContextualHelp: React.FC<ContextualHelpProps> = ({\n  topic,\n  title,\n  description,\n  tips,\n  relatedJourneys,\n  quickActions,\n  variant = 'icon',\n  placement = 'right'\n}) => {\n  const [isOpen, setIsOpen] = useState(false);\n  const navigate = useNavigate();\n\n  // Get help content for the topic\n  const content = helpContent[topic] || {\n    title: title || 'Help',\n    description: description || 'Get help with this feature.',\n    tips: tips || [],\n    relatedJourneys: relatedJourneys || [],\n    quickActions: quickActions || []\n  };\n\n  const handleQuickAction = (action: { label: string; action: string; route?: string }) => {\n    if (action.route) {\n      navigate(action.route);\n      setIsOpen(false);\n    }\n  };\n\n  const handleJourneyNavigation = (journeyId: string) => {\n    navigate(`/user-guide?journey=${journeyId}`);\n    setIsOpen(false);\n  };\n\n  if (variant === 'icon') {\n    return (\n      <Dialog open={isOpen} onOpenChange={setIsOpen}>\n        <DialogTrigger asChild>\n          <Button\n            variant=\"ghost\"\n            size=\"sm\"\n            className=\"h-6 w-6 p-0 text-muted-foreground hover:text-foreground\"\n          >\n            <HelpCircle className=\"h-4 w-4\" />\n          </Button>\n        </DialogTrigger>\n        \n        <DialogContent className=\"max-w-md\">\n          <DialogHeader>\n            <DialogTitle className=\"flex items-center space-x-2\">\n              <Lightbulb className=\"h-5 w-5 text-primary\" />\n              <span>{content.title}</span>\n            </DialogTitle>\n          </DialogHeader>\n          \n          <div className=\"space-y-4\">\n            <p className=\"text-sm text-muted-foreground\">\n              {content.description}\n            </p>\n            \n            {/* Tips */}\n            {content.tips.length > 0 && (\n              <div>\n                <h4 className=\"font-medium text-sm mb-2\">💡 Quick Tips</h4>\n                <ul className=\"text-xs text-muted-foreground space-y-1\">\n                  {content.tips.map((tip, idx) => (\n                    <li key={idx}>• {tip}</li>\n                  ))}\n                </ul>\n              </div>\n            )}\n            \n            {/* Quick Actions */}\n            {content.quickActions.length > 0 && (\n              <div>\n                <h4 className=\"font-medium text-sm mb-2\">🚀 Quick Actions</h4>\n                <div className=\"space-y-2\">\n                  {content.quickActions.map((action, idx) => (\n                    <Button\n                      key={idx}\n                      variant=\"outline\"\n                      size=\"sm\"\n                      className=\"w-full justify-start text-xs\"\n                      onClick={() => handleQuickAction(action)}\n                    >\n                      <ArrowRight className=\"h-3 w-3 mr-2\" />\n                      {action.label}\n                    </Button>\n                  ))}\n                </div>\n              </div>\n            )}\n            \n            {/* Related Journeys */}\n            {content.relatedJourneys.length > 0 && (\n              <div>\n                <h4 className=\"font-medium text-sm mb-2\">📚 Learn More</h4>\n                <div className=\"space-y-1\">\n                  {content.relatedJourneys.map((journeyId, idx) => (\n                    <Button\n                      key={idx}\n                      variant=\"ghost\"\n                      size=\"sm\"\n                      className=\"w-full justify-start text-xs\"\n                      onClick={() => handleJourneyNavigation(journeyId)}\n                    >\n                      <BookOpen className=\"h-3 w-3 mr-2\" />\n                      Complete {journeyId.replace('-', ' ')} journey\n                    </Button>\n                  ))}\n                </div>\n              </div>\n            )}\n            \n            <div className=\"pt-2 border-t\">\n              <Button\n                variant=\"ghost\"\n                size=\"sm\"\n                className=\"w-full text-xs\"\n                onClick={() => navigate('/user-guide')}\n              >\n                <BookOpen className=\"h-3 w-3 mr-2\" />\n                View Complete User Guide\n              </Button>\n            </div>\n          </div>\n        </DialogContent>\n      </Dialog>\n    );\n  }\n\n  if (variant === 'card') {\n    return (\n      <Card className=\"border-primary/20 bg-primary/5\">\n        <CardHeader className=\"pb-2\">\n          <CardTitle className=\"text-sm flex items-center space-x-2\">\n            <Lightbulb className=\"h-4 w-4 text-primary\" />\n            <span>{content.title}</span>\n            <Badge variant=\"outline\" className=\"ml-auto\">Help</Badge>\n          </CardTitle>\n        </CardHeader>\n        <CardContent className=\"pt-0\">\n          <p className=\"text-xs text-muted-foreground mb-3\">\n            {content.description}\n          </p>\n          \n          {content.tips.length > 0 && (\n            <div className=\"mb-3\">\n              <h5 className=\"font-medium text-xs mb-1\">Quick Tips:</h5>\n              <ul className=\"text-xs text-muted-foreground space-y-1\">\n                {content.tips.slice(0, 2).map((tip, idx) => (\n                  <li key={idx}>• {tip}</li>\n                ))}\n              </ul>\n            </div>\n          )}\n          \n          <div className=\"flex items-center space-x-2\">\n            <Button\n              size=\"sm\"\n              variant=\"outline\"\n              className=\"text-xs\"\n              onClick={() => navigate('/user-guide')}\n            >\n              <BookOpen className=\"h-3 w-3 mr-1\" />\n              Learn More\n            </Button>\n            {content.quickActions[0] && (\n              <Button\n                size=\"sm\"\n                className=\"text-xs\"\n                onClick={() => handleQuickAction(content.quickActions[0])}\n              >\n                {content.quickActions[0].label}\n              </Button>\n            )}\n          </div>\n        </CardContent>\n      </Card>\n    );\n  }\n\n  if (variant === 'inline') {\n    return (\n      <div className=\"inline-flex items-center space-x-2 text-xs text-muted-foreground\">\n        <HelpCircle className=\"h-3 w-3\" />\n        <span>{content.description}</span>\n        <Button\n          variant=\"link\"\n          size=\"sm\"\n          className=\"h-auto p-0 text-xs\"\n          onClick={() => navigate('/user-guide')}\n        >\n          Learn more\n        </Button>\n      </div>\n    );\n  }\n\n  return null;\n};\n\n// Export helper hook for easy integration\nexport const useContextualHelp = (topic: string) => {\n  const navigate = useNavigate();\n  \n  const showHelp = () => {\n    navigate(`/user-guide?topic=${topic}`);\n  };\n  \n  const getHelpContent = () => {\n    return helpContent[topic];\n  };\n  \n  return { showHelp, getHelpContent };\n};","usedDeprecatedRules":[]},{"filePath":"/home/vonj/Github/Nexus/src/components/help/HelpSidebar.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/vonj/Github/Nexus/src/components/help/UserGuideSystem.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'Video' is defined but never used.","line":14,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":14,"endColumn":8},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'Lightbulb' is defined but never used.","line":17,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":17,"endColumn":12},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'Settings' is defined but never used.","line":19,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":19,"endColumn":11},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'FileText' is defined but never used.","line":23,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":23,"endColumn":11},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'Calendar' is defined but never used.","line":24,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":24,"endColumn":11},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'Inbox' is defined but never used.","line":26,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":26,"endColumn":8},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'user' is assigned a value but never used.","line":62,"column":11,"nodeType":null,"messageId":"unusedVar","endLine":62,"endColumn":15},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'selectedJourney' is assigned a value but never used.","line":64,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":64,"endColumn":25},{"ruleId":"no-restricted-syntax","severity":1,"message":"Use design tokens instead of hardcoded colors (e.g., bg-primary, bg-secondary)","line":382,"column":31,"nodeType":"Literal","messageId":"restrictedSyntax","endLine":382,"endColumn":98},{"ruleId":"no-restricted-syntax","severity":1,"message":"Use design tokens instead of hardcoded text colors (e.g., text-foreground, text-muted-foreground)","line":382,"column":31,"nodeType":"Literal","messageId":"restrictedSyntax","endLine":382,"endColumn":98},{"ruleId":"no-restricted-syntax","severity":1,"message":"Use design tokens instead of hardcoded colors (e.g., bg-primary, bg-secondary)","line":383,"column":35,"nodeType":"Literal","messageId":"restrictedSyntax","endLine":383,"endColumn":106},{"ruleId":"no-restricted-syntax","severity":1,"message":"Use design tokens instead of hardcoded text colors (e.g., text-foreground, text-muted-foreground)","line":383,"column":35,"nodeType":"Literal","messageId":"restrictedSyntax","endLine":383,"endColumn":106},{"ruleId":"no-restricted-syntax","severity":1,"message":"Use design tokens instead of hardcoded colors (e.g., bg-primary, bg-secondary)","line":384,"column":31,"nodeType":"Literal","messageId":"restrictedSyntax","endLine":384,"endColumn":90},{"ruleId":"no-restricted-syntax","severity":1,"message":"Use design tokens instead of hardcoded text colors (e.g., text-foreground, text-muted-foreground)","line":384,"column":31,"nodeType":"Literal","messageId":"restrictedSyntax","endLine":384,"endColumn":90},{"ruleId":"no-restricted-syntax","severity":1,"message":"Use design tokens instead of hardcoded colors (e.g., bg-primary, bg-secondary)","line":385,"column":23,"nodeType":"Literal","messageId":"restrictedSyntax","endLine":385,"endColumn":86},{"ruleId":"no-restricted-syntax","severity":1,"message":"Use design tokens instead of hardcoded text colors (e.g., text-foreground, text-muted-foreground)","line":385,"column":23,"nodeType":"Literal","messageId":"restrictedSyntax","endLine":385,"endColumn":86},{"ruleId":"no-restricted-syntax","severity":1,"message":"Use design tokens instead of hardcoded text colors (e.g., text-foreground, text-muted-foreground)","line":555,"column":66,"nodeType":"Literal","messageId":"restrictedSyntax","endLine":555,"endColumn":90}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":17,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState, useEffect } from 'react';\nimport { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/Card';\nimport { Button } from '@/components/ui/Button';\nimport { Badge } from '@/components/ui/Badge';\nimport { Progress } from '@/components/ui/Progress';\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from '@/components/ui/Tabs';\nimport { Dialog, DialogContent, DialogHeader, DialogTitle, DialogTrigger } from '@/components/ui/Dialog';\nimport { \n  PlayCircle, \n  CheckCircle, \n  Clock, \n  ArrowRight, \n  BookOpen, \n  Video, \n  Users, \n  Target,\n  Lightbulb,\n  TrendingUp,\n  Settings,\n  Zap,\n  Brain,\n  BarChart2,\n  FileText,\n  Calendar,\n  CheckSquare,\n  Inbox\n} from 'lucide-react';\nimport { useAuth } from '@/contexts/AuthContext';\nimport { useNavigate } from 'react-router-dom';\n\ninterface UserJourney {\n  id: string;\n  title: string;\n  description: string;\n  estimatedTime: string;\n  difficulty: 'Beginner' | 'Intermediate' | 'Advanced';\n  category: 'Getting Started' | 'Core Features' | 'Advanced' | 'Integrations';\n  steps: JourneyStep[];\n  prerequisites?: string[];\n  outcomes: string[];\n  icon: React.ReactNode;\n}\n\ninterface JourneyStep {\n  id: string;\n  title: string;\n  description: string;\n  action: string;\n  route?: string;\n  component?: string;\n  estimatedTime: string;\n  tips?: string[];\n  videoUrl?: string;\n  completed?: boolean;\n}\n\ninterface UserGuideSystemProps {\n  onClose?: () => void;\n}\n\nexport const UserGuideSystem: React.FC<UserGuideSystemProps> = ({ onClose }) => {\n  const { user } = useAuth();\n  const navigate = useNavigate();\n  const [selectedJourney, setSelectedJourney] = useState<UserJourney | null>(null);\n  const [completedSteps, setCompletedSteps] = useState<Record<string, boolean>>({});\n  const [activeCategory, setActiveCategory] = useState<string>('Getting Started');\n\n  // Define comprehensive user journeys\n  const userJourneys: UserJourney[] = [\n    {\n      id: 'getting-started',\n      title: 'Your First 30 Minutes with Nexus',\n      description: 'Essential setup and orientation to get immediate value from Nexus',\n      estimatedTime: '30 min',\n      difficulty: 'Beginner',\n      category: 'Getting Started',\n      icon: <PlayCircle className=\"h-5 w-5\" />,\n      outcomes: [\n        'Complete profile setup',\n        'Connect first integration',\n        'Create your first AI-powered task',\n        'Understand the Trinity system (Think → See → Act)'\n      ],\n      steps: [\n        {\n          id: 'profile-setup',\n          title: 'Complete Your Profile',\n          description: 'Set up your business profile for personalized AI assistance',\n          action: 'Go to Profile Settings',\n          route: '/settings',\n          estimatedTime: '5 min',\n          tips: [\n            'Add your role and department for better AI recommendations',\n            'Upload a profile photo for team recognition',\n            'Set your communication preferences'\n          ]\n        },\n        {\n          id: 'first-integration',\n          title: 'Connect Your First Business Tool',\n          description: 'Link a key business system to start seeing AI insights',\n          action: 'Visit Integrations',\n          route: '/integrations',\n          estimatedTime: '10 min',\n          tips: [\n            'Start with your most-used tool (email, CRM, or accounting)',\n            'Microsoft 365 integration provides immediate email intelligence',\n            'PayPal integration gives instant financial insights'\n          ]\n        },\n        {\n          id: 'ai-chat-intro',\n          title: 'Meet Your AI Assistant',\n          description: 'Learn how to communicate with Nexus AI for maximum productivity',\n          action: 'Open AI Chat',\n          route: '/chat',\n          estimatedTime: '10 min',\n          tips: [\n            'Try asking: \"What should I focus on today?\"',\n            'Use slash commands for quick actions',\n            'Ask for business insights based on your connected data'\n          ]\n        },\n        {\n          id: 'dashboard-tour',\n          title: 'Explore Your Business Dashboard',\n          description: 'Understand your personalized business health metrics',\n          action: 'View Dashboard',\n          route: '/dashboard',\n          estimatedTime: '5 min',\n          tips: [\n            'Check your business health score',\n            'Review AI-generated insights',\n            'Bookmark important metrics'\n          ]\n        }\n      ]\n    },\n    {\n      id: 'productivity-mastery',\n      title: 'Productivity & Task Management',\n      description: 'Master task management, calendar integration, and workflow automation',\n      estimatedTime: '45 min',\n      difficulty: 'Intermediate',\n      category: 'Core Features',\n      icon: <CheckSquare className=\"h-5 w-5\" />,\n      outcomes: [\n        'Set up automated task creation',\n        'Master calendar integration',\n        'Create productivity workflows',\n        'Track and optimize your time'\n      ],\n      steps: [\n        {\n          id: 'task-setup',\n          title: 'Set Up Smart Task Management',\n          description: 'Configure AI-powered task creation and prioritization',\n          action: 'Open Tasks',\n          route: '/tasks',\n          estimatedTime: '15 min'\n        },\n        {\n          id: 'calendar-sync',\n          title: 'Sync Your Calendar',\n          description: 'Connect calendar for intelligent scheduling and time blocking',\n          action: 'View Calendar',\n          route: '/calendar',\n          estimatedTime: '10 min'\n        },\n        {\n          id: 'automation-setup',\n          title: 'Create Your First Automation',\n          description: 'Build workflows that save time on repetitive tasks',\n          action: 'Browse Automation Recipes',\n          route: '/automation-recipes',\n          estimatedTime: '20 min'\n        }\n      ]\n    },\n    {\n      id: 'business-intelligence',\n      title: 'Business Intelligence & Analytics',\n      description: 'Unlock powerful insights from your business data',\n      estimatedTime: '60 min',\n      difficulty: 'Intermediate',\n      category: 'Core Features',\n      icon: <BarChart2 className=\"h-5 w-5\" />,\n      outcomes: [\n        'Understand business health scoring',\n        'Set up custom KPIs',\n        'Create automated reports',\n        'Master the data warehouse'\n      ],\n      steps: [\n        {\n          id: 'health-score',\n          title: 'Understand Your Business Health Score',\n          description: 'Learn how Nexus calculates and improves your business metrics',\n          action: 'View Analytics',\n          route: '/analytics',\n          estimatedTime: '20 min'\n        },\n        {\n          id: 'data-warehouse',\n          title: 'Explore the Data Warehouse',\n          description: 'Access comprehensive business intelligence and reporting',\n          action: 'Open Data Warehouse',\n          route: '/analytics/data-warehouse',\n          estimatedTime: '25 min'\n        },\n        {\n          id: 'custom-kpis',\n          title: 'Set Up Custom KPIs',\n          description: 'Define and track metrics specific to your business',\n          action: 'Configure KPIs',\n          route: '/analytics',\n          estimatedTime: '15 min'\n        }\n      ]\n    },\n    {\n      id: 'ai-transformation',\n      title: 'AI-Powered Business Transformation',\n      description: 'Advanced AI features for business optimization and growth',\n      estimatedTime: '90 min',\n      difficulty: 'Advanced',\n      category: 'Advanced',\n      icon: <Brain className=\"h-5 w-5\" />,\n      outcomes: [\n        'Master Trinity architecture (Think → See → Act)',\n        'Set up advanced AI workflows',\n        'Implement business process optimization',\n        'Create custom AI assistants'\n      ],\n      steps: [\n        {\n          id: 'trinity-mastery',\n          title: 'Master the Trinity System',\n          description: 'Deep dive into Think → See → Act methodology',\n          action: 'AI Capabilities',\n          route: '/ai-capabilities',\n          estimatedTime: '30 min'\n        },\n        {\n          id: 'ai-hub-advanced',\n          title: 'Advanced AI Hub Features',\n          description: 'Explore sophisticated AI tools and capabilities',\n          action: 'Open AI Hub',\n          route: '/ai-hub',\n          estimatedTime: '30 min'\n        },\n        {\n          id: 'api-learning',\n          title: 'API Learning & Integration',\n          description: 'Create custom integrations using AI-powered learning',\n          action: 'Try API Learning',\n          route: '/api-learning',\n          estimatedTime: '30 min'\n        }\n      ]\n    },\n    {\n      id: 'team-collaboration',\n      title: 'Team Setup & Collaboration',\n      description: 'Configure team access, permissions, and collaborative workflows',\n      estimatedTime: '45 min',\n      difficulty: 'Intermediate',\n      category: 'Advanced',\n      icon: <Users className=\"h-5 w-5\" />,\n      prerequisites: ['Admin access required'],\n      outcomes: [\n        'Add team members',\n        'Configure permissions',\n        'Set up collaborative workflows',\n        'Monitor team productivity'\n      ],\n      steps: [\n        {\n          id: 'team-setup',\n          title: 'Add Team Members',\n          description: 'Invite colleagues and configure their access levels',\n          action: 'Team Settings',\n          route: '/settings',\n          estimatedTime: '20 min'\n        },\n        {\n          id: 'document-sharing',\n          title: 'Configure Document Management',\n          description: 'Set up shared document workflows',\n          action: 'Document Center',\n          route: '/documents',\n          estimatedTime: '10 min'\n        }\n      ]\n    },\n    {\n      id: 'integration-mastery',\n      title: 'Integration Ecosystem Mastery',\n      description: 'Connect and optimize all your business tools with Nexus',\n      estimatedTime: '75 min',\n      difficulty: 'Advanced',\n      category: 'Integrations',\n      icon: <Zap className=\"h-5 w-5\" />,\n      outcomes: [\n        'Connect all major business tools',\n        'Set up data synchronization',\n        'Create cross-platform workflows',\n        'Monitor integration health'\n      ],\n      steps: [\n        {\n          id: 'core-integrations',\n          title: 'Connect Core Business Tools',\n          description: 'Set up essential integrations (CRM, Email, Accounting)',\n          action: 'View Integrations',\n          route: '/integrations',\n          estimatedTime: '30 min'\n        },\n        {\n          id: 'advanced-integrations',\n          title: 'Advanced Integration Features',\n          description: 'Configure webhooks, custom fields, and automation triggers',\n          action: 'Integration Settings',\n          route: '/settings',\n          estimatedTime: '25 min'\n        },\n        {\n          id: 'integration-monitoring',\n          title: 'Monitor Integration Health',\n          description: 'Set up alerts and monitoring for your connected tools',\n          action: 'Integration Dashboard',\n          route: '/integrations',\n          estimatedTime: '20 min'\n        }\n      ]\n    }\n  ];\n\n  // Load completed steps from localStorage\n  useEffect(() => {\n    const saved = localStorage.getItem('nexus-user-guide-progress');\n    if (saved) {\n      setCompletedSteps(JSON.parse(saved));\n    }\n  }, []);\n\n  // Save progress to localStorage\n  const saveProgress = (stepId: string, completed: boolean) => {\n    const updated = { ...completedSteps, [stepId]: completed };\n    setCompletedSteps(updated);\n    localStorage.setItem('nexus-user-guide-progress', JSON.stringify(updated));\n  };\n\n  // Calculate overall progress\n  const calculateProgress = () => {\n    const totalSteps = userJourneys.reduce((acc, journey) => acc + journey.steps.length, 0);\n    const completedCount = Object.values(completedSteps).filter(Boolean).length;\n    return Math.round((completedCount / totalSteps) * 100);\n  };\n\n  // Get journey completion status\n  const getJourneyProgress = (journey: UserJourney) => {\n    const completed = journey.steps.filter(step => completedSteps[step.id]).length;\n    return { completed, total: journey.steps.length, percentage: Math.round((completed / journey.steps.length) * 100) };\n  };\n\n  // Filter journeys by category\n  const filteredJourneys = userJourneys.filter(journey => journey.category === activeCategory);\n\n  // Handle step action\n  const handleStepAction = (step: JourneyStep) => {\n    if (step.route) {\n      navigate(step.route);\n      saveProgress(step.id, true);\n      if (onClose) onClose();\n    }\n  };\n\n  // Get difficulty color\n  const getDifficultyColor = (difficulty: string) => {\n    switch (difficulty) {\n      case 'Beginner': return 'bg-green-100 text-green-800 dark:bg-green-900 dark:text-green-200';\n      case 'Intermediate': return 'bg-yellow-100 text-yellow-800 dark:bg-yellow-900 dark:text-yellow-200';\n      case 'Advanced': return 'bg-red-100 text-red-800 dark:bg-red-900 dark:text-red-200';\n      default: return 'bg-gray-100 text-gray-800 dark:bg-gray-900 dark:text-gray-200';\n    }\n  };\n\n  return (\n    <div className=\"max-w-6xl mx-auto p-6 space-y-6\">\n      {/* Header */}\n      <div className=\"text-center space-y-4\">\n        <div className=\"flex items-center justify-center space-x-2\">\n          <BookOpen className=\"h-8 w-8 text-primary\" />\n          <h1 className=\"text-3xl font-bold text-foreground\">Nexus User Guide</h1>\n        </div>\n        <p className=\"text-lg text-muted-foreground max-w-2xl mx-auto\">\n          Master Nexus with guided journeys designed for your role and experience level. \n          Track your progress and unlock the full potential of AI-powered business automation.\n        </p>\n        \n        {/* Overall Progress */}\n        <div className=\"bg-card border border-border rounded-lg p-4 max-w-md mx-auto\">\n          <div className=\"flex items-center justify-between mb-2\">\n            <span className=\"text-sm font-medium\">Overall Progress</span>\n            <span className=\"text-sm text-muted-foreground\">{calculateProgress()}%</span>\n          </div>\n          <Progress value={calculateProgress()} className=\"h-2\" />\n          <p className=\"text-xs text-muted-foreground mt-2\">\n            {Object.values(completedSteps).filter(Boolean).length} of {userJourneys.reduce((acc, j) => acc + j.steps.length, 0)} steps completed\n          </p>\n        </div>\n      </div>\n\n      {/* Category Tabs */}\n      <Tabs value={activeCategory} onValueChange={setActiveCategory} className=\"w-full\">\n        <TabsList className=\"grid w-full grid-cols-4\">\n          <TabsTrigger value=\"Getting Started\">Getting Started</TabsTrigger>\n          <TabsTrigger value=\"Core Features\">Core Features</TabsTrigger>\n          <TabsTrigger value=\"Advanced\">Advanced</TabsTrigger>\n          <TabsTrigger value=\"Integrations\">Integrations</TabsTrigger>\n        </TabsList>\n\n        <TabsContent value={activeCategory} className=\"mt-6\">\n          <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6\">\n            {filteredJourneys.map((journey) => {\n              const progress = getJourneyProgress(journey);\n              return (\n                <Card key={journey.id} className=\"hover:shadow-lg transition-shadow cursor-pointer\">\n                  <CardHeader className=\"pb-4\">\n                    <div className=\"flex items-start justify-between\">\n                      <div className=\"flex items-center space-x-3\">\n                        <div className=\"p-2 bg-primary/10 rounded-lg\">\n                          {journey.icon}\n                        </div>\n                        <div className=\"flex-1\">\n                          <CardTitle className=\"text-lg\">{journey.title}</CardTitle>\n                          <div className=\"flex items-center space-x-2 mt-1\">\n                            <Badge className={getDifficultyColor(journey.difficulty)}>\n                              {journey.difficulty}\n                            </Badge>\n                            <div className=\"flex items-center text-sm text-muted-foreground\">\n                              <Clock className=\"h-3 w-3 mr-1\" />\n                              {journey.estimatedTime}\n                            </div>\n                          </div>\n                        </div>\n                      </div>\n                    </div>\n                  </CardHeader>\n                  \n                  <CardContent>\n                    <p className=\"text-muted-foreground text-sm mb-4\">\n                      {journey.description}\n                    </p>\n                    \n                    {/* Prerequisites */}\n                    {journey.prerequisites && (\n                      <div className=\"mb-4\">\n                        <p className=\"text-xs font-medium text-muted-foreground mb-1\">Prerequisites:</p>\n                        <ul className=\"text-xs text-muted-foreground\">\n                          {journey.prerequisites.map((req, idx) => (\n                            <li key={idx}>• {req}</li>\n                          ))}\n                        </ul>\n                      </div>\n                    )}\n                    \n                    {/* Progress */}\n                    <div className=\"mb-4\">\n                      <div className=\"flex items-center justify-between mb-2\">\n                        <span className=\"text-sm font-medium\">Progress</span>\n                        <span className=\"text-sm text-muted-foreground\">\n                          {progress.completed}/{progress.total} steps\n                        </span>\n                      </div>\n                      <Progress value={progress.percentage} className=\"h-2\" />\n                    </div>\n                    \n                    {/* Outcomes */}\n                    <div className=\"mb-4\">\n                      <p className=\"text-xs font-medium text-muted-foreground mb-2\">You'll learn:</p>\n                      <ul className=\"text-xs text-muted-foreground space-y-1\">\n                        {journey.outcomes.slice(0, 3).map((outcome, idx) => (\n                          <li key={idx} className=\"flex items-center\">\n                            <Target className=\"h-3 w-3 mr-2 text-primary flex-shrink-0\" />\n                            {outcome}\n                          </li>\n                        ))}\n                      </ul>\n                    </div>\n                    \n                    <Dialog>\n                      <DialogTrigger asChild>\n                        <Button \n                          className=\"w-full\" \n                          variant={progress.percentage === 100 ? \"outline\" : \"default\"}\n                          onClick={() => setSelectedJourney(journey)}\n                        >\n                          {progress.percentage === 100 ? (\n                            <>\n                              <CheckCircle className=\"h-4 w-4 mr-2\" />\n                              Review Journey\n                            </>\n                          ) : progress.percentage > 0 ? (\n                            <>\n                              <PlayCircle className=\"h-4 w-4 mr-2\" />\n                              Continue Journey\n                            </>\n                          ) : (\n                            <>\n                              <PlayCircle className=\"h-4 w-4 mr-2\" />\n                              Start Journey\n                            </>\n                          )}\n                        </Button>\n                      </DialogTrigger>\n                      \n                      <DialogContent className=\"max-w-2xl max-h-[80vh] overflow-y-auto\">\n                        <DialogHeader>\n                          <DialogTitle className=\"flex items-center space-x-2\">\n                            {journey.icon}\n                            <span>{journey.title}</span>\n                          </DialogTitle>\n                        </DialogHeader>\n                        \n                        <div className=\"space-y-6\">\n                          <div>\n                            <p className=\"text-muted-foreground mb-4\">{journey.description}</p>\n                            <div className=\"flex items-center space-x-4 text-sm\">\n                              <Badge className={getDifficultyColor(journey.difficulty)}>\n                                {journey.difficulty}\n                              </Badge>\n                              <div className=\"flex items-center text-muted-foreground\">\n                                <Clock className=\"h-3 w-3 mr-1\" />\n                                {journey.estimatedTime}\n                              </div>\n                            </div>\n                          </div>\n                          \n                          {/* Steps */}\n                          <div className=\"space-y-4\">\n                            <h3 className=\"font-semibold\">Journey Steps</h3>\n                            {journey.steps.map((step, index) => {\n                              const isCompleted = completedSteps[step.id];\n                              return (\n                                <div key={step.id} className=\"border border-border rounded-lg p-4\">\n                                  <div className=\"flex items-start justify-between\">\n                                    <div className=\"flex-1\">\n                                      <div className=\"flex items-center space-x-2 mb-2\">\n                                        <span className=\"text-sm font-medium text-muted-foreground\">\n                                          Step {index + 1}\n                                        </span>\n                                        {isCompleted && (\n                                          <CheckCircle className=\"h-4 w-4 text-green-500\" />\n                                        )}\n                                        <div className=\"flex items-center text-xs text-muted-foreground\">\n                                          <Clock className=\"h-3 w-3 mr-1\" />\n                                          {step.estimatedTime}\n                                        </div>\n                                      </div>\n                                      <h4 className=\"font-medium mb-1\">{step.title}</h4>\n                                      <p className=\"text-sm text-muted-foreground mb-3\">\n                                        {step.description}\n                                      </p>\n                                      \n                                      {step.tips && (\n                                        <div className=\"mb-3\">\n                                          <p className=\"text-xs font-medium text-muted-foreground mb-1\">\n                                            💡 Tips:\n                                          </p>\n                                          <ul className=\"text-xs text-muted-foreground space-y-1\">\n                                            {step.tips.map((tip, tipIdx) => (\n                                              <li key={tipIdx}>• {tip}</li>\n                                            ))}\n                                          </ul>\n                                        </div>\n                                      )}\n                                    </div>\n                                  </div>\n                                  \n                                  <div className=\"flex items-center justify-between\">\n                                    <Button\n                                      size=\"sm\"\n                                      variant={isCompleted ? \"outline\" : \"default\"}\n                                      onClick={() => handleStepAction(step)}\n                                      className=\"flex items-center\"\n                                    >\n                                      {isCompleted ? (\n                                        <>\n                                          <CheckCircle className=\"h-3 w-3 mr-1\" />\n                                          Revisit\n                                        </>\n                                      ) : (\n                                        <>\n                                          {step.action}\n                                          <ArrowRight className=\"h-3 w-3 ml-1\" />\n                                        </>\n                                      )}\n                                    </Button>\n                                    \n                                    {!isCompleted && (\n                                      <Button\n                                        size=\"sm\"\n                                        variant=\"ghost\"\n                                        onClick={() => saveProgress(step.id, true)}\n                                      >\n                                        Mark Complete\n                                      </Button>\n                                    )}\n                                  </div>\n                                </div>\n                              );\n                            })}\n                          </div>\n                          \n                          {/* Outcomes */}\n                          <div>\n                            <h3 className=\"font-semibold mb-3\">What You'll Achieve</h3>\n                            <ul className=\"space-y-2\">\n                              {journey.outcomes.map((outcome, idx) => (\n                                <li key={idx} className=\"flex items-center text-sm\">\n                                  <TrendingUp className=\"h-4 w-4 mr-2 text-primary flex-shrink-0\" />\n                                  {outcome}\n                                </li>\n                              ))}\n                            </ul>\n                          </div>\n                        </div>\n                      </DialogContent>\n                    </Dialog>\n                  </CardContent>\n                </Card>\n              );\n            })}\n          </div>\n        </TabsContent>\n      </Tabs>\n    </div>\n  );\n};","usedDeprecatedRules":[]},{"filePath":"/home/vonj/Github/Nexus/src/components/hype/HypeBuilder.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'TrendingUp' is defined but never used.","line":20,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":20,"endColumn":13},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'Heart' is defined but never used.","line":21,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":21,"endColumn":8},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'ExternalLink' is defined but never used.","line":28,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":28,"endColumn":15},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'Sparkles' is defined but never used.","line":32,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":32,"endColumn":11},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":44,"column":29,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":44,"endColumn":32,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[944,947],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[944,947],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'setIsLiveCounterEnabled' is assigned a value but never used.","line":74,"column":32,"nodeType":null,"messageId":"unusedVar","endLine":74,"endColumn":55},{"ruleId":"no-restricted-syntax","severity":1,"message":"Use design tokens instead of hardcoded colors (e.g., bg-primary, bg-secondary)","line":84,"column":14,"nodeType":"Literal","messageId":"restrictedSyntax","endLine":84,"endColumn":44},{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has a missing dependency: 'milestones'. Either include it or remove the dependency array.","line":219,"column":6,"nodeType":"ArrayExpression","endLine":219,"endColumn":34,"suggestions":[{"desc":"Update the dependencies array to be: [totalSignups, soundEnabled, milestones]","fix":{"range":[5627,5655],"text":"[totalSignups, soundEnabled, milestones]"}}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'shareContent' is assigned a value but never used.","line":221,"column":9,"nodeType":null,"messageId":"unusedVar","endLine":221,"endColumn":21},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'platform' is defined but never used.","line":223,"column":30,"nodeType":null,"messageId":"unusedVar","endLine":223,"endColumn":38}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":10,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\n * Hype Builder System\n * Viral marketing components to build momentum and excitement\n * Social sharing, live counters, milestone celebrations, and viral loops\n */\n\nimport React, { useState, useEffect } from 'react';\nimport { motion, AnimatePresence } from 'framer-motion';\nimport {\n  Share2,\n  Twitter,\n  Linkedin,\n  Facebook,\n  Copy,\n  Users,\n  Flame,\n  Zap,\n  Trophy,\n  Target,\n  TrendingUp,\n  Heart,\n  MessageCircle,\n  ArrowUp,\n  Gift,\n  Crown,\n  Rocket,\n  CheckCircle2,\n  ExternalLink,\n  Volume2,\n  VolumeX,\n  Star,\n  Sparkles,\n  Bolt,\n  Clock\n} from 'lucide-react';\nimport { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/Card';\nimport { Button } from '@/components/ui/Button';\nimport { Badge } from '@/components/ui/Badge';\nimport { Progress } from '@/components/ui/Progress';\nimport { Alert, AlertDescription } from '@/components/ui/Alert';\n\ninterface ShareWidget {\n  platform: string;\n  icon: React.ComponentType<any>;\n  color: string;\n  shares: number;\n  growth: number;\n}\n\ninterface Milestone {\n  id: string;\n  title: string;\n  description: string;\n  target: number;\n  current: number;\n  reward: string;\n  unlocked: boolean;\n  celebrated: boolean;\n}\n\ninterface ViralContent {\n  id: string;\n  type: 'image' | 'video' | 'gif';\n  title: string;\n  description: string;\n  url: string;\n  shares: number;\n  engagement: number;\n}\n\nconst HypeBuilder: React.FC = () => {\n  const [totalSignups, setTotalSignups] = useState(2847);\n  const [totalShares, setTotalShares] = useState(4521);\n  const [isLiveCounterEnabled, setIsLiveCounterEnabled] = useState(true);\n  const [selectedShareContent, setSelectedShareContent] = useState(0);\n  const [showMilestoneAlert, setShowMilestoneAlert] = useState(false);\n  const [soundEnabled, setSoundEnabled] = useState(true);\n  const [copiedToClipboard, setCopiedToClipboard] = useState(false);\n\n  const shareWidgets: ShareWidget[] = [\n    {\n      platform: 'Twitter',\n      icon: Twitter,\n      color: 'bg-blue-400 hover:bg-primary',\n      shares: 1247,\n      growth: 12.4\n    },\n    {\n      platform: 'LinkedIn',\n      icon: Linkedin,\n      color: 'bg-primary hover:bg-primary/90',\n      shares: 892,\n      growth: 18.7\n    },\n    {\n      platform: 'Facebook',\n      icon: Facebook,\n      color: 'bg-primary/80 hover:bg-primary/20',\n      shares: 634,\n      growth: 9.2\n    }\n  ];\n\n  const milestones: Milestone[] = [\n    {\n      id: '1',\n      title: '🎯 First Hundred',\n      description: 'First 100 founder members',\n      target: 100,\n      current: 89,\n      reward: 'Exclusive founder NFT + 75% lifetime discount',\n      unlocked: false,\n      celebrated: false\n    },\n    {\n      id: '2',\n      title: '🚀 Launch Velocity',\n      description: '500 early adopters secured',\n      target: 500,\n      current: 423,\n      reward: 'VIP early access + 50% first year discount',\n      unlocked: false,\n      celebrated: false\n    },\n    {\n      id: '3',\n      title: '🌟 Viral Moment',\n      description: '1000 community members',\n      target: 1000,\n      current: 847,\n      reward: 'Community badge + priority support',\n      unlocked: false,\n      celebrated: false\n    },\n    {\n      id: '4',\n      title: '💎 Diamond Status',\n      description: '2500 pre-orders locked in',\n      target: 2500,\n      current: 2401,\n      reward: 'Diamond tier access + exclusive features',\n      unlocked: false,\n      celebrated: false\n    },\n    {\n      id: '5',\n      title: '🏆 Legendary Launch',\n      description: '5000 waitlist members',\n      target: 5000,\n      current: totalSignups,\n      reward: 'Legendary status + lifetime benefits',\n      unlocked: false,\n      celebrated: false\n    }\n  ];\n\n  const viralContent: ViralContent[] = [\n    {\n      id: '1',\n      type: 'image',\n      title: 'Nexus vs Traditional Business Tools',\n      description: 'Comparison infographic showing the power of unified business operations',\n      url: '/assets/nexus-comparison.png',\n      shares: 892,\n      engagement: 94.2\n    },\n    {\n      id: '2',\n      type: 'gif',\n      title: 'AI Automation in Action',\n      description: 'Watch how Nexus automates complex business workflows in seconds',\n      url: '/assets/nexus-automation.gif',\n      shares: 1247,\n      engagement: 97.8\n    },\n    {\n      id: '3',\n      type: 'video',\n      title: 'Behind the Scenes: Building the Future',\n      description: 'Exclusive look at the team building the next generation business OS',\n      url: '/assets/nexus-bts.mp4',\n      shares: 2156,\n      engagement: 89.3\n    }\n  ];\n\n  // Live counter animation\n  useEffect(() => {\n    if (!isLiveCounterEnabled) return;\n\n    const interval = setInterval(() => {\n      const growthRate = 0.1 + Math.random() * 0.3; // 0.1% to 0.4% growth\n      setTotalSignups(prev => Math.floor(prev * (1 + growthRate / 100)));\n      setTotalShares(prev => Math.floor(prev * (1 + (growthRate * 1.5) / 100)));\n    }, 8000 + Math.random() * 12000); // Random interval 8-20 seconds\n\n    return () => clearInterval(interval);\n  }, [isLiveCounterEnabled]);\n\n  // Milestone checker\n  useEffect(() => {\n    milestones.forEach(milestone => {\n      if (!milestone.celebrated && totalSignups >= milestone.target) {\n        milestone.unlocked = true;\n        setShowMilestoneAlert(true);\n        \n        if (soundEnabled) {\n          // Play celebration sound\n          const audio = new Audio('/sounds/milestone-celebration.mp3');\n          audio.play().catch(() => {}); // Ignore errors if sound doesn't load\n        }\n        \n        setTimeout(() => {\n          milestone.celebrated = true;\n          setShowMilestoneAlert(false);\n        }, 5000);\n      }\n    });\n  }, [totalSignups, soundEnabled]);\n\n  const shareContent = viralContent[selectedShareContent];\n\n  const generateShareText = (platform: string) => {\n    const baseTexts = [\n      `🚀 The future of business is here! I just secured my spot on the Nexus waitlist. This AI-powered business OS is going to change everything.`,\n      `💡 Just joined the revolution! Nexus is building the world's first truly intelligent business operating system. Early access is limited!`,\n      `🔥 This is huge! Nexus combines AI, automation, and analytics into one powerful platform. I'm in the founder tier - you should be too!`,\n      `⚡ Game changer alert! Nexus is the business platform we've all been waiting for. Join me in shaping the future of work.`\n    ];\n    \n    const text = baseTexts[Math.floor(Math.random() * baseTexts.length)];\n    const hashtags = '#Nexus #AI #BusinessAutomation #FutureOfWork #Startup';\n    \n    return `${text} ${hashtags}`;\n  };\n\n  const handleShare = (platform: string) => {\n    const text = encodeURIComponent(generateShareText(platform));\n    const url = encodeURIComponent(window.location.origin);\n    \n    const shareUrls = {\n      twitter: `https://twitter.com/intent/tweet?text=${text}&url=${url}`,\n      linkedin: `https://www.linkedin.com/sharing/share-offsite/?url=${url}&summary=${text}`,\n      facebook: `https://www.facebook.com/sharer/sharer.php?u=${url}&quote=${text}`,\n    };\n    \n    window.open(shareUrls[platform as keyof typeof shareUrls], '_blank', 'width=600,height=400');\n    \n    // Simulate share count increase\n    setTotalShares(prev => prev + 1);\n  };\n\n  const copyShareLink = () => {\n    const shareText = generateShareText('generic');\n    const shareUrl = window.location.origin;\n    const fullText = `${shareText}\\n\\n${shareUrl}`;\n    \n    navigator.clipboard.writeText(fullText);\n    setCopiedToClipboard(true);\n    setTimeout(() => setCopiedToClipboard(false), 2000);\n  };\n\n  const getNextMilestone = () => {\n    return milestones.find(m => !m.unlocked && totalSignups < m.target);\n  };\n\n  const nextMilestone = getNextMilestone();\n\n  return (\n    <div className=\"space-y-6\">\n      {/* Milestone Achievement Alert */}\n      <AnimatePresence>\n        {showMilestoneAlert && (\n          <motion.div\n            initial={{ opacity: 0, y: -50, scale: 0.9 }}\n            animate={{ opacity: 1, y: 0, scale: 1 }}\n            exit={{ opacity: 0, y: -50, scale: 0.9 }}\n            className=\"fixed top-4 left-1/2 transform -translate-x-1/2 z-50\"\n          >\n            <Alert className=\"bg-gradient-to-r from-yellow-400 to-orange-500 text-foreground border-none shadow-2xl\">\n              <Trophy className=\"h-5 w-5\" />\n              <AlertDescription className=\"font-bold text-lg\">\n                🎉 Milestone Unlocked! Amazing community growth!\n              </AlertDescription>\n            </Alert>\n          </motion.div>\n        )}\n      </AnimatePresence>\n\n      {/* Live Stats Dashboard */}\n      <Card className=\"bg-gradient-to-br from-purple-900/20 to-blue-900/20 border-purple-200/20\">\n        <CardHeader>\n          <div className=\"flex items-center justify-between\">\n            <CardTitle className=\"flex items-center text-2xl\">\n              <Flame className=\"w-6 h-6 mr-2 text-warning\" />\n              🔥 Hype Meter\n            </CardTitle>\n            <div className=\"flex items-center gap-2\">\n              <Button\n                variant=\"outline\"\n                size=\"sm\"\n                onClick={() => setSoundEnabled(!soundEnabled)}\n              >\n                {soundEnabled ? <Volume2 className=\"w-4 h-4\" /> : <VolumeX className=\"w-4 h-4\" />}\n              </Button>\n              <Badge className=\"bg-success text-primary-foreground animate-pulse\">\n                🔴 LIVE\n              </Badge>\n            </div>\n          </div>\n        </CardHeader>\n        <CardContent>\n          <div className=\"grid grid-cols-1 md:grid-cols-3 gap-6\">\n            {/* Total Signups */}\n            <motion.div\n              key={totalSignups}\n              initial={{ scale: 1 }}\n              animate={{ scale: [1, 1.05, 1] }}\n              transition={{ duration: 0.3 }}\n              className=\"text-center p-6 bg-card/10 rounded-lg backdrop-blur\"\n            >\n              <div className=\"text-4xl font-bold text-primary-foreground mb-2\">\n                {totalSignups.toLocaleString()}\n              </div>\n              <div className=\"text-primary-foreground/80 mb-2\">Waitlist Members</div>\n              <div className=\"flex items-center justify-center text-success\">\n                <ArrowUp className=\"w-4 h-4 mr-1\" />\n                <span className=\"text-sm\">Live Growth</span>\n              </div>\n            </motion.div>\n\n            {/* Total Shares */}\n            <motion.div\n              key={totalShares}\n              initial={{ scale: 1 }}\n              animate={{ scale: [1, 1.05, 1] }}\n              transition={{ duration: 0.3 }}\n              className=\"text-center p-6 bg-card/10 rounded-lg backdrop-blur\"\n            >\n              <div className=\"text-4xl font-bold text-primary-foreground mb-2\">\n                {totalShares.toLocaleString()}\n              </div>\n              <div className=\"text-primary-foreground/80 mb-2\">Social Shares</div>\n              <div className=\"flex items-center justify-center text-primary\">\n                <Share2 className=\"w-4 h-4 mr-1\" />\n                <span className=\"text-sm\">Viral Growth</span>\n              </div>\n            </motion.div>\n\n            {/* Hype Score */}\n            <div className=\"text-center p-6 bg-card/10 rounded-lg backdrop-blur\">\n              <div className=\"text-4xl font-bold text-primary-foreground mb-2\">\n                {Math.floor((totalSignups + totalShares) / 100)}%\n              </div>\n              <div className=\"text-primary-foreground/80 mb-2\">Hype Score</div>\n              <div className=\"flex items-center justify-center text-secondary\">\n                                  <Bolt className=\"w-4 h-4 mr-1\" />\n                <span className=\"text-sm\">Momentum</span>\n              </div>\n            </div>\n          </div>\n        </CardContent>\n      </Card>\n\n      {/* Next Milestone Progress */}\n      {nextMilestone && (\n        <Card>\n          <CardHeader>\n            <CardTitle className=\"flex items-center\">\n              <Target className=\"w-5 h-5 mr-2\" />\n              Next Milestone: {nextMilestone.title}\n            </CardTitle>\n          </CardHeader>\n          <CardContent>\n            <div className=\"space-y-4\">\n              <div className=\"flex justify-between items-center\">\n                <span className=\"text-muted-foreground\">{nextMilestone.description}</span>\n                <span className=\"font-bold\">\n                  {totalSignups} / {nextMilestone.target}\n                </span>\n              </div>\n              \n              <Progress \n                value={(totalSignups / nextMilestone.target) * 100} \n                className=\"h-3\"\n              />\n              \n              <div className=\"flex items-center justify-between text-sm\">\n                <span className=\"text-muted-foreground\">\n                  {nextMilestone.target - totalSignups} members to go\n                </span>\n                <Badge className=\"bg-gradient-to-r from-purple-500 to-pink-500 text-primary-foreground\">\n                  🎁 {nextMilestone.reward}\n                </Badge>\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n      )}\n\n      {/* Social Sharing Hub */}\n      <Card>\n        <CardHeader>\n          <CardTitle className=\"flex items-center\">\n            <Share2 className=\"w-5 h-5 mr-2\" />\n            🚀 Spread the Word\n          </CardTitle>\n          <p className=\"text-muted-foreground\">\n            Help us reach the next milestone! Share the excitement and earn rewards.\n          </p>\n        </CardHeader>\n        <CardContent>\n          {/* Viral Content Selector */}\n          <div className=\"mb-6\">\n            <h3 className=\"font-semibold mb-4\">Choose what to share:</h3>\n            <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4\">\n              {viralContent.map((content, index) => (\n                <motion.div\n                  key={content.id}\n                  whileHover={{ scale: 1.02 }}\n                  className={`p-4 border rounded-lg cursor-pointer transition-all ${\n                    selectedShareContent === index \n                      ? 'border-secondary bg-secondary/5 dark:bg-secondary/20/20' \n                      : 'border-border hover:border-purple-300'\n                  }`}\n                  onClick={() => setSelectedShareContent(index)}\n                >\n                  <div className=\"flex items-center mb-2\">\n                    {content.type === 'image' && <Star className=\"w-4 h-4 mr-2 text-warning\" />}\n                    {content.type === 'gif' && <Zap className=\"w-4 h-4 mr-2 text-primary\" />}\n                    {content.type === 'video' && <Rocket className=\"w-4 h-4 mr-2 text-destructive\" />}\n                    <span className=\"font-medium\">{content.title}</span>\n                  </div>\n                  <p className=\"text-sm text-muted-foreground mb-3\">{content.description}</p>\n                  <div className=\"flex items-center justify-between text-xs\">\n                    <span className=\"text-success\">{content.shares} shares</span>\n                    <span className=\"text-primary\">{content.engagement}% engagement</span>\n                  </div>\n                </motion.div>\n              ))}\n            </div>\n          </div>\n\n          {/* Share Buttons */}\n          <div className=\"grid grid-cols-2 md:grid-cols-4 gap-4\">\n            {shareWidgets.map((widget) => {\n              const Icon = widget.icon;\n              return (\n                <motion.div key={widget.platform} whileHover={{ scale: 1.05 }} whileTap={{ scale: 0.95 }}>\n                  <Button\n                    onClick={() => handleShare(widget.platform.toLowerCase())}\n                    className={`w-full ${widget.color} text-primary-foreground`}\n                  >\n                    <Icon className=\"w-4 h-4 mr-2\" />\n                    {widget.platform}\n                  </Button>\n                  <div className=\"text-center mt-2\">\n                    <div className=\"text-sm font-semibold\">{widget.shares}</div>\n                    <div className=\"text-xs text-muted-foreground flex items-center justify-center\">\n                      <ArrowUp className=\"w-3 h-3 mr-1 text-success\" />\n                      +{widget.growth}%\n                    </div>\n                  </div>\n                </motion.div>\n              );\n            })}\n            \n            <motion.div whileHover={{ scale: 1.05 }} whileTap={{ scale: 0.95 }}>\n              <Button\n                onClick={copyShareLink}\n                variant=\"outline\"\n                className=\"w-full\"\n              >\n                {copiedToClipboard ? (\n                  <CheckCircle2 className=\"w-4 h-4 mr-2 text-success\" />\n                ) : (\n                  <Copy className=\"w-4 h-4 mr-2\" />\n                )}\n                Copy Link\n              </Button>\n              <div className=\"text-center mt-2\">\n                <div className=\"text-sm font-semibold\">Custom</div>\n                <div className=\"text-xs text-muted-foreground\">Your message</div>\n              </div>\n            </motion.div>\n          </div>\n        </CardContent>\n      </Card>\n\n      {/* All Milestones Overview */}\n      <Card>\n        <CardHeader>\n          <CardTitle className=\"flex items-center\">\n            <Trophy className=\"w-5 h-5 mr-2\" />\n            🏆 Community Milestones\n          </CardTitle>\n        </CardHeader>\n        <CardContent>\n          <div className=\"space-y-4\">\n            {milestones.map((milestone, index) => (\n              <motion.div\n                key={milestone.id}\n                initial={{ opacity: 0, x: -20 }}\n                animate={{ opacity: 1, x: 0 }}\n                transition={{ delay: index * 0.1 }}\n                className={`flex items-center justify-between p-4 rounded-lg border ${\n                  milestone.unlocked \n                    ? 'bg-success/5 dark:bg-success/20 border-success/20 dark:border-success/80' \n                    : totalSignups >= milestone.current * 0.8\n                    ? 'bg-warning/5 dark:bg-warning/20/20 border-warning/20 dark:border-warning/80'\n                    : 'bg-muted/50'\n                }`}\n              >\n                <div className=\"flex items-center space-x-4\">\n                  <div className={`w-12 h-12 rounded-full flex items-center justify-center ${\n                    milestone.unlocked \n                      ? 'bg-success text-primary-foreground' \n                      : 'bg-muted text-muted-foreground'\n                  }`}>\n                    {milestone.unlocked ? (\n                      <CheckCircle2 className=\"w-6 h-6\" />\n                    ) : (\n                      <span className=\"font-bold\">{index + 1}</span>\n                    )}\n                  </div>\n                  \n                  <div>\n                    <h3 className=\"font-semibold\">{milestone.title}</h3>\n                    <p className=\"text-sm text-muted-foreground\">{milestone.description}</p>\n                    <p className=\"text-xs text-secondary font-medium\">{milestone.reward}</p>\n                  </div>\n                </div>\n                \n                <div className=\"text-right\">\n                  <div className=\"text-lg font-bold\">\n                    {Math.min(totalSignups, milestone.target)} / {milestone.target}\n                  </div>\n                  <div className=\"text-sm text-muted-foreground\">\n                    {milestone.unlocked ? 'Unlocked!' : `${milestone.target - totalSignups} to go`}\n                  </div>\n                </div>\n              </motion.div>\n            ))}\n          </div>\n        </CardContent>\n      </Card>\n\n      {/* Live Activity Feed */}\n      <Card>\n        <CardHeader>\n          <CardTitle className=\"flex items-center\">\n            <MessageCircle className=\"w-5 h-5 mr-2\" />\n            🌊 Live Activity\n          </CardTitle>\n        </CardHeader>\n        <CardContent>\n          <div className=\"space-y-4\">\n            {[\n              { action: 'Sarah from TechCorp just joined the founder tier!', time: '2 min ago', icon: Crown },\n              { action: 'Mike shared Nexus on LinkedIn', time: '5 min ago', icon: Share2 },\n              { action: '3 new members joined in the last 10 minutes', time: '10 min ago', icon: Users },\n              { action: 'Emma referred 2 colleagues to the waitlist', time: '15 min ago', icon: Gift },\n              { action: 'Alex from StartupLab upgraded to VIP tier', time: '18 min ago', icon: Star }\n            ].map((activity, index) => (\n              <motion.div\n                key={index}\n                initial={{ opacity: 0, y: 10 }}\n                animate={{ opacity: 1, y: 0 }}\n                transition={{ delay: index * 0.1 }}\n                className=\"flex items-center space-x-4 p-4 bg-muted/50 rounded-lg\"\n              >\n                <activity.icon className=\"w-5 h-5 text-secondary\" />\n                <div className=\"flex-1\">\n                  <span className=\"text-sm\">{activity.action}</span>\n                </div>\n                <div className=\"text-xs text-muted-foreground flex items-center\">\n                  <Clock className=\"w-3 h-3 mr-1\" />\n                  {activity.time}\n                </div>\n              </motion.div>\n            ))}\n          </div>\n        </CardContent>\n      </Card>\n    </div>\n  );\n};\n\nexport default HypeBuilder; ","usedDeprecatedRules":[]},{"filePath":"/home/vonj/Github/Nexus/src/components/icons/HubSpotIcon.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/vonj/Github/Nexus/src/components/inbox/EmailDetailView.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'CardTitle' is defined but never used.","line":5,"column":41,"nodeType":null,"messageId":"unusedVar","endLine":5,"endColumn":50},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'Clock' is defined but never used.","line":11,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":11,"endColumn":8},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'CornerUpLeft' is defined but never used.","line":12,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":12,"endColumn":15},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'CornerUpRight' is defined but never used.","line":13,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":13,"endColumn":16},{"ruleId":"no-restricted-syntax","severity":1,"message":"Use design tokens instead of hardcoded text colors (e.g., text-foreground, text-muted-foreground)","line":84,"column":68,"nodeType":"Literal","messageId":"restrictedSyntax","endLine":84,"endColumn":98}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React from 'react';\nimport type { InboxItem } from '@/lib/services/unifiedInboxService';\nimport { unifiedInboxService } from '@/lib/services/unifiedInboxService';\nimport { Button } from '@/components/ui/Button';\nimport { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/Card';\nimport { Separator } from '@/components/ui/Separator';\nimport { useNotifications } from '@/contexts/NotificationContext';\nimport {\n  Archive,\n  ArrowLeft,\n  Clock,\n  CornerUpLeft,\n  CornerUpRight,\n  EyeOff,\n  Star,\n  Trash2,\n} from 'lucide-react';\n\ninterface EmailDetailViewProps {\n  item: InboxItem | undefined;\n  onClose: () => void;\n  onAction: (action: 'archive' | 'delete' | 'toggle_read' | 'toggle_important', itemId: string) => void;\n}\n\nconst EmailDetailView: React.FC<EmailDetailViewProps> = ({ item, onClose, onAction }) => {\n  const { addNotification } = useNotifications();\n\n  if (!item) {\n    return (\n      <div className=\"flex items-center justify-center h-full\">\n        <p className=\"text-muted-foreground\">Select an item to view</p>\n      </div>\n    );\n  }\n\n  const handleAction = async (action: 'archive' | 'delete' | 'toggle_read' | 'toggle_important') => {\n    try {\n      let message = '';\n      switch (action) {\n        case 'archive':\n          await unifiedInboxService.archiveItem(item.id);\n          message = 'Item archived.';\n          break;\n        case 'toggle_read':\n          await unifiedInboxService.markAsRead(item.id, !item.is_read);\n          message = item.is_read ? 'Marked as unread.' : 'Marked as read.';\n          break;\n        case 'toggle_important':\n            await unifiedInboxService.toggleImportant(item.id);\n            message = item.is_important ? 'Marked as not important.' : 'Marked as important.';\n            break;\n        case 'delete':\n            addNotification({ type: 'info', message: 'Delete functionality is not yet implemented.' });\n            return; // Early return\n      }\n      addNotification({ type: 'success', message });\n      onAction(action, item.id);\n    } catch (error) {\n      addNotification({ type: 'error', message: `Action failed: ${action}` });\n      console.error(`Failed to ${action} item ${item.id}`, error);\n    }\n  };\n\n  return (\n    <Card className=\"flex flex-col h-full shadow-lg\">\n      <CardHeader className=\"p-4 border-b\">\n        <div className=\"flex items-center justify-between gap-4\">\n            <div className='flex items-center gap-2'>\n                <Button variant=\"ghost\" size=\"icon\" onClick={onClose}>\n                    <ArrowLeft className=\"w-5 h-5\" />\n                </Button>\n                <h2 className=\"text-lg font-semibold truncate\">{item.subject}</h2>\n            </div>\n          <div className=\"flex items-center gap-2\">\n            <Button variant=\"outline\" size=\"sm\" onClick={() => handleAction('toggle_read')}>\n              <EyeOff className=\"w-4 h-4 mr-2\" />\n              Mark as Unread\n            </Button>\n            <Button variant=\"outline\" size=\"sm\" onClick={() => handleAction('archive')}>\n              <Archive className=\"w-4 h-4 mr-2\" />\n              Archive\n            </Button>\n             <Button variant=\"outline\" size=\"sm\" onClick={() => handleAction('toggle_important')}>\n              <Star className={`w-4 h-4 mr-2 ${item.is_important ? 'text-yellow-500 fill-current' : ''}`} />\n              Important\n            </Button>\n            <Button variant=\"destructive\" size=\"sm\" onClick={() => handleAction('delete')}>\n              <Trash2 className=\"w-4 h-4 mr-2\" />\n              Delete\n            </Button>\n          </div>\n        </div>\n      </CardHeader>\n      <CardContent className=\"p-0 flex-1 overflow-y-auto\">\n        <div className=\"p-4 sm:p-6\">\n            <div className=\"flex items-center gap-4 mb-4\">\n                <div className=\"w-10 h-10 rounded-full bg-muted flex items-center justify-center font-bold text-muted-foreground\">\n                    {item.sender_name?.charAt(0) || 'U'}\n                </div>\n                <div>\n                    <p className=\"font-semibold\">{item.sender_name}</p>\n                    <p className=\"text-sm text-muted-foreground\">{item.sender_email}</p>\n                </div>\n                <div className=\"ml-auto text-xs text-muted-foreground\">\n                    {new Date(item.item_timestamp || item.created_at || Date.now()).toLocaleString()}\n                </div>\n            </div>\n            <Separator />\n        </div>\n        <div \n          className=\"p-4 sm:p-6 prose prose-sm dark:prose-invert max-w-none\"\n          dangerouslySetInnerHTML={{ __html: item.html_content || item.content || '<p>No content available.</p>' }}\n        />\n      </CardContent>\n    </Card>\n  );\n};\n\nexport default EmailDetailView; ","usedDeprecatedRules":[]},{"filePath":"/home/vonj/Github/Nexus/src/components/integrations/ApiDocIntegrationSetup.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'Textarea' is defined but never used.","line":7,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":7,"endColumn":18},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'Separator' is defined but never used.","line":14,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":14,"endColumn":19},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":21,"column":40,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":21,"endColumn":43,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1063,1066],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1063,1066],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'generationProgress' is assigned a value but never used.","line":58,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":58,"endColumn":28},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'isSaving' is assigned a value but never used.","line":61,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":61,"endColumn":18},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'err' is defined but never used.","line":79,"column":16,"nodeType":null,"messageId":"unusedVar","endLine":79,"endColumn":19},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'err' is defined but never used.","line":188,"column":14,"nodeType":null,"messageId":"unusedVar","endLine":188,"endColumn":17},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'err' is defined but never used.","line":304,"column":14,"nodeType":null,"messageId":"unusedVar","endLine":304,"endColumn":17},{"ruleId":"no-restricted-syntax","severity":1,"message":"Use design tokens instead of hardcoded colors (e.g., bg-primary, bg-secondary)","line":729,"column":32,"nodeType":"Literal","messageId":"restrictedSyntax","endLine":729,"endColumn":144},{"ruleId":"no-restricted-syntax","severity":1,"message":"Use design tokens instead of hardcoded text colors (e.g., text-foreground, text-muted-foreground)","line":730,"column":32,"nodeType":"Literal","messageId":"restrictedSyntax","endLine":730,"endColumn":74}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":10,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState, useRef } from 'react';\nimport { Button } from '../ui/Button';\nimport { Card, CardContent, CardDescription, CardFooter, CardHeader, CardTitle } from '../ui/Card';\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from '../ui/Tabs';\nimport { Input } from '../ui/Input';\nimport { Label } from '../ui/Label';\nimport { Textarea } from '../ui/Textarea';\nimport { AlertCircle, Check, ChevronRight, FileUp, DownloadCloud, Globe, Key, Lock } from 'lucide-react';\nimport { useAuth } from '@/contexts/AuthContext';\nimport { ApiIntegrationService, type ApiIntegrationData } from '@/lib/services/apiIntegrationService';\nimport { Alert, AlertDescription } from '../ui/Alert';\nimport { Progress } from '../ui/Progress';\nimport { Badge } from '../ui/Badge';\nimport { Separator } from '../ui/Separator';\n\n// Import HubSpot integration as an example\nimport { hubspotIntegration } from '../../lib/integrations/hubspotIntegration';\n\n// Types for API Documentation Integration\ninterface ApiDocIntegrationSetupProps {\n  onIntegrationCreated?: (integration: any) => void;\n}\n\ninterface IntegrationEndpoint {\n  name: string;\n  path: string;\n  method: string;\n  description: string;\n}\n\ninterface IntegrationPattern {\n  name: string;\n  description: string;\n  endpoints: IntegrationEndpoint[];\n}\n\ninterface ApiDocAnalysisResult {\n  title: string;\n  version: string;\n  serverUrl: string;\n  authMethods: string[];\n  endpointCount: number;\n  patterns: IntegrationPattern[];\n}\n\nconst ApiDocIntegrationSetup: React.FC<ApiDocIntegrationSetupProps> = ({ onIntegrationCreated }) => {\n  const { user } = useAuth();\n  const [currentStep, setCurrentStep] = useState<number>(1);\n  const [apiUrl, setApiUrl] = useState<string>('');\n  const [apiDoc, setApiDoc] = useState<string>('');\n  const [uploadedFileName, setUploadedFileName] = useState<string>('');\n  const [isAnalyzing, setIsAnalyzing] = useState<boolean>(false);\n  const [analysisProgress, setAnalysisProgress] = useState<number>(0);\n  const [analysisResult, setAnalysisResult] = useState<ApiDocAnalysisResult | null>(null);\n  const [error, setError] = useState<string | null>(null);\n  const [activeTab, setActiveTab] = useState<string>('upload');\n  const [isGenerating, setIsGenerating] = useState<boolean>(false);\n  const [generationProgress, setGenerationProgress] = useState<number>(0);\n  const [integrationName, setIntegrationName] = useState<string>('');\n  const [integrationConfig, setIntegrationConfig] = useState<Record<string, string>>({});\n  const [isSaving, setIsSaving] = useState<boolean>(false);\n  const [savedIntegrationId, setSavedIntegrationId] = useState<string | null>(null);\n  \n  const fileInputRef = useRef<HTMLInputElement>(null);\n  \n  // Handle file upload\n  const handleFileUpload = (event: React.ChangeEvent<HTMLInputElement>) => {\n    const file = event.target.files?.[0];\n    if (!file) return;\n    \n    setUploadedFileName(file.name);\n    \n    const reader = new FileReader();\n    reader.onload = (e) => {\n      try {\n        const content = e.target?.result as string;\n        setApiDoc(content);\n        setError(null);\n      } catch (err) {\n        setError('Failed to read the file. Please make sure it is a valid JSON or YAML file.');\n      }\n    };\n    \n    reader.onerror = () => {\n      setError('Failed to read the file. Please try again.');\n    };\n    \n    reader.readAsText(file);\n  };\n  \n  // Fetch API documentation from URL\n  const fetchApiDoc = async () => {\n    if (!apiUrl) {\n      setError('Please enter a valid API documentation URL');\n      return;\n    }\n    \n    setError(null);\n    setIsAnalyzing(true);\n    setAnalysisProgress(10);\n    \n    try {\n      // Check if it's the NinjaOne API URL\n      if (apiUrl.includes('ninjarmm.com') || apiUrl.includes('ninjaone')) {\n        setAnalysisProgress(50);\n        \n        // Use the actual NinjaOne OpenAPI spec provided by the user\n        const ninjaOneApiSpec = {\n          \"openapi\": \"3.0.1\",\n          \"info\": {\n            \"title\": \"NinjaOne Public API 2.0\",\n            \"description\": \"Ninja One Public API documentation for RMM and asset management\",\n            \"version\": \"2.0.9-draft\"\n          },\n          \"security\": [\n            {\"oauth2\": [\"monitoring\", \"management\", \"control\"]},\n            {\"sessionKey\": [\"monitoring\", \"management\", \"control\"]}\n          ],\n          \"tags\": [\n            {\"name\": \"devices\", \"description\": \"Device management and asset tracking\"},\n            {\"name\": \"organization\", \"description\": \"Organization management\"},\n            {\"name\": \"management\", \"description\": \"Asset and software management\"},\n            {\"name\": \"system\", \"description\": \"Core system entities and resources\"}\n          ],\n          \"paths\": {\n            \"/v2/devices\": {\n              \"get\": {\n                \"tags\": [\"devices\"],\n                \"summary\": \"Get devices\",\n                \"description\": \"Retrieve all managed devices with asset information\",\n                \"operationId\": \"getDevices\"\n              }\n            },\n            \"/v2/devices/{id}\": {\n              \"get\": {\n                \"tags\": [\"devices\"],\n                \"summary\": \"Get device details\",\n                \"description\": \"Get detailed information about a specific device including hardware specs\",\n                \"operationId\": \"getDevice\"\n              }\n            },\n            \"/v2/devices/{id}/software\": {\n              \"get\": {\n                \"tags\": [\"devices\"],\n                \"summary\": \"Get device software\",\n                \"description\": \"Retrieve software inventory for a specific device\",\n                \"operationId\": \"getDeviceSoftware\"\n              }\n            },\n            \"/v2/devices/{id}/activities\": {\n              \"get\": {\n                \"tags\": [\"devices\"],\n                \"summary\": \"Get device activities\",\n                \"description\": \"Get activity history and events for a device\",\n                \"operationId\": \"getDeviceActivities\"\n              }\n            },\n            \"/v2/organizations\": {\n              \"get\": {\n                \"tags\": [\"organization\"],\n                \"summary\": \"Get organizations\",\n                \"description\": \"Retrieve all client organizations\",\n                \"operationId\": \"getOrganizations\"\n              }\n            }\n          }\n        };\n        \n        setApiDoc(JSON.stringify(ninjaOneApiSpec, null, 2));\n        setAnalysisProgress(100);\n      } else {\n        // For other URLs, try to fetch (in a real app, this would go through a proxy)\n        setAnalysisProgress(30);\n        await new Promise(resolve => setTimeout(resolve, 1000));\n        \n        // For demo, fall back to mock data for non-NinjaOne URLs\n        const mockHubSpotOpenApi = JSON.parse(hubspotIntegration.getMockHubSpotOpenAPI());\n        setApiDoc(JSON.stringify(mockHubSpotOpenApi, null, 2));\n        setAnalysisProgress(100);\n      }\n      \n      // Proceed to analysis after a brief delay\n      setTimeout(() => {\n        setIsAnalyzing(false);\n        setCurrentStep(2);\n      }, 500);\n      \n    } catch (err) {\n      setError('Failed to fetch API documentation. Please check the URL and try again.');\n      setIsAnalyzing(false);\n    }\n  };\n  \n  // Analyze API documentation\n  const analyzeApiDoc = async () => {\n    if (!apiDoc) {\n      setError('No API documentation provided');\n      return;\n    }\n    \n    setError(null);\n    setIsAnalyzing(true);\n    setAnalysisProgress(0);\n    \n    try {\n      // Start analysis animation\n      const progressInterval = setInterval(() => {\n        setAnalysisProgress(prev => {\n          const newProgress = prev + Math.random() * 15;\n          return newProgress > 90 ? 90 : newProgress;\n        });\n      }, 300);\n      \n      // In a real implementation, we would use the apiDocAnalyzer service\n      // For demo purposes, the analysis is now instant\n      \n      // Parse API doc to extract basic info\n      const docObj = typeof apiDoc === 'string' ? JSON.parse(apiDoc) : apiDoc;\n      const isNinjaOne = docObj.info?.title?.includes('NinjaOne') || docObj.info?.title?.includes('Ninja');\n      \n      let analysisResult: ApiDocAnalysisResult;\n      \n      if (isNinjaOne) {\n        // Generate NinjaOne-specific analysis\n        analysisResult = {\n          title: docObj.info?.title || 'NinjaOne RMM API',\n          version: docObj.info?.version || '2.0.9',\n          serverUrl: 'https://app.ninjarmm.com',\n          authMethods: ['oauth2'],\n          endpointCount: Object.keys(docObj.paths || {}).length,\n          patterns: [\n            {\n              name: 'Asset Management',\n              description: 'Complete IT asset visibility and management for MSP clients',\n              endpoints: [\n                { name: 'Get All Devices', path: '/v2/devices', method: 'GET', description: 'Retrieve all managed devices with asset information' },\n                { name: 'Get Device Details', path: '/v2/devices/{id}', method: 'GET', description: 'Get detailed hardware specifications and status' },\n                { name: 'Get Software Inventory', path: '/v2/devices/{id}/software', method: 'GET', description: 'List all installed software and versions' },\n                { name: 'Get Device Activities', path: '/v2/devices/{id}/activities', method: 'GET', description: 'Track device changes and maintenance history' }\n              ]\n            },\n            {\n              name: 'Organization Management',\n              description: 'Manage client organizations and hierarchies',\n              endpoints: [\n                { name: 'Get Organizations', path: '/v2/organizations', method: 'GET', description: 'List all client organizations' },\n                { name: 'Get Organization Details', path: '/v2/organizations/{id}', method: 'GET', description: 'Get organization configuration and settings' }\n              ]\n            },\n            {\n              name: 'Monitoring & Alerts',\n              description: 'Proactive monitoring and automated alerting',\n              endpoints: [\n                { name: 'Get Device Health', path: '/v2/devices/{id}/health', method: 'GET', description: 'Monitor device performance and status' },\n                { name: 'Get Alerts', path: '/v2/alerts', method: 'GET', description: 'Retrieve system alerts and notifications' }\n              ]\n            }\n          ]\n        };\n      } else {\n        // Fallback for other APIs (HubSpot mock)\n        analysisResult = {\n          title: docObj.info?.title || 'Untitled API',\n          version: docObj.info?.version || '1.0.0',\n          serverUrl: docObj.servers?.[0]?.url || 'https://api.example.com',\n          authMethods: ['oauth2', 'apiKey'],\n          endpointCount: Object.keys(docObj.paths || {}).length,\n          patterns: [\n            {\n              name: 'Contacts Management',\n              description: 'Manage contact records with full CRUD operations',\n              endpoints: [\n                { name: 'Get Contacts', path: '/crm/v3/objects/contacts', method: 'GET', description: 'Get a list of contacts' },\n                { name: 'Create Contact', path: '/crm/v3/objects/contacts', method: 'POST', description: 'Create a new contact' },\n                { name: 'Update Contact', path: '/crm/v3/objects/contacts/{contactId}', method: 'PATCH', description: 'Update a specific contact' }\n              ]\n            },\n            {\n              name: 'Companies Management',\n              description: 'Manage company records with full CRUD operations',\n              endpoints: [\n                { name: 'Get Companies', path: '/crm/v3/objects/companies', method: 'GET', description: 'Get a list of companies' },\n                { name: 'Create Company', path: '/crm/v3/objects/companies', method: 'POST', description: 'Create a new company' }\n              ]\n            }\n          ]\n        };\n      }\n      \n      // Complete the progress bar\n      clearInterval(progressInterval);\n      setAnalysisProgress(100);\n      \n      // Set the results\n      setAnalysisResult(analysisResult);\n      setIntegrationName(analysisResult.title);\n      \n      // Proceed to next step after a brief delay\n      setTimeout(() => {\n        setIsAnalyzing(false);\n        setCurrentStep(3);\n      }, 500);\n      \n    } catch (err) {\n      setError('Failed to analyze API documentation. Please check the format and try again.');\n      setIsAnalyzing(false);\n    }\n  };\n  \n  // Generate integration code\n  const generateIntegration = async () => {\n    if (!user || !analysisResult) {\n      setError('User not authenticated or analysis not complete');\n      return;\n    }\n    \n    setError(null);\n    setIsGenerating(true);\n    setGenerationProgress(0);\n    \n    try {\n      // Start generation animation\n      const progressInterval = setInterval(() => {\n        setGenerationProgress(prev => {\n          const newProgress = prev + Math.random() * 10;\n          return newProgress > 90 ? 90 : newProgress;\n        });\n      }, 300);\n      \n      // Generation is now effectively instant\n      setGenerationProgress(70);\n      \n      // Generate TypeScript integration code\n      const generatedCode = `\n// Auto-generated ${integrationName} integration\nimport { ApiClient } from '@/lib/apiClient';\n\nexport class ${integrationName.replace(/[^a-zA-Z0-9]/g, '')}Integration {\n  private client: ApiClient;\n  \n  constructor(config: { baseUrl: string; apiKey?: string; clientId?: string; clientSecret?: string }) {\n    this.client = new ApiClient(config);\n  }\n  \n${analysisResult.patterns.map(pattern => \n  pattern.endpoints.map(endpoint => `\n  // ${endpoint.description}\n  async ${endpoint.name.replace(/[^a-zA-Z0-9]/g, '').toLowerCase()}() {\n    return this.client.${endpoint.method.toLowerCase()}('${endpoint.path}');\n  }`).join('')\n).join('')}\n}`;\n\n      setGenerationProgress(85);\n      \n      // Save the integration to the database\n      setIsSaving(true);\n      const integrationData: ApiIntegrationData = {\n        name: integrationName,\n        description: `Custom API integration for ${integrationName}`,\n        apiDoc,\n        analysisResult,\n        config: integrationConfig,\n        generatedCode\n      };\n      \n      const result = await ApiIntegrationService.saveApiIntegration(user.id, integrationData);\n      setSavedIntegrationId(result.userIntegration.id);\n      \n      // Complete the progress bar\n      clearInterval(progressInterval);\n      setGenerationProgress(100);\n      \n      // Notify parent component of the new integration\n      if (onIntegrationCreated) {\n        onIntegrationCreated(result);\n      }\n      \n      // Proceed to next step after a brief delay\n      setTimeout(() => {\n        setIsGenerating(false);\n        setIsSaving(false);\n        setCurrentStep(4);\n      }, 500);\n      \n    } catch (err) {\n      console.error('Error generating integration:', err);\n      setError(`Failed to generate integration: ${err instanceof Error ? err.message : 'Unknown error'}`);\n      setIsGenerating(false);\n      setIsSaving(false);\n    }\n  };\n  \n  // Handle configuration changes\n  const handleConfigChange = (key: string, value: string) => {\n    setIntegrationConfig(prev => ({\n      ...prev,\n      [key]: value\n    }));\n  };\n  \n  // Render different steps\n  const renderStep = () => {\n    switch (currentStep) {\n      case 1:\n        return (\n          <Card className=\"w-full\">\n            <CardHeader>\n              <CardTitle>Upload API Documentation</CardTitle>\n              <CardDescription>\n                Provide your API documentation in OpenAPI/Swagger format to automatically generate an integration.\n              </CardDescription>\n            </CardHeader>\n            <CardContent>\n              <Tabs value={activeTab} onValueChange={setActiveTab}>\n                <TabsList className=\"grid w-full grid-cols-2\">\n                  <TabsTrigger value=\"upload\">Upload File</TabsTrigger>\n                  <TabsTrigger value=\"url\">Fetch from URL</TabsTrigger>\n                </TabsList>\n                <TabsContent value=\"upload\" className=\"mt-6\">\n                  <div className=\"grid gap-4\">\n                    <div className=\"flex flex-col items-center justify-center border-2 border-dashed rounded-md p-8 cursor-pointer\" onClick={() => fileInputRef.current?.click()}>\n                      <FileUp className=\"h-10 w-10 text-muted-foreground mb-4\" />\n                      <p className=\"text-sm text-muted-foreground\">\n                        {uploadedFileName ? \n                          `Selected: ${uploadedFileName}` : \n                          'Click to select or drag and drop your OpenAPI/Swagger file'}\n                      </p>\n                      <input\n                        type=\"file\"\n                        ref={fileInputRef}\n                        className=\"hidden\"\n                        accept=\".json,.yaml,.yml\"\n                        onChange={handleFileUpload}\n                      />\n                    </div>\n                    <div className=\"flex justify-end\">\n                      <Button onClick={analyzeApiDoc} disabled={!apiDoc || isAnalyzing}>\n                        {isAnalyzing ? 'Analyzing...' : 'Analyze Documentation'}\n                        <ChevronRight className=\"ml-2 h-4 w-4\" />\n                      </Button>\n                    </div>\n                  </div>\n                </TabsContent>\n                <TabsContent value=\"url\" className=\"mt-6\">\n                  <div className=\"grid gap-4\">\n                    <div>\n                      <Label htmlFor=\"api-url\">API Documentation URL</Label>\n                      <div className=\"flex items-center space-x-2 mt-1.5\">\n                        <Input\n                          id=\"api-url\"\n                          placeholder=\"https://example.com/api-docs.json\"\n                          value={apiUrl}\n                          onChange={(e) => setApiUrl(e.target.value)}\n                        />\n                        <Button onClick={fetchApiDoc} disabled={!apiUrl || isAnalyzing}>\n                          <DownloadCloud className=\"h-4 w-4 mr-2\" />\n                          Fetch\n                        </Button>\n                      </div>\n                      <p className=\"text-sm text-muted-foreground mt-2\">\n                        Enter the URL of your OpenAPI/Swagger documentation.\n                      </p>\n                    </div>\n                    {isAnalyzing && (\n                      <div className=\"mt-4\">\n                        <Label className=\"text-sm\">Fetching documentation...</Label>\n                        <Progress value={analysisProgress} className=\"mt-2\" />\n                      </div>\n                    )}\n                  </div>\n                </TabsContent>\n              </Tabs>\n            </CardContent>\n          </Card>\n        );\n      \n      case 2:\n        return (\n          <Card className=\"w-full\">\n            <CardHeader>\n              <CardTitle>Analyze API Documentation</CardTitle>\n              <CardDescription>\n                Let Nexus analyze your API documentation to identify integration patterns.\n              </CardDescription>\n            </CardHeader>\n            <CardContent>\n              {isAnalyzing ? (\n                <div>\n                  <Label className=\"text-sm\">Analyzing API documentation...</Label>\n                  <Progress value={analysisProgress} className=\"mt-2\" />\n                  <p className=\"text-sm text-muted-foreground mt-4\">\n                    This may take a moment as we process your API documentation to identify patterns and generate integration code.\n                  </p>\n                </div>\n              ) : (\n                <div>\n                  <div className=\"grid gap-4 mb-4\">\n                    <div>\n                      <Label htmlFor=\"api-preview\">API Documentation Preview</Label>\n                      <div className=\"h-64 w-full border rounded-md p-4 mt-1.5 overflow-auto\">\n                        <pre className=\"text-xs text-muted-foreground whitespace-pre-wrap\">\n                          {apiDoc}\n                        </pre>\n                      </div>\n                    </div>\n                  </div>\n                  <div className=\"flex justify-end space-x-2\">\n                    <Button variant=\"outline\" onClick={() => setCurrentStep(1)}>\n                      Back\n                    </Button>\n                    <Button onClick={analyzeApiDoc} disabled={!apiDoc || isAnalyzing}>\n                      {isAnalyzing ? 'Analyzing...' : 'Analyze Documentation'}\n                      <ChevronRight className=\"ml-2 h-4 w-4\" />\n                    </Button>\n                  </div>\n                </div>\n              )}\n            </CardContent>\n          </Card>\n        );\n      \n      case 3:\n        return (\n          <Card className=\"w-full\">\n            <CardHeader>\n              <CardTitle>Configure Integration</CardTitle>\n              <CardDescription>\n                Review the analysis results and configure your integration.\n              </CardDescription>\n            </CardHeader>\n            <CardContent>\n              {analysisResult && (\n                <div className=\"grid gap-6\">\n                  <div className=\"grid gap-4 mb-4\">\n                    <div>\n                      <Label htmlFor=\"integration-name\">Integration Name</Label>\n                      <Input\n                        id=\"integration-name\"\n                        value={integrationName}\n                        onChange={(e) => setIntegrationName(e.target.value)}\n                        className=\"mt-1.5\"\n                      />\n                    </div>\n                    <div>\n                      <Label>Analysis Summary</Label>\n                      <div className=\"mt-1.5 grid grid-cols-2 gap-4\">\n                        <div className=\"space-y-1\">\n                          <p className=\"text-sm font-medium\">API Information</p>\n                          <p className=\"text-sm text-muted-foreground\">Version: {analysisResult.version}</p>\n                          <p className=\"text-sm text-muted-foreground\">Endpoints: {analysisResult.endpointCount}</p>\n                        </div>\n                        <div className=\"space-y-1\">\n                          <p className=\"text-sm font-medium\">Authentication</p>\n                          <div className=\"flex flex-wrap gap-1\">\n                            {analysisResult.authMethods.map((method) => (\n                              <Badge key={method} variant=\"outline\">\n                                {method}\n                              </Badge>\n                            ))}\n                          </div>\n                        </div>\n                      </div>\n                    </div>\n                    <div>\n                      <Label>Integration Patterns</Label>\n                      <div className=\"mt-1.5 space-y-3\">\n                        {analysisResult.patterns.map((pattern, idx) => (\n                          <div key={idx} className=\"border rounded-md p-3\">\n                            <div className=\"flex justify-between items-start\">\n                              <div>\n                                <p className=\"text-sm font-medium\">{pattern.name}</p>\n                                <p className=\"text-sm text-muted-foreground\">{pattern.description}</p>\n                              </div>\n                              <Badge variant=\"secondary\">{pattern.endpoints.length} endpoints</Badge>\n                            </div>\n                            <div className=\"h-32 mt-2 overflow-auto\">\n                              <div className=\"space-y-2\">\n                                {pattern.endpoints.map((endpoint, eidx) => (\n                                  <div key={eidx} className=\"text-xs border-l-2 border-muted pl-2 py-1\">\n                                    <div className=\"flex items-center space-x-2\">\n                                      <Badge variant=\"outline\" className=\"text-xs\">\n                                        {endpoint.method}\n                                      </Badge>\n                                      <code className=\"text-xs\">{endpoint.path}</code>\n                                    </div>\n                                    <p className=\"text-muted-foreground mt-1\">{endpoint.description}</p>\n                                  </div>\n                                ))}\n                              </div>\n                            </div>\n                          </div>\n                        ))}\n                      </div>\n                    </div>\n                    <div>\n                      <Label>Authentication Configuration</Label>\n                      <div className=\"mt-1.5 space-y-3\">\n                        {analysisResult.authMethods.includes('apiKey') && (\n                          <div className=\"border rounded-md p-3\">\n                            <div className=\"flex items-center space-x-2 mb-2\">\n                              <Key className=\"h-4 w-4 text-muted-foreground\" />\n                              <p className=\"text-sm font-medium\">API Key Authentication</p>\n                            </div>\n                            <div className=\"space-y-2\">\n                              <div>\n                                <Label htmlFor=\"api-key\" className=\"text-xs\">API Key</Label>\n                                <Input\n                                  id=\"api-key\"\n                                  placeholder=\"Enter your API key\"\n                                  value={integrationConfig.apiKey || ''}\n                                  onChange={(e) => handleConfigChange('apiKey', e.target.value)}\n                                  className=\"mt-1\"\n                                />\n                              </div>\n                            </div>\n                          </div>\n                        )}\n                        {analysisResult.authMethods.includes('oauth2') && (\n                          <div className=\"border rounded-md p-3\">\n                            <div className=\"flex items-center space-x-2 mb-2\">\n                              <Lock className=\"h-4 w-4 text-muted-foreground\" />\n                              <p className=\"text-sm font-medium\">OAuth 2.0 Authentication</p>\n                            </div>\n                            <div className=\"space-y-2\">\n                              <div>\n                                <Label htmlFor=\"client-id\" className=\"text-xs\">Client ID</Label>\n                                <Input\n                                  id=\"client-id\"\n                                  placeholder=\"Enter your client ID\"\n                                  value={integrationConfig.clientId || ''}\n                                  onChange={(e) => handleConfigChange('clientId', e.target.value)}\n                                  className=\"mt-1\"\n                                />\n                              </div>\n                              <div>\n                                <Label htmlFor=\"client-secret\" className=\"text-xs\">Client Secret</Label>\n                                <Input\n                                  id=\"client-secret\"\n                                  type=\"password\"\n                                  placeholder=\"Enter your client secret\"\n                                  value={integrationConfig.clientSecret || ''}\n                                  onChange={(e) => handleConfigChange('clientSecret', e.target.value)}\n                                  className=\"mt-1\"\n                                />\n                              </div>\n                              <div>\n                                <Label htmlFor=\"redirect-uri\" className=\"text-xs\">Redirect URI</Label>\n                                <Input\n                                  id=\"redirect-uri\"\n                                  placeholder=\"https://your-app.com/oauth/callback\"\n                                  value={integrationConfig.redirectUri || ''}\n                                  onChange={(e) => handleConfigChange('redirectUri', e.target.value)}\n                                  className=\"mt-1\"\n                                />\n                              </div>\n                            </div>\n                          </div>\n                        )}\n                      </div>\n                    </div>\n                    <div>\n                      <Label>Server Configuration</Label>\n                      <div className=\"mt-1.5 border rounded-md p-3\">\n                        <div className=\"flex items-center space-x-2 mb-2\">\n                          <Globe className=\"h-4 w-4 text-muted-foreground\" />\n                          <p className=\"text-sm font-medium\">API Server</p>\n                        </div>\n                        <div>\n                          <Label htmlFor=\"base-url\" className=\"text-xs\">Base URL</Label>\n                          <Input\n                            id=\"base-url\"\n                            placeholder=\"API base URL\"\n                            value={integrationConfig.baseUrl || analysisResult.serverUrl}\n                            onChange={(e) => handleConfigChange('baseUrl', e.target.value)}\n                            className=\"mt-1\"\n                          />\n                        </div>\n                      </div>\n                    </div>\n                  </div>\n                  <div className=\"flex justify-end space-x-2\">\n                    <Button variant=\"outline\" onClick={() => setCurrentStep(2)}>\n                      Back\n                    </Button>\n                    <Button onClick={generateIntegration} disabled={!integrationName || isGenerating}>\n                      {isGenerating ? 'Generating...' : 'Generate Integration'}\n                      <ChevronRight className=\"ml-2 h-4 w-4\" />\n                    </Button>\n                  </div>\n                </div>\n              )}\n            </CardContent>\n          </Card>\n        );\n      \n      case 4:\n        return (\n          <Card className=\"w-full\">\n            <CardHeader>\n              <CardTitle>Integration Complete</CardTitle>\n              <CardDescription>\n                Your integration has been successfully created and is ready to use.\n              </CardDescription>\n            </CardHeader>\n            <CardContent>\n              <div className=\"flex flex-col items-center justify-center py-6\">\n                <div className=\"rounded-full bg-primary/10 p-3 mb-4\">\n                  <Check className=\"h-6 w-6 text-primary\" />\n                </div>\n                <h3 className=\"text-lg font-semibold mb-1\">{integrationName} Integration Created</h3>\n                <p className=\"text-sm text-muted-foreground text-center max-w-md mb-6\">\n                  Your integration has been saved to your account and is ready to configure. You can find it in your Integrations Dashboard.\n                </p>\n                <div className=\"w-full max-w-md border rounded-md p-4 bg-muted/20\">\n                  <h4 className=\"text-sm font-medium mb-2\">Integration Details</h4>\n                  <div className=\"space-y-1 text-sm\">\n                    <p><span className=\"font-medium\">Name:</span> {integrationName}</p>\n                    <p><span className=\"font-medium\">Status:</span> <Badge variant=\"outline\">Pending Configuration</Badge></p>\n                    <p><span className=\"font-medium\">Authentication:</span> {analysisResult?.authMethods.join(', ')}</p>\n                    <p><span className=\"font-medium\">Patterns:</span> {analysisResult?.patterns.length}</p>\n                    <p><span className=\"font-medium\">Endpoints:</span> {analysisResult?.endpointCount}</p>\n                    {savedIntegrationId && (\n                      <p><span className=\"font-medium\">ID:</span> <code className=\"text-xs bg-muted px-1 rounded\">{savedIntegrationId}</code></p>\n                    )}\n                  </div>\n                </div>\n                \n                <div className=\"w-full max-w-md mt-4 p-3 bg-blue-50 dark:bg-blue-950/20 border border-blue-200 dark:border-blue-800 rounded-md\">\n                  <p className=\"text-sm text-blue-700 dark:text-blue-300\">\n                    <strong>Next Steps:</strong> Go to the Integrations Dashboard to complete the authentication setup and start using your new {integrationName} integration.\n                  </p>\n                </div>\n              </div>\n            </CardContent>\n            <CardFooter className=\"justify-between\">\n              <Button variant=\"outline\" onClick={() => {\n                // Reset state for a new integration\n                setCurrentStep(1);\n                setApiDoc('');\n                setUploadedFileName('');\n                setApiUrl('');\n                setAnalysisResult(null);\n                setIntegrationName('');\n                setIntegrationConfig({});\n                setActiveTab('upload');\n              }}>\n                Create Another Integration\n              </Button>\n              <Button onClick={() => {\n                // Navigate to integrations page to see the created integration\n                window.location.href = '/integrations';\n              }}>\n                Go to Integrations Dashboard\n              </Button>\n            </CardFooter>\n          </Card>\n        );\n      \n      default:\n        return null;\n    }\n  };\n  \n  return (\n    <div className=\"flex flex-col items-center space-y-6 max-w-3xl mx-auto\">\n      <div className=\"w-full\">\n        <div className=\"mb-8\">\n          <h2 className=\"text-2xl font-bold mb-2\">API Documentation Integration</h2>\n          <p className=\"text-muted-foreground\">\n            Connect Nexus to any API by providing API documentation. Our AI will analyze the API structure and generate a custom integration.\n          </p>\n        </div>\n        \n        <div className=\"mb-8\">\n          <div className=\"flex items-center justify-between relative\">\n            {[1, 2, 3, 4].map((step) => (\n              <div key={step} className=\"flex flex-col items-center relative z-10\">\n                <div \n                  className={`w-10 h-10 rounded-full flex items-center justify-center font-medium\n                    ${currentStep === step ? 'bg-primary text-white' : \n                      currentStep > step ? 'bg-primary/20 text-primary' : 'bg-muted text-muted-foreground'}`\n                  }\n                >\n                  {currentStep > step ? <Check className=\"h-5 w-5\" /> : step}\n                </div>\n                <span className=\"text-xs mt-2 text-center\">\n                  {step === 1 && 'Upload'}\n                  {step === 2 && 'Analyze'}\n                  {step === 3 && 'Configure'}\n                  {step === 4 && 'Complete'}\n                </span>\n              </div>\n            ))}\n            <div className=\"absolute top-5 left-0 w-full h-[2px] bg-muted -z-0\">\n              <div \n                className=\"h-full bg-primary transition-all duration-300\"\n                style={{ width: `${(currentStep - 1) * 33.33}%` }}\n              />\n            </div>\n          </div>\n        </div>\n        \n        {error && (\n          <Alert variant=\"error\" className=\"mb-6\">\n            <AlertCircle className=\"h-4 w-4\" />\n            <AlertDescription>\n              <strong>Error:</strong> {error}\n            </AlertDescription>\n          </Alert>\n        )}\n        \n        {renderStep()}\n      </div>\n    </div>\n  );\n};\n\nexport default ApiDocIntegrationSetup; ","usedDeprecatedRules":[]},{"filePath":"/home/vonj/Github/Nexus/src/components/integrations/ClientIntelligenceService.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":40,"column":13,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":40,"endColumn":16,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[994,997],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[994,997],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":53,"column":13,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":53,"endColumn":16,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1341,1344],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1341,1344],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'startDate' is assigned a value but never used.","line":424,"column":13,"nodeType":null,"messageId":"unusedVar","endLine":424,"endColumn":22}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\n * Client Intelligence Service\n * Connects UI to the n8n client intelligence workflows and provides data operations\n * Pillar: 1,2 - Customer Success Automation + Business Workflow Intelligence\n */\n\nimport { supabase } from '../../lib/core/supabase';\nimport { logger } from '@/lib/security/logger';\n\nexport interface UnifiedClientProfile {\n  id: string;\n  client_id: string;\n  user_id: string;\n  company_id: string;\n  profile_data: {\n    name?: string;\n    email?: string;\n    phone?: string;\n    company?: string;\n    location?: string;\n    industry?: string;\n    website?: string;\n    social_profiles?: {\n      linkedin?: string;\n      twitter?: string;\n    };\n    demographics?: {\n      company_size?: string;\n      revenue_range?: string;\n      role?: string;\n    };\n  };\n  source_integrations: string[];\n  primary_source: string;\n  completeness_score: number;\n  engagement_score: number;\n  estimated_value: number;\n  last_interaction: string;\n  last_enrichment_at: string;\n  insights: any[];\n  created_at: string;\n  updated_at: string;\n}\n\nexport interface ClientInteraction {\n  id: string;\n  client_profile_id: string;\n  interaction_type: 'email' | 'call' | 'meeting' | 'transaction' | 'support' | 'website_visit';\n  channel: string;\n  summary: string;\n  sentiment: 'positive' | 'neutral' | 'negative';\n  value: number;\n  metadata: any;\n  occurred_at: string;\n}\n\nexport interface ClientIntelligenceAlert {\n  id: string;\n  client_profile_id: string;\n  alert_type: 'opportunity' | 'risk' | 'milestone' | 'anomaly';\n  title: string;\n  description: string;\n  priority: 'low' | 'medium' | 'high' | 'critical';\n  is_resolved: boolean;\n  created_at: string;\n}\n\nclass ClientIntelligenceService {\n  private readonly n8nWebhookBase = 'https://automate.marcoby.net/webhook';\n\n  /**\n   * Fetch unified client profiles with filtering and sorting\n   */\n  async getClientProfiles(\n    userId: string,\n    options: {\n      filter?: 'all' | 'high_value' | 'recent' | 'at_risk';\n      sortBy?: 'engagement' | 'value' | 'recent' | 'completeness';\n      search?: string;\n      limit?: number;\n    } = {}\n  ): Promise<UnifiedClientProfile[]> {\n    try {\n      const { filter = 'all', sortBy = 'engagement', search, limit = 50 } = options;\n\n      let query = supabase\n        .from('ai_unified_client_profiles')\n        .select('*')\n        .eq('user_id', userId);\n\n      // Apply filters\n      switch (filter) {\n        case 'high_value':\n          query = query.gte('estimated_value', 10000);\n          break;\n        case 'recent':\n          query = query.gte('last_interaction', new Date(Date.now() - 7 * 24 * 60 * 60 * 1000).toISOString());\n          break;\n        case 'at_risk':\n          query = query.lt('engagement_score', 30);\n          break;\n      }\n\n      // Apply search\n      if (search) {\n        query = query.or(`profile_data->>name.ilike.%${search}%,profile_data->>email.ilike.%${search}%,profile_data->>company.ilike.%${search}%`);\n      }\n\n      // Apply sorting\n      switch (sortBy) {\n        case 'engagement':\n          query = query.order('engagement_score', { ascending: false });\n          break;\n        case 'value':\n          query = query.order('estimated_value', { ascending: false });\n          break;\n        case 'recent':\n          query = query.order('last_interaction', { ascending: false });\n          break;\n        case 'completeness':\n          query = query.order('completeness_score', { ascending: false });\n          break;\n      }\n\n      const { data, error } = await query.limit(limit);\n\n      if (error) {\n        logger.error({ error }, 'Error fetching client profiles');\n        throw error;\n      }\n\n      return data || [];\n    } catch (error) {\n      logger.error({ error, userId }, 'Failed to get client profiles');\n      throw error;\n    }\n  }\n\n  /**\n   * Get client interactions for a specific profile or all profiles\n   */\n  async getClientInteractions(\n    userId: string,\n    clientProfileId?: string,\n    limit: number = 100\n  ): Promise<ClientInteraction[]> {\n    try {\n      let query = supabase\n        .from('ai_client_interactions')\n        .select(`\n          *,\n          ai_unified_client_profiles!inner(user_id)\n        `)\n        .eq('ai_unified_client_profiles.user_id', userId)\n        .order('occurred_at', { ascending: false });\n\n      if (clientProfileId) {\n        query = query.eq('client_profile_id', clientProfileId);\n      }\n\n      const { data, error } = await query.limit(limit);\n\n      if (error) {\n        logger.error({ error }, 'Error fetching client interactions');\n        throw error;\n      }\n\n      return data || [];\n    } catch (error) {\n      logger.error({ error, userId }, 'Failed to get client interactions');\n      throw error;\n    }\n  }\n\n  /**\n   * Get active intelligence alerts\n   */\n  async getIntelligenceAlerts(\n    userId: string,\n    clientProfileId?: string,\n    resolved: boolean = false\n  ): Promise<ClientIntelligenceAlert[]> {\n    try {\n      let query = supabase\n        .from('ai_client_intelligence_alerts')\n        .select(`\n          *,\n          ai_unified_client_profiles!inner(user_id)\n        `)\n        .eq('ai_unified_client_profiles.user_id', userId)\n        .eq('is_resolved', resolved)\n        .order('created_at', { ascending: false });\n\n      if (clientProfileId) {\n        query = query.eq('client_profile_id', clientProfileId);\n      }\n\n      const { data, error } = await query.limit(50);\n\n      if (error) {\n        logger.error({ error }, 'Error fetching intelligence alerts');\n        throw error;\n      }\n\n      return data || [];\n    } catch (error) {\n      logger.error({ error, userId }, 'Failed to get intelligence alerts');\n      throw error;\n    }\n  }\n\n  /**\n   * Trigger client data unification workflow\n   */\n  async triggerClientUnification(\n    clientId: string,\n    userId: string,\n    companyId: string,\n    type: 'full_profile' | 'profile_refresh' | 'interaction_update' = 'profile_refresh'\n  ): Promise<{ success: boolean; workflowId?: string; error?: string }> {\n    try {\n      const response = await fetch(`${this.n8nWebhookBase}/client-data-unification`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify({\n          client_id: clientId,\n          user_id: userId,\n          company_id: companyId,\n          type,\n          timestamp: new Date().toISOString()\n        })\n      });\n\n      if (!response.ok) {\n        throw new Error(`N8N workflow failed: ${response.status}`);\n      }\n\n      const result = await response.json();\n      \n      logger.info({ clientId, userId, type }, 'Client unification workflow triggered');\n      \n      return {\n        success: true,\n        workflowId: result.workflowId\n      };\n    } catch (error) {\n      logger.error({ error, clientId, userId }, 'Failed to trigger client unification');\n      return {\n        success: false,\n        error: error instanceof Error ? error.message : 'Unknown error'\n      };\n    }\n  }\n\n  /**\n   * Trigger real-time client intelligence monitoring\n   */\n  async triggerIntelligenceMonitoring(\n    userId: string,\n    companyId: string\n  ): Promise<{ success: boolean; error?: string }> {\n    try {\n      const response = await fetch(`${this.n8nWebhookBase}/client-intelligence-monitor`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify({\n          user_id: userId,\n          company_id: companyId,\n          trigger_type: 'manual',\n          timestamp: new Date().toISOString()\n        })\n      });\n\n      if (!response.ok) {\n        throw new Error(`N8N workflow failed: ${response.status}`);\n      }\n\n      logger.info({ userId }, 'Intelligence monitoring triggered');\n      \n      return { success: true };\n    } catch (error) {\n      logger.error({ error, userId }, 'Failed to trigger intelligence monitoring');\n      return {\n        success: false,\n        error: error instanceof Error ? error.message : 'Unknown error'\n      };\n    }\n  }\n\n  /**\n   * Create or update a client profile manually\n   */\n  async upsertClientProfile(\n    profile: Partial<UnifiedClientProfile>\n  ): Promise<{ success: boolean; data?: UnifiedClientProfile; error?: string }> {\n    try {\n      const { data, error } = await supabase\n        .from('ai_unified_client_profiles')\n        .upsert(profile, { \n          onConflict: 'client_id,user_id',\n          ignoreDuplicates: false \n        })\n        .select()\n        .single();\n\n      if (error) {\n        logger.error({ error }, 'Error upserting client profile');\n        throw error;\n      }\n\n      return { success: true, data };\n    } catch (error) {\n      logger.error({ error }, 'Failed to upsert client profile');\n      return {\n        success: false,\n        error: error instanceof Error ? error.message : 'Unknown error'\n      };\n    }\n  }\n\n  /**\n   * Record a client interaction\n   */\n  async recordInteraction(\n    interaction: Omit<ClientInteraction, 'id' | 'created_at'>\n  ): Promise<{ success: boolean; data?: ClientInteraction; error?: string }> {\n    try {\n      const { data, error } = await supabase\n        .from('ai_client_interactions')\n        .insert(interaction)\n        .select()\n        .single();\n\n      if (error) {\n        logger.error({ error }, 'Error recording client interaction');\n        throw error;\n      }\n\n      // Trigger intelligence monitoring after new interaction\n      if (data) {\n        const profile = await supabase\n          .from('ai_unified_client_profiles')\n          .select('user_id, company_id')\n          .eq('id', interaction.client_profile_id)\n          .single();\n\n        if (profile.data) {\n          await this.triggerIntelligenceMonitoring(\n            profile.data.user_id,\n            profile.data.company_id\n          );\n        }\n      }\n\n      return { success: true, data };\n    } catch (error) {\n      logger.error({ error }, 'Failed to record interaction');\n      return {\n        success: false,\n        error: error instanceof Error ? error.message : 'Unknown error'\n      };\n    }\n  }\n\n  /**\n   * Resolve an intelligence alert\n   */\n  async resolveAlert(\n    alertId: string,\n    userId: string\n  ): Promise<{ success: boolean; error?: string }> {\n    try {\n      const { error } = await supabase\n        .from('ai_client_intelligence_alerts')\n        .update({ \n          is_resolved: true,\n          resolved_at: new Date().toISOString(),\n          resolved_by: userId\n        })\n        .eq('id', alertId);\n\n      if (error) {\n        logger.error({ error }, 'Error resolving alert');\n        throw error;\n      }\n\n      return { success: true };\n    } catch (error) {\n      logger.error({ error, alertId }, 'Failed to resolve alert');\n      return {\n        success: false,\n        error: error instanceof Error ? error.message : 'Unknown error'\n      };\n    }\n  }\n\n  /**\n   * Get client intelligence analytics\n   */\n  async getAnalytics(\n    userId: string,\n    timeframe: 'week' | 'month' | 'quarter' = 'month'\n  ): Promise<{\n    totalClients: number;\n    totalValue: number;\n    averageEngagement: number;\n    activeAlerts: number;\n    topSources: Array<{ source: string; count: number }>;\n    engagementTrend: Array<{ date: string; score: number }>;\n    valueTrend: Array<{ date: string; value: number }>;\n  }> {\n    try {\n      const timeframeMap = {\n        week: 7,\n        month: 30,\n        quarter: 90\n      };\n\n      const daysBack = timeframeMap[timeframe];\n      const startDate = new Date(Date.now() - daysBack * 24 * 60 * 60 * 1000);\n\n      // Get basic stats\n      const { data: profiles } = await supabase\n        .from('ai_unified_client_profiles')\n        .select('*')\n        .eq('user_id', userId);\n\n      const { data: alerts } = await supabase\n        .from('ai_client_intelligence_alerts')\n        .select('id')\n        .eq('is_resolved', false);\n\n      const totalClients = profiles?.length || 0;\n      const totalValue = profiles?.reduce((sum, p) => sum + (p.estimated_value || 0), 0) || 0;\n      const averageEngagement = profiles?.length \n        ? Math.round(profiles.reduce((sum, p) => sum + (p.engagement_score || 0), 0) / profiles.length)\n        : 0;\n\n      // Get source distribution\n      const sourceCount: Record<string, number> = {};\n      profiles?.forEach(p => {\n        p.source_integrations?.forEach((source: string) => {\n          sourceCount[source] = (sourceCount[source] || 0) + 1;\n        });\n      });\n\n      const topSources = Object.entries(sourceCount)\n        .map(([source, count]) => ({ source, count }))\n        .sort((a, b) => b.count - a.count)\n        .slice(0, 5);\n\n      // Mock trend data (in real implementation, this would come from time-series data)\n      const engagementTrend = Array.from({ length: daysBack }, (_, i) => ({\n        date: new Date(Date.now() - (daysBack - i) * 24 * 60 * 60 * 1000).toISOString().split('T')[0],\n        score: Math.round(averageEngagement + Math.random() * 20 - 10)\n      }));\n\n      const valueTrend = Array.from({ length: daysBack }, (_, i) => ({\n        date: new Date(Date.now() - (daysBack - i) * 24 * 60 * 60 * 1000).toISOString().split('T')[0],\n        value: Math.round(totalValue * (0.8 + Math.random() * 0.4))\n      }));\n\n      return {\n        totalClients,\n        totalValue,\n        averageEngagement,\n        activeAlerts: alerts?.length || 0,\n        topSources,\n        engagementTrend,\n        valueTrend\n      };\n    } catch (error) {\n      logger.error({ error, userId }, 'Failed to get client intelligence analytics');\n      throw error;\n    }\n  }\n}\n\nexport const clientIntelligenceService = new ClientIntelligenceService(); ","usedDeprecatedRules":[]},{"filePath":"/home/vonj/Github/Nexus/src/components/integrations/CloudStorageSetup.tsx","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":47,"column":12,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":47,"endColumn":15,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[951,954],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[951,954],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":54,"column":50,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":54,"endColumn":53,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1297,1300],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1297,1300],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has a missing dependency: 'checkConnectionStatus'. Either include it or remove the dependency array.","line":80,"column":6,"nodeType":"ArrayExpression","endLine":80,"endColumn":8,"suggestions":[{"desc":"Update the dependencies array to be: [checkConnectionStatus]","fix":{"range":[2018,2020],"text":"[checkConnectionStatus]"}}]},{"ruleId":"no-restricted-syntax","severity":1,"message":"Use design tokens instead of hardcoded colors (e.g., bg-primary, bg-secondary)","line":183,"column":24,"nodeType":"Literal","messageId":"restrictedSyntax","endLine":183,"endColumn":101},{"ruleId":"no-restricted-syntax","severity":1,"message":"Use design tokens instead of hardcoded text colors (e.g., text-foreground, text-muted-foreground)","line":184,"column":31,"nodeType":"Literal","messageId":"restrictedSyntax","endLine":184,"endColumn":54},{"ruleId":"no-restricted-syntax","severity":1,"message":"Use design tokens instead of hardcoded text colors (e.g., text-foreground, text-muted-foreground)","line":188,"column":24,"nodeType":"Literal","messageId":"restrictedSyntax","endLine":188,"endColumn":44},{"ruleId":"no-restricted-syntax","severity":1,"message":"Use design tokens instead of hardcoded colors (e.g., bg-primary, bg-secondary)","line":195,"column":22,"nodeType":"Literal","messageId":"restrictedSyntax","endLine":195,"endColumn":49},{"ruleId":"no-restricted-syntax","severity":1,"message":"Use design tokens instead of hardcoded text colors (e.g., text-foreground, text-muted-foreground)","line":196,"column":23,"nodeType":"Literal","messageId":"restrictedSyntax","endLine":196,"endColumn":55},{"ruleId":"no-restricted-syntax","severity":1,"message":"Use design tokens instead of hardcoded text colors (e.g., text-foreground, text-muted-foreground)","line":197,"column":23,"nodeType":"Literal","messageId":"restrictedSyntax","endLine":197,"endColumn":56},{"ruleId":"no-restricted-syntax","severity":1,"message":"Use design tokens instead of hardcoded text colors (e.g., text-foreground, text-muted-foreground)","line":215,"column":22,"nodeType":"Literal","messageId":"restrictedSyntax","endLine":215,"endColumn":42},{"ruleId":"no-restricted-syntax","severity":1,"message":"Use design tokens instead of hardcoded text colors (e.g., text-foreground, text-muted-foreground)","line":229,"column":36,"nodeType":"Literal","messageId":"restrictedSyntax","endLine":229,"endColumn":59},{"ruleId":"no-restricted-syntax","severity":1,"message":"Use design tokens instead of hardcoded text colors (e.g., text-foreground, text-muted-foreground)","line":231,"column":41,"nodeType":"Literal","messageId":"restrictedSyntax","endLine":231,"endColumn":75},{"ruleId":"no-restricted-syntax","severity":1,"message":"Use design tokens instead of hardcoded text colors (e.g., text-foreground, text-muted-foreground)","line":247,"column":36,"nodeType":"Literal","messageId":"restrictedSyntax","endLine":247,"endColumn":59},{"ruleId":"no-restricted-syntax","severity":1,"message":"Use design tokens instead of hardcoded colors (e.g., bg-primary, bg-secondary)","line":260,"column":32,"nodeType":"Literal","messageId":"restrictedSyntax","endLine":260,"endColumn":81},{"ruleId":"no-restricted-syntax","severity":1,"message":"Use design tokens instead of hardcoded text colors (e.g., text-foreground, text-muted-foreground)","line":260,"column":32,"nodeType":"Literal","messageId":"restrictedSyntax","endLine":260,"endColumn":81},{"ruleId":"no-restricted-syntax","severity":1,"message":"Use design tokens instead of hardcoded colors (e.g., bg-primary, bg-secondary)","line":302,"column":24,"nodeType":"Literal","messageId":"restrictedSyntax","endLine":302,"endColumn":106},{"ruleId":"no-restricted-syntax","severity":1,"message":"Use design tokens instead of hardcoded text colors (e.g., text-foreground, text-muted-foreground)","line":306,"column":22,"nodeType":"Literal","messageId":"restrictedSyntax","endLine":306,"endColumn":37},{"ruleId":"no-restricted-syntax","severity":1,"message":"Use design tokens instead of hardcoded colors (e.g., bg-primary, bg-secondary)","line":322,"column":46,"nodeType":"Literal","messageId":"restrictedSyntax","endLine":322,"endColumn":104},{"ruleId":"no-restricted-syntax","severity":1,"message":"Use design tokens instead of hardcoded colors (e.g., bg-primary, bg-secondary)","line":338,"column":24,"nodeType":"Literal","messageId":"restrictedSyntax","endLine":338,"endColumn":107},{"ruleId":"no-restricted-syntax","severity":1,"message":"Use design tokens instead of hardcoded text colors (e.g., text-foreground, text-muted-foreground)","line":339,"column":34,"nodeType":"Literal","messageId":"restrictedSyntax","endLine":339,"endColumn":58},{"ruleId":"no-restricted-syntax","severity":1,"message":"Use design tokens instead of hardcoded text colors (e.g., text-foreground, text-muted-foreground)","line":342,"column":22,"nodeType":"Literal","messageId":"restrictedSyntax","endLine":342,"endColumn":37},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":350,"column":37,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":350,"endColumn":40,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[11632,11635],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[11632,11635],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"no-restricted-syntax","severity":1,"message":"Use design tokens instead of hardcoded text colors (e.g., text-foreground, text-muted-foreground)","line":356,"column":36,"nodeType":"Literal","messageId":"restrictedSyntax","endLine":356,"endColumn":59},{"ruleId":"no-restricted-syntax","severity":1,"message":"Use design tokens instead of hardcoded text colors (e.g., text-foreground, text-muted-foreground)","line":370,"column":34,"nodeType":"Literal","messageId":"restrictedSyntax","endLine":370,"endColumn":61},{"ruleId":"no-restricted-syntax","severity":1,"message":"Use design tokens instead of hardcoded colors (e.g., bg-primary, bg-secondary)","line":385,"column":22,"nodeType":"Literal","messageId":"restrictedSyntax","endLine":385,"endColumn":50},{"ruleId":"no-restricted-syntax","severity":1,"message":"Use design tokens instead of hardcoded text colors (e.g., text-foreground, text-muted-foreground)","line":387,"column":26,"nodeType":"Literal","messageId":"restrictedSyntax","endLine":387,"endColumn":57},{"ruleId":"no-restricted-syntax","severity":1,"message":"Use design tokens instead of hardcoded text colors (e.g., text-foreground, text-muted-foreground)","line":388,"column":26,"nodeType":"Literal","messageId":"restrictedSyntax","endLine":388,"endColumn":50},{"ruleId":"no-restricted-syntax","severity":1,"message":"Use design tokens instead of hardcoded colors (e.g., bg-primary, bg-secondary)","line":424,"column":30,"nodeType":"Literal","messageId":"restrictedSyntax","endLine":424,"endColumn":54},{"ruleId":"no-restricted-syntax","severity":1,"message":"Use design tokens instead of hardcoded colors (e.g., bg-primary, bg-secondary)","line":425,"column":33,"nodeType":"Literal","messageId":"restrictedSyntax","endLine":425,"endColumn":58},{"ruleId":"no-restricted-syntax","severity":1,"message":"Use design tokens instead of hardcoded colors (e.g., bg-primary, bg-secondary)","line":426,"column":19,"nodeType":"Literal","messageId":"restrictedSyntax","endLine":426,"endColumn":46},{"ruleId":"no-restricted-syntax","severity":1,"message":"Use design tokens instead of hardcoded text colors (e.g., text-foreground, text-muted-foreground)","line":426,"column":19,"nodeType":"Literal","messageId":"restrictedSyntax","endLine":426,"endColumn":46},{"ruleId":"no-restricted-syntax","severity":1,"message":"Use design tokens instead of hardcoded colors (e.g., bg-primary, bg-secondary)","line":432,"column":35,"nodeType":"Literal","messageId":"restrictedSyntax","endLine":432,"endColumn":49},{"ruleId":"no-restricted-syntax","severity":1,"message":"Use design tokens instead of hardcoded colors (e.g., bg-primary, bg-secondary)","line":432,"column":52,"nodeType":"Literal","messageId":"restrictedSyntax","endLine":432,"endColumn":65}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":33,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\n * Cloud Storage Setup Component for RAG Integration\n * Configures Google Drive and OneDrive document syncing for intelligent retrieval\n */\n\nimport React, { useState, useEffect } from 'react';\nimport {\n  Cloud,\n  FileText,\n  RefreshCw,\n  CheckCircle,\n  AlertCircle,\n  Eye,\n  Zap,\n} from 'lucide-react';\nimport {\n  Card,\n  CardContent,\n  Button,\n  Badge,\n  Progress,\n  Switch,\n  useToast,\n} from '@/components/ui';\nimport { googleDriveService } from '@/lib/services/googleDriveService';\nimport { oneDriveService } from '@/lib/services/oneDriveService';\n\ninterface CloudStorageSetupProps {\n  onComplete?: () => void;\n  onClose?: () => void;\n}\n\ninterface SyncStatus {\n  lastSync: string | null;\n  totalDocuments: number;\n  pendingSync: number;\n  errors: string[];\n}\n\ninterface StorageProvider {\n  id: 'google-drive' | 'onedrive';\n  name: string;\n  icon: React.ReactNode;\n  connected: boolean;\n  enabled: boolean;\n  syncStatus: SyncStatus;\n  service: any;\n}\n\nexport function CloudStorageSetup({ onComplete, onClose }: CloudStorageSetupProps) {\n  const [step, setStep] = useState<'overview' | 'configure' | 'sync' | 'complete'>('overview');\n  const [isLoading, setIsLoading] = useState(false);\n  const [syncProgress, setSyncProgress] = useState(0);\n  const [syncResults, setSyncResults] = useState<any>(null);\n  const { toast } = useToast();\n\n  const [providers, setProviders] = useState<StorageProvider[]>([\n    {\n      id: 'google-drive',\n      name: 'Google Drive',\n      icon: <Cloud className=\"w-5 h-5\" />,\n      connected: false,\n      enabled: false,\n      syncStatus: { lastSync: null, totalDocuments: 0, pendingSync: 0, errors: [] },\n      service: googleDriveService\n    },\n    {\n      id: 'onedrive',\n      name: 'OneDrive/SharePoint',\n      icon: <Cloud className=\"w-5 h-5\" />,\n      connected: false,\n      enabled: false,\n      syncStatus: { lastSync: null, totalDocuments: 0, pendingSync: 0, errors: [] },\n      service: oneDriveService\n    }\n  ]);\n\n  useEffect(() => {\n    checkConnectionStatus();\n  }, []);\n\n  const checkConnectionStatus = async () => {\n    const updatedProviders = await Promise.all(\n      providers.map(async (provider) => {\n        try {\n          const connected = await provider.service.initialize();\n          const syncStatus = connected ? await provider.service.getSyncStatus() : \n            { lastSync: null, totalDocuments: 0, pendingSync: 0, errors: [] };\n          \n          return {\n            ...provider,\n            connected,\n            enabled: connected,\n            syncStatus\n          };\n        } catch (error) {\n          console.error(`Failed to check ${provider.name} status:`, error);\n          return provider;\n        }\n      })\n    );\n    setProviders(updatedProviders);\n  };\n\n  const toggleProvider = async (providerId: string, enabled: boolean) => {\n    if (!enabled) {\n      // Just disable locally\n      setProviders(prev => prev.map(p => \n        p.id === providerId ? { ...p, enabled: false } : p\n      ));\n      return;\n    }\n\n    // If enabling, check if connected\n    const provider = providers.find(p => p.id === providerId);\n    if (!provider?.connected) {\n      toast({\n        title: \"Integration Required\",\n        description: `Please connect ${provider?.name} first in the Integrations page.`,\n        variant: \"destructive\"\n      });\n      return;\n    }\n\n    setProviders(prev => prev.map(p => \n      p.id === providerId ? { ...p, enabled: true } : p\n    ));\n  };\n\n  const syncDocuments = async () => {\n    setStep('sync');\n    setIsLoading(true);\n    setSyncProgress(0);\n\n    const enabledProviders = providers.filter(p => p.enabled);\n    const results = [];\n\n    for (let i = 0; i < enabledProviders.length; i++) {\n      const provider = enabledProviders[i];\n      \n      try {\n        toast({\n          title: \"Syncing Documents\",\n          description: `Processing ${provider.name} documents...`,\n        });\n\n        const result = await provider.service.triggerSync();\n        results.push({ provider: provider.name, ...result });\n        \n        setSyncProgress(((i + 1) / enabledProviders.length) * 100);\n        \n        // Update provider status\n        const updatedStatus = await provider.service.getSyncStatus();\n        setProviders(prev => prev.map(p => \n          p.id === provider.id ? { ...p, syncStatus: updatedStatus } : p\n        ));\n\n      } catch (error) {\n        const errorMessage = error instanceof Error ? error.message : 'An unknown error occurred';\n        console.error(`Failed to sync ${provider.name}:`, error);\n        results.push({ \n          provider: provider.name, \n          success: false, \n          processed: 0, \n          errors: [errorMessage] \n        });\n        toast({\n          title: `Sync Error: ${provider.name}`,\n          description: errorMessage,\n          variant: 'destructive'\n        });\n      }\n    }\n\n    setSyncResults(results);\n    setIsLoading(false);\n    setStep('complete');\n  };\n\n  const renderOverview = () => (\n    <div className=\"space-y-6\">\n      <div className=\"text-center space-y-4\">\n        <div className=\"mx-auto w-16 h-16 bg-blue-100 rounded-full flex items-center justify-center\">\n          <FileText className=\"w-8 h-8 text-blue-600\" />\n        </div>\n        <div>\n          <h3 className=\"text-xl font-semibold\">Cloud Storage RAG Integration</h3>\n          <p className=\"text-gray-600 mt-2\">\n            Connect your cloud storage to make documents searchable by Nexus AI.\n            Your files become intelligent business context.\n          </p>\n        </div>\n      </div>\n\n      <div className=\"bg-blue-50 p-4 rounded-lg\">\n        <h4 className=\"font-medium text-blue-900 mb-2\">What This Enables:</h4>\n        <ul className=\"text-sm text-blue-800 space-y-1\">\n          <li>• AI can reference your meeting notes, project docs, and spreadsheets</li>\n          <li>• \"Based on last week's board meeting...\" type responses</li>\n          <li>• Intelligent search across all your business documents</li>\n          <li>• Contextual insights from your actual company data</li>\n        </ul>\n      </div>\n\n      <Button onClick={() => setStep('configure')} className=\"w-full\">\n        Configure Document Sync\n      </Button>\n    </div>\n  );\n\n  const renderConfigure = () => (\n    <div className=\"space-y-6\">\n      <div>\n        <h3 className=\"text-lg font-semibold mb-4\">Select Storage Providers</h3>\n        <p className=\"text-gray-600 mb-6\">\n          Choose which cloud storage services to sync for AI document retrieval.\n        </p>\n      </div>\n\n      <div className=\"space-y-4\">\n        {providers.map((provider) => (\n          <Card key={provider.id} className=\"border\">\n            <CardContent className=\"p-4\">\n              <div className=\"flex items-center justify-between\">\n                <div className=\"flex items-center space-x-3\">\n                  {provider.icon}\n                  <div>\n                    <div className=\"font-medium\">{provider.name}</div>\n                    <div className=\"text-sm text-gray-500\">\n                      {provider.connected ? (\n                        <span className=\"flex items-center text-green-600\">\n                          <CheckCircle className=\"w-4 h-4 mr-1\" />\n                          Connected • {provider.syncStatus.totalDocuments} documents\n                        </span>\n                      ) : (\n                        <span className=\"flex items-center text-orange-600\">\n                          <AlertCircle className=\"w-4 h-4 mr-1\" />\n                          Not connected\n                        </span>\n                      )}\n                    </div>\n                  </div>\n                </div>\n                \n                <div className=\"flex items-center space-x-3\">\n                  {provider.syncStatus.lastSync && (\n                    <div className=\"text-xs text-gray-500\">\n                      Last sync: {new Date(provider.syncStatus.lastSync).toLocaleDateString()}\n                    </div>\n                  )}\n                  <Switch\n                    checked={provider.enabled}\n                    onCheckedChange={(checked: boolean) => toggleProvider(provider.id, checked)}\n                    disabled={!provider.connected}\n                  />\n                </div>\n              </div>\n              \n              {provider.syncStatus.errors.length > 0 && (\n                <div className=\"mt-3 p-2 bg-red-50 rounded text-sm text-red-700\">\n                  <strong>Sync Errors:</strong>\n                  <ul className=\"mt-1 space-y-1\">\n                    {provider.syncStatus.errors.map((error, index) => (\n                      <li key={index}>• {error}</li>\n                    ))}\n                  </ul>\n                </div>\n              )}\n            </CardContent>\n          </Card>\n        ))}\n      </div>\n\n      <div className=\"bg-amber-50 p-4 rounded-lg\">\n        <div className=\"flex items-start space-x-2\">\n          <Eye className=\"w-5 h-5 text-amber-600 mt-0.5\" />\n          <div className=\"text-sm text-amber-800\">\n            <strong>Privacy Note:</strong> Documents are processed locally and stored securely. \n            Only text content is extracted for AI context - original files remain in your cloud storage.\n          </div>\n        </div>\n      </div>\n\n      <div className=\"flex space-x-3\">\n        <Button variant=\"outline\" onClick={() => setStep('overview')} className=\"flex-1\">\n          Back\n        </Button>\n        <Button \n          onClick={syncDocuments} \n          disabled={!providers.some(p => p.enabled)}\n          className=\"flex-1\"\n        >\n          Start Document Sync\n        </Button>\n      </div>\n    </div>\n  );\n\n  const renderSync = () => (\n    <div className=\"space-y-6\">\n      <div className=\"text-center\">\n        <div className=\"mx-auto w-16 h-16 bg-blue-100 rounded-full flex items-center justify-center mb-4\">\n          <RefreshCw className={`w-8 h-8 text-blue-600 ${isLoading ? 'animate-spin' : ''}`} />\n        </div>\n        <h3 className=\"text-lg font-semibold\">Syncing Documents</h3>\n        <p className=\"text-gray-600\">\n          Processing your documents for AI retrieval...\n        </p>\n      </div>\n\n      <div className=\"space-y-4\">\n        <div>\n          <div className=\"flex justify-between text-sm mb-2\">\n            <span>Sync Progress</span>\n            <span>{Math.round(syncProgress)}%</span>\n          </div>\n          <Progress value={syncProgress} className=\"h-2\" />\n        </div>\n\n        <div className=\"space-y-2\">\n          {providers.filter(p => p.enabled).map((provider) => (\n            <div key={provider.id} className=\"flex items-center justify-between p-3 bg-gray-50 rounded\">\n              <div className=\"flex items-center space-x-2\">\n                {provider.icon}\n                <span className=\"font-medium\">{provider.name}</span>\n              </div>\n              <Badge variant=\"secondary\">Processing...</Badge>\n            </div>\n          ))}\n        </div>\n      </div>\n    </div>\n  );\n\n  const renderComplete = () => (\n    <div className=\"space-y-6\">\n      <div className=\"text-center\">\n        <div className=\"mx-auto w-16 h-16 bg-green-100 rounded-full flex items-center justify-center mb-4\">\n          <CheckCircle className=\"w-8 h-8 text-green-600\" />\n        </div>\n        <h3 className=\"text-lg font-semibold\">Document Sync Complete!</h3>\n        <p className=\"text-gray-600\">\n          Your documents are now available for AI-powered insights.\n        </p>\n      </div>\n\n      {syncResults && (\n        <div className=\"space-y-3\">\n          <h4 className=\"font-medium\">Sync Results:</h4>\n          {syncResults.map((result: any, index: number) => (\n            <Card key={index} className=\"border\">\n              <CardContent className=\"p-4\">\n                <div className=\"flex items-center justify-between\">\n                  <div>\n                    <div className=\"font-medium\">{result.provider}</div>\n                    <div className=\"text-sm text-gray-600\">\n                      {result.success ? (\n                        `✅ Processed ${result.processed} documents`\n                      ) : (\n                        `❌ Sync failed`\n                      )}\n                    </div>\n                  </div>\n                  {result.success && (\n                    <Badge variant=\"secondary\">{result.processed} docs</Badge>\n                  )}\n                </div>\n                \n                {result.errors && result.errors.length > 0 && (\n                  <div className=\"mt-2 text-sm text-red-600\">\n                    <strong>Errors:</strong>\n                    <ul className=\"mt-1 space-y-1\">\n                      {result.errors.map((error: string, i: number) => (\n                        <li key={i}>• {error}</li>\n                      ))}\n                    </ul>\n                  </div>\n                )}\n              </CardContent>\n            </Card>\n          ))}\n        </div>\n      )}\n\n      <div className=\"bg-green-50 p-4 rounded-lg\">\n        <div className=\"flex items-start space-x-2\">\n          <Zap className=\"w-5 h-5 text-green-600 mt-0.5\" />\n          <div className=\"text-sm text-green-800\">\n            <strong>What's Next:</strong> Your AI assistants can now reference your documents. \n            Try asking \"What did we discuss in last week's meeting?\" or \"Show me our Q4 budget.\"\n          </div>\n        </div>\n      </div>\n\n      <div className=\"flex space-x-3\">\n        <Button variant=\"outline\" onClick={onClose} className=\"flex-1\">\n          Close\n        </Button>\n        <Button onClick={onComplete} className=\"flex-1\">\n          Start Using AI\n        </Button>\n      </div>\n    </div>\n  );\n\n  return (\n    <div className=\"max-w-2xl mx-auto\">\n      <div className=\"mb-6\">\n        <div className=\"flex items-center justify-between mb-4\">\n          <h2 className=\"text-2xl font-bold\">Cloud Storage Integration</h2>\n          <Badge variant=\"secondary\">RAG Setup</Badge>\n        </div>\n        \n        {/* Progress Steps */}\n        <div className=\"flex items-center space-x-2 mb-6\">\n          {['Overview', 'Configure', 'Sync', 'Complete'].map((stepName, index) => {\n            const stepIndex = ['overview', 'configure', 'sync', 'complete'].indexOf(step);\n            const isActive = index === stepIndex;\n            const isCompleted = index < stepIndex;\n            \n            return (\n              <React.Fragment key={stepName}>\n                <div className={`w-8 h-8 rounded-full flex items-center justify-center text-sm font-medium ${\n                  isActive ? 'bg-blue-600 text-white' :\n                  isCompleted ? 'bg-green-600 text-white' :\n                  'bg-gray-200 text-gray-600'\n                }`}>\n                  {isCompleted ? <CheckCircle className=\"w-4 h-4\" /> : index + 1}\n                </div>\n                {index < 3 && (\n                  <div className={`h-1 w-8 ${\n                    isCompleted ? 'bg-green-600' : 'bg-gray-200'\n                  }`} />\n                )}\n              </React.Fragment>\n            );\n          })}\n        </div>\n      </div>\n\n      <Card>\n        <CardContent className=\"p-6\">\n          {step === 'overview' && renderOverview()}\n          {step === 'configure' && renderConfigure()}\n          {step === 'sync' && renderSync()}\n          {step === 'complete' && renderComplete()}\n        </CardContent>\n      </Card>\n    </div>\n  );\n} ","usedDeprecatedRules":[]},{"filePath":"/home/vonj/Github/Nexus/src/components/integrations/CloudStorageSyncStatus.tsx","messages":[{"ruleId":"no-restricted-syntax","severity":1,"message":"Use design tokens instead of hardcoded text colors (e.g., text-foreground, text-muted-foreground)","line":163,"column":26,"nodeType":"Literal","messageId":"restrictedSyntax","endLine":163,"endColumn":68},{"ruleId":"no-restricted-syntax","severity":1,"message":"Use design tokens instead of hardcoded text colors (e.g., text-foreground, text-muted-foreground)","line":172,"column":37,"nodeType":"Literal","messageId":"restrictedSyntax","endLine":172,"endColumn":60},{"ruleId":"no-restricted-syntax","severity":1,"message":"Use design tokens instead of hardcoded text colors (e.g., text-foreground, text-muted-foreground)","line":173,"column":33,"nodeType":"Literal","messageId":"restrictedSyntax","endLine":173,"endColumn":56},{"ruleId":"no-restricted-syntax","severity":1,"message":"Use design tokens instead of hardcoded text colors (e.g., text-foreground, text-muted-foreground)","line":183,"column":37,"nodeType":"Literal","messageId":"restrictedSyntax","endLine":183,"endColumn":60},{"ruleId":"no-restricted-syntax","severity":1,"message":"Use design tokens instead of hardcoded text colors (e.g., text-foreground, text-muted-foreground)","line":184,"column":33,"nodeType":"Literal","messageId":"restrictedSyntax","endLine":184,"endColumn":56},{"ruleId":"no-restricted-syntax","severity":1,"message":"Use design tokens instead of hardcoded text colors (e.g., text-foreground, text-muted-foreground)","line":186,"column":31,"nodeType":"Literal","messageId":"restrictedSyntax","endLine":186,"endColumn":54},{"ruleId":"no-restricted-syntax","severity":1,"message":"Use design tokens instead of hardcoded text colors (e.g., text-foreground, text-muted-foreground)","line":194,"column":37,"nodeType":"Literal","messageId":"restrictedSyntax","endLine":194,"endColumn":60},{"ruleId":"no-restricted-syntax","severity":1,"message":"Use design tokens instead of hardcoded text colors (e.g., text-foreground, text-muted-foreground)","line":195,"column":33,"nodeType":"Literal","messageId":"restrictedSyntax","endLine":195,"endColumn":56},{"ruleId":"no-restricted-syntax","severity":1,"message":"Use design tokens instead of hardcoded text colors (e.g., text-foreground, text-muted-foreground)","line":200,"column":44,"nodeType":"Literal","messageId":"restrictedSyntax","endLine":200,"endColumn":68},{"ruleId":"no-restricted-syntax","severity":1,"message":"Use design tokens instead of hardcoded text colors (e.g., text-foreground, text-muted-foreground)","line":201,"column":37,"nodeType":"Literal","messageId":"restrictedSyntax","endLine":201,"endColumn":61},{"ruleId":"no-restricted-syntax","severity":1,"message":"Use design tokens instead of hardcoded colors (e.g., bg-primary, bg-secondary)","line":214,"column":30,"nodeType":"Literal","messageId":"restrictedSyntax","endLine":214,"endColumn":76},{"ruleId":"no-restricted-syntax","severity":1,"message":"Use design tokens instead of hardcoded text colors (e.g., text-foreground, text-muted-foreground)","line":214,"column":30,"nodeType":"Literal","messageId":"restrictedSyntax","endLine":214,"endColumn":76}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":12,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\n * Cloud Storage Sync Status Component\n * Shows document sync status and provides manual sync controls\n */\n\nimport React, { useState, useEffect } from 'react';\nimport { \n  Cloud, \n  FileText, \n  RefreshCw, \n  CheckCircle, \n  AlertCircle,\n  Calendar,\n  Database\n} from 'lucide-react';\nimport { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/Card';\nimport { Button } from '@/components/ui/Button';\nimport { Badge } from '@/components/ui/Badge';\nimport { useToast } from '@/components/ui/Toast';\nimport { cloudStorageRAGService } from '@/lib/services/cloudStorageRAG';\n\ninterface CloudStorageSyncStatusProps {\n  className?: string;\n}\n\ninterface SyncStats {\n  totalDocuments: number;\n  lastSync: string | null;\n  isLoading: boolean;\n  error: string | null;\n}\n\nexport function CloudStorageSyncStatus({ className }: CloudStorageSyncStatusProps) {\n  const [syncStats, setSyncStats] = useState<SyncStats>({\n    totalDocuments: 0,\n    lastSync: null,\n    isLoading: false,\n    error: null\n  });\n  const [isSyncing, setIsSyncing] = useState(false);\n  const { showToast } = useToast();\n\n  useEffect(() => {\n    loadSyncStats();\n  }, []);\n\n  const loadSyncStats = async () => {\n    setSyncStats(prev => ({ ...prev, isLoading: true, error: null }));\n    \n    try {\n      // Get document count from Supabase\n      const { data: { user } } = await import('@/lib/supabase').then(m => m.supabase.auth.getUser());\n      if (!user) {\n        setSyncStats(prev => ({ ...prev, isLoading: false }));\n        return;\n      }\n\n      const { count } = await import('@/lib/supabase').then(m => m.supabase\n        .from('ai_vector_documents')\n        .select('*', { count: 'exact', head: true })\n        .or('document_id.like.google-drive-%,document_id.like.onedrive-%')\n      );\n\n      // Get last sync time from most recent document\n      const { data: lastDoc } = await import('@/lib/supabase').then(m => m.supabase\n        .from('ai_vector_documents')\n        .select('created_at')\n        .or('document_id.like.google-drive-%,document_id.like.onedrive-%')\n        .order('created_at', { ascending: false })\n        .limit(1)\n        .single()\n      );\n\n      setSyncStats({\n        totalDocuments: count || 0,\n        lastSync: lastDoc?.created_at || null,\n        isLoading: false,\n        error: null\n      });\n    } catch (error) {\n      console.error('Failed to load sync stats:', error);\n      setSyncStats(prev => ({ \n        ...prev, \n        isLoading: false, \n        error: error instanceof Error ? error.message : 'Failed to load sync stats'\n      }));\n    }\n  };\n\n  const triggerSync = async () => {\n    setIsSyncing(true);\n    \n    try {\n      showToast({\n        title: \"Syncing Documents\",\n        description: \"Processing your cloud storage documents...\",\n        type: \"info\"\n      });\n\n      const results = await cloudStorageRAGService.syncAllProviders();\n      \n      showToast({\n        title: \"Sync Complete\",\n        description: `Processed ${results.totalProcessed} documents successfully.`,\n        type: results.totalErrors.length > 0 ? \"error\" : \"success\"\n      });\n\n      // Reload stats after sync\n      await loadSyncStats();\n      \n    } catch (error) {\n      console.error('Sync failed:', error);\n      showToast({\n        title: \"Sync Failed\",\n        description: error instanceof Error ? error.message : \"Unknown error occurred\",\n        type: \"error\"\n      });\n    } finally {\n      setIsSyncing(false);\n    }\n  };\n\n  const formatLastSync = (lastSync: string | null) => {\n    if (!lastSync) return 'Never';\n    \n    const date = new Date(lastSync);\n    const now = new Date();\n    const diffMs = now.getTime() - date.getTime();\n    const diffHours = Math.floor(diffMs / (1000 * 60 * 60));\n    const diffDays = Math.floor(diffHours / 24);\n    \n    if (diffHours < 1) return 'Just now';\n    if (diffHours < 24) return `${diffHours} hours ago`;\n    if (diffDays === 1) return 'Yesterday';\n    if (diffDays < 7) return `${diffDays} days ago`;\n    \n    return date.toLocaleDateString();\n  };\n\n  return (\n    <Card className={className}>\n      <CardHeader className=\"pb-3\">\n        <CardTitle className=\"flex items-center justify-between text-base\">\n          <div className=\"flex items-center space-x-2\">\n            <Cloud className=\"w-4 h-4\" />\n            <span>Document Sync Status</span>\n          </div>\n          <Button\n            variant=\"outline\"\n            size=\"sm\"\n            onClick={triggerSync}\n            disabled={isSyncing || syncStats.isLoading}\n            className=\"h-8\"\n          >\n            <RefreshCw className={`w-3 h-3 mr-1 ${isSyncing ? 'animate-spin' : ''}`} />\n            Sync Now\n          </Button>\n        </CardTitle>\n      </CardHeader>\n      \n      <CardContent className=\"space-y-4\">\n        {syncStats.error ? (\n          <div className=\"flex items-center space-x-2 text-red-600\">\n            <AlertCircle className=\"w-4 h-4\" />\n            <span className=\"text-sm\">{syncStats.error}</span>\n          </div>\n        ) : (\n          <>\n            {/* Document Count */}\n            <div className=\"flex items-center justify-between\">\n              <div className=\"flex items-center space-x-2\">\n                <FileText className=\"w-4 h-4 text-gray-500\" />\n                <span className=\"text-sm text-gray-600\">Documents Synced</span>\n              </div>\n              <Badge variant=\"secondary\" className=\"text-xs\">\n                {syncStats.totalDocuments}\n              </Badge>\n            </div>\n\n            {/* Last Sync */}\n            <div className=\"flex items-center justify-between\">\n              <div className=\"flex items-center space-x-2\">\n                <Calendar className=\"w-4 h-4 text-gray-500\" />\n                <span className=\"text-sm text-gray-600\">Last Sync</span>\n              </div>\n              <span className=\"text-xs text-gray-500\">\n                {formatLastSync(syncStats.lastSync)}\n              </span>\n            </div>\n\n            {/* Status Indicator */}\n            <div className=\"flex items-center justify-between\">\n              <div className=\"flex items-center space-x-2\">\n                <Database className=\"w-4 h-4 text-gray-500\" />\n                <span className=\"text-sm text-gray-600\">RAG Status</span>\n              </div>\n              <div className=\"flex items-center space-x-1\">\n                {syncStats.totalDocuments > 0 ? (\n                  <>\n                    <CheckCircle className=\"w-3 h-3 text-green-500\" />\n                    <span className=\"text-xs text-green-600\">Active</span>\n                  </>\n                ) : (\n                  <>\n                    <AlertCircle className=\"w-3 h-3 text-orange-500\" />\n                    <span className=\"text-xs text-orange-600\">No Documents</span>\n                  </>\n                )}\n              </div>\n            </div>\n\n            {/* Info */}\n            {syncStats.totalDocuments > 0 && (\n              <div className=\"p-2 bg-blue-50 rounded text-xs text-blue-700\">\n                <strong>AI Ready:</strong> Your documents are available for intelligent search and contextual insights.\n              </div>\n            )}\n\n            {syncStats.totalDocuments === 0 && (\n              <div className=\"p-2 bg-orange-50 rounded text-xs text-orange-700\">\n                <strong>Setup Needed:</strong> Connect Google Drive or OneDrive to enable document-based AI insights.\n              </div>\n            )}\n          </>\n        )}\n      </CardContent>\n    </Card>\n  );\n} ","usedDeprecatedRules":[]},{"filePath":"/home/vonj/Github/Nexus/src/components/integrations/CloudflareSetup.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'useEffect' is defined but never used.","line":1,"column":27,"nodeType":null,"messageId":"unusedVar","endLine":1,"endColumn":36},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'Separator' is defined but never used.","line":8,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":8,"endColumn":12},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'Zap' is defined but never used.","line":14,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":14,"endColumn":6},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'Copy' is defined but never used.","line":20,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":20,"endColumn":7},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'cloudflareService' is defined but never used.","line":24,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":24,"endColumn":27},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":60,"column":12,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":60,"endColumn":15,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1373,1376],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1373,1376],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":61,"column":16,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":61,"endColumn":19,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1402,1405],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1402,1405],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":155,"column":35,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":155,"endColumn":38,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3876,3879],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3876,3879],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'copyToClipboard' is assigned a value but never used.","line":240,"column":9,"nodeType":null,"messageId":"unusedVar","endLine":240,"endColumn":24},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":392,"column":45,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":392,"endColumn":48,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[12070,12073],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[12070,12073],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":10,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState, useEffect } from 'react';\nimport { \n  Card, CardContent, CardHeader, CardTitle,\n  Button,\n  Input,\n  Label,\n  Badge,\n  Separator,\n  Alert, AlertDescription\n} from '@/components/ui';\nimport { \n  Shield, \n  Globe, \n  Zap, \n  BarChart3, \n  CheckCircle,\n  AlertCircle,\n  Loader2,\n  ExternalLink,\n  Copy,\n  Eye,\n  EyeOff\n} from 'lucide-react';\nimport { cloudflareService } from '@/lib/services/cloudflareService';\nimport { supabase } from '../../lib/core/supabase';\nimport { useAuth } from '@/contexts/AuthContext';\nimport { useNotifications } from '@/contexts/NotificationContext';\n\ninterface CloudflareSetupProps {\n  onComplete: () => void;\n  onClose: () => void;\n}\n\ninterface SetupStep {\n  id: number;\n  title: string;\n  description: string;\n  completed: boolean;\n}\n\nconst CloudflareSetup: React.FC<CloudflareSetupProps> = ({ onComplete, onClose }) => {\n  const { user } = useAuth();\n  const { addNotification } = useNotifications();\n  \n  const [currentStep, setCurrentStep] = useState(1);\n  const [loading, setLoading] = useState(false);\n  const [showApiToken, setShowApiToken] = useState(false);\n  \n  // Form data\n  const [formData, setFormData] = useState({\n    apiToken: '',\n    email: '',\n    zoneId: '',\n    accountId: ''\n  });\n  \n  // Test results\n  const [testResults, setTestResults] = useState<{\n    connection: boolean | null;\n    zones: any[] | null;\n    analytics: any | null;\n  }>({\n    connection: null,\n    zones: null,\n    analytics: null\n  });\n\n  const [error, setError] = useState<string | null>(null);\n\n  const steps: SetupStep[] = [\n    {\n      id: 1,\n      title: 'API Configuration',\n      description: 'Enter your Cloudflare API credentials',\n      completed: currentStep > 1\n    },\n    {\n      id: 2,\n      title: 'Zone Selection',\n      description: 'Select your domain zone to monitor',\n      completed: currentStep > 2\n    },\n    {\n      id: 3,\n      title: 'Test Connection',\n      description: 'Verify integration and fetch sample data',\n      completed: currentStep > 3\n    },\n    {\n      id: 4,\n      title: 'Complete Setup',\n      description: 'Save configuration and start monitoring',\n      completed: false\n    }\n  ];\n\n  const handleInputChange = (field: string, value: string) => {\n    setFormData(prev => ({\n      ...prev,\n      [field]: value\n    }));\n    setError(null);\n  };\n\n  const testConnection = async () => {\n    if (!formData.apiToken || !formData.email) {\n      setError('Please provide API token and email');\n      return;\n    }\n\n    setLoading(true);\n    setError(null);\n\n    try {\n      // Test basic connection\n      const response = await fetch('https://api.cloudflare.com/client/v4/user/tokens/verify', {\n        headers: {\n          'Authorization': `Bearer ${formData.apiToken}`,\n          'Content-Type': 'application/json'\n        }\n      });\n\n      const data = await response.json();\n\n      if (data.success) {\n        setTestResults(prev => ({ ...prev, connection: true }));\n        \n        // Fetch available zones\n        const zonesResponse = await fetch('https://api.cloudflare.com/client/v4/zones', {\n          headers: {\n            'Authorization': `Bearer ${formData.apiToken}`,\n            'Content-Type': 'application/json'\n          }\n        });\n\n        const zonesData = await zonesResponse.json();\n        \n        if (zonesData.success) {\n          setTestResults(prev => ({ ...prev, zones: zonesData.result }));\n          setCurrentStep(2);\n        } else {\n          throw new Error('Failed to fetch zones');\n        }\n      } else {\n        throw new Error(data.errors?.[0]?.message || 'Authentication failed');\n      }\n    } catch (err) {\n      setError(err instanceof Error ? err.message : 'Connection test failed');\n      setTestResults(prev => ({ ...prev, connection: false }));\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const selectZone = async (zone: any) => {\n    setFormData(prev => ({\n      ...prev,\n      zoneId: zone.id,\n      accountId: zone.account.id\n    }));\n    \n    setCurrentStep(3);\n  };\n\n  const testAnalytics = async () => {\n    setLoading(true);\n    setError(null);\n\n    try {\n      // Test analytics API\n      const response = await fetch(\n        `https://api.cloudflare.com/client/v4/zones/${formData.zoneId}/analytics/dashboard`,\n        {\n          headers: {\n            'Authorization': `Bearer ${formData.apiToken}`,\n            'Content-Type': 'application/json'\n          }\n        }\n      );\n\n      const data = await response.json();\n\n      if (data.success) {\n        setTestResults(prev => ({ ...prev, analytics: data.result }));\n        setCurrentStep(4);\n      } else {\n        throw new Error('Failed to fetch analytics data');\n      }\n    } catch (err) {\n      setError(err instanceof Error ? err.message : 'Analytics test failed');\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const completeSetup = async () => {\n    if (!user?.id) return;\n\n    setLoading(true);\n    setError(null);\n\n    try {\n      // Save integration to database\n      const integrationData = {\n        user_id: user.id,\n        integration_slug: 'cloudflare',\n        name: `Cloudflare - ${testResults.zones?.find(z => z.id === formData.zoneId)?.name}`,\n        status: 'active',\n        config: {\n          zone_id: formData.zoneId,\n          account_id: formData.accountId,\n          zone_name: testResults.zones?.find(z => z.id === formData.zoneId)?.name\n        },\n        credentials: {\n          api_token: formData.apiToken,\n          email: formData.email\n        },\n        last_sync_at: new Date().toISOString()\n      };\n\n      const { error: saveError } = await supabase\n        .from('user_integrations')\n        .insert(integrationData);\n\n      if (saveError) throw saveError;\n\n      addNotification({\n        type: 'success',\n        message: 'Cloudflare Connected! Your Cloudflare integration is now active and monitoring your infrastructure.'\n      });\n\n      onComplete();\n    } catch (err) {\n      setError(err instanceof Error ? err.message : 'Failed to save integration');\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const copyToClipboard = (text: string) => {\n    navigator.clipboard.writeText(text);\n    addNotification({\n      type: 'success',\n      message: 'Copied to clipboard'\n    });\n  };\n\n  return (\n    <Card className=\"w-full max-w-4xl\">\n      <CardHeader className=\"pb-4\">\n        <div className=\"flex items-center justify-between\">\n          <div className=\"flex items-center gap-3\">\n            <div className=\"p-2 rounded-lg bg-orange-500/10\">\n              <Shield className=\"w-6 h-6 text-orange-500\" />\n            </div>\n            <div>\n              <CardTitle className=\"text-xl\">Connect Cloudflare</CardTitle>\n              <p className=\"text-sm text-muted-foreground\">\n                Monitor infrastructure performance, security, and uptime\n              </p>\n            </div>\n          </div>\n          <Button variant=\"ghost\" onClick={onClose}>×</Button>\n        </div>\n      </CardHeader>\n\n      <CardContent className=\"space-y-6\">\n        {/* Progress Steps */}\n        <div className=\"flex items-center gap-2 mb-6\">\n          {steps.map((step, index) => (\n            <React.Fragment key={step.id}>\n              <div className={`flex items-center gap-2 px-3 py-2 rounded-lg transition-colors ${\n                currentStep === step.id \n                  ? 'bg-primary/10 text-primary' \n                  : step.completed \n                    ? 'bg-success/10 text-success'\n                    : 'bg-muted text-muted-foreground'\n              }`}>\n                {step.completed ? (\n                  <CheckCircle className=\"w-4 h-4\" />\n                ) : (\n                  <span className=\"w-4 h-4 rounded-full border-2 flex items-center justify-center text-xs\">\n                    {step.id}\n                  </span>\n                )}\n                <span className=\"text-sm font-medium\">{step.title}</span>\n              </div>\n              {index < steps.length - 1 && (\n                <div className=\"w-8 h-px bg-border\" />\n              )}\n            </React.Fragment>\n          ))}\n        </div>\n\n        {error && (\n          <Alert variant=\"error\">\n            <AlertCircle className=\"h-4 w-4\" />\n            <AlertDescription>{error}</AlertDescription>\n          </Alert>\n        )}\n\n        {/* Step 1: API Configuration */}\n        {currentStep === 1 && (\n          <div className=\"space-y-6\">\n            <div>\n              <h3 className=\"text-lg font-semibold mb-2\">Cloudflare API Setup</h3>\n              <p className=\"text-sm text-muted-foreground mb-4\">\n                You'll need a Cloudflare API token with Zone:Read and Analytics:Read permissions.\n              </p>\n            </div>\n\n            <div className=\"bg-muted/50 p-4 rounded-lg space-y-3\">\n              <h4 className=\"font-medium flex items-center gap-2\">\n                <ExternalLink className=\"w-4 h-4\" />\n                How to get your API token:\n              </h4>\n              <ol className=\"text-sm space-y-1 ml-4 list-decimal\">\n                <li>Go to <a href=\"https://dash.cloudflare.com/profile/api-tokens\" target=\"_blank\" rel=\"noopener noreferrer\" className=\"text-primary hover:underline\">Cloudflare API Tokens</a></li>\n                <li>Click \"Create Token\"</li>\n                <li>Use \"Custom token\" template</li>\n                <li>Add permissions: Zone:Read, Analytics:Read</li>\n                <li>Include all zones or select specific zones</li>\n                <li>Copy the generated token</li>\n              </ol>\n            </div>\n\n            <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n              <div className=\"space-y-2\">\n                <Label htmlFor=\"email\">Cloudflare Email</Label>\n                <Input\n                  id=\"email\"\n                  type=\"email\"\n                  placeholder=\"your-email@example.com\"\n                  value={formData.email}\n                  onChange={(e) => handleInputChange('email', e.target.value)}\n                />\n              </div>\n\n              <div className=\"space-y-2\">\n                <Label htmlFor=\"apiToken\">API Token</Label>\n                <div className=\"relative\">\n                  <Input\n                    id=\"apiToken\"\n                    type={showApiToken ? 'text' : 'password'}\n                    placeholder=\"Your Cloudflare API token\"\n                    value={formData.apiToken}\n                    onChange={(e) => handleInputChange('apiToken', e.target.value)}\n                  />\n                  <Button\n                    type=\"button\"\n                    variant=\"ghost\"\n                    size=\"sm\"\n                    className=\"absolute right-2 top-1/2 -translate-y-1/2\"\n                    onClick={() => setShowApiToken(!showApiToken)}\n                  >\n                    {showApiToken ? <EyeOff className=\"w-4 h-4\" /> : <Eye className=\"w-4 h-4\" />}\n                  </Button>\n                </div>\n              </div>\n            </div>\n\n            <div className=\"flex justify-end\">\n              <Button \n                onClick={testConnection} \n                disabled={loading || !formData.apiToken || !formData.email}\n                className=\"min-w-[120px]\"\n              >\n                {loading ? (\n                  <>\n                    <Loader2 className=\"w-4 h-4 mr-2 animate-spin\" />\n                    Testing...\n                  </>\n                ) : (\n                  'Test Connection'\n                )}\n              </Button>\n            </div>\n          </div>\n        )}\n\n        {/* Step 2: Zone Selection */}\n        {currentStep === 2 && testResults.zones && (\n          <div className=\"space-y-6\">\n            <div>\n              <h3 className=\"text-lg font-semibold mb-2\">Select Zone to Monitor</h3>\n              <p className=\"text-sm text-muted-foreground mb-4\">\n                Choose which domain zone you want to monitor for analytics and performance.\n              </p>\n            </div>\n\n            <div className=\"space-y-3\">\n              {testResults.zones.map((zone: any) => (\n                <Card \n                  key={zone.id} \n                  className=\"cursor-pointer hover:bg-muted/50 transition-colors\"\n                  onClick={() => selectZone(zone)}\n                >\n                  <CardContent className=\"p-4\">\n                    <div className=\"flex items-center justify-between\">\n                      <div className=\"flex items-center gap-3\">\n                        <Globe className=\"w-5 h-5 text-primary\" />\n                        <div>\n                          <h4 className=\"font-medium\">{zone.name}</h4>\n                          <p className=\"text-sm text-muted-foreground\">\n                            Status: <Badge variant={zone.status === 'active' ? 'default' : 'secondary'}>\n                              {zone.status}\n                            </Badge>\n                          </p>\n                        </div>\n                      </div>\n                      <Button variant=\"outline\" size=\"sm\">\n                        Select\n                      </Button>\n                    </div>\n                  </CardContent>\n                </Card>\n              ))}\n            </div>\n          </div>\n        )}\n\n        {/* Step 3: Test Analytics */}\n        {currentStep === 3 && (\n          <div className=\"space-y-6\">\n            <div>\n              <h3 className=\"text-lg font-semibold mb-2\">Test Analytics Access</h3>\n              <p className=\"text-sm text-muted-foreground mb-4\">\n                Let's verify we can access your Cloudflare analytics data.\n              </p>\n            </div>\n\n            <div className=\"bg-muted/50 p-4 rounded-lg\">\n              <div className=\"flex items-center gap-3 mb-3\">\n                <BarChart3 className=\"w-5 h-5 text-primary\" />\n                <div>\n                  <h4 className=\"font-medium\">Selected Zone</h4>\n                  <p className=\"text-sm text-muted-foreground\">\n                    {testResults.zones?.find(z => z.id === formData.zoneId)?.name}\n                  </p>\n                </div>\n              </div>\n            </div>\n\n            <div className=\"flex justify-end\">\n              <Button \n                onClick={testAnalytics} \n                disabled={loading}\n                className=\"min-w-[120px]\"\n              >\n                {loading ? (\n                  <>\n                    <Loader2 className=\"w-4 h-4 mr-2 animate-spin\" />\n                    Testing...\n                  </>\n                ) : (\n                  'Test Analytics'\n                )}\n              </Button>\n            </div>\n          </div>\n        )}\n\n        {/* Step 4: Complete Setup */}\n        {currentStep === 4 && (\n          <div className=\"space-y-6\">\n            <div className=\"text-center\">\n              <CheckCircle className=\"w-12 h-12 text-success mx-auto mb-4\" />\n              <h3 className=\"text-lg font-semibold mb-2\">Ready to Connect!</h3>\n              <p className=\"text-sm text-muted-foreground mb-6\">\n                Your Cloudflare integration is configured and ready. This will provide:\n              </p>\n            </div>\n\n            <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n              <div className=\"space-y-3\">\n                <h4 className=\"font-medium text-success\">✅ Performance Monitoring</h4>\n                <ul className=\"text-sm text-muted-foreground space-y-1 ml-4\">\n                  <li>• Page load times and TTFB</li>\n                  <li>• Cache hit ratios</li>\n                  <li>• Bandwidth usage</li>\n                  <li>• Request analytics</li>\n                </ul>\n              </div>\n\n              <div className=\"space-y-3\">\n                <h4 className=\"font-medium text-success\">✅ Security Insights</h4>\n                <ul className=\"text-sm text-muted-foreground space-y-1 ml-4\">\n                  <li>• Threat detection</li>\n                  <li>• DDoS protection status</li>\n                  <li>• Bot traffic analysis</li>\n                  <li>• Security events</li>\n                </ul>\n              </div>\n\n              <div className=\"space-y-3\">\n                <h4 className=\"font-medium text-success\">✅ Uptime Monitoring</h4>\n                <ul className=\"text-sm text-muted-foreground space-y-1 ml-4\">\n                  <li>• Service availability</li>\n                  <li>• Incident tracking</li>\n                  <li>• Performance alerts</li>\n                  <li>• Historical uptime</li>\n                </ul>\n              </div>\n\n              <div className=\"space-y-3\">\n                <h4 className=\"font-medium text-success\">✅ Business KPIs</h4>\n                <ul className=\"text-sm text-muted-foreground space-y-1 ml-4\">\n                  <li>• Service uptime KPI</li>\n                  <li>• Website performance</li>\n                  <li>• Infrastructure health</li>\n                  <li>• Automated reporting</li>\n                </ul>\n              </div>\n            </div>\n\n            <div className=\"flex justify-end\">\n              <Button \n                onClick={completeSetup} \n                disabled={loading}\n                className=\"min-w-[140px]\"\n              >\n                {loading ? (\n                  <>\n                    <Loader2 className=\"w-4 h-4 mr-2 animate-spin\" />\n                    Saving...\n                  </>\n                ) : (\n                  'Complete Setup'\n                )}\n              </Button>\n            </div>\n          </div>\n        )}\n      </CardContent>\n    </Card>\n  );\n};\n\nexport default CloudflareSetup; ","usedDeprecatedRules":[]},{"filePath":"/home/vonj/Github/Nexus/src/components/integrations/DualPlatformDemo.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'TrendingDown' is defined but never used.","line":21,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":21,"endColumn":15},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'AlertTriangle' is defined but never used.","line":29,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":29,"endColumn":16},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'Hash' is defined but never used.","line":32,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":32,"endColumn":7},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'FileText' is defined but never used.","line":33,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":33,"endColumn":11},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'Smartphone' is defined but never used.","line":34,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":34,"endColumn":13},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'Monitor' is defined but never used.","line":35,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":35,"endColumn":10},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'selectedTimeframe' is assigned a value but never used.","line":76,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":76,"endColumn":27},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'setSelectedTimeframe' is assigned a value but never used.","line":76,"column":29,"nodeType":null,"messageId":"unusedVar","endLine":76,"endColumn":49},{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has a missing dependency: 'crossPlatformInsights.length'. Either include it or remove the dependency array.","line":194,"column":6,"nodeType":"ArrayExpression","endLine":194,"endColumn":8,"suggestions":[{"desc":"Update the dependencies array to be: [crossPlatformInsights.length]","fix":{"range":[5470,5472],"text":"[crossPlatformInsights.length]"}}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'index' is defined but never used.","line":400,"column":46,"nodeType":null,"messageId":"unusedVar","endLine":400,"endColumn":51}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":10,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\n * Dual Platform Communication Demo\n * Showcases the power of having both Slack and Teams integrated\n * Demonstrates cross-platform insights and optimization recommendations\n */\n\nimport React, { useState, useEffect } from 'react';\nimport { \n  Card, CardContent, CardHeader, CardTitle,\n  Badge,\n  Progress,\n  Alert, AlertDescription,\n  Tabs, TabsContent, TabsList, TabsTrigger,\n  Button\n} from '@/components/ui';\nimport { \n  MessageSquare, \n  Video,\n  Users, \n  TrendingUp,\n  TrendingDown,\n  BarChart3,\n  Clock,\n  Target,\n  Zap,\n  Lightbulb,\n  ArrowRight,\n  CheckCircle2,\n  AlertTriangle,\n  Activity,\n  Calendar,\n  Hash,\n  FileText,\n  Smartphone,\n  Monitor,\n  RefreshCw\n} from 'lucide-react';\n\ninterface PlatformMetrics {\n  platform: 'slack' | 'teams';\n  connected: boolean;\n  data: {\n    totalMessages: number;\n    totalUsers: number;\n    averageResponseTime: number;\n    peakHour: string;\n    mostActiveChannel: string;\n    engagementScore: number;\n  };\n}\n\ninterface CrossPlatformInsight {\n  id: string;\n  type: 'optimization' | 'pattern' | 'recommendation' | 'automation';\n  priority: 'high' | 'medium' | 'low';\n  title: string;\n  description: string;\n  impact: string;\n  savings: {\n    time: number;\n    unit: 'minutes' | 'hours';\n    period: 'day' | 'week' | 'month';\n  };\n  implementation: string;\n  platforms: string[];\n}\n\ninterface UsagePattern {\n  time: string;\n  slack: number;\n  teams: number;\n}\n\nconst DualPlatformDemo: React.FC = () => {\n  const [isLoading, setIsLoading] = useState(true);\n  const [selectedTimeframe, setSelectedTimeframe] = useState<'24h' | '7d' | '30d'>('7d');\n  const [currentInsight, setCurrentInsight] = useState(0);\n\n  // Mock data for demo\n  const platformMetrics: PlatformMetrics[] = [\n    {\n      platform: 'slack',\n      connected: true,\n      data: {\n        totalMessages: 2847,\n        totalUsers: 12,\n        averageResponseTime: 15,\n        peakHour: '10:00 AM',\n        mostActiveChannel: '#development',\n        engagementScore: 87\n      }\n    },\n    {\n      platform: 'teams',\n      connected: true,\n      data: {\n        totalMessages: 1923,\n        totalUsers: 15,\n        averageResponseTime: 35,\n        peakHour: '2:00 PM',\n        mostActiveChannel: 'General',\n        engagementScore: 72\n      }\n    }\n  ];\n\n  const crossPlatformInsights: CrossPlatformInsight[] = [\n    {\n      id: 'response-time-optimization',\n      type: 'optimization',\n      priority: 'high',\n      title: 'Optimize Response Times Across Platforms',\n      description: 'Your team responds 57% faster on Slack (15min avg) vs Teams (35min avg). Route urgent communications through Slack for faster resolution.',\n      impact: 'Reduce average response time by 20 minutes per urgent request',\n      savings: {\n        time: 3,\n        unit: 'hours',\n        period: 'day'\n      },\n      implementation: 'Set up auto-routing rules for urgent messages',\n      platforms: ['slack', 'teams']\n    },\n    {\n      id: 'meeting-vs-chat',\n      type: 'pattern',\n      priority: 'medium',\n      title: 'Communication Medium Preferences',\n      description: 'Quick decisions happen 70% faster on Slack, but formal planning is 40% more effective on Teams with meeting integration.',\n      impact: 'Optimize workflow by using the right platform for the right purpose',\n      savings: {\n        time: 45,\n        unit: 'minutes',\n        period: 'week'\n      },\n      implementation: 'Create communication guidelines based on message type',\n      platforms: ['slack', 'teams']\n    },\n    {\n      id: 'peak-hour-coordination',\n      type: 'recommendation',\n      priority: 'medium',\n      title: 'Coordinate Peak Communication Hours',\n      description: 'Slack peak activity is 10-11 AM, Teams peak is 2-4 PM. Minimal overlap indicates missed collaboration opportunities.',\n      impact: 'Increase cross-platform collaboration by 25%',\n      savings: {\n        time: 2,\n        unit: 'hours',\n        period: 'week'\n      },\n      implementation: 'Schedule cross-platform sync meetings during overlap hours',\n      platforms: ['slack', 'teams']\n    },\n    {\n      id: 'automation-bridge',\n      type: 'automation',\n      priority: 'high',\n      title: 'Cross-Platform Message Bridge',\n      description: 'Important decisions in Slack channels aren\\'t always visible to Teams-heavy team members, creating information silos.',\n      impact: 'Eliminate information silos and improve team alignment',\n      savings: {\n        time: 5,\n        unit: 'hours',\n        period: 'week'\n      },\n      implementation: 'Auto-sync critical messages between platforms',\n      platforms: ['slack', 'teams']\n    }\n  ];\n\n  const usagePatterns: UsagePattern[] = [\n    { time: '9 AM', slack: 85, teams: 25 },\n    { time: '10 AM', slack: 95, teams: 45 },\n    { time: '11 AM', slack: 78, teams: 60 },\n    { time: '12 PM', slack: 45, teams: 40 },\n    { time: '1 PM', slack: 35, teams: 55 },\n    { time: '2 PM', slack: 55, teams: 90 },\n    { time: '3 PM', slack: 65, teams: 85 },\n    { time: '4 PM', slack: 45, teams: 70 },\n    { time: '5 PM', slack: 25, teams: 45 }\n  ];\n\n  useEffect(() => {\n    // Simulate loading\n    const timer = setTimeout(() => setIsLoading(false), 1500);\n    return () => clearTimeout(timer);\n  }, []);\n\n  useEffect(() => {\n    // Cycle through insights every 5 seconds for demo\n    const interval = setInterval(() => {\n      setCurrentInsight(prev => (prev + 1) % crossPlatformInsights.length);\n    }, 5000);\n    return () => clearInterval(interval);\n  }, []);\n\n  const getHealthColor = (score: number) => {\n    if (score >= 80) return 'text-success bg-success/10';\n    if (score >= 60) return 'text-warning bg-warning/10';\n    return 'text-destructive bg-destructive/10';\n  };\n\n  const getPriorityColor = (priority: string) => {\n    switch (priority) {\n      case 'high': return 'bg-destructive/10 text-destructive';\n      case 'medium': return 'bg-warning/10 text-warning/80';\n      case 'low': return 'bg-success/10 text-success';\n      default: return 'bg-muted text-foreground';\n    }\n  };\n\n  const getTypeIcon = (type: string) => {\n    switch (type) {\n      case 'optimization': return TrendingUp;\n      case 'pattern': return BarChart3;\n      case 'recommendation': return Lightbulb;\n      case 'automation': return Zap;\n      default: return Activity;\n    }\n  };\n\n  if (isLoading) {\n    return (\n      <div className=\"space-y-6 animate-pulse\">\n        <div className=\"h-8 bg-muted rounded w-1/3\"></div>\n        <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\n          <div className=\"h-32 bg-muted rounded\"></div>\n          <div className=\"h-32 bg-muted rounded\"></div>\n        </div>\n        <div className=\"h-64 bg-muted rounded\"></div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"space-y-6\">\n      {/* Header */}\n      <div className=\"flex items-center justify-between\">\n        <div>\n          <h2 className=\"text-2xl font-bold\">Dual Platform Intelligence</h2>\n          <p className=\"text-muted-foreground\">\n            Live demo of Slack + Teams unified analytics\n          </p>\n        </div>\n        <div className=\"flex items-center space-x-2\">\n          <Badge variant=\"outline\" className=\"bg-success/5 text-success\">\n            <Activity className=\"w-3 h-3 mr-1\" />\n            Live Demo\n          </Badge>\n          <Button variant=\"outline\" size=\"sm\">\n            <RefreshCw className=\"w-4 h-4 mr-2\" />\n            Refresh\n          </Button>\n        </div>\n      </div>\n\n      {/* Platform Overview */}\n      <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\n        {platformMetrics.map((platform) => (\n          <Card key={platform.platform}>\n            <CardHeader>\n              <CardTitle className=\"flex items-center justify-between\">\n                <div className=\"flex items-center space-x-2\">\n                  {platform.platform === 'slack' ? (\n                    <MessageSquare className=\"w-5 h-5 text-secondary\" />\n                  ) : (\n                    <Video className=\"w-5 h-5 text-primary\" />\n                  )}\n                  <span className=\"capitalize\">{platform.platform}</span>\n                </div>\n                <Badge className=\"bg-success/10 text-success\">Connected</Badge>\n              </CardTitle>\n            </CardHeader>\n            <CardContent>\n              <div className=\"grid grid-cols-2 gap-4 mb-4\">\n                <div>\n                  <div className=\"text-2xl font-bold\">{platform.data.totalMessages.toLocaleString()}</div>\n                  <div className=\"text-sm text-muted-foreground\">Messages</div>\n                </div>\n                <div>\n                  <div className=\"text-2xl font-bold\">{platform.data.totalUsers}</div>\n                  <div className=\"text-sm text-muted-foreground\">Active Users</div>\n                </div>\n              </div>\n              \n              <div className=\"space-y-4\">\n                <div className=\"flex items-center justify-between\">\n                  <span className=\"text-sm\">Response Time</span>\n                  <span className=\"font-medium\">{platform.data.averageResponseTime}min</span>\n                </div>\n                <div className=\"flex items-center justify-between\">\n                  <span className=\"text-sm\">Peak Hour</span>\n                  <span className=\"font-medium\">{platform.data.peakHour}</span>\n                </div>\n                <div className=\"flex items-center justify-between\">\n                  <span className=\"text-sm\">Engagement Score</span>\n                  <div className={`px-2 py-1 rounded text-sm font-medium ${getHealthColor(platform.data.engagementScore)}`}>\n                    {platform.data.engagementScore}/100\n                  </div>\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n        ))}\n      </div>\n\n      {/* Live Insights Carousel */}\n      <Card>\n        <CardHeader>\n          <CardTitle className=\"flex items-center space-x-2\">\n            <Lightbulb className=\"w-5 h-5 text-warning\" />\n            <span>Live Cross-Platform Insights</span>\n            <Badge variant=\"outline\" className=\"ml-2\">\n              {currentInsight + 1} of {crossPlatformInsights.length}\n            </Badge>\n          </CardTitle>\n        </CardHeader>\n        <CardContent>\n          <div className=\"space-y-4\">\n            {crossPlatformInsights.map((insight, index) => {\n              const Icon = getTypeIcon(insight.type);\n              const isActive = index === currentInsight;\n              \n              return (\n                <div \n                  key={insight.id} \n                  className={`p-4 border rounded-lg transition-all duration-500 ${\n                    isActive ? 'border-primary bg-primary/5' : 'border-transparent opacity-30'\n                  }`}\n                >\n                  <div className=\"flex items-start space-x-4\">\n                    <Icon className=\"w-6 h-6 text-primary mt-1\" />\n                    <div className=\"flex-1\">\n                      <div className=\"flex items-center space-x-2 mb-2\">\n                        <h3 className=\"font-semibold\">{insight.title}</h3>\n                        <Badge className={getPriorityColor(insight.priority)}>\n                          {insight.priority} priority\n                        </Badge>\n                        <div className=\"flex space-x-1\">\n                          {insight.platforms.map(platform => (\n                            <Badge key={platform} variant=\"outline\" className=\"text-xs\">\n                              {platform}\n                            </Badge>\n                          ))}\n                        </div>\n                      </div>\n                      <p className=\"text-muted-foreground mb-3\">{insight.description}</p>\n                      <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4 text-sm\">\n                        <div>\n                          <span className=\"text-muted-foreground\">Expected Impact:</span>\n                          <p className=\"font-medium text-success\">{insight.impact}</p>\n                        </div>\n                        <div>\n                          <span className=\"text-muted-foreground\">Time Savings:</span>\n                          <p className=\"font-medium text-primary\">\n                            {insight.savings.time} {insight.savings.unit}/{insight.savings.period}\n                          </p>\n                        </div>\n                        <div>\n                          <span className=\"text-muted-foreground\">Implementation:</span>\n                          <p className=\"font-medium\">{insight.implementation}</p>\n                        </div>\n                      </div>\n                      {isActive && (\n                        <div className=\"mt-4 flex space-x-2\">\n                          <Button size=\"sm\">\n                            Take Action <ArrowRight className=\"w-3 h-3 ml-1\" />\n                          </Button>\n                          <Button variant=\"outline\" size=\"sm\">\n                            Learn More\n                          </Button>\n                        </div>\n                      )}\n                    </div>\n                  </div>\n                </div>\n              );\n            })}\n          </div>\n        </CardContent>\n      </Card>\n\n      {/* Usage Patterns Comparison */}\n      <Tabs defaultValue=\"patterns\" className=\"space-y-4\">\n        <TabsList>\n          <TabsTrigger value=\"patterns\">Usage Patterns</TabsTrigger>\n          <TabsTrigger value=\"efficiency\">Efficiency Metrics</TabsTrigger>\n          <TabsTrigger value=\"opportunities\">Opportunities</TabsTrigger>\n        </TabsList>\n\n        <TabsContent value=\"patterns\" className=\"space-y-4\">\n          <Card>\n            <CardHeader>\n              <CardTitle>Daily Communication Flow</CardTitle>\n              <p className=\"text-sm text-muted-foreground\">\n                Compare when your team uses Slack vs Teams throughout the day\n              </p>\n            </CardHeader>\n            <CardContent>\n              <div className=\"space-y-4\">\n                {usagePatterns.map((pattern, index) => (\n                  <div key={pattern.time} className=\"space-y-2\">\n                    <div className=\"flex justify-between text-sm\">\n                      <span>{pattern.time}</span>\n                      <span className=\"text-muted-foreground\">\n                        Slack: {pattern.slack}% | Teams: {pattern.teams}%\n                      </span>\n                    </div>\n                    <div className=\"flex space-x-1 h-2\">\n                      <div \n                        className=\"bg-secondary rounded-l\"\n                        style={{ width: `${pattern.slack}%` }}\n                      />\n                      <div \n                        className=\"bg-primary rounded-r\"\n                        style={{ width: `${pattern.teams}%` }}\n                      />\n                    </div>\n                  </div>\n                ))}\n                <div className=\"flex items-center justify-center space-x-4 mt-4 text-sm\">\n                  <div className=\"flex items-center space-x-2\">\n                    <div className=\"w-3 h-3 bg-secondary rounded\"></div>\n                    <span>Slack Usage</span>\n                  </div>\n                  <div className=\"flex items-center space-x-2\">\n                    <div className=\"w-3 h-3 bg-primary rounded\"></div>\n                    <span>Teams Usage</span>\n                  </div>\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n        </TabsContent>\n\n        <TabsContent value=\"efficiency\" className=\"space-y-4\">\n          <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4\">\n            <Card>\n              <CardHeader>\n                <CardTitle className=\"text-lg flex items-center space-x-2\">\n                  <Clock className=\"w-5 h-5\" />\n                  <span>Response Times</span>\n                </CardTitle>\n              </CardHeader>\n              <CardContent>\n                <div className=\"space-y-4\">\n                  <div className=\"flex justify-between items-center\">\n                    <span className=\"text-sm\">Slack Average</span>\n                    <div className=\"flex items-center space-x-2\">\n                      <Progress value={75} className=\"w-20 h-2\" />\n                      <span className=\"text-sm font-medium\">15min</span>\n                    </div>\n                  </div>\n                  <div className=\"flex justify-between items-center\">\n                    <span className=\"text-sm\">Teams Average</span>\n                    <div className=\"flex items-center space-x-2\">\n                      <Progress value={35} className=\"w-20 h-2\" />\n                      <span className=\"text-sm font-medium\">35min</span>\n                    </div>\n                  </div>\n                  <div className=\"pt-2 border-t\">\n                    <div className=\"flex items-center space-x-2 text-success\">\n                      <TrendingUp className=\"w-4 h-4\" />\n                      <span className=\"text-sm font-medium\">57% faster on Slack</span>\n                    </div>\n                  </div>\n                </div>\n              </CardContent>\n            </Card>\n\n            <Card>\n              <CardHeader>\n                <CardTitle className=\"text-lg flex items-center space-x-2\">\n                  <Users className=\"w-5 h-5\" />\n                  <span>Team Engagement</span>\n                </CardTitle>\n              </CardHeader>\n              <CardContent>\n                <div className=\"space-y-4\">\n                  <div className=\"flex justify-between items-center\">\n                    <span className=\"text-sm\">Slack Engagement</span>\n                    <div className=\"flex items-center space-x-2\">\n                      <Progress value={87} className=\"w-20 h-2\" />\n                      <span className=\"text-sm font-medium\">87%</span>\n                    </div>\n                  </div>\n                  <div className=\"flex justify-between items-center\">\n                    <span className=\"text-sm\">Teams Engagement</span>\n                    <div className=\"flex items-center space-x-2\">\n                      <Progress value={72} className=\"w-20 h-2\" />\n                      <span className=\"text-sm font-medium\">72%</span>\n                    </div>\n                  </div>\n                  <div className=\"pt-2 border-t\">\n                    <div className=\"flex items-center space-x-2 text-primary\">\n                      <Target className=\"w-4 h-4\" />\n                      <span className=\"text-sm font-medium\">Combined: 82%</span>\n                    </div>\n                  </div>\n                </div>\n              </CardContent>\n            </Card>\n\n            <Card>\n              <CardHeader>\n                <CardTitle className=\"text-lg flex items-center space-x-2\">\n                  <BarChart3 className=\"w-5 h-5\" />\n                  <span>Platform Efficiency</span>\n                </CardTitle>\n              </CardHeader>\n              <CardContent>\n                <div className=\"space-y-4\">\n                  <div className=\"flex justify-between items-center\">\n                    <span className=\"text-sm\">Quick Decisions</span>\n                    <span className=\"text-sm font-medium text-secondary\">Slack +70%</span>\n                  </div>\n                  <div className=\"flex justify-between items-center\">\n                    <span className=\"text-sm\">Formal Planning</span>\n                    <span className=\"text-sm font-medium text-primary\">Teams +40%</span>\n                  </div>\n                  <div className=\"flex justify-between items-center\">\n                    <span className=\"text-sm\">File Collaboration</span>\n                    <span className=\"text-sm font-medium text-primary\">Teams +60%</span>\n                  </div>\n                  <div className=\"pt-2 border-t\">\n                    <div className=\"flex items-center space-x-2 text-success\">\n                      <CheckCircle2 className=\"w-4 h-4\" />\n                      <span className=\"text-sm font-medium\">Optimized Usage</span>\n                    </div>\n                  </div>\n                </div>\n              </CardContent>\n            </Card>\n          </div>\n        </TabsContent>\n\n        <TabsContent value=\"opportunities\" className=\"space-y-4\">\n          <div className=\"grid gap-4\">\n            <Alert>\n              <Lightbulb className=\"h-4 w-4\" />\n              <AlertDescription>\n                <strong>Quick Win:</strong> Move urgent communications to Slack to reduce average response time by 20 minutes per request.\n              </AlertDescription>\n            </Alert>\n\n            <Alert>\n              <Zap className=\"h-4 w-4\" />\n              <AlertDescription>\n                <strong>Automation Opportunity:</strong> Set up cross-platform message bridging to eliminate information silos between team members.\n              </AlertDescription>\n            </Alert>\n\n            <Alert>\n              <Calendar className=\"h-4 w-4\" />\n              <AlertDescription>\n                <strong>Coordination Improvement:</strong> Schedule team syncs during 11 AM-1 PM overlap hours for maximum cross-platform collaboration.\n              </AlertDescription>\n            </Alert>\n          </div>\n        </TabsContent>\n      </Tabs>\n\n      {/* Call to Action */}\n      <Card className=\"bg-gradient-to-r from-purple-50 to-blue-50 border-purple-200\">\n        <CardContent className=\"p-6\">\n          <div className=\"text-center space-y-4\">\n            <h3 className=\"text-xl font-semibold\">Ready to Optimize Your Team's Communication?</h3>\n            <p className=\"text-muted-foreground\">\n              Connect both Slack and Teams to unlock these powerful insights for your organization\n            </p>\n            <div className=\"flex justify-center space-x-4\">\n              <Button className=\"bg-secondary hover:bg-secondary/90\">\n                <MessageSquare className=\"w-4 h-4 mr-2\" />\n                Connect Slack\n              </Button>\n              <Button variant=\"outline\" className=\"border-blue-600 text-primary hover:bg-primary/5\">\n                <Video className=\"w-4 h-4 mr-2\" />\n                Connect Teams\n              </Button>\n            </div>\n          </div>\n        </CardContent>\n      </Card>\n    </div>\n  );\n};\n\nexport default DualPlatformDemo; ","usedDeprecatedRules":[]},{"filePath":"/home/vonj/Github/Nexus/src/components/integrations/EmailSyncTester.tsx","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":17,"column":54,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":17,"endColumn":57,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[834,837],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[834,837],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":18,"column":48,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":18,"endColumn":51,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[893,896],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[893,896],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"no-restricted-syntax","severity":1,"message":"Use design tokens instead of hardcoded colors (e.g., bg-primary, bg-secondary)","line":109,"column":33,"nodeType":"Literal","messageId":"restrictedSyntax","endLine":109,"endColumn":62},{"ruleId":"no-restricted-syntax","severity":1,"message":"Use design tokens instead of hardcoded text colors (e.g., text-foreground, text-muted-foreground)","line":109,"column":33,"nodeType":"Literal","messageId":"restrictedSyntax","endLine":109,"endColumn":62},{"ruleId":"no-restricted-syntax","severity":1,"message":"Use design tokens instead of hardcoded colors (e.g., bg-primary, bg-secondary)","line":129,"column":28,"nodeType":"Literal","messageId":"restrictedSyntax","endLine":129,"endColumn":54},{"ruleId":"no-restricted-syntax","severity":1,"message":"Use design tokens instead of hardcoded text colors (e.g., text-foreground, text-muted-foreground)","line":131,"column":41,"nodeType":"Literal","messageId":"restrictedSyntax","endLine":131,"endColumn":55},{"ruleId":"no-restricted-syntax","severity":1,"message":"Use design tokens instead of hardcoded colors (e.g., bg-primary, bg-secondary)","line":181,"column":28,"nodeType":"Literal","messageId":"restrictedSyntax","endLine":181,"endColumn":58},{"ruleId":"no-restricted-syntax","severity":1,"message":"Use design tokens instead of hardcoded text colors (e.g., text-foreground, text-muted-foreground)","line":183,"column":41,"nodeType":"Literal","messageId":"restrictedSyntax","endLine":183,"endColumn":57}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState } from 'react';\nimport { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/Card';\nimport { Button } from '@/components/ui/Button';\nimport { Alert, AlertDescription } from '@/components/ui/Alert';\nimport { Badge } from '@/components/ui/Badge';\nimport { supabase } from '../../lib/core/supabase';\nimport { Mail, RefreshCw, CheckCircle2, AlertCircle, Clock } from 'lucide-react';\n\ninterface EmailSyncTesterProps {\n  onSyncComplete?: () => void;\n}\n\nconst EmailSyncTester: React.FC<EmailSyncTesterProps> = ({ onSyncComplete }) => {\n  const [isChecking, setIsChecking] = useState(false);\n  const [isSyncing, setIsSyncing] = useState(false);\n  const [tokenStatus, setTokenStatus] = useState<'unknown' | 'valid' | 'missing' | 'expired'>('unknown');\n  const [emailAccounts, setEmailAccounts] = useState<any[]>([]);\n  const [syncResult, setSyncResult] = useState<any>(null);\n  const [error, setError] = useState<string | null>(null);\n\n  const checkTokenStatus = async () => {\n    setIsChecking(true);\n    setError(null);\n\n    try {\n      const { data: { user } } = await supabase.auth.getUser();\n      if (!user) {\n        throw new Error('User not authenticated');\n      }\n\n      // Check for stored Microsoft Graph tokens\n      const { data: tokenData, error: tokenError } = await supabase\n        .from('ai_integrations_oauth')\n        .select('access_token, refresh_token, expires_at, created_at')\n        .eq('user_id', user.id)\n        .eq('provider', 'microsoft_graph')\n        .single();\n\n      if (tokenError || !tokenData) {\n        setTokenStatus('missing');\n      } else if (tokenData.expires_at && new Date(tokenData.expires_at) <= new Date()) {\n        setTokenStatus('expired');\n      } else {\n        setTokenStatus('valid');\n      }\n\n      // Check for email accounts\n      const { data: accounts, error: accountsError } = await supabase\n        .from('ai_email_accounts')\n        .select('*')\n        .eq('user_id', user.id);\n\n      if (!accountsError) {\n        setEmailAccounts(accounts || []);\n      }\n\n    } catch (err) {\n      console.error('Token check failed:', err);\n      setError(err instanceof Error ? err.message : 'Failed to check token status');\n    } finally {\n      setIsChecking(false);\n    }\n  };\n\n  const triggerEmailSync = async () => {\n    setIsSyncing(true);\n    setError(null);\n    setSyncResult(null);\n\n    try {\n      const { data: { user } } = await supabase.auth.getUser();\n      if (!user) {\n        throw new Error('User not authenticated');\n      }\n\n      // Find Outlook email account\n      const outlookAccount = emailAccounts.find(acc => acc.provider === 'outlook');\n      if (!outlookAccount) {\n        throw new Error('No Outlook email account found. Please set up email integration first.');\n      }\n\n      // Call the email sync edge function\n      const { data, error } = await supabase.functions.invoke('ai_email_sync', {\n        body: {\n          account_id: outlookAccount.id,\n          job_type: 'incremental_sync',\n          sync_from: new Date(Date.now() - 7 * 24 * 60 * 60 * 1000).toISOString() // Last 7 days\n        }\n      });\n\n      if (error) {\n        throw new Error(error.message || 'Email sync failed');\n      }\n\n      setSyncResult(data);\n      onSyncComplete?.();\n\n    } catch (err) {\n      console.error('Email sync failed:', err);\n      setError(err instanceof Error ? err.message : 'Failed to sync emails');\n    } finally {\n      setIsSyncing(false);\n    }\n  };\n\n  const getTokenStatusBadge = () => {\n    switch (tokenStatus) {\n      case 'valid':\n        return <Badge className=\"bg-green-100 text-green-800\">Valid</Badge>;\n      case 'expired':\n        return <Badge variant=\"destructive\">Expired</Badge>;\n      case 'missing':\n        return <Badge variant=\"outline\">Missing</Badge>;\n      default:\n        return <Badge variant=\"secondary\">Unknown</Badge>;\n    }\n  };\n\n  return (\n    <Card>\n      <CardHeader>\n        <CardTitle className=\"flex items-center space-x-2\">\n          <Mail className=\"w-5 h-5\" />\n          <span>Email Sync Tester</span>\n        </CardTitle>\n      </CardHeader>\n      <CardContent className=\"space-y-4\">\n        {error && (\n          <Alert className=\"border-red-200 bg-red-50\">\n            <AlertCircle className=\"w-4 h-4\" />\n            <AlertDescription className=\"text-red-800\">\n              {error}\n            </AlertDescription>\n          </Alert>\n        )}\n\n        {/* Token Status */}\n        <div className=\"flex items-center justify-between p-3 bg-muted rounded-lg\">\n          <div className=\"flex items-center space-x-2\">\n            <span className=\"text-sm font-medium\">Microsoft Graph Token:</span>\n            {getTokenStatusBadge()}\n          </div>\n          <Button\n            variant=\"outline\"\n            size=\"sm\"\n            onClick={checkTokenStatus}\n            disabled={isChecking}\n          >\n            {isChecking ? (\n              <RefreshCw className=\"w-4 h-4 animate-spin\" />\n            ) : (\n              <RefreshCw className=\"w-4 h-4\" />\n            )}\n          </Button>\n        </div>\n\n        {/* Email Accounts */}\n        <div className=\"space-y-2\">\n          <h4 className=\"text-sm font-medium\">Email Accounts:</h4>\n          {emailAccounts.length === 0 ? (\n            <p className=\"text-sm text-muted-foreground\">No email accounts configured</p>\n          ) : (\n            emailAccounts.map((account) => (\n              <div key={account.id} className=\"flex items-center justify-between p-2 bg-muted/50 rounded\">\n                <div>\n                  <span className=\"text-sm font-medium\">{account.email_address}</span>\n                  <Badge variant=\"outline\" className=\"ml-2 text-xs\">\n                    {account.provider}\n                  </Badge>\n                </div>\n                <Badge variant={account.is_active ? 'default' : 'secondary'}>\n                  {account.is_active ? 'Active' : 'Inactive'}\n                </Badge>\n              </div>\n            ))\n          )}\n        </div>\n\n        {/* Sync Result */}\n        {syncResult && (\n          <Alert className=\"border-green-200 bg-green-50\">\n            <CheckCircle2 className=\"w-4 h-4\" />\n            <AlertDescription className=\"text-green-800\">\n              <strong>Sync Complete!</strong><br />\n              Total: {syncResult.total_messages} | \n              Processed: {syncResult.processed_messages} | \n              Errors: {syncResult.error_count}\n            </AlertDescription>\n          </Alert>\n        )}\n\n        {/* Actions */}\n        <div className=\"flex space-x-2\">\n          <Button\n            onClick={triggerEmailSync}\n            disabled={isSyncing || tokenStatus !== 'valid' || emailAccounts.length === 0}\n            className=\"flex-1\"\n          >\n            {isSyncing ? (\n              <>\n                <Clock className=\"w-4 h-4 mr-2 animate-spin\" />\n                Syncing Emails...\n              </>\n            ) : (\n              <>\n                <Mail className=\"w-4 h-4 mr-2\" />\n                Test Email Sync\n              </>\n            )}\n          </Button>\n        </div>\n\n        <div className=\"text-xs text-muted-foreground\">\n          This will test the Microsoft Graph email sync functionality using your stored tokens.\n        </div>\n      </CardContent>\n    </Card>\n  );\n};\n\nexport default EmailSyncTester; ","usedDeprecatedRules":[]},{"filePath":"/home/vonj/Github/Nexus/src/components/integrations/EnhancedIntegrationSetup.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'Card' is defined but never used.","line":3,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":3,"endColumn":7},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'CardContent' is defined but never used.","line":3,"column":9,"nodeType":null,"messageId":"unusedVar","endLine":3,"endColumn":20},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'CardHeader' is defined but never used.","line":3,"column":22,"nodeType":null,"messageId":"unusedVar","endLine":3,"endColumn":32},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'CardTitle' is defined but never used.","line":3,"column":34,"nodeType":null,"messageId":"unusedVar","endLine":3,"endColumn":43},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'Checkbox' is defined but never used.","line":6,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":6,"endColumn":11},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'Label' is defined but never used.","line":7,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":7,"endColumn":8},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'AlertCircle' is defined but never used.","line":15,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":15,"endColumn":14},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'Key' is defined but never used.","line":16,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":16,"endColumn":6},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'Copy' is defined but never used.","line":24,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":24,"endColumn":7},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'Star' is defined but never used.","line":33,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":33,"endColumn":7},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":68,"column":18,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":68,"endColumn":21,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1297,1300],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1297,1300],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":75,"column":22,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":75,"endColumn":25,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1465,1468],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1465,1468],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'error' is defined but never used.","line":285,"column":14,"nodeType":null,"messageId":"unusedVar","endLine":285,"endColumn":19},{"ruleId":"no-restricted-syntax","severity":1,"message":"Use design tokens instead of hardcoded colors (e.g., bg-primary, bg-secondary)","line":302,"column":22,"nodeType":"Literal","messageId":"restrictedSyntax","endLine":302,"endColumn":78},{"ruleId":"no-restricted-syntax","severity":1,"message":"Use design tokens instead of hardcoded text colors (e.g., text-foreground, text-muted-foreground)","line":545,"column":52,"nodeType":"Literal","messageId":"restrictedSyntax","endLine":545,"endColumn":96},{"ruleId":"no-restricted-syntax","severity":1,"message":"Use design tokens instead of hardcoded text colors (e.g., text-foreground, text-muted-foreground)","line":606,"column":33,"nodeType":"Literal","messageId":"restrictedSyntax","endLine":606,"endColumn":86},{"ruleId":"no-restricted-syntax","severity":1,"message":"Use design tokens instead of hardcoded text colors (e.g., text-foreground, text-muted-foreground)","line":638,"column":36,"nodeType":"Literal","messageId":"restrictedSyntax","endLine":638,"endColumn":89}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":17,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState, useEffect } from 'react';\nimport { \n  Card, CardContent, CardHeader, CardTitle,\n  Badge,\n  Button,\n  Checkbox,\n  Label,\n  Input\n} from '@/components/ui';\nimport { \n  X, \n  ArrowRight, \n  ArrowLeft, \n  Check, \n  AlertCircle, \n  Key, \n  Globe, \n  Shield,\n  Zap,\n  Clock,\n  Database,\n  HelpCircle,\n  ExternalLink,\n  Copy,\n  Eye,\n  EyeOff,\n  RefreshCw,\n  CheckCircle2,\n  XCircle,\n  AlertTriangle,\n  Book,\n  MessageCircle,\n  Star\n} from 'lucide-react';\n\ninterface Integration {\n  id: string;\n  name: string;\n  icon: React.ReactNode;\n  category: string;\n  difficulty: 'easy' | 'medium' | 'advanced';\n  estimatedSetupTime: string;\n  features: string[];\n  authType: 'oauth' | 'api_key' | 'webhook' | 'credentials';\n  documentation?: string;\n  supportUrl?: string;\n  videoTutorial?: string;\n  prerequisites?: string[];\n  commonIssues?: { issue: string; solution: string }[];\n}\n\ninterface SetupStep {\n  id: string;\n  title: string;\n  description: string;\n  type: 'welcome' | 'prerequisites' | 'auth' | 'permissions' | 'configuration' | 'testing' | 'success';\n  completed: boolean;\n  optional?: boolean;\n  estimatedTime?: string;\n  helpText?: string;\n  troubleshooting?: string;\n}\n\ninterface SetupData {\n  apiKey?: string;\n  username?: string;\n  password?: string;\n  [key: string]: any; // For dynamic permissions\n}\n\ninterface EnhancedIntegrationSetupProps {\n  integration: Integration;\n  isOpen: boolean;\n  onClose: () => void;\n  onComplete: (data: any) => void;\n}\n\n/**\n * Enhanced Integration Setup with comprehensive workflow management\n * Implements best practices for maximum success rates\n */\nconst EnhancedIntegrationSetup: React.FC<EnhancedIntegrationSetupProps> = ({\n  integration,\n  isOpen,\n  onClose,\n  onComplete\n}) => {\n  const [currentStep, setCurrentStep] = useState(0);\n  const [setupData, setSetupData] = useState<SetupData>({});\n  const [isConnecting, setIsConnecting] = useState(false);\n  const [connectionStatus, setConnectionStatus] = useState<'idle' | 'testing' | 'success' | 'error'>('idle');\n  const [errorMessage, setErrorMessage] = useState('');\n  const [showApiKey, setShowApiKey] = useState(false);\n  const [validationErrors, setValidationErrors] = useState<string[]>([]);\n  const [analytics, setAnalytics] = useState({\n    stepStartTime: Date.now(),\n    totalTime: 0,\n    retryCount: 0\n  });\n\n  // Enhanced setup steps with comprehensive flow\n  const getSetupSteps = (): SetupStep[] => {\n    const steps: SetupStep[] = [\n      {\n        id: 'welcome',\n        title: 'Getting Started',\n        description: `Welcome! Let's connect your ${integration.name} account`,\n        type: 'welcome',\n        completed: false,\n        estimatedTime: '1 min',\n        helpText: 'This wizard will guide you through a secure connection process'\n      }\n    ];\n\n    // Add prerequisites if they exist\n    if (integration.prerequisites && integration.prerequisites.length > 0) {\n      steps.push({\n        id: 'prerequisites',\n        title: 'Prerequisites Check',\n        description: 'Verify you have everything needed for setup',\n        type: 'prerequisites',\n        completed: false,\n        estimatedTime: '2 min',\n        helpText: 'Make sure you have the required access and information'\n      });\n    }\n\n    // Authentication step based on type\n    steps.push({\n      id: 'auth',\n      title: integration.authType === 'oauth' ? 'Authorization' : 'Credentials',\n      description: integration.authType === 'oauth' \n        ? 'Authorize Nexus to access your account securely'\n        : 'Enter your API credentials or connection details',\n      type: 'auth',\n      completed: false,\n      estimatedTime: '3 min',\n      helpText: 'Your credentials are encrypted and stored securely',\n      troubleshooting: 'Having trouble? Check our troubleshooting guide below'\n    });\n\n    // Permissions and configuration\n    steps.push({\n      id: 'permissions',\n      title: 'Data Permissions',\n      description: 'Configure what data to sync and access levels',\n      type: 'permissions',\n      completed: false,\n      estimatedTime: '2 min',\n      helpText: 'You can change these settings anytime after setup'\n    });\n\n    // Advanced configuration (optional for some integrations)\n    if (integration.difficulty !== 'easy') {\n      steps.push({\n        id: 'configuration',\n        title: 'Advanced Settings',\n        description: 'Customize sync frequency and data mapping',\n        type: 'configuration',\n        completed: false,\n        optional: true,\n        estimatedTime: '3 min',\n        helpText: 'Optional: Use defaults for quick setup'\n      });\n    }\n\n    // Testing\n    steps.push({\n      id: 'testing',\n      title: 'Connection Test',\n      description: 'Verify everything is working correctly',\n      type: 'testing',\n      completed: false,\n      estimatedTime: '1 min',\n      helpText: 'We\\'ll test the connection and fetch sample data'\n    });\n\n    // Success\n    steps.push({\n      id: 'success',\n      title: 'All Set!',\n      description: 'Your integration is ready to use',\n      type: 'success',\n      completed: false,\n      estimatedTime: '1 min'\n    });\n\n    return steps;\n  };\n\n  const steps = getSetupSteps();\n  const currentStepData = steps[currentStep];\n  const progress = ((currentStep + 1) / steps.length) * 100;\n\n  // Track analytics\n  useEffect(() => {\n    setAnalytics(prev => ({ ...prev, stepStartTime: Date.now() }));\n  }, [currentStep]);\n\n  const handleNext = () => {\n    if (validateCurrentStep()) {\n      // Track step completion time\n      const stepTime = Date.now() - analytics.stepStartTime;\n      setAnalytics(prev => ({ \n        ...prev, \n        totalTime: prev.totalTime + stepTime \n      }));\n\n      if (currentStep < steps.length - 1) {\n        setCurrentStep(currentStep + 1);\n      }\n    }\n  };\n\n  const handlePrevious = () => {\n    if (currentStep > 0) {\n      setCurrentStep(currentStep - 1);\n    }\n  };\n\n  const validateCurrentStep = (): boolean => {\n    const errors: string[] = [];\n    \n    switch (currentStepData.type) {\n      case 'auth':\n        if (integration.authType === 'api_key' && !setupData.apiKey) {\n          errors.push('API key is required');\n        }\n        if (integration.authType === 'credentials' && (!setupData.username || !setupData.password)) {\n          errors.push('Username and password are required');\n        }\n        break;\n      case 'permissions':\n        if (!setupData.selectedPermissions || setupData.selectedPermissions.length === 0) {\n          errors.push('Please select at least one data type to sync');\n        }\n        break;\n    }\n\n    setValidationErrors(errors);\n    return errors.length === 0;\n  };\n\n  const handleTestConnection = async () => {\n    setConnectionStatus('testing');\n    setErrorMessage('');\n\n    try {\n      // Simulate API call with realistic delay\n      await new Promise(resolve => setTimeout(resolve, 2000));\n      \n      // Simulate random success/failure for demo\n      const success = Math.random() > 0.2; // 80% success rate\n      \n      if (success) {\n        setConnectionStatus('success');\n        steps[currentStep].completed = true;\n      } else {\n        throw new Error('Connection failed: Invalid credentials or network error');\n      }\n    } catch (error) {\n      setConnectionStatus('error');\n      setErrorMessage(error instanceof Error ? error.message : 'Connection test failed');\n      setAnalytics(prev => ({ ...prev, retryCount: prev.retryCount + 1 }));\n    }\n  };\n\n  const handleComplete = async () => {\n    setIsConnecting(true);\n    \n    try {\n      // Final setup completion\n      await new Promise(resolve => setTimeout(resolve, 1500));\n      \n      const completionData = {\n        integrationId: integration.id,\n        setupData,\n        connectedAt: new Date().toISOString(),\n        setupDuration: analytics.totalTime + (Date.now() - analytics.stepStartTime),\n        retryCount: analytics.retryCount\n      };\n      \n      onComplete(completionData);\n      onClose();\n    } catch (error) {\n      setErrorMessage('Setup completion failed. Please try again.');\n    } finally {\n      setIsConnecting(false);\n    }\n  };\n\n  const renderProgressBar = () => (\n    <div className=\"mb-6\">\n      <div className=\"flex justify-between items-center mb-2\">\n        <span className=\"text-sm font-medium text-foreground/90 dark:text-muted-foreground/60\">\n          Step {currentStep + 1} of {steps.length}\n        </span>\n        <span className=\"text-sm text-muted-foreground dark:text-muted-foreground\">\n          {currentStepData.estimatedTime}\n        </span>\n      </div>\n      <div className=\"w-full bg-gray-200 dark:bg-background rounded-full h-2\">\n        <div \n          className=\"bg-primary h-2 rounded-full transition-all duration-300\"\n          style={{ width: `${progress}%` }}\n        />\n      </div>\n      <div className=\"flex justify-between mt-2\">\n        {steps.map((step, index) => (\n          <div \n            key={step.id}\n            className={`flex items-center ${index <= currentStep ? 'text-primary' : 'text-muted-foreground'}`}\n          >\n            {step.completed ? (\n              <CheckCircle2 className=\"w-4 h-4\" />\n            ) : index === currentStep ? (\n              <div className=\"w-4 h-4 border-2 border-blue-600 rounded-full\" />\n            ) : (\n              <div className=\"w-4 h-4 border-2 border-border rounded-full\" />\n            )}\n          </div>\n        ))}\n      </div>\n    </div>\n  );\n\n  const renderStepContent = () => {\n    switch (currentStepData.type) {\n      case 'welcome':\n        return (\n          <div className=\"space-y-6\">\n            <div className=\"text-center\">\n              <div className=\"mx-auto w-20 h-20 bg-primary/10 dark:bg-primary/20/20 rounded-full flex items-center justify-center mb-4\">\n                {integration.icon}\n              </div>\n              <h3 className=\"text-2xl font-semibold text-foreground dark:text-primary-foreground mb-2\">\n                Connect {integration.name}\n              </h3>\n              <p className=\"text-muted-foreground dark:text-muted-foreground mb-6 max-w-md mx-auto\">\n                This secure integration will sync your {integration.name} data with Nexus for powerful insights and automation.\n              </p>\n            </div>\n\n            <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4\">\n              <div className=\"p-4 bg-background dark:bg-background/50 rounded-lg text-center\">\n                <Clock className=\"w-6 h-6 text-primary mx-auto mb-2\" />\n                <div className=\"text-sm font-medium text-foreground dark:text-primary-foreground\">Setup Time</div>\n                <div className=\"text-sm text-muted-foreground dark:text-muted-foreground\">{integration.estimatedSetupTime}</div>\n              </div>\n              <div className=\"p-4 bg-background dark:bg-background/50 rounded-lg text-center\">\n                <Shield className=\"w-6 h-6 text-success mx-auto mb-2\" />\n                <div className=\"text-sm font-medium text-foreground dark:text-primary-foreground\">Security</div>\n                <div className=\"text-sm text-muted-foreground dark:text-muted-foreground\">Bank-level encryption</div>\n              </div>\n              <div className=\"p-4 bg-background dark:bg-background/50 rounded-lg text-center\">\n                <Database className=\"w-6 h-6 text-secondary mx-auto mb-2\" />\n                <div className=\"text-sm font-medium text-foreground dark:text-primary-foreground\">Data Types</div>\n                <div className=\"text-sm text-muted-foreground dark:text-muted-foreground\">{integration.features.length} available</div>\n              </div>\n            </div>\n\n            <div className=\"bg-primary/5 dark:bg-primary/20/20 p-4 rounded-lg\">\n              <h4 className=\"font-medium text-foreground dark:text-primary-foreground mb-3 flex items-center\">\n                <Zap className=\"w-4 h-4 mr-2 text-primary\" />\n                What you'll get:\n              </h4>\n              <div className=\"grid grid-cols-1 md:grid-cols-2 gap-2\">\n                {integration.features.map((feature, index) => (\n                  <div key={index} className=\"flex items-center space-x-2\">\n                    <Check className=\"w-4 h-4 text-success flex-shrink-0\" />\n                    <span className=\"text-sm text-muted-foreground dark:text-muted-foreground\">{feature}</span>\n                  </div>\n                ))}\n              </div>\n            </div>\n\n            {/* Help Resources */}\n            <div className=\"flex justify-center space-x-4\">\n              {integration.documentation && (\n                <Button variant=\"outline\" size=\"sm\">\n                  <Book className=\"w-4 h-4 mr-2\" />\n                  Documentation\n                </Button>\n              )}\n              {integration.videoTutorial && (\n                <Button variant=\"outline\" size=\"sm\">\n                  <Globe className=\"w-4 h-4 mr-2\" />\n                  Video Guide\n                </Button>\n              )}\n              {integration.supportUrl && (\n                <Button variant=\"outline\" size=\"sm\">\n                  <MessageCircle className=\"w-4 h-4 mr-2\" />\n                  Get Help\n                </Button>\n              )}\n            </div>\n          </div>\n        );\n\n      case 'prerequisites':\n        return (\n          <div className=\"space-y-6\">\n            <div>\n              <h3 className=\"text-xl font-semibold text-foreground dark:text-primary-foreground mb-4\">\n                Before we start, make sure you have:\n              </h3>\n              <div className=\"space-y-4\">\n                {integration.prerequisites?.map((prereq, index) => (\n                  <label key={index} className=\"flex items-start space-x-4 cursor-pointer\">\n                    <input \n                      type=\"checkbox\" \n                      className=\"mt-1 w-4 h-4 text-primary rounded focus:ring-blue-500\"\n                      onChange={(e) => {\n                        const checked = e.target.checked;\n                        setSetupData(prev => ({\n                          ...prev,\n                          prerequisites: {\n                            ...prev.prerequisites,\n                            [index]: checked\n                          }\n                        }));\n                      }}\n                    />\n                    <span className=\"text-foreground/90 dark:text-muted-foreground/60\">{prereq}</span>\n                  </label>\n                ))}\n              </div>\n            </div>\n\n            <div className=\"bg-warning/5 dark:bg-warning/20/20 p-4 rounded-lg\">\n              <div className=\"flex items-start space-x-4\">\n                <AlertTriangle className=\"w-5 h-5 text-warning mt-0.5\" />\n                <div>\n                  <h4 className=\"font-medium text-warning/80 dark:text-warning\">\n                    Need Help Getting Access?\n                  </h4>\n                  <p className=\"text-sm text-warning/90 dark:text-warning mt-1\">\n                    Contact your {integration.name} administrator if you don't have the required permissions.\n                  </p>\n                </div>\n              </div>\n            </div>\n          </div>\n        );\n\n      case 'auth':\n        return (\n          <div className=\"space-y-6\">\n            {integration.authType === 'oauth' ? (\n              <div className=\"text-center space-y-6\">\n                <div>\n                  <h3 className=\"text-xl font-semibold text-foreground dark:text-primary-foreground mb-2\">\n                    Authorize Access\n                  </h3>\n                  <p className=\"text-muted-foreground dark:text-muted-foreground\">\n                    Click the button below to securely connect your {integration.name} account.\n                  </p>\n                </div>\n                \n                <div className=\"bg-primary/5 dark:bg-primary/20/20 p-6 rounded-lg\">\n                  <Shield className=\"w-12 h-12 text-primary mx-auto mb-4\" />\n                  <h4 className=\"font-medium text-foreground dark:text-primary-foreground mb-2\">\n                    Secure OAuth Connection\n                  </h4>\n                  <p className=\"text-sm text-muted-foreground dark:text-muted-foreground mb-4\">\n                    You'll be redirected to {integration.name} to authorize access. \n                    We only request the minimum permissions needed.\n                  </p>\n                  <Button className=\"w-full bg-primary hover:bg-primary/90\">\n                    <Globe className=\"w-4 h-4 mr-2\" />\n                    Connect to {integration.name}\n                  </Button>\n                </div>\n              </div>\n            ) : (\n              <div className=\"space-y-4\">\n                <div>\n                  <h3 className=\"text-xl font-semibold text-foreground dark:text-primary-foreground mb-2\">\n                    Enter Your Credentials\n                  </h3>\n                  <p className=\"text-muted-foreground dark:text-muted-foreground\">\n                    Your credentials are encrypted and stored securely.\n                  </p>\n                </div>\n\n                <div className=\"space-y-4\">\n                  {integration.authType === 'api_key' && (\n                    <div>\n                      <label className=\"block text-sm font-medium text-foreground/90 dark:text-muted-foreground/60 mb-2\">\n                        API Key *\n                      </label>\n                      <div className=\"relative\">\n                        <Input\n                          id=\"api_key\"\n                          type={showApiKey ? \"text\" : \"password\"}\n                          value={setupData.apiKey || ''}\n                          onChange={(e) => setSetupData((prev: SetupData) => ({ ...prev, apiKey: e.target.value }))}\n                          className=\"pr-10\"\n                        />\n                        <Button variant=\"ghost\" size=\"icon\" className=\"absolute top-0 right-0\" onClick={() => setShowApiKey(!showApiKey)}>\n                          {showApiKey ? <EyeOff className=\"w-4 h-4\" /> : <Eye className=\"w-4 h-4\" />}\n                        </Button>\n                      </div>\n                      <p className=\"text-xs text-muted-foreground mt-1\">\n                        Find your API key in {integration.name} Settings → API → Generate Key\n                      </p>\n                    </div>\n                  )}\n\n                  {integration.authType === 'credentials' && (\n                    <>\n                      <div>\n                        <label className=\"block text-sm font-medium text-foreground/90 dark:text-muted-foreground/60 mb-2\">\n                          Username *\n                        </label>\n                        <Input\n                          id=\"username\"\n                          type=\"text\"\n                          value={setupData.username || ''}\n                          onChange={(e) => setSetupData((prev: SetupData) => ({ ...prev, username: e.target.value }))}\n                        />\n                      </div>\n                      <div>\n                        <label className=\"block text-sm font-medium text-foreground/90 dark:text-muted-foreground/60 mb-2\">\n                          Password *\n                        </label>\n                        <Input\n                          id=\"password\"\n                          type=\"password\"\n                          value={setupData.password || ''}\n                          onChange={(e) => setSetupData((prev: SetupData) => ({ ...prev, password: e.target.value }))}\n                        />\n                      </div>\n                    </>\n                  )}\n                </div>\n\n                {validationErrors.length > 0 && (\n                  <div className=\"bg-destructive/5 dark:bg-destructive/20 p-4 rounded-lg\">\n                    <div className=\"flex items-start space-x-2\">\n                      <XCircle className=\"w-4 h-4 text-destructive mt-0.5\" />\n                      <div>\n                        {validationErrors.map((error, index) => (\n                          <p key={index} className=\"text-sm text-destructive dark:text-red-300\">{error}</p>\n                        ))}\n                      </div>\n                    </div>\n                  </div>\n                )}\n              </div>\n            )}\n          </div>\n        );\n\n      case 'testing':\n        return (\n          <div className=\"space-y-6\">\n            <div className=\"text-center\">\n              <h3 className=\"text-xl font-semibold text-foreground dark:text-primary-foreground mb-2\">\n                Test Connection\n              </h3>\n              <p className=\"text-muted-foreground dark:text-muted-foreground\">\n                Let's verify everything is working correctly\n              </p>\n            </div>\n\n            <div className=\"bg-background dark:bg-background/50 p-6 rounded-lg\">\n              {connectionStatus === 'idle' && (\n                <div className=\"text-center\">\n                  <Database className=\"w-12 h-12 text-muted-foreground mx-auto mb-4\" />\n                  <p className=\"text-muted-foreground dark:text-muted-foreground mb-4\">\n                    Ready to test your connection\n                  </p>\n                  <Button onClick={handleTestConnection} className=\"bg-primary hover:bg-primary/90\">\n                    <Zap className=\"w-4 h-4 mr-2\" />\n                    Test Connection\n                  </Button>\n                </div>\n              )}\n\n              {connectionStatus === 'testing' && (\n                <div className=\"text-center\">\n                  <RefreshCw className=\"w-12 h-12 text-primary mx-auto mb-4 animate-spin\" />\n                  <p className=\"text-muted-foreground dark:text-muted-foreground\">\n                    Testing connection...\n                  </p>\n                </div>\n              )}\n\n              {connectionStatus === 'success' && (\n                <div className=\"text-center\">\n                  <CheckCircle2 className=\"w-12 h-12 text-success mx-auto mb-4\" />\n                  <h4 className=\"font-medium text-success dark:text-success mb-2\">\n                    Connection Successful!\n                  </h4>\n                  <p className=\"text-sm text-muted-foreground dark:text-muted-foreground\">\n                    Successfully connected to {integration.name} and fetched sample data.\n                  </p>\n                </div>\n              )}\n\n              {connectionStatus === 'error' && (\n                <div className=\"text-center\">\n                  <XCircle className=\"w-12 h-12 text-destructive mx-auto mb-4\" />\n                  <h4 className=\"font-medium text-destructive dark:text-red-300 mb-2\">\n                    Connection Failed\n                  </h4>\n                  <p className=\"text-sm text-destructive dark:text-destructive mb-4\">\n                    {errorMessage}\n                  </p>\n                  <div className=\"flex justify-center space-x-4\">\n                    <Button variant=\"outline\" onClick={handleTestConnection}>\n                      <RefreshCw className=\"w-4 h-4 mr-2\" />\n                      Retry\n                    </Button>\n                    <Button variant=\"outline\" onClick={() => setCurrentStep(currentStep - 1)}>\n                      <ArrowLeft className=\"w-4 h-4 mr-2\" />\n                      Back to Setup\n                    </Button>\n                  </div>\n                </div>\n              )}\n            </div>\n\n            {/* Common Issues Help */}\n            {integration.commonIssues && connectionStatus === 'error' && (\n              <div className=\"bg-warning/5 dark:bg-warning/20/20 p-4 rounded-lg\">\n                <h4 className=\"font-medium text-warning/80 dark:text-warning mb-3\">\n                  Common Issues & Solutions:\n                </h4>\n                <div className=\"space-y-2\">\n                  {integration.commonIssues.map((item, index) => (\n                    <details key={index} className=\"group\">\n                      <summary className=\"cursor-pointer text-sm font-medium text-warning/90 dark:text-warning\">\n                        {item.issue}\n                      </summary>\n                      <p className=\"text-sm text-warning dark:text-yellow-400 mt-1 ml-4\">\n                        {item.solution}\n                      </p>\n                    </details>\n                  ))}\n                </div>\n              </div>\n            )}\n          </div>\n        );\n\n      case 'success':\n        return (\n          <div className=\"space-y-6 text-center\">\n            <div>\n              <div className=\"mx-auto w-20 h-20 bg-success/10 dark:bg-success/20 rounded-full flex items-center justify-center mb-4\">\n                <CheckCircle2 className=\"w-12 h-12 text-success\" />\n              </div>\n              <h3 className=\"text-2xl font-semibold text-foreground dark:text-primary-foreground mb-2\">\n                Integration Complete!\n              </h3>\n              <p className=\"text-muted-foreground dark:text-muted-foreground mb-6\">\n                {integration.name} is now connected and syncing data with Nexus.\n              </p>\n            </div>\n\n            <div className=\"bg-success/5 dark:bg-success/20 p-4 rounded-lg\">\n              <h4 className=\"font-medium text-success dark:text-success mb-2\">\n                Next Steps:\n              </h4>\n              <ul className=\"text-sm text-success dark:text-success space-y-1 text-left\">\n                <li>• Data will start syncing within the next few minutes</li>\n                <li>• Check the dashboard for your first insights</li>\n                <li>• Configure automation rules if needed</li>\n                <li>• Explore Trinity AI recommendations</li>\n              </ul>\n            </div>\n\n            <div className=\"flex justify-center space-x-4\">\n              <Button variant=\"outline\">\n                <Book className=\"w-4 h-4 mr-2\" />\n                View Documentation\n              </Button>\n              <Button onClick={handleComplete} className=\"bg-primary hover:bg-primary/90\">\n                Go to Dashboard\n              </Button>\n            </div>\n          </div>\n        );\n\n      default:\n        return <div>Unknown step type</div>;\n    }\n  };\n\n  const renderHelpPanel = () => (\n    <div className=\"bg-background dark:bg-background/50 p-4 rounded-lg\">\n      <div className=\"flex items-center mb-3\">\n        <HelpCircle className=\"w-4 h-4 text-primary mr-2\" />\n        <span className=\"text-sm font-medium text-foreground dark:text-primary-foreground\">Need Help?</span>\n      </div>\n      {currentStepData.helpText && (\n        <p className=\"text-sm text-muted-foreground dark:text-muted-foreground mb-3\">\n          {currentStepData.helpText}\n        </p>\n      )}\n      <div className=\"flex space-x-2\">\n        <Button variant=\"outline\" size=\"sm\">\n          <MessageCircle className=\"w-4 h-4 mr-1\" />\n          Chat Support\n        </Button>\n        <Button variant=\"outline\" size=\"sm\">\n          <ExternalLink className=\"w-4 h-4 mr-1\" />\n          Guide\n        </Button>\n      </div>\n    </div>\n  );\n\n  if (!isOpen) return null;\n\n  return (\n          <div className=\"fixed inset-0 bg-black/50 flex items-center justify-center z-[80] p-4\">\n      <div className=\"bg-card dark:bg-background rounded-xl shadow-2xl w-full max-w-2xl max-h-[90vh] overflow-y-auto\">\n        <div className=\"p-6\">\n          {/* Header */}\n          <div className=\"flex items-center justify-between mb-6\">\n            <div className=\"flex items-center space-x-4\">\n              <div className=\"w-10 h-10 bg-primary/10 dark:bg-primary/20/20 rounded-lg flex items-center justify-center\">\n                {integration.icon}\n              </div>\n              <div>\n                <h2 className=\"text-xl font-semibold text-foreground dark:text-primary-foreground\">\n                  {integration.name} Setup\n                </h2>\n                <Badge className={`text-xs ${\n                  integration.difficulty === 'easy' ? 'bg-success/10 text-success' :\n                  integration.difficulty === 'medium' ? 'bg-warning/10 text-warning/80' :\n                  'bg-destructive/10 text-destructive'\n                }`}>\n                  {integration.difficulty} setup\n                </Badge>\n              </div>\n            </div>\n            <Button variant=\"outline\" size=\"sm\" onClick={onClose}>\n              <X className=\"w-4 h-4\" />\n            </Button>\n          </div>\n\n          {/* Progress */}\n          {renderProgressBar()}\n\n          {/* Current Step */}\n          <div className=\"mb-6\">\n            <h3 className=\"text-lg font-medium text-foreground dark:text-primary-foreground mb-2\">\n              {currentStepData.title}\n            </h3>\n            <p className=\"text-muted-foreground dark:text-muted-foreground text-sm\">\n              {currentStepData.description}\n            </p>\n          </div>\n\n          {/* Step Content */}\n          <div className=\"mb-6\">\n            {renderStepContent()}\n          </div>\n\n          {/* Help Panel */}\n          {currentStepData.helpText && (\n            <div className=\"mb-6\">\n              {renderHelpPanel()}\n            </div>\n          )}\n\n          {/* Navigation */}\n          <div className=\"flex justify-between\">\n            <Button \n              variant=\"outline\" \n              onClick={handlePrevious}\n              disabled={currentStep === 0}\n            >\n              <ArrowLeft className=\"w-4 h-4 mr-2\" />\n              Previous\n            </Button>\n\n            <div className=\"flex space-x-4\">\n              {currentStepData.optional && (\n                <Button variant=\"outline\" onClick={handleNext}>\n                  Skip\n                </Button>\n              )}\n              \n              {currentStep === steps.length - 1 ? (\n                <Button \n                  onClick={handleComplete}\n                  disabled={isConnecting}\n                  className=\"bg-success hover:bg-success/90\"\n                >\n                  {isConnecting ? (\n                    <RefreshCw className=\"w-4 h-4 mr-2 animate-spin\" />\n                  ) : (\n                    <Check className=\"w-4 h-4 mr-2\" />\n                  )}\n                  Complete Setup\n                </Button>\n              ) : currentStepData.type === 'testing' ? (\n                <Button \n                  onClick={handleNext}\n                  disabled={connectionStatus !== 'success'}\n                  className=\"bg-primary hover:bg-primary/90\"\n                >\n                  Continue\n                  <ArrowRight className=\"w-4 h-4 ml-2\" />\n                </Button>\n              ) : (\n                <Button onClick={handleNext} className=\"bg-primary hover:bg-primary/90\">\n                  Next\n                  <ArrowRight className=\"w-4 h-4 ml-2\" />\n                </Button>\n              )}\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default EnhancedIntegrationSetup; ","usedDeprecatedRules":[]},{"filePath":"/home/vonj/Github/Nexus/src/components/integrations/GoogleAnalyticsSetup.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'Separator' is defined but never used.","line":6,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":6,"endColumn":12},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'isAuthenticated' is assigned a value but never used.","line":50,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":50,"endColumn":25},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'err' is defined but never used.","line":93,"column":18,"nodeType":null,"messageId":"unusedVar","endLine":93,"endColumn":21},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":109,"column":19,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":109,"endColumn":22,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3161,3164],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3161,3164],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":124,"column":19,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":124,"endColumn":22,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3631,3634],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3631,3634],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":136,"column":19,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":136,"endColumn":22,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3971,3974],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3971,3974],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":150,"column":19,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":150,"endColumn":22,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[4327,4330],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[4327,4330],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":188,"column":19,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":188,"endColumn":22,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[5414,5417],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[5414,5417],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState, useEffect } from 'react';\nimport { \n  Card, CardContent, CardHeader, CardTitle,\n  Button,\n  Badge,\n  Separator,\n  Alert, AlertDescription\n} from '@/components/ui';\nimport { \n  BarChart3, \n  Users, \n  Eye, \n  TrendingUp, \n  Clock, \n  ExternalLink,\n  CheckCircle,\n  AlertCircle,\n  Loader2,\n  Settings,\n  RefreshCw\n} from 'lucide-react';\nimport { googleAnalyticsService } from '@/lib/services/googleAnalyticsService';\nimport { supabase } from '../../lib/core/supabase';\nimport { useAuth } from '@/contexts/AuthContext';\nimport { useNotifications } from '@/contexts/NotificationContext';\n\ninterface GoogleAnalyticsSetupProps {\n  onComplete?: () => void;\n  onClose?: () => void;\n}\n\ninterface Property {\n  id: string;\n  name: string;\n  websiteUrl: string;\n}\n\nconst GoogleAnalyticsSetup: React.FC<GoogleAnalyticsSetupProps> = ({ \n  onComplete, \n  onClose \n}) => {\n  const { user } = useAuth();\n  const { addNotification } = useNotifications();\n  const [currentStep, setCurrentStep] = useState<'connect' | 'properties' | 'test' | 'complete'>('connect');\n  const [isConnecting, setIsConnecting] = useState(false);\n  const [properties, setProperties] = useState<Property[]>([]);\n  const [selectedProperty, setSelectedProperty] = useState<Property | null>(null);\n  const [testResults, setTestResults] = useState<{ success: boolean; message: string } | null>(null);\n  const [error, setError] = useState<string | null>(null);\n  const [isAuthenticated, setIsAuthenticated] = useState(false);\n\n  useEffect(() => {\n    // Check if already authenticated\n    setIsAuthenticated(googleAnalyticsService.isAuthenticated());\n    \n    // If authenticated, skip to properties step\n    if (googleAnalyticsService.isAuthenticated()) {\n      setCurrentStep('properties');\n      loadProperties();\n    }\n  }, []);\n\n  const handleOAuthConnect = async () => {\n    setIsConnecting(true);\n    setError(null);\n\n    try {\n      const authUrl = await googleAnalyticsService.initializeOAuth();\n      \n      // Open OAuth in popup\n      const popup = window.open(\n        authUrl,\n        'google-analytics-oauth',\n        'width=600,height=700,scrollbars=yes,resizable=yes'\n      );\n\n      // Listen for OAuth completion\n      const checkOAuth = setInterval(async () => {\n        try {\n          if (popup?.closed) {\n            clearInterval(checkOAuth);\n            \n            // Check if authentication succeeded\n            if (googleAnalyticsService.isAuthenticated()) {\n              setIsAuthenticated(true);\n              setCurrentStep('properties');\n              await loadProperties();\n            } else {\n              setError('Authentication was cancelled or failed');\n            }\n            setIsConnecting(false);\n          }\n        } catch (err) {\n          clearInterval(checkOAuth);\n          setError('Authentication failed');\n          setIsConnecting(false);\n        }\n      }, 1000);\n\n      // Fallback timeout\n      setTimeout(() => {\n        clearInterval(checkOAuth);\n        if (isConnecting) {\n          setIsConnecting(false);\n          setError('Authentication timed out');\n        }\n      }, 300000); // 5 minutes\n\n    } catch (err: any) {\n      setError(err.message || 'Failed to start authentication');\n      setIsConnecting(false);\n    }\n  };\n\n  const loadProperties = async () => {\n    try {\n      const availableProperties = await googleAnalyticsService.getAvailableProperties();\n      setProperties(availableProperties);\n      \n      if (availableProperties.length === 1) {\n        // Auto-select if only one property\n        setSelectedProperty(availableProperties[0]);\n      }\n    } catch (err: any) {\n      setError(err.message || 'Failed to load properties');\n    }\n  };\n\n  const handlePropertySelect = async (property: Property) => {\n    setSelectedProperty(property);\n    \n    try {\n      await googleAnalyticsService.setActiveProperty(property.id);\n      setCurrentStep('test');\n      await runConnectionTest();\n    } catch (err: any) {\n      setError(err.message || 'Failed to set property');\n    }\n  };\n\n  const runConnectionTest = async () => {\n    try {\n      const result = await googleAnalyticsService.testConnection();\n      setTestResults(result);\n      \n      if (result.success) {\n        setCurrentStep('complete');\n        await saveIntegration();\n      }\n    } catch (err: any) {\n      setTestResults({\n        success: false,\n        message: err.message || 'Connection test failed'\n      });\n    }\n  };\n\n  const saveIntegration = async () => {\n    if (!user || !selectedProperty) return;\n\n    try {\n      // Save to user_integrations table\n      const { error: dbError } = await supabase\n        .from('user_integrations')\n        .upsert({\n          user_id: user.id,\n          integration_id: 'google-analytics', // This should match the slug in integrations table\n          status: 'active',\n          configuration: {\n            propertyId: selectedProperty.id,\n            propertyName: selectedProperty.name,\n            websiteUrl: selectedProperty.websiteUrl\n          },\n          metadata: {\n            connectedAt: new Date().toISOString(),\n            propertyDetails: selectedProperty\n          }\n        });\n\n      if (dbError) throw dbError;\n\n      addNotification({\n        type: 'success',\n        message: `Google Analytics Connected: Successfully connected to ${selectedProperty.name}`\n      });\n\n      onComplete?.();\n    } catch (err: any) {\n      setError(err.message || 'Failed to save integration');\n    }\n  };\n\n  const renderConnectStep = () => (\n    <div className=\"space-y-6\">\n      <div className=\"text-center\">\n        <BarChart3 className=\"w-16 h-16 text-destructive mx-auto mb-4\" />\n        <h3 className=\"text-xl font-semibold mb-2\">Connect Google Analytics</h3>\n        <p className=\"text-muted-foreground\">\n          Connect your Google Analytics account to track website performance\n        </p>\n      </div>\n\n      <Alert>\n        <AlertCircle className=\"h-4 w-4\" />\n        <AlertDescription>\n          We'll access your Google Analytics data in read-only mode to provide insights and reporting.\n        </AlertDescription>\n      </Alert>\n\n      <div className=\"grid grid-cols-2 gap-4 text-sm\">\n        <div className=\"flex items-center gap-2\">\n          <Users className=\"w-4 h-4 text-muted-foreground\" />\n          <span>Visitor analytics</span>\n        </div>\n        <div className=\"flex items-center gap-2\">\n          <Eye className=\"w-4 h-4 text-muted-foreground\" />\n          <span>Page views</span>\n        </div>\n        <div className=\"flex items-center gap-2\">\n          <TrendingUp className=\"w-4 h-4 text-muted-foreground\" />\n          <span>Traffic sources</span>\n        </div>\n        <div className=\"flex items-center gap-2\">\n          <Clock className=\"w-4 h-4 text-muted-foreground\" />\n          <span>Real-time data</span>\n        </div>\n      </div>\n\n      {error && (\n        <Alert variant=\"destructive\">\n          <AlertCircle className=\"h-4 w-4\" />\n          <AlertDescription>{error}</AlertDescription>\n        </Alert>\n      )}\n\n      <Button \n        onClick={handleOAuthConnect} \n        disabled={isConnecting}\n        className=\"w-full\"\n        size=\"lg\"\n      >\n        {isConnecting ? (\n          <>\n            <Loader2 className=\"w-4 h-4 mr-2 animate-spin\" />\n            Connecting...\n          </>\n        ) : (\n          <>\n            <ExternalLink className=\"w-4 h-4 mr-2\" />\n            Connect with Google\n          </>\n        )}\n      </Button>\n    </div>\n  );\n\n  const renderPropertiesStep = () => (\n    <div className=\"space-y-6\">\n      <div className=\"text-center\">\n        <Settings className=\"w-16 h-16 text-destructive mx-auto mb-4\" />\n        <h3 className=\"text-xl font-semibold mb-2\">Select Property</h3>\n        <p className=\"text-muted-foreground\">\n          Choose which Google Analytics property to connect\n        </p>\n      </div>\n\n      {properties.length === 0 ? (\n        <Alert>\n          <AlertCircle className=\"h-4 w-4\" />\n          <AlertDescription>\n            No Google Analytics properties found. Make sure you have GA4 properties set up.\n          </AlertDescription>\n        </Alert>\n      ) : (\n        <div className=\"space-y-3\">\n          {properties.map((property) => (\n            <Card \n              key={property.id}\n              className={`cursor-pointer transition-colors hover:bg-muted ${\n                selectedProperty?.id === property.id ? 'ring-2 ring-primary' : ''\n              }`}\n              onClick={() => handlePropertySelect(property)}\n            >\n              <CardContent className=\"p-4\">\n                <div className=\"flex items-center justify-between\">\n                  <div>\n                    <h4 className=\"font-medium\">{property.name}</h4>\n                    {property.websiteUrl && (\n                      <p className=\"text-sm text-muted-foreground\">{property.websiteUrl}</p>\n                    )}\n                  </div>\n                  <Badge variant=\"outline\">GA4</Badge>\n                </div>\n              </CardContent>\n            </Card>\n          ))}\n        </div>\n      )}\n\n      {error && (\n        <Alert variant=\"destructive\">\n          <AlertCircle className=\"h-4 w-4\" />\n          <AlertDescription>{error}</AlertDescription>\n        </Alert>\n      )}\n    </div>\n  );\n\n  const renderTestStep = () => (\n    <div className=\"space-y-6\">\n      <div className=\"text-center\">\n        <div className=\"w-16 h-16 mx-auto mb-4\">\n          {testResults ? (\n            testResults.success ? (\n              <CheckCircle className=\"w-16 h-16 text-success\" />\n            ) : (\n              <AlertCircle className=\"w-16 h-16 text-destructive\" />\n            )\n          ) : (\n            <Loader2 className=\"w-16 h-16 text-muted-foreground animate-spin\" />\n          )}\n        </div>\n        <h3 className=\"text-xl font-semibold mb-2\">Testing Connection</h3>\n        <p className=\"text-muted-foreground\">\n          Verifying access to your Google Analytics data\n        </p>\n      </div>\n\n      {testResults && (\n        <Alert variant={testResults.success ? \"default\" : \"destructive\"}>\n          <AlertDescription>{testResults.message}</AlertDescription>\n        </Alert>\n      )}\n\n      {!testResults?.success && (\n        <Button onClick={runConnectionTest} className=\"w-full\">\n          <RefreshCw className=\"w-4 h-4 mr-2\" />\n          Retry Test\n        </Button>\n      )}\n    </div>\n  );\n\n  const renderCompleteStep = () => (\n    <div className=\"space-y-6\">\n      <div className=\"text-center\">\n        <CheckCircle className=\"w-16 h-16 text-success mx-auto mb-4\" />\n        <h3 className=\"text-xl font-semibold mb-2\">Connected Successfully!</h3>\n        <p className=\"text-muted-foreground\">\n          Your Google Analytics account is now connected\n        </p>\n      </div>\n\n      {selectedProperty && (\n        <Card>\n          <CardContent className=\"p-4\">\n            <div className=\"text-center\">\n              <p className=\"font-medium\">{selectedProperty.name}</p>\n              {selectedProperty.websiteUrl && (\n                <p className=\"text-sm text-muted-foreground\">{selectedProperty.websiteUrl}</p>\n              )}\n            </div>\n          </CardContent>\n        </Card>\n      )}\n\n      <div className=\"flex gap-3\">\n        <Button onClick={onClose} variant=\"outline\" className=\"flex-1\">\n          Close\n        </Button>\n        <Button onClick={onComplete} className=\"flex-1\">\n          View Dashboard\n        </Button>\n      </div>\n    </div>\n  );\n\n  return (\n    <Card className=\"w-full max-w-lg mx-auto\">\n      <CardHeader>\n        <CardTitle className=\"flex items-center gap-2\">\n          <BarChart3 className=\"w-5 h-5\" />\n          Google Analytics Setup\n        </CardTitle>\n        \n        {/* Progress indicator */}\n        <div className=\"flex items-center gap-2 mt-4\">\n          {['connect', 'properties', 'test', 'complete'].map((step, index) => (\n            <React.Fragment key={step}>\n              <div className={`w-8 h-8 rounded-full flex items-center justify-center text-xs ${\n                currentStep === step || \n                (['connect', 'properties', 'test', 'complete'].indexOf(currentStep) > index)\n                  ? 'bg-primary text-primary-foreground' \n                  : 'bg-muted text-muted-foreground'\n              }`}>\n                {index + 1}\n              </div>\n              {index < 3 && <div className=\"flex-1 h-px bg-muted\" />}\n            </React.Fragment>\n          ))}\n        </div>\n      </CardHeader>\n\n      <CardContent>\n        {currentStep === 'connect' && renderConnectStep()}\n        {currentStep === 'properties' && renderPropertiesStep()}\n        {currentStep === 'test' && renderTestStep()}\n        {currentStep === 'complete' && renderCompleteStep()}\n      </CardContent>\n    </Card>\n  );\n};\n\nexport default GoogleAnalyticsSetup; ","usedDeprecatedRules":[]},{"filePath":"/home/vonj/Github/Nexus/src/components/integrations/GoogleWorkspaceSetup.tsx","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":34,"column":29,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":34,"endColumn":32,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[891,894],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[891,894],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":42,"column":13,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":42,"endColumn":16,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1032,1035],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1032,1035],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'user' is assigned a value but never used.","line":49,"column":11,"nodeType":null,"messageId":"unusedVar","endLine":49,"endColumn":15},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":54,"column":97,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":54,"endColumn":100,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1551,1554],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1551,1554],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'isAuthenticated' is assigned a value but never used.","line":56,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":56,"endColumn":25},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'err' is defined but never used.","line":99,"column":18,"nodeType":null,"messageId":"unusedVar","endLine":99,"endColumn":21},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":115,"column":19,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":115,"endColumn":22,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3343,3346],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3343,3346],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":159,"column":19,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":159,"endColumn":22,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[4710,4713],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[4710,4713],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":175,"column":19,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":175,"endColumn":22,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[5079,5082],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[5079,5082],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":203,"column":19,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":203,"endColumn":22,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[5819,5822],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[5819,5822],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"no-restricted-syntax","severity":1,"message":"Use design tokens instead of hardcoded text colors (e.g., text-foreground, text-muted-foreground)","line":212,"column":32,"nodeType":"Literal","messageId":"restrictedSyntax","endLine":212,"endColumn":55},{"ruleId":"no-restricted-syntax","severity":1,"message":"Use design tokens instead of hardcoded text colors (e.g., text-foreground, text-muted-foreground)","line":213,"column":31,"nodeType":"Literal","messageId":"restrictedSyntax","endLine":213,"endColumn":55},{"ruleId":"no-restricted-syntax","severity":1,"message":"Use design tokens instead of hardcoded text colors (e.g., text-foreground, text-muted-foreground)","line":214,"column":27,"nodeType":"Literal","messageId":"restrictedSyntax","endLine":214,"endColumn":49},{"ruleId":"no-restricted-syntax","severity":1,"message":"Use design tokens instead of hardcoded text colors (e.g., text-foreground, text-muted-foreground)","line":215,"column":32,"nodeType":"Literal","messageId":"restrictedSyntax","endLine":215,"endColumn":57},{"ruleId":"no-restricted-syntax","severity":1,"message":"Use design tokens instead of hardcoded text colors (e.g., text-foreground, text-muted-foreground)","line":232,"column":32,"nodeType":"Literal","messageId":"restrictedSyntax","endLine":232,"endColumn":55},{"ruleId":"no-restricted-syntax","severity":1,"message":"Use design tokens instead of hardcoded text colors (e.g., text-foreground, text-muted-foreground)","line":236,"column":31,"nodeType":"Literal","messageId":"restrictedSyntax","endLine":236,"endColumn":55},{"ruleId":"no-restricted-syntax","severity":1,"message":"Use design tokens instead of hardcoded text colors (e.g., text-foreground, text-muted-foreground)","line":240,"column":27,"nodeType":"Literal","messageId":"restrictedSyntax","endLine":240,"endColumn":49},{"ruleId":"no-restricted-syntax","severity":1,"message":"Use design tokens instead of hardcoded text colors (e.g., text-foreground, text-muted-foreground)","line":244,"column":32,"nodeType":"Literal","messageId":"restrictedSyntax","endLine":244,"endColumn":57},{"ruleId":"no-restricted-syntax","severity":1,"message":"Use design tokens instead of hardcoded text colors (e.g., text-foreground, text-muted-foreground)","line":248,"column":29,"nodeType":"Literal","messageId":"restrictedSyntax","endLine":248,"endColumn":54},{"ruleId":"no-restricted-syntax","severity":1,"message":"Use design tokens instead of hardcoded text colors (e.g., text-foreground, text-muted-foreground)","line":288,"column":32,"nodeType":"Literal","messageId":"restrictedSyntax","endLine":288,"endColumn":71},{"ruleId":"no-restricted-syntax","severity":1,"message":"Use design tokens instead of hardcoded colors (e.g., bg-primary, bg-secondary)","line":304,"column":52,"nodeType":"Literal","messageId":"restrictedSyntax","endLine":304,"endColumn":81},{"ruleId":"no-restricted-syntax","severity":1,"message":"Use design tokens instead of hardcoded text colors (e.g., text-foreground, text-muted-foreground)","line":304,"column":52,"nodeType":"Literal","messageId":"restrictedSyntax","endLine":304,"endColumn":81},{"ruleId":"no-restricted-syntax","severity":1,"message":"Use design tokens instead of hardcoded colors (e.g., bg-primary, bg-secondary)","line":318,"column":22,"nodeType":"Literal","messageId":"restrictedSyntax","endLine":318,"endColumn":49},{"ruleId":"no-restricted-syntax","severity":1,"message":"Use design tokens instead of hardcoded text colors (e.g., text-foreground, text-muted-foreground)","line":319,"column":23,"nodeType":"Literal","messageId":"restrictedSyntax","endLine":319,"endColumn":55},{"ruleId":"no-restricted-syntax","severity":1,"message":"Use design tokens instead of hardcoded text colors (e.g., text-foreground, text-muted-foreground)","line":320,"column":24,"nodeType":"Literal","messageId":"restrictedSyntax","endLine":320,"endColumn":70},{"ruleId":"no-restricted-syntax","severity":1,"message":"Use design tokens instead of hardcoded text colors (e.g., text-foreground, text-muted-foreground)","line":349,"column":26,"nodeType":"Literal","messageId":"restrictedSyntax","endLine":349,"endColumn":64},{"ruleId":"no-restricted-syntax","severity":1,"message":"Use design tokens instead of hardcoded text colors (e.g., text-foreground, text-muted-foreground)","line":411,"column":32,"nodeType":"Literal","messageId":"restrictedSyntax","endLine":411,"endColumn":71},{"ruleId":"no-restricted-syntax","severity":1,"message":"Use design tokens instead of hardcoded colors (e.g., bg-primary, bg-secondary)","line":418,"column":22,"nodeType":"Literal","messageId":"restrictedSyntax","endLine":418,"endColumn":50},{"ruleId":"no-restricted-syntax","severity":1,"message":"Use design tokens instead of hardcoded text colors (e.g., text-foreground, text-muted-foreground)","line":419,"column":23,"nodeType":"Literal","messageId":"restrictedSyntax","endLine":419,"endColumn":56},{"ruleId":"no-restricted-syntax","severity":1,"message":"Use design tokens instead of hardcoded text colors (e.g., text-foreground, text-muted-foreground)","line":420,"column":23,"nodeType":"Literal","messageId":"restrictedSyntax","endLine":420,"endColumn":57},{"ruleId":"no-restricted-syntax","severity":1,"message":"Use design tokens instead of hardcoded text colors (e.g., text-foreground, text-muted-foreground)","line":459,"column":34,"nodeType":"Literal","messageId":"restrictedSyntax","endLine":459,"endColumn":57},{"ruleId":"no-restricted-syntax","severity":1,"message":"Use design tokens instead of hardcoded text colors (e.g., text-foreground, text-muted-foreground)","line":460,"column":33,"nodeType":"Literal","messageId":"restrictedSyntax","endLine":460,"endColumn":57}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":32,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\n * Google Workspace Setup Component\n * Comprehensive Google business tools integration\n * Pillar: 1,2,3 - Drive, Calendar, Gmail, and more\n */\n\nimport React, { useState, useEffect } from 'react';\nimport { Button } from '@/components/ui';\nimport { Card, CardContent, CardHeader, CardTitle } from '@/components/ui';\nimport { Alert, AlertDescription } from '@/components/ui';\nimport { Badge } from '@/components/ui';\nimport { useAuth } from '@/contexts/AuthContext';\nimport { useNotifications } from '@/contexts/NotificationContext';\nimport { googleWorkspaceService } from '@/lib/services/googleWorkspaceService';\nimport { \n  Loader2, \n  CheckCircle, \n  AlertCircle, \n  ExternalLink,\n  Calendar,\n  HardDrive,\n  Mail,\n  Users,\n  BarChart3,\n  Search,\n  Building,\n  Shield,\n  Clock,\n  FileText,\n  Video\n} from 'lucide-react';\n\ninterface GoogleWorkspaceSetupProps {\n  onComplete: (integration: any) => void;\n  onClose: () => void;\n}\n\ninterface ServiceStatus {\n  name: string;\n  icon: React.ReactNode;\n  connected: boolean;\n  metrics?: any;\n}\n\nconst GoogleWorkspaceSetup: React.FC<GoogleWorkspaceSetupProps> = ({ \n  onComplete, \n  onClose \n}) => {\n  const { user } = useAuth();\n  const { addNotification } = useNotifications();\n  const [currentStep, setCurrentStep] = useState<'connect' | 'services' | 'test' | 'complete'>('connect');\n  const [isConnecting, setIsConnecting] = useState(false);\n  const [services, setServices] = useState<ServiceStatus[]>([]);\n  const [testResults, setTestResults] = useState<{ success: boolean; message: string; details?: any } | null>(null);\n  const [error, setError] = useState<string | null>(null);\n  const [isAuthenticated, setIsAuthenticated] = useState(false);\n\n  useEffect(() => {\n    // Check if already authenticated\n    setIsAuthenticated(googleWorkspaceService.isAuthenticated());\n    \n    // If authenticated, skip to services step\n    if (googleWorkspaceService.isAuthenticated()) {\n      setCurrentStep('services');\n      loadServices();\n    }\n  }, []);\n\n  const handleOAuthConnect = async () => {\n    setIsConnecting(true);\n    setError(null);\n\n    try {\n      const authUrl = await googleWorkspaceService.initializeOAuth();\n      \n      // Open OAuth in popup\n      const popup = window.open(\n        authUrl,\n        'google-workspace-oauth',\n        'width=600,height=700,scrollbars=yes,resizable=yes'\n      );\n\n      // Listen for OAuth completion\n      const checkOAuth = setInterval(async () => {\n        try {\n          if (popup?.closed) {\n            clearInterval(checkOAuth);\n            \n            // Check if authentication succeeded\n            if (googleWorkspaceService.isAuthenticated()) {\n              setIsAuthenticated(true);\n              setCurrentStep('services');\n              await loadServices();\n            } else {\n              setError('Authentication was cancelled or failed');\n            }\n            setIsConnecting(false);\n          }\n        } catch (err) {\n          clearInterval(checkOAuth);\n          setError('Authentication failed');\n          setIsConnecting(false);\n        }\n      }, 1000);\n\n      // Fallback timeout\n      setTimeout(() => {\n        clearInterval(checkOAuth);\n        if (isConnecting) {\n          setIsConnecting(false);\n          setError('Authentication timed out');\n        }\n      }, 300000); // 5 minutes\n\n    } catch (err: any) {\n      setError(err.message || 'Failed to start authentication');\n      setIsConnecting(false);\n    }\n  };\n\n  const loadServices = async () => {\n    try {\n      const availableServices = googleWorkspaceService.getAvailableServices();\n      \n      const servicesList: ServiceStatus[] = [\n        {\n          name: 'Google Drive',\n          icon: <HardDrive className=\"w-5 h-5\" />,\n          connected: availableServices.includes('Google Drive')\n        },\n        {\n          name: 'Google Calendar',\n          icon: <Calendar className=\"w-5 h-5\" />,\n          connected: availableServices.includes('Google Calendar')\n        },\n        {\n          name: 'Gmail',\n          icon: <Mail className=\"w-5 h-5\" />,\n          connected: availableServices.includes('Gmail')\n        },\n        {\n          name: 'Google Analytics',\n          icon: <BarChart3 className=\"w-5 h-5\" />,\n          connected: availableServices.includes('Google Analytics')\n        },\n        {\n          name: 'Search Console',\n          icon: <Search className=\"w-5 h-5\" />,\n          connected: availableServices.includes('Search Console')\n        },\n        {\n          name: 'Google My Business',\n          icon: <Building className=\"w-5 h-5\" />,\n          connected: availableServices.includes('Google My Business')\n        }\n      ];\n\n      setServices(servicesList);\n    } catch (err: any) {\n      setError(err.message || 'Failed to load services');\n    }\n  };\n\n  const handleTestConnection = async () => {\n    setIsConnecting(true);\n    setError(null);\n\n    try {\n      const result = await googleWorkspaceService.testConnection();\n      setTestResults(result);\n\n      if (result.success) {\n        setCurrentStep('complete');\n      }\n    } catch (err: any) {\n      setError(err.message || 'Connection test failed');\n    } finally {\n      setIsConnecting(false);\n    }\n  };\n\n  const handleComplete = async () => {\n    try {\n      // Save integration to database\n      const integrationData = {\n        name: 'Google Workspace',\n        slug: 'google-workspace',\n        category: 'productivity',\n        provider: 'google',\n        status: 'active',\n        config: {\n          services: services.filter(s => s.connected).map(s => s.name),\n          connectedAt: new Date().toISOString()\n        }\n      };\n\n      addNotification({\n        type: 'success',\n        message: 'Google Workspace integration completed successfully!'\n      });\n\n      onComplete(integrationData);\n    } catch (err: any) {\n      setError(err.message || 'Failed to complete setup');\n    }\n  };\n\n  const renderConnectStep = () => (\n    <div className=\"space-y-6\">\n      <div className=\"text-center\">\n        <div className=\"flex justify-center items-center gap-2 mb-4\">\n          <HardDrive className=\"w-8 h-8 text-blue-600\" />\n          <Calendar className=\"w-8 h-8 text-green-600\" />\n          <Mail className=\"w-8 h-8 text-red-600\" />\n          <BarChart3 className=\"w-8 h-8 text-yellow-600\" />\n        </div>\n        <h3 className=\"text-xl font-semibold mb-2\">Connect Google Workspace</h3>\n        <p className=\"text-muted-foreground\">\n          Connect your Google business tools for comprehensive productivity insights\n        </p>\n      </div>\n\n      <Alert>\n        <Shield className=\"h-4 w-4\" />\n        <AlertDescription>\n          We'll access your Google services in read-only mode to provide business insights and automation.\n        </AlertDescription>\n      </Alert>\n\n      <div className=\"grid grid-cols-2 gap-4 text-sm\">\n        <div className=\"flex items-center gap-2\">\n          <HardDrive className=\"w-4 h-4 text-blue-600\" />\n          <span>Drive storage & files</span>\n        </div>\n        <div className=\"flex items-center gap-2\">\n          <Calendar className=\"w-4 h-4 text-green-600\" />\n          <span>Calendar & meetings</span>\n        </div>\n        <div className=\"flex items-center gap-2\">\n          <Mail className=\"w-4 h-4 text-red-600\" />\n          <span>Email analytics</span>\n        </div>\n        <div className=\"flex items-center gap-2\">\n          <BarChart3 className=\"w-4 h-4 text-yellow-600\" />\n          <span>Website analytics</span>\n        </div>\n        <div className=\"flex items-center gap-2\">\n          <Search className=\"w-4 h-4 text-purple-600\" />\n          <span>Search performance</span>\n        </div>\n        <div className=\"flex items-center gap-2\">\n          <Building className=\"w-4 h-4 text-orange-600\" />\n          <span>Business profile</span>\n        </div>\n      </div>\n\n      {error && (\n        <Alert variant=\"error\">\n          <AlertCircle className=\"h-4 w-4\" />\n          <AlertDescription>{error}</AlertDescription>\n        </Alert>\n      )}\n\n      <Button \n        onClick={handleOAuthConnect} \n        disabled={isConnecting}\n        className=\"w-full\"\n        size=\"lg\"\n      >\n        {isConnecting ? (\n          <>\n            <Loader2 className=\"w-4 h-4 mr-2 animate-spin\" />\n            Connecting...\n          </>\n        ) : (\n          <>\n            <ExternalLink className=\"w-4 h-4 mr-2\" />\n            Connect with Google\n          </>\n        )}\n      </Button>\n    </div>\n  );\n\n  const renderServicesStep = () => (\n    <div className=\"space-y-6\">\n      <div className=\"text-center\">\n        <CheckCircle className=\"w-16 h-16 text-green-500 mx-auto mb-4\" />\n        <h3 className=\"text-xl font-semibold mb-2\">Connected Services</h3>\n        <p className=\"text-muted-foreground\">\n          Your Google Workspace services are now connected\n        </p>\n      </div>\n\n      <div className=\"grid gap-3\">\n        {services.map((service) => (\n          <Card key={service.name} className=\"p-4\">\n            <div className=\"flex items-center justify-between\">\n              <div className=\"flex items-center gap-3\">\n                {service.icon}\n                <span className=\"font-medium\">{service.name}</span>\n              </div>\n              {service.connected ? (\n                <Badge variant=\"default\" className=\"bg-green-100 text-green-800\">\n                  <CheckCircle className=\"w-3 h-3 mr-1\" />\n                  Connected\n                </Badge>\n              ) : (\n                <Badge variant=\"secondary\">\n                  Not Available\n                </Badge>\n              )}\n            </div>\n          </Card>\n        ))}\n      </div>\n\n      <div className=\"bg-blue-50 p-4 rounded-lg\">\n        <h4 className=\"font-medium text-blue-900 mb-2\">Business Insights Available:</h4>\n        <div className=\"grid grid-cols-2 gap-2 text-sm text-blue-800\">\n          <div className=\"flex items-center gap-2\">\n            <Clock className=\"w-4 h-4\" />\n            <span>Meeting analytics</span>\n          </div>\n          <div className=\"flex items-center gap-2\">\n            <FileText className=\"w-4 h-4\" />\n            <span>Document collaboration</span>\n          </div>\n          <div className=\"flex items-center gap-2\">\n            <Users className=\"w-4 h-4\" />\n            <span>Team productivity</span>\n          </div>\n          <div className=\"flex items-center gap-2\">\n            <BarChart3 className=\"w-4 h-4\" />\n            <span>Storage optimization</span>\n          </div>\n        </div>\n      </div>\n\n      <Button onClick={() => setCurrentStep('test')} className=\"w-full\">\n        Test Connection\n      </Button>\n    </div>\n  );\n\n  const renderTestStep = () => (\n    <div className=\"space-y-6\">\n      <div className=\"text-center\">\n        <Video className=\"w-16 h-16 text-blue-500 mx-auto mb-4\" />\n        <h3 className=\"text-xl font-semibold mb-2\">Test Connection</h3>\n        <p className=\"text-muted-foreground\">\n          Let's verify your Google Workspace integration is working\n        </p>\n      </div>\n\n      {testResults && (\n        <Alert variant={testResults.success ? \"success\" : \"error\"}>\n          {testResults.success ? (\n            <CheckCircle className=\"h-4 w-4\" />\n          ) : (\n            <AlertCircle className=\"h-4 w-4\" />\n          )}\n          <AlertDescription>\n            {testResults.message}\n            {testResults.details && (\n              <div className=\"mt-2 text-xs\">\n                <div>User: {testResults.details.user}</div>\n                <div>Email: {testResults.details.email}</div>\n                {testResults.details.emailsTotal && (\n                  <div>Total Emails: {testResults.details.emailsTotal}</div>\n                )}\n              </div>\n            )}\n          </AlertDescription>\n        </Alert>\n      )}\n\n      {error && (\n        <Alert variant=\"error\">\n          <AlertCircle className=\"h-4 w-4\" />\n          <AlertDescription>{error}</AlertDescription>\n        </Alert>\n      )}\n\n      <Button \n        onClick={handleTestConnection} \n        disabled={isConnecting}\n        className=\"w-full\"\n      >\n        {isConnecting ? (\n          <>\n            <Loader2 className=\"w-4 h-4 mr-2 animate-spin\" />\n            Testing...\n          </>\n        ) : (\n          'Test Connection'\n        )}\n      </Button>\n\n      {testResults?.success && (\n        <Button onClick={() => setCurrentStep('complete')} variant=\"outline\" className=\"w-full\">\n          Continue to Complete\n        </Button>\n      )}\n    </div>\n  );\n\n  const renderCompleteStep = () => (\n    <div className=\"space-y-6\">\n      <div className=\"text-center\">\n        <CheckCircle className=\"w-16 h-16 text-green-500 mx-auto mb-4\" />\n        <h3 className=\"text-xl font-semibold mb-2\">Integration Complete!</h3>\n        <p className=\"text-muted-foreground\">\n          Your Google Workspace is now connected and providing business insights\n        </p>\n      </div>\n\n      <div className=\"bg-green-50 p-4 rounded-lg\">\n        <h4 className=\"font-medium text-green-900 mb-2\">What's Next:</h4>\n        <ul className=\"text-sm text-green-800 space-y-1\">\n          <li>• Drive storage and collaboration metrics are being collected</li>\n          <li>• Calendar meetings and productivity insights are available</li>\n          <li>• Email analytics will appear in your dashboard</li>\n          <li>• Business health KPIs will update automatically</li>\n        </ul>\n      </div>\n\n      <div className=\"grid grid-cols-2 gap-4\">\n        <Button onClick={onClose} variant=\"outline\">\n          Close\n        </Button>\n        <Button onClick={handleComplete}>\n          Complete Setup\n        </Button>\n      </div>\n    </div>\n  );\n\n  const getStepContent = () => {\n    switch (currentStep) {\n      case 'connect':\n        return renderConnectStep();\n      case 'services':\n        return renderServicesStep();\n      case 'test':\n        return renderTestStep();\n      case 'complete':\n        return renderCompleteStep();\n      default:\n        return renderConnectStep();\n    }\n  };\n\n  return (\n    <Card className=\"w-full max-w-2xl mx-auto\">\n      <CardHeader>\n        <CardTitle className=\"flex items-center gap-2\">\n          <div className=\"flex gap-1\">\n            <HardDrive className=\"w-5 h-5 text-blue-600\" />\n            <Calendar className=\"w-5 h-5 text-green-600\" />\n          </div>\n          Google Workspace Integration\n        </CardTitle>\n        \n        {/* Progress indicator */}\n        <div className=\"flex gap-2 mt-4\">\n          {['connect', 'services', 'test', 'complete'].map((step, index) => (\n            <div\n              key={step}\n              className={`h-2 flex-1 rounded ${\n                ['connect', 'services', 'test', 'complete'].indexOf(currentStep) >= index\n                  ? 'bg-primary'\n                  : 'bg-muted'\n              }`}\n            />\n          ))}\n        </div>\n      </CardHeader>\n      \n      <CardContent>\n        {getStepContent()}\n      </CardContent>\n    </Card>\n  );\n};\n\nexport default GoogleWorkspaceSetup; ","usedDeprecatedRules":[]},{"filePath":"/home/vonj/Github/Nexus/src/components/integrations/HubSpotSetup.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'DollarSign' is defined but never used.","line":10,"column":66,"nodeType":null,"messageId":"unusedVar","endLine":10,"endColumn":76},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":24,"column":60,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":24,"endColumn":63,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1009,1012],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1009,1012],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":25,"column":42,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":25,"endColumn":45,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1062,1065],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1062,1065],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":78,"column":21,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":78,"endColumn":24,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2778,2781],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2778,2781],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":109,"column":21,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":109,"endColumn":24,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3692,3695],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3692,3695],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":169,"column":21,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":169,"endColumn":24,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[5467,5470],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[5467,5470],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"no-restricted-syntax","severity":1,"message":"Use design tokens instead of hardcoded colors (e.g., bg-primary, bg-secondary)","line":209,"column":28,"nodeType":"Literal","messageId":"restrictedSyntax","endLine":209,"endColumn":55},{"ruleId":"no-restricted-syntax","severity":1,"message":"Use design tokens instead of hardcoded text colors (e.g., text-foreground, text-muted-foreground)","line":210,"column":29,"nodeType":"Literal","messageId":"restrictedSyntax","endLine":210,"endColumn":61},{"ruleId":"no-restricted-syntax","severity":1,"message":"Use design tokens instead of hardcoded text colors (e.g., text-foreground, text-muted-foreground)","line":211,"column":28,"nodeType":"Literal","messageId":"restrictedSyntax","endLine":211,"endColumn":51},{"ruleId":"no-restricted-syntax","severity":1,"message":"Use design tokens instead of hardcoded colors (e.g., bg-primary, bg-secondary)","line":246,"column":30,"nodeType":"Literal","messageId":"restrictedSyntax","endLine":246,"endColumn":107},{"ruleId":"no-restricted-syntax","severity":1,"message":"Use design tokens instead of hardcoded text colors (e.g., text-foreground, text-muted-foreground)","line":247,"column":40,"nodeType":"Literal","messageId":"restrictedSyntax","endLine":247,"endColumn":63},{"ruleId":"no-restricted-syntax","severity":1,"message":"Use design tokens instead of hardcoded colors (e.g., bg-primary, bg-secondary)","line":258,"column":76,"nodeType":"Literal","messageId":"restrictedSyntax","endLine":258,"endColumn":89},{"ruleId":"no-restricted-syntax","severity":1,"message":"Use design tokens instead of hardcoded colors (e.g., bg-primary, bg-secondary)","line":258,"column":92,"nodeType":"Literal","messageId":"restrictedSyntax","endLine":258,"endColumn":103},{"ruleId":"no-restricted-syntax","severity":1,"message":"Use design tokens instead of hardcoded text colors (e.g., text-foreground, text-muted-foreground)","line":261,"column":44,"nodeType":"Literal","messageId":"restrictedSyntax","endLine":261,"endColumn":68},{"ruleId":"no-restricted-syntax","severity":1,"message":"Use design tokens instead of hardcoded text colors (e.g., text-foreground, text-muted-foreground)","line":263,"column":44,"nodeType":"Literal","messageId":"restrictedSyntax","endLine":263,"endColumn":66},{"ruleId":"no-restricted-syntax","severity":1,"message":"Use design tokens instead of hardcoded text colors (e.g., text-foreground, text-muted-foreground)","line":265,"column":78,"nodeType":"Literal","messageId":"restrictedSyntax","endLine":265,"endColumn":94},{"ruleId":"no-restricted-syntax","severity":1,"message":"Use design tokens instead of hardcoded text colors (e.g., text-foreground, text-muted-foreground)","line":265,"column":97,"nodeType":"Literal","messageId":"restrictedSyntax","endLine":265,"endColumn":111},{"ruleId":"no-restricted-syntax","severity":1,"message":"Use design tokens instead of hardcoded text colors (e.g., text-foreground, text-muted-foreground)","line":269,"column":74,"nodeType":"Literal","messageId":"restrictedSyntax","endLine":269,"endColumn":90},{"ruleId":"no-restricted-syntax","severity":1,"message":"Use design tokens instead of hardcoded text colors (e.g., text-foreground, text-muted-foreground)","line":269,"column":93,"nodeType":"Literal","messageId":"restrictedSyntax","endLine":269,"endColumn":107},{"ruleId":"no-restricted-syntax","severity":1,"message":"Use design tokens instead of hardcoded colors (e.g., bg-primary, bg-secondary)","line":301,"column":30,"nodeType":"Literal","messageId":"restrictedSyntax","endLine":301,"endColumn":108},{"ruleId":"no-restricted-syntax","severity":1,"message":"Use design tokens instead of hardcoded text colors (e.g., text-foreground, text-muted-foreground)","line":302,"column":39,"nodeType":"Literal","messageId":"restrictedSyntax","endLine":302,"endColumn":63},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":314,"column":51,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":314,"endColumn":54,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[11263,11266],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[11263,11266],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"no-restricted-syntax","severity":1,"message":"Use design tokens instead of hardcoded colors (e.g., bg-primary, bg-secondary)","line":322,"column":49,"nodeType":"Literal","messageId":"restrictedSyntax","endLine":322,"endColumn":63},{"ruleId":"no-restricted-syntax","severity":1,"message":"Use design tokens instead of hardcoded colors (e.g., bg-primary, bg-secondary)","line":323,"column":51,"nodeType":"Literal","messageId":"restrictedSyntax","endLine":323,"endColumn":63},{"ruleId":"no-restricted-syntax","severity":1,"message":"Use design tokens instead of hardcoded colors (e.g., bg-primary, bg-secondary)","line":323,"column":66,"nodeType":"Literal","messageId":"restrictedSyntax","endLine":323,"endColumn":79},{"ruleId":"no-restricted-syntax","severity":1,"message":"Use design tokens instead of hardcoded colors (e.g., bg-primary, bg-secondary)","line":343,"column":28,"nodeType":"Literal","messageId":"restrictedSyntax","endLine":343,"endColumn":56},{"ruleId":"no-restricted-syntax","severity":1,"message":"Use design tokens instead of hardcoded text colors (e.g., text-foreground, text-muted-foreground)","line":344,"column":29,"nodeType":"Literal","messageId":"restrictedSyntax","endLine":344,"endColumn":62},{"ruleId":"no-restricted-syntax","severity":1,"message":"Use design tokens instead of hardcoded text colors (e.g., text-foreground, text-muted-foreground)","line":345,"column":29,"nodeType":"Literal","messageId":"restrictedSyntax","endLine":345,"endColumn":63},{"ruleId":"no-restricted-syntax","severity":1,"message":"Use design tokens instead of hardcoded colors (e.g., bg-primary, bg-secondary)","line":379,"column":28,"nodeType":"Literal","messageId":"restrictedSyntax","endLine":379,"endColumn":106},{"ruleId":"no-restricted-syntax","severity":1,"message":"Use design tokens instead of hardcoded text colors (e.g., text-foreground, text-muted-foreground)","line":380,"column":38,"nodeType":"Literal","messageId":"restrictedSyntax","endLine":380,"endColumn":62},{"ruleId":"no-restricted-syntax","severity":1,"message":"Use design tokens instead of hardcoded text colors (e.g., text-foreground, text-muted-foreground)","line":383,"column":29,"nodeType":"Literal","messageId":"restrictedSyntax","endLine":383,"endColumn":67},{"ruleId":"no-restricted-syntax","severity":1,"message":"Use design tokens instead of hardcoded text colors (e.g., text-foreground, text-muted-foreground)","line":388,"column":28,"nodeType":"Literal","messageId":"restrictedSyntax","endLine":388,"endColumn":91},{"ruleId":"no-restricted-syntax","severity":1,"message":"Use design tokens instead of hardcoded colors (e.g., bg-primary, bg-secondary)","line":437,"column":26,"nodeType":"Literal","messageId":"restrictedSyntax","endLine":437,"endColumn":79},{"ruleId":"no-restricted-syntax","severity":1,"message":"Use design tokens instead of hardcoded text colors (e.g., text-foreground, text-muted-foreground)","line":438,"column":28,"nodeType":"Literal","messageId":"restrictedSyntax","endLine":438,"endColumn":66},{"ruleId":"no-restricted-syntax","severity":1,"message":"Use design tokens instead of hardcoded text colors (e.g., text-foreground, text-muted-foreground)","line":442,"column":26,"nodeType":"Literal","messageId":"restrictedSyntax","endLine":442,"endColumn":53}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":35,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\n * HubSpot Integration Setup Component\n * Pillar: 1,2 - CRM integration for sales and marketing automation\n */\n\nimport React, { useState } from 'react';\nimport { Button } from '../ui/Button';\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from '../ui/Card';\nimport { Badge } from '../ui/Badge';\nimport { CheckCircle, ExternalLink, Loader2, AlertCircle, Users, DollarSign, TrendingUp, Mail } from 'lucide-react';\nimport { hubspotService } from '../../lib/services/hubspotService';\nimport { supabase } from '../../lib/core/supabase';\nimport { useNotifications } from '../../contexts/NotificationContext';\n\ninterface HubSpotSetupProps {\n  onComplete: () => void;\n  onCancel: () => void;\n}\n\nexport function HubSpotSetup({ onComplete, onCancel }: HubSpotSetupProps) {\n  const [currentStep, setCurrentStep] = useState(1);\n  const [loading, setLoading] = useState(false);\n  const [error, setError] = useState<string | null>(null);\n  const [connectionResult, setConnectionResult] = useState<any>(null);\n  const [metrics, setMetrics] = useState<any>(null);\n  const { addNotification } = useNotifications();\n\n  const steps = [\n    { id: 1, title: 'Connect to HubSpot', description: 'Authorize access to your HubSpot CRM' },\n    { id: 2, title: 'Test Connection', description: 'Verify data access and permissions' },\n    { id: 3, title: 'Review Capabilities', description: 'See what data will be synced' },\n    { id: 4, title: 'Complete Setup', description: 'Finalize HubSpot integration' }\n  ];\n\n  const initiateOAuth = async () => {\n    setLoading(true);\n    setError(null);\n\n    try {\n      // Use the existing HubSpot app credentials from environment\n      const clientId = import.meta.env.VITE_HUBSPOT_CLIENT_ID;\n      if (!clientId) {\n        throw new Error('HubSpot client ID not configured');\n      }\n\n      // Configure OAuth settings\n      const redirectUri = `${window.location.origin}/integrations/hubspot/callback`;\n      \n      const scopes = [\n        'crm.objects.contacts.read',\n        'crm.objects.contacts.write',\n        'crm.objects.companies.read',\n        'crm.objects.companies.write',\n        'crm.objects.deals.read',\n        'crm.objects.deals.write',\n        'crm.lists.read',\n        'crm.lists.write'\n      ];\n      \n      const state = btoa(JSON.stringify({ \n        timestamp: Date.now(),\n        service: 'hubspot'\n      }));\n      \n      const params = new URLSearchParams({\n        client_id: clientId,\n        redirect_uri: redirectUri,\n        scope: scopes.join(' '),\n        response_type: 'code',\n        state\n      });\n      \n      const authUrl = `https://app.hubspot.com/oauth/authorize?${params.toString()}`;\n      \n      // Redirect to HubSpot OAuth\n      window.location.href = authUrl;\n      \n    } catch (error: any) {\n      console.error('OAuth initiation failed:', error);\n      setError(error.message || 'Failed to initiate HubSpot connection');\n      setLoading(false);\n    }\n  };\n\n  const testConnection = async () => {\n    setLoading(true);\n    setError(null);\n\n    try {\n      // Initialize and test the connection\n      await hubspotService.initialize();\n      const result = await hubspotService.testConnection();\n      setConnectionResult(result);\n\n      if (result.success) {\n        // Get sample metrics\n        try {\n          const metricsData = await hubspotService.getKeyMetrics();\n          setMetrics(metricsData);\n        } catch (metricsError) {\n          // Non-critical error - connection works but metrics failed\n          console.warn('Failed to fetch metrics:', metricsError);\n        }\n        \n        setCurrentStep(3);\n      } else {\n        setError(result.message);\n      }\n    } catch (error: any) {\n      console.error('Connection test failed:', error);\n      setError(error.message || 'Failed to test HubSpot connection');\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const completeSetup = async () => {\n    setLoading(true);\n    setError(null);\n\n    try {\n      // Store integration in database\n      const { error: dbError } = await supabase\n        .from('user_integrations')\n        .upsert({\n          integration_slug: 'hubspot',\n          status: 'active',\n          credentials: {\n            client_id: import.meta.env.VITE_HUBSPOT_CLIENT_ID\n            // OAuth tokens will be stored by the callback handler\n          },\n          config: {\n            redirect_uri: `${window.location.origin}/integrations/hubspot/callback`,\n            features_enabled: ['contacts', 'deals', 'companies', 'marketing', 'analytics']\n          },\n          metadata: {\n            setup_completed_at: new Date().toISOString(),\n            capabilities: [\n              'CRM Data Sync',\n              'Sales Pipeline Tracking',\n              'Marketing Analytics',\n              'Lead Management',\n              'Contact Management',\n              'Deal Tracking',\n              'Revenue Analytics'\n            ]\n          }\n        }, {\n          onConflict: 'integration_slug'\n        });\n\n      if (dbError) throw dbError;\n\n      // Update business health KPIs\n      try {\n        await hubspotService.updateBusinessHealthKPIs();\n      } catch (kpiError) {\n        console.warn('Failed to update KPIs:', kpiError);\n      }\n\n      addNotification({\n        type: 'success',\n        message: 'HubSpot integration completed! CRM data and sales analytics are now active.'\n      });\n\n      setCurrentStep(4);\n      setTimeout(onComplete, 1500);\n\n    } catch (error: any) {\n      console.error('Setup completion failed:', error);\n      setError(error.message || 'Failed to complete HubSpot setup');\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const renderStepContent = () => {\n    switch (currentStep) {\n      case 1:\n        return (\n          <div className=\"space-y-6\">\n            <div className=\"text-center space-y-4\">\n              <div className=\"w-16 h-16 mx-auto bg-orange-100 rounded-full flex items-center justify-center\">\n                <Users className=\"w-8 h-8 text-orange-600\" />\n              </div>\n              <div>\n                <h3 className=\"text-lg font-semibold\">Connect to HubSpot CRM</h3>\n                <p className=\"text-muted-foreground\">\n                  Authorize Nexus to access your HubSpot data for automated CRM insights\n                </p>\n              </div>\n            </div>\n\n            <div className=\"bg-muted/50 p-4 rounded-lg space-y-3\">\n              <h4 className=\"font-medium flex items-center gap-2\">\n                <ExternalLink className=\"w-4 h-4\" />\n                What you'll get:\n              </h4>\n              <ul className=\"text-sm space-y-1 ml-4 list-disc\">\n                <li><strong>Contact Management:</strong> Sync and analyze contact data</li>\n                <li><strong>Deal Pipeline:</strong> Track sales opportunities and revenue</li>\n                <li><strong>Marketing Analytics:</strong> Monitor campaign performance</li>\n                <li><strong>Lead Scoring:</strong> Automated lead qualification</li>\n                <li><strong>Revenue Insights:</strong> Sales forecasting and reporting</li>\n                <li><strong>Business Health KPIs:</strong> Automated CRM metrics</li>\n              </ul>\n            </div>\n\n            <div className=\"bg-blue-50 p-4 rounded-lg\">\n              <h4 className=\"font-medium text-blue-900 mb-2\">🔐 Security & Privacy</h4>\n              <p className=\"text-sm text-blue-800\">\n                Your HubSpot data is encrypted and only used to provide business insights. \n                We follow industry-standard security practices and never share your data.\n              </p>\n            </div>\n\n            <div className=\"flex gap-3\">\n              <Button \n                onClick={initiateOAuth} \n                disabled={loading}\n                className=\"flex-1\"\n              >\n                {loading ? (\n                  <>\n                    <Loader2 className=\"w-4 h-4 mr-2 animate-spin\" />\n                    Connecting...\n                  </>\n                ) : (\n                  <>\n                    <ExternalLink className=\"w-4 h-4 mr-2\" />\n                    Connect HubSpot\n                  </>\n                )}\n              </Button>\n              <Button variant=\"outline\" onClick={onCancel}>\n                Cancel\n              </Button>\n            </div>\n          </div>\n        );\n\n      case 2:\n        return (\n          <div className=\"space-y-6\">\n            <div className=\"text-center space-y-4\">\n              <div className=\"w-16 h-16 mx-auto bg-blue-100 rounded-full flex items-center justify-center\">\n                <CheckCircle className=\"w-8 h-8 text-blue-600\" />\n              </div>\n              <div>\n                <h3 className=\"text-lg font-semibold\">Test HubSpot Connection</h3>\n                <p className=\"text-muted-foreground\">\n                  Verify that we can access your CRM data successfully\n                </p>\n              </div>\n            </div>\n\n            {connectionResult && (\n              <div className={`p-4 rounded-lg ${connectionResult.success ? 'bg-green-50' : 'bg-red-50'}`}>\n                <div className=\"flex items-center gap-2\">\n                  {connectionResult.success ? (\n                    <CheckCircle className=\"w-5 h-5 text-green-600\" />\n                  ) : (\n                    <AlertCircle className=\"w-5 h-5 text-red-600\" />\n                  )}\n                  <span className={`font-medium ${connectionResult.success ? 'text-green-900' : 'text-red-900'}`}>\n                    {connectionResult.success ? 'Connection Successful!' : 'Connection Failed'}\n                  </span>\n                </div>\n                <p className={`text-sm mt-1 ${connectionResult.success ? 'text-green-800' : 'text-red-800'}`}>\n                  {connectionResult.message}\n                </p>\n              </div>\n            )}\n\n            <div className=\"flex gap-3\">\n              <Button \n                onClick={testConnection} \n                disabled={loading}\n                className=\"flex-1\"\n              >\n                {loading ? (\n                  <>\n                    <Loader2 className=\"w-4 h-4 mr-2 animate-spin\" />\n                    Testing...\n                  </>\n                ) : (\n                  'Test Connection'\n                )}\n              </Button>\n              <Button variant=\"outline\" onClick={onCancel}>\n                Cancel\n              </Button>\n            </div>\n          </div>\n        );\n\n      case 3:\n        return (\n          <div className=\"space-y-6\">\n            <div className=\"text-center space-y-4\">\n              <div className=\"w-16 h-16 mx-auto bg-green-100 rounded-full flex items-center justify-center\">\n                <TrendingUp className=\"w-8 h-8 text-green-600\" />\n              </div>\n              <div>\n                <h3 className=\"text-lg font-semibold\">HubSpot Integration Ready</h3>\n                <p className=\"text-muted-foreground\">\n                  Review the capabilities and data that will be synced\n                </p>\n              </div>\n            </div>\n\n            {metrics && metrics.length > 0 && (\n              <div className=\"grid grid-cols-2 gap-4\">\n                {metrics.slice(0, 4).map((metric: any, index: number) => (\n                  <Card key={index} className=\"p-3\">\n                    <div className=\"flex items-center justify-between\">\n                      <div>\n                        <p className=\"text-sm text-muted-foreground\">{metric.name}</p>\n                        <p className=\"text-lg font-semibold\">{metric.value}</p>\n                      </div>\n                      <div className={`w-2 h-2 rounded-full ${\n                        metric.trend === 'up' ? 'bg-green-500' : \n                        metric.trend === 'down' ? 'bg-red-500' : 'bg-gray-400'\n                      }`} />\n                    </div>\n                  </Card>\n                ))}\n              </div>\n            )}\n\n            <div className=\"space-y-3\">\n              <h4 className=\"font-medium\">📊 Business Health KPIs Updated:</h4>\n              <div className=\"grid grid-cols-2 gap-2 text-sm\">\n                <Badge variant=\"secondary\">Customer Acquisition Cost</Badge>\n                <Badge variant=\"secondary\">Conversion Rate</Badge>\n                <Badge variant=\"secondary\">Customer Lifetime Value</Badge>\n                <Badge variant=\"secondary\">Monthly Recurring Revenue</Badge>\n                <Badge variant=\"secondary\">Sales Cycle Length</Badge>\n                <Badge variant=\"secondary\">Lead Velocity</Badge>\n              </div>\n            </div>\n\n            <div className=\"bg-green-50 p-4 rounded-lg\">\n              <h4 className=\"font-medium text-green-900 mb-2\">✅ Integration Benefits</h4>\n              <ul className=\"text-sm text-green-800 space-y-1\">\n                <li>• Automated CRM data synchronization</li>\n                <li>• Real-time sales pipeline tracking</li>\n                <li>• Marketing campaign performance insights</li>\n                <li>• Customer lifecycle analytics</li>\n                <li>• Revenue forecasting and reporting</li>\n              </ul>\n            </div>\n\n            <div className=\"flex gap-3\">\n              <Button \n                onClick={completeSetup} \n                disabled={loading}\n                className=\"flex-1\"\n              >\n                {loading ? (\n                  <>\n                    <Loader2 className=\"w-4 h-4 mr-2 animate-spin\" />\n                    Finalizing...\n                  </>\n                ) : (\n                  'Complete Setup'\n                )}\n              </Button>\n              <Button variant=\"outline\" onClick={() => setCurrentStep(2)}>\n                Back\n              </Button>\n            </div>\n          </div>\n        );\n\n      case 4:\n        return (\n          <div className=\"text-center space-y-6\">\n            <div className=\"w-16 h-16 mx-auto bg-green-100 rounded-full flex items-center justify-center\">\n              <CheckCircle className=\"w-8 h-8 text-green-600\" />\n            </div>\n            <div>\n              <h3 className=\"text-lg font-semibold text-green-900\">HubSpot Integration Complete!</h3>\n              <p className=\"text-muted-foreground\">\n                Your CRM data is now being synced and analyzed automatically\n              </p>\n            </div>\n            <div className=\"flex items-center justify-center gap-2 text-sm text-green-700\">\n              <Mail className=\"w-4 h-4\" />\n              <span>Business health metrics will update every hour</span>\n            </div>\n          </div>\n        );\n\n      default:\n        return null;\n    }\n  };\n\n  return (\n    <Card className=\"w-full max-w-2xl mx-auto\">\n      <CardHeader>\n        <CardTitle className=\"flex items-center gap-2\">\n          <Users className=\"w-5 h-5 text-orange-600\" />\n          HubSpot CRM Integration\n        </CardTitle>\n        <CardDescription>\n          Connect your HubSpot CRM for automated sales and marketing analytics\n        </CardDescription>\n      </CardHeader>\n      <CardContent>\n        {/* Progress Steps */}\n        <div className=\"flex items-center justify-between mb-8\">\n          {steps.map((step, index) => (\n            <div key={step.id} className=\"flex items-center\">\n              <div className={`\n                w-8 h-8 rounded-full flex items-center justify-center text-sm font-medium\n                ${currentStep >= step.id \n                  ? 'bg-primary text-primary-foreground' \n                  : 'bg-muted text-muted-foreground'\n                }\n              `}>\n                {currentStep > step.id ? <CheckCircle className=\"w-4 h-4\" /> : step.id}\n              </div>\n              {index < steps.length - 1 && (\n                <div className={`\n                  w-12 h-0.5 mx-2\n                  ${currentStep > step.id ? 'bg-primary' : 'bg-muted'}\n                `} />\n              )}\n            </div>\n          ))}\n        </div>\n\n        {/* Error Display */}\n        {error && (\n          <div className=\"bg-red-50 border border-red-200 rounded-lg p-4 mb-6\">\n            <div className=\"flex items-center gap-2 text-red-800\">\n              <AlertCircle className=\"w-4 h-4\" />\n              <span className=\"font-medium\">Setup Error</span>\n            </div>\n            <p className=\"text-sm text-red-700 mt-1\">{error}</p>\n          </div>\n        )}\n\n        {/* Step Content */}\n        {renderStepContent()}\n      </CardContent>\n    </Card>\n  );\n} ","usedDeprecatedRules":[]},{"filePath":"/home/vonj/Github/Nexus/src/components/integrations/IntegrationDataDashboard.tsx","messages":[{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has a missing dependency: 'fetchIntegrationData'. Either include it or remove the dependency array.","line":72,"column":6,"nodeType":"ArrayExpression","endLine":72,"endColumn":35,"suggestions":[{"desc":"Update the dependencies array to be: [user?.id, selectedTimeframe, fetchIntegrationData]","fix":{"range":[1911,1940],"text":"[user?.id, selectedTimeframe, fetchIntegrationData]"}}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":98,"column":82,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":98,"endColumn":85,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2649,2652],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2649,2652],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":165,"column":46,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":165,"endColumn":49,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[4894,4897],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[4894,4897],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"no-restricted-syntax","severity":1,"message":"Use design tokens instead of hardcoded text colors (e.g., text-foreground, text-muted-foreground)","line":280,"column":57,"nodeType":"Literal","messageId":"restrictedSyntax","endLine":280,"endColumn":80},{"ruleId":"no-restricted-syntax","severity":1,"message":"Use design tokens instead of hardcoded text colors (e.g., text-foreground, text-muted-foreground)","line":282,"column":49,"nodeType":"Literal","messageId":"restrictedSyntax","endLine":282,"endColumn":74},{"ruleId":"no-restricted-syntax","severity":1,"message":"Use design tokens instead of hardcoded text colors (e.g., text-foreground, text-muted-foreground)","line":408,"column":39,"nodeType":"Literal","messageId":"restrictedSyntax","endLine":408,"endColumn":64}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState, useEffect } from 'react';\nimport { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/Card';\nimport { Badge } from '@/components/ui/Badge';\nimport { Button } from '@/components/ui/Button';\nimport { Progress } from '@/components/ui/Progress';\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from '@/components/ui/Tabs';\nimport { useAuth } from '@/contexts/AuthContext';\nimport { supabase } from '../../lib/core/supabase';\nimport {\n  Database,\n  RefreshCw,\n  TrendingUp,\n  Activity,\n  AlertCircle,\n  CheckCircle2,\n  Clock,\n  Download,\n  BarChart3,\n  Users,\n  DollarSign,\n  Mail,\n  Settings,\n  ExternalLink\n} from 'lucide-react';\n\ninterface IntegrationData {\n  id: string;\n  name: string;\n  slug: string;\n  status: 'active' | 'syncing' | 'error' | 'paused';\n  lastSync: string;\n  dataPoints: {\n    total: number;\n    thisWeek: number;\n    thisMonth: number;\n  };\n  syncProgress: number;\n  metrics: {\n    label: string;\n    value: string | number;\n    change?: string;\n    trend?: 'up' | 'down' | 'stable';\n  }[];\n  nextSync: string;\n  errors?: string[];\n}\n\ninterface IntegrationInsight {\n  id: string;\n  integrationId: string;\n  title: string;\n  description: string;\n  type: 'optimization' | 'alert' | 'trend' | 'opportunity';\n  impact: 'high' | 'medium' | 'low';\n  actionable: boolean;\n  createdAt: string;\n}\n\nconst IntegrationDataDashboard: React.FC = () => {\n  const { user } = useAuth();\n  const [integrationData, setIntegrationData] = useState<IntegrationData[]>([]);\n  const [insights, setInsights] = useState<IntegrationInsight[]>([]);\n  const [isLoading, setIsLoading] = useState(true);\n  const [selectedTimeframe, setSelectedTimeframe] = useState<'week' | 'month' | 'quarter'>('month');\n  const [refreshing, setRefreshing] = useState<string | null>(null);\n\n  useEffect(() => {\n    if (user?.id) {\n      fetchIntegrationData();\n      fetchInsights();\n    }\n  }, [user?.id, selectedTimeframe]);\n\n  const fetchIntegrationData = async () => {\n    try {\n      setIsLoading(true);\n      \n      // Fetch user's connected integrations\n      const { data: userIntegrations, error } = await supabase\n        .from('user_integrations')\n        .select(`\n          id,\n          status,\n          updated_at,\n          config,\n          integrations!inner(\n            id,\n            name,\n            slug\n          )\n        `)\n        .eq('user_id', user!.id)\n        .eq('status', 'active');\n\n      if (error) throw error;\n\n      // Mock data enhancement - in real implementation, this would come from actual data collection\n      const enhancedData: IntegrationData[] = userIntegrations.map((integration: any) => {\n        const mockMetrics = generateMockMetrics(integration.integrations.slug);\n        \n        return {\n          id: integration.id,\n          name: integration.integrations.name,\n          slug: integration.integrations.slug,\n          status: getIntegrationStatus(integration),\n          lastSync: integration.updated_at,\n          dataPoints: {\n            total: mockMetrics.totalRecords,\n            thisWeek: mockMetrics.weeklyRecords,\n            thisMonth: mockMetrics.monthlyRecords\n          },\n          syncProgress: mockMetrics.syncProgress,\n          metrics: mockMetrics.metrics,\n          nextSync: mockMetrics.nextSync,\n          errors: mockMetrics.errors\n        };\n      });\n\n      setIntegrationData(enhancedData);\n    } catch (error) {\n      console.error('Error fetching integration data:', error);\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  const fetchInsights = async () => {\n    // Mock insights - in real implementation, these would be AI-generated\n    const mockInsights: IntegrationInsight[] = [\n      {\n        id: '1',\n        integrationId: 'paypal',\n        title: 'Revenue Growth Opportunity',\n        description: 'PayPal data shows 23% increase in transaction volume this month. Consider increasing inventory for top-selling products.',\n        type: 'opportunity',\n        impact: 'high',\n        actionable: true,\n        createdAt: new Date().toISOString()\n      },\n      {\n        id: '2',\n        integrationId: 'office-365',\n        title: 'Email Response Time Optimization',\n        description: 'Microsoft 365 data indicates average email response time has increased by 40%. Consider setting up auto-responders.',\n        type: 'optimization',\n        impact: 'medium',\n        actionable: true,\n        createdAt: new Date().toISOString()\n      },\n      {\n        id: '3',\n        integrationId: 'ninjarmm',\n        title: 'System Health Alert',\n        description: 'NinjaRMM reports 3 devices with critical updates pending. Immediate action recommended.',\n        type: 'alert',\n        impact: 'high',\n        actionable: true,\n        createdAt: new Date().toISOString()\n      }\n    ];\n\n    setInsights(mockInsights);\n  };\n\n  const getIntegrationStatus = (integration: any): 'active' | 'syncing' | 'error' | 'paused' => {\n    // Logic to determine status based on integration config and last sync\n    const lastSync = new Date(integration.updated_at);\n    const now = new Date();\n    const hoursSinceSync = (now.getTime() - lastSync.getTime()) / (1000 * 60 * 60);\n    \n    if (hoursSinceSync > 24) return 'error';\n    if (hoursSinceSync > 1) return 'paused';\n    return 'active';\n  };\n\n  const generateMockMetrics = (slug: string) => {\n    const baseMetrics = {\n      paypal: {\n        totalRecords: 1247,\n        weeklyRecords: 89,\n        monthlyRecords: 356,\n        syncProgress: 100,\n        nextSync: new Date(Date.now() + 2 * 60 * 60 * 1000).toISOString(),\n        metrics: [\n          { label: 'Transactions', value: 356, change: '+12%', trend: 'up' as const },\n          { label: 'Revenue', value: '$45,892', change: '+23%', trend: 'up' as const },\n          { label: 'Avg Transaction', value: '$128.90', change: '+8%', trend: 'up' as const }\n        ],\n        errors: []\n      },\n      'office-365': {\n        totalRecords: 2891,\n        weeklyRecords: 234,\n        monthlyRecords: 892,\n        syncProgress: 85,\n        nextSync: new Date(Date.now() + 30 * 60 * 1000).toISOString(),\n        metrics: [\n          { label: 'Emails', value: 892, change: '+5%', trend: 'up' as const },\n          { label: 'Meetings', value: 67, change: '+15%', trend: 'up' as const },\n          { label: 'Response Time', value: '2.3h', change: '+40%', trend: 'down' as const }\n        ],\n        errors: []\n      },\n      ninjarmm: {\n        totalRecords: 156,\n        weeklyRecords: 45,\n        monthlyRecords: 156,\n        syncProgress: 100,\n        nextSync: new Date(Date.now() + 15 * 60 * 1000).toISOString(),\n        metrics: [\n          { label: 'Devices', value: 23, change: '+2', trend: 'up' as const },\n          { label: 'Alerts', value: 3, change: 'Critical', trend: 'down' as const },\n          { label: 'Uptime', value: '99.2%', change: '+0.3%', trend: 'up' as const }\n        ],\n        errors: ['3 devices need critical updates']\n      }\n    };\n\n    return baseMetrics[slug as keyof typeof baseMetrics] || {\n      totalRecords: Math.floor(Math.random() * 1000),\n      weeklyRecords: Math.floor(Math.random() * 100),\n      monthlyRecords: Math.floor(Math.random() * 400),\n      syncProgress: Math.floor(Math.random() * 100),\n      nextSync: new Date(Date.now() + Math.random() * 2 * 60 * 60 * 1000).toISOString(),\n      metrics: [\n        { label: 'Data Points', value: Math.floor(Math.random() * 1000), change: `+${Math.floor(Math.random() * 20)}%`, trend: 'up' as const }\n      ],\n      errors: []\n    };\n  };\n\n  const handleRefreshIntegration = async (integrationId: string) => {\n    setRefreshing(integrationId);\n    // Simulate refresh\n    setTimeout(() => {\n      setRefreshing(null);\n      fetchIntegrationData();\n    }, 2000);\n  };\n\n  const getStatusIcon = (status: string) => {\n    switch (status) {\n      case 'active':\n        return <CheckCircle2 className=\"w-4 h-4 text-success\" />;\n      case 'syncing':\n        return <RefreshCw className=\"w-4 h-4 text-primary animate-spin\" />;\n      case 'error':\n        return <AlertCircle className=\"w-4 h-4 text-destructive\" />;\n      case 'paused':\n        return <Clock className=\"w-4 h-4 text-warning\" />;\n      default:\n        return <Activity className=\"w-4 h-4 text-muted-foreground\" />;\n    }\n  };\n\n  const getStatusColor = (status: string) => {\n    switch (status) {\n      case 'active': return 'bg-success/10 text-success border-success/20';\n      case 'syncing': return 'bg-primary/10 text-primary border-primary/20';\n      case 'error': return 'bg-destructive/10 text-destructive border-destructive/20';\n      case 'paused': return 'bg-warning/10 text-warning border-warning/20';\n      default: return 'bg-muted text-muted-foreground';\n    }\n  };\n\n  const getIntegrationIcon = (slug: string) => {\n    const iconMap: Record<string, React.ReactNode> = {\n      'paypal': <DollarSign className=\"w-5 h-5\" />,\n      'office-365': <Mail className=\"w-5 h-5\" />,\n      'ninjarmm': <Settings className=\"w-5 h-5\" />,\n      'hubspot': <Users className=\"w-5 h-5\" />,\n      'quickbooks': <BarChart3 className=\"w-5 h-5\" />,\n      'google-calendar': <Mail className=\"w-5 h-5\" />\n    };\n    return iconMap[slug] || <Database className=\"w-5 h-5\" />;\n  };\n\n  const getInsightIcon = (type: string) => {\n    switch (type) {\n      case 'optimization': return <TrendingUp className=\"w-4 h-4 text-blue-500\" />;\n      case 'alert': return <AlertCircle className=\"w-4 h-4 text-destructive\" />;\n      case 'trend': return <BarChart3 className=\"w-4 h-4 text-purple-500\" />;\n      case 'opportunity': return <Activity className=\"w-4 h-4 text-success\" />;\n      default: return <Database className=\"w-4 h-4\" />;\n    }\n  };\n\n  const getInsightColor = (impact: string) => {\n    switch (impact) {\n      case 'high': return 'border-l-destructive bg-destructive/5';\n      case 'medium': return 'border-l-warning bg-warning/5';\n      case 'low': return 'border-l-muted bg-muted/5';\n      default: return 'border-l-muted';\n    }\n  };\n\n  const formatTimeAgo = (timestamp: string) => {\n    const diff = Date.now() - new Date(timestamp).getTime();\n    const minutes = Math.floor(diff / 60000);\n    if (minutes < 60) return `${minutes}m ago`;\n    const hours = Math.floor(minutes / 60);\n    if (hours < 24) return `${hours}h ago`;\n    const days = Math.floor(hours / 24);\n    return `${days}d ago`;\n  };\n\n  const formatNextSync = (timestamp: string) => {\n    const diff = new Date(timestamp).getTime() - Date.now();\n    const minutes = Math.floor(diff / 60000);\n    if (minutes < 60) return `in ${minutes}m`;\n    const hours = Math.floor(minutes / 60);\n    return `in ${hours}h`;\n  };\n\n  if (isLoading) {\n    return (\n      <div className=\"flex items-center justify-center p-8\">\n        <div className=\"flex items-center space-x-2\">\n          <RefreshCw className=\"w-5 h-5 animate-spin\" />\n          <span>Loading integration data...</span>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"space-y-6\">\n      {/* Header */}\n      <div className=\"flex flex-col sm:flex-row sm:items-center sm:justify-between gap-4\">\n        <div>\n          <h2 className=\"text-2xl font-bold\">Integration Data Dashboard</h2>\n          <p className=\"text-muted-foreground\">\n            Monitor data collection and insights from your connected services\n          </p>\n        </div>\n        <div className=\"flex gap-2\">\n          <Button variant=\"outline\" onClick={fetchIntegrationData}>\n            <RefreshCw className=\"w-4 h-4 mr-2\" />\n            Refresh All\n          </Button>\n          <Button variant=\"outline\">\n            <Download className=\"w-4 h-4 mr-2\" />\n            Export Data\n          </Button>\n        </div>\n      </div>\n\n      <Tabs defaultValue=\"overview\" className=\"space-y-6\">\n        <TabsList>\n          <TabsTrigger value=\"overview\">Overview</TabsTrigger>\n          <TabsTrigger value=\"integrations\">Integrations</TabsTrigger>\n          <TabsTrigger value=\"insights\">AI Insights</TabsTrigger>\n          <TabsTrigger value=\"analytics\">Analytics</TabsTrigger>\n        </TabsList>\n\n        <TabsContent value=\"overview\" className=\"space-y-6\">\n          {/* Summary Stats */}\n          <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-4\">\n            <Card>\n              <CardContent className=\"p-6\">\n                <div className=\"flex items-center justify-between\">\n                  <div>\n                    <p className=\"text-sm text-muted-foreground\">Active Integrations</p>\n                    <p className=\"text-2xl font-bold\">\n                      {integrationData.filter(i => i.status === 'active').length}\n                    </p>\n                  </div>\n                  <CheckCircle2 className=\"w-8 h-8 text-success\" />\n                </div>\n              </CardContent>\n            </Card>\n\n            <Card>\n              <CardContent className=\"p-6\">\n                <div className=\"flex items-center justify-between\">\n                  <div>\n                    <p className=\"text-sm text-muted-foreground\">Total Data Points</p>\n                    <p className=\"text-2xl font-bold\">\n                      {integrationData.reduce((sum, i) => sum + i.dataPoints.total, 0).toLocaleString()}\n                    </p>\n                  </div>\n                  <Database className=\"w-8 h-8 text-primary\" />\n                </div>\n              </CardContent>\n            </Card>\n\n            <Card>\n              <CardContent className=\"p-6\">\n                <div className=\"flex items-center justify-between\">\n                  <div>\n                    <p className=\"text-sm text-muted-foreground\">This Month</p>\n                    <p className=\"text-2xl font-bold\">\n                      {integrationData.reduce((sum, i) => sum + i.dataPoints.thisMonth, 0).toLocaleString()}\n                    </p>\n                  </div>\n                  <TrendingUp className=\"w-8 h-8 text-success\" />\n                </div>\n              </CardContent>\n            </Card>\n\n            <Card>\n              <CardContent className=\"p-6\">\n                <div className=\"flex items-center justify-between\">\n                  <div>\n                    <p className=\"text-sm text-muted-foreground\">AI Insights</p>\n                    <p className=\"text-2xl font-bold\">{insights.length}</p>\n                  </div>\n                  <Activity className=\"w-8 h-8 text-purple-500\" />\n                </div>\n              </CardContent>\n            </Card>\n          </div>\n\n          {/* Recent Insights */}\n          <Card>\n            <CardHeader>\n              <CardTitle>Recent AI Insights</CardTitle>\n            </CardHeader>\n            <CardContent>\n              <div className=\"space-y-4\">\n                {insights.slice(0, 3).map((insight) => (\n                  <div\n                    key={insight.id}\n                    className={`p-4 border-l-4 rounded-r-lg ${getInsightColor(insight.impact)}`}\n                  >\n                    <div className=\"flex items-start justify-between\">\n                      <div className=\"flex items-start space-x-3\">\n                        {getInsightIcon(insight.type)}\n                        <div className=\"flex-1\">\n                          <h4 className=\"font-medium\">{insight.title}</h4>\n                          <p className=\"text-sm text-muted-foreground mt-1\">{insight.description}</p>\n                          <div className=\"flex items-center space-x-2 mt-2\">\n                            <Badge variant=\"outline\" className=\"text-xs\">\n                              {insight.type}\n                            </Badge>\n                            <Badge variant=\"outline\" className=\"text-xs\">\n                              {insight.impact} impact\n                            </Badge>\n                          </div>\n                        </div>\n                      </div>\n                      {insight.actionable && (\n                        <Button size=\"sm\" variant=\"outline\">\n                          Take Action\n                        </Button>\n                      )}\n                    </div>\n                  </div>\n                ))}\n              </div>\n            </CardContent>\n          </Card>\n        </TabsContent>\n\n        <TabsContent value=\"integrations\" className=\"space-y-6\">\n          <div className=\"grid gap-6\">\n            {integrationData.map((integration) => (\n              <Card key={integration.id} className=\"overflow-hidden\">\n                <CardHeader className=\"pb-4\">\n                  <div className=\"flex items-center justify-between\">\n                    <div className=\"flex items-center space-x-4\">\n                      <div className=\"p-2 rounded-lg bg-muted\">\n                        {getIntegrationIcon(integration.slug)}\n                      </div>\n                      <div>\n                        <CardTitle className=\"text-lg\">{integration.name}</CardTitle>\n                        <div className=\"flex items-center space-x-2 mt-1\">\n                          {getStatusIcon(integration.status)}\n                          <Badge variant=\"outline\" className={getStatusColor(integration.status)}>\n                            {integration.status}\n                          </Badge>\n                          <span className=\"text-sm text-muted-foreground\">\n                            Last sync: {formatTimeAgo(integration.lastSync)}\n                          </span>\n                        </div>\n                      </div>\n                    </div>\n                    <div className=\"flex space-x-2\">\n                      <Button\n                        variant=\"outline\"\n                        size=\"sm\"\n                        onClick={() => handleRefreshIntegration(integration.id)}\n                        disabled={refreshing === integration.id}\n                      >\n                        {refreshing === integration.id ? (\n                          <RefreshCw className=\"w-4 h-4 animate-spin\" />\n                        ) : (\n                          <RefreshCw className=\"w-4 h-4\" />\n                        )}\n                      </Button>\n                      <Button variant=\"outline\" size=\"sm\">\n                        <ExternalLink className=\"w-4 h-4\" />\n                      </Button>\n                    </div>\n                  </div>\n                </CardHeader>\n\n                <CardContent className=\"space-y-4\">\n                  {/* Sync Progress */}\n                  {integration.status === 'syncing' && (\n                    <div className=\"space-y-2\">\n                      <div className=\"flex justify-between text-sm\">\n                        <span>Sync Progress</span>\n                        <span>{integration.syncProgress}%</span>\n                      </div>\n                      <Progress value={integration.syncProgress} />\n                    </div>\n                  )}\n\n                  {/* Error Messages */}\n                  {integration.errors && integration.errors.length > 0 && (\n                    <div className=\"p-3 bg-destructive/10 border border-destructive/20 rounded-lg\">\n                      <div className=\"flex items-center space-x-2\">\n                        <AlertCircle className=\"w-4 h-4 text-destructive\" />\n                        <span className=\"text-sm font-medium text-destructive\">Issues Detected</span>\n                      </div>\n                      <ul className=\"text-sm text-destructive mt-1 ml-6\">\n                        {integration.errors.map((error, index) => (\n                          <li key={index}>• {error}</li>\n                        ))}\n                      </ul>\n                    </div>\n                  )}\n\n                  {/* Data Points */}\n                  <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4\">\n                    <div className=\"text-center p-3 bg-muted/30 rounded-lg\">\n                      <div className=\"text-lg font-bold\">{integration.dataPoints.total.toLocaleString()}</div>\n                      <div className=\"text-sm text-muted-foreground\">Total Records</div>\n                    </div>\n                    <div className=\"text-center p-3 bg-muted/30 rounded-lg\">\n                      <div className=\"text-lg font-bold\">{integration.dataPoints.thisWeek.toLocaleString()}</div>\n                      <div className=\"text-sm text-muted-foreground\">This Week</div>\n                    </div>\n                    <div className=\"text-center p-3 bg-muted/30 rounded-lg\">\n                      <div className=\"text-lg font-bold\">{integration.dataPoints.thisMonth.toLocaleString()}</div>\n                      <div className=\"text-sm text-muted-foreground\">This Month</div>\n                    </div>\n                  </div>\n\n                  {/* Metrics */}\n                  <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4\">\n                    {integration.metrics.map((metric, index) => (\n                      <div key={index} className=\"p-3 border rounded-lg\">\n                        <div className=\"flex justify-between items-center\">\n                          <div>\n                            <div className=\"text-sm text-muted-foreground\">{metric.label}</div>\n                            <div className=\"text-lg font-semibold\">{metric.value}</div>\n                          </div>\n                          {metric.change && (\n                            <div className={`text-sm flex items-center ${\n                              metric.trend === 'up' ? 'text-success' : \n                              metric.trend === 'down' ? 'text-destructive' : 'text-muted-foreground'\n                            }`}>\n                              {metric.trend === 'up' && <TrendingUp className=\"w-3 h-3 mr-1\" />}\n                              {metric.change}\n                            </div>\n                          )}\n                        </div>\n                      </div>\n                    ))}\n                  </div>\n\n                  {/* Next Sync */}\n                  <div className=\"text-sm text-muted-foreground\">\n                    Next sync: {formatNextSync(integration.nextSync)}\n                  </div>\n                </CardContent>\n              </Card>\n            ))}\n          </div>\n        </TabsContent>\n\n        <TabsContent value=\"insights\" className=\"space-y-6\">\n          {/* Client Intelligence Section */}\n          <Card>\n            <CardHeader>\n              <CardTitle className=\"flex items-center gap-2\">\n                <Users className=\"w-5 h-5 text-primary\" />\n                Client Intelligence\n              </CardTitle>\n              <div className=\"text-sm text-muted-foreground\">\n                AI-powered client insights from unified integration data\n              </div>\n            </CardHeader>\n            <CardContent>\n              <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4 mb-6\">\n                <div className=\"text-center p-4 bg-primary/5 rounded-lg\">\n                  <div className=\"text-2xl font-bold text-primary\">247</div>\n                  <div className=\"text-sm text-muted-foreground\">Unified Profiles</div>\n                </div>\n                <div className=\"text-center p-4 bg-success/5 rounded-lg\">\n                  <div className=\"text-2xl font-bold text-success\">$1.2M</div>\n                  <div className=\"text-sm text-muted-foreground\">Total Client Value</div>\n                </div>\n                <div className=\"text-center p-4 bg-warning/5 rounded-lg\">\n                  <div className=\"text-2xl font-bold text-warning\">12</div>\n                  <div className=\"text-sm text-muted-foreground\">Active Opportunities</div>\n                </div>\n              </div>\n              <div className=\"flex gap-2\">\n                <Button \n                  onClick={() => window.location.href = '/integrations/client-intelligence'}\n                  className=\"flex-1\"\n                >\n                  <Users className=\"w-4 h-4 mr-2\" />\n                  View Client Intelligence Dashboard\n                </Button>\n                <Button \n                  variant=\"outline\"\n                  onClick={() => {\n                    // Trigger client intelligence refresh\n                    fetch('https://automate.marcoby.net/webhook/client-intelligence-monitor', {\n                      method: 'POST',\n                      headers: { 'Content-Type': 'application/json' },\n                      body: JSON.stringify({\n                        user_id: user?.id,\n                        company_id: user?.company_id,\n                        trigger_type: 'manual'\n                      })\n                    });\n                  }}\n                >\n                  <RefreshCw className=\"w-4 h-4 mr-2\" />\n                  Refresh Intelligence\n                </Button>\n              </div>\n            </CardContent>\n          </Card>\n\n          {/* Existing Insights */}\n          <div className=\"space-y-4\">\n            {insights.map((insight) => (\n              <Card key={insight.id}>\n                <CardContent className=\"p-6\">\n                  <div className={`border-l-4 pl-4 ${getInsightColor(insight.impact)}`}>\n                    <div className=\"flex items-start justify-between\">\n                      <div className=\"flex items-start space-x-3\">\n                        {getInsightIcon(insight.type)}\n                        <div className=\"flex-1\">\n                          <h3 className=\"font-semibold\">{insight.title}</h3>\n                          <p className=\"text-muted-foreground mt-1\">{insight.description}</p>\n                          <div className=\"flex items-center space-x-2 mt-3\">\n                            <Badge variant=\"outline\">{insight.type}</Badge>\n                            <Badge variant=\"outline\">{insight.impact} impact</Badge>\n                            <span className=\"text-sm text-muted-foreground\">\n                              {formatTimeAgo(insight.createdAt)}\n                            </span>\n                          </div>\n                        </div>\n                      </div>\n                      {insight.actionable && (\n                        <Button>Take Action</Button>\n                      )}\n                    </div>\n                  </div>\n                </CardContent>\n              </Card>\n            ))}\n          </div>\n        </TabsContent>\n\n        <TabsContent value=\"analytics\" className=\"space-y-6\">\n          <Card>\n            <CardHeader>\n              <CardTitle>Integration Performance Analytics</CardTitle>\n              <div className=\"flex space-x-2\">\n                {(['week', 'month', 'quarter'] as const).map((timeframe) => (\n                  <Button\n                    key={timeframe}\n                    variant={selectedTimeframe === timeframe ? 'default' : 'outline'}\n                    size=\"sm\"\n                    onClick={() => setSelectedTimeframe(timeframe)}\n                  >\n                    {timeframe.charAt(0).toUpperCase() + timeframe.slice(1)}\n                  </Button>\n                ))}\n              </div>\n            </CardHeader>\n            <CardContent>\n              <div className=\"h-64 flex items-center justify-center text-muted-foreground\">\n                <div className=\"text-center\">\n                  <BarChart3 className=\"w-12 h-12 mx-auto mb-2\" />\n                  <p>Integration analytics charts would be rendered here</p>\n                  <p className=\"text-sm\">Showing data for: {selectedTimeframe}</p>\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n        </TabsContent>\n      </Tabs>\n    </div>\n  );\n};\n\nexport default IntegrationDataDashboard;","usedDeprecatedRules":[]},{"filePath":"/home/vonj/Github/Nexus/src/components/integrations/IntegrationOrganizer.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'supabase' is defined but never used.","line":9,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":9,"endColumn":18},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'Database' is defined but never used.","line":10,"column":15,"nodeType":null,"messageId":"unusedVar","endLine":10,"endColumn":23},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'IntegrationData' is defined but never used.","line":56,"column":11,"nodeType":null,"messageId":"unusedVar","endLine":56,"endColumn":26},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'user' is assigned a value but never used.","line":68,"column":11,"nodeType":null,"messageId":"unusedVar","endLine":68,"endColumn":15},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'showToast' is assigned a value but never used.","line":69,"column":11,"nodeType":null,"messageId":"unusedVar","endLine":69,"endColumn":20},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'addIntegration' is assigned a value but never used.","line":74,"column":5,"nodeType":null,"messageId":"unusedVar","endLine":74,"endColumn":19},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'viewMode' is assigned a value but never used.","line":82,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":82,"endColumn":18}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState, useEffect } from 'react';\nimport { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/Card';\nimport { Button } from '@/components/ui/Button';\nimport { Input } from '@/components/ui/Input';\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from '@/components/ui/Tabs';\nimport { useToast } from '@/components/ui/Toast';\nimport { useAuth } from '@/contexts/AuthContext';\nimport { useIntegrations } from '@/lib/hooks/useIntegrations';\nimport { supabase } from '../../lib/core/supabase';\nimport type { Database } from '@/lib/core/database.types';\nimport {\n  Clock,\n  XCircle,\n  Brain,\n  FileText\n} from 'lucide-react';\nimport { toast } from 'sonner';\n\n// Integration from useIntegrations hook\ninterface Integration {\n  id: string;\n  type: string;\n  credentials: Record<string, unknown>;\n  settings: Record<string, unknown>;\n  userId: string;\n  createdAt: Date;\n  updatedAt: Date;\n  // Additional display properties\n  name?: string;\n  category?: string;\n  description?: string;\n  status?: 'active' | 'inactive' | 'error' | 'setup';\n  last_sync?: string | null;\n}\n\n// Define the IntegrationInsight type\ninterface IntegrationInsight {\n  id: string;\n  content: string;\n  type: string;\n  importance: 'low' | 'medium' | 'high';\n  created_at: string;\n}\n\n// Define the IntegrationConnection type\ninterface IntegrationConnection {\n  id: string;\n  source_id: string;\n  target_id: string;\n  type: string;\n  strength?: number;\n  metadata?: Record<string, unknown>;\n}\n\n// Define the IntegrationData type\ninterface IntegrationData {\n  id: string;\n  name: string;\n  type: string;\n  connections: IntegrationConnection[];\n  insights: IntegrationInsight[];\n  metadata?: Record<string, unknown>;\n}\n\n// type DatabaseIntegration = Database['public']['Tables']['integrations']['Row'];\n\nexport const IntegrationOrganizer: React.FC = () => {\n  const { user } = useAuth();\n  const { showToast } = useToast();\n  const { \n    integrations, \n    isLoading, \n    error, \n    addIntegration, \n    removeIntegration, \n    updateIntegration, \n    refreshIntegrations \n  } = useIntegrations();\n  const [selectedIntegration, setSelectedIntegration] = useState<Integration | null>(null);\n  const [searchTerm, setSearchTerm] = useState('');\n  const [categoryFilter, setCategoryFilter] = useState<string>('all');\n  const [viewMode, setViewMode] = useState<'list' | 'mindmap' | 'timeline'>('list');\n\n  useEffect(() => {\n    refreshIntegrations();\n  }, [refreshIntegrations]);\n\n  // const handleConnect = async (integrationId: string) => {\n  //   if (!user?.id) {\n  //     toast.error('You must be logged in to connect integrations');\n  //     return;\n  //   }\n\n  //   try {\n  //     const { data: integration, error } = await supabase\n  //       .from('integrations')\n  //       .select('*')\n  //       .eq('id', integrationId)\n  //       .single();\n\n  //     if (error) throw error;\n\n  //     const newIntegration = {\n  //       integration_id: integration.id,\n  //       type: integration.auth_type || 'oauth',\n  //       name: integration.name,\n  //       category: integration.category,\n  //       description: integration.description || '',\n  //       status: 'setup',\n  //       credentials: {},\n  //       settings: (integration.default_config as Record<string, unknown>) || {},\n  //       userId: user.id\n  //     };\n\n  //     await addIntegration(newIntegration);\n  //     toast.success('Integration connected successfully');\n  //   } catch (error) {\n  //     console.error('Error connecting integration:', error);\n  //     toast.error('Failed to connect integration');\n  //   }\n  // };\n\n  const handleDisconnect = async (integrationId: string) => {\n    try {\n      await removeIntegration(integrationId);\n      toast.success('Integration disconnected successfully');\n    } catch (error) {\n      console.error('Error disconnecting integration:', error);\n      toast.error('Failed to disconnect integration');\n    }\n  };\n\n  const handleUpdateSettings = async (integrationId: string, settings: Record<string, unknown>) => {\n    try {\n      const integration = integrations.find((i: Integration) => i.id === integrationId);\n      if (!integration) throw new Error('Integration not found');\n\n      const updatedIntegration = {\n        ...integration,\n        settings: { ...integration.settings, ...settings }\n      };\n\n      await updateIntegration(integrationId, updatedIntegration);\n      toast.success('Settings updated successfully');\n    } catch (error) {\n      console.error('Error updating settings:', error);\n      toast.error('Failed to update settings');\n    }\n  };\n\n  // This function would normally update the integrations in state\n  // const addInsight = async (integrationId: string, insight: IntegrationInsight) => {\n  //   try {\n  //     const response = await fetch(`/api/integrations/${integrationId}/insights`, {\n  //       method: 'POST',\n  //       headers: { 'Content-Type': 'application/json' },\n  //       body: JSON.stringify(insight)\n  //     });\n\n  //     if (!response.ok) throw new Error('Failed to add insight');\n\n  //     // In a real implementation, you would update the local state\n  //     // with the new insight after it's successfully added\n  //     refreshIntegrations();\n\n  //     showToast({\n  //       title: 'Success',\n  //       description: 'Insight added successfully',\n  //       type: 'success'\n  //     });\n  //   } catch (error) {\n  //     showToast({\n  //       title: 'Error',\n  //       description: 'Failed to add insight',\n  //       type: 'error'\n  //     });\n  //   }\n  // };\n\n  // const organizeConnections = (integration: IntegrationData) => {\n  //   // AI-powered connection analysis\n  //   const connections = integration.connections.map(conn => ({\n  //     ...conn,\n  //     strength: calculateConnectionStrength(conn, integration)\n  //   }));\n\n  //   return connections.sort((a: IntegrationConnection, b: IntegrationConnection) => \n  //     (b.strength || 0) - (a.strength || 0)\n  //   );\n  // };\n\n  // const calculateConnectionStrength = (\n  //   connection: IntegrationConnection, \n  //   integration: IntegrationData\n  // ): number => {\n  //   // Implement connection strength calculation logic\n  //   // This could be based on:\n  //   // - Frequency of interaction\n  //   // - Data overlap\n  //   // - User-defined importance\n  //   // - AI-analyzed relevance\n  //   return Math.random(); // Placeholder\n  // };\n\n  // const generateInsights = async (integration: IntegrationData): Promise<IntegrationInsight[]> => {\n  //   // AI-powered insight generation\n  //   const insights = await fetch('/api/ai/generate-insights', {\n  //     method: 'POST',\n  //     headers: { 'Content-Type': 'application/json' },\n  //     body: JSON.stringify({ integration })\n  //   }).then(res => res.json());\n\n  //   return insights;\n  // };\n\n  // Helper function to get the display name or type for an integration\n  const getIntegrationDisplayName = (integration: Integration): string => {\n    return integration.name || integration.type || 'Unknown Integration';\n  };\n\n  // Helper function to format the date for display\n  const formatDate = (date: Date | string | undefined): string => {\n    if (!date) return 'Never';\n    return new Date(date).toLocaleString();\n  };\n\n  return (\n    <div className=\"space-y-6 p-6\">\n      {/* Header */}\n      <div className=\"flex justify-between items-center\">\n        <h1 className=\"text-2xl font-bold\">Integration Organizer</h1>\n        <div className=\"flex space-x-4\">\n          <Button variant=\"outline\" onClick={() => setViewMode('list')}>\n            <FileText className=\"w-4 h-4 mr-2\" />\n            List\n          </Button>\n          <Button variant=\"outline\" onClick={() => setViewMode('mindmap')}>\n            <Brain className=\"w-4 h-4 mr-2\" />\n            Mind Map\n          </Button>\n          <Button variant=\"outline\" onClick={() => setViewMode('timeline')}>\n            <Clock className=\"w-4 h-4 mr-2\" />\n            Timeline\n          </Button>\n        </div>\n      </div>\n\n      {/* Search and Filters */}\n      <div className=\"flex space-x-4\">\n        <Input\n          placeholder=\"Search integrations...\"\n          value={searchTerm}\n          onChange={(e) => setSearchTerm(e.target.value)}\n          className=\"flex-1\"\n        />\n        <select\n          value={categoryFilter}\n          onChange={(e) => setCategoryFilter(e.target.value)}\n          className=\"px-3 py-2 border rounded\"\n        >\n          <option value=\"all\">All Categories</option>\n          <option value=\"crm\">CRM</option>\n          <option value=\"marketing\">Marketing</option>\n          <option value=\"sales\">Sales</option>\n          <option value=\"productivity\">Productivity</option>\n        </select>\n      </div>\n\n      {/* Main Content */}\n      <div className=\"grid grid-cols-1 lg:grid-cols-3 gap-6\">\n        {/* Integration List */}\n        <div className=\"lg:col-span-2\">\n          <Card>\n            <CardHeader>\n              <CardTitle>Your Integrations</CardTitle>\n            </CardHeader>\n            <CardContent>\n              {isLoading ? (\n                <div className=\"flex justify-center items-center p-8\">\n                  <div className=\"animate-spin rounded-full h-8 w-8 border-b-2 border-primary\"></div>\n                </div>\n              ) : error ? (\n                <div className=\"text-center text-destructive p-4\">\n                  {error.message}\n                </div>\n              ) : (\n                <div className=\"space-y-4\">\n                  {integrations.map(integration => (\n                    <div\n                      key={integration.id}\n                      className=\"p-4 border rounded-lg hover:bg-accent cursor-pointer\"\n                      onClick={() => setSelectedIntegration(integration)}\n                    >\n                      <div className=\"flex justify-between items-start\">\n                        <div>\n                          <h3 className=\"font-medium\">{getIntegrationDisplayName(integration)}</h3>\n                          <p className=\"text-sm text-muted-foreground\">\n                            Last updated: {formatDate(integration.updatedAt)}\n                          </p>\n                        </div>\n                        <div className=\"flex items-center space-x-2\">\n                          <Button\n                            variant=\"outline\"\n                            size=\"sm\"\n                            onClick={(e) => {\n                              e.stopPropagation();\n                              handleDisconnect(integration.id);\n                            }}\n                          >\n                            Disconnect\n                          </Button>\n                        </div>\n                      </div>\n                    </div>\n                  ))}\n                </div>\n              )}\n            </CardContent>\n          </Card>\n        </div>\n\n        {/* Settings Panel */}\n        <div className=\"space-y-6\">\n          <Card>\n            <CardHeader>\n              <CardTitle>Integration Settings</CardTitle>\n            </CardHeader>\n            <CardContent>\n              {selectedIntegration && (\n                <div className=\"space-y-4\">\n                  <div>\n                    <h3 className=\"font-medium\">Status</h3>\n                    <p className=\"text-sm text-muted-foreground\">\n                      {selectedIntegration.status || 'Unknown'}\n                    </p>\n                  </div>\n                  <div>\n                    <h3 className=\"font-medium\">Last Synced</h3>\n                    <p className=\"text-sm text-muted-foreground\">\n                      {selectedIntegration.last_sync ? new Date(selectedIntegration.last_sync).toLocaleString() : 'Never'}\n                    </p>\n                  </div>\n                  <Button\n                    variant=\"outline\"\n                    className=\"w-full\"\n                    onClick={() => handleUpdateSettings(selectedIntegration.id, {})}\n                  >\n                    Update Settings\n                  </Button>\n                </div>\n              )}\n            </CardContent>\n          </Card>\n        </div>\n      </div>\n\n      {/* Integration Details Modal */}\n      {selectedIntegration && (\n        <div className=\"fixed inset-0 bg-black/50 flex items-center justify-center z-modal\">\n          <Card className=\"w-full max-w-4xl\">\n            <CardHeader className=\"flex justify-between items-center\">\n              <CardTitle>{getIntegrationDisplayName(selectedIntegration)}</CardTitle>\n              <Button\n                variant=\"ghost\"\n                size=\"sm\"\n                onClick={() => setSelectedIntegration(null)}\n              >\n                <XCircle className=\"w-4 h-4\" />\n              </Button>\n            </CardHeader>\n            <CardContent>\n              <Tabs defaultValue=\"overview\">\n                <TabsList>\n                  <TabsTrigger value=\"overview\">Overview</TabsTrigger>\n                  <TabsTrigger value=\"settings\">Settings</TabsTrigger>\n                </TabsList>\n                <TabsContent value=\"overview\" className=\"space-y-4\">\n                  <div>\n                    <h3 className=\"font-medium\">Description</h3>\n                    <p className=\"text-muted-foreground\">\n                      {selectedIntegration.description || 'No description available'}\n                    </p>\n                  </div>\n                  <div>\n                    <h3 className=\"font-medium\">Category</h3>\n                    <p className=\"text-muted-foreground\">\n                      {selectedIntegration.category || 'Uncategorized'}\n                    </p>\n                  </div>\n                </TabsContent>\n                <TabsContent value=\"settings\">\n                  <div className=\"space-y-4\">\n                    <div>\n                      <h3 className=\"font-medium\">Sync Settings</h3>\n                      <p className=\"text-sm text-muted-foreground\">\n                        Last synced: {selectedIntegration.last_sync ? new Date(selectedIntegration.last_sync).toLocaleString() : 'Never'}\n                      </p>\n                    </div>\n                    <div>\n                      <h3 className=\"font-medium\">Status</h3>\n                      <p className=\"text-sm text-muted-foreground\">\n                        {selectedIntegration.status || 'Unknown'}\n                      </p>\n                    </div>\n                    <Button\n                      variant=\"outline\"\n                      className=\"w-full\"\n                      onClick={() => handleUpdateSettings(selectedIntegration.id, {})}\n                    >\n                      Update Settings\n                    </Button>\n                  </div>\n                </TabsContent>\n              </Tabs>\n            </CardContent>\n          </Card>\n        </div>\n      )}\n    </div>\n  );\n}; ","usedDeprecatedRules":[]},{"filePath":"/home/vonj/Github/Nexus/src/components/integrations/IntegrationSetupModal.tsx","messages":[{"ruleId":"no-restricted-syntax","severity":1,"message":"Use design tokens instead of hardcoded text colors (e.g., text-foreground, text-muted-foreground)","line":227,"column":33,"nodeType":"Literal","messageId":"restrictedSyntax","endLine":227,"endColumn":79},{"ruleId":"no-restricted-syntax","severity":1,"message":"Use design tokens instead of hardcoded text colors (e.g., text-foreground, text-muted-foreground)","line":298,"column":35,"nodeType":"Literal","messageId":"restrictedSyntax","endLine":298,"endColumn":85},{"ruleId":"no-restricted-syntax","severity":1,"message":"Use design tokens instead of hardcoded text colors (e.g., text-foreground, text-muted-foreground)","line":375,"column":35,"nodeType":"Literal","messageId":"restrictedSyntax","endLine":375,"endColumn":91},{"ruleId":"no-restricted-syntax","severity":1,"message":"Use design tokens instead of hardcoded text colors (e.g., text-foreground, text-muted-foreground)","line":384,"column":35,"nodeType":"Literal","messageId":"restrictedSyntax","endLine":384,"endColumn":91},{"ruleId":"no-restricted-syntax","severity":1,"message":"Use design tokens instead of hardcoded text colors (e.g., text-foreground, text-muted-foreground)","line":393,"column":35,"nodeType":"Literal","messageId":"restrictedSyntax","endLine":393,"endColumn":91},{"ruleId":"no-restricted-syntax","severity":1,"message":"Use design tokens instead of hardcoded colors (e.g., bg-primary, bg-secondary)","line":445,"column":23,"nodeType":"Literal","messageId":"restrictedSyntax","endLine":445,"endColumn":77},{"ruleId":"no-restricted-syntax","severity":1,"message":"Use design tokens instead of hardcoded colors (e.g., bg-primary, bg-secondary)","line":451,"column":58,"nodeType":"Literal","messageId":"restrictedSyntax","endLine":451,"endColumn":90}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState } from 'react';\nimport { \n  Card, CardContent, CardHeader, CardTitle,\n  Badge,\n  Button\n} from '@/components/ui';\nimport { \n  X, \n  ArrowRight, \n  ArrowLeft, \n  Check, \n  AlertCircle, \n  Key, \n  Globe, \n  Shield,\n  Zap,\n  Clock,\n  Database\n} from 'lucide-react';\nimport { ButtonSpinner } from '@/components/patterns/LoadingStates';\n\ninterface IntegrationSetupModalProps {\n  integration: {\n    id: string;\n    name: string;\n    icon: React.ReactNode;\n    category: string;\n    difficulty: 'easy' | 'medium' | 'advanced';\n    estimatedSetupTime: string;\n    features: string[];\n  };\n  isOpen: boolean;\n  onClose: () => void;\n  onComplete: (data: Record<string, unknown>) => void;\n}\n\ninterface SetupData {\n  authorized?: boolean;\n  apiKey?: string;\n  companyId?: string;\n  permissions?: {\n    [key: string]: boolean;\n  };\n}\n\ninterface SetupStep {\n  id: string;\n  title: string;\n  description: string;\n  type: 'oauth' | 'api_key' | 'configuration' | 'permissions' | 'testing';\n  completed: boolean;\n}\n\n/**\n * Integration Setup Modal with step-by-step wizard\n */\nconst IntegrationSetupModal: React.FC<IntegrationSetupModalProps> = ({\n  integration,\n  isOpen,\n  onClose,\n  onComplete\n}) => {\n  const [currentStep, setCurrentStep] = useState(0);\n  const [setupData, setSetupData] = useState<SetupData>({});\n  const [isConnecting, setIsConnecting] = useState(false);\n\n  // Setup steps based on integration type\n  const getSetupSteps = (): SetupStep[] => {\n    const baseSteps: SetupStep[] = [\n      {\n        id: 'welcome',\n        title: 'Welcome',\n        description: `Let's connect your ${integration.name} account`,\n        type: 'configuration',\n        completed: false\n      }\n    ];\n\n    // OAuth-based integrations\n    if (['Salesforce', 'HubSpot', 'Google Analytics', 'Slack'].includes(integration.name)) {\n      return [\n        ...baseSteps,\n        {\n          id: 'oauth',\n          title: 'Authorization',\n          description: 'Authorize Nexus to access your account',\n          type: 'oauth',\n          completed: false\n        },\n        {\n          id: 'permissions',\n          title: 'Permissions',\n          description: 'Configure data access permissions',\n          type: 'permissions',\n          completed: false\n        },\n        {\n          id: 'testing',\n          title: 'Test Connection',\n          description: 'Verify the integration is working',\n          type: 'testing',\n          completed: false\n        }\n      ];\n    }\n\n    // API Key-based integrations\n    return [\n      ...baseSteps,\n      {\n        id: 'api_key',\n        title: 'API Configuration',\n        description: 'Enter your API credentials',\n        type: 'api_key',\n        completed: false\n      },\n      {\n        id: 'configuration',\n        title: 'Data Mapping',\n        description: 'Configure which data to sync',\n        type: 'configuration',\n        completed: false\n      },\n      {\n        id: 'testing',\n        title: 'Test Connection',\n        description: 'Verify the integration is working',\n        type: 'testing',\n        completed: false\n      }\n    ];\n  };\n\n  const steps = getSetupSteps();\n  const currentStepData = steps[currentStep];\n\n  const handleNext = () => {\n    if (currentStep < steps.length - 1) {\n      setCurrentStep(currentStep + 1);\n    }\n  };\n\n  const handlePrevious = () => {\n    if (currentStep > 0) {\n      setCurrentStep(currentStep - 1);\n    }\n  };\n\n  const handleComplete = async () => {\n    setIsConnecting(true);\n    \n    // Simulate API call\n    setTimeout(() => {\n      onComplete({\n        integrationId: integration.id,\n        setupData,\n        connectedAt: new Date().toISOString()\n      });\n      setIsConnecting(false);\n      onClose();\n    }, 2000);\n  };\n\n  const renderStepContent = () => {\n    switch (currentStepData.type) {\n      case 'configuration':\n        return (\n          <div className=\"space-y-6\">\n            <div className=\"text-center\">\n              <div className=\"mx-auto w-16 h-16 bg-primary/10 dark:bg-primary/20/20 rounded-full flex items-center justify-center mb-4\">\n                {integration.icon}\n              </div>\n              <h3 className=\"text-xl font-semibold text-foreground dark:text-primary-foreground mb-2\">\n                Connect {integration.name}\n              </h3>\n              <p className=\"text-muted-foreground dark:text-muted-foreground mb-6\">\n                This integration will help you sync data and get insights from your {integration.name} account.\n              </p>\n            </div>\n\n            <div className=\"grid grid-cols-2 gap-4\">\n              <div className=\"p-4 bg-background dark:bg-background/50 rounded-lg\">\n                <Clock className=\"w-5 h-5 text-primary mb-2\" />\n                <div className=\"text-sm font-medium text-foreground dark:text-primary-foreground\">Setup Time</div>\n                <div className=\"text-sm text-muted-foreground dark:text-muted-foreground\">{integration.estimatedSetupTime}</div>\n              </div>\n              <div className=\"p-4 bg-background dark:bg-background/50 rounded-lg\">\n                <Database className=\"w-5 h-5 text-success mb-2\" />\n                <div className=\"text-sm font-medium text-foreground dark:text-primary-foreground\">Data Sources</div>\n                <div className=\"text-sm text-muted-foreground dark:text-muted-foreground\">{integration.features.length} types</div>\n              </div>\n            </div>\n\n            <div>\n              <h4 className=\"font-medium text-foreground dark:text-primary-foreground mb-3\">What you'll get:</h4>\n              <ul className=\"space-y-2\">\n                {integration.features.map((feature, index) => (\n                  <li key={index} className=\"flex items-center space-x-4\">\n                    <Check className=\"w-4 h-4 text-success flex-shrink-0\" />\n                    <span className=\"text-sm text-muted-foreground dark:text-muted-foreground\">{feature}</span>\n                  </li>\n                ))}\n              </ul>\n            </div>\n          </div>\n        );\n\n      case 'oauth':\n        return (\n          <div className=\"space-y-6\">\n            <div className=\"text-center\">\n              <div className=\"mx-auto w-16 h-16 bg-primary/10 dark:bg-primary/20/20 rounded-full flex items-center justify-center mb-4\">\n                <Shield className=\"w-8 h-8 text-primary\" />\n              </div>\n              <h3 className=\"text-xl font-semibold text-foreground dark:text-primary-foreground mb-2\">\n                Authorize Access\n              </h3>\n              <p className=\"text-muted-foreground dark:text-muted-foreground mb-6\">\n                Click the button below to securely connect your {integration.name} account. You'll be redirected to {integration.name} to authorize access.\n              </p>\n            </div>\n\n            <div className=\"bg-primary/5 dark:bg-primary/20/20 border border-border dark:border-primary/80 rounded-lg p-4\">\n              <div className=\"flex items-start space-x-4\">\n                <AlertCircle className=\"w-5 h-5 text-primary flex-shrink-0 mt-0.5\" />\n                <div>\n                  <h4 className=\"font-medium text-blue-900 dark:text-blue-100\">Secure Connection</h4>\n                  <p className=\"text-sm text-primary dark:text-primary mt-1\">\n                    Nexus uses industry-standard OAuth 2.0 authentication. We never store your {integration.name} password.\n                  </p>\n                </div>\n              </div>\n            </div>\n\n            <Button \n              className=\"w-full bg-primary hover:bg-primary/90\" \n              size=\"lg\"\n              onClick={() => {\n                // Simulate OAuth flow\n                setTimeout(() => {\n                  setSetupData((prev) => ({ ...prev, authorized: true }));\n                  handleNext();\n                }, 1000);\n              }}\n            >\n              <Globe className=\"w-5 h-5 mr-2\" />\n              Authorize with {integration.name}\n            </Button>\n          </div>\n        );\n\n      case 'api_key':\n        return (\n          <div className=\"space-y-6\">\n            <div className=\"text-center\">\n              <div className=\"mx-auto w-16 h-16 bg-success/10 dark:bg-success/20 rounded-full flex items-center justify-center mb-4\">\n                <Key className=\"w-8 h-8 text-success\" />\n              </div>\n              <h3 className=\"text-xl font-semibold text-foreground dark:text-primary-foreground mb-2\">\n                API Configuration\n              </h3>\n              <p className=\"text-muted-foreground dark:text-muted-foreground mb-6\">\n                Enter your {integration.name} API credentials to establish the connection.\n              </p>\n            </div>\n\n            <div className=\"space-y-4\">\n              <div>\n                <label className=\"block text-sm font-medium text-foreground/90 dark:text-muted-foreground/60 mb-2\">\n                  API Key\n                </label>\n                <input\n                  id=\"api_key\"\n                  type=\"password\"\n                  className=\"w-full\"\n                  onChange={(e) => setSetupData((prev) => ({ ...prev, apiKey: e.target.value }))}\n                />\n              </div>\n\n              {integration.name === 'QuickBooks' && (\n                <div>\n                  <label className=\"block text-sm font-medium text-foreground/90 dark:text-muted-foreground/60 mb-2\">\n                    Company ID\n                  </label>\n                  <input\n                    type=\"text\"\n                    placeholder=\"Enter your company ID\"\n                    className=\"w-full px-4 py-2 border border-border dark:border-gray-600 rounded-lg bg-card dark:bg-background text-foreground dark:text-primary-foreground placeholder-gray-500 focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-transparent\"\n                    onChange={(e) => setSetupData({ ...setupData, companyId: e.target.value })}\n                  />\n                </div>\n              )}\n\n              <div className=\"bg-warning/5 dark:bg-warning/20/20 border border-warning/20 dark:border-warning/80 rounded-lg p-4\">\n                <div className=\"flex items-start space-x-4\">\n                  <AlertCircle className=\"w-5 h-5 text-warning flex-shrink-0 mt-0.5\" />\n                  <div>\n                    <h4 className=\"font-medium text-yellow-900 dark:text-yellow-100\">How to find your API key</h4>\n                    <p className=\"text-sm text-warning/90 dark:text-warning mt-1\">\n                      Go to your {integration.name} account settings → API section → Generate new API key\n                    </p>\n                  </div>\n                </div>\n              </div>\n            </div>\n          </div>\n        );\n\n      case 'permissions':\n        return (\n          <div className=\"space-y-6\">\n            <div className=\"text-center\">\n              <div className=\"mx-auto w-16 h-16 bg-secondary/10 dark:bg-secondary/20/20 rounded-full flex items-center justify-center mb-4\">\n                <Shield className=\"w-8 h-8 text-secondary\" />\n              </div>\n              <h3 className=\"text-xl font-semibold text-foreground dark:text-primary-foreground mb-2\">\n                Configure Permissions\n              </h3>\n              <p className=\"text-muted-foreground dark:text-muted-foreground mb-6\">\n                Choose which data types you want to sync with Nexus.\n              </p>\n            </div>\n\n            <div className=\"space-y-4\">\n              {integration.features.map((feature, index) => (\n                <label key={index} className=\"flex items-center space-x-4 p-4 border border-border dark:border-border rounded-lg hover:bg-background dark:hover:bg-background/50 cursor-pointer\">\n                  <input\n                    type=\"checkbox\"\n                    id={feature}\n                    className=\"w-4 h-4 text-primary border-border rounded focus:ring-blue-500\"\n                    onChange={(e) => {\n                      setSetupData(prev => ({\n                        ...prev,\n                        permissions: {\n                          ...prev.permissions,\n                          [feature]: (e.target as HTMLInputElement).checked\n                        }\n                      }));\n                    }}\n                  />\n                  <label htmlFor={feature} className=\"text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70\">\n                    {feature}\n                  </label>\n                </label>\n              ))}\n            </div>\n\n            <div className=\"bg-primary/5 dark:bg-primary/20/20 border border-border dark:border-primary/80 rounded-lg p-4\">\n              <p className=\"text-sm text-primary dark:text-primary\">\n                You can change these permissions later in the integration settings.\n              </p>\n            </div>\n          </div>\n        );\n\n      case 'testing':\n        return (\n          <div className=\"space-y-6\">\n            <div className=\"text-center\">\n              <div className=\"mx-auto w-16 h-16 bg-success/10 dark:bg-success/20 rounded-full flex items-center justify-center mb-4\">\n                <Zap className=\"w-8 h-8 text-success\" />\n              </div>\n              <h3 className=\"text-xl font-semibold text-foreground dark:text-primary-foreground mb-2\">\n                Test Connection\n              </h3>\n              <p className=\"text-muted-foreground dark:text-muted-foreground mb-6\">\n                Let's verify that everything is working correctly.\n              </p>\n            </div>\n\n            <div className=\"space-y-4\">\n              <div className=\"flex items-center justify-between p-4 bg-success/5 dark:bg-success/20 border border-success/20 dark:border-success/80 rounded-lg\">\n                <div className=\"flex items-center space-x-4\">\n                  <Check className=\"w-5 h-5 text-success\" />\n                  <span className=\"text-sm font-medium text-green-900 dark:text-green-100\">\n                    Connection established\n                  </span>\n                </div>\n              </div>\n\n              <div className=\"flex items-center justify-between p-4 bg-success/5 dark:bg-success/20 border border-success/20 dark:border-success/80 rounded-lg\">\n                <div className=\"flex items-center space-x-4\">\n                  <Check className=\"w-5 h-5 text-success\" />\n                  <span className=\"text-sm font-medium text-green-900 dark:text-green-100\">\n                    Data access verified\n                  </span>\n                </div>\n              </div>\n\n              <div className=\"flex items-center justify-between p-4 bg-success/5 dark:bg-success/20 border border-success/20 dark:border-success/80 rounded-lg\">\n                <div className=\"flex items-center space-x-4\">\n                  <Check className=\"w-5 h-5 text-success\" />\n                  <span className=\"text-sm font-medium text-green-900 dark:text-green-100\">\n                    Initial sync completed\n                  </span>\n                </div>\n              </div>\n            </div>\n\n            <div className=\"bg-primary/5 dark:bg-primary/20/20 border border-border dark:border-primary/80 rounded-lg p-4\">\n              <p className=\"text-sm text-primary dark:text-primary\">\n                🎉 Great! Your {integration.name} integration is ready. Data will start appearing in your dashboard within a few minutes.\n              </p>\n            </div>\n          </div>\n        );\n\n      default:\n        return null;\n    }\n  };\n\n  if (!isOpen) return null;\n\n  return (\n          <div className=\"fixed inset-0 bg-black/50 flex items-center justify-center z-critical p-4\">\n      <Card className=\"w-full max-w-2xl max-h-[90vh] overflow-y-auto\">\n        <CardHeader className=\"flex flex-row items-center justify-between\">\n          <div>\n            <CardTitle>Setup {integration.name}</CardTitle>\n            <div className=\"flex items-center space-x-2 mt-2\">\n              <Badge variant=\"outline\">{integration.category}</Badge>\n              <Badge className={\n                integration.difficulty === 'easy' ? 'bg-success/10 text-success' :\n                integration.difficulty === 'medium' ? 'bg-warning/10 text-warning/80' :\n                'bg-destructive/10 text-destructive'\n              }>\n                {integration.difficulty}\n              </Badge>\n            </div>\n          </div>\n          <Button variant=\"outline\" size=\"sm\" onClick={onClose}>\n            <X className=\"w-4 h-4\" />\n          </Button>\n        </CardHeader>\n\n        <CardContent className=\"space-y-6\">\n          {/* Progress Steps */}\n          <div className=\"flex items-center justify-between\">\n            {steps.map((step, index) => (\n              <div key={step.id} className=\"flex items-center\">\n                <div className={`w-8 h-8 rounded-full flex items-center justify-center text-sm font-medium ${\n                  index <= currentStep \n                    ? 'bg-primary text-primary-foreground' \n                    : 'bg-gray-200 dark:bg-background text-muted-foreground'\n                }`}>\n                  {index < currentStep ? <Check className=\"w-4 h-4\" /> : index + 1}\n                </div>\n                {index < steps.length - 1 && (\n                  <div className={`w-12 h-0.5 mx-2 ${\n                    index < currentStep ? 'bg-primary' : 'bg-gray-200 dark:bg-background'\n                  }`} />\n                )}\n              </div>\n            ))}\n          </div>\n\n          {/* Step Content */}\n          <div className=\"min-h-[400px]\">\n            <div className=\"mb-4\">\n              <h3 className=\"text-lg font-semibold text-foreground dark:text-primary-foreground\">\n                {currentStepData.title}\n              </h3>\n              <p className=\"text-sm text-muted-foreground dark:text-muted-foreground\">\n                {currentStepData.description}\n              </p>\n            </div>\n            \n            {renderStepContent()}\n          </div>\n\n          {/* Navigation */}\n          <div className=\"mt-8 flex justify-between items-center\">\n            <Button\n              variant=\"ghost\"\n              onClick={handlePrevious}\n              disabled={currentStep === 0 || isConnecting}\n            >\n              <ArrowLeft className=\"w-4 h-4 mr-2\" />\n              Previous\n            </Button>\n\n            {currentStep === steps.length - 1 ? (\n              <Button\n                onClick={handleComplete}\n                disabled={isConnecting}\n                className=\"bg-success hover:bg-success/90\"\n              >\n                {isConnecting ? (\n                  <ButtonSpinner />\n                ) : (\n                  <>\n                    <Check className=\"w-4 h-4 mr-2\" />\n                    Complete Setup\n                  </>\n                )}\n              </Button>\n            ) : (\n              <Button onClick={handleNext} disabled={isConnecting}>\n                Next\n                <ArrowRight className=\"w-4 h-4 ml-2\" />\n              </Button>\n            )}\n          </div>\n        </CardContent>\n      </Card>\n    </div>\n  );\n};\n\nexport default IntegrationSetupModal; ","usedDeprecatedRules":[]},{"filePath":"/home/vonj/Github/Nexus/src/components/integrations/ManageIntegrationModal.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'Badge' is defined but never used.","line":4,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":4,"endColumn":15},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'Database' is defined but never used.","line":24,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":24,"endColumn":11},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'Clock' is defined but never used.","line":27,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":27,"endColumn":8},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":39,"column":19,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":39,"endColumn":22,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1057,1060],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1057,1060],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":40,"column":17,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":40,"endColumn":20,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1078,1081],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1078,1081],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":72,"column":50,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":72,"endColumn":53,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1889,1892],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1889,1892],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState, useEffect } from 'react';\nimport { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/Card';\nimport { Button } from '@/components/ui/Button';\nimport { Badge } from '@/components/ui/Badge';\nimport { Input } from '@/components/ui/Input';\nimport { Label } from '@/components/ui/Label';\nimport { Textarea } from '@/components/ui/Textarea';\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from '@/components/ui/Tabs';\nimport { Alert, AlertDescription } from '@/components/ui/Alert';\nimport { Switch } from '@/components/ui/Switch';\nimport { Separator } from '@/components/ui/Separator';\nimport { ApiIntegrationService } from '@/lib/services/apiIntegrationService';\nimport {\n  Settings,\n  RefreshCw,\n  CheckCircle2,\n  AlertCircle,\n  Copy,\n  Eye,\n  EyeOff,\n  Trash2,\n  Save,\n  Code,\n  Database,\n  Globe,\n  Key,\n  Clock,\n  Activity,\n  X\n} from 'lucide-react';\n\ninterface ApiIntegration {\n  id: string;\n  name: string;\n  description?: string;\n  api_url: string;\n  config?: {\n    auth_methods?: string[];\n    rate_limits?: any;\n    endpoints?: any[];\n  };\n  metadata?: {\n    endpoint_count?: number;\n    auth_type?: string;\n    rate_limit?: string;\n    last_tested?: string;\n  };\n  generated_code?: string;\n  is_active: boolean;\n  created_at: string;\n  updated_at: string;\n}\n\ninterface ManageIntegrationModalProps {\n  integration: ApiIntegration;\n  isOpen: boolean;\n  onClose: () => void;\n  onUpdate: (updatedIntegration: ApiIntegration) => void;\n  onDelete: (integrationId: string) => void;\n}\n\nexport const ManageIntegrationModal: React.FC<ManageIntegrationModalProps> = ({\n  integration,\n  isOpen,\n  onClose,\n  onUpdate,\n  onDelete\n}) => {\n  const [activeTab, setActiveTab] = useState('settings');\n  const [isLoading, setIsLoading] = useState(false);\n  const [isTesting, setIsTesting] = useState(false);\n  const [testResults, setTestResults] = useState<any>(null);\n  const [showApiKey, setShowApiKey] = useState(false);\n  const [showCode, setShowCode] = useState(false);\n\n  // Form state\n  const [formData, setFormData] = useState({\n    name: integration.name,\n    description: integration.description || '',\n    api_url: integration.api_url,\n    is_active: integration.is_active,\n    auth_config: {\n      api_key: '',\n      auth_header: 'Authorization',\n      auth_prefix: 'Bearer '\n    },\n    sync_frequency: '5', // minutes\n    enable_webhooks: false,\n    webhook_url: '',\n    rate_limit_requests: 100,\n    rate_limit_window: 60 // seconds\n  });\n\n  useEffect(() => {\n    if (integration) {\n      setFormData({\n        name: integration.name,\n        description: integration.description || '',\n        api_url: integration.api_url,\n        is_active: integration.is_active,\n        auth_config: {\n          api_key: '',\n          auth_header: 'Authorization',\n          auth_prefix: 'Bearer '\n        },\n        sync_frequency: '5',\n        enable_webhooks: false,\n        webhook_url: '',\n        rate_limit_requests: 100,\n        rate_limit_window: 60\n      });\n    }\n  }, [integration]);\n\n  const handleSave = async () => {\n    setIsLoading(true);\n    try {\n      const updatedIntegration = await ApiIntegrationService.updateApiIntegration(integration.id, {\n        name: formData.name,\n        description: formData.description,\n        api_url: formData.api_url,\n        is_active: formData.is_active,\n        config: {\n          ...integration.config,\n          auth_config: formData.auth_config,\n          sync_frequency: formData.sync_frequency,\n          enable_webhooks: formData.enable_webhooks,\n          webhook_url: formData.webhook_url,\n          rate_limits: {\n            requests: formData.rate_limit_requests,\n            window: formData.rate_limit_window\n          }\n        }\n      });\n\n      onUpdate(updatedIntegration);\n      setActiveTab('settings');\n    } catch (error) {\n      console.error('Failed to update integration:', error);\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  const handleTest = async () => {\n    setIsTesting(true);\n    setTestResults(null);\n\n    try {\n      const result = await ApiIntegrationService.testApiIntegration(integration.id);\n      setTestResults(result);\n      setActiveTab('testing');\n    } catch (error) {\n      setTestResults({\n        success: false,\n        error: 'Failed to run test',\n        details: error\n      });\n    } finally {\n      setIsTesting(false);\n    }\n  };\n\n  const handleDelete = async () => {\n    if (window.confirm(`Are you sure you want to delete the integration \"${integration.name}\"? This action cannot be undone.`)) {\n      setIsLoading(true);\n      try {\n        await ApiIntegrationService.deleteApiIntegration(integration.id);\n        onDelete(integration.id);\n        onClose();\n      } catch (error) {\n        console.error('Failed to delete integration:', error);\n      } finally {\n        setIsLoading(false);\n      }\n    }\n  };\n\n  const copyToClipboard = (text: string) => {\n    navigator.clipboard.writeText(text);\n  };\n\n  if (!isOpen) return null;\n\n  return (\n    <div className=\"fixed inset-0 bg-black/50 z-50 flex items-center justify-center p-4\">\n      <Card className=\"w-full max-w-4xl max-h-[90vh] overflow-hidden\">\n        <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-4\">\n          <div>\n            <CardTitle className=\"flex items-center gap-2\">\n              <Settings className=\"h-5 w-5\" />\n              Manage {integration.name}\n            </CardTitle>\n            <p className=\"text-sm text-muted-foreground mt-1\">\n              Configure settings, test connectivity, and manage your API integration\n            </p>\n          </div>\n          <Button variant=\"ghost\" size=\"sm\" onClick={onClose}>\n            <X className=\"h-4 w-4\" />\n          </Button>\n        </CardHeader>\n\n        <CardContent className=\"p-0\">\n          <Tabs value={activeTab} onValueChange={setActiveTab} className=\"w-full\">\n            <div className=\"px-6\">\n              <TabsList className=\"grid w-full grid-cols-4\">\n                <TabsTrigger value=\"settings\">Settings</TabsTrigger>\n                <TabsTrigger value=\"authentication\">Authentication</TabsTrigger>\n                <TabsTrigger value=\"testing\">Testing</TabsTrigger>\n                <TabsTrigger value=\"code\">Generated Code</TabsTrigger>\n              </TabsList>\n            </div>\n\n            <div className=\"px-6 pb-6 max-h-[60vh] overflow-y-auto\">\n              {/* Settings Tab */}\n              <TabsContent value=\"settings\" className=\"space-y-6 mt-6\">\n                <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\n                  <div className=\"space-y-4\">\n                    <div>\n                      <Label htmlFor=\"name\">Integration Name</Label>\n                      <Input\n                        id=\"name\"\n                        value={formData.name}\n                        onChange={(e) => setFormData(prev => ({ ...prev, name: e.target.value }))}\n                        placeholder=\"My API Integration\"\n                      />\n                    </div>\n\n                    <div>\n                      <Label htmlFor=\"description\">Description</Label>\n                      <Textarea\n                        id=\"description\"\n                        value={formData.description}\n                        onChange={(e) => setFormData(prev => ({ ...prev, description: e.target.value }))}\n                        placeholder=\"Describe what this integration does...\"\n                        rows={3}\n                      />\n                    </div>\n\n                    <div>\n                      <Label htmlFor=\"api_url\">API Base URL</Label>\n                      <Input\n                        id=\"api_url\"\n                        value={formData.api_url}\n                        onChange={(e) => setFormData(prev => ({ ...prev, api_url: e.target.value }))}\n                        placeholder=\"https://api.example.com/v1\"\n                      />\n                    </div>\n                  </div>\n\n                  <div className=\"space-y-4\">\n                    <div className=\"flex items-center justify-between\">\n                      <Label htmlFor=\"is_active\">Active Integration</Label>\n                      <Switch\n                        id=\"is_active\"\n                        checked={formData.is_active}\n                        onCheckedChange={(checked) => setFormData(prev => ({ ...prev, is_active: checked }))}\n                      />\n                    </div>\n\n                    <div>\n                      <Label htmlFor=\"sync_frequency\">Sync Frequency (minutes)</Label>\n                      <Input\n                        id=\"sync_frequency\"\n                        type=\"number\"\n                        value={formData.sync_frequency}\n                        onChange={(e) => setFormData(prev => ({ ...prev, sync_frequency: e.target.value }))}\n                        min=\"1\"\n                        max=\"1440\"\n                      />\n                    </div>\n\n                    <div className=\"space-y-2\">\n                      <Label>Rate Limiting</Label>\n                      <div className=\"grid grid-cols-2 gap-2\">\n                        <div>\n                          <Label htmlFor=\"rate_requests\" className=\"text-xs\">Requests</Label>\n                          <Input\n                            id=\"rate_requests\"\n                            type=\"number\"\n                            value={formData.rate_limit_requests}\n                            onChange={(e) => setFormData(prev => ({ ...prev, rate_limit_requests: parseInt(e.target.value) }))}\n                            min=\"1\"\n                          />\n                        </div>\n                        <div>\n                          <Label htmlFor=\"rate_window\" className=\"text-xs\">Window (sec)</Label>\n                          <Input\n                            id=\"rate_window\"\n                            type=\"number\"\n                            value={formData.rate_limit_window}\n                            onChange={(e) => setFormData(prev => ({ ...prev, rate_limit_window: parseInt(e.target.value) }))}\n                            min=\"1\"\n                          />\n                        </div>\n                      </div>\n                    </div>\n                  </div>\n                </div>\n\n                <Separator />\n\n                <div className=\"space-y-4\">\n                  <div className=\"flex items-center justify-between\">\n                    <Label htmlFor=\"enable_webhooks\">Enable Webhooks</Label>\n                    <Switch\n                      id=\"enable_webhooks\"\n                      checked={formData.enable_webhooks}\n                      onCheckedChange={(checked) => setFormData(prev => ({ ...prev, enable_webhooks: checked }))}\n                    />\n                  </div>\n\n                  {formData.enable_webhooks && (\n                    <div>\n                      <Label htmlFor=\"webhook_url\">Webhook URL</Label>\n                      <Input\n                        id=\"webhook_url\"\n                        value={formData.webhook_url}\n                        onChange={(e) => setFormData(prev => ({ ...prev, webhook_url: e.target.value }))}\n                        placeholder=\"https://your-app.com/webhooks/api-integration\"\n                      />\n                    </div>\n                  )}\n                </div>\n              </TabsContent>\n\n              {/* Authentication Tab */}\n              <TabsContent value=\"authentication\" className=\"space-y-6 mt-6\">\n                <Alert>\n                  <Key className=\"h-4 w-4\" />\n                  <AlertDescription>\n                    Configure authentication settings for your API integration. These credentials are securely encrypted.\n                  </AlertDescription>\n                </Alert>\n\n                <div className=\"space-y-4\">\n                  <div>\n                    <Label htmlFor=\"auth_header\">Authorization Header</Label>\n                    <Input\n                      id=\"auth_header\"\n                      value={formData.auth_config.auth_header}\n                      onChange={(e) => setFormData(prev => ({\n                        ...prev,\n                        auth_config: { ...prev.auth_config, auth_header: e.target.value }\n                      }))}\n                      placeholder=\"Authorization\"\n                    />\n                  </div>\n\n                  <div>\n                    <Label htmlFor=\"auth_prefix\">Authorization Prefix</Label>\n                    <Input\n                      id=\"auth_prefix\"\n                      value={formData.auth_config.auth_prefix}\n                      onChange={(e) => setFormData(prev => ({\n                        ...prev,\n                        auth_config: { ...prev.auth_config, auth_prefix: e.target.value }\n                      }))}\n                      placeholder=\"Bearer \"\n                    />\n                  </div>\n\n                  <div>\n                    <Label htmlFor=\"api_key\">API Key</Label>\n                    <div className=\"flex gap-2\">\n                      <Input\n                        id=\"api_key\"\n                        type={showApiKey ? 'text' : 'password'}\n                        value={formData.auth_config.api_key}\n                        onChange={(e) => setFormData(prev => ({\n                          ...prev,\n                          auth_config: { ...prev.auth_config, api_key: e.target.value }\n                        }))}\n                        placeholder=\"Enter your API key\"\n                      />\n                      <Button\n                        type=\"button\"\n                        variant=\"outline\"\n                        size=\"sm\"\n                        onClick={() => setShowApiKey(!showApiKey)}\n                      >\n                        {showApiKey ? <EyeOff className=\"h-4 w-4\" /> : <Eye className=\"h-4 w-4\" />}\n                      </Button>\n                    </div>\n                  </div>\n                </div>\n\n                <div className=\"bg-muted/50 p-4 rounded-lg\">\n                  <h4 className=\"font-medium mb-2\">Integration Details</h4>\n                  <div className=\"grid grid-cols-2 gap-4 text-sm\">\n                    <div>\n                      <span className=\"text-muted-foreground\">Auth Type:</span>\n                      <span className=\"ml-2\">{integration.metadata?.auth_type || 'API Key'}</span>\n                    </div>\n                    <div>\n                      <span className=\"text-muted-foreground\">Endpoints:</span>\n                      <span className=\"ml-2\">{integration.metadata?.endpoint_count || 0}</span>\n                    </div>\n                    <div>\n                      <span className=\"text-muted-foreground\">Rate Limit:</span>\n                      <span className=\"ml-2\">{integration.metadata?.rate_limit || 'Not specified'}</span>\n                    </div>\n                    <div>\n                      <span className=\"text-muted-foreground\">Last Tested:</span>\n                      <span className=\"ml-2\">{integration.metadata?.last_tested ? new Date(integration.metadata.last_tested).toLocaleDateString() : 'Never'}</span>\n                    </div>\n                  </div>\n                </div>\n              </TabsContent>\n\n              {/* Testing Tab */}\n              <TabsContent value=\"testing\" className=\"space-y-6 mt-6\">\n                <div className=\"flex items-center justify-between\">\n                  <div>\n                    <h3 className=\"text-lg font-medium\">Connection Testing</h3>\n                    <p className=\"text-sm text-muted-foreground\">\n                      Test your API integration to ensure it's working correctly\n                    </p>\n                  </div>\n                  <Button onClick={handleTest} disabled={isTesting}>\n                    <RefreshCw className={`h-4 w-4 mr-2 ${isTesting ? 'animate-spin' : ''}`} />\n                    {isTesting ? 'Testing...' : 'Run Test'}\n                  </Button>\n                </div>\n\n                {testResults && (\n                  <Alert className={testResults.success ? 'border-success' : 'border-destructive'}>\n                    {testResults.success ? (\n                      <CheckCircle2 className=\"h-4 w-4 text-success\" />\n                    ) : (\n                      <AlertCircle className=\"h-4 w-4 text-destructive\" />\n                    )}\n                    <AlertDescription>\n                      <div className=\"space-y-2\">\n                        <div className=\"font-medium\">\n                          {testResults.success ? 'Test Successful!' : 'Test Failed'}\n                        </div>\n                        {testResults.message && (\n                          <div className=\"text-sm\">{testResults.message}</div>\n                        )}\n                        {testResults.error && (\n                          <div className=\"text-sm text-destructive\">{testResults.error}</div>\n                        )}\n                        {testResults.response_time && (\n                          <div className=\"text-sm\">\n                            Response time: {testResults.response_time}ms\n                          </div>\n                        )}\n                      </div>\n                    </AlertDescription>\n                  </Alert>\n                )}\n\n                <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4\">\n                  <Card>\n                    <CardContent className=\"p-4\">\n                      <div className=\"flex items-center gap-2 mb-2\">\n                        <Globe className=\"h-4 w-4 text-primary\" />\n                        <span className=\"font-medium\">Connectivity</span>\n                      </div>\n                      <p className=\"text-sm text-muted-foreground\">Test basic API connectivity</p>\n                    </CardContent>\n                  </Card>\n\n                  <Card>\n                    <CardContent className=\"p-4\">\n                      <div className=\"flex items-center gap-2 mb-2\">\n                        <Key className=\"h-4 w-4 text-warning\" />\n                        <span className=\"font-medium\">Authentication</span>\n                      </div>\n                      <p className=\"text-sm text-muted-foreground\">Verify API key validity</p>\n                    </CardContent>\n                  </Card>\n\n                  <Card>\n                    <CardContent className=\"p-4\">\n                      <div className=\"flex items-center gap-2 mb-2\">\n                        <Activity className=\"h-4 w-4 text-success\" />\n                        <span className=\"font-medium\">Performance</span>\n                      </div>\n                      <p className=\"text-sm text-muted-foreground\">Check response times</p>\n                    </CardContent>\n                  </Card>\n                </div>\n              </TabsContent>\n\n              {/* Generated Code Tab */}\n              <TabsContent value=\"code\" className=\"space-y-6 mt-6\">\n                <div className=\"flex items-center justify-between\">\n                  <div>\n                    <h3 className=\"text-lg font-medium\">Generated Integration Code</h3>\n                    <p className=\"text-sm text-muted-foreground\">\n                      TypeScript service code generated for this integration\n                    </p>\n                  </div>\n                  <div className=\"flex gap-2\">\n                    <Button\n                      variant=\"outline\"\n                      size=\"sm\"\n                      onClick={() => setShowCode(!showCode)}\n                    >\n                      {showCode ? <EyeOff className=\"h-4 w-4 mr-2\" /> : <Eye className=\"h-4 w-4 mr-2\" />}\n                      {showCode ? 'Hide' : 'Show'} Code\n                    </Button>\n                    {integration.generated_code && (\n                      <Button\n                        variant=\"outline\"\n                        size=\"sm\"\n                        onClick={() => copyToClipboard(integration.generated_code!)}\n                      >\n                        <Copy className=\"h-4 w-4 mr-2\" />\n                        Copy Code\n                      </Button>\n                    )}\n                  </div>\n                </div>\n\n                {showCode && integration.generated_code && (\n                  <div className=\"bg-muted/50 p-4 rounded-lg\">\n                    <pre className=\"text-sm overflow-x-auto\">\n                      <code>{integration.generated_code}</code>\n                    </pre>\n                  </div>\n                )}\n\n                {!integration.generated_code && (\n                  <Alert>\n                    <Code className=\"h-4 w-4\" />\n                    <AlertDescription>\n                      No generated code available for this integration. Code generation may have failed during creation.\n                    </AlertDescription>\n                  </Alert>\n                )}\n              </TabsContent>\n            </div>\n          </Tabs>\n        </CardContent>\n\n        <div className=\"flex items-center justify-between p-6 border-t\">\n          <Button\n            variant=\"destructive\"\n            onClick={handleDelete}\n            disabled={isLoading}\n          >\n            <Trash2 className=\"h-4 w-4 mr-2\" />\n            Delete Integration\n          </Button>\n\n          <div className=\"flex gap-2\">\n            <Button variant=\"outline\" onClick={onClose}>\n              Cancel\n            </Button>\n            <Button onClick={handleSave} disabled={isLoading}>\n              <Save className=\"h-4 w-4 mr-2\" />\n              {isLoading ? 'Saving...' : 'Save Changes'}\n            </Button>\n          </div>\n        </div>\n      </Card>\n    </div>\n  );\n}; ","usedDeprecatedRules":[]},{"filePath":"/home/vonj/Github/Nexus/src/components/integrations/MarcobyCloudSetup.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'useEffect' is defined but never used.","line":1,"column":27,"nodeType":null,"messageId":"unusedVar","endLine":1,"endColumn":36},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'Badge' is defined but never used.","line":6,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":6,"endColumn":15},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'Separator' is defined but never used.","line":7,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":7,"endColumn":19},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'Shield' is defined but never used.","line":14,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":14,"endColumn":9},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'Zap' is defined but never used.","line":15,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":15,"endColumn":6},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'BarChart3' is defined but never used.","line":22,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":22,"endColumn":12},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'Cpu' is defined but never used.","line":23,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":23,"endColumn":6},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'HardDrive' is defined but never used.","line":24,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":24,"endColumn":12},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":63,"column":14,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":63,"endColumn":17,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1712,1715],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1712,1715],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":64,"column":13,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":64,"endColumn":16,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1736,1739],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1736,1739],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":141,"column":67,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":141,"endColumn":70,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3684,3687],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3684,3687],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"no-restricted-syntax","severity":1,"message":"Use design tokens instead of hardcoded colors (e.g., bg-primary, bg-secondary)","line":219,"column":28,"nodeType":"Literal","messageId":"restrictedSyntax","endLine":219,"endColumn":59},{"ruleId":"no-restricted-syntax","severity":1,"message":"Use design tokens instead of hardcoded text colors (e.g., text-foreground, text-muted-foreground)","line":220,"column":32,"nodeType":"Literal","messageId":"restrictedSyntax","endLine":220,"endColumn":55},{"ruleId":"no-restricted-syntax","severity":1,"message":"Use design tokens instead of hardcoded colors (e.g., bg-primary, bg-secondary)","line":278,"column":28,"nodeType":"Literal","messageId":"restrictedSyntax","endLine":278,"endColumn":65},{"ruleId":"no-restricted-syntax","severity":1,"message":"Use design tokens instead of hardcoded text colors (e.g., text-foreground, text-muted-foreground)","line":279,"column":29,"nodeType":"Literal","messageId":"restrictedSyntax","endLine":279,"endColumn":80},{"ruleId":"no-restricted-syntax","severity":1,"message":"Use design tokens instead of hardcoded text colors (e.g., text-foreground, text-muted-foreground)","line":283,"column":28,"nodeType":"Literal","messageId":"restrictedSyntax","endLine":283,"endColumn":51},{"ruleId":"no-restricted-syntax","severity":1,"message":"Use design tokens instead of hardcoded text colors (e.g., text-foreground, text-muted-foreground)","line":286,"column":29,"nodeType":"Literal","messageId":"restrictedSyntax","endLine":286,"endColumn":80},{"ruleId":"no-restricted-syntax","severity":1,"message":"Use design tokens instead of hardcoded text colors (e.g., text-foreground, text-muted-foreground)","line":287,"column":128,"nodeType":"Literal","messageId":"restrictedSyntax","endLine":287,"endColumn":159},{"ruleId":"no-restricted-syntax","severity":1,"message":"Use design tokens instead of hardcoded text colors (e.g., text-foreground, text-muted-foreground)","line":424,"column":39,"nodeType":"Literal","messageId":"restrictedSyntax","endLine":424,"endColumn":62},{"ruleId":"no-restricted-syntax","severity":1,"message":"Use design tokens instead of hardcoded text colors (e.g., text-foreground, text-muted-foreground)","line":439,"column":41,"nodeType":"Literal","messageId":"restrictedSyntax","endLine":439,"endColumn":65}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":20,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState, useEffect } from 'react';\nimport { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/Card';\nimport { Button } from '@/components/ui/Button';\nimport { Input } from '@/components/ui/Input';\nimport { Label } from '@/components/ui/Label';\nimport { Badge } from '@/components/ui/Badge';\nimport { Separator } from '@/components/ui/Separator';\nimport { Alert, AlertDescription } from '@/components/ui/Alert';\nimport { \n  Cloud, \n  Server, \n  Activity, \n  DollarSign, \n  Shield,\n  Zap,\n  CheckCircle,\n  AlertCircle,\n  Loader2,\n  ExternalLink,\n  Eye,\n  EyeOff,\n  BarChart3,\n  Cpu,\n  HardDrive\n} from 'lucide-react';\nimport { marcobyCloudService } from '@/lib/services/marcobyCloudService';\nimport { supabase } from '../../lib/core/supabase';\nimport { useAuth } from '@/contexts/AuthContext';\nimport { useNotifications } from '@/contexts/NotificationContext';\n\ninterface MarcobyCloudSetupProps {\n  onComplete: () => void;\n  onClose: () => void;\n}\n\ninterface SetupStep {\n  id: number;\n  title: string;\n  description: string;\n  completed: boolean;\n}\n\nconst MarcobyCloudSetup: React.FC<MarcobyCloudSetupProps> = ({ onComplete, onClose }) => {\n  const { user } = useAuth();\n  const { addNotification } = useNotifications();\n  \n  const [currentStep, setCurrentStep] = useState(1);\n  const [loading, setLoading] = useState(false);\n  const [showApiKey, setShowApiKey] = useState(false);\n  \n  // Form data\n  const [formData, setFormData] = useState({\n    apiKey: '',\n    orgId: '',\n    endpoint: 'https://cloud.marcoby.com',\n    rspUsername: '',\n    rspPassword: ''\n  });\n  \n  // Test results\n  const [testResults, setTestResults] = useState<{\n    connection: boolean | null;\n    metrics: any | null;\n    health: any | null;\n  }>({\n    connection: null,\n    metrics: null,\n    health: null\n  });\n\n  const [error, setError] = useState<string | null>(null);\n\n  const steps: SetupStep[] = [\n    {\n      id: 1,\n      title: 'API Configuration',\n      description: 'Connect to your Marcoby Cloud account',\n      completed: currentStep > 1\n    },\n    {\n      id: 2,\n      title: 'Test Infrastructure',\n      description: 'Verify access to infrastructure metrics',\n      completed: currentStep > 2\n    },\n    {\n      id: 3,\n      title: 'Review Capabilities',\n      description: 'Preview monitoring and optimization features',\n      completed: currentStep > 3\n    },\n    {\n      id: 4,\n      title: 'Complete Setup',\n      description: 'Activate monitoring and automation',\n      completed: false\n    }\n  ];\n\n  const handleInputChange = (field: string, value: string) => {\n    setFormData(prev => ({\n      ...prev,\n      [field]: value\n    }));\n    setError(null);\n  };\n\n  const testConnection = async () => {\n    if (!formData.rspUsername || !formData.rspPassword) {\n      setError('Please provide ResellersPanel username and password');\n      return;\n    }\n\n    setLoading(true);\n    setError(null);\n\n    try {\n      // Test connection (simulated for demo)\n      const connectionResult = await marcobyCloudService.testConnection();\n      \n      if (connectionResult.success) {\n        setTestResults(prev => ({ ...prev, connection: true }));\n        setCurrentStep(2);\n      } else {\n        throw new Error(connectionResult.message);\n      }\n    } catch (err) {\n      setError(err instanceof Error ? err.message : 'Connection test failed');\n      setTestResults(prev => ({ ...prev, connection: false }));\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const testInfrastructure = async () => {\n    setLoading(true);\n    setError(null);\n\n    try {\n      // Initialize service with test config\n      const testService = new (marcobyCloudService.constructor as any)();\n      testService.config = {\n        apiKey: formData.apiKey || '',\n        orgId: formData.orgId,\n        endpoint: formData.endpoint,\n        rspUsername: formData.rspUsername,\n        rspPassword: formData.rspPassword,\n        rspApiUrl: 'https://cp.resellerspanel.com/api'\n      };\n\n      // Fetch sample metrics\n      const metrics = await testService.getInfrastructureMetrics();\n      const health = await testService.getHealthSummary();\n      \n      setTestResults(prev => ({ \n        ...prev, \n        metrics,\n        health\n      }));\n      \n      setCurrentStep(3);\n    } catch (err) {\n      setError(err instanceof Error ? err.message : 'Infrastructure test failed');\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const completeSetup = async () => {\n    if (!user?.id) return;\n\n    setLoading(true);\n    setError(null);\n\n    try {\n      // Save integration to database\n      const integrationData = {\n        user_id: user.id,\n        integration_slug: 'marcoby-cloud',\n        name: `Marcoby Cloud - ${formData.orgId}`,\n        status: 'active',\n        config: {\n          org_id: formData.orgId,\n          endpoint: formData.endpoint,\n          rsp_api_url: 'https://cp.resellerspanel.com/api'\n        },\n        credentials: {\n          api_key: formData.apiKey || '',\n          rsp_username: formData.rspUsername,\n          rsp_password: formData.rspPassword\n        },\n        last_sync_at: new Date().toISOString()\n      };\n\n      const { error: saveError } = await supabase\n        .from('user_integrations')\n        .insert(integrationData);\n\n      if (saveError) throw saveError;\n\n      addNotification({\n        type: 'success',\n        message: 'Marcoby Cloud Connected! Infrastructure monitoring is now active with automated KPI updates.'\n      });\n\n      onComplete();\n    } catch (err) {\n      setError(err instanceof Error ? err.message : 'Failed to save integration');\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  return (\n    <Card className=\"w-full max-w-4xl\">\n      <CardHeader className=\"pb-4\">\n        <div className=\"flex items-center justify-between\">\n          <div className=\"flex items-center gap-3\">\n            <div className=\"p-2 rounded-lg bg-blue-500/10\">\n              <Cloud className=\"w-6 h-6 text-blue-500\" />\n            </div>\n            <div>\n              <CardTitle className=\"text-xl\">Connect Marcoby Cloud</CardTitle>\n              <p className=\"text-sm text-muted-foreground\">\n                Infrastructure monitoring, cost optimization, and automation insights\n              </p>\n            </div>\n          </div>\n          <Button variant=\"ghost\" onClick={onClose}>×</Button>\n        </div>\n      </CardHeader>\n\n      <CardContent className=\"space-y-6\">\n        {/* Progress Steps */}\n        <div className=\"flex items-center gap-2 mb-6\">\n          {steps.map((step, index) => (\n            <React.Fragment key={step.id}>\n              <div className={`flex items-center gap-2 px-3 py-2 rounded-lg transition-colors ${\n                currentStep === step.id \n                  ? 'bg-primary/10 text-primary' \n                  : step.completed \n                    ? 'bg-success/10 text-success'\n                    : 'bg-muted text-muted-foreground'\n              }`}>\n                {step.completed ? (\n                  <CheckCircle className=\"w-4 h-4\" />\n                ) : (\n                  <span className=\"w-4 h-4 rounded-full border-2 flex items-center justify-center text-xs\">\n                    {step.id}\n                  </span>\n                )}\n                <span className=\"text-sm font-medium\">{step.title}</span>\n              </div>\n              {index < steps.length - 1 && (\n                <div className=\"w-8 h-px bg-border\" />\n              )}\n            </React.Fragment>\n          ))}\n        </div>\n\n        {error && (\n          <Alert variant=\"error\">\n            <AlertCircle className=\"h-4 w-4\" />\n            <AlertDescription>{error}</AlertDescription>\n          </Alert>\n        )}\n\n        {/* Step 1: API Configuration */}\n        {currentStep === 1 && (\n          <div className=\"space-y-6\">\n            <div>\n              <h3 className=\"text-lg font-semibold mb-2\">Marcoby Cloud API Setup</h3>\n              <p className=\"text-sm text-muted-foreground mb-4\">\n                Connect to your Marcoby Cloud infrastructure management platform.\n              </p>\n            </div>\n\n            <div className=\"bg-blue-50 p-4 rounded-lg space-y-3\">\n              <h4 className=\"font-medium flex items-center gap-2 text-blue-800\">\n                <ExternalLink className=\"w-4 h-4\" />\n                ResellersPanel Integration\n              </h4>\n              <p className=\"text-sm text-blue-700\">\n                Marcoby Cloud uses ResellersPanel as its white-label backend. Enter your ResellersPanel API credentials to connect your hosting infrastructure.\n              </p>\n              <ol className=\"text-sm space-y-1 ml-4 list-decimal text-blue-700\">\n                <li>Log in to your <a href=\"https://cp.resellerspanel.com\" target=\"_blank\" rel=\"noopener noreferrer\" className=\"text-blue-600 hover:underline\">ResellersPanel Control Panel</a></li>\n                <li>Navigate to API Settings</li>\n                <li>Enable API access for your account</li>\n                <li>Use your ResellersPanel username and password</li>\n              </ol>\n            </div>\n\n            <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n              <div className=\"space-y-2\">\n                <Label htmlFor=\"rspUsername\">ResellersPanel Username</Label>\n                <Input\n                  id=\"rspUsername\"\n                  placeholder=\"your-username\"\n                  value={formData.rspUsername}\n                  onChange={(e) => handleInputChange('rspUsername', e.target.value)}\n                />\n              </div>\n\n              <div className=\"space-y-2\">\n                <Label htmlFor=\"rspPassword\">ResellersPanel Password</Label>\n                <div className=\"relative\">\n                  <Input\n                    id=\"rspPassword\"\n                    type={showApiKey ? 'text' : 'password'}\n                    placeholder=\"your-password\"\n                    value={formData.rspPassword}\n                    onChange={(e) => handleInputChange('rspPassword', e.target.value)}\n                  />\n                  <Button\n                    type=\"button\"\n                    variant=\"ghost\"\n                    size=\"sm\"\n                    className=\"absolute right-2 top-1/2 -translate-y-1/2\"\n                    onClick={() => setShowApiKey(!showApiKey)}\n                  >\n                    {showApiKey ? <EyeOff className=\"w-4 h-4\" /> : <Eye className=\"w-4 h-4\" />}\n                  </Button>\n                </div>\n              </div>\n            </div>\n\n            <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n              <div className=\"space-y-2\">\n                <Label htmlFor=\"orgId\">Organization ID (Optional)</Label>\n                <Input\n                  id=\"orgId\"\n                  placeholder=\"org-xxxxxxxx-xxxx-xxxx\"\n                  value={formData.orgId}\n                  onChange={(e) => handleInputChange('orgId', e.target.value)}\n                />\n              </div>\n\n              <div className=\"space-y-2\">\n                <Label htmlFor=\"endpoint\">Marcoby Cloud URL</Label>\n                <Input\n                  id=\"endpoint\"\n                  placeholder=\"https://cloud.marcoby.com\"\n                  value={formData.endpoint}\n                  onChange={(e) => handleInputChange('endpoint', e.target.value)}\n                />\n              </div>\n            </div>\n\n            <div className=\"flex justify-end\">\n              <Button \n                onClick={testConnection} \n                disabled={loading || !formData.rspUsername || !formData.rspPassword}\n                className=\"min-w-[120px]\"\n              >\n                {loading ? (\n                  <>\n                    <Loader2 className=\"w-4 h-4 mr-2 animate-spin\" />\n                    Testing...\n                  </>\n                ) : (\n                  'Test Connection'\n                )}\n              </Button>\n            </div>\n          </div>\n        )}\n\n        {/* Step 2: Test Infrastructure */}\n        {currentStep === 2 && (\n          <div className=\"space-y-6\">\n            <div>\n              <h3 className=\"text-lg font-semibold mb-2\">Test Infrastructure Access</h3>\n              <p className=\"text-sm text-muted-foreground mb-4\">\n                Let's verify we can access your infrastructure metrics and monitoring data.\n              </p>\n            </div>\n\n            <div className=\"bg-success/10 p-4 rounded-lg\">\n              <div className=\"flex items-center gap-3\">\n                <CheckCircle className=\"w-5 h-5 text-success\" />\n                <div>\n                  <h4 className=\"font-medium text-success\">Connection Successful</h4>\n                  <p className=\"text-sm text-success/80\">\n                    Connected to Marcoby Cloud via ResellersPanel API\n                  </p>\n                </div>\n              </div>\n            </div>\n\n            <div className=\"flex justify-end\">\n              <Button \n                onClick={testInfrastructure} \n                disabled={loading}\n                className=\"min-w-[140px]\"\n              >\n                {loading ? (\n                  <>\n                    <Loader2 className=\"w-4 h-4 mr-2 animate-spin\" />\n                    Testing...\n                  </>\n                ) : (\n                  'Test Infrastructure'\n                )}\n              </Button>\n            </div>\n          </div>\n        )}\n\n        {/* Step 3: Review Capabilities */}\n        {currentStep === 3 && testResults.metrics && (\n          <div className=\"space-y-6\">\n            <div>\n              <h3 className=\"text-lg font-semibold mb-2\">Infrastructure Overview</h3>\n              <p className=\"text-sm text-muted-foreground mb-4\">\n                Preview of your infrastructure metrics and monitoring capabilities.\n              </p>\n            </div>\n\n            <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4\">\n              <Card>\n                <CardContent className=\"p-4\">\n                  <div className=\"flex items-center gap-3\">\n                    <Server className=\"w-8 h-8 text-blue-500\" />\n                    <div>\n                      <h4 className=\"font-medium\">Infrastructure</h4>\n                      <p className=\"text-2xl font-bold\">\n                        {testResults.metrics.infrastructure.activeServers}/{testResults.metrics.infrastructure.totalServers}\n                      </p>\n                      <p className=\"text-sm text-muted-foreground\">Active Servers</p>\n                    </div>\n                  </div>\n                </CardContent>\n              </Card>\n\n              <Card>\n                <CardContent className=\"p-4\">\n                  <div className=\"flex items-center gap-3\">\n                    <Activity className=\"w-8 h-8 text-green-500\" />\n                    <div>\n                      <h4 className=\"font-medium\">Uptime</h4>\n                      <p className=\"text-2xl font-bold\">\n                        {testResults.metrics.infrastructure.uptime}%\n                      </p>\n                      <p className=\"text-sm text-muted-foreground\">Last 30 days</p>\n                    </div>\n                  </div>\n                </CardContent>\n              </Card>\n\n              <Card>\n                <CardContent className=\"p-4\">\n                  <div className=\"flex items-center gap-3\">\n                    <DollarSign className=\"w-8 h-8 text-amber-500\" />\n                    <div>\n                      <h4 className=\"font-medium\">Monthly Cost</h4>\n                      <p className=\"text-2xl font-bold\">\n                        ${testResults.metrics.costs.monthlySpend.toLocaleString()}\n                      </p>\n                      <p className=\"text-sm text-muted-foreground\">Current spend</p>\n                    </div>\n                  </div>\n                </CardContent>\n              </Card>\n            </div>\n\n            <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\n              <div className=\"space-y-3\">\n                <h4 className=\"font-medium text-success\">✅ Performance Monitoring</h4>\n                <ul className=\"text-sm text-muted-foreground space-y-1 ml-4\">\n                  <li>• CPU: {testResults.metrics.infrastructure.cpuUtilization}% utilization</li>\n                  <li>• Memory: {testResults.metrics.infrastructure.memoryUtilization}% utilization</li>\n                  <li>• Response time: {testResults.metrics.performance.responseTime}ms</li>\n                  <li>• Throughput: {testResults.metrics.performance.throughput} req/s</li>\n                </ul>\n              </div>\n\n              <div className=\"space-y-3\">\n                <h4 className=\"font-medium text-success\">✅ Cost Optimization</h4>\n                <ul className=\"text-sm text-muted-foreground space-y-1 ml-4\">\n                  <li>• Potential savings: ${testResults.metrics.costs.optimizationSavings}</li>\n                  <li>• Cost trend: {testResults.metrics.costs.costTrend}</li>\n                  <li>• Top cost driver: Compute ({testResults.metrics.costs.topCostDrivers[0]?.percentage}%)</li>\n                  <li>• Storage utilization: {testResults.metrics.storage.storageUtilization}%</li>\n                </ul>\n              </div>\n\n              <div className=\"space-y-3\">\n                <h4 className=\"font-medium text-success\">✅ Security & Compliance</h4>\n                <ul className=\"text-sm text-muted-foreground space-y-1 ml-4\">\n                  <li>• Security score: {testResults.metrics.security.securityScore}%</li>\n                  <li>• Vulnerabilities: {testResults.metrics.security.vulnerabilities}</li>\n                  <li>• Patch level: {testResults.metrics.security.patchLevel}%</li>\n                  <li>• Critical alerts: {testResults.metrics.security.criticalAlerts}</li>\n                </ul>\n              </div>\n\n              <div className=\"space-y-3\">\n                <h4 className=\"font-medium text-success\">✅ Automation Insights</h4>\n                <ul className=\"text-sm text-muted-foreground space-y-1 ml-4\">\n                  <li>• Automation coverage: {testResults.metrics.automation.automationCoverage}%</li>\n                  <li>• Automated tasks: {testResults.metrics.automation.automatedTasks}/{testResults.metrics.automation.totalTasks}</li>\n                  <li>• Deployment frequency: {testResults.metrics.automation.deploymentFrequency}/week</li>\n                  <li>• Failure rate: {testResults.metrics.automation.failureRate}%</li>\n                </ul>\n              </div>\n            </div>\n\n            <div className=\"flex justify-end\">\n              <Button \n                onClick={() => setCurrentStep(4)}\n                className=\"min-w-[120px]\"\n              >\n                Continue Setup\n              </Button>\n            </div>\n          </div>\n        )}\n\n        {/* Step 4: Complete Setup */}\n        {currentStep === 4 && (\n          <div className=\"space-y-6\">\n            <div className=\"text-center\">\n              <CheckCircle className=\"w-12 h-12 text-success mx-auto mb-4\" />\n              <h3 className=\"text-lg font-semibold mb-2\">Ready to Activate!</h3>\n              <p className=\"text-sm text-muted-foreground mb-6\">\n                Your Marcoby Cloud integration will provide comprehensive infrastructure monitoring and automatic KPI updates.\n              </p>\n            </div>\n\n            <div className=\"bg-muted/50 p-4 rounded-lg\">\n              <h4 className=\"font-medium mb-3\">🚀 What happens next:</h4>\n              <ul className=\"text-sm space-y-2\">\n                <li className=\"flex items-center gap-2\">\n                  <CheckCircle className=\"w-4 h-4 text-success\" />\n                  <span>Automatic updates to <strong>Asset Utilization</strong> KPI</span>\n                </li>\n                <li className=\"flex items-center gap-2\">\n                  <CheckCircle className=\"w-4 h-4 text-success\" />\n                  <span>Real-time <strong>Service Uptime</strong> monitoring</span>\n                </li>\n                <li className=\"flex items-center gap-2\">\n                  <CheckCircle className=\"w-4 h-4 text-success\" />\n                  <span>Automated <strong>Automation Coverage</strong> tracking</span>\n                </li>\n                <li className=\"flex items-center gap-2\">\n                  <CheckCircle className=\"w-4 h-4 text-success\" />\n                  <span>Cost optimization recommendations</span>\n                </li>\n                <li className=\"flex items-center gap-2\">\n                  <CheckCircle className=\"w-4 h-4 text-success\" />\n                  <span>Security and performance alerts</span>\n                </li>\n              </ul>\n            </div>\n\n            <div className=\"flex justify-end\">\n              <Button \n                onClick={completeSetup} \n                disabled={loading}\n                className=\"min-w-[140px]\"\n              >\n                {loading ? (\n                  <>\n                    <Loader2 className=\"w-4 h-4 mr-2 animate-spin\" />\n                    Activating...\n                  </>\n                ) : (\n                  'Activate Monitoring'\n                )}\n              </Button>\n            </div>\n          </div>\n        )}\n      </CardContent>\n    </Card>\n  );\n};\n\nexport default MarcobyCloudSetup; ","usedDeprecatedRules":[]},{"filePath":"/home/vonj/Github/Nexus/src/components/integrations/MicrosoftTeamsSetup.tsx","messages":[{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"The 'setupSteps' array makes the dependencies of useEffect Hook (at line 172) change on every render. To fix this, wrap the initialization of 'setupSteps' in its own useMemo() Hook.","line":71,"column":9,"nodeType":"VariableDeclarator","endLine":100,"endColumn":4}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\n * Microsoft Teams Integration Setup Component\n * Provides seamless Teams integration with enterprise-grade OAuth flow\n * Complements Slack integration for complete communication intelligence\n */\nimport React, { useState, useEffect } from 'react';\nimport { Card, CardContent } from '@/components/ui/Card';\nimport { Button } from '@/components/ui/Button';\nimport { Input } from '@/components/ui/Input';\nimport { Label } from '@/components/ui/Label';\nimport { Badge } from '@/components/ui/Badge';\nimport { Progress } from '@/components/ui/Progress';\nimport { Alert, AlertDescription } from '@/components/ui/Alert';\n// import { Tabs, TabsContent, TabsList, TabsTrigger } from '@/components/ui/Tabs';\nimport { \n  MessageSquare, \n  Users, \n  Calendar, \n  Video, \n  Shield, \n  Zap, \n  CheckCircle2, \n  AlertTriangle,\n  Loader2,\n  TrendingUp,\n  BarChart3,\n  Target\n} from 'lucide-react';\nimport { microsoftTeamsService } from '@/lib/services/microsoftTeamsService';\n\ninterface TeamsSetupProps {\n  onComplete?: (data: unknown) => void;\n  onCancel?: () => void;\n  existingConfig?: Record<string, unknown>;\n}\n\ninterface SetupStep {\n  id: string;\n  title: string;\n  description: string;\n  completed: boolean;\n  current: boolean;\n  optional?: boolean;\n}\n\ninterface TeamsMetrics {\n  totalTeams: number;\n  totalChannels: number;\n  totalMessages: number;\n  totalMeetings: number;\n  activeUsers: number;\n  averageResponseTime: number;\n}\n\nconst MicrosoftTeamsSetup: React.FC<TeamsSetupProps> = ({\n  onComplete,\n  onCancel,\n  existingConfig\n}) => {\n  const [currentStep, setCurrentStep] = useState(0);\n  const [isConnecting, setIsConnecting] = useState(false);\n  const [connectionStatus, setConnectionStatus] = useState<'idle' | 'connecting' | 'connected' | 'error'>('idle');\n  const [error, setError] = useState<string | null>(null);\n  const [teamsData, setTeamsData] = useState<TeamsMetrics | null>(null);\n  const [tenantId, setTenantId] = useState((existingConfig?.tenantId as string) || '');\n  const [clientId] = useState((existingConfig?.clientId as string) || '');\n  const [setupProgress, setSetupProgress] = useState(0);\n\n  const teamsService = microsoftTeamsService;\n\n  const setupSteps: SetupStep[] = [\n    {\n      id: 'authenticate',\n      title: 'Connect to Microsoft Teams',\n      description: 'Authenticate with your Microsoft 365 account to access Teams data',\n      completed: connectionStatus === 'connected',\n      current: currentStep === 0\n    },\n    {\n      id: 'permissions',\n      title: 'Configure Permissions',\n      description: 'Review and approve the permissions needed for Teams integration',\n      completed: false,\n      current: currentStep === 1\n    },\n    {\n      id: 'sync',\n      title: 'Initial Data Sync',\n      description: 'Import your Teams data including channels, messages, and meetings',\n      completed: false,\n      current: currentStep === 2\n    },\n    {\n      id: 'analytics',\n      title: 'Enable Analytics',\n      description: 'Set up communication analytics and insights generation',\n      completed: false,\n      current: currentStep === 3\n    }\n  ];\n\n  const requiredPermissions = [\n    {\n      scope: 'Team.ReadBasic.All',\n      description: 'Read basic team information',\n      icon: Users,\n      required: true\n    },\n    {\n      scope: 'Channel.ReadBasic.All', \n      description: 'Read channel information and structure',\n      icon: MessageSquare,\n      required: true\n    },\n    {\n      scope: 'ChannelMessage.Read.All',\n      description: 'Read messages in channels for analytics',\n      icon: MessageSquare,\n      required: true\n    },\n    {\n      scope: 'Chat.Read',\n      description: 'Read chat messages and conversations',\n      icon: MessageSquare,\n      required: true\n    },\n    {\n      scope: 'Calendars.Read',\n      description: 'Read meeting information and schedules',\n      icon: Calendar,\n      required: true\n    },\n    {\n      scope: 'User.Read.All',\n      description: 'Read user profiles and information',\n      icon: Users,\n      required: false\n    }\n  ];\n\n  const expectedInsights = [\n    {\n      title: 'Communication Patterns',\n      description: 'Understand when and how your team communicates most effectively',\n      icon: TrendingUp,\n      metrics: ['Peak activity hours', 'Response time analysis', 'Channel activity levels']\n    },\n    {\n      title: 'Meeting Analytics',\n      description: 'Optimize meeting efficiency and attendance patterns',\n      icon: Video,\n      metrics: ['Meeting frequency', 'Duration analysis', 'Attendance rates']\n    },\n    {\n      title: 'Cross-Platform Intelligence',\n      description: 'Compare Teams vs Slack usage for optimization recommendations',\n      icon: BarChart3,\n      metrics: ['Platform preferences', 'Tool efficiency', 'Communication gaps']\n    },\n    {\n      title: 'Team Collaboration Health',\n      description: 'Monitor team engagement and collaboration effectiveness',\n      icon: Target,\n      metrics: ['Response rates', 'Collaboration frequency', 'Engagement scores']\n    }\n  ];\n\n  useEffect(() => {\n    // Calculate setup progress based on completed steps\n    const completedSteps = setupSteps.filter(step => step.completed).length;\n    setSetupProgress((completedSteps / setupSteps.length) * 100);\n  }, [connectionStatus, setupSteps]);\n\n  const handleConnect = async () => {\n    try {\n      setIsConnecting(true);\n      setConnectionStatus('connecting');\n      setError(null);\n\n      // Initiate OAuth flow\n      const authUrl = teamsService.initiateAuth();\n      \n      // Open OAuth window\n      const authWindow = window.open(\n        authUrl,\n        'teams-auth',\n        'width=600,height=700,scrollbars=yes,resizable=yes'\n      );\n\n      // Listen for OAuth completion\n      const handleMessage = async (event: MessageEvent) => {\n        if (event.origin !== window.location.origin) return;\n        \n        if (event.data.type === 'teams-oauth-success') {\n          authWindow?.close();\n          \n          // Handle OAuth callback\n          const { code, state } = event.data;\n          await teamsService.handleCallback(code, state);\n          \n          // Test connection and get initial data\n          const testResult = await teamsService.testConnection();\n          if (testResult.success) {\n            setConnectionStatus('connected');\n            setTeamsData(testResult.data);\n            setCurrentStep(1);\n          } else {\n            throw new Error(testResult.message);\n          }\n        } else if (event.data.type === 'teams-oauth-error') {\n          authWindow?.close();\n          throw new Error(event.data.error);\n        }\n      };\n\n      window.addEventListener('message', handleMessage);\n      \n      // Cleanup listener after timeout\n      setTimeout(() => {\n        window.removeEventListener('message', handleMessage);\n        if (authWindow && !authWindow.closed) {\n          authWindow.close();\n          setConnectionStatus('error');\n          setError('Authentication timed out. Please try again.');\n        }\n      }, 300000); // 5 minutes timeout\n\n    } catch (err) {\n      setConnectionStatus('error');\n      setError(err instanceof Error ? err.message : 'Failed to connect to Microsoft Teams');\n    } finally {\n      setIsConnecting(false);\n    }\n  };\n\n  const handlePermissionApproval = () => {\n    setCurrentStep(2);\n    // Start initial sync\n    setTimeout(() => {\n      setCurrentStep(3);\n    }, 3000);\n  };\n\n  const handleAnalyticsSetup = () => {\n    // Complete setup\n    onComplete?.({\n      platform: 'microsoft-teams',\n      status: 'connected',\n      config: {\n        tenantId,\n        clientId,\n        permissions: requiredPermissions.map(p => p.scope)\n      },\n      data: teamsData\n    });\n  };\n\n  const renderStepContent = () => {\n    switch (currentStep) {\n      case 0:\n        return (\n          <div className=\"space-y-6\">\n            <div className=\"text-center space-y-4\">\n              <div className=\"flex justify-center\">\n                <div className=\"w-16 h-16 bg-primary/10 rounded-full flex items-center justify-center\">\n                  <MessageSquare className=\"w-8 h-8 text-primary\" />\n                </div>\n              </div>\n              <div>\n                <h3 className=\"text-lg font-semibold\">Connect Microsoft Teams</h3>\n                <p className=\"text-muted-foreground\">\n                  Securely connect your Microsoft 365 account to start analyzing your Teams communication data\n                </p>\n              </div>\n            </div>\n\n            {connectionStatus === 'error' && error && (\n              <Alert variant=\"error\">\n                <AlertTriangle className=\"h-4 w-4\" />\n                <AlertDescription>{error}</AlertDescription>\n              </Alert>\n            )}\n\n            <div className=\"space-y-4\">\n              <div>\n                <Label htmlFor=\"tenant-id\">Tenant ID (Optional)</Label>\n                <Input\n                  id=\"tenant-id\"\n                  placeholder=\"Enter your Microsoft 365 Tenant ID\"\n                  value={tenantId}\n                  onChange={(e) => setTenantId(e.target.value)}\n                />\n                <p className=\"text-sm text-muted-foreground mt-1\">\n                  Leave blank to use the default authentication flow\n                </p>\n              </div>\n\n              <Button \n                onClick={handleConnect}\n                disabled={isConnecting}\n                className=\"w-full\"\n                size=\"lg\"\n              >\n                {isConnecting ? (\n                  <>\n                    <Loader2 className=\"w-4 h-4 mr-2 animate-spin\" />\n                    Connecting to Teams...\n                  </>\n                ) : (\n                  <>\n                    <Shield className=\"w-4 h-4 mr-2\" />\n                    Connect with Microsoft\n                  </>\n                )}\n              </Button>\n            </div>\n\n            <div className=\"bg-muted/50 p-4 rounded-lg\">\n              <h4 className=\"font-medium mb-2 flex items-center\">\n                <Shield className=\"w-4 h-4 mr-2\" />\n                Enterprise Security\n              </h4>\n              <ul className=\"text-sm text-muted-foreground space-y-1\">\n                <li>• OAuth 2.0 authentication with Microsoft</li>\n                <li>• No passwords stored - tokens are encrypted</li>\n                <li>• Read-only access to protect your data</li>\n                <li>• Compliant with Microsoft security standards</li>\n              </ul>\n            </div>\n          </div>\n        );\n\n      case 1:\n        return (\n          <div className=\"space-y-6\">\n            <div className=\"text-center space-y-4\">\n              <div className=\"flex justify-center\">\n                <div className=\"w-16 h-16 bg-success/10 rounded-full flex items-center justify-center\">\n                  <CheckCircle2 className=\"w-8 h-8 text-success\" />\n                </div>\n              </div>\n              <div>\n                <h3 className=\"text-lg font-semibold\">Review Permissions</h3>\n                <p className=\"text-muted-foreground\">\n                  These permissions enable comprehensive Teams analytics while protecting your privacy\n                </p>\n              </div>\n            </div>\n\n            <div className=\"space-y-4\">\n              {requiredPermissions.map((permission) => {\n                const Icon = permission.icon;\n                return (\n                  <div key={permission.scope} className=\"flex items-start space-x-4 p-4 border rounded-lg\">\n                    <Icon className=\"w-5 h-5 text-primary mt-0.5\" />\n                    <div className=\"flex-1\">\n                      <div className=\"flex items-center space-x-2\">\n                        <span className=\"font-medium\">{permission.scope}</span>\n                        {permission.required && (\n                          <Badge variant=\"secondary\" className=\"text-xs\">Required</Badge>\n                        )}\n                      </div>\n                      <p className=\"text-sm text-muted-foreground\">{permission.description}</p>\n                    </div>\n                  </div>\n                );\n              })}\n            </div>\n\n            <Alert>\n              <Shield className=\"h-4 w-4\" />\n              <AlertDescription>\n                All data is processed locally and used only for generating insights. \n                Your Teams content remains private and secure.\n              </AlertDescription>\n            </Alert>\n\n            <Button onClick={handlePermissionApproval} className=\"w-full\" size=\"lg\">\n              Approve Permissions & Continue\n            </Button>\n          </div>\n        );\n\n      case 2:\n        return (\n          <div className=\"space-y-6\">\n            <div className=\"text-center space-y-4\">\n              <div className=\"flex justify-center\">\n                <div className=\"w-16 h-16 bg-primary/10 rounded-full flex items-center justify-center\">\n                  <Loader2 className=\"w-8 h-8 text-primary animate-spin\" />\n                </div>\n              </div>\n              <div>\n                <h3 className=\"text-lg font-semibold\">Importing Teams Data</h3>\n                <p className=\"text-muted-foreground\">\n                  We're securely importing your Teams data to generate insights\n                </p>\n              </div>\n            </div>\n\n            <div className=\"space-y-4\">\n              <div className=\"space-y-2\">\n                <div className=\"flex justify-between text-sm\">\n                  <span>Overall Progress</span>\n                  <span>75%</span>\n                </div>\n                <Progress value={75} className=\"h-2\" />\n              </div>\n\n              <div className=\"grid grid-cols-2 gap-4\">\n                <div className=\"text-center p-4 border rounded-lg\">\n                  <Users className=\"w-6 h-6 mx-auto text-primary mb-2\" />\n                  <div className=\"text-2xl font-bold\">{teamsData?.totalTeams || 0}</div>\n                  <div className=\"text-sm text-muted-foreground\">Teams</div>\n                </div>\n                <div className=\"text-center p-4 border rounded-lg\">\n                  <MessageSquare className=\"w-6 h-6 mx-auto text-primary mb-2\" />\n                  <div className=\"text-2xl font-bold\">{teamsData?.totalChannels || 0}</div>\n                  <div className=\"text-sm text-muted-foreground\">Channels</div>\n                </div>\n              </div>\n\n              <div className=\"bg-muted/50 p-4 rounded-lg\">\n                <h4 className=\"font-medium mb-2\">Currently Importing:</h4>\n                <ul className=\"text-sm text-muted-foreground space-y-1\">\n                  <li>✓ Team and channel structure</li>\n                  <li>✓ User profiles and roles</li>\n                  <li className=\"flex items-center\">\n                    <Loader2 className=\"w-3 h-3 mr-2 animate-spin\" />\n                    Recent messages and conversations\n                  </li>\n                  <li>• Meeting history and analytics</li>\n                </ul>\n              </div>\n            </div>\n          </div>\n        );\n\n      case 3:\n        return (\n          <div className=\"space-y-6\">\n            <div className=\"text-center space-y-4\">\n              <div className=\"flex justify-center\">\n                <div className=\"w-16 h-16 bg-success/10 rounded-full flex items-center justify-center\">\n                  <BarChart3 className=\"w-8 h-8 text-success\" />\n                </div>\n              </div>\n              <div>\n                <h3 className=\"text-lg font-semibold\">Analytics Ready!</h3>\n                <p className=\"text-muted-foreground\">\n                  Your Teams integration is complete. Here's what insights you'll get:\n                </p>\n              </div>\n            </div>\n\n            <div className=\"grid gap-4\">\n              {expectedInsights.map((insight) => {\n                const Icon = insight.icon;\n                return (\n                  <div key={insight.title} className=\"p-4 border rounded-lg\">\n                    <div className=\"flex items-start space-x-4\">\n                      <Icon className=\"w-5 h-5 text-primary mt-0.5\" />\n                      <div className=\"flex-1\">\n                        <h4 className=\"font-medium\">{insight.title}</h4>\n                        <p className=\"text-sm text-muted-foreground mb-2\">{insight.description}</p>\n                        <div className=\"flex flex-wrap gap-1\">\n                          {insight.metrics.map((metric) => (\n                            <Badge key={metric} variant=\"outline\" className=\"text-xs\">\n                              {metric}\n                            </Badge>\n                          ))}\n                        </div>\n                      </div>\n                    </div>\n                  </div>\n                );\n              })}\n            </div>\n\n            <Alert>\n              <Zap className=\"h-4 w-4\" />\n              <AlertDescription>\n                <strong>Pro Tip:</strong> Combine with Slack integration for comprehensive \n                cross-platform communication insights and optimization recommendations.\n              </AlertDescription>\n            </Alert>\n\n            <Button onClick={handleAnalyticsSetup} className=\"w-full\" size=\"lg\">\n              <CheckCircle2 className=\"w-4 h-4 mr-2\" />\n              Complete Teams Setup\n            </Button>\n          </div>\n        );\n\n      default:\n        return null;\n    }\n  };\n\n  return (\n    <div className=\"max-w-2xl mx-auto p-6\">\n      <div className=\"mb-8\">\n        <div className=\"flex items-center justify-between mb-4\">\n          <div>\n            <h2 className=\"text-2xl font-bold\">Microsoft Teams Integration</h2>\n            <p className=\"text-muted-foreground\">\n              Connect Teams for comprehensive communication intelligence\n            </p>\n          </div>\n          <div className=\"text-right\">\n            <div className=\"text-sm text-muted-foreground\">Setup Progress</div>\n            <div className=\"text-2xl font-bold\">{Math.round(setupProgress)}%</div>\n          </div>\n        </div>\n\n        {/* Progress Steps */}\n        <div className=\"flex items-center space-x-2 mb-6\">\n          {setupSteps.map((step, index) => (\n            <React.Fragment key={step.id}>\n              <div className={`flex items-center space-x-2 px-4 py-2 rounded-full text-sm ${\n                step.completed \n                  ? 'bg-success/10 text-success'\n                  : step.current\n                  ? 'bg-primary/10 text-primary'\n                  : 'bg-muted text-muted-foreground'\n              }`}>\n                {step.completed ? (\n                  <CheckCircle2 className=\"w-4 h-4\" />\n                ) : (\n                  <div className={`w-4 h-4 rounded-full border-2 ${\n                    step.current ? 'border-blue-600 bg-primary' : 'border-muted-foreground'\n                  }`} />\n                )}\n                <span className=\"hidden sm:inline\">{step.title}</span>\n              </div>\n              {index < setupSteps.length - 1 && (\n                <div className=\"w-8 h-px bg-muted\" />\n              )}\n            </React.Fragment>\n          ))}\n        </div>\n      </div>\n\n      <Card>\n        <CardContent className=\"p-6\">\n          {renderStepContent()}\n        </CardContent>\n      </Card>\n\n      {/* Cancel/Back Actions */}\n      <div className=\"flex justify-between mt-6\">\n        <Button variant=\"outline\" onClick={onCancel}>\n          Cancel Setup\n        </Button>\n        {currentStep > 0 && connectionStatus !== 'connecting' && (\n          <Button \n            variant=\"outline\" \n            onClick={() => setCurrentStep(Math.max(0, currentStep - 1))}\n          >\n            Previous Step\n          </Button>\n        )}\n      </div>\n    </div>\n  );\n};\n\nexport default MicrosoftTeamsSetup; ","usedDeprecatedRules":[]},{"filePath":"/home/vonj/Github/Nexus/src/components/integrations/ModernMicrosoft365Integration.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'Settings' is defined but never used.","line":20,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":20,"endColumn":11},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'useAuth' is defined but never used.","line":29,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":29,"endColumn":17},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'Providers' is defined but never used.","line":30,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":30,"endColumn":19},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'ProviderState' is defined but never used.","line":30,"column":21,"nodeType":null,"messageId":"unusedVar","endLine":30,"endColumn":34},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'GraphLogin' is defined but never used.","line":32,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":32,"endColumn":13},{"ruleId":"no-restricted-syntax","severity":1,"message":"Use design tokens instead of hardcoded colors (e.g., bg-primary, bg-secondary)","line":303,"column":34,"nodeType":"Literal","messageId":"restrictedSyntax","endLine":303,"endColumn":86},{"ruleId":"no-restricted-syntax","severity":1,"message":"Use design tokens instead of hardcoded text colors (e.g., text-foreground, text-muted-foreground)","line":304,"column":35,"nodeType":"Literal","messageId":"restrictedSyntax","endLine":304,"endColumn":86},{"ruleId":"no-restricted-syntax","severity":1,"message":"Use design tokens instead of hardcoded text colors (e.g., text-foreground, text-muted-foreground)","line":307,"column":35,"nodeType":"Literal","messageId":"restrictedSyntax","endLine":307,"endColumn":87},{"ruleId":"no-restricted-syntax","severity":1,"message":"Use design tokens instead of hardcoded colors (e.g., bg-primary, bg-secondary)","line":328,"column":34,"nodeType":"Literal","messageId":"restrictedSyntax","endLine":328,"endColumn":114},{"ruleId":"no-restricted-syntax","severity":1,"message":"Use design tokens instead of hardcoded text colors (e.g., text-foreground, text-muted-foreground)","line":330,"column":47,"nodeType":"Literal","messageId":"restrictedSyntax","endLine":330,"endColumn":71}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":10,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\n * Modern Microsoft 365 Integration Component\n * Pillar: 2 - Minimum Lovable Feature Set\n * \n * Uses Microsoft Graph Toolkit for best-practice Microsoft 365 integration\n * Replaces custom OAuth flows with official Microsoft components\n */\n\nimport React, { useState, useEffect } from 'react';\nimport {\n  Calendar,\n  Mail,\n  MessageSquare,\n  Users,\n  CheckCircle2,\n  AlertCircle,\n  Loader2,\n  Shield,\n  Zap,\n  Settings,\n  ExternalLink\n} from 'lucide-react';\nimport { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/Card';\nimport { Button } from '@/components/ui/Button';\nimport { Badge } from '@/components/ui/Badge';\nimport { Alert, AlertDescription } from '@/components/ui/Alert';\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from '@/components/ui/Tabs';\nimport { useNotifications } from '@/contexts/NotificationContext';\nimport { useAuth } from '@/contexts/AuthContext';\nimport { Providers, ProviderState } from '@microsoft/mgt-element';\nimport {\n  GraphLogin,\n  GraphPerson,\n  GraphAgenda,\n  GraphPeoplePicker,\n  GraphFileList\n} from '@/components/microsoft365/GraphToolkitComponents';\nimport { useM365Integration } from '@/hooks/useM365Integration';\n\ninterface ModernMicrosoft365IntegrationProps {\n  onComplete?: () => void;\n}\n\nexport const ModernMicrosoft365Integration: React.FC<ModernMicrosoft365IntegrationProps> = ({\n  onComplete\n}) => {\n  const { isConnected, isConnecting, error, connect, disconnect } = useM365Integration();\n  const [selectedTab, setSelectedTab] = useState('overview');\n  const { addNotification } = useNotifications();\n\n  useEffect(() => {\n    if (error) {\n      addNotification({\n        type: 'error',\n        message: `Microsoft 365 Error: ${error.message}`\n      });\n    }\n  }, [error, addNotification]);\n\n  const handleConnect = async () => {\n    await connect();\n    if (!error) {\n      addNotification({\n        type: 'success',\n        message: 'Successfully connected to Microsoft 365!'\n      });\n    }\n  };\n\n  const handleDisconnect = async () => {\n    await disconnect();\n    addNotification({\n      type: 'success',\n      message: 'Disconnected from Microsoft 365'\n    });\n    onComplete?.();\n  };\n\n  const features = [\n    {\n      id: 'login',\n      title: 'User Authentication',\n      description: 'Secure Microsoft 365 login with automatic token management',\n      icon: <Shield className=\"w-6 h-6 text-primary\" />,\n      component: 'Login',\n      status: isConnected ? 'available' : 'requires_auth'\n    },\n    {\n      id: 'person',\n      title: 'User Profile',\n      description: 'Rich user profile display with organization context',\n      icon: <Users className=\"w-6 h-6 text-secondary\" />,\n      component: 'Person',\n      status: isConnected ? 'available' : 'requires_auth'\n    },\n    {\n      id: 'emails',\n      title: 'Email Access',\n      description: 'Read and manage emails through Microsoft Graph',\n      icon: <Mail className=\"w-6 h-6 text-primary\" />,\n      component: 'Get (Email API)',\n      status: isConnected ? 'available' : 'requires_auth'\n    },\n    {\n      id: 'people',\n      title: 'People Picker',\n      description: 'Search and select people from your organization',\n      icon: <Users className=\"w-6 h-6 text-warning\" />,\n      component: 'PeoplePicker',\n      status: isConnected ? 'available' : 'requires_auth'\n    },\n    {\n      id: 'files',\n      title: 'File Browser',\n      description: 'Browse OneDrive and SharePoint files',\n      icon: <MessageSquare className=\"w-6 h-6 text-secondary\" />,\n      component: 'FileList',\n      status: isConnected ? 'available' : 'requires_auth'\n    },\n    {\n      id: 'calendar',\n      title: 'Calendar / Agenda',\n      description: 'View your Outlook calendar events and meetings',\n      icon: <Calendar className=\"w-6 h-6 text-accent\" />,\n      component: 'Agenda',\n      status: isConnected ? 'available' : 'requires_auth'\n    }\n  ];\n\n  return (\n    <div className=\"space-y-6\">\n      {/* Header */}\n      <div className=\"text-center\">\n        <div className=\"w-16 h-16 bg-primary/10 dark:bg-primary/20 rounded-full flex items-center justify-center mx-auto mb-4\">\n          <Shield className=\"w-8 h-8 text-primary dark:text-primary\" />\n        </div>\n        <h2 className=\"text-2xl font-bold mb-2\">Microsoft Graph Toolkit Integration</h2>\n        <p className=\"text-muted-foreground\">\n          Modern Microsoft 365 integration using official Microsoft Graph Toolkit components\n        </p>\n      </div>\n\n      {/* Connection Status */}\n      {isConnecting ? (\n        <Alert>\n          <Loader2 className=\"w-4 h-4 animate-spin\" />\n          <AlertDescription>\n            Checking Microsoft 365 connection status...\n          </AlertDescription>\n        </Alert>\n      ) : isConnected ? (\n        <Alert>\n          <CheckCircle2 className=\"w-4 h-4\" />\n          <AlertDescription>\n            <strong>Connected:</strong> Microsoft Graph Toolkit is active and authenticated.\n            All Microsoft 365 features are now available.\n          </AlertDescription>\n        </Alert>\n      ) : (\n        <Alert>\n          <AlertCircle className=\"w-4 h-4\" />\n          <AlertDescription>\n            <strong>Not Connected:</strong> Connect to Microsoft 365 to enable Graph Toolkit components.\n          </AlertDescription>\n        </Alert>\n      )}\n\n      <Tabs value={selectedTab} onValueChange={setSelectedTab}>\n        <TabsList className=\"grid w-full grid-cols-3\">\n          <TabsTrigger value=\"overview\">Overview</TabsTrigger>\n          <TabsTrigger value=\"components\">Live Demo</TabsTrigger>\n          <TabsTrigger value=\"setup\">Setup</TabsTrigger>\n        </TabsList>\n\n        <TabsContent value=\"overview\" className=\"space-y-4\">\n          <Card>\n            <CardHeader>\n              <CardTitle className=\"flex items-center space-x-2\">\n                <Zap className=\"w-5 h-5\" />\n                <span>Microsoft Graph Toolkit Benefits</span>\n              </CardTitle>\n            </CardHeader>\n            <CardContent className=\"space-y-4\">\n              <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n                <div className=\"space-y-2\">\n                  <h4 className=\"font-medium\">🚀 Pre-built Components</h4>\n                  <p className=\"text-sm text-muted-foreground\">\n                    Ready-to-use React components for common Microsoft 365 scenarios\n                  </p>\n                </div>\n                <div className=\"space-y-2\">\n                  <h4 className=\"font-medium\">🔒 Secure Authentication</h4>\n                  <p className=\"text-sm text-muted-foreground\">\n                    MSAL2-based authentication with automatic token management\n                  </p>\n                </div>\n                <div className=\"space-y-2\">\n                  <h4 className=\"font-medium\">⚡ Optimized Performance</h4>\n                  <p className=\"text-sm text-muted-foreground\">\n                    Built-in caching, batching, and error handling\n                  </p>\n                </div>\n                <div className=\"space-y-2\">\n                  <h4 className=\"font-medium\">🎨 Customizable UI</h4>\n                  <p className=\"text-sm text-muted-foreground\">\n                    CSS custom properties and templating support\n                  </p>\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n\n          <Card>\n            <CardHeader>\n              <CardTitle>Available Features</CardTitle>\n            </CardHeader>\n            <CardContent>\n              <div className=\"grid grid-cols-2 md:grid-cols-3 gap-4\">\n                {features.map((feature) => (\n                  <div key={feature.id} className=\"flex items-center space-x-3 p-3 border rounded-lg\">\n                    {feature.icon}\n                    <div className=\"flex-1 min-w-0\">\n                      <p className=\"text-sm font-medium\">{feature.title}</p>\n                      <Badge \n                        variant={feature.status === 'available' ? 'default' : 'secondary'}\n                        className=\"text-xs\"\n                      >\n                        {feature.status === 'available' ? 'Ready' : 'Auth Required'}\n                      </Badge>\n                    </div>\n                  </div>\n                ))}\n              </div>\n            </CardContent>\n          </Card>\n        </TabsContent>\n\n        <TabsContent value=\"components\" className=\"space-y-4\">\n          {isConnected ? (\n            <div className=\"grid gap-6\">\n              <Card>\n                <CardHeader>\n                  <CardTitle>User Profile</CardTitle>\n                </CardHeader>\n                <CardContent>\n                  <GraphPerson view=\"threelines\" className=\"mb-4\" />\n                </CardContent>\n              </Card>\n\n              <Card>\n                <CardHeader>\n                  <CardTitle>People Picker</CardTitle>\n                </CardHeader>\n                <CardContent>\n                  <GraphPeoplePicker \n                    selectionMode=\"multiple\"\n                    className=\"w-full\"\n                  />\n                </CardContent>\n              </Card>\n\n              <Card>\n                <CardHeader>\n                  <CardTitle>My Agenda</CardTitle>\n                </CardHeader>\n                <CardContent>\n                  <GraphAgenda />\n                </CardContent>\n              </Card>\n\n              <Card>\n                <CardHeader>\n                  <CardTitle>File Browser</CardTitle>\n                </CardHeader>\n                <CardContent>\n                  <GraphFileList />\n                </CardContent>\n              </Card>\n            </div>\n          ) : (\n            <Alert>\n              <AlertCircle className=\"w-4 h-4\" />\n              <AlertDescription>\n                Please connect to your Microsoft 365 account in the \"Setup\" tab to see live components.\n              </AlertDescription>\n            </Alert>\n          )}\n        </TabsContent>\n\n        <TabsContent value=\"setup\" className=\"space-y-4\">\n          <Card>\n            <CardHeader>\n              <CardTitle>Connection Setup</CardTitle>\n            </CardHeader>\n            <CardContent className=\"space-y-4\">\n              {!isConnected ? (\n                <div>\n                  <p className=\"text-sm text-muted-foreground mb-4\">\n                    Connect your Microsoft 365 account to enable Microsoft Graph Toolkit components.\n                    This uses the official Microsoft authentication flow with MSAL2.\n                  </p>\n                  \n                  <div className=\"bg-blue-50 dark:bg-blue-900/20 p-4 rounded-lg mb-4\">\n                    <h4 className=\"font-medium text-blue-900 dark:text-blue-100 mb-2\">\n                      What happens when you connect:\n                    </h4>\n                    <ul className=\"text-sm text-blue-800 dark:text-blue-200 space-y-1\">\n                      <li>• Secure authentication through Microsoft</li>\n                      <li>• Automatic token management and refresh</li>\n                      <li>• Access to your calendar, email, and files</li>\n                      <li>• No passwords stored locally</li>\n                    </ul>\n                  </div>\n\n                  <Button onClick={handleConnect} disabled={isConnecting} className=\"w-full\">\n                    {isConnecting ? (\n                      <>\n                        <Loader2 className=\"w-4 h-4 mr-2 animate-spin\" />\n                        Connecting...\n                      </>\n                    ) : (\n                      'Connect to Microsoft 365'\n                    )}\n                  </Button>\n                </div>\n              ) : (\n                <div className=\"space-y-4\">\n                  <div className=\"flex items-center justify-between p-3 bg-green-50 dark:bg-green-900/20 rounded\">\n                    <div className=\"flex items-center space-x-2\">\n                      <CheckCircle2 className=\"w-5 h-5 text-green-600\" />\n                      <span className=\"font-medium\">Connected to Microsoft 365</span>\n                    </div>\n                    <Button variant=\"outline\" size=\"sm\" onClick={handleDisconnect}>\n                      Disconnect\n                    </Button>\n                  </div>\n                  \n                  <div className=\"space-y-2\">\n                    <h4 className=\"font-medium\">Active Features:</h4>\n                    <ul className=\"text-sm text-muted-foreground space-y-1 list-disc list-inside\">\n                      <li>Authentication tokens managed automatically</li>\n                      <li>Graph API calls optimized and cached</li>\n                      <li>All MGT components ready to use</li>\n                      <li>Real-time data synchronization</li>\n                    </ul>\n                  </div>\n                </div>\n              )}\n            </CardContent>\n          </Card>\n\n          <Card>\n            <CardHeader>\n              <CardTitle>Technical Details</CardTitle>\n            </CardHeader>\n            <CardContent className=\"space-y-3\">\n              <div className=\"text-sm space-y-2\">\n                <div className=\"flex justify-between\">\n                  <span>Provider:</span>\n                  <span className=\"font-mono\">MSAL2Provider</span>\n                </div>\n                <div className=\"flex justify-between\">\n                  <span>Authentication:</span>\n                  <span className=\"font-mono\">Microsoft Identity Platform</span>\n                </div>\n                <div className=\"flex justify-between\">\n                  <span>API Version:</span>\n                  <span className=\"font-mono\">Microsoft Graph v1.0</span>\n                </div>\n                <div className=\"flex justify-between\">\n                  <span>Toolkit Version:</span>\n                  <span className=\"font-mono\">@microsoft/mgt-react ^4.0.0</span>\n                </div>\n                <div className=\"flex justify-between\">\n                  <span>Status:</span>\n                  <Badge variant={isConnected ? 'default' : 'secondary'}>\n                    {isConnected ? 'Connected' : 'Disconnected'}\n                  </Badge>\n                </div>\n              </div>\n              \n              <div className=\"pt-3 border-t\">\n                <a \n                  href=\"https://learn.microsoft.com/en-us/graph/toolkit/\"\n                  target=\"_blank\"\n                  rel=\"noopener noreferrer\"\n                  className=\"w-full\"\n                >\n                  <Button variant=\"outline\" size=\"sm\" className=\"w-full\">\n                    <ExternalLink className=\"w-4 h-4 mr-2\" />\n                    View Microsoft Graph Toolkit Documentation\n                  </Button>\n                </a>\n              </div>\n            </CardContent>\n          </Card>\n        </TabsContent>\n      </Tabs>\n    </div>\n  );\n};\n\nexport default ModernMicrosoft365Integration; ","usedDeprecatedRules":[]},{"filePath":"/home/vonj/Github/Nexus/src/components/integrations/NinjaRmmSetup.tsx","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":22,"column":56,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":22,"endColumn":59,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1076,1079],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1076,1079],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has missing dependencies: 'checkConnectionStatus' and 'handleOAuthCallback'. Either include them or remove the dependency array.","line":32,"column":6,"nodeType":"ArrayExpression","endLine":32,"endColumn":16,"suggestions":[{"desc":"Update the dependencies array to be: [checkConnectionStatus, handleOAuthCallback, user?.id]","fix":{"range":[1297,1307],"text":"[checkConnectionStatus, handleOAuthCallback, user?.id]"}}]},{"ruleId":"no-restricted-syntax","severity":1,"message":"Use design tokens instead of hardcoded text colors (e.g., text-foreground, text-muted-foreground)","line":208,"column":35,"nodeType":"Literal","messageId":"restrictedSyntax","endLine":208,"endColumn":59},{"ruleId":"no-restricted-syntax","severity":1,"message":"Use design tokens instead of hardcoded text colors (e.g., text-foreground, text-muted-foreground)","line":212,"column":36,"nodeType":"Literal","messageId":"restrictedSyntax","endLine":212,"endColumn":59},{"ruleId":"no-restricted-syntax","severity":1,"message":"Use design tokens instead of hardcoded text colors (e.g., text-foreground, text-muted-foreground)","line":238,"column":38,"nodeType":"Literal","messageId":"restrictedSyntax","endLine":238,"endColumn":62}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState, useEffect } from 'react';\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/Card';\nimport { Button } from '@/components/ui/Button';\nimport { Alert, AlertDescription } from '@/components/ui/Alert';\nimport { Badge } from '@/components/ui/Badge';\nimport { Loader2, CheckCircle, AlertCircle, ExternalLink, Shield, Monitor } from 'lucide-react';\nimport { useAuth } from '@/contexts/AuthContext';\nimport { useNotifications } from '@/contexts/NotificationContext';\nimport { NinjaRmmService } from '@/lib/services/ninjaRmmService';\n\ninterface NinjaRmmSetupProps {\n  onConnectionChange?: (isConnected: boolean) => void;\n}\n\nexport const NinjaRmmSetup: React.FC<NinjaRmmSetupProps> = ({ onConnectionChange }) => {\n  const { user } = useAuth();\n  const { addNotification } = useNotifications();\n  \n  const [isConnected, setIsConnected] = useState(false);\n  const [isLoading, setIsLoading] = useState(true);\n  const [isConnecting, setIsConnecting] = useState(false);\n  const [connectionData, setConnectionData] = useState<any>(null);\n  const [error, setError] = useState<string>('');\n\n  const ninjaService = new NinjaRmmService();\n\n  useEffect(() => {\n    if (user?.id) {\n      checkConnectionStatus();\n      handleOAuthCallback();\n    }\n  }, [user?.id]);\n\n  const checkConnectionStatus = async () => {\n    if (!user?.id) return;\n    \n    try {\n      setIsLoading(true);\n      setError('');\n      \n      const status = await ninjaService.getIntegrationStatus(user.id);\n      setIsConnected(status.isConnected);\n      setConnectionData(status.config);\n      onConnectionChange?.(status.isConnected);\n    } catch (err) {\n      console.error('Error checking connection status:', err);\n      setError('Failed to check connection status');\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  const handleConnect = async () => {\n    if (!user?.id) return;\n    \n    try {\n      setIsConnecting(true);\n      setError('');\n      \n      // Get OAuth URL and redirect user\n      const authUrl = await ninjaService.initiateAuth(user.id);\n      \n      // Open OAuth flow in current window\n      window.location.href = authUrl;\n      \n    } catch (err) {\n      console.error('Error initiating NinjaRMM connection:', err);\n      setError(err instanceof Error ? err.message : 'Failed to connect to NinjaRMM');\n      setIsConnecting(false);\n    }\n  };\n\n  const handleTestConnection = async () => {\n    if (!user?.id) return;\n    \n    try {\n      setIsLoading(true);\n      setError('');\n      \n      const result = await ninjaService.testConnection(user.id);\n      \n      if (result.success) {\n        addNotification({\n          type: 'success',\n          message: 'NinjaRMM connection test successful!'\n        });\n      } else {\n        setError(result.error || 'Connection test failed');\n        addNotification({\n          type: 'error',\n          message: result.error || 'Connection test failed'\n        });\n      }\n    } catch (err) {\n      const errorMessage = err instanceof Error ? err.message : 'Connection test failed';\n      setError(errorMessage);\n      addNotification({\n        type: 'error',\n        message: errorMessage\n      });\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  const handleDisconnect = async () => {\n    if (!user?.id) return;\n    \n    try {\n      setIsLoading(true);\n      setError('');\n      \n      const result = await ninjaService.disconnect(user.id);\n      \n      if (result.success) {\n        setIsConnected(false);\n        setConnectionData(null);\n        onConnectionChange?.(false);\n        addNotification({\n          type: 'success',\n          message: 'NinjaRMM disconnected successfully'\n        });\n      } else {\n        setError(result.error || 'Failed to disconnect');\n      }\n    } catch (err) {\n      const errorMessage = err instanceof Error ? err.message : 'Failed to disconnect';\n      setError(errorMessage);\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  // Handle OAuth callback from URL parameters\n  const handleOAuthCallback = () => {\n    const urlParams = new URLSearchParams(window.location.search);\n    const success = urlParams.get('success');\n    const error = urlParams.get('error');\n\n    if (success === 'ninjarmm') {\n      addNotification({\n        type: 'success',\n        message: 'NinjaRMM connected successfully!'\n      });\n      // Clean up URL parameters\n      window.history.replaceState({}, document.title, window.location.pathname);\n      // Refresh connection status\n      setTimeout(() => checkConnectionStatus(), 1000);\n    } else if (error) {\n      addNotification({\n        type: 'error',\n        message: `NinjaRMM connection failed: ${decodeURIComponent(error)}`\n      });\n      // Clean up URL parameters\n      window.history.replaceState({}, document.title, window.location.pathname);\n    }\n  };\n\n  if (isLoading && !isConnecting) {\n    return (\n      <Card>\n        <CardHeader>\n          <CardTitle className=\"flex items-center gap-2\">\n            <Monitor className=\"h-5 w-5\" />\n            NinjaRMM\n          </CardTitle>\n        </CardHeader>\n        <CardContent>\n          <div className=\"flex items-center justify-center py-8\">\n            <Loader2 className=\"h-6 w-6 animate-spin\" />\n          </div>\n        </CardContent>\n      </Card>\n    );\n  }\n\n  return (\n    <Card>\n      <CardHeader>\n        <CardTitle className=\"flex items-center gap-2\">\n          <Monitor className=\"h-5 w-5\" />\n          NinjaRMM\n          {isConnected && <Badge variant=\"default\">Connected</Badge>}\n        </CardTitle>\n        <CardDescription>\n          Connect your NinjaRMM account to monitor and manage IT assets through Nexus\n        </CardDescription>\n      </CardHeader>\n      <CardContent className=\"space-y-4\">\n        {error && (\n          <Alert variant=\"error\">\n            <AlertCircle className=\"h-4 w-4\" />\n            <AlertDescription>{error}</AlertDescription>\n          </Alert>\n        )}\n\n        {!isConnected ? (\n          <div className=\"space-y-4\">\n            <div className=\"space-y-2\">\n              <h4 className=\"font-medium\">Connect NinjaRMM</h4>\n              <p className=\"text-sm text-muted-foreground\">\n                Connect your NinjaRMM account to access device monitoring, management features, and automation capabilities.\n              </p>\n            </div>\n\n            <div className=\"space-y-3\">\n              <div className=\"flex items-center gap-2 text-sm\">\n                <Shield className=\"h-4 w-4 text-green-600\" />\n                <span>Secure OAuth 2.0 authentication</span>\n              </div>\n              <div className=\"flex items-center gap-2 text-sm\">\n                <Monitor className=\"h-4 w-4 text-blue-600\" />\n                <span>Access to device monitoring and management</span>\n              </div>\n            </div>\n\n            <Button \n              onClick={handleConnect}\n              disabled={isConnecting}\n              className=\"w-full\"\n            >\n              {isConnecting ? (\n                <>\n                  <Loader2 className=\"mr-2 h-4 w-4 animate-spin\" />\n                  Connecting...\n                </>\n              ) : (\n                <>\n                  <ExternalLink className=\"mr-2 h-4 w-4\" />\n                  Connect to NinjaRMM\n                </>\n              )}\n            </Button>\n          </div>\n        ) : (\n          <div className=\"space-y-4\">\n            <div className=\"flex items-center gap-2\">\n              <CheckCircle className=\"h-5 w-5 text-green-600\" />\n              <span className=\"font-medium\">Connected to NinjaRMM</span>\n            </div>\n\n            {connectionData && (\n              <div className=\"space-y-2 text-sm\">\n                <div>\n                  <span className=\"font-medium\">Scopes:</span> {connectionData.scope || 'monitoring, management'}\n                </div>\n                {connectionData.expires_at && (\n                  <div>\n                    <span className=\"font-medium\">Token expires:</span> {new Date(connectionData.expires_at).toLocaleDateString()}\n                  </div>\n                )}\n              </div>\n            )}\n\n            <div className=\"flex gap-2\">\n              <Button \n                variant=\"outline\" \n                onClick={handleTestConnection}\n                disabled={isLoading}\n              >\n                {isLoading ? (\n                  <Loader2 className=\"mr-2 h-4 w-4 animate-spin\" />\n                ) : (\n                  'Test Connection'\n                )}\n              </Button>\n              \n              <Button \n                variant=\"outline\" \n                onClick={handleDisconnect}\n                disabled={isLoading}\n              >\n                Disconnect\n              </Button>\n            </div>\n          </div>\n        )}\n      </CardContent>\n    </Card>\n  );\n}; ","usedDeprecatedRules":[]},{"filePath":"/home/vonj/Github/Nexus/src/components/integrations/PayPalSetup.tsx","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":30,"column":62,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":30,"endColumn":65,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[941,944],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[941,944],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has a missing dependency: 'checkExistingIntegration'. Either include it or remove the dependency array.","line":37,"column":6,"nodeType":"ArrayExpression","endLine":37,"endColumn":12,"suggestions":[{"desc":"Update the dependencies array to be: [checkExistingIntegration, user]","fix":{"range":[1207,1213],"text":"[checkExistingIntegration, user]"}}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'error' is defined but never used.","line":137,"column":18,"nodeType":null,"messageId":"unusedVar","endLine":137,"endColumn":23}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState, useEffect } from 'react';\nimport { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/Card';\nimport { Button } from '@/components/ui/Button';\nimport { Badge } from '@/components/ui/Badge';\nimport { Alert, AlertDescription } from '@/components/ui/Alert';\nimport { \n  DollarSign, \n  CheckCircle, \n  AlertCircle, \n  Loader2, \n  RefreshCw,\n  ExternalLink,\n  CreditCard\n} from 'lucide-react';\nimport { useNotifications } from '@/contexts/NotificationContext';\nimport { useAuth } from '@/contexts/AuthContext';\nimport { supabase } from '../../lib/core/supabase';\n\ninterface PayPalSetupProps {\n  onComplete?: () => void;\n  onCancel?: () => void;\n}\n\nconst PayPalSetup: React.FC<PayPalSetupProps> = ({\n  onComplete,\n  onCancel\n}) => {\n  const [isConnecting, setIsConnecting] = useState(false);\n  const [isChecking, setIsChecking] = useState(false);\n  const [paypalIntegration, setPaypalIntegration] = useState<any>(null);\n  const [connectionStatus, setConnectionStatus] = useState<'disconnected' | 'connected' | 'error'>('disconnected');\n  const { addNotification } = useNotifications();\n  const { user } = useAuth();\n\n  useEffect(() => {\n    checkExistingIntegration();\n  }, [user]);\n\n  const checkExistingIntegration = async () => {\n    if (!user) return;\n    \n    setIsChecking(true);\n    try {\n      // Get PayPal integration ID\n      const { data: integration, error: integrationError } = await supabase\n        .from('integrations')\n        .select('id')\n        .eq('slug', 'paypal')\n        .single();\n\n      if (integrationError || !integration) {\n        console.warn('PayPal integration not found in database');\n        setConnectionStatus('disconnected');\n        return;\n      }\n\n      // Check if user has this integration connected\n      const { data: userIntegration, error: userIntegrationError } = await supabase\n        .from('user_integrations')\n        .select('*')\n        .eq('user_id', user.id)\n        .eq('integration_id', integration.id)\n        .eq('status', 'active')\n        .maybeSingle();\n\n      if (userIntegrationError) {\n        console.error('Error checking PayPal integration:', userIntegrationError);\n        setConnectionStatus('error');\n        return;\n      }\n\n      if (userIntegration) {\n        setPaypalIntegration(userIntegration);\n        setConnectionStatus('connected');\n      } else {\n        setConnectionStatus('disconnected');\n      }\n\n    } catch (error) {\n      console.error('Error checking PayPal integration:', error);\n      setConnectionStatus('error');\n    } finally {\n      setIsChecking(false);\n    }\n  };\n\n  const handleConnect = async () => {\n    if (!user) {\n      addNotification({\n        type: 'error',\n        message: 'Please log in to connect PayPal'\n      });\n      return;\n    }\n\n    setIsConnecting(true);\n    \n    try {\n      const clientId = import.meta.env.VITE_PAYPAL_CLIENT_ID;\n      const supabaseUrl = import.meta.env.VITE_SUPABASE_URL;\n      \n      if (!clientId || !supabaseUrl) {\n        throw new Error('PayPal configuration missing. Please contact support.');\n      }\n\n      // Create state parameter with user ID and timestamp for security\n      const state = `${user.id}-${Date.now()}`;\n      \n      // Store state for verification\n      sessionStorage.setItem('paypal_oauth_state', state);\n      \n      const redirectUri = `${supabaseUrl}/functions/v1/paypal_oauth_callback`;\n      const scopes = encodeURIComponent('openid profile https://uri.paypal.com/services/paypalattributes');\n      const baseUrl = import.meta.env.VITE_PAYPAL_ENV === 'live' \n        ? 'https://www.paypal.com' \n        : 'https://www.sandbox.paypal.com';\n\n      const authUrl = `${baseUrl}/signin/authorize?response_type=code&client_id=${clientId}&scope=${scopes}&redirect_uri=${encodeURIComponent(redirectUri)}&state=${encodeURIComponent(state)}`;\n\n      // Open PayPal OAuth in popup\n      const popup = window.open(authUrl, 'paypal-oauth', 'width=600,height=800,scrollbars=yes,resizable=yes');\n      \n      if (!popup) {\n        throw new Error('Popup blocked. Please allow popups for this site and try again.');\n      }\n\n      // Poll for popup closure (indicates OAuth completion)\n      const pollTimer = setInterval(() => {\n        try {\n          if (popup.closed) {\n            clearInterval(pollTimer);\n            // Check if integration was successful\n            setTimeout(() => {\n              checkExistingIntegration();\n            }, 1000);\n          }\n        } catch (error) {\n          // Cross-origin access errors are expected\n        }\n      }, 1000);\n\n      addNotification({\n        type: 'info',\n        message: 'Complete the PayPal authorization in the popup window...'\n      });\n\n    } catch (error) {\n      console.error('PayPal connection error:', error);\n      addNotification({\n        type: 'error',\n        message: error instanceof Error ? error.message : 'Failed to connect PayPal. Please try again.'\n      });\n    } finally {\n      setIsConnecting(false);\n    }\n  };\n\n  const handleDisconnect = async () => {\n    if (!paypalIntegration) return;\n    \n    try {\n      const { error } = await supabase\n        .from('user_integrations')\n        .update({ status: 'inactive' })\n        .eq('id', paypalIntegration.id);\n\n      if (error) throw error;\n\n      setPaypalIntegration(null);\n      setConnectionStatus('disconnected');\n      \n      addNotification({\n        type: 'success',\n        message: 'PayPal integration disconnected successfully'\n      });\n      \n      onComplete?.();\n    } catch (error) {\n      console.error('Error disconnecting PayPal:', error);\n      addNotification({\n        type: 'error',\n        message: 'Failed to disconnect PayPal. Please try again.'\n      });\n    }\n  };\n\n  const handleRefreshToken = async () => {\n    if (!paypalIntegration) return;\n    \n    try {\n      const { error } = await supabase.functions.invoke('paypal_refresh_token', {\n        body: { orgId: user?.company_id }\n      });\n\n      if (error) throw error;\n\n      addNotification({\n        type: 'success',\n        message: 'PayPal tokens refreshed successfully'\n      });\n      \n      // Refresh integration status\n      await checkExistingIntegration();\n      \n    } catch (error) {\n      console.error('Token refresh error:', error);\n      addNotification({\n        type: 'error',\n        message: 'Failed to refresh PayPal tokens. Please try reconnecting.'\n      });\n    }\n  };\n\n  if (isChecking) {\n    return (\n      <Card>\n        <CardContent className=\"p-6\">\n          <div className=\"flex items-center justify-center\">\n            <Loader2 className=\"w-6 h-6 animate-spin mr-2\" />\n            <span>Checking PayPal connection...</span>\n          </div>\n        </CardContent>\n      </Card>\n    );\n  }\n\n  return (\n    <Card>\n      <CardHeader>\n        <div className=\"flex items-center justify-between\">\n          <div className=\"flex items-center space-x-3\">\n            <div className=\"w-10 h-10 bg-primary/10 rounded-lg flex items-center justify-center\">\n              <DollarSign className=\"w-6 h-6 text-primary\" />\n            </div>\n            <div>\n              <CardTitle className=\"flex items-center gap-2\">\n                PayPal Integration\n                {connectionStatus === 'connected' && (\n                  <Badge variant=\"secondary\" className=\"flex items-center gap-1\">\n                    <CheckCircle className=\"w-3 h-3\" />\n                    Connected\n                  </Badge>\n                )}\n                {connectionStatus === 'error' && (\n                  <Badge variant=\"destructive\" className=\"flex items-center gap-1\">\n                    <AlertCircle className=\"w-3 h-3\" />\n                    Error\n                  </Badge>\n                )}\n              </CardTitle>\n              <p className=\"text-sm text-muted-foreground\">\n                Connect your PayPal account to track transactions and revenue\n              </p>\n            </div>\n          </div>\n        </div>\n      </CardHeader>\n      \n      <CardContent className=\"space-y-4\">\n        {connectionStatus === 'disconnected' && (\n          <>\n            <Alert>\n              <CreditCard className=\"h-4 w-4\" />\n              <AlertDescription>\n                Connecting PayPal will allow Nexus to automatically track your payment transactions, \n                revenue metrics, and financial performance data.\n              </AlertDescription>\n            </Alert>\n\n            <div className=\"space-y-2\">\n              <h4 className=\"font-medium\">What you'll get:</h4>\n              <ul className=\"text-sm text-muted-foreground space-y-1\">\n                <li>• Automatic transaction tracking</li>\n                <li>• Revenue and payment analytics</li>\n                <li>• Financial performance insights</li>\n                <li>• Real-time payment notifications</li>\n              </ul>\n            </div>\n\n            <div className=\"flex gap-2 pt-4\">\n              <Button \n                onClick={handleConnect} \n                disabled={isConnecting}\n                className=\"flex-1\"\n              >\n                {isConnecting ? (\n                  <>\n                    <Loader2 className=\"w-4 h-4 mr-2 animate-spin\" />\n                    Connecting...\n                  </>\n                ) : (\n                  <>\n                    <ExternalLink className=\"w-4 h-4 mr-2\" />\n                    Connect PayPal\n                  </>\n                )}\n              </Button>\n              {onCancel && (\n                <Button variant=\"outline\" onClick={onCancel}>\n                  Cancel\n                </Button>\n              )}\n            </div>\n          </>\n        )}\n\n        {connectionStatus === 'connected' && paypalIntegration && (\n          <>\n            <Alert>\n              <CheckCircle className=\"h-4 w-4\" />\n              <AlertDescription>\n                PayPal is successfully connected. Your transaction data is being synced automatically.\n              </AlertDescription>\n            </Alert>\n\n            <div className=\"space-y-2\">\n              <p className=\"text-sm text-muted-foreground\">\n                Connected on: {new Date(paypalIntegration.created_at || paypalIntegration.updated_at).toLocaleDateString()}\n              </p>\n              {paypalIntegration.config?.expires_at && (\n                <p className=\"text-sm text-muted-foreground\">\n                  Token expires: {new Date(paypalIntegration.config.expires_at).toLocaleDateString()}\n                </p>\n              )}\n            </div>\n\n            <div className=\"flex gap-2 pt-4\">\n              <Button \n                variant=\"outline\" \n                onClick={handleRefreshToken}\n                size=\"sm\"\n              >\n                <RefreshCw className=\"w-4 h-4 mr-2\" />\n                Refresh Token\n              </Button>\n              <Button \n                variant=\"destructive\" \n                onClick={handleDisconnect}\n                size=\"sm\"\n              >\n                Disconnect\n              </Button>\n              {onComplete && (\n                <Button variant=\"outline\" onClick={onComplete} size=\"sm\">\n                  Done\n                </Button>\n              )}\n            </div>\n          </>\n        )}\n\n        {connectionStatus === 'error' && (\n          <>\n            <Alert variant=\"destructive\">\n              <AlertCircle className=\"h-4 w-4\" />\n              <AlertDescription>\n                There was an error checking your PayPal connection. Please try reconnecting.\n              </AlertDescription>\n            </Alert>\n\n            <div className=\"flex gap-2 pt-4\">\n              <Button onClick={handleConnect} disabled={isConnecting}>\n                {isConnecting ? (\n                  <>\n                    <Loader2 className=\"w-4 h-4 mr-2 animate-spin\" />\n                    Reconnecting...\n                  </>\n                ) : (\n                  'Reconnect PayPal'\n                )}\n              </Button>\n              {onCancel && (\n                <Button variant=\"outline\" onClick={onCancel}>\n                  Cancel\n                </Button>\n              )}\n            </div>\n          </>\n        )}\n      </CardContent>\n    </Card>\n  );\n};\n\nexport default PayPalSetup; ","usedDeprecatedRules":[]},{"filePath":"/home/vonj/Github/Nexus/src/components/integrations/SlackSetup.tsx","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":60,"column":29,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":60,"endColumn":32,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1445,1448],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1445,1448],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has a missing dependency: 'setupSteps'. Either include it or remove the dependency array.","line":201,"column":6,"nodeType":"ArrayExpression","endLine":201,"endColumn":24,"suggestions":[{"desc":"Update the dependencies array to be: [connectionStatus, setupSteps]","fix":{"range":[5796,5814],"text":"[connectionStatus, setupSteps]"}}]},{"ruleId":"no-restricted-syntax","severity":1,"message":"Use design tokens instead of hardcoded text colors (e.g., text-foreground, text-muted-foreground)","line":654,"column":21,"nodeType":"Literal","messageId":"restrictedSyntax","endLine":654,"endColumn":54}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\n * Slack Integration Setup Component\n * Provides seamless Slack integration with OAuth flow and workspace connection\n * Complements Teams integration for complete communication intelligence\n */\n\nimport React, { useState, useEffect } from 'react';\nimport { Card, CardContent } from '@/components/ui/Card';\nimport { Button } from '@/components/ui/Button';\nimport { Input } from '@/components/ui/Input';\nimport { Label } from '@/components/ui/Label';\nimport { Badge } from '@/components/ui/Badge';\n// import { Progress } from '@/components/ui/Progress';\nimport { Alert, AlertDescription } from '@/components/ui/Alert';\nimport { Checkbox } from '@/components/ui/Checkbox';\nimport { \n  MessageSquare, \n  Users, \n  Hash, \n  Zap, \n  Shield, \n  CheckCircle2, \n  AlertTriangle,\n  Loader2,\n  TrendingUp,\n  BarChart3,\n  Clock,\n  Smile,\n  FileText,\n  MessageCircle\n} from 'lucide-react';\n\ninterface SlackSetupProps {\n  onComplete?: (data: unknown) => void;\n  onCancel?: () => void;\n  existingConfig?: Record<string, unknown>;\n}\n\ninterface SetupStep {\n  id: string;\n  title: string;\n  description: string;\n  completed: boolean;\n  current: boolean;\n  optional?: boolean;\n}\n\ninterface SlackMetrics {\n  totalChannels: number;\n  totalMessages: number;\n  activeUsers: number;\n  averageResponseTime: number;\n  publicChannels: number;\n  privateChannels: number;\n}\n\ninterface SlackPermission {\n  scope: string;\n  description: string;\n  icon: React.ComponentType<any>;\n  required: boolean;\n  category: 'basic' | 'messages' | 'users' | 'files';\n}\n\nconst SlackSetup: React.FC<SlackSetupProps> = ({\n  onComplete,\n  onCancel,\n  existingConfig\n}) => {\n  const [currentStep, setCurrentStep] = useState(0);\n  const [isConnecting, setIsConnecting] = useState(false);\n  const [connectionStatus, setConnectionStatus] = useState<'idle' | 'connecting' | 'connected' | 'error'>('idle');\n  const [error, setError] = useState<string | null>(null);\n  const [slackData, setSlackData] = useState<SlackMetrics | null>(null);\n  const [workspaceUrl, setWorkspaceUrl] = useState((existingConfig?.workspaceUrl as string) || '');\n  const [includePrivateChannels, setIncludePrivateChannels] = useState(false);\n  const [selectedChannels, setSelectedChannels] = useState<string[]>([]);\n  const [setupProgress, setSetupProgress] = useState(0);\n\n  const setupSteps: SetupStep[] = [\n    {\n      id: 'workspace',\n      title: 'Connect Workspace',\n      description: 'Connect to your Slack workspace and authenticate',\n      completed: connectionStatus === 'connected',\n      current: currentStep === 0\n    },\n    {\n      id: 'permissions',\n      title: 'Configure Permissions',\n      description: 'Review and approve the permissions needed for Slack integration',\n      completed: false,\n      current: currentStep === 1\n    },\n    {\n      id: 'channels',\n      title: 'Select Channels',\n      description: 'Choose which channels to include in analytics',\n      completed: false,\n      current: currentStep === 2\n    },\n    {\n      id: 'analytics',\n      title: 'Enable Analytics',\n      description: 'Set up communication analytics and insights generation',\n      completed: false,\n      current: currentStep === 3\n    }\n  ];\n\n  const requiredPermissions: SlackPermission[] = [\n    {\n      scope: 'channels:read',\n      description: 'View basic information about public channels',\n      icon: Hash,\n      required: true,\n      category: 'basic'\n    },\n    {\n      scope: 'channels:history',\n      description: 'View messages and content in public channels',\n      icon: MessageSquare,\n      required: true,\n      category: 'messages'\n    },\n    {\n      scope: 'groups:read',\n      description: 'View basic information about private channels',\n      icon: Users,\n      required: false,\n      category: 'basic'\n    },\n    {\n      scope: 'groups:history',\n      description: 'View messages and content in private channels',\n      icon: MessageSquare,\n      required: false,\n      category: 'messages'\n    },\n    {\n      scope: 'users:read',\n      description: 'View user profiles and information',\n      icon: Users,\n      required: true,\n      category: 'users'\n    },\n    {\n      scope: 'reactions:read',\n      description: 'View emoji reactions on messages',\n      icon: Smile,\n      required: false,\n      category: 'messages'\n    },\n    {\n      scope: 'files:read',\n      description: 'View files shared in channels',\n      icon: FileText,\n      required: false,\n      category: 'files'\n    },\n    {\n      scope: 'im:read',\n      description: 'View direct message information',\n      icon: MessageCircle,\n      required: false,\n      category: 'messages'\n    }\n  ];\n\n  const expectedInsights = [\n    {\n      title: 'Channel Activity Analysis',\n      description: 'Identify your most active channels and quiet spaces',\n      icon: BarChart3,\n      metrics: ['Message volume', 'User engagement', 'Peak activity times']\n    },\n    {\n      title: 'Response Time Intelligence',\n      description: 'Track how quickly your team responds to messages',\n      icon: Clock,\n      metrics: ['Average response time', 'Response patterns', 'Time-to-resolution']\n    },\n    {\n      title: 'Team Collaboration Insights',\n      description: 'Understand how your team collaborates and communicates',\n      icon: Users,\n      metrics: ['Cross-team communication', 'Mention patterns', 'Thread engagement']\n    },\n    {\n      title: 'Productivity Patterns',\n      description: 'Discover when your team is most productive and engaged',\n      icon: TrendingUp,\n      metrics: ['Peak hours', 'Message quality', 'Emoji sentiment']\n    }\n  ];\n\n  useEffect(() => {\n    // Calculate setup progress based on completed steps\n    const completedSteps = setupSteps.filter(step => step.completed).length;\n    setSetupProgress((completedSteps / setupSteps.length) * 100);\n  }, [connectionStatus]);\n\n  const handleConnect = async () => {\n    try {\n      setIsConnecting(true);\n      setConnectionStatus('connecting');\n      setError(null);\n\n      // Validate workspace URL\n      if (!workspaceUrl) {\n        throw new Error('Please enter your Slack workspace URL');\n      }\n\n      // Build OAuth URL for Slack\n      const scopes = requiredPermissions\n        .filter(p => p.required || (p.scope.includes('groups') && includePrivateChannels))\n        .map(p => p.scope)\n        .join(',');\n\n      const clientId = import.meta.env.VITE_SLACK_CLIENT_ID;\n      const redirectUri = `${window.location.origin}/integrations/slack/callback`;\n      \n      const authUrl = `https://slack.com/oauth/v2/authorize?` +\n        `client_id=${clientId}&` +\n        `scope=${scopes}&` +\n        `redirect_uri=${encodeURIComponent(redirectUri)}&` +\n        `state=${btoa(JSON.stringify({ workspaceUrl }))}`;\n\n      // Open OAuth window\n      const authWindow = window.open(\n        authUrl,\n        'slack-auth',\n        'width=600,height=700,scrollbars=yes,resizable=yes'\n      );\n\n      // Listen for OAuth completion\n      const handleMessage = async (event: MessageEvent) => {\n        if (event.origin !== window.location.origin) return;\n        \n        if (event.data.type === 'slack-oauth-success') {\n          authWindow?.close();\n          \n          // Simulate getting workspace data\n          const mockData: SlackMetrics = {\n            totalChannels: 15,\n            totalMessages: 2847,\n            activeUsers: 12,\n            averageResponseTime: 18,\n            publicChannels: 12,\n            privateChannels: includePrivateChannels ? 3 : 0\n          };\n\n          setConnectionStatus('connected');\n          setSlackData(mockData);\n          setCurrentStep(1);\n          \n        } else if (event.data.type === 'slack-oauth-error') {\n          authWindow?.close();\n          throw new Error(event.data.error);\n        }\n      };\n\n      window.addEventListener('message', handleMessage);\n      \n      // Cleanup listener after timeout\n      setTimeout(() => {\n        window.removeEventListener('message', handleMessage);\n        if (authWindow && !authWindow.closed) {\n          authWindow.close();\n          setConnectionStatus('error');\n          setError('Authentication timed out. Please try again.');\n        }\n      }, 300000); // 5 minutes timeout\n\n    } catch (err) {\n      setConnectionStatus('error');\n      setError(err instanceof Error ? err.message : 'Failed to connect to Slack');\n    } finally {\n      setIsConnecting(false);\n    }\n  };\n\n  const handlePermissionApproval = () => {\n    setCurrentStep(2);\n  };\n\n  const handleChannelSelection = () => {\n    setCurrentStep(3);\n  };\n\n  const handleAnalyticsSetup = () => {\n    // Complete setup\n    onComplete?.({\n      platform: 'slack',\n      status: 'connected',\n      config: {\n        workspaceUrl,\n        includePrivateChannels,\n        selectedChannels,\n        permissions: requiredPermissions\n          .filter(p => p.required || (p.scope.includes('groups') && includePrivateChannels))\n          .map(p => p.scope)\n      },\n      data: slackData\n    });\n  };\n\n  const formatWorkspaceUrl = (url: string) => {\n    // Remove protocol and trailing slash, ensure .slack.com domain\n    let formatted = url.replace(/^https?:\\/\\//, '').replace(/\\/$/, '');\n    if (!formatted.includes('.slack.com')) {\n      formatted = formatted.includes('.') ? formatted : `${formatted}.slack.com`;\n    }\n    return formatted;\n  };\n\n  const renderStepContent = () => {\n    switch (currentStep) {\n      case 0:\n        return (\n          <div className=\"space-y-6\">\n            <div className=\"text-center space-y-4\">\n              <div className=\"flex justify-center\">\n                <div className=\"w-16 h-16 bg-secondary/10 rounded-full flex items-center justify-center\">\n                  <MessageSquare className=\"w-8 h-8 text-secondary\" />\n                </div>\n              </div>\n              <div>\n                <h3 className=\"text-lg font-semibold\">Connect to Slack</h3>\n                <p className=\"text-muted-foreground\">\n                  Connect your Slack workspace to start analyzing team communication patterns\n                </p>\n              </div>\n            </div>\n\n            {connectionStatus === 'error' && error && (\n              <Alert variant=\"error\">\n                <AlertTriangle className=\"h-4 w-4\" />\n                <AlertDescription>{error}</AlertDescription>\n              </Alert>\n            )}\n\n            <div className=\"space-y-4\">\n              <div>\n                <Label htmlFor=\"workspace-url\">Workspace URL</Label>\n                <Input\n                  id=\"workspace-url\"\n                  placeholder=\"yourcompany.slack.com\"\n                  value={workspaceUrl}\n                  onChange={(e) => setWorkspaceUrl(formatWorkspaceUrl(e.target.value))}\n                />\n                <p className=\"text-sm text-muted-foreground mt-1\">\n                  Enter your Slack workspace URL or subdomain\n                </p>\n              </div>\n\n              <div className=\"flex items-center space-x-2\">\n                <Checkbox \n                  id=\"private-channels\"\n                  checked={includePrivateChannels}\n                  onCheckedChange={(checked: boolean) => setIncludePrivateChannels(checked)}\n                />\n                <Label htmlFor=\"private-channels\" className=\"text-sm\">\n                  Include private channels (requires additional permissions)\n                </Label>\n              </div>\n\n              <Button \n                onClick={handleConnect}\n                disabled={isConnecting || !workspaceUrl}\n                className=\"w-full\"\n                size=\"lg\"\n              >\n                {isConnecting ? (\n                  <>\n                    <Loader2 className=\"w-4 h-4 mr-2 animate-spin\" />\n                    Connecting to Slack...\n                  </>\n                ) : (\n                  <>\n                    <Shield className=\"w-4 h-4 mr-2\" />\n                    Connect with Slack\n                  </>\n                )}\n              </Button>\n            </div>\n\n            <div className=\"bg-muted/50 p-4 rounded-lg\">\n              <h4 className=\"font-medium mb-2 flex items-center\">\n                <Shield className=\"w-4 h-4 mr-2\" />\n                Security & Privacy\n              </h4>\n              <ul className=\"text-sm text-muted-foreground space-y-1\">\n                <li>• OAuth 2.0 authentication with Slack</li>\n                <li>• Read-only access to protect your data</li>\n                <li>• No message content stored - only analytics</li>\n                <li>• GDPR and SOC 2 compliant data handling</li>\n              </ul>\n            </div>\n          </div>\n        );\n\n      case 1:\n        return (\n          <div className=\"space-y-6\">\n            <div className=\"text-center space-y-4\">\n              <div className=\"flex justify-center\">\n                <div className=\"w-16 h-16 bg-success/10 rounded-full flex items-center justify-center\">\n                  <CheckCircle2 className=\"w-8 h-8 text-success\" />\n                </div>\n              </div>\n              <div>\n                <h3 className=\"text-lg font-semibold\">Review Permissions</h3>\n                <p className=\"text-muted-foreground\">\n                  These permissions enable comprehensive Slack analytics while protecting your privacy\n                </p>\n              </div>\n            </div>\n\n            <div className=\"space-y-4\">\n              {['basic', 'messages', 'users', 'files'].map(category => {\n                const categoryPermissions = requiredPermissions.filter(p => p.category === category);\n                if (categoryPermissions.length === 0) return null;\n\n                return (\n                  <div key={category}>\n                    <h4 className=\"font-medium mb-3 capitalize\">{category} Permissions</h4>\n                    <div className=\"space-y-2\">\n                      {categoryPermissions.map((permission) => {\n                        const Icon = permission.icon;\n                        const isEnabled = permission.required || \n                          (permission.scope.includes('groups') && includePrivateChannels);\n                        \n                        return (\n                          <div key={permission.scope} className={`flex items-start space-x-4 p-4 border rounded-lg ${\n                            isEnabled ? 'bg-background' : 'bg-muted/50 opacity-60'\n                          }`}>\n                            <Icon className=\"w-5 h-5 text-secondary mt-0.5\" />\n                            <div className=\"flex-1\">\n                              <div className=\"flex items-center space-x-2\">\n                                <span className=\"font-medium\">{permission.scope}</span>\n                                {permission.required && (\n                                  <Badge variant=\"destructive\" className=\"text-xs\">Required</Badge>\n                                )}\n                                {!permission.required && isEnabled && (\n                                  <Badge variant=\"secondary\" className=\"text-xs\">Optional</Badge>\n                                )}\n                              </div>\n                              <p className=\"text-sm text-muted-foreground\">{permission.description}</p>\n                            </div>\n                          </div>\n                        );\n                      })}\n                    </div>\n                  </div>\n                );\n              })}\n            </div>\n\n            <Alert>\n              <Shield className=\"h-4 w-4\" />\n              <AlertDescription>\n                We only analyze communication patterns and metadata. \n                Message content is processed locally and never stored on our servers.\n              </AlertDescription>\n            </Alert>\n\n            <Button onClick={handlePermissionApproval} className=\"w-full\" size=\"lg\">\n              Approve Permissions & Continue\n            </Button>\n          </div>\n        );\n\n      case 2:\n        return (\n          <div className=\"space-y-6\">\n            <div className=\"text-center space-y-4\">\n              <div className=\"flex justify-center\">\n                <div className=\"w-16 h-16 bg-primary/10 rounded-full flex items-center justify-center\">\n                  <Hash className=\"w-8 h-8 text-primary\" />\n                </div>\n              </div>\n              <div>\n                <h3 className=\"text-lg font-semibold\">Select Channels</h3>\n                <p className=\"text-muted-foreground\">\n                  Choose which channels to include in your communication analytics\n                </p>\n              </div>\n            </div>\n\n            <div className=\"grid grid-cols-2 gap-4 mb-6\">\n              <div className=\"text-center p-4 border rounded-lg\">\n                <Hash className=\"w-6 h-6 mx-auto text-primary mb-2\" />\n                <div className=\"text-2xl font-bold\">{slackData?.publicChannels || 0}</div>\n                <div className=\"text-sm text-muted-foreground\">Public Channels</div>\n              </div>\n              <div className=\"text-center p-4 border rounded-lg\">\n                <Users className=\"w-6 h-6 mx-auto text-primary mb-2\" />\n                <div className=\"text-2xl font-bold\">{slackData?.privateChannels || 0}</div>\n                <div className=\"text-sm text-muted-foreground\">Private Channels</div>\n              </div>\n            </div>\n\n            <div className=\"space-y-4\">\n              <div className=\"flex items-center justify-between\">\n                <Label>Channel Selection</Label>\n                <Button variant=\"outline\" size=\"sm\">\n                  Select All\n                </Button>\n              </div>\n              \n              {/* Mock channel list */}\n              <div className=\"space-y-2 max-h-64 overflow-y-auto\">\n                {[\n                  { name: 'general', type: 'public', members: 12 },\n                  { name: 'random', type: 'public', members: 8 },\n                  { name: 'development', type: 'public', members: 5 },\n                  { name: 'marketing', type: 'public', members: 4 },\n                  { name: 'sales', type: 'public', members: 6 },\n                  ...(includePrivateChannels ? [\n                    { name: 'leadership', type: 'private', members: 3 },\n                    { name: 'hr-private', type: 'private', members: 2 }\n                  ] : [])\n                ].map((channel) => (\n                  <div key={channel.name} className=\"flex items-center space-x-4 p-4 border rounded-lg\">\n                    <Checkbox \n                      id={`channel-${channel.name}`}\n                      defaultChecked={channel.name === 'general'}\n                      onCheckedChange={(checked: boolean) => {\n                        if (checked) {\n                          setSelectedChannels(prev => [...prev, channel.name]);\n                        } else {\n                          setSelectedChannels(prev => prev.filter(c => c !== channel.name));\n                        }\n                      }}\n                    />\n                    <div className=\"flex-1\">\n                      <div className=\"flex items-center space-x-2\">\n                        {channel.type === 'public' ? (\n                          <Hash className=\"w-4 h-4 text-muted-foreground\" />\n                        ) : (\n                          <Users className=\"w-4 h-4 text-muted-foreground\" />\n                        )}\n                        <span className=\"font-medium\">#{channel.name}</span>\n                        <Badge variant=\"outline\" className=\"text-xs\">\n                          {channel.members} members\n                        </Badge>\n                      </div>\n                    </div>\n                  </div>\n                ))}\n              </div>\n            </div>\n\n            <Alert>\n              <MessageSquare className=\"h-4 w-4\" />\n              <AlertDescription>\n                You can modify channel selection later in the integration settings.\n                Analytics will only include selected channels.\n              </AlertDescription>\n            </Alert>\n\n            <Button onClick={handleChannelSelection} className=\"w-full\" size=\"lg\">\n              Continue with Selected Channels\n            </Button>\n          </div>\n        );\n\n      case 3:\n        return (\n          <div className=\"space-y-6\">\n            <div className=\"text-center space-y-4\">\n              <div className=\"flex justify-center\">\n                <div className=\"w-16 h-16 bg-success/10 rounded-full flex items-center justify-center\">\n                  <BarChart3 className=\"w-8 h-8 text-success\" />\n                </div>\n              </div>\n              <div>\n                <h3 className=\"text-lg font-semibold\">Analytics Ready!</h3>\n                <p className=\"text-muted-foreground\">\n                  Your Slack integration is complete. Here's what insights you'll get:\n                </p>\n              </div>\n            </div>\n\n            <div className=\"grid gap-4\">\n              {expectedInsights.map((insight) => {\n                const Icon = insight.icon;\n                return (\n                  <div key={insight.title} className=\"p-4 border rounded-lg\">\n                    <div className=\"flex items-start space-x-4\">\n                      <Icon className=\"w-5 h-5 text-secondary mt-0.5\" />\n                      <div className=\"flex-1\">\n                        <h4 className=\"font-medium\">{insight.title}</h4>\n                        <p className=\"text-sm text-muted-foreground mb-2\">{insight.description}</p>\n                        <div className=\"flex flex-wrap gap-1\">\n                          {insight.metrics.map((metric) => (\n                            <Badge key={metric} variant=\"outline\" className=\"text-xs\">\n                              {metric}\n                            </Badge>\n                          ))}\n                        </div>\n                      </div>\n                    </div>\n                  </div>\n                );\n              })}\n            </div>\n\n            <Alert>\n              <Zap className=\"h-4 w-4\" />\n              <AlertDescription>\n                <strong>Next Step:</strong> Add Microsoft Teams integration for complete \n                cross-platform communication intelligence and optimization insights.\n              </AlertDescription>\n            </Alert>\n\n            <Button onClick={handleAnalyticsSetup} className=\"w-full\" size=\"lg\">\n              <CheckCircle2 className=\"w-4 h-4 mr-2\" />\n              Complete Slack Setup\n            </Button>\n          </div>\n        );\n\n      default:\n        return null;\n    }\n  };\n\n  return (\n    <div className=\"max-w-2xl mx-auto p-6\">\n      <div className=\"mb-8\">\n        <div className=\"flex items-center justify-between mb-4\">\n          <div>\n            <h2 className=\"text-2xl font-bold\">Slack Integration</h2>\n            <p className=\"text-muted-foreground\">\n              Connect Slack for comprehensive communication analytics\n            </p>\n          </div>\n          <div className=\"text-right\">\n            <div className=\"text-sm text-muted-foreground\">Setup Progress</div>\n            <div className=\"text-2xl font-bold\">{Math.round(setupProgress)}%</div>\n          </div>\n        </div>\n\n        {/* Progress Steps */}\n        <div className=\"flex items-center space-x-2 mb-6\">\n          {setupSteps.map((step, index) => (\n            <React.Fragment key={step.id}>\n              <div className={`flex items-center space-x-2 px-4 py-2 rounded-full text-sm ${\n                step.completed \n                  ? 'bg-success/10 text-success'\n                  : step.current\n                  ? 'bg-secondary/10 text-purple-800'\n                  : 'bg-muted text-muted-foreground'\n              }`}>\n                {step.completed ? (\n                  <CheckCircle2 className=\"w-4 h-4\" />\n                ) : (\n                  <div className={`w-4 h-4 rounded-full border-2 ${\n                    step.current ? 'border-purple-600 bg-secondary' : 'border-muted-foreground'\n                  }`} />\n                )}\n                <span className=\"hidden sm:inline\">{step.title}</span>\n              </div>\n              {index < setupSteps.length - 1 && (\n                <div className=\"w-8 h-px bg-muted\" />\n              )}\n            </React.Fragment>\n          ))}\n        </div>\n      </div>\n\n      <Card>\n        <CardContent className=\"p-6\">\n          {renderStepContent()}\n        </CardContent>\n      </Card>\n\n      {/* Cancel/Back Actions */}\n      <div className=\"flex justify-between mt-6\">\n        <Button variant=\"outline\" onClick={onCancel}>\n          Cancel Setup\n        </Button>\n        {currentStep > 0 && connectionStatus !== 'connecting' && (\n          <Button \n            variant=\"outline\" \n            onClick={() => setCurrentStep(Math.max(0, currentStep - 1))}\n          >\n            Previous Step\n          </Button>\n        )}\n      </div>\n    </div>\n  );\n};\n\nexport default SlackSetup; ","usedDeprecatedRules":[]},{"filePath":"/home/vonj/Github/Nexus/src/components/integrations/StandardIntegrationSetup.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'Copy' is defined but never used.","line":20,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":20,"endColumn":7},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'EyeOff' is defined but never used.","line":22,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":22,"endColumn":9},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'XCircle' is defined but never used.","line":25,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":25,"endColumn":10},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'Star' is defined but never used.","line":29,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":29,"endColumn":7},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'onError' is defined but never used.","line":46,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":46,"endColumn":10},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'initialData' is defined but never used.","line":48,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":48,"endColumn":14},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'analytics' is assigned a value but never used.","line":57,"column":5,"nodeType":null,"messageId":"unusedVar","endLine":57,"endColumn":14},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'validateStep' is assigned a value but never used.","line":62,"column":5,"nodeType":null,"messageId":"unusedVar","endLine":62,"endColumn":17},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'resetSetup' is assigned a value but never used.","line":63,"column":5,"nodeType":null,"messageId":"unusedVar","endLine":63,"endColumn":15},{"ruleId":"no-restricted-syntax","severity":1,"message":"Use design tokens instead of hardcoded colors (e.g., bg-primary, bg-secondary)","line":109,"column":21,"nodeType":"Literal","messageId":"restrictedSyntax","endLine":109,"endColumn":34},{"ruleId":"no-restricted-syntax","severity":1,"message":"Use design tokens instead of hardcoded text colors (e.g., text-foreground, text-muted-foreground)","line":144,"column":23,"nodeType":"Literal","messageId":"restrictedSyntax","endLine":144,"endColumn":55},{"ruleId":"no-restricted-syntax","severity":1,"message":"Use design tokens instead of hardcoded text colors (e.g., text-foreground, text-muted-foreground)","line":145,"column":23,"nodeType":"Literal","messageId":"restrictedSyntax","endLine":145,"endColumn":61},{"ruleId":"no-restricted-syntax","severity":1,"message":"Use design tokens instead of hardcoded text colors (e.g., text-foreground, text-muted-foreground)","line":152,"column":25,"nodeType":"Literal","messageId":"restrictedSyntax","endLine":152,"endColumn":61},{"ruleId":"no-restricted-syntax","severity":1,"message":"Use design tokens instead of hardcoded text colors (e.g., text-foreground, text-muted-foreground)","line":236,"column":31,"nodeType":"Literal","messageId":"restrictedSyntax","endLine":236,"endColumn":77},{"ruleId":"no-restricted-syntax","severity":1,"message":"Use design tokens instead of hardcoded text colors (e.g., text-foreground, text-muted-foreground)","line":345,"column":27,"nodeType":"Literal","messageId":"restrictedSyntax","endLine":345,"endColumn":73},{"ruleId":"no-restricted-syntax","severity":1,"message":"Use design tokens instead of hardcoded text colors (e.g., text-foreground, text-muted-foreground)","line":408,"column":29,"nodeType":"Literal","messageId":"restrictedSyntax","endLine":408,"endColumn":79},{"ruleId":"no-restricted-syntax","severity":1,"message":"Use design tokens instead of hardcoded colors (e.g., bg-primary, bg-secondary)","line":476,"column":24,"nodeType":"Literal","messageId":"restrictedSyntax","endLine":476,"endColumn":130},{"ruleId":"no-restricted-syntax","severity":1,"message":"Use design tokens instead of hardcoded text colors (e.g., text-foreground, text-muted-foreground)","line":530,"column":29,"nodeType":"Literal","messageId":"restrictedSyntax","endLine":530,"endColumn":85},{"ruleId":"no-restricted-syntax","severity":1,"message":"Use design tokens instead of hardcoded text colors (e.g., text-foreground, text-muted-foreground)","line":539,"column":29,"nodeType":"Literal","messageId":"restrictedSyntax","endLine":539,"endColumn":85},{"ruleId":"no-restricted-syntax","severity":1,"message":"Use design tokens instead of hardcoded text colors (e.g., text-foreground, text-muted-foreground)","line":548,"column":29,"nodeType":"Literal","messageId":"restrictedSyntax","endLine":548,"endColumn":85}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":20,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React from 'react';\nimport { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/Card';\nimport { Badge } from '@/components/ui/Badge';\nimport { Button } from '@/components/ui/Button';\nimport { Progress } from '@/components/ui/Progress';\nimport { \n  X, \n  ArrowRight, \n  ArrowLeft, \n  Check, \n  AlertCircle, \n  Key, \n  Globe, \n  Shield,\n  Zap,\n  Clock,\n  Database,\n  HelpCircle,\n  ExternalLink,\n  Copy,\n  Eye,\n  EyeOff,\n  RefreshCw,\n  CheckCircle2,\n  XCircle,\n  AlertTriangle,\n  Book,\n  MessageCircle,\n  Star,\n  SkipForward\n} from 'lucide-react';\n\nimport { useIntegrationSetup } from '@/lib/hooks/useIntegrationSetup';\nimport type { IntegrationSetupProps } from '@/lib/types/integrations';\n\n/**\n * Standardized Integration Setup Component\n * Implements the complete 6-step progressive workflow strategy\n * with comprehensive analytics, error recovery, and user experience optimization\n */\nconst StandardIntegrationSetup: React.FC<IntegrationSetupProps> = ({\n  integration,\n  isOpen,\n  onClose,\n  onComplete,\n  onError,\n  config,\n  initialData\n}) => {\n  const {\n    currentStep,\n    steps,\n    setupData,\n    isConnecting,\n    connectionStatus,\n    errors,\n    analytics,\n    nextStep,\n    previousStep,\n    skipStep,\n    retryStep,\n    validateStep,\n    resetSetup,\n    completeSetup,\n    getStepProgress,\n    getEstimatedTimeRemaining,\n    canProceed\n  } = useIntegrationSetup(integration, config);\n\n  const currentStepData = steps[currentStep];\n  const progress = getStepProgress();\n  const timeRemaining = getEstimatedTimeRemaining();\n\n  /**\n   * Enhanced Progress Bar with Step Names and Time Estimation\n   */\n  const renderProgressBar = () => (\n    <div className=\"mb-8\">\n      <div className=\"flex items-center justify-between mb-3\">\n        <div className=\"flex items-center space-x-2\">\n          <span className=\"text-sm font-medium text-foreground/90 dark:text-muted-foreground/60\">\n            Step {currentStep + 1} of {steps.length}\n          </span>\n          {currentStepData.optional && (\n            <Badge variant=\"secondary\" className=\"text-xs\">Optional</Badge>\n          )}\n        </div>\n        <div className=\"flex items-center space-x-2 text-sm text-muted-foreground dark:text-muted-foreground\">\n          <Clock className=\"w-4 h-4\" />\n          <span>{timeRemaining} remaining</span>\n        </div>\n      </div>\n      \n      <Progress value={progress} className=\"h-2 mb-4\" />\n      \n      <div className=\"flex justify-between\">\n        {steps.map((step, index) => (\n          <div \n            key={step.id}\n            className={`flex flex-col items-center space-y-1 ${\n              index <= currentStep ? 'text-primary' : 'text-muted-foreground'\n            }`}\n          >\n            <div className={`w-3 h-3 rounded-full ${\n              index < currentStep \n                ? 'bg-success' \n                : index === currentStep \n                  ? 'bg-primary' \n                  : 'bg-gray-300'\n            }`} />\n            <span className=\"text-xs font-medium hidden md:block\">{step.title}</span>\n          </div>\n        ))}\n      </div>\n    </div>\n  );\n\n  /**\n   * Error Display with Recovery Actions\n   */\n  const renderErrors = () => {\n    if (errors.length === 0) return null;\n\n    return (\n      <div className=\"mb-6 space-y-4\">\n        {errors.map((error, index) => (\n          <div \n            key={index}\n            className={`border rounded-lg p-4 ${\n              error.severity === 'high' || error.severity === 'critical'\n                ? 'bg-destructive/5 dark:bg-destructive/20 border-destructive/20 dark:border-red-800'\n                : 'bg-warning/5 dark:bg-warning/20/20 border-warning/20 dark:border-warning/80'\n            }`}\n          >\n            <div className=\"flex items-start space-x-4\">\n              <AlertTriangle className={`w-5 h-5 flex-shrink-0 mt-0.5 ${\n                error.severity === 'high' || error.severity === 'critical' \n                  ? 'text-destructive' \n                  : 'text-warning'\n              }`} />\n              <div className=\"flex-1\">\n                <h4 className={`font-medium ${\n                  error.severity === 'high' || error.severity === 'critical'\n                    ? 'text-red-900 dark:text-red-100'\n                    : 'text-yellow-900 dark:text-yellow-100'\n                }`}>\n                  {error.message}\n                </h4>\n                {error.suggestion && (\n                  <p className={`text-sm mt-1 ${\n                    error.severity === 'high' || error.severity === 'critical'\n                      ? 'text-destructive dark:text-red-200'\n                      : 'text-warning/90 dark:text-warning'\n                  }`}>\n                    {error.suggestion}\n                  </p>\n                )}\n                <div className=\"flex items-center space-x-2 mt-3\">\n                  {error.retryable && (\n                    <Button size=\"sm\" variant=\"outline\" onClick={retryStep}>\n                      <RefreshCw className=\"w-4 h-4 mr-1\" />\n                      Retry\n                    </Button>\n                  )}\n                  {error.helpUrl && (\n                    <Button size=\"sm\" variant=\"outline\">\n                      <HelpCircle className=\"w-4 h-4 mr-1\" />\n                      Get Help\n                    </Button>\n                  )}\n                </div>\n              </div>\n            </div>\n          </div>\n        ))}\n      </div>\n    );\n  };\n\n  /**\n   * Step Content Renderer with Consistent Patterns\n   */\n  const renderStepContent = () => {\n    switch (currentStepData.type) {\n      case 'welcome':\n        return (\n          <div className=\"space-y-6\">\n            <div className=\"text-center\">\n              <div className=\"mx-auto w-20 h-20 bg-primary/10 dark:bg-primary/20/20 rounded-full flex items-center justify-center mb-6\">\n                {integration.icon}\n              </div>\n              <h2 className=\"text-2xl font-bold text-foreground dark:text-primary-foreground mb-3\">\n                Connect {integration.name}\n              </h2>\n              <p className=\"text-muted-foreground dark:text-muted-foreground mb-6 max-w-md mx-auto\">\n                {integration.description || `This integration will help you sync data and get insights from your ${integration.name} account.`}\n              </p>\n            </div>\n\n            {/* Value Proposition Grid */}\n            <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4 mb-6\">\n              <div className=\"p-4 bg-background dark:bg-background/50 rounded-lg text-center\">\n                <Clock className=\"w-6 h-6 text-primary mx-auto mb-2\" />\n                <div className=\"text-sm font-medium text-foreground dark:text-primary-foreground\">Setup Time</div>\n                <div className=\"text-sm text-muted-foreground dark:text-muted-foreground\">{integration.estimatedSetupTime}</div>\n              </div>\n              <div className=\"p-4 bg-background dark:bg-background/50 rounded-lg text-center\">\n                <Database className=\"w-6 h-6 text-success mx-auto mb-2\" />\n                <div className=\"text-sm font-medium text-foreground dark:text-primary-foreground\">Data Sources</div>\n                <div className=\"text-sm text-muted-foreground dark:text-muted-foreground\">{integration.features.length} types</div>\n              </div>\n              <div className=\"p-4 bg-background dark:bg-background/50 rounded-lg text-center\">\n                <Shield className=\"w-6 h-6 text-secondary mx-auto mb-2\" />\n                <div className=\"text-sm font-medium text-foreground dark:text-primary-foreground\">Security</div>\n                <div className=\"text-sm text-muted-foreground dark:text-muted-foreground\">Enterprise-grade</div>\n              </div>\n            </div>\n\n            {/* Feature List */}\n            <div>\n              <h3 className=\"font-semibold text-foreground dark:text-primary-foreground mb-4\">What you'll get:</h3>\n              <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n                {integration.features.map((feature, index) => (\n                  <div key={index} className=\"flex items-center space-x-4\">\n                    <CheckCircle2 className=\"w-5 h-5 text-success flex-shrink-0\" />\n                    <span className=\"text-sm text-muted-foreground dark:text-muted-foreground\">{feature}</span>\n                  </div>\n                ))}\n              </div>\n            </div>\n\n            {/* Trust Signals */}\n            <div className=\"bg-primary/5 dark:bg-primary/20/20 border border-border dark:border-primary/80 rounded-lg p-4\">\n              <div className=\"flex items-center space-x-4 mb-2\">\n                <Shield className=\"w-5 h-5 text-primary\" />\n                <h4 className=\"font-medium text-blue-900 dark:text-blue-100\">Secure & Trusted</h4>\n              </div>\n              <p className=\"text-sm text-primary dark:text-primary\">\n                We use industry-standard encryption and never store your passwords. Your data is processed securely and in compliance with privacy regulations.\n              </p>\n              <div className=\"flex items-center space-x-4 mt-3\">\n                <Badge variant=\"secondary\">SOC 2 Compliant</Badge>\n                <Badge variant=\"secondary\">GDPR Ready</Badge>\n                <Badge variant=\"secondary\">256-bit SSL</Badge>\n              </div>\n            </div>\n          </div>\n        );\n\n      case 'prerequisites':\n        return (\n          <div className=\"space-y-6\">\n            <div className=\"text-center\">\n              <div className=\"mx-auto w-16 h-16 bg-warning/10 dark:bg-orange-900/20 rounded-full flex items-center justify-center mb-4\">\n                <Book className=\"w-8 h-8 text-warning\" />\n              </div>\n              <h3 className=\"text-xl font-semibold text-foreground dark:text-primary-foreground mb-2\">\n                Prerequisites Check\n              </h3>\n              <p className=\"text-muted-foreground dark:text-muted-foreground mb-6\">\n                Please confirm you have the following before we proceed:\n              </p>\n            </div>\n\n            <div className=\"space-y-4\">\n              {integration.prerequisites?.map((prereq, index) => (\n                <label \n                  key={index} \n                  className=\"flex items-start space-x-4 p-4 border border-border dark:border-border rounded-lg hover:bg-background dark:hover:bg-background/50 cursor-pointer\"\n                >\n                  <input\n                    type=\"checkbox\"\n                    className=\"w-5 h-5 text-primary border-border rounded focus:ring-blue-500 mt-0.5\"\n                  />\n                  <div className=\"flex-1\">\n                    <div className=\"text-sm font-medium text-foreground dark:text-primary-foreground\">\n                      {prereq}\n                    </div>\n                  </div>\n                </label>\n              ))}\n            </div>\n\n            {/* Troubleshooting Help */}\n            <div className=\"bg-background dark:bg-background/50 border border-border dark:border-border rounded-lg p-4\">\n              <div className=\"flex items-start space-x-4\">\n                <HelpCircle className=\"w-5 h-5 text-muted-foreground flex-shrink-0 mt-0.5\" />\n                <div>\n                  <h4 className=\"font-medium text-foreground dark:text-primary-foreground\">Need help?</h4>\n                  <p className=\"text-sm text-muted-foreground dark:text-muted-foreground mt-1\">\n                    If you don't have the required access, contact your system administrator or check our setup guide.\n                  </p>\n                  {integration.documentation && (\n                    <Button variant=\"link\" size=\"sm\" className=\"p-0 h-auto mt-2\">\n                      View Setup Guide <ExternalLink className=\"w-3 h-3 ml-1\" />\n                    </Button>\n                  )}\n                </div>\n              </div>\n            </div>\n          </div>\n        );\n\n      case 'auth':\n        return integration.authType === 'oauth' ? renderOAuthStep() : renderApiKeyStep();\n\n      case 'permissions':\n        return renderPermissionsStep();\n\n      case 'configuration':\n        return renderConfigurationStep();\n\n      case 'testing':\n        return renderTestingStep();\n\n      case 'success':\n        return renderSuccessStep();\n\n      default:\n        return null;\n    }\n  };\n\n  /**\n   * OAuth Authentication Step\n   */\n  const renderOAuthStep = () => (\n    <div className=\"space-y-6\">\n      <div className=\"text-center\">\n        <div className=\"mx-auto w-16 h-16 bg-primary/10 dark:bg-primary/20/20 rounded-full flex items-center justify-center mb-4\">\n          <Shield className=\"w-8 h-8 text-primary\" />\n        </div>\n        <h3 className=\"text-xl font-semibold text-foreground dark:text-primary-foreground mb-2\">\n          Secure Authorization\n        </h3>\n        <p className=\"text-muted-foreground dark:text-muted-foreground mb-6\">\n          Click the button below to securely connect your {integration.name} account. You'll be redirected to {integration.name} to authorize access.\n        </p>\n      </div>\n\n      <div className=\"bg-primary/5 dark:bg-primary/20/20 border border-border dark:border-primary/80 rounded-lg p-4\">\n        <div className=\"flex items-start space-x-4\">\n          <AlertCircle className=\"w-5 h-5 text-primary flex-shrink-0 mt-0.5\" />\n          <div>\n            <h4 className=\"font-medium text-blue-900 dark:text-blue-100\">Secure Connection</h4>\n            <p className=\"text-sm text-primary dark:text-primary mt-1\">\n              Nexus uses industry-standard OAuth 2.0 authentication. We never store your {integration.name} password.\n            </p>\n          </div>\n        </div>\n      </div>\n\n      <Button \n        className=\"w-full bg-primary hover:bg-primary/90\" \n        size=\"lg\"\n        onClick={() => {\n          // Simulate OAuth flow\n          setTimeout(() => {\n            nextStep();\n          }, 1000);\n        }}\n        disabled={isConnecting}\n      >\n        <Globe className=\"w-5 h-5 mr-2\" />\n        {isConnecting ? 'Connecting...' : `Authorize with ${integration.name}`}\n      </Button>\n    </div>\n  );\n\n  /**\n   * API Key Authentication Step\n   */\n  const renderApiKeyStep = () => (\n    <div className=\"space-y-6\">\n      <div className=\"text-center\">\n        <div className=\"mx-auto w-16 h-16 bg-success/10 dark:bg-success/20 rounded-full flex items-center justify-center mb-4\">\n          <Key className=\"w-8 h-8 text-success\" />\n        </div>\n        <h3 className=\"text-xl font-semibold text-foreground dark:text-primary-foreground mb-2\">\n          API Configuration\n        </h3>\n        <p className=\"text-muted-foreground dark:text-muted-foreground mb-6\">\n          Enter your {integration.name} API credentials to establish the connection.\n        </p>\n      </div>\n\n      <div className=\"space-y-4\">\n        <div>\n          <label className=\"block text-sm font-medium text-foreground/90 dark:text-muted-foreground/60 mb-2\">\n            API Key *\n          </label>\n          <div className=\"relative\">\n            <input\n              type=\"password\"\n              placeholder=\"Enter your API key\"\n              className=\"w-full px-4 py-2 border border-border dark:border-gray-600 rounded-lg bg-card dark:bg-background text-foreground dark:text-primary-foreground placeholder-gray-500 focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-transparent pr-10\"\n            />\n            <button className=\"absolute right-3 top-1/2 transform -translate-y-1/2 text-muted-foreground hover:text-muted-foreground\">\n              <Eye className=\"w-4 h-4\" />\n            </button>\n          </div>\n        </div>\n\n        <div className=\"bg-warning/5 dark:bg-warning/20/20 border border-warning/20 dark:border-warning/80 rounded-lg p-4\">\n          <div className=\"flex items-start space-x-4\">\n            <AlertCircle className=\"w-5 h-5 text-warning flex-shrink-0 mt-0.5\" />\n            <div>\n              <h4 className=\"font-medium text-yellow-900 dark:text-yellow-100\">How to find your API key</h4>\n              <p className=\"text-sm text-warning/90 dark:text-warning mt-1\">\n                Go to your {integration.name} account settings → API section → Generate new API key\n              </p>\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n\n  /**\n   * Permissions Configuration Step\n   */\n  const renderPermissionsStep = () => (\n    <div className=\"space-y-6\">\n      <div className=\"text-center\">\n        <div className=\"mx-auto w-16 h-16 bg-secondary/10 dark:bg-secondary/20/20 rounded-full flex items-center justify-center mb-4\">\n          <Shield className=\"w-8 h-8 text-secondary\" />\n        </div>\n        <h3 className=\"text-xl font-semibold text-foreground dark:text-primary-foreground mb-2\">\n          Data Permissions\n        </h3>\n        <p className=\"text-muted-foreground dark:text-muted-foreground mb-6\">\n          Choose which data types you want to sync with Nexus. You can modify these later.\n        </p>\n      </div>\n\n      <div className=\"space-y-4\">\n        {integration.features.map((feature, index) => (\n          <label \n            key={index} \n            className=\"flex items-center justify-between p-4 border border-border dark:border-border rounded-lg hover:bg-background dark:hover:bg-background/50 cursor-pointer\"\n          >\n            <div className=\"flex items-center space-x-4\">\n              <input\n                type=\"checkbox\"\n                defaultChecked\n                className=\"w-4 h-4 text-primary border-border rounded focus:ring-blue-500\"\n              />\n              <div>\n                <div className=\"text-sm font-medium text-foreground dark:text-primary-foreground\">\n                  {feature}\n                </div>\n                <div className=\"text-xs text-muted-foreground dark:text-muted-foreground\">\n                  Read access only\n                </div>\n              </div>\n            </div>\n            <Badge variant=\"secondary\" className=\"text-xs\">Recommended</Badge>\n          </label>\n        ))}\n      </div>\n\n      <div className=\"bg-primary/5 dark:bg-primary/20/20 border border-border dark:border-primary/80 rounded-lg p-4\">\n        <p className=\"text-sm text-primary dark:text-primary\">\n          💡 <strong>Pro tip:</strong> Start with all permissions enabled. You can fine-tune access levels later in the integration settings.\n        </p>\n      </div>\n    </div>\n  );\n\n  /**\n   * Advanced Configuration Step\n   */\n  const renderConfigurationStep = () => (\n    <div className=\"space-y-6\">\n      <div className=\"text-center\">\n        <div className=\"mx-auto w-16 h-16 bg-indigo-100 dark:bg-indigo-900/20 rounded-full flex items-center justify-center mb-4\">\n          <Zap className=\"w-8 h-8 text-primary\" />\n        </div>\n        <h3 className=\"text-xl font-semibold text-foreground dark:text-primary-foreground mb-2\">\n          Advanced Settings\n        </h3>\n        <p className=\"text-muted-foreground dark:text-muted-foreground mb-6\">\n          Customize sync frequency and data mapping for optimal performance.\n        </p>\n      </div>\n\n      {/* Configuration options would go here */}\n      <div className=\"space-y-4\">\n        <div>\n          <label className=\"block text-sm font-medium text-foreground/90 dark:text-muted-foreground/60 mb-2\">\n            Sync Frequency\n          </label>\n          <select className=\"w-full px-4 py-2 border border-border dark:border-gray-600 rounded-lg bg-card dark:bg-background text-foreground dark:text-primary-foreground\">\n            <option value=\"realtime\">Real-time (Recommended)</option>\n            <option value=\"hourly\">Every Hour</option>\n            <option value=\"daily\">Daily</option>\n            <option value=\"weekly\">Weekly</option>\n          </select>\n        </div>\n      </div>\n    </div>\n  );\n\n  /**\n   * Connection Testing Step\n   */\n  const renderTestingStep = () => (\n    <div className=\"space-y-6\">\n      <div className=\"text-center\">\n        <div className=\"mx-auto w-16 h-16 bg-success/10 dark:bg-success/20 rounded-full flex items-center justify-center mb-4\">\n          {connectionStatus === 'testing' ? (\n            <RefreshCw className=\"w-8 h-8 text-success animate-spin\" />\n          ) : (\n            <Zap className=\"w-8 h-8 text-success\" />\n          )}\n        </div>\n        <h3 className=\"text-xl font-semibold text-foreground dark:text-primary-foreground mb-2\">\n          Testing Connection\n        </h3>\n        <p className=\"text-muted-foreground dark:text-muted-foreground mb-6\">\n          We're verifying that everything is working correctly.\n        </p>\n      </div>\n\n      {/* Test Results */}\n      <div className=\"space-y-4\">\n        <div className=\"flex items-center justify-between p-4 bg-success/5 dark:bg-success/20 border border-success/20 dark:border-success/80 rounded-lg\">\n          <div className=\"flex items-center space-x-4\">\n            <CheckCircle2 className=\"w-5 h-5 text-success\" />\n            <span className=\"text-sm font-medium text-green-900 dark:text-green-100\">\n              Connection established\n            </span>\n          </div>\n        </div>\n\n        <div className=\"flex items-center justify-between p-4 bg-success/5 dark:bg-success/20 border border-success/20 dark:border-success/80 rounded-lg\">\n          <div className=\"flex items-center space-x-4\">\n            <CheckCircle2 className=\"w-5 h-5 text-success\" />\n            <span className=\"text-sm font-medium text-green-900 dark:text-green-100\">\n              Permissions verified\n            </span>\n          </div>\n        </div>\n\n        <div className=\"flex items-center justify-between p-4 bg-success/5 dark:bg-success/20 border border-success/20 dark:border-success/80 rounded-lg\">\n          <div className=\"flex items-center space-x-4\">\n            <CheckCircle2 className=\"w-5 h-5 text-success\" />\n            <span className=\"text-sm font-medium text-green-900 dark:text-green-100\">\n              Initial data sync completed\n            </span>\n          </div>\n        </div>\n      </div>\n\n      {connectionStatus === 'success' && (\n        <div className=\"bg-primary/5 dark:bg-primary/20/20 border border-border dark:border-primary/80 rounded-lg p-4\">\n          <p className=\"text-sm text-primary dark:text-primary\">\n            🎉 Excellent! Your {integration.name} integration is ready. Data will start appearing in your dashboard within a few minutes.\n          </p>\n        </div>\n      )}\n    </div>\n  );\n\n  /**\n   * Success Step\n   */\n  const renderSuccessStep = () => (\n    <div className=\"space-y-6 text-center\">\n      <div>\n        <div className=\"mx-auto w-20 h-20 bg-success/10 dark:bg-success/20 rounded-full flex items-center justify-center mb-6\">\n          <CheckCircle2 className=\"w-10 h-10 text-success\" />\n        </div>\n        <h2 className=\"text-2xl font-bold text-foreground dark:text-primary-foreground mb-3\">\n          Integration Complete!\n        </h2>\n        <p className=\"text-muted-foreground dark:text-muted-foreground mb-6\">\n          Your {integration.name} account is now connected and syncing data.\n        </p>\n      </div>\n\n      {/* Next Steps */}\n      <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4\">\n        <div className=\"p-4 bg-background dark:bg-background/50 rounded-lg\">\n          <Database className=\"w-6 h-6 text-primary mx-auto mb-2\" />\n          <div className=\"text-sm font-medium text-foreground dark:text-primary-foreground\">View Dashboard</div>\n          <div className=\"text-xs text-muted-foreground dark:text-muted-foreground\">See your data</div>\n        </div>\n        <div className=\"p-4 bg-background dark:bg-background/50 rounded-lg\">\n          <Book className=\"w-6 h-6 text-success mx-auto mb-2\" />\n          <div className=\"text-sm font-medium text-foreground dark:text-primary-foreground\">Setup Guide</div>\n          <div className=\"text-xs text-muted-foreground dark:text-muted-foreground\">Learn best practices</div>\n        </div>\n        <div className=\"p-4 bg-background dark:bg-background/50 rounded-lg\">\n          <MessageCircle className=\"w-6 h-6 text-secondary mx-auto mb-2\" />\n          <div className=\"text-sm font-medium text-foreground dark:text-primary-foreground\">Get Support</div>\n          <div className=\"text-xs text-muted-foreground dark:text-muted-foreground\">Need help?</div>\n        </div>\n      </div>\n\n      <Button \n        onClick={() => {\n          onComplete(setupData);\n          onClose();\n        }}\n        className=\"w-full\"\n        size=\"lg\"\n      >\n        Continue to Dashboard\n      </Button>\n    </div>\n  );\n\n  /**\n   * Navigation Controls\n   */\n  const renderNavigation = () => (\n    <div className=\"flex items-center justify-between pt-6 border-t border-border dark:border-border\">\n      <Button\n        variant=\"outline\"\n        onClick={previousStep}\n        disabled={currentStep === 0}\n        className=\"flex items-center space-x-2\"\n      >\n        <ArrowLeft className=\"w-4 h-4\" />\n        <span>Previous</span>\n      </Button>\n\n      <div className=\"flex items-center space-x-2\">\n        {currentStepData.canSkip && (\n          <Button\n            variant=\"ghost\"\n            onClick={skipStep}\n            className=\"flex items-center space-x-2\"\n          >\n            <SkipForward className=\"w-4 h-4\" />\n            <span>Skip</span>\n          </Button>\n        )}\n        \n        {currentStep === steps.length - 1 ? (\n          <Button\n            onClick={completeSetup}\n            disabled={isConnecting || !canProceed()}\n            className=\"flex items-center space-x-2\"\n          >\n            <span>{isConnecting ? 'Completing...' : 'Complete Setup'}</span>\n            <Check className=\"w-4 h-4\" />\n          </Button>\n        ) : (\n          <Button\n            onClick={nextStep}\n            disabled={isConnecting || !canProceed()}\n            className=\"flex items-center space-x-2\"\n          >\n            <span>Continue</span>\n            <ArrowRight className=\"w-4 h-4\" />\n          </Button>\n        )}\n      </div>\n    </div>\n  );\n\n  if (!isOpen) return null;\n\n  return (\n            <div className=\"fixed inset-0 bg-black/50 flex items-center justify-center p-4 z-critical\">\n      <Card className=\"w-full max-w-2xl max-h-[90vh] overflow-y-auto\">\n        <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-6\">\n          <CardTitle className=\"text-xl font-semibold\">\n            {currentStepData.title}\n          </CardTitle>\n          <Button variant=\"ghost\" size=\"sm\" onClick={onClose}>\n            <X className=\"w-4 h-4\" />\n          </Button>\n        </CardHeader>\n        \n        <CardContent className=\"space-y-6\">\n          {renderProgressBar()}\n          {renderErrors()}\n          {renderStepContent()}\n          {renderNavigation()}\n        </CardContent>\n      </Card>\n    </div>\n  );\n};\n\nexport default StandardIntegrationSetup; ","usedDeprecatedRules":[]},{"filePath":"/home/vonj/Github/Nexus/src/components/integrations/TrustBasedIntegrationSetup.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'Progress' is defined but never used.","line":5,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":5,"endColumn":18},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":45,"column":22,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":45,"endColumn":25,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1098,1101],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1098,1101],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'setSetupData' is assigned a value but never used.","line":55,"column":21,"nodeType":null,"messageId":"unusedVar","endLine":55,"endColumn":33},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":55,"column":46,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":55,"endColumn":49,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1371,1374],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1371,1374],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'setIsConnecting' is assigned a value but never used.","line":56,"column":24,"nodeType":null,"messageId":"unusedVar","endLine":56,"endColumn":39},{"ruleId":"no-restricted-syntax","severity":1,"message":"Use design tokens instead of hardcoded colors (e.g., bg-primary, bg-secondary)","line":303,"column":23,"nodeType":"Literal","messageId":"restrictedSyntax","endLine":303,"endColumn":58},{"ruleId":"no-restricted-syntax","severity":1,"message":"Use design tokens instead of hardcoded colors (e.g., bg-primary, bg-secondary)","line":309,"column":58,"nodeType":"Literal","messageId":"restrictedSyntax","endLine":309,"endColumn":71}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState } from 'react';\nimport { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/Card';\nimport { Badge } from '@/components/ui/Badge';\nimport { Button } from '@/components/ui/Button';\nimport { Progress } from '@/components/ui/Progress';\nimport { Alert, AlertDescription } from '@/components/ui/Alert';\nimport {\n  Shield,\n  Lock,\n  CheckCircle2,\n  AlertTriangle,\n  Loader2,\n  Clock,\n  Database,\n  MessageCircle,\n  Eye,\n  EyeOff,\n  RefreshCw,\n  Book,\n  Key,\n  Globe,\n  X,\n  ArrowRight,\n  Check\n} from 'lucide-react';\n\ninterface TrustBasedIntegrationSetupProps {\n  integration: {\n    id: string;\n    name: string;\n    icon: React.ReactNode;\n    category: string;\n    difficulty: 'easy' | 'medium' | 'advanced';\n    estimatedSetupTime: string;\n    features: string[];\n    authType: 'oauth' | 'api_key' | 'webhook' | 'credentials';\n    documentation?: string;\n    supportUrl?: string;\n    videoTutorial?: string;\n    prerequisites?: string[];\n    commonIssues?: { issue: string; solution: string }[];\n  };\n  isOpen: boolean;\n  onClose: () => void;\n  onComplete: (data: any) => void;\n}\n\nconst TrustBasedIntegrationSetup: React.FC<TrustBasedIntegrationSetupProps> = ({\n  integration,\n  isOpen,\n  onClose,\n  onComplete\n}): React.ReactElement => {\n  const [currentStep, setCurrentStep] = useState(0);\n  const [setupData, setSetupData] = useState<any>({});\n  const [isConnecting, setIsConnecting] = useState(false);\n  const [showApiKey, setShowApiKey] = useState(false);\n\n  // Trust-building steps\n  const steps = [\n    {\n      id: 'welcome',\n      title: 'Welcome to Secure Integration',\n      description: `Let's connect your ${integration.name} account safely`,\n      icon: <Shield className=\"w-6 h-6\" />,\n      content: (\n        <div className=\"space-y-6\">\n          <div className=\"text-center\">\n            <div className=\"mx-auto w-16 h-16 bg-primary/10 rounded-full flex items-center justify-center mb-4\">\n              {integration.icon}\n            </div>\n            <h3 className=\"text-xl font-semibold mb-2\">\n              Connect {integration.name} Securely\n            </h3>\n            <p className=\"text-muted-foreground mb-6\">\n              Your data security is our top priority. We use industry-standard encryption and security practices.\n            </p>\n          </div>\n\n          {/* Security Features */}\n          <div className=\"grid grid-cols-2 gap-4\">\n            <div className=\"p-4 bg-background rounded-lg\">\n              <Lock className=\"w-5 h-5 text-primary mb-2\" />\n              <div className=\"text-sm font-medium\">End-to-End Encryption</div>\n              <div className=\"text-sm text-muted-foreground\">Your data is always encrypted</div>\n            </div>\n            <div className=\"p-4 bg-background rounded-lg\">\n              <Shield className=\"w-5 h-5 text-primary mb-2\" />\n              <div className=\"text-sm font-medium\">Secure Storage</div>\n              <div className=\"text-sm text-muted-foreground\">Credentials are encrypted at rest</div>\n            </div>\n          </div>\n\n          {/* Setup Time */}\n          <div className=\"p-4 bg-primary/5 rounded-lg\">\n            <Clock className=\"w-5 h-5 text-primary mb-2\" />\n            <div className=\"text-sm font-medium\">Quick Setup</div>\n            <div className=\"text-sm text-muted-foreground\">\n              This will only take about {integration.estimatedSetupTime}\n            </div>\n          </div>\n        </div>\n      )\n    },\n    {\n      id: 'prerequisites',\n      title: 'Before We Begin',\n      description: \"Let's make sure you have everything needed\",\n      icon: <CheckCircle2 className=\"w-6 h-6\" />,\n      content: (\n        <div className=\"space-y-6\">\n          <Alert>\n            <AlertTriangle className=\"w-4 h-4\" />\n            <AlertDescription>\n              Please ensure you have the following ready:\n            </AlertDescription>\n          </Alert>\n\n          <div className=\"space-y-4\">\n            {integration.prerequisites?.map((prereq, index) => (\n              <div key={index} className=\"flex items-start space-x-3\">\n                <CheckCircle2 className=\"w-5 h-5 text-primary mt-0.5\" />\n                <div>\n                  <div className=\"font-medium\">{prereq}</div>\n                </div>\n              </div>\n            ))}\n          </div>\n\n          {integration.documentation && (\n            <Button \n              variant=\"outline\" \n              className=\"w-full\"\n              onClick={() => window.open(integration.documentation, '_blank', 'noopener,noreferrer')}\n            >\n              <Book className=\"w-4 h-4 mr-2\" />\n              View Documentation\n            </Button>\n          )}\n        </div>\n      )\n    },\n    {\n      id: 'auth',\n      title: 'Secure Connection',\n      description: 'Connect your account safely',\n      icon: <Key className=\"w-6 h-6\" />,\n      content: (\n        <div className=\"space-y-6\">\n          <Alert>\n            <Shield className=\"w-4 h-4\" />\n            <AlertDescription>\n              Your credentials are encrypted and stored securely. We never store plain text passwords.\n            </AlertDescription>\n          </Alert>\n\n          {integration.authType === 'oauth' ? (\n            <div className=\"space-y-4\">\n              <Button className=\"w-full\" onClick={() => {/* OAuth flow */}}>\n                <Globe className=\"w-4 h-4 mr-2\" />\n                Connect with {integration.name}\n              </Button>\n              <p className=\"text-sm text-muted-foreground text-center\">\n                You'll be redirected to {integration.name} to authorize access\n              </p>\n            </div>\n          ) : (\n            <div className=\"space-y-4\">\n              <div className=\"space-y-2\">\n                <label className=\"text-sm font-medium\">API Key</label>\n                <div className=\"relative\">\n                  <input\n                    type={showApiKey ? 'text' : 'password'}\n                    className=\"w-full p-2 border rounded\"\n                    placeholder=\"Enter your API key\"\n                  />\n                  <button\n                    className=\"absolute right-2 top-2\"\n                    onClick={() => setShowApiKey(!showApiKey)}\n                  >\n                    {showApiKey ? <EyeOff className=\"w-4 h-4\" /> : <Eye className=\"w-4 h-4\" />}\n                  </button>\n                </div>\n              </div>\n              <Button className=\"w-full\" onClick={() => {/* Test connection */}}>\n                <RefreshCw className=\"w-4 h-4 mr-2\" />\n                Test Connection\n              </Button>\n            </div>\n          )}\n        </div>\n      )\n    },\n    {\n      id: 'permissions',\n      title: 'Data Access',\n      description: 'Choose what data to sync',\n      icon: <Database className=\"w-6 h-6\" />,\n      content: (\n        <div className=\"space-y-6\">\n          <Alert>\n            <Shield className=\"w-4 h-4\" />\n            <AlertDescription>\n              You can change these permissions anytime after setup\n            </AlertDescription>\n          </Alert>\n\n          <div className=\"space-y-4\">\n            {integration.features.map((feature, index) => (\n              <div key={index} className=\"flex items-center space-x-3\">\n                <input type=\"checkbox\" className=\"rounded\" />\n                <div>\n                  <div className=\"font-medium\">{feature}</div>\n                </div>\n              </div>\n            ))}\n          </div>\n        </div>\n      )\n    },\n    {\n      id: 'success',\n      title: 'All Set!',\n      description: 'Your integration is ready to use',\n      icon: <CheckCircle2 className=\"w-6 h-6\" />,\n      content: (\n        <div className=\"text-center space-y-6\">\n          <div className=\"mx-auto w-16 h-16 bg-success/10 rounded-full flex items-center justify-center\">\n            <CheckCircle2 className=\"w-8 h-8 text-success\" />\n          </div>\n          <div>\n            <h3 className=\"text-xl font-semibold mb-2\">Connection Successful!</h3>\n            <p className=\"text-muted-foreground\">\n              Your {integration.name} account is now securely connected\n            </p>\n          </div>\n          <div className=\"space-y-4\">\n            <Button className=\"w-full\" onClick={() => onComplete(setupData)}>\n              Continue to Dashboard\n            </Button>\n            {integration.supportUrl && (\n              <Button \n                variant=\"outline\" \n                className=\"w-full\"\n                onClick={() => window.open(integration.supportUrl, '_blank', 'noopener,noreferrer')}\n              >\n                <MessageCircle className=\"w-4 h-4 mr-2\" />\n                Get Help\n              </Button>\n            )}\n          </div>\n        </div>\n      )\n    }\n  ];\n\n  const currentStepData = steps[currentStep];\n\n  const handleNext = () => {\n    if (currentStep < steps.length - 1) {\n      setCurrentStep(currentStep + 1);\n    }\n  };\n\n  const handlePrevious = () => {\n    if (currentStep > 0) {\n      setCurrentStep(currentStep - 1);\n    }\n  };\n\n  if (!isOpen) return <></>;\n\n  return (\n    <div className=\"fixed inset-0 bg-black/50 flex items-center justify-center z-[80] p-4\">\n      <Card className=\"w-full max-w-2xl max-h-[90vh] overflow-y-auto\">\n        <CardHeader className=\"flex flex-row items-center justify-between\">\n          <div>\n            <CardTitle>Setup {integration.name}</CardTitle>\n            <div className=\"flex items-center space-x-2 mt-2\">\n              <Badge variant=\"outline\">{integration.category}</Badge>\n              <Badge className={\n                integration.difficulty === 'easy' ? 'bg-success/10 text-success' :\n                integration.difficulty === 'medium' ? 'bg-warning/10 text-warning/80' :\n                'bg-destructive/10 text-destructive'\n              }>\n                {integration.difficulty}\n              </Badge>\n            </div>\n          </div>\n          <Button variant=\"outline\" size=\"sm\" onClick={onClose}>\n            <X className=\"w-4 h-4\" />\n          </Button>\n        </CardHeader>\n\n        <CardContent className=\"space-y-6\">\n          {/* Progress */}\n          <div className=\"flex items-center justify-between\">\n            {steps.map((step, index) => (\n              <div key={step.id} className=\"flex items-center\">\n                <div className={`w-8 h-8 rounded-full flex items-center justify-center text-sm font-medium ${\n                  index <= currentStep \n                    ? 'bg-primary text-primary-foreground' \n                    : 'bg-gray-200 text-muted-foreground'\n                }`}>\n                  {index < currentStep ? <Check className=\"w-4 h-4\" /> : index + 1}\n                </div>\n                {index < steps.length - 1 && (\n                  <div className={`w-12 h-0.5 mx-2 ${\n                    index < currentStep ? 'bg-primary' : 'bg-gray-200'\n                  }`} />\n                )}\n              </div>\n            ))}\n          </div>\n\n          {/* Step Content */}\n          <div className=\"min-h-[400px]\">\n            <div className=\"mb-4\">\n              <h3 className=\"text-lg font-semibold\">\n                {currentStepData.title}\n              </h3>\n              <p className=\"text-sm text-muted-foreground\">\n                {currentStepData.description}\n              </p>\n            </div>\n            \n            {currentStepData.content}\n          </div>\n\n          {/* Navigation */}\n          <div className=\"flex justify-between pt-6 border-t\">\n            <Button \n              variant=\"outline\" \n              onClick={handlePrevious}\n              disabled={currentStep === 0}\n            >\n              Previous\n            </Button>\n\n            {currentStep === steps.length - 1 ? (\n              <Button \n                onClick={() => onComplete(setupData)}\n                disabled={isConnecting}\n                className=\"bg-success hover:bg-success/90\"\n              >\n                {isConnecting ? (\n                  <>\n                    <Loader2 className=\"w-4 h-4 mr-2 animate-spin\" />\n                    Completing...\n                  </>\n                ) : (\n                  <>\n                    <Check className=\"w-4 h-4 mr-2\" />\n                    Complete Setup\n                  </>\n                )}\n              </Button>\n            ) : (\n              <Button onClick={handleNext}>\n                Next\n                <ArrowRight className=\"w-4 h-4 ml-2\" />\n              </Button>\n            )}\n          </div>\n        </CardContent>\n      </Card>\n    </div>\n  );\n};\n\nexport default TrustBasedIntegrationSetup; ","usedDeprecatedRules":[]},{"filePath":"/home/vonj/Github/Nexus/src/components/integrations/UnifiedClientProfilesView.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'Tabs' is defined but never used.","line":6,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":6,"endColumn":14},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'TabsContent' is defined but never used.","line":6,"column":16,"nodeType":null,"messageId":"unusedVar","endLine":6,"endColumn":27},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'TabsList' is defined but never used.","line":6,"column":29,"nodeType":null,"messageId":"unusedVar","endLine":6,"endColumn":37},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'TabsTrigger' is defined but never used.","line":6,"column":39,"nodeType":null,"messageId":"unusedVar","endLine":6,"endColumn":50},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'AlertDescription' is defined but never used.","line":8,"column":17,"nodeType":null,"messageId":"unusedVar","endLine":8,"endColumn":33},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'Filter' is defined but never used.","line":14,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":14,"endColumn":9},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'Clock' is defined but never used.","line":27,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":27,"endColumn":8},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'ExternalLink' is defined but never used.","line":29,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":29,"endColumn":15},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'BarChart3' is defined but never used.","line":32,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":32,"endColumn":12},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":66,"column":13,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":66,"endColumn":16,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1520,1523],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1520,1523],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":79,"column":13,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":79,"endColumn":16,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1860,1863],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1860,1863],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'selectedProfile' is assigned a value but never used.","line":101,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":101,"endColumn":25},{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has a missing dependency: 'fetchClientProfiles'. Either include it or remove the dependency array.","line":111,"column":6,"nodeType":"ArrayExpression","endLine":111,"endColumn":34,"suggestions":[{"desc":"Update the dependencies array to be: [user?.id, filterBy, sortBy, fetchClientProfiles]","fix":{"range":[3005,3033],"text":"[user?.id, filterBy, sortBy, fetchClientProfiles]"}}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":351,"column":60,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":351,"endColumn":63,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[11244,11247],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[11244,11247],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":361,"column":58,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":361,"endColumn":61,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[11683,11686],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[11683,11686],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":15,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState, useEffect } from 'react';\nimport { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/Card';\nimport { Badge } from '@/components/ui/Badge';\nimport { Button } from '@/components/ui/Button';\nimport { Input } from '@/components/ui/Input';\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from '@/components/ui/Tabs';\nimport { Progress } from '@/components/ui/Progress';\nimport { Alert, AlertDescription } from '@/components/ui/Alert';\nimport { useAuth } from '@/contexts/AuthContext';\nimport { supabase } from '../../lib/core/supabase';\nimport {\n  Users,\n  Search,\n  Filter,\n  TrendingUp,\n  AlertCircle,\n  Mail,\n  Phone,\n  MapPin,\n  Building,\n  Calendar,\n  DollarSign,\n  Activity,\n  Zap,\n  Brain,\n  Target,\n  Clock,\n  Star,\n  ExternalLink,\n  RefreshCw,\n  Download,\n  BarChart3,\n  Eye,\n  MessageSquare,\n  Lightbulb\n} from 'lucide-react';\n\ninterface UnifiedClientProfile {\n  id: string;\n  client_id: string;\n  profile_data: {\n    name?: string;\n    email?: string;\n    phone?: string;\n    company?: string;\n    location?: string;\n    industry?: string;\n    website?: string;\n    social_profiles?: {\n      linkedin?: string;\n      twitter?: string;\n    };\n    demographics?: {\n      company_size?: string;\n      revenue_range?: string;\n      role?: string;\n    };\n  };\n  source_integrations: string[];\n  primary_source: string;\n  completeness_score: number;\n  engagement_score: number;\n  estimated_value: number;\n  last_interaction: string;\n  last_enrichment_at: string;\n  insights: any[];\n  created_at: string;\n  updated_at: string;\n}\n\ninterface ClientInteraction {\n  id: string;\n  client_profile_id: string;\n  interaction_type: 'email' | 'call' | 'meeting' | 'transaction' | 'support' | 'website_visit';\n  channel: string;\n  summary: string;\n  sentiment: 'positive' | 'neutral' | 'negative';\n  value: number;\n  metadata: any;\n  occurred_at: string;\n}\n\ninterface ClientIntelligenceAlert {\n  id: string;\n  client_profile_id: string;\n  alert_type: 'opportunity' | 'risk' | 'milestone' | 'anomaly';\n  title: string;\n  description: string;\n  priority: 'low' | 'medium' | 'high' | 'critical';\n  is_resolved: boolean;\n  created_at: string;\n}\n\nconst UnifiedClientProfilesView: React.FC = () => {\n  const { user } = useAuth();\n  const [profiles, setProfiles] = useState<UnifiedClientProfile[]>([]);\n  const [interactions, setInteractions] = useState<ClientInteraction[]>([]);\n  const [alerts, setAlerts] = useState<ClientIntelligenceAlert[]>([]);\n  const [isLoading, setIsLoading] = useState(true);\n  const [searchTerm, setSearchTerm] = useState('');\n  const [selectedProfile, setSelectedProfile] = useState<UnifiedClientProfile | null>(null);\n  const [filterBy, setFilterBy] = useState<'all' | 'high_value' | 'recent' | 'at_risk'>('all');\n  const [sortBy, setSortBy] = useState<'engagement' | 'value' | 'recent' | 'completeness'>('engagement');\n\n  useEffect(() => {\n    if (user?.id) {\n      fetchClientProfiles();\n      fetchInteractions();\n      fetchAlerts();\n    }\n  }, [user?.id, filterBy, sortBy]);\n\n  const fetchClientProfiles = async () => {\n    try {\n      setIsLoading(true);\n      \n      let query = supabase\n        .from('ai_unified_client_profiles')\n        .select('*')\n        .eq('user_id', user!.id);\n\n      // Apply filters\n      if (filterBy === 'high_value') {\n        query = query.gte('estimated_value', 10000);\n      } else if (filterBy === 'recent') {\n        query = query.gte('last_interaction', new Date(Date.now() - 7 * 24 * 60 * 60 * 1000).toISOString());\n      } else if (filterBy === 'at_risk') {\n        query = query.lt('engagement_score', 30);\n      }\n\n      // Apply sorting\n      if (sortBy === 'engagement') {\n        query = query.order('engagement_score', { ascending: false });\n      } else if (sortBy === 'value') {\n        query = query.order('estimated_value', { ascending: false });\n      } else if (sortBy === 'recent') {\n        query = query.order('last_interaction', { ascending: false });\n      } else if (sortBy === 'completeness') {\n        query = query.order('completeness_score', { ascending: false });\n      }\n\n      const { data, error } = await query.limit(50);\n\n      if (error) throw error;\n      setProfiles(data || []);\n    } catch (error) {\n      console.error('Error fetching client profiles:', error);\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  const fetchInteractions = async () => {\n    try {\n      const { data, error } = await supabase\n        .from('ai_client_interactions')\n        .select('*')\n        .order('occurred_at', { ascending: false })\n        .limit(100);\n\n      if (error) throw error;\n      setInteractions(data || []);\n    } catch (error) {\n      console.error('Error fetching interactions:', error);\n    }\n  };\n\n  const fetchAlerts = async () => {\n    try {\n      const { data, error } = await supabase\n        .from('ai_client_intelligence_alerts')\n        .select('*')\n        .eq('is_resolved', false)\n        .order('created_at', { ascending: false })\n        .limit(50);\n\n      if (error) throw error;\n      setAlerts(data || []);\n    } catch (error) {\n      console.error('Error fetching alerts:', error);\n    }\n  };\n\n  const triggerClientUnification = async (clientId: string) => {\n    try {\n      const response = await fetch('https://automate.marcoby.net/webhook/client-data-unification', {\n        method: 'POST',\n        headers: { 'Content-Type': 'application/json' },\n        body: JSON.stringify({\n          client_id: clientId,\n          user_id: user?.id,\n          company_id: user?.company_id,\n          type: 'profile_refresh'\n        })\n      });\n\n      if (response.ok) {\n        await fetchClientProfiles();\n      }\n    } catch (error) {\n      console.error('Error triggering client unification:', error);\n    }\n  };\n\n  const getEngagementColor = (score: number) => {\n    if (score >= 70) return 'text-success';\n    if (score >= 40) return 'text-warning';\n    return 'text-destructive';\n  };\n\n  const getValueColor = (value: number) => {\n    if (value >= 50000) return 'text-success';\n    if (value >= 10000) return 'text-warning';\n    return 'text-muted-foreground';\n  };\n\n  const getInteractionIcon = (type: string) => {\n    switch (type) {\n      case 'email': return <Mail className=\"w-4 h-4\" />;\n      case 'call': return <Phone className=\"w-4 h-4\" />;\n      case 'meeting': return <Calendar className=\"w-4 h-4\" />;\n      case 'transaction': return <DollarSign className=\"w-4 h-4\" />;\n      case 'support': return <MessageSquare className=\"w-4 h-4\" />;\n      case 'website_visit': return <Eye className=\"w-4 h-4\" />;\n      default: return <Activity className=\"w-4 h-4\" />;\n    }\n  };\n\n  const getAlertIcon = (type: string) => {\n    switch (type) {\n      case 'opportunity': return <Target className=\"w-4 h-4 text-success\" />;\n      case 'risk': return <AlertCircle className=\"w-4 h-4 text-destructive\" />;\n      case 'milestone': return <Star className=\"w-4 h-4 text-warning\" />;\n      case 'anomaly': return <TrendingUp className=\"w-4 h-4 text-primary\" />;\n      default: return <Lightbulb className=\"w-4 h-4\" />;\n    }\n  };\n\n  const filteredProfiles = profiles.filter(profile =>\n    searchTerm === '' ||\n    profile.profile_data.name?.toLowerCase().includes(searchTerm.toLowerCase()) ||\n    profile.profile_data.email?.toLowerCase().includes(searchTerm.toLowerCase()) ||\n    profile.profile_data.company?.toLowerCase().includes(searchTerm.toLowerCase())\n  );\n\n  if (isLoading) {\n    return (\n      <div className=\"flex items-center justify-center p-8\">\n        <RefreshCw className=\"w-6 h-6 animate-spin mr-3\" />\n        <span>Loading client intelligence...</span>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"space-y-6\">\n      {/* Header */}\n      <div className=\"flex flex-col sm:flex-row sm:items-center sm:justify-between gap-4\">\n        <div>\n          <h2 className=\"text-2xl font-bold flex items-center gap-2\">\n            <Brain className=\"w-6 h-6 text-primary\" />\n            Unified Client Intelligence\n          </h2>\n          <p className=\"text-muted-foreground\">\n            AI-powered client profiles unified across all your integrations\n          </p>\n        </div>\n        <div className=\"flex gap-2\">\n          <Button variant=\"outline\" onClick={fetchClientProfiles}>\n            <RefreshCw className=\"w-4 h-4 mr-2\" />\n            Refresh\n          </Button>\n          <Button variant=\"outline\">\n            <Download className=\"w-4 h-4 mr-2\" />\n            Export\n          </Button>\n        </div>\n      </div>\n\n      {/* Summary Stats */}\n      <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-4\">\n        <Card>\n          <CardContent className=\"p-6\">\n            <div className=\"flex items-center justify-between\">\n              <div>\n                <p className=\"text-sm text-muted-foreground\">Total Clients</p>\n                <p className=\"text-2xl font-bold\">{profiles.length}</p>\n              </div>\n              <Users className=\"w-8 h-8 text-primary\" />\n            </div>\n          </CardContent>\n        </Card>\n\n        <Card>\n          <CardContent className=\"p-6\">\n            <div className=\"flex items-center justify-between\">\n              <div>\n                <p className=\"text-sm text-muted-foreground\">Total Value</p>\n                <p className=\"text-2xl font-bold\">\n                  ${profiles.reduce((sum, p) => sum + p.estimated_value, 0).toLocaleString()}\n                </p>\n              </div>\n              <DollarSign className=\"w-8 h-8 text-success\" />\n            </div>\n          </CardContent>\n        </Card>\n\n        <Card>\n          <CardContent className=\"p-6\">\n            <div className=\"flex items-center justify-between\">\n              <div>\n                <p className=\"text-sm text-muted-foreground\">Avg Engagement</p>\n                <p className=\"text-2xl font-bold\">\n                  {Math.round(profiles.reduce((sum, p) => sum + p.engagement_score, 0) / profiles.length || 0)}%\n                </p>\n              </div>\n              <Activity className=\"w-8 h-8 text-warning\" />\n            </div>\n          </CardContent>\n        </Card>\n\n        <Card>\n          <CardContent className=\"p-6\">\n            <div className=\"flex items-center justify-between\">\n              <div>\n                <p className=\"text-sm text-muted-foreground\">Active Alerts</p>\n                <p className=\"text-2xl font-bold\">{alerts.length}</p>\n              </div>\n              <AlertCircle className=\"w-8 h-8 text-destructive\" />\n            </div>\n          </CardContent>\n        </Card>\n      </div>\n\n      {/* Filters and Search */}\n      <div className=\"flex flex-col sm:flex-row gap-4\">\n        <div className=\"flex-1\">\n          <div className=\"relative\">\n            <Search className=\"absolute left-3 top-1/2 transform -translate-y-1/2 text-muted-foreground w-4 h-4\" />\n            <Input\n              placeholder=\"Search clients by name, email, or company...\"\n              value={searchTerm}\n              onChange={(e) => setSearchTerm(e.target.value)}\n              className=\"pl-10\"\n            />\n          </div>\n        </div>\n        <div className=\"flex gap-2\">\n          <select\n            value={filterBy}\n            onChange={(e) => setFilterBy(e.target.value as any)}\n            className=\"px-3 py-2 border rounded-md bg-background\"\n          >\n            <option value=\"all\">All Clients</option>\n            <option value=\"high_value\">High Value ($10K+)</option>\n            <option value=\"recent\">Recent Activity</option>\n            <option value=\"at_risk\">At Risk</option>\n          </select>\n          <select\n            value={sortBy}\n            onChange={(e) => setSortBy(e.target.value as any)}\n            className=\"px-3 py-2 border rounded-md bg-background\"\n          >\n            <option value=\"engagement\">Sort by Engagement</option>\n            <option value=\"value\">Sort by Value</option>\n            <option value=\"recent\">Sort by Recent</option>\n            <option value=\"completeness\">Sort by Completeness</option>\n          </select>\n        </div>\n      </div>\n\n      {/* Active Alerts */}\n      {alerts.length > 0 && (\n        <Card>\n          <CardHeader>\n            <CardTitle className=\"flex items-center gap-2\">\n              <AlertCircle className=\"w-5 h-5 text-destructive\" />\n              Active Intelligence Alerts\n            </CardTitle>\n          </CardHeader>\n          <CardContent>\n            <div className=\"space-y-3\">\n              {alerts.slice(0, 5).map((alert) => (\n                <Alert key={alert.id} className={`border-l-4 ${\n                  alert.priority === 'critical' ? 'border-l-destructive' :\n                  alert.priority === 'high' ? 'border-l-warning' :\n                  'border-l-primary'\n                }`}>\n                  <div className=\"flex items-start justify-between\">\n                    <div className=\"flex items-start gap-3\">\n                      {getAlertIcon(alert.alert_type)}\n                      <div>\n                        <h4 className=\"font-medium\">{alert.title}</h4>\n                        <p className=\"text-sm text-muted-foreground\">{alert.description}</p>\n                        <div className=\"flex items-center gap-2 mt-2\">\n                          <Badge variant=\"outline\" className=\"text-xs\">\n                            {alert.alert_type}\n                          </Badge>\n                          <Badge variant=\"outline\" className=\"text-xs\">\n                            {alert.priority} priority\n                          </Badge>\n                        </div>\n                      </div>\n                    </div>\n                    <Button size=\"sm\" variant=\"outline\">\n                      View Client\n                    </Button>\n                  </div>\n                </Alert>\n              ))}\n            </div>\n          </CardContent>\n        </Card>\n      )}\n\n      {/* Client Profiles */}\n      <div className=\"grid gap-6\">\n        {filteredProfiles.map((profile) => (\n          <Card key={profile.id} className=\"overflow-hidden hover:shadow-lg transition-shadow\">\n            <CardContent className=\"p-6\">\n              <div className=\"flex items-start justify-between\">\n                <div className=\"flex items-start space-x-4 flex-1\">\n                  {/* Client Avatar/Initial */}\n                  <div className=\"w-12 h-12 rounded-full bg-primary/10 flex items-center justify-center\">\n                    <span className=\"text-lg font-semibold text-primary\">\n                      {profile.profile_data.name?.charAt(0) || profile.profile_data.email?.charAt(0) || '?'}\n                    </span>\n                  </div>\n\n                  {/* Client Info */}\n                  <div className=\"flex-1 space-y-3\">\n                    <div>\n                      <h3 className=\"text-lg font-semibold\">\n                        {profile.profile_data.name || 'Unknown Client'}\n                      </h3>\n                      <div className=\"flex items-center gap-4 text-sm text-muted-foreground\">\n                        {profile.profile_data.email && (\n                          <div className=\"flex items-center gap-1\">\n                            <Mail className=\"w-3 h-3\" />\n                            {profile.profile_data.email}\n                          </div>\n                        )}\n                        {profile.profile_data.company && (\n                          <div className=\"flex items-center gap-1\">\n                            <Building className=\"w-3 h-3\" />\n                            {profile.profile_data.company}\n                          </div>\n                        )}\n                        {profile.profile_data.location && (\n                          <div className=\"flex items-center gap-1\">\n                            <MapPin className=\"w-3 h-3\" />\n                            {profile.profile_data.location}\n                          </div>\n                        )}\n                      </div>\n                    </div>\n\n                    {/* Metrics */}\n                    <div className=\"grid grid-cols-2 md:grid-cols-4 gap-4\">\n                      <div>\n                        <p className=\"text-xs text-muted-foreground\">Engagement Score</p>\n                        <div className=\"flex items-center gap-2\">\n                          <span className={`text-sm font-semibold ${getEngagementColor(profile.engagement_score)}`}>\n                            {profile.engagement_score}%\n                          </span>\n                          <Progress value={profile.engagement_score} className=\"w-16 h-1\" />\n                        </div>\n                      </div>\n                      <div>\n                        <p className=\"text-xs text-muted-foreground\">Estimated Value</p>\n                        <p className={`text-sm font-semibold ${getValueColor(profile.estimated_value)}`}>\n                          ${profile.estimated_value.toLocaleString()}\n                        </p>\n                      </div>\n                      <div>\n                        <p className=\"text-xs text-muted-foreground\">Profile Complete</p>\n                        <div className=\"flex items-center gap-2\">\n                          <span className=\"text-sm font-semibold\">{profile.completeness_score}%</span>\n                          <Progress value={profile.completeness_score} className=\"w-16 h-1\" />\n                        </div>\n                      </div>\n                      <div>\n                        <p className=\"text-xs text-muted-foreground\">Data Sources</p>\n                        <p className=\"text-sm font-semibold\">{profile.source_integrations.length}</p>\n                      </div>\n                    </div>\n\n                    {/* Data Sources */}\n                    <div className=\"flex items-center gap-2\">\n                      <span className=\"text-xs text-muted-foreground\">Sources:</span>\n                      <div className=\"flex gap-1\">\n                        {profile.source_integrations.map((source, index) => (\n                          <Badge key={index} variant=\"secondary\" className=\"text-xs\">\n                            {source}\n                          </Badge>\n                        ))}\n                      </div>\n                      {profile.primary_source && (\n                        <Badge variant=\"outline\" className=\"text-xs\">\n                          Primary: {profile.primary_source}\n                        </Badge>\n                      )}\n                    </div>\n\n                    {/* Recent Interactions */}\n                    {interactions.filter(i => i.client_profile_id === profile.id).length > 0 && (\n                      <div>\n                        <p className=\"text-xs text-muted-foreground mb-2\">Recent Activity:</p>\n                        <div className=\"flex gap-2\">\n                          {interactions\n                            .filter(i => i.client_profile_id === profile.id)\n                            .slice(0, 3)\n                            .map((interaction, index) => (\n                              <div key={index} className=\"flex items-center gap-1 text-xs bg-muted/50 px-2 py-1 rounded\">\n                                {getInteractionIcon(interaction.interaction_type)}\n                                <span>{interaction.interaction_type}</span>\n                                <span className=\"text-muted-foreground\">\n                                  {new Date(interaction.occurred_at).toLocaleDateString()}\n                                </span>\n                              </div>\n                            ))}\n                        </div>\n                      </div>\n                    )}\n                  </div>\n                </div>\n\n                {/* Actions */}\n                <div className=\"flex flex-col gap-2\">\n                  <Button\n                    size=\"sm\"\n                    onClick={() => setSelectedProfile(profile)}\n                  >\n                    <Eye className=\"w-4 h-4 mr-2\" />\n                    View Details\n                  </Button>\n                  <Button\n                    size=\"sm\"\n                    variant=\"outline\"\n                    onClick={() => triggerClientUnification(profile.client_id)}\n                  >\n                    <Zap className=\"w-4 h-4 mr-2\" />\n                    Refresh\n                  </Button>\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n        ))}\n      </div>\n\n      {filteredProfiles.length === 0 && (\n        <Card>\n          <CardContent className=\"p-12 text-center\">\n            <Users className=\"w-12 h-12 mx-auto mb-4 text-muted-foreground\" />\n            <h3 className=\"text-lg font-semibold mb-2\">No Client Profiles Found</h3>\n            <p className=\"text-muted-foreground mb-4\">\n              {searchTerm \n                ? \"No clients match your search criteria.\"\n                : \"Your client intelligence system is ready. Client profiles will appear here as data is collected from your integrations.\"\n              }\n            </p>\n            {!searchTerm && (\n              <Button onClick={fetchClientProfiles}>\n                <RefreshCw className=\"w-4 h-4 mr-2\" />\n                Check for New Data\n              </Button>\n            )}\n          </CardContent>\n        </Card>\n      )}\n    </div>\n  );\n};\n\nexport default UnifiedClientProfilesView; ","usedDeprecatedRules":[]},{"filePath":"/home/vonj/Github/Nexus/src/components/integrations/index.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/vonj/Github/Nexus/src/components/layout/AppShell.test.tsx","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":20,"column":40,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":20,"endColumn":43,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[612,615],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[612,615],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":26,"column":55,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":26,"endColumn":58,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[825,828],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[825,828],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\n * @file AppShell.test.tsx\n * @description Unit and snapshot tests for the AppShell layout component.\n */\nimport React from 'react';\nimport { render, screen, fireEvent } from '@testing-library/react';\nimport '@testing-library/jest-dom';\n\n// Mock react-router-dom hooks and components\njest.mock('react-router-dom', () => ({\n  ...jest.requireActual('react-router-dom'),\n  useLocation: jest.fn(),\n  useNavigate: jest.fn(),\n  Outlet: () => <div data-testid=\"outlet\">Outlet Content</div>,\n}));\n\n// Mock Sidebar and Header\njest.mock('./Sidebar', () => ({\n  __esModule: true,\n  default: ({ isOpen, toggleSidebar }: any) => (\n    <div data-testid=\"sidebar\" data-open={isOpen} onClick={toggleSidebar}>Sidebar</div>\n  ),\n}));\njest.mock('./Header', () => ({\n  __esModule: true,\n  default: ({ toggleSidebar, breadcrumbs, subtitle }: any) => (\n    <div data-testid=\"header\">\n      <button onClick={toggleSidebar}>Toggle</button>\n      <div data-testid=\"breadcrumbs\">{JSON.stringify(breadcrumbs)}</div>\n      <div data-testid=\"subtitle\">{subtitle}</div>\n    </div>\n  ),\n}));\n\nimport AppShell from './AppShell';\nimport { useLocation } from 'react-router-dom';\n\ndescribe('AppShell', () => {\n  beforeEach(() => {\n    (useLocation as jest.Mock).mockReturnValue({ pathname: '/dashboard' });\n  });\n\n  it('renders Sidebar, Header, and Outlet', () => {\n    render(<AppShell />);\n    expect(screen.getByTestId('sidebar')).toBeInTheDocument();\n    expect(screen.getByTestId('header')).toBeInTheDocument();\n    expect(screen.getByTestId('outlet')).toBeInTheDocument();\n  });\n\n  it('toggles sidebar when Sidebar or Header toggle is clicked', () => {\n    render(<AppShell />);\n    const sidebar = screen.getByTestId('sidebar');\n    // Sidebar starts closed (false)\n    expect(sidebar).toHaveAttribute('data-open', 'false');\n    // Click to open\n    fireEvent.click(sidebar);\n    expect(screen.getByTestId('sidebar')).toHaveAttribute('data-open', 'true');\n    // Click to close\n    fireEvent.click(sidebar);\n    expect(screen.getByTestId('sidebar')).toHaveAttribute('data-open', 'false');\n  });\n\n  it('passes correct breadcrumbs and subtitle to Header', () => {\n    (useLocation as jest.Mock).mockReturnValue({ pathname: '/sales' });\n    render(<AppShell />);\n    expect(screen.getByTestId('breadcrumbs').textContent).toContain('Sales');\n    expect(screen.getByTestId('subtitle').textContent).toContain('Sales Dashboard');\n  });\n\n  it('matches snapshot', () => {\n    const { asFragment } = render(<AppShell />);\n    expect(asFragment()).toMatchSnapshot();\n  });\n}); ","usedDeprecatedRules":[]},{"filePath":"/home/vonj/Github/Nexus/src/components/layout/CommandPalette.tsx","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":25,"column":26,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":25,"endColumn":29,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[821,824],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[821,824],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState, useEffect, useRef } from 'react';\nimport { useNavigate } from 'react-router-dom';\nimport { navItems } from './navConfig';\nimport { features as featureRegistry } from '@/lib/ui/featureRegistry';\nimport { getSlashCommands, type SlashCommand } from '@/lib/services/slashCommandService';\nimport Modal from '@/components/ui/Modal';\nimport { Input } from '@/components/ui/Input';\nimport { Badge } from '@/components/ui/Badge';\nimport { Search, Terminal, ArrowRight } from 'lucide-react';\n\ntype NavItem = import('./navConfig').NavItem;\ninterface FeatureItem {\n  id: string;\n  name: string;\n  path: string;\n  icon?: React.ReactNode;\n}\n\ninterface CommandPaletteProps {\n  open: boolean;\n  onClose: () => void;\n}\n\n// Type guard to differentiate command items from navigation items\nconst isCommand = (item: any): item is SlashCommand => {\n  return 'slug' in item && typeof item.slug === 'string';\n};\n\nexport const CommandPalette: React.FC<CommandPaletteProps> = ({ open, onClose }) => {\n  const [query, setQuery] = useState('');\n  const [searchIndex, setSearchIndex] = useState(0);\n  const [commands, setCommands] = useState<SlashCommand[]>([]);\n  const inputRef = useRef<HTMLInputElement>(null);\n  const navigate = useNavigate();\n\n  useEffect(() => {\n    if (open) {\n      setTimeout(() => inputRef.current?.focus(), 100);\n      const loadCommands = async () => {\n        try {\n          const slashCommands = await getSlashCommands();\n          setCommands(slashCommands);\n        } catch (error) {\n          console.error(\"Failed to load slash commands:\", error);\n          setCommands([]);\n        }\n      };\n      loadCommands();\n    }\n  }, [open]);\n\n  const navResults = [\n    ...navItems.filter(item => item.name.toLowerCase().includes(query.toLowerCase())),\n    ...featureRegistry.filter(f => f.name.toLowerCase().includes(query.toLowerCase())),\n  ];\n\n  const commandResults = commands.filter(c =>\n    c.title.toLowerCase().includes(query.toLowerCase()) ||\n    c.slug.toLowerCase().includes(query.toLowerCase())\n  );\n\n  const results: (NavItem | FeatureItem | SlashCommand)[] = [...navResults, ...commandResults];\n\n  const handleSelect = (item: NavItem | FeatureItem | SlashCommand) => {\n    if (isCommand(item)) {\n      // Basic command execution - can be expanded\n      console.log(`Executing command: /${item.slug}`);\n      // You might want to pass this to a global command handler\n    } else {\n      navigate(item.path);\n    }\n    setQuery('');\n    onClose();\n  };\n\n  const handleKeyDown = (e: React.KeyboardEvent<HTMLInputElement>) => {\n    if (e.key === 'ArrowDown') {\n      e.preventDefault();\n      setSearchIndex(prev => (prev + 1) % (results.length || 1));\n    } else if (e.key === 'ArrowUp') {\n      e.preventDefault();\n      setSearchIndex(prev => (prev > 0 ? prev - 1 : results.length - 1));\n    } else if (e.key === 'Enter' && results[searchIndex]) {\n      e.preventDefault();\n      handleSelect(results[searchIndex]);\n    }\n  };\n\n  return (\n    <Modal open={open} onClose={onClose} title=\"Command Palette\">\n      <div className=\"relative\">\n        <Search className=\"absolute left-3 top-1/2 -translate-y-1/2 h-4 w-4 text-muted-foreground\" />\n        <Input\n          ref={inputRef}\n          value={query}\n          onChange={e => {\n            setQuery(e.target.value);\n            setSearchIndex(0);\n          }}\n          onKeyDown={handleKeyDown}\n          placeholder=\"Search for pages, features, or commands...\"\n          aria-label=\"Search\"\n          className=\"pl-10\"\n        />\n      </div>\n      <ul role=\"listbox\" aria-label=\"Search results\" className=\"mt-4 max-h-[60vh] overflow-y-auto\">\n        {results.length === 0 && (\n          <li className=\"p-4 text-center text-muted-foreground\">No results found.</li>\n        )}\n        {results.map((item, i) => (\n          <li\n            key={isCommand(item) ? item.slug : item.path}\n            role=\"option\"\n            aria-selected={i === searchIndex}\n            className={`flex items-center justify-between px-4 py-3 rounded-md cursor-pointer ${\n              i === searchIndex ? 'bg-primary/10 text-primary' : 'hover:bg-muted'\n            }`}\n            onMouseEnter={() => setSearchIndex(i)}\n            onClick={() => handleSelect(item)}\n          >\n            <div className=\"flex items-center\">\n              <span className=\"mr-3 text-muted-foreground\">\n                {isCommand(item) ? <Terminal className=\"w-4 h-4\" /> : item.icon || <ArrowRight className=\"w-4 h-4\" />}\n              </span>\n              <span>{isCommand(item) ? item.title : item.name}</span>\n            </div>\n            <Badge variant=\"secondary\">{isCommand(item) ? 'Command' : 'Navigate'}</Badge>\n          </li>\n        ))}\n      </ul>\n    </Modal>\n  );\n}; ","usedDeprecatedRules":[]},{"filePath":"/home/vonj/Github/Nexus/src/components/layout/Header.test.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/vonj/Github/Nexus/src/components/layout/Header.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'featureRegistry' is defined but never used.","line":10,"column":22,"nodeType":null,"messageId":"unusedVar","endLine":10,"endColumn":37},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'FeatureItem' is defined but never used.","line":14,"column":11,"nodeType":null,"messageId":"unusedVar","endLine":14,"endColumn":22},{"ruleId":"no-restricted-syntax","severity":1,"message":"Use design tokens instead of hardcoded colors (e.g., bg-primary, bg-secondary)","line":143,"column":63,"nodeType":"Literal","messageId":"restrictedSyntax","endLine":143,"endColumn":77},{"ruleId":"no-restricted-syntax","severity":1,"message":"Use design tokens instead of hardcoded colors (e.g., bg-primary, bg-secondary)","line":144,"column":63,"nodeType":"Literal","messageId":"restrictedSyntax","endLine":144,"endColumn":78},{"ruleId":"no-restricted-syntax","severity":1,"message":"Use design tokens instead of hardcoded colors (e.g., bg-primary, bg-secondary)","line":145,"column":61,"nodeType":"Literal","messageId":"restrictedSyntax","endLine":145,"endColumn":73},{"ruleId":"no-restricted-syntax","severity":1,"message":"Use design tokens instead of hardcoded colors (e.g., bg-primary, bg-secondary)","line":146,"column":29,"nodeType":"Literal","messageId":"restrictedSyntax","endLine":146,"endColumn":42},{"ruleId":"no-restricted-syntax","severity":1,"message":"Use design tokens instead of hardcoded colors (e.g., bg-primary, bg-secondary)","line":220,"column":31,"nodeType":"Literal","messageId":"restrictedSyntax","endLine":220,"endColumn":137},{"ruleId":"no-restricted-syntax","severity":1,"message":"Use design tokens instead of hardcoded text colors (e.g., text-foreground, text-muted-foreground)","line":220,"column":31,"nodeType":"Literal","messageId":"restrictedSyntax","endLine":220,"endColumn":137}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { useState, useRef, useEffect } from 'react';\nimport { Link, useLocation } from 'react-router-dom';\nimport { useAuth } from '@/contexts/AuthContext';\nimport { useTheme } from '@/components/ui/theme-provider';\nimport { useNotifications } from '@/contexts/NotificationContext';\nimport { CommandPalette } from './CommandPalette';\nimport { QuickChatTrigger } from '@/components/ai/QuickChatTrigger';\nimport { Menu, Bell, Sun, Moon, User, Settings, Search, Palette } from 'lucide-react';\nimport { navItems } from './navConfig';\nimport { features as featureRegistry } from '@/lib/ui/featureRegistry';\n\ntype NavItem = import('./navConfig').NavItem;\n\ninterface FeatureItem {\n  id: string;\n  name: string;\n  path: string;\n  icon?: React.ReactNode;\n}\n\nexport function Header({ onSidebarToggle, onThemePanelToggle }: { onSidebarToggle: () => void; onThemePanelToggle: () => void; }) {\n  const { user, signOut } = useAuth();\n  const { theme, setTheme } = useTheme();\n  const { notifications, unreadCount, markAsRead } = useNotifications();\n  const [showUserMenu, setShowUserMenu] = useState(false);\n  const [showNotifications, setShowNotifications] = useState(false);\n  const [searchOpen, setSearchOpen] = useState(false);\n\n  const userMenuRef = useRef<HTMLDivElement>(null);\n  const notificationsRef = useRef<HTMLDivElement>(null);\n  const location = useLocation();\n\n  const displayName = user?.profile?.display_name || user?.email?.split('@')[0] || 'User';\n  const initials = displayName.split(' ').map((n: string) => n[0]).join('').substring(0, 2).toUpperCase();\n  \n  useEffect(() => {\n    const handleClickOutside = (event: MouseEvent) => {\n      if (userMenuRef.current && !userMenuRef.current.contains(event.target as Node)) {\n        setShowUserMenu(false);\n      }\n      if (notificationsRef.current && !notificationsRef.current.contains(event.target as Node)) {\n        setShowNotifications(false);\n      }\n    };\n    document.addEventListener('mousedown', handleClickOutside);\n    return () => document.removeEventListener('mousedown', handleClickOutside);\n  }, []);\n  \n  // Keyboard shortcut for Command Palette\n  useEffect(() => {\n    const handler = (e: KeyboardEvent) => {\n      if ((e.metaKey || e.ctrlKey) && e.key === 'k') {\n        e.preventDefault();\n        setSearchOpen(o => !o);\n      }\n    };\n    window.addEventListener('keydown', handler);\n    return () => window.removeEventListener('keydown', handler);\n  }, []);\n\n  const isActive = (path: string) => location.pathname.startsWith(path);\n\n  return (\n    <header className=\"bg-card shadow-sm z-30 border-b border-border\">\n      <div className=\"flex h-16 items-center justify-between px-4\">\n        <div className=\"flex items-center gap-2\">\n          <button\n            className=\"lg:hidden mr-2 p-2\"\n            onClick={onSidebarToggle}\n          >\n            <Menu className=\"h-6 w-6\" />\n          </button>\n          <h1 className=\"text-xl font-semibold text-foreground\">\n            {navItems.find((item: NavItem) => isActive(item.path))?.name || 'Dashboard'}\n          </h1>\n        </div>\n        <div className=\"flex items-center space-x-2 sm:space-x-4\">\n          <button\n            aria-label=\"Open command palette\"\n            className=\"p-2 rounded-full text-muted-foreground hover:text-foreground hover:bg-muted transition-colors\"\n            onClick={() => setSearchOpen(true)}\n          >\n            <Search className=\"w-5 h-5\" />\n          </button>\n          <CommandPalette open={searchOpen} onClose={() => setSearchOpen(false)} />\n\n          <button\n            onClick={onThemePanelToggle}\n            title=\"Customize Theme\"\n            className=\"p-2 rounded-full text-muted-foreground hover:text-foreground hover:bg-muted transition-colors\"\n          >\n            <Palette className=\"w-5 h-5\" />\n          </button>\n\n          <button\n            onClick={() => setTheme(theme === 'dark' ? 'light' : 'dark')}\n            title={theme === 'dark' ? 'Switch to light mode' : 'Switch to dark mode'}\n            className=\"p-2 rounded-full text-muted-foreground hover:text-foreground hover:bg-muted transition-colors\"\n          >\n            {theme === 'dark' ? <Sun className=\"w-5 h-5\" /> : <Moon className=\"w-5 h-5\" />}\n          </button>\n\n          <div className=\"relative\" ref={notificationsRef}>\n            <button\n              title=\"Notifications\"\n              className=\"p-2 rounded-full text-muted-foreground hover:text-foreground hover:bg-muted transition-colors\"\n              onClick={() => setShowNotifications(!showNotifications)}\n            >\n              <Bell className=\"w-5 h-5\" />\n              {unreadCount > 0 && (\n                <span className=\"absolute -top-0.5 -right-0.5 h-4 w-4 bg-destructive text-destructive-foreground text-xs font-bold rounded-full flex items-center justify-center text-[10px] pointer-events-none\">\n                  {unreadCount}\n                </span>\n              )}\n            </button>\n            {showNotifications && (\n              <div className=\"absolute right-0 top-full mt-2 w-80 bg-card border border-border rounded-lg shadow-xl z-50\">\n                <div className=\"p-3 border-b border-border flex items-center justify-between\">\n                  <h3 className=\"text-sm font-semibold text-foreground\">Notifications</h3>\n                  {unreadCount > 0 && (\n                    <button\n                      onClick={() => {\n                        notifications.forEach(n => !n.read && markAsRead(n.id));\n                        setShowNotifications(false);\n                      }}\n                      className=\"text-xs text-primary hover:underline\"\n                    >\n                      Mark all as read\n                    </button>\n                  )}\n                </div>\n                <div className=\"max-h-96 overflow-y-auto\">\n                  {notifications.length === 0 ? (\n                    <div className=\"p-4 text-center text-muted-foreground text-sm\">You're all caught up!</div>\n                  ) : (\n                    notifications.map((notification) => (\n                      <div\n                        key={notification.id}\n                        className={`p-3 border-b border-border last:border-b-0 ${!notification.read ? 'bg-muted/50' : ''}`}\n                      >\n                        <div className=\"flex items-start space-x-3\">\n                          <div className={`w-2 h-2 rounded-full mt-1.5 flex-shrink-0 ${\n                            notification.type === 'success' ? 'bg-green-500' :\n                            notification.type === 'warning' ? 'bg-yellow-500' :\n                            notification.type === 'error' ? 'bg-red-500' :\n                            'bg-blue-500'\n                          }`} />\n                          <div className=\"flex-1 min-w-0\">\n                            <p className=\"text-sm text-foreground\">\n                              {notification.message}\n                            </p>\n                            <p className=\"text-xs text-muted-foreground mt-1\">\n                              {new Date(notification.timestamp).toLocaleString()}\n                            </p>\n                          </div>\n                          {!notification.read && (\n                            <button\n                              onClick={(e) => {\n                                e.stopPropagation();\n                                markAsRead(notification.id);\n                              }}\n                              className=\"text-xs text-primary hover:underline\"\n                            >\n                              Mark read\n                            </button>\n                          )}\n                        </div>\n                      </div>\n                    ))\n                  )}\n                </div>\n              </div>\n            )}\n          </div>\n          \n          <QuickChatTrigger position=\"bottom-right\" theme=\"vibrant\" showBadge={false} />\n\n          <div className=\"relative\" ref={userMenuRef}>\n            <button\n              title=\"User Profile\"\n              className=\"w-8 h-8 rounded-full bg-accent hover:opacity-90 transition-opacity flex items-center justify-center\"\n              onClick={() => setShowUserMenu(!showUserMenu)}\n            >\n              <span className=\"text-sm font-semibold text-accent-foreground\">{initials}</span>\n            </button>\n            {showUserMenu && (\n              <div className=\"absolute right-0 top-full mt-2 w-64 bg-card border border-border rounded-lg shadow-xl z-50\">\n                <div className=\"p-4 border-b border-border flex items-center space-x-3\">\n                  <div className=\"w-10 h-10 rounded-full bg-accent flex items-center justify-center text-lg font-semibold text-accent-foreground\">\n                    {initials}\n                  </div>\n                  <div className=\"flex-1 min-w-0\">\n                    <p className=\"font-semibold text-foreground truncate\">{displayName}</p>\n                    <p className=\"text-sm text-muted-foreground truncate\">{user?.email}</p>\n                  </div>\n                </div>\n                <div className=\"p-2\">\n                  <Link\n                    to=\"/profile\"\n                    onClick={() => setShowUserMenu(false)}\n                    className=\"w-full flex items-center px-3 py-2 text-sm text-foreground hover:bg-muted rounded-md transition-colors\"\n                  >\n                    <User className=\"w-4 h-4 mr-3 text-muted-foreground\" />\n                    View Profile\n                  </Link>\n                  <Link\n                    to=\"/settings\"\n                    onClick={() => setShowUserMenu(false)}\n                    className=\"w-full flex items-center px-3 py-2 text-sm text-foreground hover:bg-muted rounded-md transition-colors\"\n                  >\n                    <Settings className=\"w-4 h-4 mr-3 text-muted-foreground\" />\n                    Account Settings\n                  </Link>\n                  <div className=\"h-px bg-border my-1\" />\n                  <button\n                    onClick={() => {\n                      setShowUserMenu(false);\n                      signOut();\n                    }}\n                    className=\"w-full flex items-center px-3 py-2 text-sm text-red-500 hover:bg-red-500/10 rounded-md transition-colors\"\n                  >\n                    <svg className=\"w-4 h-4 mr-3\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\"><path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M17 16l4-4m0 0l-4-4m4 4H7m6 4v1a3 3 0 01-3 3H6a3 3 0 01-3-3V7a3 3 0 013-3v1\" /></svg>\n                    Sign Out\n                  </button>\n                </div>\n              </div>\n            )}\n          </div>\n        </div>\n      </div>\n    </header>\n  );\n} ","usedDeprecatedRules":[]},{"filePath":"/home/vonj/Github/Nexus/src/components/layout/Layout.test.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/vonj/Github/Nexus/src/components/layout/OrgSwitcher.tsx","messages":[],"suppressedMessages":[{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook React.useEffect has missing dependencies: 'loadMemberships' and 'user'. Either include them or remove the dependency array.","line":15,"column":6,"nodeType":"ArrayExpression","endLine":15,"endColumn":16,"suggestions":[{"desc":"Update the dependencies array to be: [loadMemberships, user, user.id]","fix":{"range":[501,511],"text":"[loadMemberships, user, user.id]"}}],"suppressions":[{"kind":"directive","justification":""}]}],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/vonj/Github/Nexus/src/components/layout/PageLayout.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/vonj/Github/Nexus/src/components/layout/Sidebar.test.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/vonj/Github/Nexus/src/components/layout/Sidebar.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'hovered' is assigned a value but never used.","line":11,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":11,"endColumn":17}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { Link, useLocation } from 'react-router-dom';\nimport { navItems } from './navConfig';\nimport { X } from 'lucide-react';\nimport { useState } from 'react';\n\ntype NavItem = import('./navConfig').NavItem;\n\nexport function Sidebar({ isOpen, onClose }: { isOpen: boolean; onClose: () => void }) {\n  const location = useLocation();\n  const isActive = (path: string) => location.pathname === path || location.pathname.startsWith(path + '/');\n  const [hovered, setHovered] = useState<string | null>(null);\n\n  return (\n    <>\n      <aside\n        className={`fixed inset-y-0 left-0 z-50 w-64 transform bg-card border-r border-border transition-transform duration-300 ease-in-out lg:translate-x-0 lg:static lg:inset-auto lg:z-auto ${\n          isOpen ? 'translate-x-0' : '-translate-x-full'\n        }`}\n      >\n        <div className=\"flex h-16 items-center justify-between px-4 border-b border-border\">\n          <Link to=\"/dashboard\" className=\"text-xl font-bold\">\n            Nexus\n          </Link>\n          <button className=\"lg:hidden p-2\" onClick={onClose}>\n            <X className=\"h-6 w-6\" />\n          </button>\n        </div>\n        <nav className=\"mt-5 px-2 space-y-1\">\n          {navItems.map((item: NavItem) => (\n            <div\n              key={item.name}\n              className=\"relative group\"\n              onMouseEnter={() => setHovered(item.name)}\n              onMouseLeave={() => setHovered(null)}\n            >\n              <Link\n                to={item.path}\n                onClick={onClose}\n                className={`flex items-center px-4 py-2 text-sm font-medium rounded-md transition-colors ${\n                  isActive(item.path)\n                    ? 'bg-primary/10 text-primary'\n                    : 'text-foreground hover:bg-muted'\n                }`}\n              >\n                {item.icon}\n                <span className=\"ml-3\">{item.name}</span>\n                {item.children && (\n                  <svg className=\"ml-auto w-4 h-4 text-muted-foreground group-hover:text-primary transition-colors\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\"><path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M9 5l7 7-7 7\" /></svg>\n                )}\n              </Link>\n              {item.children && (\n                <div\n                  className={`absolute left-full top-0 mt-0 ml-1 w-48 bg-card border border-border rounded-md shadow-lg opacity-0 pointer-events-none group-hover:opacity-100 group-hover:pointer-events-auto transition-opacity duration-200 z-50`}\n                  style={{ minWidth: '10rem' }}\n                >\n                  <ul className=\"py-2\">\n                    {item.children.map((child) => (\n                      <li key={child.path}>\n                        <Link\n                          to={child.path}\n                          onClick={onClose}\n                          className={`block px-4 py-2 text-sm rounded-md transition-colors ${\n                            isActive(child.path)\n                              ? 'bg-primary/10 text-primary'\n                              : 'text-foreground hover:bg-muted'\n                          }`}\n                        >\n                          {child.name}\n                        </Link>\n                      </li>\n                    ))}\n                  </ul>\n                </div>\n              )}\n            </div>\n          ))}\n        </nav>\n      </aside>\n      {isOpen && (\n        <div\n          className=\"fixed inset-0 z-40 bg-background/80 backdrop-blur-sm lg:hidden\"\n          onClick={onClose}\n        />\n      )}\n    </>\n  );\n} ","usedDeprecatedRules":[]},{"filePath":"/home/vonj/Github/Nexus/src/components/layout/UnifiedLayout.stories.tsx","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":8,"column":24,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":8,"endColumn":27,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[227,230],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[227,230],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React from 'react';\nimport { UnifiedLayout } from './UnifiedLayout';\nimport { MemoryRouter } from 'react-router-dom';\n\nexport default {\n  title: 'Layout/UnifiedLayout',\n  component: UnifiedLayout,\n  decorators: [(story: any) => <MemoryRouter>{story()}</MemoryRouter>],\n  parameters: {\n    a11y: {\n      // Accessibility notes\n      config: {\n        rules: [\n          { id: 'color-contrast', enabled: true },\n          { id: 'aria-roles', enabled: true },\n        ],\n      },\n    },\n  },\n};\n\nexport const Default = () => (\n  <UnifiedLayout>\n    <div className=\"p-8\">\n      <h2 className=\"text-2xl font-bold mb-4\">Main Content</h2>\n      <p>This is a demo of the UnifiedLayout with sidebar, topbar, and global search (Ctrl+K).</p>\n    </div>\n  </UnifiedLayout>\n); ","usedDeprecatedRules":[]},{"filePath":"/home/vonj/Github/Nexus/src/components/layout/UnifiedLayout.test.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/vonj/Github/Nexus/src/components/layout/UnifiedLayout.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'Link' is defined but never used.","line":2,"column":23,"nodeType":null,"messageId":"unusedVar","endLine":2,"endColumn":27},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'Menu' is defined but never used.","line":3,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":3,"endColumn":14},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'X' is defined but never used.","line":3,"column":16,"nodeType":null,"messageId":"unusedVar","endLine":3,"endColumn":17},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'Bell' is defined but never used.","line":3,"column":19,"nodeType":null,"messageId":"unusedVar","endLine":3,"endColumn":23},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'User' is defined but never used.","line":3,"column":25,"nodeType":null,"messageId":"unusedVar","endLine":3,"endColumn":29},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'Sun' is defined but never used.","line":3,"column":31,"nodeType":null,"messageId":"unusedVar","endLine":3,"endColumn":34},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'Moon' is defined but never used.","line":3,"column":36,"nodeType":null,"messageId":"unusedVar","endLine":3,"endColumn":40},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'Sparkles' is defined but never used.","line":3,"column":42,"nodeType":null,"messageId":"unusedVar","endLine":3,"endColumn":50},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'QuickChatTrigger' is defined but never used.","line":8,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":8,"endColumn":26},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'OrgSwitcher' is defined but never used.","line":9,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":9,"endColumn":21},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'Settings' is defined but never used.","line":10,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":10,"endColumn":18},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'Modal' is defined but never used.","line":11,"column":8,"nodeType":null,"messageId":"unusedVar","endLine":11,"endColumn":13},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'Input' is defined but never used.","line":12,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":12,"endColumn":15},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'NavItem' is defined but never used.","line":18,"column":6,"nodeType":null,"messageId":"unusedVar","endLine":18,"endColumn":13},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'theme' is assigned a value but never used.","line":41,"column":11,"nodeType":null,"messageId":"unusedVar","endLine":41,"endColumn":16},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'setTheme' is assigned a value but never used.","line":41,"column":18,"nodeType":null,"messageId":"unusedVar","endLine":41,"endColumn":26},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'notifications' is assigned a value but never used.","line":42,"column":11,"nodeType":null,"messageId":"unusedVar","endLine":42,"endColumn":24},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'unreadCount' is assigned a value but never used.","line":42,"column":26,"nodeType":null,"messageId":"unusedVar","endLine":42,"endColumn":37},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'markAsRead' is assigned a value but never used.","line":42,"column":39,"nodeType":null,"messageId":"unusedVar","endLine":42,"endColumn":49},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'signOut' is assigned a value but never used.","line":43,"column":17,"nodeType":null,"messageId":"unusedVar","endLine":43,"endColumn":24},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'isActive' is assigned a value but never used.","line":51,"column":9,"nodeType":null,"messageId":"unusedVar","endLine":51,"endColumn":17},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'displayName' is assigned a value but never used.","line":57,"column":9,"nodeType":null,"messageId":"unusedVar","endLine":57,"endColumn":20},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'initials' is assigned a value but never used.","line":58,"column":9,"nodeType":null,"messageId":"unusedVar","endLine":58,"endColumn":17},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'handleKeyDown' is assigned a value but never used.","line":103,"column":9,"nodeType":null,"messageId":"unusedVar","endLine":103,"endColumn":22}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":24,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { type ReactNode, useState } from 'react';\nimport { useLocation, Link } from 'react-router-dom';\nimport { Menu, X, Bell, User, Sun, Moon, Sparkles } from 'lucide-react';\nimport { navItems } from './navConfig.tsx';\nimport { useTheme } from '@/components/ui/theme-provider';\nimport { useNotifications } from '@/contexts/NotificationContext';\nimport { useAuth } from '@/contexts/AuthContext';\nimport { QuickChatTrigger } from '@/components/ai/QuickChatTrigger';\nimport { OrgSwitcher } from './OrgSwitcher';\nimport { Settings } from 'lucide-react';\nimport Modal from '@/components/ui/Modal';\nimport { Input } from '@/components/ui/Input';\nimport { features as featureRegistry } from '@/lib/ui/featureRegistry';\nimport { Header } from './Header';\nimport { Sidebar } from './Sidebar';\nimport { OnboardingChecklist } from '../onboarding/OnboardingChecklist';\nimport { ThemePanel } from '../theme/ThemePanel';\ntype NavItem = import(\"./navConfig\").NavItem;\n\ninterface UnifiedLayoutProps {\n  children: ReactNode;\n}\n\n/**\n * UnifiedLayout\n * Main application shell with sidebar, topbar, and global search.\n * - Keyboard accessible\n * - ARIA labels and roles\n * - Focus management for modals and menus\n * - Uses only design tokens/Tailwind\n * @param {UnifiedLayoutProps} props\n * @returns {JSX.Element}\n */\nexport const UnifiedLayout: React.FC<UnifiedLayoutProps> = ({ children }) => {\n  const [sidebarOpen, setSidebarOpen] = useState(false);\n  const [showUserMenu, setShowUserMenu] = useState(false);\n  const [showNotifications, setShowNotifications] = useState(false);\n  const userMenuRef = React.useRef<HTMLDivElement>(null);\n  const notificationsRef = React.useRef<HTMLDivElement>(null);\n  const location = useLocation();\n  const { theme, setTheme } = useTheme();\n  const { notifications, unreadCount, markAsRead } = useNotifications();\n  const { user, signOut } = useAuth();\n  const [searchOpen, setSearchOpen] = useState(false);\n  const [searchQuery, setSearchQuery] = useState('');\n  const [searchIndex, setSearchIndex] = useState(0);\n  const inputRef = React.useRef<HTMLInputElement>(null);\n  const [isThemePanelOpen, setIsThemePanelOpen] = useState(false);\n\n  // Determine if a nav item is active\n  const isActive = (path: string) => {\n    if (path === '/dashboard' && location.pathname === '/') return true;\n    return location.pathname.startsWith(path);\n  };\n\n  // Derive display name and initials from auth user\n  const displayName = user?.name || user?.email?.split('@')[0] || 'User';\n  const initials = user?.name\n    ? user.name.split(' ').map(part => part.charAt(0).toUpperCase()).join('').slice(0, 2)\n    : user?.email?.charAt(0).toUpperCase() || 'U';\n\n  // Close menus on outside click\n  React.useEffect(() => {\n    const handleClickOutside = (event: MouseEvent) => {\n      if (userMenuRef.current && !userMenuRef.current.contains(event.target as Node)) {\n        setShowUserMenu(false);\n      }\n      if (notificationsRef.current && !notificationsRef.current.contains(event.target as Node)) {\n        setShowNotifications(false);\n      }\n    };\n    if (showUserMenu || showNotifications) {\n      document.addEventListener('mousedown', handleClickOutside);\n      return () => document.removeEventListener('mousedown', handleClickOutside);\n    }\n  }, [showUserMenu, showNotifications]);\n\n  // Keyboard shortcut: Ctrl+K / Cmd+K\n  React.useEffect(() => {\n    const handler = (e: KeyboardEvent) => {\n      if ((e.ctrlKey || e.metaKey) && e.key.toLowerCase() === 'k') {\n        e.preventDefault();\n        setSearchOpen(true);\n      }\n    };\n    window.addEventListener('keydown', handler);\n    return () => window.removeEventListener('keydown', handler);\n  }, []);\n\n  // Focus input when modal opens\n  React.useEffect(() => {\n    if (searchOpen && inputRef.current) {\n      inputRef.current.focus();\n    }\n  }, [searchOpen]);\n\n  // Search results: navItems + featureRegistry\n  const navResults = navItems.filter(item => item.name.toLowerCase().includes(searchQuery.toLowerCase()));\n  const featureResults = featureRegistry.filter((f: { name: string }) => f.name.toLowerCase().includes(searchQuery.toLowerCase()));\n  const results = [...navResults, ...featureResults];\n\n  // Keyboard navigation in results\n  const handleKeyDown = (e: React.KeyboardEvent) => {\n    if (e.key === 'ArrowDown') {\n      setSearchIndex(i => Math.min(i + 1, results.length - 1));\n    } else if (e.key === 'ArrowUp') {\n      setSearchIndex(i => Math.max(i - 1, 0));\n    } else if (e.key === 'Enter' && results[searchIndex]) {\n      window.location.href = results[searchIndex].path;\n      setSearchOpen(false);\n      setSearchQuery('');\n      setSearchIndex(0);\n    }\n  };\n\n  return (\n    <div className=\"flex h-screen bg-background text-foreground\">\n      <Sidebar isOpen={sidebarOpen} onClose={() => setSidebarOpen(false)} />\n      <div className=\"flex-1 flex flex-col overflow-hidden\">\n        <Header onSidebarToggle={() => setSidebarOpen(true)} onThemePanelToggle={() => setIsThemePanelOpen(!isThemePanelOpen)} />\n        <main className=\"flex-1 overflow-y-auto p-4 md:p-6\">\n          {children}\n        </main>\n      </div>\n      <OnboardingChecklist />\n      {isThemePanelOpen && <ThemePanel />}\n    </div>\n  );\n}; ","usedDeprecatedRules":[]},{"filePath":"/home/vonj/Github/Nexus/src/components/layout/navConfig.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'Store' is defined but never used.","line":1,"column":82,"nodeType":null,"messageId":"unusedVar","endLine":1,"endColumn":87},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'Plug' is defined but never used.","line":1,"column":89,"nodeType":null,"messageId":"unusedVar","endLine":1,"endColumn":93}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { LayoutDashboard, Search, Users, Banknote, Truck, BarChart2, Brain, Bot, Store, Plug, Settings, Info } from 'lucide-react';\nimport type { ReactNode } from 'react';\n\nexport interface NavItem {\n  name: string;\n  path: string;\n  icon?: ReactNode;\n  children?: { name: string; path: string }[];\n}\n\nexport const navItems: NavItem[] = [\n  // { name: 'Command Center', path: '/nexus', icon: <Brain className=\"h-5 w-5\" /> }, // Hidden until ready\n  { name: 'Dashboard', path: '/dashboard', icon: <LayoutDashboard className=\"h-5 w-5\" /> },\n  { name: 'Workspace', path: '/workspace', icon: <Search className=\"h-5 w-5\" /> },\n  {\n    name: 'Sales',\n    path: '/sales',\n    icon: <Users className=\"h-5 w-5\" />,\n    children: [\n      { name: 'Overview', path: '/sales' },\n      { name: 'Performance', path: '/sales/performance' },\n    ],\n  },\n  {\n    name: 'Finance',\n    path: '/finance',\n    icon: <Banknote className=\"h-5 w-5\" />,\n    children: [\n      { name: 'Overview', path: '/finance' },\n      { name: 'Operations', path: '/finance/operations' },\n    ],\n  },\n  {\n    name: 'Operations',\n    path: '/operations',\n    icon: <Truck className=\"h-5 w-5\" />,\n    children: [\n      { name: 'Overview', path: '/operations' },\n      { name: 'Analytics', path: '/operations/analytics' },\n    ],\n  },\n  { name: 'Analytics', path: '/analytics', icon: <BarChart2 className=\"h-5 w-5\" /> },\n  { name: 'AI Hub', path: '/ai-hub', icon: <Brain className=\"h-5 w-5\" /> },\n  { name: 'AI Chat', path: '/chat', icon: <Bot className=\"h-5 w-5\" /> },\n  { name: 'Settings', path: '/settings', icon: <Settings className=\"h-5 w-5\" /> },\n  { name: 'Help', path: '/help', icon: <Info className=\"h-5 w-s\" /> },\n]; ","usedDeprecatedRules":[]},{"filePath":"/home/vonj/Github/Nexus/src/components/lib/DatetimeTicker.test.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/vonj/Github/Nexus/src/components/lib/DatetimeTicker.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/vonj/Github/Nexus/src/components/lib/Skeleton.test.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/vonj/Github/Nexus/src/components/lib/Skeleton.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/vonj/Github/Nexus/src/components/microsoft365/GraphToolkitComponents.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'ProviderState' is defined but never used.","line":18,"column":21,"nodeType":null,"messageId":"unusedVar","endLine":18,"endColumn":34},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'Alert' is defined but never used.","line":20,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":20,"endColumn":15},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'AlertDescription' is defined but never used.","line":20,"column":17,"nodeType":null,"messageId":"unusedVar","endLine":20,"endColumn":33},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'Badge' is defined but never used.","line":21,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":21,"endColumn":15},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'Loader2' is defined but never used.","line":22,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":22,"endColumn":17},{"ruleId":"no-restricted-syntax","severity":1,"message":"Use design tokens instead of hardcoded colors (e.g., bg-primary, bg-secondary)","line":83,"column":24,"nodeType":"Literal","messageId":"restrictedSyntax","endLine":83,"endColumn":69},{"ruleId":"no-restricted-syntax","severity":1,"message":"Use design tokens instead of hardcoded text colors (e.g., text-foreground, text-muted-foreground)","line":83,"column":24,"nodeType":"Literal","messageId":"restrictedSyntax","endLine":83,"endColumn":69},{"ruleId":"no-restricted-syntax","severity":1,"message":"Use design tokens instead of hardcoded colors (e.g., bg-primary, bg-secondary)","line":112,"column":24,"nodeType":"Literal","messageId":"restrictedSyntax","endLine":112,"endColumn":69},{"ruleId":"no-restricted-syntax","severity":1,"message":"Use design tokens instead of hardcoded text colors (e.g., text-foreground, text-muted-foreground)","line":112,"column":24,"nodeType":"Literal","messageId":"restrictedSyntax","endLine":112,"endColumn":69},{"ruleId":"no-restricted-syntax","severity":1,"message":"Use design tokens instead of hardcoded colors (e.g., bg-primary, bg-secondary)","line":141,"column":24,"nodeType":"Literal","messageId":"restrictedSyntax","endLine":141,"endColumn":73},{"ruleId":"no-restricted-syntax","severity":1,"message":"Use design tokens instead of hardcoded text colors (e.g., text-foreground, text-muted-foreground)","line":141,"column":24,"nodeType":"Literal","messageId":"restrictedSyntax","endLine":141,"endColumn":73},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":163,"column":28,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":163,"endColumn":31,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3883,3886],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3883,3886],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"no-restricted-syntax","severity":1,"message":"Use design tokens instead of hardcoded colors (e.g., bg-primary, bg-secondary)","line":202,"column":24,"nodeType":"Literal","messageId":"restrictedSyntax","endLine":202,"endColumn":73},{"ruleId":"no-restricted-syntax","severity":1,"message":"Use design tokens instead of hardcoded text colors (e.g., text-foreground, text-muted-foreground)","line":202,"column":24,"nodeType":"Literal","messageId":"restrictedSyntax","endLine":202,"endColumn":73},{"ruleId":"no-restricted-syntax","severity":1,"message":"Use design tokens instead of hardcoded colors (e.g., bg-primary, bg-secondary)","line":236,"column":24,"nodeType":"Literal","messageId":"restrictedSyntax","endLine":236,"endColumn":69},{"ruleId":"no-restricted-syntax","severity":1,"message":"Use design tokens instead of hardcoded text colors (e.g., text-foreground, text-muted-foreground)","line":236,"column":24,"nodeType":"Literal","messageId":"restrictedSyntax","endLine":236,"endColumn":69},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":266,"column":40,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":266,"endColumn":43,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[6273,6276],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[6273,6276],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"no-restricted-syntax","severity":1,"message":"Use design tokens instead of hardcoded colors (e.g., bg-primary, bg-secondary)","line":324,"column":24,"nodeType":"Literal","messageId":"restrictedSyntax","endLine":324,"endColumn":69},{"ruleId":"no-restricted-syntax","severity":1,"message":"Use design tokens instead of hardcoded text colors (e.g., text-foreground, text-muted-foreground)","line":324,"column":24,"nodeType":"Literal","messageId":"restrictedSyntax","endLine":324,"endColumn":69},{"ruleId":"no-restricted-syntax","severity":1,"message":"Use design tokens instead of hardcoded text colors (e.g., text-foreground, text-muted-foreground)","line":352,"column":24,"nodeType":"Literal","messageId":"restrictedSyntax","endLine":352,"endColumn":61},{"ruleId":"no-restricted-syntax","severity":1,"message":"Use design tokens instead of hardcoded text colors (e.g., text-foreground, text-muted-foreground)","line":356,"column":24,"nodeType":"Literal","messageId":"restrictedSyntax","endLine":356,"endColumn":46},{"ruleId":"no-restricted-syntax","severity":1,"message":"Use design tokens instead of hardcoded colors (e.g., bg-primary, bg-secondary)","line":358,"column":21,"nodeType":"Literal","messageId":"restrictedSyntax","endLine":358,"endColumn":83},{"ruleId":"no-restricted-syntax","severity":1,"message":"Use design tokens instead of hardcoded text colors (e.g., text-foreground, text-muted-foreground)","line":358,"column":21,"nodeType":"Literal","messageId":"restrictedSyntax","endLine":358,"endColumn":83},{"ruleId":"no-restricted-syntax","severity":1,"message":"Use design tokens instead of hardcoded colors (e.g., bg-primary, bg-secondary)","line":399,"column":65,"nodeType":"Literal","messageId":"restrictedSyntax","endLine":399,"endColumn":93}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":24,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\n * Microsoft Graph Toolkit React Components\n * Pillar: 2 - Minimum Lovable Feature Set\n * \n * Wrapper components for Microsoft Graph Toolkit elements\n * Following official Microsoft documentation patterns\n */\n\nimport React, { useEffect, useState, useCallback } from 'react';\nimport {\n  Login,\n  Person,\n  Agenda,\n  PeoplePicker,\n  FileList,\n  Get\n} from '@microsoft/mgt-react';\nimport { Providers, ProviderState } from '@microsoft/mgt-element';\nimport { Button } from '@/components/ui/Button';\nimport { Alert, AlertDescription } from '@/components/ui/Alert';\nimport { Badge } from '@/components/ui/Badge';\nimport { Loader2, RefreshCw, Mail, AlertCircle } from 'lucide-react';\n\ninterface GraphComponentProps {\n  className?: string;\n}\n\n// Error boundary component for MGT components\nconst MGTErrorBoundary: React.FC<{ children: React.ReactNode; fallback?: React.ReactNode }> = ({ \n  children, \n  fallback = <div className=\"p-4 text-muted-foreground\">Component temporarily unavailable</div> \n}) => {\n  const [hasError, setHasError] = useState(false);\n\n  useEffect(() => {\n    setHasError(false);\n  }, [children]);\n\n  if (hasError) {\n    return <>{fallback}</>;\n  }\n\n  try {\n    return <>{children}</>;\n  } catch (error) {\n    console.warn('MGT Component Error:', error);\n    setHasError(true);\n    return <>{fallback}</>;\n  }\n};\n\n// Hook to check if MGT is ready\nconst useMGTReady = () => {\n  const [isReady, setIsReady] = useState(false);\n\n  useEffect(() => {\n    const checkReady = () => {\n      const provider = Providers.globalProvider;\n      setIsReady(!!provider);\n    };\n\n    checkReady();\n    \n    // Listen for provider updates\n    const unsubscribe = Providers.onProviderUpdated(checkReady);\n    \n    return unsubscribe;\n  }, []);\n\n  return isReady;\n};\n\n/**\n * Microsoft Graph Login Component\n * Handles authentication with Microsoft 365\n */\nexport const GraphLogin: React.FC<GraphComponentProps> = ({ className }) => {\n  const isReady = useMGTReady();\n\n  if (!isReady) {\n    return (\n      <div className={className}>\n        <div className=\"p-4 border rounded bg-blue-50 text-blue-700\">\n          Initializing Microsoft Graph authentication...\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className={className}>\n      <MGTErrorBoundary>\n        <Login />\n      </MGTErrorBoundary>\n    </div>\n  );\n};\n\n/**\n * Microsoft Graph Person Component\n * Displays user profile information\n */\nexport const GraphPerson: React.FC<GraphComponentProps & { \n  userId?: string;\n  view?: 'oneline' | 'twolines' | 'threelines' | 'image' | 'fourlines';\n}> = ({ className, userId, view = 'twolines' }) => {\n  const isReady = useMGTReady();\n\n  if (!isReady) {\n    return (\n      <div className={className}>\n        <div className=\"p-4 border rounded bg-gray-50 text-gray-700\">\n          Loading user profile...\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className={className}>\n      <MGTErrorBoundary>\n        <Person userId={userId} view={view} />\n      </MGTErrorBoundary>\n    </div>\n  );\n};\n\n/**\n * Microsoft Graph Agenda Component\n * Shows calendar events\n */\nexport const GraphAgenda: React.FC<GraphComponentProps & {\n  days?: number;\n  eventQuery?: string;\n}> = ({ className, days = 7, eventQuery }) => {\n  const isReady = useMGTReady();\n\n  if (!isReady) {\n    return (\n      <div className={className}>\n        <div className=\"p-4 border rounded bg-purple-50 text-purple-700\">\n          Loading calendar events...\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className={className}>\n      <MGTErrorBoundary>\n        <Agenda days={days} eventQuery={eventQuery} />\n      </MGTErrorBoundary>\n    </div>\n  );\n};\n\n/**\n * Microsoft Graph People Picker Component\n * Search and select people from organization\n */\nexport const GraphPeoplePicker: React.FC<GraphComponentProps & {\n  selectionMode?: 'single' | 'multiple';\n  onSelectionChanged?: (e: any) => void;\n}> = ({ className, selectionMode = 'single', onSelectionChanged }) => {\n  const isReady = useMGTReady();\n\n  if (!isReady) {\n    return (\n      <div className={className}>\n        <div className=\"p-4 border rounded bg-orange-50 text-orange-700\">\n          Loading people directory...\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className={className}>\n      <MGTErrorBoundary>\n        <PeoplePicker \n          selectionMode={selectionMode}\n          selectionChanged={onSelectionChanged}\n        />\n      </MGTErrorBoundary>\n    </div>\n  );\n};\n\n/**\n * Microsoft Graph File List Component\n * Browse OneDrive/SharePoint files\n */\nexport const GraphFileList: React.FC<GraphComponentProps & {\n  siteId?: string;\n  driveId?: string;\n}> = ({ className, siteId, driveId }) => {\n  const isReady = useMGTReady();\n\n  if (!isReady) {\n    return (\n      <div className={className}>\n        <div className=\"p-4 border rounded bg-indigo-50 text-indigo-700\">\n          Loading file browser...\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className={className}>\n      <MGTErrorBoundary>\n        <FileList \n          siteId={siteId}\n          driveId={driveId}\n        />\n      </MGTErrorBoundary>\n    </div>\n  );\n};\n\n/**\n * Microsoft Graph Get Component\n * Generic component for Graph API calls\n */\nexport const GraphGet: React.FC<GraphComponentProps & {\n  resource: string;\n  version?: 'v1.0' | 'beta';\n  scopes?: string[];\n  children?: React.ReactNode;\n}> = ({ className, resource, version = 'v1.0', scopes, children }) => {\n  const isReady = useMGTReady();\n\n  if (!isReady) {\n    return (\n      <div className={className}>\n        <div className=\"p-4 border rounded bg-gray-50 text-gray-700\">\n          Preparing Graph API connection...\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className={className}>\n      <MGTErrorBoundary>\n        <Get \n          resource={resource}\n          version={version}\n          scopes={scopes}\n        >\n          <template data-type=\"default\">\n            {children}\n          </template>\n        </Get>\n      </MGTErrorBoundary>\n    </div>\n  );\n};\n\n/**\n * Email Integration Component\n * Custom component for email functionality using Graph API\n */\nexport const GraphEmailIntegration: React.FC<GraphComponentProps> = ({ className }) => {\n  const isReady = useMGTReady();\n  const [emails, setEmails] = useState<any[]>([]);\n  const [loading, setLoading] = useState(false);\n  const [error, setError] = useState<string | null>(null);\n  \n  // Import the microsoftGraphService\n  const graphService = React.useMemo(() => {\n    // We need to use dynamic import to avoid SSR issues\n    return import('@/lib/services/microsoftGraphService').then(module => module.default);\n  }, []);\n\n  const fetchEmails = useCallback(async () => {\n    if (!isReady) return;\n    \n    setLoading(true);\n    setError(null);\n    \n    try {\n      const service = await graphService;\n      if (!service.isConnected()) {\n        await service.signIn();\n      }\n      \n      const emailsData = await service.getEmails(10, 0);\n      setEmails(emailsData);\n    } catch (err) {\n      console.error('Error fetching emails:', err);\n      setError('Failed to fetch emails from Microsoft Graph');\n    } finally {\n      setLoading(false);\n    }\n  }, [isReady, graphService]);\n\n  useEffect(() => {\n    if (isReady) {\n      fetchEmails();\n    }\n  }, [isReady, fetchEmails]);\n\n  const handleMarkAsRead = useCallback(async (emailId: string) => {\n    try {\n      const service = await graphService;\n      await service.markEmailAsRead(emailId);\n      \n      // Update local state\n      setEmails(prevEmails => \n        prevEmails.map(email => \n          email.id === emailId ? { ...email, isRead: true } : email\n        )\n      );\n    } catch (err) {\n      console.error('Error marking email as read:', err);\n      setError('Failed to mark email as read');\n    }\n  }, [graphService]);\n\n  if (!isReady) {\n    return (\n      <div className={className}>\n        <div className=\"p-4 border rounded bg-blue-50 text-blue-700\">\n          Connecting to Microsoft Graph for email access...\n        </div>\n      </div>\n    );\n  }\n\n  if (loading) {\n  return (\n      <div className={`${className} space-y-4`}>\n        <div className=\"flex items-center justify-center p-6\">\n          <div className=\"animate-spin rounded-full h-8 w-8 border-b-2 border-primary\"></div>\n        </div>\n        <div className=\"space-y-3\">\n          {[1, 2, 3].map(i => (\n            <div key={i} className=\"p-4 border rounded-md animate-pulse\">\n              <div className=\"h-4 bg-slate-200 rounded w-3/4 mb-2\"></div>\n              <div className=\"h-3 bg-slate-200 rounded w-1/2\"></div>\n            </div>\n          ))}\n        </div>\n      </div>\n    );\n  }\n  \n  if (error) {\n    return (\n      <div className={`${className} p-4 border rounded bg-red-50`}>\n        <div className=\"flex items-center text-red-600 mb-2\">\n          <AlertCircle className=\"w-5 h-5 mr-2\" />\n          <div className=\"font-medium\">Error loading emails</div>\n        </div>\n        <div className=\"text-red-600 text-sm\">{error}</div>\n        <Button \n          className=\"mt-4 bg-red-100 hover:bg-red-200 text-red-800 border-red-200\"\n          size=\"sm\"\n          onClick={() => fetchEmails()}\n        >\n          <RefreshCw className=\"w-4 h-4 mr-2\" />\n          Retry\n        </Button>\n      </div>\n    );\n  }\n  \n  if (emails.length === 0) {\n    return (\n      <div className={`${className} p-6 text-center border rounded-md`}>\n        <Mail className=\"w-12 h-12 mx-auto text-muted-foreground opacity-50 mb-3\" />\n        <h3 className=\"text-lg font-medium mb-1\">No Emails Found</h3>\n        <p className=\"text-muted-foreground text-sm mb-4\">\n          We couldn't find any emails in your Microsoft 365 account.\n        </p>\n        <Button size=\"sm\" onClick={() => fetchEmails()}>\n          <RefreshCw className=\"w-4 h-4 mr-2\" />\n          Refresh\n        </Button>\n      </div>\n    );\n  }\n\n  return (\n    <div className={`${className} space-y-4`}>\n      <div className=\"flex justify-between items-center\">\n        <h3 className=\"text-lg font-medium\">Recent Emails</h3>\n        <Button size=\"sm\" variant=\"outline\" onClick={() => fetchEmails()}>\n          <RefreshCw className={`w-4 h-4 mr-2 ${loading ? 'animate-spin' : ''}`} />\n          Refresh\n        </Button>\n      </div>\n      \n      <div className=\"space-y-3\">\n        {emails.map((email) => (\n          <div \n            key={email.id} \n            className={`p-4 border rounded-md ${!email.isRead ? 'bg-blue-50 border-blue-200' : ''}`}\n            onClick={() => !email.isRead && handleMarkAsRead(email.id)}\n          >\n            <div className=\"flex justify-between items-start mb-1\">\n              <h4 className=\"font-medium text-base\">\n                {email.subject || '(No Subject)'}\n              </h4>\n              <div className=\"text-xs text-muted-foreground\">\n                {new Date(email.receivedDateTime).toLocaleString()}\n              </div>\n            </div>\n            <div className=\"text-sm text-muted-foreground mb-2\">\n              From: {email.from?.emailAddress?.name || email.from?.emailAddress?.address}\n            </div>\n            <p className=\"text-sm\">\n              {email.bodyPreview || 'No preview available'}\n            </p>\n          </div>\n        ))}\n      </div>\n    </div>\n  );\n};\n\nexport default {\n  GraphLogin,\n  GraphPerson,\n  GraphAgenda,\n  GraphPeoplePicker,\n  GraphFileList,\n  GraphGet,\n  GraphEmailIntegration\n}; ","usedDeprecatedRules":[]},{"filePath":"/home/vonj/Github/Nexus/src/components/onboarding/BusinessContextStep.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'Input' is defined but never used.","line":5,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":5,"endColumn":15},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'Textarea' is defined but never used.","line":6,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":6,"endColumn":18},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'Building2' is defined but never used.","line":10,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":10,"endColumn":12},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'Users' is defined but never used.","line":11,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":11,"endColumn":8},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'TrendingUp' is defined but never used.","line":12,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":12,"endColumn":13},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'company' is assigned a value but never used.","line":46,"column":9,"nodeType":null,"messageId":"unusedVar","endLine":46,"endColumn":16},{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook React.useEffect has missing dependencies: 'businessData.industry' and 'priorities'. Either include them or remove the dependency array.","line":69,"column":6,"nodeType":"ArrayExpression","endLine":69,"endColumn":20,"suggestions":[{"desc":"Update the dependencies array to be: [businessData.industry, enrichedData, priorities]","fix":{"range":[2034,2048],"text":"[businessData.industry, enrichedData, priorities]"}}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState } from 'react';\nimport { Button } from '../ui/Button';\nimport { Card, CardContent, CardHeader, CardTitle } from '../ui/Card';\nimport { Label } from '../ui/Label';\nimport { Input } from '../ui/Input';\nimport { Textarea } from '../ui/Textarea';\nimport { RadioGroup, RadioGroupItem } from '../ui/RadioGroup';\nimport { Checkbox } from '../ui/Checkbox';\nimport { \n  Building2, \n  Users, \n  TrendingUp, \n  Database,\n  Workflow,\n  Target,\n  DollarSign,\n  BarChart3,\n  Sparkles\n} from 'lucide-react';\nimport { useAuth } from '@/contexts/AuthContext';\n\ninterface BusinessContextData {\n  industry: string;\n  business_model: string;\n  revenue_stage: string;\n  primary_departments: string[];\n  key_tools: string[];\n  data_sources: string[];\n  automation_maturity: 'none' | 'basic' | 'intermediate' | 'advanced';\n  business_priorities: string[];\n  success_timeframe: string;\n  budget_expectation: string;\n}\n\ninterface BusinessContextStepProps {\n  onNext: (data: BusinessContextData) => void;\n  onBack: () => void;\n  enrichedData?: {\n    description?: string;\n    industry?: string;\n  };\n}\n\nexport const BusinessContextStep: React.FC<BusinessContextStepProps> = ({ onNext, onBack, enrichedData }) => {\n  const { user, updateCompany } = useAuth();\n  const company = user?.company;\n  const [businessData, setBusinessData] = useState<BusinessContextData>({\n    industry: '',\n    business_model: '',\n    revenue_stage: '',\n    primary_departments: [],\n    key_tools: [],\n    data_sources: [],\n    automation_maturity: 'basic',\n    business_priorities: [],\n    success_timeframe: '3-months',\n    budget_expectation: 'moderate'\n  });\n\n  // Pre-fill industry from enriched data\n  React.useEffect(() => {\n    if (enrichedData?.industry && !businessData.industry) {\n      // Find the closest match in our predefined list\n      const matchedIndustry = priorities.find(p => enrichedData.industry?.includes(p));\n      if (matchedIndustry) {\n        setBusinessData(prev => ({ ...prev, industry: matchedIndustry }));\n      }\n    }\n  }, [enrichedData]);\n\n  const businessModels = [\n    'B2B SaaS', 'B2C E-commerce', 'Marketplace', 'Service-based',\n    'Product-based', 'Consulting', 'Subscription', 'Freemium', 'Enterprise Sales'\n  ];\n\n  const revenueStages = [\n    'Pre-revenue', '$0-$100K ARR', '$100K-$1M ARR', '$1M-$10M ARR', \n    '$10M-$50M ARR', '$50M+ ARR'\n  ];\n\n  const departments = [\n    'Sales', 'Marketing', 'Customer Success', 'Finance', 'Operations',\n    'Engineering', 'Product', 'HR', 'Legal', 'Support'\n  ];\n\n  const tools = [\n    'CRM (Salesforce, HubSpot)', 'Email Marketing (Mailchimp, Klaviyo)', \n    'Analytics (Google Analytics)', 'Project Management (Asana, Monday)',\n    'Accounting (QuickBooks, Xero)', 'Support (Zendesk, Intercom)',\n    'Communication (Slack, Teams)', 'Design (Figma, Canva)', \n    'Development (GitHub, Jira)', 'Social Media (Hootsuite, Buffer)'\n  ];\n\n  const dataSources = [\n    'Website Analytics', 'Sales CRM', 'Email Marketing', 'Social Media',\n    'Financial Systems', 'Customer Support', 'Inventory Management',\n    'Survey/Feedback', 'Market Research', 'Competitor Intelligence'\n  ];\n\n  const priorities = [\n    'Increase Revenue', 'Reduce Costs', 'Improve Efficiency', 'Better Customer Experience',\n    'Data-Driven Decisions', 'Scale Operations', 'Improve Team Productivity',\n    'Risk Management', 'Compliance', 'Innovation'\n  ];\n\n  const handleArrayToggle = (array: string[], value: string, setter: (arr: string[]) => void) => {\n    if (array.includes(value)) {\n      setter(array.filter(item => item !== value));\n    } else {\n      setter([...array, value]);\n    }\n  };\n\n  const handleSubmit = async () => {\n    // Update company information with business context\n    try {\n      if (user?.company_id) {\n        await updateCompany({\n          settings: {\n            business_model: businessData.business_model,\n            revenue_stage: businessData.revenue_stage,\n            automation_maturity: businessData.automation_maturity,\n            primary_departments: businessData.primary_departments,\n            key_tools: businessData.key_tools,\n            data_sources: businessData.data_sources,\n            business_priorities: businessData.business_priorities,\n            success_timeframe: businessData.success_timeframe,\n            budget_expectation: businessData.budget_expectation\n          }\n        });\n      }\n    } catch (error) {\n      console.error('Error updating business context:', error);\n    }\n    \n    onNext(businessData);\n  };\n\n  return (\n    <div className=\"space-y-6 max-w-4xl mx-auto\">\n      <div className=\"text-center space-y-2\">\n        <Workflow className=\"h-12 w-12 text-primary mx-auto\" />\n        <h2 className=\"text-2xl font-bold\">Business Operations</h2>\n        <p className=\"text-muted-foreground\">\n          Tell us about your tools, processes, and business priorities\n        </p>\n      </div>\n\n      {enrichedData && (Object.keys(enrichedData).length > 0) && (\n        <Card className=\"bg-primary/5 border-primary/20\">\n          <CardHeader>\n            <CardTitle className=\"flex items-center gap-2\">\n              <Sparkles className=\"h-5 w-5 text-primary\" />\n              Here's what we found...\n            </CardTitle>\n          </CardHeader>\n          <CardContent className=\"space-y-4\">\n            {enrichedData.description && (\n              <div>\n                <Label>Company Description</Label>\n                <p className=\"text-sm text-muted-foreground italic\">\"{enrichedData.description}\"</p>\n              </div>\n            )}\n            {enrichedData.industry && (\n              <div>\n                <Label>Suggested Industry</Label>\n                <p className=\"text-sm text-muted-foreground\">{enrichedData.industry}</p>\n              </div>\n            )}\n            <div className=\"text-xs text-muted-foreground pt-2\">\n              Is this information correct? You can adjust the fields below.\n            </div>\n          </CardContent>\n        </Card>\n      )}\n\n      <div className=\"grid gap-6\">\n        {/* Business Model & Revenue */}\n        <div className=\"grid md:grid-cols-2 gap-6\">\n          <Card>\n            <CardHeader>\n              <CardTitle className=\"flex items-center gap-2\">\n                <BarChart3 className=\"h-5 w-5\" />\n                Business Model\n              </CardTitle>\n            </CardHeader>\n            <CardContent>\n              <RadioGroup\n                value={businessData.business_model}\n                onValueChange={(value) => setBusinessData(prev => ({ ...prev, business_model: value }))}\n              >\n                {businessModels.map((model) => (\n                  <div key={model} className=\"flex items-center space-x-2\">\n                    <RadioGroupItem value={model} id={model} />\n                    <Label htmlFor={model}>{model}</Label>\n                  </div>\n                ))}\n              </RadioGroup>\n            </CardContent>\n          </Card>\n\n          <Card>\n            <CardHeader>\n              <CardTitle className=\"flex items-center gap-2\">\n                <DollarSign className=\"h-5 w-5\" />\n                Revenue Stage\n              </CardTitle>\n            </CardHeader>\n            <CardContent>\n              <RadioGroup\n                value={businessData.revenue_stage}\n                onValueChange={(value) => setBusinessData(prev => ({ ...prev, revenue_stage: value }))}\n              >\n                {revenueStages.map((stage) => (\n                  <div key={stage} className=\"flex items-center space-x-2\">\n                    <RadioGroupItem value={stage} id={stage} />\n                    <Label htmlFor={stage}>{stage}</Label>\n                  </div>\n                ))}\n              </RadioGroup>\n            </CardContent>\n          </Card>\n        </div>\n\n        {/* Primary Departments */}\n        <Card>\n          <CardHeader>\n            <CardTitle>Primary Departments/Functions</CardTitle>\n            <p className=\"text-sm text-muted-foreground\">Which departments will use Nexus most?</p>\n          </CardHeader>\n          <CardContent>\n            <div className=\"grid grid-cols-2 md:grid-cols-5 gap-2\">\n              {departments.map((dept) => (\n                <div key={dept} className=\"flex items-center space-x-2\">\n                  <Checkbox\n                    id={dept}\n                    checked={businessData.primary_departments.includes(dept)}\n                    onCheckedChange={() => handleArrayToggle(\n                      businessData.primary_departments, \n                      dept, \n                      (arr) => setBusinessData(prev => ({ ...prev, primary_departments: arr }))\n                    )}\n                  />\n                  <Label htmlFor={dept} className=\"text-sm\">{dept}</Label>\n                </div>\n              ))}\n            </div>\n          </CardContent>\n        </Card>\n\n        {/* Current Tools */}\n        <Card>\n          <CardHeader>\n            <CardTitle className=\"flex items-center gap-2\">\n              <Workflow className=\"h-5 w-5\" />\n              Current Tools & Systems\n            </CardTitle>\n            <p className=\"text-sm text-muted-foreground\">What tools are you currently using?</p>\n          </CardHeader>\n          <CardContent>\n            <div className=\"grid grid-cols-1 md:grid-cols-2 gap-2\">\n              {tools.map((tool) => (\n                <div key={tool} className=\"flex items-center space-x-2\">\n                  <Checkbox\n                    id={tool}\n                    checked={businessData.key_tools.includes(tool)}\n                    onCheckedChange={() => handleArrayToggle(\n                      businessData.key_tools, \n                      tool, \n                      (arr) => setBusinessData(prev => ({ ...prev, key_tools: arr }))\n                    )}\n                  />\n                  <Label htmlFor={tool} className=\"text-sm\">{tool}</Label>\n                </div>\n              ))}\n            </div>\n          </CardContent>\n        </Card>\n\n        {/* Data Sources */}\n        <Card>\n          <CardHeader>\n            <CardTitle className=\"flex items-center gap-2\">\n              <Database className=\"h-5 w-5\" />\n              Key Data Sources\n            </CardTitle>\n            <p className=\"text-sm text-muted-foreground\">What data do you want to analyze and automate?</p>\n          </CardHeader>\n          <CardContent>\n            <div className=\"grid grid-cols-2 md:grid-cols-3 gap-2\">\n              {dataSources.map((source) => (\n                <div key={source} className=\"flex items-center space-x-2\">\n                  <Checkbox\n                    id={source}\n                    checked={businessData.data_sources.includes(source)}\n                    onCheckedChange={() => handleArrayToggle(\n                      businessData.data_sources, \n                      source, \n                      (arr) => setBusinessData(prev => ({ ...prev, data_sources: arr }))\n                    )}\n                  />\n                  <Label htmlFor={source} className=\"text-sm\">{source}</Label>\n                </div>\n              ))}\n            </div>\n          </CardContent>\n        </Card>\n\n        {/* Business Priorities */}\n        <Card>\n          <CardHeader>\n            <CardTitle className=\"flex items-center gap-2\">\n              <Target className=\"h-5 w-5\" />\n              Top Business Priorities\n            </CardTitle>\n          </CardHeader>\n          <CardContent>\n            <div className=\"grid grid-cols-2 md:grid-cols-3 gap-2\">\n              {priorities.map((priority) => (\n                <div key={priority} className=\"flex items-center space-x-2\">\n                  <Checkbox\n                    id={priority}\n                    checked={businessData.business_priorities.includes(priority)}\n                    onCheckedChange={() => handleArrayToggle(\n                      businessData.business_priorities, \n                      priority, \n                      (arr) => setBusinessData(prev => ({ ...prev, business_priorities: arr }))\n                    )}\n                  />\n                  <Label htmlFor={priority} className=\"text-sm\">{priority}</Label>\n                </div>\n              ))}\n            </div>\n          </CardContent>\n        </Card>\n\n        {/* Automation Experience */}\n        <Card>\n          <CardHeader>\n            <CardTitle>Automation Experience</CardTitle>\n            <p className=\"text-sm text-muted-foreground\">Current automation maturity</p>\n          </CardHeader>\n          <CardContent>\n            <RadioGroup\n              value={businessData.automation_maturity}\n              onValueChange={(value) => setBusinessData(prev => ({ \n                ...prev, \n                automation_maturity: value as 'none' | 'basic' | 'intermediate' | 'advanced' \n              }))}\n            >\n              <div className=\"flex items-center space-x-2\">\n                <RadioGroupItem value=\"none\" id=\"none\" />\n                <Label htmlFor=\"none\">No automation currently</Label>\n              </div>\n              <div className=\"flex items-center space-x-2\">\n                <RadioGroupItem value=\"basic\" id=\"basic\" />\n                <Label htmlFor=\"basic\">Basic (email automation)</Label>\n              </div>\n              <div className=\"flex items-center space-x-2\">\n                <RadioGroupItem value=\"intermediate\" id=\"intermediate\" />\n                <Label htmlFor=\"intermediate\">Intermediate (some workflows)</Label>\n              </div>\n              <div className=\"flex items-center space-x-2\">\n                <RadioGroupItem value=\"advanced\" id=\"advanced\" />\n                <Label htmlFor=\"advanced\">Advanced (complex automation)</Label>\n              </div>\n            </RadioGroup>\n          </CardContent>\n        </Card>\n      </div>\n\n      <div className=\"flex justify-between\">\n        <Button variant=\"outline\" onClick={onBack}>\n          Back\n        </Button>\n        <Button \n          onClick={handleSubmit}\n          disabled={!businessData.business_model || businessData.primary_departments.length === 0}\n        >\n          Continue\n        </Button>\n      </div>\n    </div>\n  );\n}; ","usedDeprecatedRules":[]},{"filePath":"/home/vonj/Github/Nexus/src/components/onboarding/BusinessSnapshotStep.tsx","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":60,"column":14,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":60,"endColumn":17,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1943,1946],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1943,1946],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState } from 'react';\nimport { Card, CardHeader, CardTitle, CardContent } from '../ui/Card';\nimport { Input } from '../ui/Input';\nimport { Button } from '../ui/Button';\nimport { useAuth } from '@/contexts/AuthContext';\nimport { Progress } from '../ui/Progress';\nimport Tooltip from '../ui/Tooltip';\nimport { Info } from 'lucide-react';\n\ninterface SnapshotData {\n  mrr: number | null;\n  avg_deal_cycle_days: number | null;\n  website_visitors_month: number | null;\n  cac: number | null;\n  burn_rate: number | null;\n  gross_margin: number | null;\n  on_time_delivery_pct: number | null;\n  avg_first_response_mins: number | null;\n  csat: number | null;\n}\n\ninterface BusinessSnapshotStepProps {\n  onNext: (data: SnapshotData) => void;\n  onBack: () => void;\n}\n\nexport const BusinessSnapshotStep: React.FC<BusinessSnapshotStepProps> = ({ onNext, onBack }) => {\n  const { user, updateCompany } = useAuth();\n  const company = user?.company;\n\n  const [snapshot, setSnapshot] = useState<SnapshotData>({\n    mrr: null,\n    avg_deal_cycle_days: null,\n    website_visitors_month: null,\n    cac: null,\n    burn_rate: null,\n    gross_margin: null,\n    on_time_delivery_pct: null,\n    avg_first_response_mins: null,\n    csat: null\n  });\n\n  const handleChange = (key: keyof SnapshotData, value: string) => {\n    setSnapshot(prev => ({ ...prev, [key]: value ? Number(value) : null }));\n  };\n\n  const handleSubmit = async () => {\n    try {\n      if (company?.id) {\n        await updateCompany({\n          mrr: snapshot.mrr,\n          avg_deal_cycle_days: snapshot.avg_deal_cycle_days,\n          website_visitors_month: snapshot.website_visitors_month,\n          cac: snapshot.cac,\n          burn_rate: snapshot.burn_rate,\n          gross_margin: snapshot.gross_margin,\n          on_time_delivery_pct: snapshot.on_time_delivery_pct,\n          avg_first_response_mins: snapshot.avg_first_response_mins,\n          csat: snapshot.csat,\n        } as any);\n      }\n    } catch (error) {\n      console.error('Failed to save baseline metrics', error);\n    }\n\n    onNext(snapshot);\n  };\n\n  const questions: Array<{ key: keyof SnapshotData; label: string; placeholder: string; suffix?: string; help: string }> = [\n    { key: 'mrr', label: 'Monthly Recurring Revenue (USD)', placeholder: 'e.g., 25000', help: 'Measures predictable revenue; Nexus will pull from Stripe or QuickBooks later.' },\n    { key: 'avg_deal_cycle_days', label: 'Average Deal Cycle (days)', placeholder: 'e.g., 30', help: 'Shorter cycles indicate efficient sales processes.' },\n    { key: 'website_visitors_month', label: 'Website Visitors Last Month', placeholder: 'e.g., 12000', help: 'Baseline for website growth; will sync from Google Analytics.' },\n    { key: 'cac', label: 'Customer Acquisition Cost (USD)', placeholder: 'e.g., 450', help: 'How much it costs to gain each customer.' },\n    { key: 'burn_rate', label: 'Monthly Burn Rate (USD)', placeholder: 'e.g., 30000', help: 'Crucial for runway calculations; can sync from your accounting platform.' },\n    { key: 'gross_margin', label: 'Gross Margin (%)', placeholder: 'e.g., 65', suffix:'%', help: 'Indicator of financial health.' },\n    { key: 'on_time_delivery_pct', label: 'Projects Delivered On-Time (%)', placeholder: 'e.g., 85', suffix:'%', help: 'Reflects operational efficiency.' },\n    { key: 'avg_first_response_mins', label: 'Avg Support First-Response (mins)', placeholder: 'e.g., 45', help: 'Lower is better for customer satisfaction.' },\n    { key: 'csat', label: 'Customer Satisfaction (1-5)', placeholder: 'e.g., 4.3', help: 'High CSAT scores correlate with retention.' }\n  ];\n\n  const answered = Object.values(snapshot).filter((v) => v !== null && v !== undefined).length;\n  const progress = Math.round((answered / questions.length) * 100);\n\n  return (\n    <div className=\"space-y-6 max-w-3xl mx-auto\">\n      <div className=\"text-center space-y-2\">\n        <h2 className=\"text-2xl font-bold\">Business Snapshot</h2>\n        <p className=\"text-muted-foreground\">Provide a quick baseline so Nexus can calculate your initial health score.</p>\n      </div>\n\n      {questions.map(({ key, label, placeholder, suffix, help }) => (\n        <Card key={key}>\n          <CardHeader>\n            <CardTitle>{label}</CardTitle>\n          </CardHeader>\n          <CardContent>\n            <div className=\"space-y-2\">\n              <div className=\"flex items-center gap-2\">\n                <Input\n                  type=\"number\"\n                  placeholder={placeholder}\n                  value={snapshot[key] ?? ''}\n                  onChange={(e) => handleChange(key, e.target.value)}\n                  className=\"flex-1\"\n                />\n                {suffix && <span className=\"text-sm text-muted-foreground\">{suffix}</span>}\n                <Tooltip content={help}>\n                  <Info className=\"h-4 w-4 text-muted-foreground cursor-help\" />\n                </Tooltip>\n              </div>\n              <div className=\"text-xs text-muted-foreground flex items-center gap-2\">\n                <input type=\"checkbox\" id={`skip-${key}`} className=\"mr-1\" onChange={(e)=> e.target.checked ? handleChange(key,'') : null} />\n                <label htmlFor={`skip-${key}`}>I'm not sure yet</label>\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n      ))}\n\n      {/* Progress */}\n      <div className=\"space-y-2\">\n        <Progress value={progress} />\n        <p className=\"text-xs text-center text-muted-foreground\">{answered} of {questions.length} answered</p>\n      </div>\n\n      <div className=\"flex justify-between pt-4\">\n        <Button variant=\"outline\" onClick={onBack}>Back</Button>\n        <Button onClick={handleSubmit}>Next</Button>\n      </div>\n    </div>\n  );\n}; ","usedDeprecatedRules":[]},{"filePath":"/home/vonj/Github/Nexus/src/components/onboarding/FounderOnboarding.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'TrendingUp' is defined but never used.","line":4,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":4,"endColumn":13},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'Clock' is defined but never used.","line":5,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":5,"endColumn":8},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'DollarSign' is defined but never used.","line":6,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":6,"endColumn":13},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'Target' is defined but never used.","line":7,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":7,"endColumn":9},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'Zap' is defined but never used.","line":8,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":8,"endColumn":6},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'BarChart3' is defined but never used.","line":11,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":11,"endColumn":12},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'Users' is defined but never used.","line":12,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":12,"endColumn":8},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'onSkip' is defined but never used.","line":76,"column":83,"nodeType":null,"messageId":"unusedVar","endLine":76,"endColumn":89},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'startDemo' is assigned a value but never used.","line":129,"column":9,"nodeType":null,"messageId":"unusedVar","endLine":129,"endColumn":18},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":208,"column":51,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":208,"endColumn":54,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[7215,7218],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[7215,7218],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":244,"column":54,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":244,"endColumn":57,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[8459,8462],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[8459,8462],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":282,"column":52,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":282,"endColumn":55,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[9737,9740],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[9737,9740],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":312,"column":50,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":312,"endColumn":53,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[10778,10781],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[10778,10781],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":347,"column":47,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":347,"endColumn":50,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[11940,11943],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[11940,11943],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":386,"column":17,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":386,"endColumn":20,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[13208,13211],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[13208,13211],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":15,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState, useEffect } from 'react';\nimport { motion, AnimatePresence } from 'framer-motion';\nimport { \n  TrendingUp, \n  Clock, \n  DollarSign, \n  Target, \n  Zap, \n  CheckCircle, \n  ArrowRight,\n  BarChart3,\n  Users,\n  Brain,\n  Sparkles,\n  PlayCircle\n} from 'lucide-react';\nimport { Button } from '../ui/Button';\nimport { Card, CardContent, CardHeader, CardTitle } from '../ui/Card';\nimport { Badge } from '../ui/Badge';\nimport { useAuth } from '../../contexts/AuthContext';\n\ninterface FounderOnboardingProps {\n  onComplete: () => void;\n  onSkip?: () => void;\n}\n\ninterface FounderProfile {\n  industry: string;\n  companySize: string;\n  biggestChallenge: string;\n  monthlyRevenue: string;\n  timeSpentOnAdmin: string;\n}\n\ninterface ROICalculation {\n  hoursPerWeek: number;\n  hourlyValue: number;\n  monthlySavings: number;\n  annualSavings: number;\n  timeToROI: string;\n}\n\nconst INDUSTRY_SPECIFICS = {\n  'ecommerce': {\n    painPoints: ['Inventory management', 'Customer service', 'Order fulfillment', 'Marketing ROI'],\n    aiSolutions: ['Automated order processing', 'Smart inventory alerts', 'AI customer service', 'Predictive analytics'],\n    avgSavings: 18,\n    quickWin: 'Automate order processing and inventory updates'\n  },\n  'saas': {\n    painPoints: ['Customer churn', 'Lead qualification', 'Product analytics', 'Customer onboarding'],\n    aiSolutions: ['Predictive churn analysis', 'Automated lead scoring', 'Smart customer insights', 'Intelligent support routing'],\n    avgSavings: 22,\n    quickWin: 'Automate lead scoring and customer health monitoring'\n  },\n  'consulting': {\n    painPoints: ['Time tracking', 'Project management', 'Client communication', 'Resource allocation'],\n    aiSolutions: ['Automated time tracking', 'Smart project insights', 'Client communication automation', 'Resource optimization'],\n    avgSavings: 16,\n    quickWin: 'Automate time tracking and project reporting'\n  },\n  'agency': {\n    painPoints: ['Client reporting', 'Campaign management', 'Resource planning', 'Performance tracking'],\n    aiSolutions: ['Automated client reports', 'Smart campaign optimization', 'Real-time performance insights', 'Predictive ROI modeling'],\n    avgSavings: 20,\n    quickWin: 'Automate client reporting and campaign optimization'\n  },\n  'other': {\n    painPoints: ['Data management', 'Process optimization', 'Team coordination', 'Performance tracking'],\n    aiSolutions: ['Automated data processing', 'Smart workflow optimization', 'Intelligent team coordination', 'Real-time analytics'],\n    avgSavings: 15,\n    quickWin: 'Automate data processing and reporting'\n  }\n};\n\nexport const FounderOnboarding: React.FC<FounderOnboardingProps> = ({ onComplete, onSkip }) => {\n  const { user } = useAuth();\n  const [currentStep, setCurrentStep] = useState(0);\n  const [profile, setProfile] = useState<FounderProfile>({\n    industry: '',\n    companySize: '',\n    biggestChallenge: '',\n    monthlyRevenue: '',\n    timeSpentOnAdmin: ''\n  });\n  const [roiCalculation, setROICalculation] = useState<ROICalculation | null>(null);\n  const [showDemo, setShowDemo] = useState(false);\n  const [demoStep, setDemoStep] = useState(0);\n\n  const firstName = user?.profile?.first_name || 'there';\n\n  const calculateROI = (profile: FounderProfile): ROICalculation => {\n    const industryData = INDUSTRY_SPECIFICS[profile.industry as keyof typeof INDUSTRY_SPECIFICS] || INDUSTRY_SPECIFICS.other;\n    \n    // Calculate founder's hourly value based on revenue\n    const monthlyRev = parseInt(profile.monthlyRevenue.replace(/[^0-9]/g, '')) || 50000;\n    const hourlyValue = Math.max(100, monthlyRev / 160); // Assume 160 working hours/month, min $100/hr\n    \n    // Calculate time savings based on admin time\n    const adminHours = parseInt(profile.timeSpentOnAdmin.replace(/[^0-9]/g, '')) || 20;\n    const automationSavings = Math.min(adminHours * 0.7, industryData.avgSavings); // 70% of admin time, capped by industry avg\n    \n    const monthlySavings = automationSavings * 4 * hourlyValue; // 4 weeks\n    const annualSavings = monthlySavings * 12;\n    \n    return {\n      hoursPerWeek: automationSavings,\n      hourlyValue,\n      monthlySavings,\n      annualSavings,\n      timeToROI: monthlySavings > 29 ? '1 day' : '1 week'\n    };\n  };\n\n  const handleStepComplete = (stepData: Partial<FounderProfile>) => {\n    const updatedProfile = { ...profile, ...stepData };\n    setProfile(updatedProfile);\n    \n    if (currentStep === 4) {\n      // Final step - calculate ROI and show demo\n      const roi = calculateROI(updatedProfile);\n      setROICalculation(roi);\n      setShowDemo(true);\n    } else {\n      setCurrentStep(currentStep + 1);\n    }\n  };\n\n  const startDemo = () => {\n    setDemoStep(1);\n  };\n\n  const completeDemo = () => {\n    // Save founder profile for personalization\n    localStorage.setItem('nexus_founder_profile', JSON.stringify({\n      ...profile,\n      roi: roiCalculation,\n      completedAt: new Date().toISOString()\n    }));\n    onComplete();\n  };\n\n  const industryData = INDUSTRY_SPECIFICS[profile.industry as keyof typeof INDUSTRY_SPECIFICS] || INDUSTRY_SPECIFICS.other;\n\n  if (showDemo) {\n    return (\n      <FounderDemo \n        profile={profile}\n        roi={roiCalculation!}\n        industryData={industryData}\n        currentStep={demoStep}\n        onNext={() => setDemoStep(demoStep + 1)}\n        onComplete={completeDemo}\n      />\n    );\n  }\n\n  return (\n    <div className=\"min-h-screen bg-gradient-to-br from-slate-50 to-slate-100 dark:from-slate-900 dark:to-slate-800 flex items-center justify-center p-4\">\n      <Card className=\"w-full max-w-2xl\">\n        <CardHeader className=\"text-center\">\n          <div className=\"flex items-center justify-center mb-4\">\n            <Brain className=\"h-8 w-8 text-primary mr-2\" />\n            <CardTitle className=\"text-2xl\">Hey {firstName}! 👋</CardTitle>\n          </div>\n          <p className=\"text-muted-foreground\">\n            Let's see how much time Nexus can save you this month\n          </p>\n          \n          {/* Progress indicator */}\n          <div className=\"flex justify-center mt-4\">\n            {[0, 1, 2, 3, 4].map((step) => (\n              <div\n                key={step}\n                className={`w-2 h-2 rounded-full mx-1 ${\n                  step <= currentStep ? 'bg-primary' : 'bg-muted'\n                }`}\n              />\n            ))}\n          </div>\n        </CardHeader>\n\n        <CardContent>\n          <AnimatePresence mode=\"wait\">\n            {currentStep === 0 && (\n              <IndustryStep onComplete={handleStepComplete} />\n            )}\n            {currentStep === 1 && (\n              <CompanySizeStep onComplete={handleStepComplete} />\n            )}\n            {currentStep === 2 && (\n              <ChallengeStep onComplete={handleStepComplete} industry={profile.industry} />\n            )}\n            {currentStep === 3 && (\n              <RevenueStep onComplete={handleStepComplete} />\n            )}\n            {currentStep === 4 && (\n              <TimeStep onComplete={handleStepComplete} />\n            )}\n          </AnimatePresence>\n        </CardContent>\n      </Card>\n    </div>\n  );\n};\n\n// Individual step components\nconst IndustryStep: React.FC<{ onComplete: (data: any) => void }> = ({ onComplete }) => {\n  const industries = [\n    { id: 'ecommerce', label: 'E-commerce/Retail', icon: '🛒' },\n    { id: 'saas', label: 'SaaS/Software', icon: '💻' },\n    { id: 'consulting', label: 'Consulting/Services', icon: '💼' },\n    { id: 'agency', label: 'Marketing/Agency', icon: '📈' },\n    { id: 'other', label: 'Other Industry', icon: '🏢' }\n  ];\n\n  return (\n    <motion.div\n      initial={{ opacity: 0, y: 20 }}\n      animate={{ opacity: 1, y: 0 }}\n      exit={{ opacity: 0, y: -20 }}\n      className=\"space-y-4\"\n    >\n      <h3 className=\"text-lg font-semibold text-center mb-6\">\n        What industry is your business in?\n      </h3>\n      <div className=\"grid grid-cols-1 gap-3\">\n        {industries.map((industry) => (\n          <Button\n            key={industry.id}\n            variant=\"outline\"\n            className=\"h-auto p-4 justify-start text-left hover:bg-primary/5\"\n            onClick={() => onComplete({ industry: industry.id })}\n          >\n            <span className=\"text-2xl mr-3\">{industry.icon}</span>\n            <span className=\"font-medium\">{industry.label}</span>\n          </Button>\n        ))}\n      </div>\n    </motion.div>\n  );\n};\n\nconst CompanySizeStep: React.FC<{ onComplete: (data: any) => void }> = ({ onComplete }) => {\n  const sizes = [\n    { id: 'solo', label: 'Just me (Solo founder)', desc: '1 person' },\n    { id: 'small', label: 'Small team', desc: '2-10 people' },\n    { id: 'medium', label: 'Growing company', desc: '11-50 people' },\n    { id: 'large', label: 'Established business', desc: '50+ people' }\n  ];\n\n  return (\n    <motion.div\n      initial={{ opacity: 0, y: 20 }}\n      animate={{ opacity: 1, y: 0 }}\n      exit={{ opacity: 0, y: -20 }}\n      className=\"space-y-4\"\n    >\n      <h3 className=\"text-lg font-semibold text-center mb-6\">\n        How big is your team?\n      </h3>\n      <div className=\"space-y-3\">\n        {sizes.map((size) => (\n          <Button\n            key={size.id}\n            variant=\"outline\"\n            className=\"w-full h-auto p-4 justify-between hover:bg-primary/5\"\n            onClick={() => onComplete({ companySize: size.id })}\n          >\n            <div className=\"text-left\">\n              <div className=\"font-medium\">{size.label}</div>\n              <div className=\"text-sm text-muted-foreground\">{size.desc}</div>\n            </div>\n            <ArrowRight className=\"h-4 w-4\" />\n          </Button>\n        ))}\n      </div>\n    </motion.div>\n  );\n};\n\nconst ChallengeStep: React.FC<{ onComplete: (data: any) => void; industry: string }> = ({ onComplete, industry }) => {\n  const industryData = INDUSTRY_SPECIFICS[industry as keyof typeof INDUSTRY_SPECIFICS] || INDUSTRY_SPECIFICS.other;\n  \n  return (\n    <motion.div\n      initial={{ opacity: 0, y: 20 }}\n      animate={{ opacity: 1, y: 0 }}\n      exit={{ opacity: 0, y: -20 }}\n      className=\"space-y-4\"\n    >\n      <h3 className=\"text-lg font-semibold text-center mb-6\">\n        What's your biggest operational challenge?\n      </h3>\n      <div className=\"space-y-3\">\n        {industryData.painPoints.map((challenge, index) => (\n          <Button\n            key={index}\n            variant=\"outline\"\n            className=\"w-full h-auto p-4 justify-between hover:bg-primary/5\"\n            onClick={() => onComplete({ biggestChallenge: challenge })}\n          >\n            <span className=\"font-medium\">{challenge}</span>\n            <ArrowRight className=\"h-4 w-4\" />\n          </Button>\n        ))}\n      </div>\n    </motion.div>\n  );\n};\n\nconst RevenueStep: React.FC<{ onComplete: (data: any) => void }> = ({ onComplete }) => {\n  const ranges = [\n    { id: 'startup', label: 'Pre-revenue/Starting out', value: '10000' },\n    { id: 'small', label: '$10K - $50K/month', value: '30000' },\n    { id: 'medium', label: '$50K - $200K/month', value: '125000' },\n    { id: 'large', label: '$200K+ per month', value: '500000' }\n  ];\n\n  return (\n    <motion.div\n      initial={{ opacity: 0, y: 20 }}\n      animate={{ opacity: 1, y: 0 }}\n      exit={{ opacity: 0, y: -20 }}\n      className=\"space-y-4\"\n    >\n      <h3 className=\"text-lg font-semibold text-center mb-6\">\n        What's your approximate monthly revenue?\n      </h3>\n      <div className=\"space-y-3\">\n        {ranges.map((range) => (\n          <Button\n            key={range.id}\n            variant=\"outline\"\n            className=\"w-full h-auto p-4 justify-between hover:bg-primary/5\"\n            onClick={() => onComplete({ monthlyRevenue: range.value })}\n          >\n            <span className=\"font-medium\">{range.label}</span>\n            <ArrowRight className=\"h-4 w-4\" />\n          </Button>\n        ))}\n      </div>\n    </motion.div>\n  );\n};\n\nconst TimeStep: React.FC<{ onComplete: (data: any) => void }> = ({ onComplete }) => {\n  const timeRanges = [\n    { id: 'low', label: '5-10 hours per week', value: '7' },\n    { id: 'medium', label: '10-20 hours per week', value: '15' },\n    { id: 'high', label: '20-30 hours per week', value: '25' },\n    { id: 'extreme', label: '30+ hours per week', value: '35' }\n  ];\n\n  return (\n    <motion.div\n      initial={{ opacity: 0, y: 20 }}\n      animate={{ opacity: 1, y: 0 }}\n      exit={{ opacity: 0, y: -20 }}\n      className=\"space-y-4\"\n    >\n      <h3 className=\"text-lg font-semibold text-center mb-6\">\n        How much time do you spend on admin/operational tasks?\n      </h3>\n      <div className=\"space-y-3\">\n        {timeRanges.map((range) => (\n          <Button\n            key={range.id}\n            variant=\"outline\"\n            className=\"w-full h-auto p-4 justify-between hover:bg-primary/5\"\n            onClick={() => onComplete({ timeSpentOnAdmin: range.value })}\n          >\n            <span className=\"font-medium\">{range.label}</span>\n            <ArrowRight className=\"h-4 w-4\" />\n          </Button>\n        ))}\n      </div>\n    </motion.div>\n  );\n};\n\n// Demo component that shows personalized value\nconst FounderDemo: React.FC<{\n  profile: FounderProfile;\n  roi: ROICalculation;\n  industryData: any;\n  currentStep: number;\n  onNext: () => void;\n  onComplete: () => void;\n}> = ({ profile, roi, industryData, currentStep, onNext, onComplete }) => {\n  const [animatedSavings, setAnimatedSavings] = useState(0);\n\n  useEffect(() => {\n    if (currentStep === 1) {\n      // Animate the savings counter\n      const target = roi.monthlySavings;\n      const increment = target / 50;\n      let current = 0;\n      \n      const timer = setInterval(() => {\n        current += increment;\n        if (current >= target) {\n          setAnimatedSavings(target);\n          clearInterval(timer);\n        } else {\n          setAnimatedSavings(Math.floor(current));\n        }\n      }, 30);\n\n      return () => clearInterval(timer);\n    }\n  }, [currentStep, roi.monthlySavings]);\n\n  if (currentStep === 1) {\n    return (\n      <div className=\"min-h-screen bg-gradient-to-br from-primary/5 to-primary/10 flex items-center justify-center p-4\">\n        <Card className=\"w-full max-w-3xl\">\n          <CardContent className=\"p-8 text-center\">\n            <motion.div\n              initial={{ scale: 0.8, opacity: 0 }}\n              animate={{ scale: 1, opacity: 1 }}\n              className=\"space-y-6\"\n            >\n              <div className=\"inline-flex items-center px-4 py-2 bg-success/10 border border-success/20 rounded-full\">\n                <Sparkles className=\"h-4 w-4 text-success mr-2\" />\n                <span className=\"text-success font-semibold\">Your Personalized ROI Analysis</span>\n              </div>\n\n              <h2 className=\"text-3xl font-bold\">\n                Nexus could save you\n              </h2>\n\n              <div className=\"text-6xl font-bold text-primary\">\n                ${animatedSavings.toLocaleString()}\n              </div>\n              \n              <p className=\"text-xl text-muted-foreground\">\n                per month by automating your {profile.biggestChallenge.toLowerCase()}\n              </p>\n\n              <div className=\"grid grid-cols-3 gap-6 my-8\">\n                <div className=\"p-4 bg-background rounded-lg border\">\n                  <div className=\"text-2xl font-bold text-primary\">{roi.hoursPerWeek}h</div>\n                  <div className=\"text-sm text-muted-foreground\">saved per week</div>\n                </div>\n                <div className=\"p-4 bg-background rounded-lg border\">\n                  <div className=\"text-2xl font-bold text-success\">${roi.hourlyValue}</div>\n                  <div className=\"text-sm text-muted-foreground\">your hourly value</div>\n                </div>\n                <div className=\"p-4 bg-background rounded-lg border\">\n                  <div className=\"text-2xl font-bold text-warning\">{roi.timeToROI}</div>\n                  <div className=\"text-sm text-muted-foreground\">to break even</div>\n                </div>\n              </div>\n\n              <div className=\"bg-primary/5 border border-primary/20 rounded-lg p-6\">\n                <h3 className=\"font-semibold mb-3\">Here's how we'll do it:</h3>\n                <div className=\"space-y-2 text-left\">\n                  {industryData.aiSolutions.map((solution: string, index: number) => (\n                    <div key={index} className=\"flex items-center\">\n                      <CheckCircle className=\"h-4 w-4 text-success mr-2 flex-shrink-0\" />\n                      <span className=\"text-sm\">{solution}</span>\n                    </div>\n                  ))}\n                </div>\n              </div>\n\n              <Button onClick={onNext} size=\"lg\" className=\"w-full\">\n                <PlayCircle className=\"h-4 w-4 mr-2\" />\n                Show Me How It Works\n              </Button>\n            </motion.div>\n          </CardContent>\n        </Card>\n      </div>\n    );\n  }\n\n  // Demo steps showing actual automation\n  return (\n    <div className=\"min-h-screen bg-gradient-to-br from-slate-50 to-slate-100 dark:from-slate-900 dark:to-slate-800 flex items-center justify-center p-4\">\n      <Card className=\"w-full max-w-4xl\">\n        <CardContent className=\"p-8\">\n          <div className=\"text-center mb-8\">\n            <Badge className=\"mb-4\">Live Demo</Badge>\n            <h2 className=\"text-2xl font-bold mb-2\">\n              Watch Nexus automate your {profile.biggestChallenge.toLowerCase()}\n            </h2>\n            <p className=\"text-muted-foreground\">\n              This is exactly what would happen in your business\n            </p>\n          </div>\n\n          {/* Simulated automation interface */}\n          <div className=\"bg-background border rounded-lg p-6 mb-6\">\n            <div className=\"flex items-center justify-between mb-4\">\n              <div className=\"flex items-center\">\n                <div className=\"w-3 h-3 bg-success rounded-full mr-2 animate-pulse\"></div>\n                <span className=\"font-medium\">AI Agent: {industryData.quickWin}</span>\n              </div>\n              <Badge variant=\"outline\">Running</Badge>\n            </div>\n            \n            <div className=\"space-y-3\">\n              <div className=\"flex items-center text-sm\">\n                <CheckCircle className=\"h-4 w-4 text-success mr-2\" />\n                <span>Analyzed 247 data points from your systems</span>\n              </div>\n              <div className=\"flex items-center text-sm\">\n                <CheckCircle className=\"h-4 w-4 text-success mr-2\" />\n                <span>Identified 12 automation opportunities</span>\n              </div>\n              <div className=\"flex items-center text-sm\">\n                <CheckCircle className=\"h-4 w-4 text-success mr-2\" />\n                <span>Created 3 automated workflows</span>\n              </div>\n              <div className=\"flex items-center text-sm\">\n                <div className=\"w-4 h-4 border-2 border-primary border-t-transparent rounded-full animate-spin mr-2\"></div>\n                <span>Generating your first insights...</span>\n              </div>\n            </div>\n          </div>\n\n          <div className=\"grid grid-cols-2 gap-6 mb-8\">\n            <div className=\"p-4 bg-success/5 border border-success/20 rounded-lg\">\n              <h3 className=\"font-semibold text-success mb-2\">Time Saved Today</h3>\n              <div className=\"text-2xl font-bold\">{Math.round(roi.hoursPerWeek / 5)} hours</div>\n            </div>\n            <div className=\"p-4 bg-primary/5 border border-primary/20 rounded-lg\">\n              <h3 className=\"font-semibold text-primary mb-2\">Value Created</h3>\n              <div className=\"text-2xl font-bold\">${Math.round(roi.monthlySavings / 30)}</div>\n            </div>\n          </div>\n\n          <div className=\"text-center\">\n            <Button onClick={onComplete} size=\"lg\" className=\"mr-4\">\n              Start Your Free Trial\n              <ArrowRight className=\"h-4 w-4 ml-2\" />\n            </Button>\n            <Button variant=\"outline\" onClick={onComplete}>\n              See Full Dashboard\n            </Button>\n          </div>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}; ","usedDeprecatedRules":[]},{"filePath":"/home/vonj/Github/Nexus/src/components/onboarding/N8nConnectionSetup.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'err' is defined but never used.","line":66,"column":16,"nodeType":null,"messageId":"unusedVar","endLine":66,"endColumn":19},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":131,"column":21,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":131,"endColumn":24,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3809,3812],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3809,3812],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":176,"column":21,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":176,"endColumn":24,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[5013,5016],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[5013,5016],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\n * N8nConnectionSetup.tsx\n * Onboarding component for connecting user's n8n instance to Nexus\n * Handles connection testing, validation, and configuration storage\n */\nimport React, { useState, useEffect } from 'react';\nimport { CheckCircle, AlertCircle, ExternalLink, Info, Eye, EyeOff } from 'lucide-react';\nimport { Spinner } from '../ui/Spinner';\nimport { supabase } from '../../lib/core/supabase';\nimport { useAuth } from '@/contexts/AuthContext';\n\ninterface N8nConnectionConfig {\n  baseUrl: string;\n  apiKey: string;\n  instanceName?: string;\n  isActive: boolean;\n}\n\ninterface N8nConnectionSetupProps {\n  onComplete: (config: N8nConnectionConfig) => void;\n  onSkip?: () => void;\n  className?: string;\n}\n\nexport const N8nConnectionSetup: React.FC<N8nConnectionSetupProps> = ({\n  onComplete,\n  onSkip,\n  className = ''\n}) => {\n  const { user } = useAuth();\n  const [config, setConfig] = useState<N8nConnectionConfig>({\n    baseUrl: '',\n    apiKey: '',\n    instanceName: '',\n    isActive: false\n  });\n  \n  const [isTestingConnection, setIsTestingConnection] = useState(false);\n  const [connectionStatus, setConnectionStatus] = useState<'idle' | 'success' | 'error'>('idle');\n  const [errorMessage, setErrorMessage] = useState('');\n  const [showApiKey, setShowApiKey] = useState(false);\n  const [isSaving, setIsSaving] = useState(false);\n\n  // Load existing configuration if any\n  useEffect(() => {\n    const loadExistingConfig = async () => {\n      if (!user?.id) return;\n      \n      try {\n        const { data, error } = await supabase\n          .from('n8n_configurations')\n          .select('*')\n          .eq('user_id', user.id)\n          .eq('is_active', true)\n          .single();\n          \n        if (data && !error) {\n          setConfig({\n            baseUrl: data.base_url,\n            apiKey: data.api_key,\n            instanceName: data.instance_name || '',\n            isActive: data.is_active\n          });\n          setConnectionStatus('success');\n        }\n      } catch (err) {\n        console.log('No existing configuration found');\n      }\n    };\n    \n    loadExistingConfig();\n  }, [user]);\n\n  const validateUrl = (url: string): boolean => {\n    try {\n      const parsed = new URL(url);\n      return parsed.protocol === 'http:' || parsed.protocol === 'https:';\n    } catch {\n      return false;\n    }\n  };\n\n  const testConnection = async (): Promise<boolean> => {\n    if (!config.baseUrl || !config.apiKey) {\n      setErrorMessage('Please provide both URL and API key');\n      return false;\n    }\n\n    if (!validateUrl(config.baseUrl)) {\n      setErrorMessage('Please provide a valid URL (including http:// or https://)');\n      return false;\n    }\n\n    setIsTestingConnection(true);\n    setErrorMessage('');\n\n    try {\n      // Clean up URL (remove trailing slash)\n      const cleanUrl = config.baseUrl.replace(/\\/$/, '');\n      \n      // Test connection with health check\n      const healthResponse = await fetch(`${cleanUrl}/healthz`, {\n        method: 'GET',\n      });\n\n      if (!healthResponse.ok) {\n        throw new Error('Health check failed');\n      }\n\n      // Test API key with workflows endpoint\n      const apiResponse = await fetch(`${cleanUrl}/api/v1/workflows`, {\n        method: 'GET',\n        headers: {\n          'Authorization': `Bearer ${config.apiKey}`,\n          'Content-Type': 'application/json',\n        },\n      });\n\n      if (!apiResponse.ok) {\n        if (apiResponse.status === 401) {\n          throw new Error('Invalid API key');\n        } else if (apiResponse.status === 403) {\n          throw new Error('API key does not have sufficient permissions');\n        } else {\n          throw new Error(`API request failed with status ${apiResponse.status}`);\n        }\n      }\n\n      setConnectionStatus('success');\n      return true;\n    } catch (error: any) {\n      console.error('Connection test failed:', error);\n      setConnectionStatus('error');\n      setErrorMessage(error.message || 'Failed to connect to n8n instance');\n      return false;\n    } finally {\n      setIsTestingConnection(false);\n    }\n  };\n\n  const saveConfiguration = async (): Promise<boolean> => {\n    if (!user?.id) {\n      setErrorMessage('User not authenticated');\n      return false;\n    }\n\n    setIsSaving(true);\n    \n    try {\n      // Deactivate any existing configurations\n      await supabase\n        .from('n8n_configurations')\n        .update({ is_active: false })\n        .eq('user_id', user.id);\n\n      // Insert new configuration\n      const { error } = await supabase\n        .from('n8n_configurations')\n        .insert([\n          {\n            user_id: user.id,\n            base_url: config.baseUrl.replace(/\\/$/, ''),\n            api_key: config.apiKey,\n            instance_name: config.instanceName || 'My n8n Instance',\n            is_active: true,\n            created_at: new Date().toISOString(),\n            updated_at: new Date().toISOString()\n          }\n        ]);\n\n      if (error) {\n        throw error;\n      }\n\n      return true;\n    } catch (error: any) {\n      console.error('Failed to save configuration:', error);\n      setErrorMessage('Failed to save configuration: ' + error.message);\n      return false;\n    } finally {\n      setIsSaving(false);\n    }\n  };\n\n  const handleComplete = async () => {\n    // Test connection first\n    const connectionSuccessful = await testConnection();\n    if (!connectionSuccessful) return;\n\n    // Save configuration\n    const saveSuccessful = await saveConfiguration();\n    if (!saveSuccessful) return;\n\n    // Call completion callback\n    onComplete({\n      ...config,\n      isActive: true\n    });\n  };\n\n  const handleTestConnection = async () => {\n    await testConnection();\n  };\n\n  return (\n    <div className={`max-w-2xl mx-auto bg-card dark:bg-background rounded-lg shadow-lg p-6 ${className}`}>\n      <div className=\"text-center mb-6\">\n        <h2 className=\"text-2xl font-bold text-foreground dark:text-primary-foreground mb-2\">\n          Connect Your n8n Instance\n        </h2>\n        <p className=\"text-muted-foreground dark:text-muted-foreground\">\n          Connect your n8n automation platform to unlock powerful AI-driven workflows in Nexus\n        </p>\n      </div>\n\n      <div className=\"space-y-6\">\n        {/* Instance Name */}\n        <div>\n          <label className=\"block text-sm font-medium text-foreground/90 dark:text-muted-foreground/60 mb-2\">\n            Instance Name (Optional)\n          </label>\n          <input\n            type=\"text\"\n            value={config.instanceName}\n            onChange={(e) => setConfig(prev => ({ ...prev, instanceName: e.target.value }))}\n            placeholder=\"My n8n Instance\"\n            className=\"w-full px-4 py-4 border border-border dark:border-gray-600 rounded-lg bg-card dark:bg-background text-foreground dark:text-primary-foreground placeholder-gray-500 dark:placeholder-gray-400 focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-transparent\"\n          />\n        </div>\n\n        {/* Base URL */}\n        <div>\n          <label className=\"block text-sm font-medium text-foreground/90 dark:text-muted-foreground/60 mb-2\">\n            n8n Instance URL *\n          </label>\n          <input\n            type=\"url\"\n            value={config.baseUrl}\n            onChange={(e) => setConfig(prev => ({ ...prev, baseUrl: e.target.value }))}\n            placeholder=\"https://your-n8n-instance.com\"\n            className=\"w-full px-4 py-4 border border-border dark:border-gray-600 rounded-lg bg-card dark:bg-background text-foreground dark:text-primary-foreground placeholder-gray-500 dark:placeholder-gray-400 focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-transparent\"\n            required\n          />\n          <p className=\"text-xs text-muted-foreground dark:text-muted-foreground mt-1\">\n            The full URL to your n8n instance (e.g., https://n8n.yourcompany.com)\n          </p>\n        </div>\n\n        {/* API Key */}\n        <div>\n          <label className=\"block text-sm font-medium text-foreground/90 dark:text-muted-foreground/60 mb-2\">\n            API Key *\n          </label>\n          <div className=\"relative\">\n            <input\n              type={showApiKey ? 'text' : 'password'}\n              value={config.apiKey}\n              onChange={(e) => setConfig(prev => ({ ...prev, apiKey: e.target.value }))}\n              placeholder=\"n8n_api_xxxxxxxxxxxxxxxx\"\n              className=\"w-full px-4 py-4 pr-10 border border-border dark:border-gray-600 rounded-lg bg-card dark:bg-background text-foreground dark:text-primary-foreground placeholder-gray-500 dark:placeholder-gray-400 focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-transparent\"\n              required\n            />\n            <button\n              type=\"button\"\n              onClick={() => setShowApiKey(!showApiKey)}\n              className=\"absolute inset-y-0 right-0 pr-3 flex items-center text-muted-foreground hover:text-muted-foreground dark:hover:text-muted-foreground/60\"\n            >\n              {showApiKey ? <EyeOff className=\"h-4 w-4\" /> : <Eye className=\"h-4 w-4\" />}\n            </button>\n          </div>\n          <div className=\"flex items-start space-x-2 mt-2\">\n            <Info className=\"h-4 w-4 text-primary mt-0.5 flex-shrink-0\" />\n            <div className=\"text-xs text-muted-foreground dark:text-muted-foreground\">\n              <p>You can generate an API key in your n8n instance:</p>\n              <p>Settings → Users & Settings → API Keys → Create New Key</p>\n            </div>\n          </div>\n        </div>\n\n        {/* Test Connection Button */}\n        <div>\n          <button\n            onClick={handleTestConnection}\n            disabled={isTestingConnection || !config.baseUrl || !config.apiKey}\n            className=\"w-full flex items-center justify-center space-x-2 px-4 py-4 bg-secondary hover:bg-secondary/90 disabled:bg-muted disabled:cursor-not-allowed text-primary-foreground rounded-lg transition-colors\"\n          >\n            {isTestingConnection ? (\n              <>\n                <Spinner size={16} className=\"mr-2\" />\n                <span>Testing Connection...</span>\n              </>\n            ) : (\n              <>\n                <ExternalLink className=\"h-4 w-4\" />\n                <span>Test Connection</span>\n              </>\n            )}\n          </button>\n        </div>\n\n        {/* Connection Status */}\n        {connectionStatus !== 'idle' && (\n          <div className={`flex items-center space-x-2 p-4 rounded-lg ${\n            connectionStatus === 'success' \n              ? 'bg-success/5 dark:bg-success/20 text-success dark:text-success'\n              : 'bg-destructive/5 dark:bg-destructive/20 text-destructive dark:text-destructive'\n          }`}>\n            {connectionStatus === 'success' ? (\n              <>\n                <CheckCircle className=\"h-5 w-5\" />\n                <span>Connection successful! Your n8n instance is ready to use.</span>\n              </>\n            ) : (\n              <>\n                <AlertCircle className=\"h-5 w-5\" />\n                <span>{errorMessage}</span>\n              </>\n            )}\n          </div>\n        )}\n\n        {/* Action Buttons */}\n        <div className=\"flex space-x-4 pt-4\">\n          {onSkip && (\n            <button\n              onClick={onSkip}\n              className=\"flex-1 px-4 py-4 text-muted-foreground dark:text-muted-foreground hover:text-foreground dark:hover:text-muted-foreground transition-colors\"\n            >\n              Skip for now\n            </button>\n          )}\n          <button\n            onClick={handleComplete}\n            disabled={connectionStatus !== 'success' || isSaving}\n            className=\"flex-1 flex items-center justify-center space-x-2 px-4 py-4 bg-primary hover:bg-primary/90 disabled:bg-muted disabled:cursor-not-allowed text-primary-foreground rounded-lg transition-colors\"\n          >\n            {isSaving ? (\n              <>\n                <Spinner size={16} className=\"mr-2\" />\n                <span>Saving...</span>\n              </>\n            ) : (\n              <span>Complete Setup</span>\n            )}\n          </button>\n        </div>\n\n        {/* Help Text */}\n        <div className=\"text-center pt-4 border-t border-border dark:border-border\">\n          <p className=\"text-sm text-muted-foreground dark:text-muted-foreground\">\n            Don't have n8n yet?{' '}\n            <a \n              href=\"https://n8n.io\" \n              target=\"_blank\" \n              rel=\"noopener noreferrer\"\n              className=\"text-primary hover:text-primary/80\"\n            >\n              Get started with n8n\n            </a>\n          </p>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default N8nConnectionSetup; ","usedDeprecatedRules":[]},{"filePath":"/home/vonj/Github/Nexus/src/components/onboarding/OnboardingChat.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'Sparkles' is defined but never used.","line":12,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":12,"endColumn":11},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'Zap' is defined but never used.","line":15,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":15,"endColumn":6},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'OnboardingMessage' is defined but never used.","line":27,"column":11,"nodeType":null,"messageId":"unusedVar","endLine":27,"endColumn":28},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":35,"column":36,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":35,"endColumn":39,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[852,855],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[852,855],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":55,"column":69,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":55,"endColumn":72,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1488,1491],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1488,1491],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'assistantPersonality' is assigned a value but never used.","line":56,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":56,"endColumn":30},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'setAssistantPersonality' is assigned a value but never used.","line":56,"column":32,"nodeType":null,"messageId":"unusedVar","endLine":56,"endColumn":55},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'initialMessageSent' is assigned a value but never used.","line":61,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":61,"endColumn":28},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'setInitialMessageSent' is assigned a value but never used.","line":61,"column":30,"nodeType":null,"messageId":"unusedVar","endLine":61,"endColumn":51},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'conversationId' is assigned a value but never used.","line":64,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":64,"endColumn":24},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'setConversationId' is assigned a value but never used.","line":64,"column":26,"nodeType":null,"messageId":"unusedVar","endLine":64,"endColumn":43},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'sessionId' is assigned a value but never used.","line":65,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":65,"endColumn":19},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'setSessionId' is assigned a value but never used.","line":65,"column":21,"nodeType":null,"messageId":"unusedVar","endLine":65,"endColumn":33},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'aiEnabled' is assigned a value but never used.","line":66,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":66,"endColumn":19},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'setAiEnabled' is assigned a value but never used.","line":66,"column":21,"nodeType":null,"messageId":"unusedVar","endLine":66,"endColumn":33},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":133,"column":26,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":133,"endColumn":29,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3986,3989],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3986,3989],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":137,"column":63,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":137,"endColumn":66,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[4138,4141],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[4138,4141],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'role' is defined but never used.","line":251,"column":52,"nodeType":null,"messageId":"unusedVar","endLine":251,"endColumn":56},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'industry' is defined but never used.","line":251,"column":66,"nodeType":null,"messageId":"unusedVar","endLine":251,"endColumn":74},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'response' is defined but never used.","line":437,"column":8,"nodeType":null,"messageId":"unusedVar","endLine":437,"endColumn":16},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'analyzeBusinessResponse' is assigned a value but never used.","line":559,"column":9,"nodeType":null,"messageId":"unusedVar","endLine":559,"endColumn":32},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'analyzeRoleResponse' is assigned a value but never used.","line":590,"column":9,"nodeType":null,"messageId":"unusedVar","endLine":590,"endColumn":28},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'analyzeGoalsResponse' is assigned a value but never used.","line":615,"column":9,"nodeType":null,"messageId":"unusedVar","endLine":615,"endColumn":29},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'analyzeWorkingStyleResponse' is assigned a value but never used.","line":638,"column":9,"nodeType":null,"messageId":"unusedVar","endLine":638,"endColumn":36}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":24,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\n * OnboardingChat.tsx\n * First meeting with the user's Executive Assistant\n * Conversational onboarding that builds the foundation of the AI-human relationship\n */\n\nimport React, { useState, useEffect, useRef } from 'react';\nimport { \n  Send, \n  Bot, \n  User, \n  Sparkles, \n  Building2, \n  Target, \n  Zap, \n  CheckCircle,\n  ArrowRight,\n  Heart,\n  Briefcase,\n  Users,\n  TrendingUp\n} from 'lucide-react';\nimport { motion, AnimatePresence } from 'framer-motion';\nimport { useAuth } from '@/contexts/AuthContext';\nimport { useOnboardingChatStore } from '@/lib/stores/onboardingChatStore';\n\ninterface OnboardingMessage {\n  id: string;\n  role: 'assistant' | 'user';\n  content: string;\n  timestamp: Date;\n  type: 'message' | 'introduction' | 'data-collected' | 'relationship-building';\n  metadata?: {\n    step?: string;\n    dataCollected?: Record<string, any>;\n    suggestions?: string[];\n          emotion?: 'excited' | 'thoughtful' | 'supportive' | 'celebratory' | 'friendly';\n  };\n}\n\ninterface OnboardingStep {\n  id: string;\n  title: string;\n  icon: React.ReactNode;\n  completed: boolean;\n  description: string;\n}\n\nexport const OnboardingChat: React.FC = () => {\n  console.log('[OnboardingChat] Component rendered.');\n  const { user, completeOnboarding } = useAuth();\n  const { messages, isTyping, initialize, addMessage, setIsTyping } = useOnboardingChatStore();\n  \n  const [currentStep, setCurrentStep] = useState(0);\n  const [collectedData, setCollectedData] = useState<Record<string, any>>({});\n  const [assistantPersonality, setAssistantPersonality] = useState<'professional' | 'friendly' | 'adaptive'>('adaptive');\n  const [showTextInput, setShowTextInput] = useState(false);\n  const [textInputPrompt, setTextInputPrompt] = useState('');\n  const [textInputValue, setTextInputValue] = useState('');\n  const [pendingStep, setPendingStep] = useState<number | null>(null);\n  const [initialMessageSent, setInitialMessageSent] = useState(false);\n  \n  // AI Conversation State\n  const [conversationId, setConversationId] = useState<string | null>(null);\n  const [sessionId, setSessionId] = useState<string>('');\n  const [aiEnabled, setAiEnabled] = useState(true);\n  \n  const messagesEndRef = useRef<HTMLDivElement>(null);\n\n  const onboardingSteps: OnboardingStep[] = [\n    { \n      id: 'introduction', \n      title: 'Meet Your Assistant', \n      icon: <Heart className=\"w-4 h-4\" />, \n      completed: false,\n      description: 'Getting to know each other'\n    },\n    { \n      id: 'company', \n      title: 'Your Company', \n      icon: <Building2 className=\"w-4 h-4\" />, \n      completed: false,\n      description: 'Tell us about your business'\n    },\n    { \n      id: 'organization', \n      title: 'Your Industry', \n      icon: <Building2 className=\"w-4 h-4\" />, \n      completed: false,\n      description: 'What sector you\\'re in'\n    },\n    { \n      id: 'role', \n      title: 'Your Role', \n      icon: <Briefcase className=\"w-4 h-4\" />, \n      completed: false,\n      description: 'Your position & responsibilities'\n    },\n    { \n      id: 'goals', \n      title: 'Your Goals', \n      icon: <Target className=\"w-4 h-4\" />, \n      completed: false,\n      description: 'Your biggest challenges'\n    },\n    { \n      id: 'working-style', \n      title: 'Working Together', \n      icon: <Users className=\"w-4 h-4\" />, \n      completed: false,\n      description: 'Communication preferences'\n    },\n    { \n      id: 'partnership', \n      title: 'Ready to Start', \n      icon: <TrendingUp className=\"w-4 h-4\" />, \n      completed: false,\n      description: 'Launch your workspace'\n    }\n  ];\n\n  const [steps, setSteps] = useState(onboardingSteps);\n\n  // Auto-scroll to bottom\n  useEffect(() => {\n    messagesEndRef.current?.scrollIntoView({ behavior: 'smooth' });\n  }, [messages]);\n\n  // Initialize chat with executive assistant introduction\n  useEffect(() => {\n    console.log('[OnboardingChat] useEffect for initialization triggered.');\n    if (user && user.profile) {\n      initialize(user as any); // Still might need a proper type guard or mapping\n    }\n  }, [user, initialize]);\n\n  const completeStep = (stepId: string, data?: Record<string, any>) => {\n    setSteps(prev => prev.map(step => \n      step.id === stepId ? { ...step, completed: true } : step\n    ));\n    \n    if (data) {\n      setCollectedData(prev => ({ ...prev, ...data }));\n    }\n  };\n\n  const simulateTyping = async (duration: number = 2000) => {\n    setIsTyping(true);\n    await new Promise(resolve => setTimeout(resolve, duration));\n    setIsTyping(false);\n  };\n\n  // Industry-specific insights and challenges\n  const getIndustryInsights = (industry: string) => {\n    const insights: Record<string, { insight: string; challenges: string; roleQuestions?: string[] }> = {\n      '🏥 Healthcare & Medical': {\n        insight: \"Healthcare is rapidly evolving with digital transformation and regulatory changes.\",\n        challenges: \"I know healthcare faces unique challenges like HIPAA compliance, patient data management, and integrating new technologies with legacy systems. I can help streamline operations while maintaining strict security standards.\"\n      },\n      '🛒 E-commerce & Retail': {\n        insight: \"E-commerce is all about customer experience, inventory optimization, and data-driven decisions.\",\n        challenges: \"Common pain points I see in retail include inventory management, customer acquisition costs, and converting data into actionable insights. I can help automate processes and improve your conversion rates.\"\n      },\n      '💻 Technology & Software': {\n        insight: \"Tech companies need to move fast while maintaining quality and scalability.\",\n        challenges: \"I understand the pressure to ship quickly while managing technical debt, scaling teams, and staying competitive. I can help with project management, data analysis, and strategic planning.\"\n      },\n      '💰 Finance & Banking': {\n        insight: \"Financial services require precision, compliance, and risk management at every step.\",\n        challenges: \"I know finance deals with regulatory compliance, risk assessment, and complex reporting requirements. I can help automate reporting and provide insights while ensuring accuracy.\"\n      },\n      '📈 Marketing & Advertising': {\n        insight: \"Marketing success depends on understanding your audience and measuring what works.\",\n        challenges: \"Attribution, ROI measurement, and campaign optimization are constant challenges. I can help analyze performance data and identify opportunities for growth.\"\n      },\n      '🏭 Manufacturing': {\n        insight: \"Manufacturing requires precise coordination between supply chain, production, and quality control.\",\n        challenges: \"Supply chain disruptions and operational efficiency are key concerns. I can help optimize workflows and provide visibility into your operations.\"\n      },\n      '🎓 Education': {\n        insight: \"Education is embracing digital tools to improve learning outcomes and operational efficiency.\",\n        challenges: \"Student engagement, administrative efficiency, and data management are ongoing challenges. I can help streamline operations and improve insights.\"\n      },\n      '🏗️ Construction & Real Estate': {\n        insight: \"Construction and real estate rely on project management, timeline coordination, and financial oversight.\",\n        challenges: \"Project delays, cost overruns, and coordination between teams are common issues. I can help with project tracking and financial management.\"\n      },\n      '🍕 Food & Restaurant': {\n        insight: \"Food service businesses need to balance quality, efficiency, and customer satisfaction.\",\n        challenges: \"Inventory management, staff scheduling, and customer experience optimization are key areas. I can help with operations and customer insights.\"\n      },\n      '⚖️ Legal & Professional Services': {\n        insight: \"Professional services depend on time management, client communication, and expertise delivery.\",\n        challenges: \"Billable hour tracking, client management, and document organization are crucial. I can help streamline administrative tasks and improve client insights.\"\n      }\n    };\n\n    return insights[industry] || {\n      insight: \"Every industry has its unique opportunities and challenges.\",\n      challenges: \"I'm here to learn about your specific business needs and help you optimize your operations, regardless of your sector.\"\n    };\n  };\n\n  // Role-specific insights based on industry context\n  const getRoleInsights = (role: string, industry: string) => {\n    const roleInsights: Record<string, { insight: string; focus: string }> = {\n      '👑 CEO / Founder': {\n        insight: \"As a CEO/Founder, you're focused on strategic growth, team scaling, and operational efficiency.\",\n        focus: `In ${industry?.replace(/🏥|🛒|💻|💰|📈|🏭|🎓|🏗️|🍕|⚖️/g, '').trim() || 'your industry'}, I can help you with high-level analytics, growth metrics, strategic planning, and executive reporting to make data-driven decisions faster.`\n      },\n      '⚙️ Operations Manager': {\n        insight: \"Operations managers are the backbone of efficiency - you turn strategy into execution.\",\n        focus: \"I can help you optimize workflows, automate repetitive processes, track KPIs, and identify bottlenecks before they impact your team's productivity.\"\n      },\n      '💼 Sales Professional': {\n        insight: \"Sales success comes from understanding your pipeline, knowing your customers, and timing your outreach perfectly.\",\n        focus: \"I can help you track lead quality, analyze conversion rates, automate follow-ups, and identify your highest-value prospects to close more deals.\"\n      },\n      '📊 Marketing Manager': {\n        insight: \"Marketing is all about reaching the right audience with the right message at the right time.\",\n        focus: \"I can help you analyze campaign performance, optimize ad spend, track customer journeys, and identify which channels drive your best customers.\"\n      },\n      '💳 Finance Professional': {\n        insight: \"Finance requires precision, forecasting accuracy, and clear visibility into business performance.\",\n        focus: \"I can help automate financial reporting, track budget variance, analyze cash flow patterns, and provide real-time insights for strategic planning.\"\n      },\n      '👥 HR Manager': {\n        insight: \"HR is evolving from administration to strategic talent management and employee experience.\",\n        focus: \"I can help you analyze employee data, track engagement metrics, streamline hiring processes, and identify trends that impact retention.\"\n      },\n      '🔧 Project Manager': {\n        insight: \"Project success depends on coordination, timeline management, and clear communication across teams.\",\n        focus: \"I can help you track project progress, identify risks early, optimize resource allocation, and keep stakeholders informed with automated updates.\"\n      },\n      '📈 Business Analyst': {\n        insight: \"Business analysts turn data into actionable insights that drive strategic decisions.\",\n        focus: \"I can help you automate data collection, create interactive dashboards, perform advanced analytics, and present findings in compelling, executive-ready formats.\"\n      },\n      '🎯 Product Manager': {\n        insight: \"Product management requires balancing user needs, technical constraints, and business objectives.\",\n        focus: \"I can help you analyze user behavior, track feature adoption, prioritize roadmaps based on data, and measure product-market fit metrics.\"\n      }\n    };\n\n    return roleInsights[role] || {\n      insight: \"Every role has unique challenges and opportunities for optimization.\",\n      focus: \"I can help you identify areas where AI and automation can make your work more efficient and impactful.\"\n    };\n  };\n\n  const getChallengeInsights = (challenge: string, role: string, industry: string) => {\n    const challengeData = {\n      'scaling': {\n        understanding: 'I understand you\\'re focused on scaling and growth challenges.',\n        solution: 'I can help you identify bottlenecks, optimize processes, and create scalable systems.',\n        nextSteps: 'Let\\'s start by analyzing your current operations and identifying automation opportunities.'\n      },\n      'efficiency': {\n        understanding: 'Manual processes can really slow down productivity.',\n        solution: 'I can help automate repetitive tasks, streamline workflows, and optimize resource allocation.',\n        nextSteps: 'We\\'ll map your current processes and identify the highest-impact automation opportunities.'\n      },\n      'data': {\n        understanding: 'Data management and getting actionable insights is crucial.',\n        solution: 'I can help centralize your data, create automated reports, and provide real-time business intelligence.',\n        nextSteps: 'Let\\'s connect your data sources and set up intelligent dashboards for your role.'\n      },\n      'communication': {\n        understanding: 'Team coordination and communication can make or break productivity.',\n        solution: 'I can help streamline team communications, automate status updates, and improve collaboration.',\n        nextSteps: 'We\\'ll integrate your communication tools and set up smart notification systems.'\n      },\n      'customer': {\n        understanding: 'Customer experience and retention are key to sustainable growth.',\n        solution: 'I can help track customer interactions, automate follow-ups, and identify retention opportunities.',\n        nextSteps: 'Let\\'s analyze your customer journey and set up proactive engagement systems.'\n      },\n      'finance': {\n        understanding: 'Cash flow and financial management require constant attention.',\n        solution: 'I can help track expenses, forecast cash flow, and identify cost optimization opportunities.',\n        nextSteps: 'We\\'ll connect your financial tools and set up automated reporting and alerts.'\n      },\n      'time': {\n        understanding: 'Time management and productivity are always challenging.',\n        solution: 'I can help prioritize tasks, automate scheduling, and eliminate time-wasting activities.',\n        nextSteps: 'Let\\'s analyze how you spend time and identify the biggest productivity wins.'\n      },\n      'integration': {\n        understanding: 'Managing multiple tools and integrations can be overwhelming.',\n        solution: 'I can help centralize your tools, automate data sync, and create unified workflows.',\n        nextSteps: 'We\\'ll map your current tool stack and create seamless integrations.'\n      },\n      'sales': {\n        understanding: 'Lead generation and sales optimization are critical for growth.',\n        solution: 'I can help track leads, automate follow-ups, and optimize your sales processes.',\n        nextSteps: 'Let\\'s analyze your sales funnel and identify conversion opportunities.'\n      }\n    };\n\n    const challenge_key = challenge.toLowerCase().includes('scaling') ? 'scaling' :\n                         challenge.toLowerCase().includes('manual') || challenge.toLowerCase().includes('efficiency') ? 'efficiency' :\n                         challenge.toLowerCase().includes('data') ? 'data' :\n                         challenge.toLowerCase().includes('communication') || challenge.toLowerCase().includes('team') ? 'communication' :\n                         challenge.toLowerCase().includes('customer') ? 'customer' :\n                         challenge.toLowerCase().includes('cash') || challenge.toLowerCase().includes('financial') ? 'finance' :\n                         challenge.toLowerCase().includes('time') || challenge.toLowerCase().includes('productivity') ? 'time' :\n                         challenge.toLowerCase().includes('integration') || challenge.toLowerCase().includes('tool') ? 'integration' :\n                         challenge.toLowerCase().includes('lead') || challenge.toLowerCase().includes('sales') ? 'sales' : 'efficiency';\n\n    return challengeData[challenge_key] || challengeData['efficiency'];\n  };\n\n  const getNextQuestion = async (step: number, userResponse?: string) => {\n    await simulateTyping();\n\n    const questions = [\n      // Step 0: Introduction - already handled in useEffect\n      null,\n      \n      // Step 1: Company Name Collection\n      () => {\n        completeStep('introduction');\n        setShowTextInput(true);\n        setTextInputPrompt('What\\'s the name of your company?');\n        setPendingStep(1);\n        return `Excellent! I'm excited to work with you. 🚀\n\nFirst, let me get to know your business better. What's the name of your company?`;\n      },\n      \n      // Step 2: Industry Selection  \n      (response: string) => {\n        const companyData = { companyName: response };\n        completeStep('company', companyData);\n        return `Great to meet you, ${response}! \n\nNow, what industry best describes your business? This helps me understand your unique challenges and opportunities.`;\n      },\n      \n      // Step 3: Role Selection\n      (response: string) => {\n        const businessData = { industry: response };\n        completeStep('organization', businessData);\n        \n        // Check if they selected \"Other\" and need custom input\n        if (response.includes('Other Industry')) {\n          setShowTextInput(true);\n          setTextInputPrompt('What industry is your business in?');\n          setPendingStep(3);\n          return `Perfect! \n\nWhat specific industry is your business in?`;\n        }\n        \n        // Provide industry-specific insights\n        const industryInsights = getIndustryInsights(response);\n        \n        return `Excellent! ${industryInsights.insight}\n\n${industryInsights.challenges}\n\nNow, what's your role at ${collectedData.companyName}? This helps me focus on what matters most to your day-to-day work:`;\n      },\n      \n      // Step 4: Business Goals\n      (response: string) => {\n        const roleData = { role: response };\n        completeStep('role', roleData);\n        \n        // Check if they selected \"Other\" and need custom input\n        if (response.includes('Other Role')) {\n          setShowTextInput(true);\n          setTextInputPrompt('What\\'s your specific role or title?');\n          setPendingStep(4);\n          return `Great! \n\nWhat's your specific role or title at ${collectedData.companyName || 'your company'}?`;\n        }\n        \n        // Provide role-specific insights\n        const roleInsights = getRoleInsights(response, collectedData.industry);\n        \n        return `Perfect! ${roleInsights.insight}\n\n${roleInsights.focus}\n\nWhat's your biggest challenge in this role right now? Choose what resonates most with your day-to-day experience:`;\n      },\n      \n      // Step 5: Communication Preferences\n      (response: string) => {\n        const goalsData = { primaryChallenge: response };\n        completeStep('goals', goalsData);\n        \n        // Check if they selected \"Other\" and need custom input\n        if (response.includes('Other Challenge')) {\n          setShowTextInput(true);\n          setTextInputPrompt('What\\'s your biggest business challenge?');\n          setPendingStep(5);\n          return `I'd love to help with that! \n\nWhat's your biggest business challenge or goal right now?`;\n        }\n        \n        // Provide challenge-specific solutions\n        const challengeInsights = getChallengeInsights(response, collectedData.role, collectedData.industry);\n        \n        return `${challengeInsights.understanding} 🎯\n\n${challengeInsights.solution}\n\n${challengeInsights.nextSteps}\n\nOne more thing - how would you prefer I communicate with you?`;\n      },\n      \n      // Step 6: Setup Complete\n      (response: string) => {\n        const workingStyleData = { communicationStyle: response };\n        completeStep('working-style', workingStyleData);\n        \n        return `Perfect! I've got everything I need to be your ideal AI assistant.\n\n**🎉 Your Nexus workspace is now personalized for:**\n• **Company:** ${collectedData.companyName || 'Your business'}\n• **Industry:** ${collectedData.industry || 'Your sector'}\n• **Role:** ${collectedData.role || 'Your position'}  \n• **Focus:** ${collectedData.primaryChallenge || 'Your main goals'}\n• **Style:** ${response}\n\nI'm ready to help you streamline operations, make data-driven decisions, and achieve your business goals faster than ever before.\n\nReady to dive in?`;\n      },\n      \n      // Step 7: Welcome & Complete\n      (response: string) => {\n        completeStep('partnership');\n        \n        return `🚀 **Welcome to Nexus, ${collectedData.companyName}!**\n\nYour AI-powered business operating system is ready. I've already started setting up:\n\n✅ **Smart dashboards** tailored to your role\n✅ **Industry-specific workflows** for ${collectedData.industry}\n✅ **Automated processes** to save you time\n✅ **Communication preferences** that match your style\n\n**What's Next:**\n1. **Take a quick tour** of your personalized workspace\n2. **Connect your tools** (CRM, email, project management)\n3. **Get your first AI insights** about your business\n4. **Start achieving your goals** with AI assistance\n\nReady to transform how you work?`;\n      }\n    ];\n\n    const questionFn = questions[step];\n    if (questionFn) {\n      const content = questionFn(userResponse || '');\n      const isComplete = step === 6;\n      \n      // Define structured options for each step\n      const getStepSuggestions = (stepNumber: number) => {\n        switch (stepNumber) {\n          case 1: // Company Name - no suggestions, text input\n            return [];\n          case 2: // Industry\n            return [\n              '🏥 Healthcare & Medical',\n              '🛒 E-commerce & Retail', \n              '💻 Technology & Software',\n              '💰 Finance & Banking',\n              '📈 Marketing & Advertising',\n              '🏭 Manufacturing',\n              '🎓 Education',\n              '🏗️ Construction & Real Estate',\n              '🍕 Food & Restaurant',\n              '⚖️ Legal & Professional Services',\n              '✨ Other Industry'\n            ];\n          case 3: // Role\n            return [\n              '👑 CEO / Founder',\n              '⚙️ Operations Manager',\n              '💼 Sales Professional', \n              '📊 Marketing Manager',\n              '💳 Finance Professional',\n              '👥 HR Manager',\n              '🔧 Project Manager',\n              '📈 Business Analyst',\n              '🎯 Product Manager',\n              '👤 Other Role'\n            ];\n          case 4: // Challenges\n            return [\n              '🚀 Scaling & Growth Issues',\n              '⚡ Manual Processes & Inefficiency',\n              '📊 Data Management & Insights',\n              '👥 Team Communication & Coordination',\n              '🎯 Customer Experience & Retention',\n              '💰 Cash Flow & Financial Management',\n              '⏰ Time Management & Productivity',\n              '🔗 Integration & Tool Management',\n              '📈 Lead Generation & Sales',\n              '🎪 Other Challenge'\n            ];\n          case 5: // Communication Style\n            return [\n              '⚡ Quick & Direct Updates',\n              '📝 Detailed Explanations',\n              '🎯 Action-Focused Summaries',\n              '💬 Conversational & Friendly',\n              '📊 Data-Driven Reports',\n              '🔄 Regular Check-ins'\n            ];\n          case 6: // Ready to start\n            return [\n              '🚀 Yes, let\\'s get started!',\n              '📊 Show me the dashboard',\n              '🔗 Connect my tools first'\n            ];\n          case 7: // Final step\n            return [\n              '🎯 Start the tour',\n              '🚀 Go to workspace',\n              '🔗 Connect integrations'\n            ];\n          default:\n            return ['Continue'];\n        }\n      };\n      \n      addMessage({\n        role: 'assistant',\n        content,\n        type: isComplete ? 'relationship-building' : 'message',\n        metadata: {\n          step: onboardingSteps[step]?.id,\n          emotion: isComplete ? 'celebratory' : step === 1 ? 'excited' : 'supportive',\n          suggestions: getStepSuggestions(step)\n        }\n      });\n      \n      if (isComplete) {\n        setTimeout(() => {\n          completeStep('partnership');\n          // Create a seamless transition to the main Executive Assistant\n          setTimeout(() => {\n            completeOnboarding();\n          }, 3000);\n        }, 1000);\n      }\n    }\n  };\n\n  // Helper functions to analyze responses and extract data\n  const analyzeBusinessResponse = (response: string) => {\n    const words = response.toLowerCase();\n    let industry = 'general';\n    let companyName = '';\n    \n    // Extract company name (basic heuristic)\n    const sentences = response.split('.');\n    for (const sentence of sentences) {\n      const nameMatch = sentence.match(/(?:company|business|startup|firm|corp|inc|ltd|llc)?\\s*(?:is|called|named)?\\s*([A-Za-z][A-Za-z0-9\\s&.,-]{1,30})/i);\n      if (nameMatch) {\n        companyName = nameMatch[1].trim();\n        break;\n      }\n    }\n    \n    // Detect industry\n    if (words.includes('health') || words.includes('medical') || words.includes('hospital')) {\n      industry = 'healthcare';\n    } else if (words.includes('ecommerce') || words.includes('retail') || words.includes('shop')) {\n      industry = 'ecommerce';\n    } else if (words.includes('software') || words.includes('tech') || words.includes('saas')) {\n      industry = 'technology';\n    } else if (words.includes('financial') || words.includes('finance') || words.includes('bank')) {\n      industry = 'finance';\n    } else if (words.includes('marketing') || words.includes('agency') || words.includes('advertising')) {\n      industry = 'marketing';\n    }\n    \n    return { companyName, industry, fullResponse: response };\n  };\n\n  const analyzeRoleResponse = (response: string) => {\n    const words = response.toLowerCase();\n    let roleType = 'general';\n    let roleTitle = '';\n    \n    if (words.includes('ceo') || words.includes('founder') || words.includes('owner')) {\n      roleType = 'executive';\n      roleTitle = 'CEO/Founder';\n    } else if (words.includes('operations') || words.includes('ops')) {\n      roleType = 'operations';\n      roleTitle = 'Operations Manager';\n    } else if (words.includes('sales') || words.includes('revenue')) {\n      roleType = 'sales';\n      roleTitle = 'Sales Professional';\n    } else if (words.includes('marketing') || words.includes('growth')) {\n      roleType = 'marketing';\n      roleTitle = 'Marketing Professional';\n    } else if (words.includes('finance') || words.includes('accounting')) {\n      roleType = 'finance';\n      roleTitle = 'Finance Professional';\n    }\n    \n    return { roleType, roleTitle, fullResponse: response };\n  };\n\n  const analyzeGoalsResponse = (response: string) => {\n    const words = response.toLowerCase();\n    const goals = [];\n    \n    if (words.includes('scale') || words.includes('grow') || words.includes('expand')) {\n      goals.push('growth');\n    }\n    if (words.includes('automat') || words.includes('efficient') || words.includes('manual')) {\n      goals.push('automation');\n    }\n    if (words.includes('data') || words.includes('insight') || words.includes('report')) {\n      goals.push('analytics');\n    }\n    if (words.includes('customer') || words.includes('service') || words.includes('experience')) {\n      goals.push('customer-experience');\n    }\n    if (words.includes('team') || words.includes('communication') || words.includes('coordination')) {\n      goals.push('collaboration');\n    }\n    \n    return { primaryGoals: goals, fullResponse: response };\n  };\n\n  const analyzeWorkingStyleResponse = (response: string) => {\n    const words = response.toLowerCase();\n    let communicationStyle = 'balanced';\n    let proactivityLevel = 'moderate';\n    let detailPreference = 'summary';\n    \n    if (words.includes('quick') || words.includes('brief') || words.includes('bullet')) {\n      communicationStyle = 'concise';\n      detailPreference = 'summary';\n    } else if (words.includes('detailed') || words.includes('thorough') || words.includes('comprehensive')) {\n      communicationStyle = 'detailed';\n      detailPreference = 'comprehensive';\n    }\n    \n    if (words.includes('proactive') || words.includes('suggest') || words.includes('recommend')) {\n      proactivityLevel = 'high';\n    } else if (words.includes('wait') || words.includes('ask') || words.includes('reactive')) {\n      proactivityLevel = 'low';\n    }\n    \n    return { communicationStyle, proactivityLevel, detailPreference, fullResponse: response };\n  };\n\n  const handleSuggestionClick = async (suggestion: string) => {\n    // Add user message\n    addMessage({\n      role: 'user',\n      content: suggestion,\n      type: 'message'\n    });\n\n    // Move to next step and ask next question\n    const nextStep = currentStep + 1;\n    setCurrentStep(nextStep);\n    await getNextQuestion(nextStep, suggestion);\n  };\n\n  const handleTextSubmit = async () => {\n    if (!textInputValue.trim()) return;\n\n    // Add user message\n    addMessage({\n      role: 'user',\n      content: textInputValue,\n      type: 'message'\n    });\n\n    const response = textInputValue;\n    setTextInputValue('');\n    setShowTextInput(false);\n\n    // Move to next step\n    const nextStep = pendingStep ? pendingStep + 1 : currentStep + 1;\n    setCurrentStep(nextStep);\n    setPendingStep(null);\n    await getNextQuestion(nextStep, response);\n  };\n\n  const handleKeyDown = (e: React.KeyboardEvent) => {\n    if (e.key === 'Enter' && !e.shiftKey) {\n      e.preventDefault();\n      handleTextSubmit();\n    }\n  };\n\n  return (\n    <div className=\"h-full flex flex-col bg-background\">\n      {/* Progress Steps - Executive Assistant Meeting Flow */}\n      <div className=\"border-b border-border bg-gradient-to-r from-purple-50 to-blue-50 dark:from-purple-900/20 dark:to-blue-900/20 p-2 sm:p-4 flex-shrink-0\">\n        <div className=\"max-w-6xl mx-auto\">\n          <div className=\"flex items-center justify-between mb-2\">\n            <h3 className=\"text-sm font-medium text-foreground truncate\">Meeting Your Executive Assistant</h3>\n            <span className=\"text-xs text-muted-foreground whitespace-nowrap ml-2\">\n              Step {currentStep + 1} of {steps.length}\n            </span>\n          </div>\n        \n        {/* Desktop: Horizontal progress bar */}\n        <div className=\"hidden md:flex items-center gap-2 overflow-x-auto scrollbar-hide\">\n          {steps.map((step, index) => (\n            <div key={step.id} className=\"flex items-center gap-2 flex-shrink-0\">\n              <div className={`flex items-center gap-2 px-4 py-2 rounded-full text-xs font-medium transition-all duration-300 ${\n                step.completed \n                  ? 'bg-success/20 text-success border border-success/30 shadow-sm'\n                  : index === currentStep\n                  ? 'bg-primary/20 text-primary border border-primary/30 shadow-sm scale-105'\n                  : 'bg-background/60 text-muted-foreground border border-border'\n              }`}>\n                {step.completed ? <CheckCircle className=\"w-3 h-3\" /> : step.icon}\n                <div className=\"text-left\">\n                  <div className=\"font-medium\">{step.title}</div>\n                  <div className=\"text-xs opacity-70 hidden lg:block\">{step.description}</div>\n                </div>\n              </div>\n              {index < steps.length - 1 && (\n                <ArrowRight className=\"w-3 h-3 text-muted-foreground\" />\n              )}\n            </div>\n          ))}\n        </div>\n        \n        {/* Mobile: Compact progress indicator */}\n        <div className=\"md:hidden\">\n          <div className=\"flex items-center justify-between mb-1\">\n            <div className=\"flex items-center gap-2\">\n              {steps[currentStep]?.completed ? (\n                <CheckCircle className=\"w-4 h-4 text-success\" />\n              ) : (\n                steps[currentStep]?.icon\n              )}\n              <span className=\"text-sm font-medium text-foreground\">\n                {steps[currentStep]?.title}\n              </span>\n            </div>\n          </div>\n          <div className=\"w-full bg-muted rounded-full h-1.5\">\n            <div \n              className=\"bg-primary h-1.5 rounded-full transition-all duration-300\"\n              style={{ width: `${((currentStep + 1) / steps.length) * 100}%` }}\n            />\n          </div>\n        </div>\n        </div>\n      </div>\n\n      {/* Messages - Executive Assistant Conversation */}\n      <div className=\"flex-1 overflow-y-auto p-4 sm:p-4 min-h-0\">\n        <div className=\"max-w-4xl mx-auto space-y-4 sm:space-y-4\">\n        <AnimatePresence>\n          {messages.map((message) => (\n            <motion.div\n              key={message.id}\n              initial={{ opacity: 0, y: 20 }}\n              animate={{ opacity: 1, y: 0 }}\n              className={`flex gap-2 sm:gap-4 ${\n                message.role === 'user' ? 'flex-row-reverse' : 'flex-row'\n              }`}\n            >\n              <div className={`w-8 h-8 sm:w-10 sm:h-10 rounded-full flex items-center justify-center flex-shrink-0 ${\n                message.role === 'user' \n                  ? 'bg-primary text-primary-foreground' \n                  : 'bg-gradient-to-br from-purple-500 to-blue-500 text-primary-foreground shadow-lg'\n              }`}>\n                {message.role === 'user' ? (\n                  <User className=\"w-4 h-4 sm:w-5 sm:h-5\" />\n                ) : (\n                  <Bot className=\"w-4 h-4 sm:w-5 sm:h-5\" />\n                )}\n              </div>\n              \n              <div className={`flex-1 max-w-[85%] sm:max-w-[80%] md:max-w-[75%] ${\n                message.role === 'user' ? 'text-right' : 'text-left'\n              }`}>\n                {message.role === 'assistant' && (\n                  <div className=\"text-xs font-medium text-muted-foreground mb-1\">\n                    Nex - Executive Assistant\n                  </div>\n                )}\n                \n                <div className={`rounded-xl p-4 sm:p-4 ${\n                  message.role === 'user'\n                    ? 'bg-primary text-primary-foreground ml-auto shadow-md'\n                    : 'bg-card border border-border shadow-sm'\n                }`}>\n                  <div className=\"whitespace-pre-wrap text-sm leading-relaxed\">\n                    {message.content}\n                  </div>\n                </div>\n                \n                {/* Interactive Suggestions */}\n                {message.role === 'assistant' && message.metadata?.suggestions && (\n                  <div className=\"grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 gap-2 mt-3 sm:mt-4\">\n                    {message.metadata.suggestions.map((suggestion, idx) => (\n                      <button\n                        key={idx}\n                        onClick={() => handleSuggestionClick(suggestion)}\n                        disabled={isTyping}\n                        className=\"text-left text-sm px-4 py-3 bg-background border border-border rounded-lg hover:bg-primary/5 hover:border-primary/30 transition-all duration-200 hover:shadow-md disabled:opacity-50 disabled:cursor-not-allowed group\"\n                      >\n                        <span className=\"group-hover:text-primary transition-colors\">\n                          {suggestion}\n                        </span>\n                      </button>\n                    ))}\n                  </div>\n                )}\n                \n                <div className=\"text-xs text-muted-foreground mt-1.5 sm:mt-2\">\n                  {message.timestamp.toLocaleTimeString([], { \n                    hour: '2-digit', \n                    minute: '2-digit' \n                  })}\n                </div>\n              </div>\n            </motion.div>\n          ))}\n        </AnimatePresence>\n\n                    {/* Typing indicator - Nex is thinking */}\n        {isTyping && (\n          <motion.div\n            initial={{ opacity: 0, y: 20 }}\n            animate={{ opacity: 1, y: 0 }}\n            className=\"flex gap-2 sm:gap-4\"\n          >\n            <div className=\"w-8 h-8 sm:w-10 sm:h-10 rounded-full bg-gradient-to-br from-purple-500 to-blue-500 text-primary-foreground flex items-center justify-center shadow-lg\">\n              <Bot className=\"w-4 h-4 sm:w-5 sm:h-5\" />\n            </div>\n            <div className=\"bg-card border border-border rounded-xl p-4 sm:p-4 shadow-sm\">\n              <div className=\"text-xs font-medium text-muted-foreground mb-2\">\n                Nex is thinking...\n              </div>\n              <div className=\"flex items-center gap-1\">\n                <div className=\"w-2 h-2 bg-primary rounded-full animate-bounce\" />\n                <div className=\"w-2 h-2 bg-primary rounded-full animate-bounce\" style={{ animationDelay: '0.1s' }} />\n                <div className=\"w-2 h-2 bg-primary rounded-full animate-bounce\" style={{ animationDelay: '0.2s' }} />\n              </div>\n            </div>\n          </motion.div>\n        )}\n\n        <div ref={messagesEndRef} />\n        {/* Extra padding to ensure last message is visible above input */}\n        <div className=\"h-4\"></div>\n        </div>\n      </div>\n\n      {/* Input Area - Dynamic based on step */}\n      <div className=\"border-t border-border bg-muted/30 p-4 sm:p-4 safe-area-inset-bottom flex-shrink-0\">\n        <div className=\"max-w-6xl mx-auto\">\n          {showTextInput ? (\n            // Text Input for specific information\n            <div className=\"flex gap-2 sm:gap-4\">\n              <div className=\"flex-1 relative\">\n                <textarea\n                  value={textInputValue}\n                  onChange={(e) => setTextInputValue(e.target.value)}\n                  onKeyDown={handleKeyDown}\n                  placeholder={textInputPrompt}\n                  disabled={isTyping}\n                  className=\"w-full resize-none border border-border rounded-xl px-4 sm:px-4 py-2.5 sm:py-3 text-sm bg-background focus:outline-none focus:ring-2 focus:ring-primary focus:border-primary min-h-[44px] sm:min-h-[52px] max-h-32 transition-all duration-200\"\n                  rows={1}\n                />\n              </div>\n              <button\n                onClick={handleTextSubmit}\n                disabled={!textInputValue.trim() || isTyping}\n                className=\"px-4 sm:px-4 py-2.5 sm:py-3 bg-primary text-primary-foreground rounded-xl hover:bg-primary/90 disabled:opacity-50 disabled:cursor-not-allowed transition-all duration-200 shadow-sm hover:shadow-md flex-shrink-0\"\n              >\n                <Send className=\"w-4 h-4\" />\n              </button>\n            </div>\n          ) : (\n            // Instructions for clickable options\n            <div className=\"text-center\">\n              <div className=\"text-xs text-muted-foreground\">\n                Click an option above to continue your conversation with Nex\n              </div>\n            </div>\n          )}\n        </div>\n      </div>\n    </div>\n  );\n}; ","usedDeprecatedRules":[]},{"filePath":"/home/vonj/Github/Nexus/src/components/onboarding/OnboardingChatAI.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'Heart' is defined but never used.","line":14,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":14,"endColumn":8},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'Briefcase' is defined but never used.","line":16,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":16,"endColumn":12},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'Users' is defined but never used.","line":18,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":18,"endColumn":8},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'OnboardingMessage' is defined but never used.","line":63,"column":11,"nodeType":null,"messageId":"unusedVar","endLine":63,"endColumn":28},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":71,"column":36,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":71,"endColumn":39,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1687,1690],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1687,1690],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":75,"column":18,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":75,"endColumn":21,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1845,1848],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1845,1848],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'initialize' is assigned a value but never used.","line":91,"column":31,"nodeType":null,"messageId":"unusedVar","endLine":91,"endColumn":41},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'generateUniqueMessageId' is assigned a value but never used.","line":120,"column":9,"nodeType":null,"messageId":"unusedVar","endLine":120,"endColumn":32},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'getNextEmptyFields' is assigned a value but never used.","line":132,"column":9,"nodeType":null,"messageId":"unusedVar","endLine":132,"endColumn":27},{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has a missing dependency: 'currentStep'. Either include it or remove the dependency array.","line":265,"column":6,"nodeType":"ArrayExpression","endLine":265,"endColumn":13,"suggestions":[{"desc":"Update the dependencies array to be: [currentStep, steps]","fix":{"range":[8629,8636],"text":"[currentStep, steps]"}}]},{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has missing dependencies: 'addMessage', 'isInitialized', 'sendInitialGreeting', and 'user'. Either include them or remove the dependency array.","line":310,"column":6,"nodeType":"ArrayExpression","endLine":310,"endColumn":16,"suggestions":[{"desc":"Update the dependencies array to be: [addMessage, isInitialized, sendInitialGreeting, user, user.id]","fix":{"range":[9954,9964],"text":"[addMessage, isInitialized, sendInitialGreeting, user, user.id]"}}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'convId' is defined but never used.","line":313,"column":38,"nodeType":null,"messageId":"unusedVar","endLine":313,"endColumn":44},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'sessId' is defined but never used.","line":313,"column":54,"nodeType":null,"messageId":"unusedVar","endLine":313,"endColumn":60},{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has a missing dependency: 'checkOnboardingCompletion'. Either include it or remove the dependency array.","line":564,"column":6,"nodeType":"ArrayExpression","endLine":564,"endColumn":32,"suggestions":[{"desc":"Update the dependencies array to be: [userProfile, currentStep, checkOnboardingCompletion]","fix":{"range":[19277,19303],"text":"[userProfile, currentStep, checkOnboardingCompletion]"}}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":14,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\n * OnboardingChatAI.tsx\n * AI-Powered Executive Assistant Meeting\n * Conversational onboarding with REAL AI instead of predefined responses\n */\n\nimport React, { useState, useEffect, useRef } from 'react';\nimport { \n  Send, \n  Bot, \n  User, \n  CheckCircle,\n  ArrowRight,\n  Heart,\n  Building2,\n  Briefcase,\n  Target,\n  Users,\n  TrendingUp,\n  Zap\n} from 'lucide-react';\nimport { motion, AnimatePresence } from 'framer-motion';\nimport { useAuth } from '@/contexts/AuthContext';\nimport { useOnboardingChatStore } from '@/lib/stores/onboardingChatStore';\nimport { chatHistory } from '../../lib/core/supabase';\nimport { upsertOnboardingProfile } from '@/lib/services/profileService';\n\n// Define a structured user profile for onboarding\nexport interface UserOnboardingProfile {\n  company: {\n    name?: string;\n    domain?: string;\n    industry?: string;\n    size?: string;\n    description?: string;\n  };\n  user: {\n    role?: string;\n    responsibilities?: string;\n    experience?: string;\n    team?: string;\n  };\n  goals: {\n    businessChallenges?: string;\n    shortTerm?: string;\n    longTerm?: string;\n    successMetrics?: string;\n  };\n  preferences: {\n    communicationStyle?: string;\n    toolPreferences?: string;\n    workingHours?: string;\n  };\n  // Tracks which profile sections have been fully completed\n  completedSections: {\n    company: boolean;\n    user: boolean;\n    goals: boolean;\n    preferences: boolean;\n  };\n}\n\ninterface OnboardingMessage {\n  id: string;\n  role: 'assistant' | 'user';\n  content: string;\n  timestamp: Date;\n  type: 'message' | 'introduction' | 'data-collected' | 'relationship-building';\n  metadata?: {\n    step?: string;\n    dataCollected?: Record<string, any>;\n    suggestions?: string[];\n    emotion?: 'excited' | 'thoughtful' | 'supportive' | 'celebratory' | 'friendly';\n    toolUsed?: string;\n    toolResult?: any;\n    profileUpdates?: Partial<UserOnboardingProfile>;\n  };\n}\n\ninterface OnboardingStep {\n  id: string;\n  title: string;\n  icon: React.ReactNode;\n  completed: boolean;\n  description: string;\n  requiredProfileFields: (keyof UserOnboardingProfile['completedSections'])[];\n}\n\nexport const OnboardingChatAI: React.FC = () => {\n  const { user, completeOnboarding } = useAuth();\n  const { messages, isTyping, initialize, addMessage, setIsTyping } = useOnboardingChatStore();\n  \n  // UI State\n  const [currentStep, setCurrentStep] = useState(0);\n  const [userInput, setUserInput] = useState('');\n  \n  // Structured user profile instead of generic collectedData\n  const [userProfile, setUserProfile] = useState<UserOnboardingProfile>({\n    company: {},\n    user: {},\n    goals: {},\n    preferences: {},\n    completedSections: {\n      company: false,\n      user: false,\n      goals: false,\n      preferences: false\n    }\n  });\n  \n  // AI Conversation State\n  const [conversationId, setConversationId] = useState<string | null>(null);\n  const [sessionId, setSessionId] = useState<string>('');\n  const [isInitialized, setIsInitialized] = useState(false);\n  \n  const messagesEndRef = useRef<HTMLDivElement>(null);\n  const messageIdCounterRef = useRef<number>(0);\n\n  // Generate unique message ID even for rapid additions\n  const generateUniqueMessageId = (): string => {\n    messageIdCounterRef.current += 1;\n    return `${Date.now()}-${messageIdCounterRef.current}`;\n  };\n\n  // --------------------------------------------------\n  // Helper utilities (must be declared before sendAIMessage)\n  // --------------------------------------------------\n\n  /**\n   * Return an array of profile section keys that still need data.\n   */\n  const getNextEmptyFields = (): (keyof UserOnboardingProfile['completedSections'])[] => {\n    return (Object.keys(userProfile.completedSections) as Array<keyof UserOnboardingProfile['completedSections']>)\n      .filter((key) => !userProfile.completedSections[key]);\n  };\n\n  /**\n   * Merge incoming updates from the AI into the existing local profile and re-validate completion status.\n   */\n  const updateUserProfile = (updates: Partial<UserOnboardingProfile>) => {\n    setUserProfile((prev) => {\n      const merged: UserOnboardingProfile = {\n        ...prev,\n        company: { ...prev.company, ...updates.company },\n        user: { ...prev.user, ...updates.user },\n        goals: { ...prev.goals, ...updates.goals },\n        preferences: { ...prev.preferences, ...updates.preferences },\n        completedSections: { ...prev.completedSections },\n      };\n      return checkSectionCompletion(merged);\n    });\n  };\n\n  const onboardingSteps: OnboardingStep[] = [\n    { \n      id: 'quick-start', \n      title: 'Quick Start', \n      icon: <Zap className=\"w-4 h-4\" />, \n      completed: false,\n      description: 'Let\\'s get you set up in 2 minutes',\n      requiredProfileFields: []\n    },\n    { \n      id: 'business-context', \n      title: 'Business Context', \n      icon: <Building2 className=\"w-4 h-4\" />, \n      completed: false,\n      description: 'Company, role, and goals',\n      requiredProfileFields: ['company', 'user']\n    },\n    { \n      id: 'success-metrics', \n      title: 'Success Metrics', \n      icon: <Target className=\"w-4 h-4\" />, \n      completed: false,\n      description: 'Define your success criteria',\n      requiredProfileFields: ['goals']\n    },\n    { \n      id: 'launch', \n      title: 'Launch', \n      icon: <TrendingUp className=\"w-4 h-4\" />, \n      completed: false,\n      description: 'Start achieving your goals',\n      requiredProfileFields: ['company', 'user', 'goals']\n    }\n  ];\n\n  const [steps, setSteps] = useState(onboardingSteps);\n\n  // Auto-scroll to bottom\n  useEffect(() => {\n    messagesEndRef.current?.scrollIntoView({ behavior: 'smooth' });\n  }, [messages]);\n\n  // Check if profile has enough data to consider a section complete (with validation)\n  const checkSectionCompletion = (profile: UserOnboardingProfile): UserOnboardingProfile => {\n    const updatedCompletedSections = { ...profile.completedSections };\n    \n    // Company section validation\n    const companyName = profile.company.name?.trim() || '';\n    const companyIndustry = profile.company.industry?.trim() || '';\n    const companyDescription = profile.company.description?.trim() || '';\n    const isCompanyValid = companyName.length >= 2 &&\n      (companyIndustry.length >= 3 || companyDescription.length >= 10);\n    updatedCompletedSections.company = isCompanyValid;\n    \n    // User section validation\n    const userRole = profile.user.role?.trim() || '';\n    const userResponsibilities = profile.user.responsibilities?.trim() || '';\n    const userExperience = profile.user.experience?.trim() || '';\n    const userTeam = profile.user.team?.trim() || '';\n    const isUserValid = userRole.length >= 2 &&\n      (userResponsibilities.length >= 5 || userExperience.length >= 3 || userTeam.length >= 2);\n    updatedCompletedSections.user = isUserValid;\n    \n    // Goals section validation\n    const businessChallenges = profile.goals.businessChallenges?.trim() || '';\n    const shortTermGoals = profile.goals.shortTerm?.trim() || '';\n    const longTermGoals = profile.goals.longTerm?.trim() || '';\n    const successMetrics = profile.goals.successMetrics?.trim() || '';\n    const isGoalsValid = businessChallenges.length >= 5 &&\n      (shortTermGoals.length >= 5 || longTermGoals.length >= 5 || successMetrics.length >= 5);\n    updatedCompletedSections.goals = isGoalsValid;\n    \n    // Preferences section validation\n    const communicationStyle = profile.preferences.communicationStyle?.trim() || '';\n    const isPreferencesValid = communicationStyle.length >= 3;\n    updatedCompletedSections.preferences = isPreferencesValid;\n\n    return {\n      ...profile,\n      completedSections: updatedCompletedSections\n    };\n  };\n\n  // Validate profile when userProfile changes\n  useEffect(() => {\n    const validatedProfile = checkSectionCompletion(userProfile);\n    if (JSON.stringify(validatedProfile) !== JSON.stringify(userProfile)) {\n      setUserProfile(validatedProfile);\n    }\n  }, [userProfile]);\n\n  // Update steps completion when profile sections change\n  useEffect(() => {\n    setSteps(prevSteps =>\n      prevSteps.map(step => ({\n        ...step,\n        completed:\n          step.requiredProfileFields.length === 0 ||\n          step.requiredProfileFields.every(field =>\n            userProfile.completedSections[field]\n          )\n      }))\n    );\n  }, [userProfile.completedSections]);\n\n  // Auto-advance to next incomplete step when steps update\n  useEffect(() => {\n    const nextIncomplete = steps.findIndex(step => !step.completed);\n    if (nextIncomplete !== -1 && nextIncomplete !== currentStep) {\n      setCurrentStep(nextIncomplete);\n    }\n  }, [steps]);\n\n  // Initialize AI conversation\n  useEffect(() => {\n    const initializeAIConversation = async () => {\n      if (!user || isInitialized) return;\n\n      try {\n        // Generate session ID\n        const newSessionId = `onboarding-${user.id}-${Date.now()}`;\n\n        // Create conversation for onboarding\n        const conversation = await chatHistory.createConversation(\n          'Onboarding with Nex',\n          'executive',\n          { \n            page: '/onboarding',\n            user_id: user.id,\n            session_type: 'onboarding',\n            onboarding_step: 0\n          }\n        );\n\n        // Set state synchronously to avoid race conditions\n        setSessionId(newSessionId);\n        setConversationId(conversation.id);\n        setIsInitialized(true);\n\n        // Send initial AI greeting after state is set\n        setTimeout(async () => {\n          await sendInitialGreeting(conversation.id, newSessionId);\n        }, 100);\n\n      } catch (error) {\n        console.error('Failed to initialize AI conversation:', error);\n        // Fallback to display error message\n        addMessage({\n          role: 'assistant',\n          content: \"I'm having trouble connecting right now. Let me try that again...\",\n          type: 'message'\n        });\n      }\n    };\n\n    initializeAIConversation();\n  }, [user?.id]); // Only depend on user.id to prevent re-initialization\n\n  // Update the initial greeting to be more action-oriented and clarify the goal\n  const sendInitialGreeting = async (convId: string, sessId: string) => {\n    if (messages.length > 0) {\n      console.log('Initial greeting already sent, skipping...');\n      return;\n    }\n\n    try {\n      setIsTyping(true);\n\n      const greetingContent = `Hi! I'm your AI Executive Assistant. The goal of our conversation is for me to learn about you and your business so I can provide personalized support.\n\nTo start, I need just 3 key pieces of information:\n1. Your company name and role\n2. Your main business\n3. How you measure success\n\nWhat's your company name and what role do you play?`;\n\n      addMessage({\n        role: 'assistant',\n        content: greetingContent,\n        type: 'introduction',\n        metadata: {\n          step: steps[0]?.id,\n          emotion: 'friendly',\n          suggestions: [\n            '🚀 Start Setup',\n            '⏱️ Quick Setup (2 min)',\n            '🎯 Skip to Goals'\n          ]\n        }\n      });\n\n    } catch (error) {\n      console.error('Error sending initial greeting:', error);\n      addMessage({\n        role: 'assistant',\n        content: \"Hi! I'm your AI Executive Assistant. The goal of our conversation is for me to learn about you and your business so I can provide personalized support. What's your company name and role?\",\n        type: 'introduction'\n      });\n    } finally {\n      setIsTyping(false);\n    }\n  };\n\n  const sendAIMessage = async (userMessage: string) => {\n    // Ensure we have required data\n    if (!conversationId || !sessionId || !user) {\n      console.error('Missing required data for AI message', { conversationId, sessionId, user: !!user });\n      addMessage({\n        role: 'assistant',\n        content: \"I'm still setting up our conversation. Please wait a moment and try again.\",\n        type: 'message'\n      });\n      return;\n    }\n\n    try {\n      setIsTyping(true);\n\n      // Add user message to UI\n      addMessage({\n        role: 'user',\n        content: userMessage,\n        type: 'message'\n      });\n\n      // Create enhanced context for onboarding\n      const currentOnboardingStep = steps[currentStep];\n      \n      // Format the profile for the AI to understand what we already know\n      const profileJson = JSON.stringify(userProfile, null, 2);\n      \n      const onboardingContext = `\nONBOARDING CONTEXT:\n- This is an onboarding conversation with a new user.\n- Current step: ${currentStep + 1} of ${steps.length} (${currentOnboardingStep?.title}: ${currentOnboardingStep?.description})\n- User name: ${user?.profile?.first_name || 'there'}\n- USER PROFILE SO FAR: ${profileJson}\n- Goal: Build rapport, learn about their business, and personalize their workspace.\n\nYou are Nex, their Executive Assistant with access to real business tools and data. Be warm, professional, and genuinely interested.\nAsk thoughtful follow-up questions.\n\nTo help me track what you've learned, please include a structured JSON block at the end of your message like this:\n\\`\\`\\`json\n{\n  \"extracted_info\": {\n    \"company_name\": \"Example Corp\",\n    \"company_industry\": \"Technology\",\n    \"user_role\": \"CTO\",\n    // ... any other fields you've extracted\n  }\n}\n\\`\\`\\`\nOnly include fields that you were able to extract from the user's message.`;\n\n      // Call the new Edge Function directly instead of the removed chat context\n      const response = await fetch('/functions/v1/ai_chat', {\n        method: 'POST',\n        headers: { 'Content-Type': 'application/json' },\n        body: JSON.stringify({\n          message: `${userMessage}\\n\\n${onboardingContext}`,\n          conversationId,\n          metadata: {\n            userId: user.id,\n            sessionId,\n            step: currentOnboardingStep?.id,\n          },\n        }),\n      });\n\n      if (!response.ok) {\n        throw new Error('AI service error');\n      }\n\n      const data = await response.json();\n      const content: string = data.content || '';\n\n      // Extract profile updates from AI response\n      const profileUpdates: Partial<UserOnboardingProfile> = {};\n      \n      // Try to extract JSON from the AI's response\n      const jsonMatch = content.match(/```json\\n([\\s\\S]*?)\\n```/);\n      \n      if (jsonMatch && jsonMatch[1]) {\n        try {\n          const extractedData = JSON.parse(jsonMatch[1]);\n          \n          if (extractedData.extracted_info) {\n            const info = extractedData.extracted_info;\n            \n            // Map the flat response to our structured profile\n            if (info.company_name || info.company_industry || info.company_size || info.company_description) {\n              profileUpdates.company = {\n                name: info.company_name || userProfile.company.name,\n                industry: info.company_industry || userProfile.company.industry,\n                size: info.company_size || userProfile.company.size,\n                description: info.company_description || userProfile.company.description\n              };\n            }\n            \n            if (info.user_role || info.user_responsibilities || info.user_experience || info.user_team) {\n              profileUpdates.user = {\n                role: info.user_role || userProfile.user.role,\n                responsibilities: info.user_responsibilities || userProfile.user.responsibilities,\n                experience: info.user_experience || userProfile.user.experience,\n                team: info.user_team || userProfile.user.team\n              };\n            }\n            \n            if (info.business_challenges || info.short_term_goals || info.long_term_goals || info.success_metrics) {\n              profileUpdates.goals = {\n                businessChallenges: info.business_challenges || userProfile.goals.businessChallenges,\n                shortTerm: info.short_term_goals || userProfile.goals.shortTerm,\n                longTerm: info.long_term_goals || userProfile.goals.longTerm,\n                successMetrics: info.success_metrics || userProfile.goals.successMetrics\n              };\n            }\n            \n            if (info.communication_style || info.tool_preferences || info.working_hours) {\n              profileUpdates.preferences = {\n                communicationStyle: info.communication_style || userProfile.preferences.communicationStyle,\n                toolPreferences: info.tool_preferences || userProfile.preferences.toolPreferences,\n                workingHours: info.working_hours || userProfile.preferences.workingHours\n              };\n            }\n          }\n        } catch (error) {\n          console.error('Error parsing extracted JSON data:', error);\n        }\n      }\n\n      // Remove the JSON block from the displayed message\n      const cleanedContent = content.replace(/```json\\n[\\s\\S]*?\\n```/, '').trim();\n\n      // Add AI response to UI with any profile updates\n      addMessage({\n        role: 'assistant',\n        content: cleanedContent,\n        type: 'message',\n        metadata: {\n          step: currentOnboardingStep?.id,\n          emotion: 'friendly'\n        }\n      });\n      \n      // Apply profile updates directly\n      if (Object.keys(profileUpdates).length > 0) {\n        updateUserProfile(profileUpdates);\n      }\n\n      // Check if we should advance to the final step\n      if (userProfile.completedSections.company && \n          userProfile.completedSections.user && \n          userProfile.completedSections.goals && \n          userProfile.completedSections.preferences &&\n          currentStep < steps.length - 1) {\n        // Advance to the final \"partnership\" step\n        setCurrentStep(steps.length - 1);\n      }\n\n    } catch (error) {\n      console.error('Error sending AI message:', error);\n      addMessage({\n        role: 'assistant',\n        content: \"I apologize, but I'm having trouble processing that right now. Could you try again?\",\n        type: 'message'\n      });\n    } finally {\n      setIsTyping(false);\n    }\n  };\n\n  // Check if all required sections are complete to finish onboarding\n  const checkOnboardingCompletion = () => {\n    const allSectionsComplete = \n      userProfile.completedSections.company && \n      userProfile.completedSections.user && \n      userProfile.completedSections.goals && \n      userProfile.completedSections.preferences;\n      \n    if (allSectionsComplete && currentStep === steps.length - 1) {\n      // Send a final message\n      addMessage({\n        role: 'assistant',\n        content: `Thank you for sharing all this information with me! I now have a good understanding of you and your business. I'll use this to personalize your Nexus experience. Let's get started!`,\n        type: 'relationship-building',\n        metadata: {\n          emotion: 'celebratory'\n        }\n      });\n      \n      // Persist onboarding profile, then complete\n      setTimeout(async () => {\n        if (user) {\n          try {\n            await upsertOnboardingProfile(userProfile, user.id);\n          } catch (error) {\n            console.error('Failed to persist onboarding profile:', error);\n          } finally {\n            completeOnboarding();\n          }\n        }\n      }, 3000);\n    }\n  };\n\n  // Check for completion whenever profile or step changes\n  useEffect(() => {\n    checkOnboardingCompletion();\n  }, [userProfile, currentStep]);\n\n  const handleSendMessage = async () => {\n    if (!userInput.trim() || isTyping) return;\n    \n    const message = userInput.trim();\n    setUserInput('');\n    \n    await sendAIMessage(message);\n  };\n\n  const handleKeyDown = (e: React.KeyboardEvent) => {\n    if (e.key === 'Enter' && !e.shiftKey) {\n      e.preventDefault();\n      handleSendMessage();\n    }\n  };\n\n  if (!user) {\n    return (\n      <div className=\"h-full flex items-center justify-center bg-background\">\n        <div className=\"text-center\">\n          <div className=\"text-lg font-medium text-foreground mb-2\">Please sign in to continue</div>\n          <div className=\"text-sm text-muted-foreground\">You need to be authenticated to meet Nex</div>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"h-full flex flex-col bg-background\">\n      {/* Progress Steps */}\n      <div className=\"border-b border-border bg-gradient-to-r from-purple-50 to-blue-50 dark:from-purple-900/20 dark:to-blue-900/20 p-4 flex-shrink-0\">\n        <div className=\"max-w-4xl mx-auto\">\n          <div className=\"flex items-center justify-between mb-2\">\n            <h3 className=\"text-sm font-medium text-foreground\">Meeting Your Executive Assistant</h3>\n            <span className=\"text-xs text-muted-foreground\">\n              Step {currentStep + 1} of {steps.length}\n            </span>\n          </div>\n          \n          <div className=\"flex items-center gap-2 overflow-x-auto\">\n            {steps.map((step, index) => (\n              <div key={step.id} className=\"flex items-center gap-2 flex-shrink-0\">\n                <div className={`flex items-center gap-2 px-4 py-2 rounded-full text-xs font-medium transition-all ${\n                  step.completed \n                    ? 'bg-success/20 text-success border border-success/30'\n                    : index === currentStep\n                    ? 'bg-primary/20 text-primary border border-primary/30'\n                    : 'bg-background/60 text-muted-foreground border border-border'\n                }`}>\n                  {step.completed ? <CheckCircle className=\"w-3 h-3\" /> : step.icon}\n                  <span>{step.title}</span>\n                </div>\n                {index < steps.length - 1 && (\n                  <ArrowRight className=\"w-3 h-3 text-muted-foreground\" />\n                )}\n              </div>\n            ))}\n          </div>\n        </div>\n      </div>\n\n      {/* Messages */}\n      <div className=\"flex-1 overflow-y-auto p-4 min-h-0\">\n        <div className=\"max-w-4xl mx-auto space-y-4\">\n          <AnimatePresence>\n            {messages.map((message) => (\n              <motion.div\n                key={message.id}\n                initial={{ opacity: 0, y: 20 }}\n                animate={{ opacity: 1, y: 0 }}\n                className={`flex gap-4 ${\n                  message.role === 'user' ? 'flex-row-reverse' : 'flex-row'\n                }`}\n              >\n                <div className={`w-10 h-10 rounded-full flex items-center justify-center flex-shrink-0 ${\n                  message.role === 'user' \n                    ? 'bg-primary text-primary-foreground' \n                    : 'bg-gradient-to-br from-purple-500 to-blue-500 text-primary-foreground shadow-lg'\n                }`}>\n                  {message.role === 'user' ? (\n                    <User className=\"w-5 h-5\" />\n                  ) : (\n                    <Bot className=\"w-5 h-5\" />\n                  )}\n                </div>\n                \n                <div className={`flex-1 max-w-[80%] ${\n                  message.role === 'user' ? 'text-right' : 'text-left'\n                }`}>\n                  {message.role === 'assistant' && (\n                    <div className=\"text-xs font-medium text-muted-foreground mb-1\">\n                      Nex - Executive Assistant\n                    </div>\n                  )}\n                  \n                  <div className={`rounded-xl p-4 ${\n                    message.role === 'user'\n                      ? 'bg-primary text-primary-foreground ml-auto shadow-md'\n                      : 'bg-card border border-border shadow-sm'\n                  }`}>\n                    <div className=\"whitespace-pre-wrap text-sm leading-relaxed\">\n                      {message.content}\n                    </div>\n                  </div>\n                  \n                  <div className=\"text-xs text-muted-foreground mt-2\">\n                    {message.timestamp.toLocaleTimeString([], { \n                      hour: '2-digit', \n                      minute: '2-digit' \n                    })}\n                  </div>\n                </div>\n              </motion.div>\n            ))}\n          </AnimatePresence>\n\n          {/* Typing indicator */}\n          {isTyping && (\n            <motion.div\n              initial={{ opacity: 0, y: 20 }}\n              animate={{ opacity: 1, y: 0 }}\n              className=\"flex gap-4\"\n            >\n              <div className=\"w-10 h-10 rounded-full bg-gradient-to-br from-purple-500 to-blue-500 text-primary-foreground flex items-center justify-center shadow-lg\">\n                <Bot className=\"w-5 h-5\" />\n              </div>\n              <div className=\"bg-card border border-border rounded-xl p-4 shadow-sm\">\n                <div className=\"text-xs font-medium text-muted-foreground mb-2\">\n                  Nex is thinking...\n                </div>\n                <div className=\"flex items-center gap-1\">\n                  <div className=\"w-2 h-2 bg-primary rounded-full animate-bounce\" />\n                  <div className=\"w-2 h-2 bg-primary rounded-full animate-bounce\" style={{ animationDelay: '0.1s' }} />\n                  <div className=\"w-2 h-2 bg-primary rounded-full animate-bounce\" style={{ animationDelay: '0.2s' }} />\n                </div>\n              </div>\n            </motion.div>\n          )}\n\n          <div ref={messagesEndRef} />\n        </div>\n      </div>\n\n      {/* Input Area */}\n      <div className=\"border-t border-border bg-muted/30 p-4 flex-shrink-0\">\n        <div className=\"max-w-4xl mx-auto\">\n          <div className=\"flex gap-4\">\n            <div className=\"flex-1 relative\">\n              <textarea\n                value={userInput}\n                onChange={(e) => setUserInput(e.target.value)}\n                onKeyDown={handleKeyDown}\n                placeholder=\"Type your message to Nex...\"\n                disabled={isTyping}\n                className=\"w-full resize-none border border-border rounded-xl px-4 py-3 text-sm bg-background focus:outline-none focus:ring-2 focus:ring-primary focus:border-primary min-h-[52px] max-h-32 transition-all\"\n                rows={1}\n              />\n            </div>\n            <button\n              onClick={handleSendMessage}\n              disabled={!userInput.trim() || isTyping}\n              className=\"px-4 py-3 bg-primary text-primary-foreground rounded-xl hover:bg-primary/90 disabled:opacity-50 disabled:cursor-not-allowed transition-all shadow-sm hover:shadow-md flex-shrink-0\"\n            >\n              <Send className=\"w-4 h-4\" />\n            </button>\n          </div>\n          <div className=\"text-xs text-muted-foreground mt-2 text-center\">\n            💡 Having a real conversation with AI-powered Nex\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}; ","usedDeprecatedRules":[]},{"filePath":"/home/vonj/Github/Nexus/src/components/onboarding/OnboardingChecklist.tsx","messages":[{"ruleId":"no-restricted-syntax","severity":1,"message":"Use design tokens instead of hardcoded colors (e.g., bg-primary, bg-secondary)","line":63,"column":126,"nodeType":"Literal","messageId":"restrictedSyntax","endLine":63,"endColumn":160},{"ruleId":"no-restricted-syntax","severity":1,"message":"Use design tokens instead of hardcoded text colors (e.g., text-foreground, text-muted-foreground)","line":66,"column":48,"nodeType":"Literal","messageId":"restrictedSyntax","endLine":66,"endColumn":72}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React from 'react';\nimport { motion, AnimatePresence } from 'framer-motion';\nimport { useOnboarding } from '@/contexts/OnboardingContext';\nimport { CheckCircle, Circle, ArrowRight, X } from 'lucide-react';\nimport { Button } from '@/components/ui/Button';\nimport { Card } from '@/components/ui/Card';\nimport { Progress } from '@/components/ui/Progress';\nimport { useNavigate } from 'react-router-dom';\n\nconst stepConfig = {\n  welcome: { title: 'Explore the Dashboard', description: 'Take a look around your new command center.', path: '/dashboard' },\n  company_profile: { title: 'Complete Your Profile', description: 'Fill in your company details for personalized AI insights.', path: '/onboarding/company-profile' },\n  connect_source: { title: 'Connect a Data Source', description: 'Integrate your tools to see the full picture.', path: '/settings' },\n  ask_ai: { title: 'Ask the AI Assistant', description: 'Get your first AI-powered answer.', path: '/ai-chat' },\n};\n\ntype StepKey = keyof typeof stepConfig;\n\nexport const OnboardingChecklist: React.FC = () => {\n  const { steps, isOpen, isCompleted, toggleChecklist } = useOnboarding();\n  const navigate = useNavigate();\n\n  if (isCompleted) {\n    return null;\n  }\n  \n  const completedCount = Object.values(steps).filter(Boolean).length;\n  const totalSteps = Object.keys(steps).length;\n  const progressPercentage = (completedCount / totalSteps) * 100;\n\n  const handleStepClick = (step: StepKey) => {\n    navigate(stepConfig[step].path);\n    toggleChecklist(); // close the checklist when a step is clicked\n  };\n\n  return (\n    <AnimatePresence>\n      {isOpen && (\n        <motion.div\n          initial={{ opacity: 0, y: 50, scale: 0.95 }}\n          animate={{ opacity: 1, y: 0, scale: 1 }}\n          exit={{ opacity: 0, y: 50, scale: 0.95 }}\n          transition={{ duration: 0.3, ease: 'easeOut' }}\n          className=\"fixed bottom-6 right-6 w-full max-w-sm z-50\"\n        >\n          <Card className=\"shadow-2xl\">\n            <div className=\"p-4 border-b border-border\">\n              <div className=\"flex items-center justify-between\">\n                <h3 className=\"font-semibold text-lg\">Getting Started Guide</h3>\n                <Button variant=\"ghost\" size=\"icon\" onClick={toggleChecklist}>\n                  <X className=\"h-4 w-4\" />\n                </Button>\n              </div>\n              <p className=\"text-sm text-muted-foreground mt-1\">\n                Complete these steps to unlock the full power of Nexus.\n              </p>\n              <Progress value={progressPercentage} className=\"mt-3\" />\n            </div>\n            <div className=\"p-4 space-y-3\">\n              {Object.entries(stepConfig).map(([stepKey, config]) => {\n                const isStepCompleted = steps[stepKey as StepKey];\n                return (\n                  <div key={stepKey} className={`flex items-start gap-3 p-3 rounded-lg transition-colors ${isStepCompleted ? 'bg-green-50 dark:bg-green-900/20' : 'bg-background hover:bg-muted/50'}`}>\n                    <div>\n                      {isStepCompleted ? (\n                        <CheckCircle className=\"h-6 w-6 text-green-500\" />\n                      ) : (\n                        <Circle className=\"h-6 w-6 text-muted-foreground/50\" />\n                      )}\n                    </div>\n                    <div>\n                      <h4 className={`font-medium ${isStepCompleted ? 'line-through text-muted-foreground' : ''}`}>{config.title}</h4>\n                      <p className=\"text-sm text-muted-foreground\">{config.description}</p>\n                      {!isStepCompleted && (\n                        <Button\n                          variant=\"link\"\n                          className=\"p-0 h-auto mt-1 text-sm\"\n                          onClick={() => handleStepClick(stepKey as StepKey)}\n                        >\n                          Go to Step <ArrowRight className=\"h-4 w-4 ml-1\" />\n                        </Button>\n                      )}\n                    </div>\n                  </div>\n                );\n              })}\n            </div>\n          </Card>\n        </motion.div>\n      )}\n    </AnimatePresence>\n  );\n}; ","usedDeprecatedRules":[]},{"filePath":"/home/vonj/Github/Nexus/src/components/onboarding/OnboardingFlow.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'OnboardingStep' is defined but never used.","line":15,"column":32,"nodeType":null,"messageId":"unusedVar","endLine":15,"endColumn":46},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":33,"column":71,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":33,"endColumn":74,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1479,1482],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1479,1482],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'currentStep' is assigned a value but never used.","line":108,"column":9,"nodeType":null,"messageId":"unusedVar","endLine":108,"endColumn":20},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":205,"column":86,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":205,"endColumn":89,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[8347,8350],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[8347,8350],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\n * OnboardingFlow.tsx\n * Complete onboarding flow for new Nexus users\n * Includes n8n connection setup and configuration\n */\nimport React, { useState, useEffect } from 'react';\nimport { CheckCircle, ArrowRight, ArrowLeft, Zap, Settings, Sparkles, Users } from 'lucide-react';\nimport { N8nConnectionSetup } from './N8nConnectionSetup';\nimport { OrganizationSetupStep } from './OrganizationSetupStep';\nimport { UserContextStep } from './UserContextStep';\nimport { BusinessContextStep } from './BusinessContextStep';\nimport { SuccessCriteriaStep } from './SuccessCriteriaStep';\nimport { BusinessSnapshotStep } from './BusinessSnapshotStep';\nimport { n8nOnboardingManager } from '../../lib/n8nOnboardingManager';\nimport type { OnboardingState, OnboardingStep } from '../../lib/n8nOnboardingManager';\nimport type { UserN8nConfig } from '../../lib/userN8nConfig';\nimport { SetupLoader } from '../patterns/LoadingStates';\nimport { motion } from 'framer-motion';\nimport { useAuth } from '@/contexts/AuthContext';\n\ninterface OnboardingFlowProps {\n  onComplete: () => void;\n  className?: string;\n}\n\nexport const OnboardingFlow: React.FC<OnboardingFlowProps> = ({\n  onComplete,\n  className = ''\n}) => {\n  const [onboardingState, setOnboardingState] = useState<OnboardingState | null>(null);\n  const [currentStepId, setCurrentStepId] = useState<string>('welcome');\n  const [isLoading, setIsLoading] = useState(true);\n  const [onboardingData, setOnboardingData] = useState<Record<string, any>>({});\n\n  // Load onboarding state\n  useEffect(() => {\n    const loadState = async () => {\n      await n8nOnboardingManager.initialize();\n      const state = await n8nOnboardingManager.getOnboardingState();\n      setOnboardingState(state);\n      \n      // Set current step to first incomplete step\n      const currentStep = state.steps.find(s => !s.completed);\n      if (currentStep) {\n        setCurrentStepId(currentStep.id);\n      }\n      \n      setIsLoading(false);\n    };\n\n    loadState();\n\n    // Subscribe to state changes\n    const unsubscribe = n8nOnboardingManager.subscribe((state) => {\n      setOnboardingState(state);\n    });\n\n    return unsubscribe;\n  }, []);\n\n  const handleStepComplete = async (stepId: string, data?: Record<string, unknown>): Promise<void> => {\n    if (data) {\n      setOnboardingData(prev => ({ ...prev, ...data }));\n    }\n\n    await n8nOnboardingManager.completeStep(stepId);\n    \n    // Move to next step\n    if (onboardingState) {\n      const currentIndex = onboardingState.steps.findIndex(s => s.id === stepId);\n      const nextStep = onboardingState.steps[currentIndex + 1];\n      if (nextStep) {\n        setCurrentStepId(nextStep.id);\n      } else {\n        // Onboarding complete\n        onComplete();\n      }\n    }\n  };\n\n  const handleN8nComplete = async (config: UserN8nConfig) => {\n    const success = await n8nOnboardingManager.completeN8nConfiguration(config);\n    if (success) {\n      handleStepComplete('n8n-connection');\n    }\n  };\n\n  const handleN8nSkip = async () => {\n    await n8nOnboardingManager.skipN8nConfiguration();\n    handleStepComplete('n8n-connection');\n  };\n\n  const goToStep = (stepId: string) => {\n    setCurrentStepId(stepId);\n  };\n\n  if (isLoading || !onboardingState) {\n    return (\n      <div className=\"h-full flex items-center justify-center\">\n        <SetupLoader\n          title=\"Setting up your onboarding...\"\n          subtitle=\"Preparing your personalized experience\"\n        />\n      </div>\n    );\n  }\n\n  const currentStep = onboardingState.steps.find(s => s.id === currentStepId);\n  const currentStepIndex = onboardingState.steps.findIndex(s => s.id === currentStepId);\n\n  return (\n    <div className={`min-h-screen flex items-center justify-center bg-gradient-to-br from-blue-50 to-indigo-100 dark:from-gray-900 dark:to-gray-800 p-4 ${className}`}>\n      {/* Centered Onboarding Container */}\n      <div className=\"w-full max-w-4xl bg-background rounded-xl shadow-2xl border border-border\">\n        {/* Scrollable Content Container */}\n        <div className=\"max-h-[90vh] overflow-y-auto\">\n          <div className=\"px-6 py-6 lg:px-8 lg:py-8\">\n            {/* Progress Header */}\n            <div className=\"mb-6\">\n              <div className=\"text-center mb-6\">\n                <h1 className=\"text-xl lg:text-2xl font-bold text-foreground dark:text-primary-foreground mb-1\">\n                  Welcome to Nexus OS\n                </h1>\n                <p className=\"text-sm lg:text-base text-muted-foreground dark:text-muted-foreground\">\n                  Let's set up your AI-powered business operating system\n                </p>\n              </div>\n\n              {/* Step Progress - Responsive */}\n              <div className=\"hidden md:flex items-center justify-between mb-6\">\n                {onboardingState.steps.map((step, index) => (\n                  <div key={step.id} className=\"flex items-center\">\n                    <div\n                      className={`flex items-center justify-center w-7 h-7 lg:w-8 lg:h-8 rounded-full border-2 transition-colors ${\n                        step.completed\n                          ? 'bg-success border-success text-primary-foreground'\n                          : step.id === currentStepId\n                          ? 'border-primary text-primary bg-card dark:bg-background'\n                          : 'border-border text-muted-foreground/60 bg-card dark:bg-background'\n                      }`}\n                    >\n                      {step.completed ? (\n                        <CheckCircle className=\"h-3 w-3 lg:h-4 lg:w-4\" />\n                      ) : (\n                        <span className=\"text-xs font-medium\">{index + 1}</span>\n                      )}\n                    </div>\n                    {index < onboardingState.steps.length - 1 && (\n                      <div\n                        className={`w-8 lg:w-12 h-1 mx-2 lg:mx-3 transition-colors ${\n                          step.completed ? 'bg-success' : 'bg-muted'\n                        }`}\n                      />\n                    )}\n                  </div>\n                ))}\n              </div>\n\n              {/* Mobile Progress Indicator */}\n              <div className=\"md:hidden mb-4\">\n                <div className=\"flex items-center justify-between mb-2\">\n                  <span className=\"text-xs text-muted-foreground\">\n                    Step {currentStepIndex + 1} of {onboardingState.steps.length}\n                  </span>\n                  <span className=\"text-xs font-medium text-primary\">\n                    {Math.round(((currentStepIndex + 1) / onboardingState.steps.length) * 100)}%\n                  </span>\n                </div>\n                <div className=\"w-full bg-muted h-1.5 rounded-full\">\n                  <div \n                    className=\"bg-success h-1.5 rounded-full transition-all duration-300\"\n                    style={{ width: `${((currentStepIndex + 1) / onboardingState.steps.length) * 100}%` }}\n                  />\n                </div>\n              </div>\n            </div>\n\n            {/* Step Content */}\n            <div className=\"mb-6\">\n              {currentStepId === 'welcome' && (\n                <WelcomeStep onComplete={() => handleStepComplete('welcome')} />\n              )}\n\n              {currentStepId === 'organization-setup' && (\n                <div className=\"bg-card dark:bg-background rounded-lg shadow-lg p-4 lg:p-6\">\n                  <OrganizationSetupStep \n                    onNext={(data) => { void handleStepComplete('organization-setup', { enriched: data.enriched_data }); }}\n                    onBack={() => goToStep('welcome')}\n                  />\n                </div>\n              )}\n\n              {currentStepId === 'user-context' && (\n                <div className=\"bg-card dark:bg-background rounded-lg shadow-lg p-4 lg:p-6\">\n                  <UserContextStep \n                    onNext={() => handleStepComplete('user-context')}\n                    onBack={() => goToStep('organization-setup')}\n                  />\n                </div>\n              )}\n\n              {currentStepId === 'business-context' && (\n                <div className=\"bg-card dark:bg-background rounded-lg shadow-lg p-4 lg:p-6\">\n                  <BusinessContextStep \n                    onNext={(data) => handleStepComplete('business-context', data as any)}\n                    onBack={() => goToStep('user-context')}\n                    enrichedData={onboardingData.enriched}\n                  />\n                </div>\n              )}\n\n              {currentStepId === 'business-snapshot' && (\n                <div className=\"bg-card dark:bg-background rounded-lg shadow-lg p-4 lg:p-6\">\n                  <BusinessSnapshotStep\n                    onNext={(data) => handleStepComplete('business-snapshot', { baseline: data })}\n                    onBack={() => goToStep('business-context')}\n                  />\n                </div>\n              )}\n\n              {currentStepId === 'success-criteria' && (\n                <div className=\"bg-card dark:bg-background rounded-lg shadow-lg p-4 lg:p-6\">\n                  <SuccessCriteriaStep \n                    onNext={() => handleStepComplete('success-criteria')}\n                    onBack={() => goToStep('business-context')}\n                  />\n                </div>\n              )}\n\n              {currentStepId === 'n8n-connection' && (\n                <div className=\"bg-card dark:bg-background rounded-lg shadow-lg p-4 lg:p-6\">\n                  <div className=\"text-center mb-6\">\n                    <Zap className=\"h-8 w-8 lg:h-12 lg:w-12 text-primary mx-auto mb-4\" />\n                    <h2 className=\"text-xl lg:text-2xl font-bold text-foreground dark:text-primary-foreground mb-2\">\n                      Connect Your n8n Instance\n                    </h2>\n                    <p className=\"text-sm lg:text-base text-muted-foreground dark:text-muted-foreground\">\n                      Optional: Connect your n8n automation platform for advanced workflows\n                    </p>\n                  </div>\n                  <N8nConnectionSetup\n                    onComplete={(config) => handleN8nComplete({ ...config, userId: 'current-user' })}\n                    onSkip={handleN8nSkip}\n                  />\n                </div>\n              )}\n\n              {currentStepId === 'department-setup' && (\n                <DepartmentSetupStep onComplete={() => handleStepComplete('department-setup')} />\n              )}\n\n              {currentStepId === 'complete' && (\n                <CompleteStep onFinish={onComplete} />\n              )}\n            </div>\n\n            {/* Navigation */}\n            <div className=\"flex justify-between items-center border-t border-border pt-4\">\n              <button\n                onClick={() => {\n                  const prevIndex = Math.max(0, currentStepIndex - 1);\n                  const prevStep = onboardingState.steps[prevIndex];\n                  if (prevStep) goToStep(prevStep.id);\n                }}\n                disabled={currentStepIndex === 0}\n                className=\"flex items-center space-x-2 px-4 py-2 text-sm text-muted-foreground hover:text-foreground disabled:opacity-50 disabled:cursor-not-allowed transition-colors\"\n              >\n                <ArrowLeft className=\"h-3 w-3\" />\n                <span>Previous</span>\n              </button>\n\n              <div className=\"text-xs text-muted-foreground dark:text-muted-foreground\">\n                Step {currentStepIndex + 1} of {onboardingState.totalSteps}\n              </div>\n\n              <button\n                onClick={() => {\n                  const nextIndex = Math.min(onboardingState.steps.length - 1, currentStepIndex + 1);\n                  const nextStep = onboardingState.steps[nextIndex];\n                  if (nextStep) goToStep(nextStep.id);\n                }}\n                disabled={currentStepIndex === onboardingState.steps.length - 1}\n                className=\"flex items-center space-x-2 px-4 py-2 text-sm text-muted-foreground hover:text-foreground disabled:opacity-50 disabled:cursor-not-allowed transition-colors\"\n              >\n                <span>Next</span>\n                <ArrowRight className=\"h-3 w-3\" />\n              </button>\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n};\n\n// Welcome Step Component - Simplified\nconst WelcomeStep: React.FC<{ onComplete: () => void }> = ({ onComplete }) => {\n  const { user } = useAuth();\n\n  // Get user's first name or fallback to a generic greeting\n  const getPersonalizedGreeting = () => {\n    const firstName = user?.profile?.first_name;\n    if (firstName) {\n      return `Hi ${firstName}! Let's Build Your AI-Powered Business`;\n    }\n    return \"Let's Build Your AI-Powered Business\";\n  };\n\n  const getPersonalizedSubtitle = () => {\n    const firstName = user?.profile?.first_name;\n    if (firstName) {\n      return `${firstName}, you've just unlocked the most powerful business operating system. We'll customize it specifically for your needs and goals.`;\n    }\n    return \"You've just unlocked the most powerful business operating system. We'll customize it specifically for your needs and goals.\";\n  };\n\n  return (\n    <div className=\"text-center\">\n      <div className=\"relative\">\n        <Sparkles className=\"h-10 w-10 lg:h-12 lg:w-12 text-primary mx-auto mb-3\" />\n        <h2 className=\"text-xl lg:text-2xl font-bold text-foreground dark:text-primary-foreground mb-2\">\n          {getPersonalizedGreeting()}\n        </h2>\n        <p className=\"text-sm lg:text-base text-muted-foreground dark:text-muted-foreground mb-4 max-w-xl mx-auto\">\n          {getPersonalizedSubtitle()}\n        </p>\n\n        {/* Setup Promise - Focused on onboarding */}\n        <div className=\"mb-6 p-4 bg-primary/5 dark:bg-primary/20/20 rounded-lg border border-border dark:border-primary/70/50\">\n          <div className=\"text-primary dark:text-primary font-semibold text-sm lg:text-base mb-2\">\n            🚀 Quick Setup Process (5 minutes)\n          </div>\n          <div className=\"text-primary dark:text-primary text-xs space-y-1\">\n            <div>✅ Tell us about your role and goals</div>\n            <div>✅ Configure your business context</div>\n            <div>✅ Define success metrics</div>\n            <div>✅ Connect integrations (optional)</div>\n          </div>\n        </div>\n\n        {/* Single action button - focused on getting started */}\n        <div className=\"mb-6\">\n          <button\n            onClick={onComplete}\n            className=\"px-6 py-3 bg-primary hover:bg-primary/90 text-primary-foreground rounded-lg font-medium text-base transition-colors flex items-center justify-center mx-auto\"\n          >\n            Start Setup <ArrowRight className=\"ml-2 h-4 w-4\" />\n          </button>\n        </div>\n      </div>\n\n      {/* Simplified feature highlights - Focus on what's coming */}\n      <div className=\"grid grid-cols-3 gap-2 lg:gap-4 mb-4\">\n        <div className=\"p-2\">\n          <div className=\"h-8 w-8 bg-primary/10 rounded-lg flex items-center justify-center mx-auto mb-2\">\n            <Zap className=\"h-4 w-4 text-primary\" />\n          </div>\n          <h3 className=\"font-semibold text-xs lg:text-sm text-foreground dark:text-primary-foreground mb-1\">AI Assistant</h3>\n          <p className=\"text-xs text-muted-foreground dark:text-muted-foreground\">\n            Personalized for your role\n          </p>\n        </div>\n        \n        <div className=\"p-2\">\n          <div className=\"h-8 w-8 bg-success/10 rounded-lg flex items-center justify-center mx-auto mb-2\">\n            <Settings className=\"h-4 w-4 text-success\" />\n          </div>\n          <h3 className=\"font-semibold text-xs lg:text-sm text-foreground dark:text-primary-foreground mb-1\">Smart Setup</h3>\n          <p className=\"text-xs text-muted-foreground dark:text-muted-foreground\">\n            Auto-configured workflows\n          </p>\n        </div>\n        \n        <div className=\"p-2\">\n          <div className=\"h-8 w-8 bg-warning/10 rounded-lg flex items-center justify-center mx-auto mb-2\">\n            <Users className=\"h-4 w-4 text-warning\" />\n          </div>\n          <h3 className=\"font-semibold text-xs lg:text-sm text-foreground dark:text-primary-foreground mb-1\">Team Ready</h3>\n          <p className=\"text-xs text-muted-foreground dark:text-muted-foreground\">\n            Invite team later\n          </p>\n        </div>\n      </div>\n\n      {/* Simple progress indicator */}\n      <div className=\"border-t pt-3\">\n        <div className=\"text-xs text-muted-foreground\">\n          We'll have you up and running in just a few minutes\n        </div>\n      </div>\n    </div>\n  );\n};\n\n// Department Setup Step Component\nconst DepartmentSetupStep: React.FC<{ onComplete: () => void }> = ({ onComplete }) => (\n  <div className=\"text-center\">\n    <div className=\"mb-6\">\n      <Settings className=\"h-8 w-8 lg:h-12 lg:w-12 text-secondary mx-auto mb-4\" />\n      <h2 className=\"text-xl lg:text-2xl font-bold text-foreground dark:text-primary-foreground mb-2\">\n        Configure Your Departments\n      </h2>\n      <p className=\"text-sm lg:text-base text-muted-foreground dark:text-muted-foreground\">\n        Set up the departments that matter to your business\n      </p>\n    </div>\n    \n    <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4 mb-8\">\n      {['Sales', 'Finance', 'Operations', 'Marketing'].map((dept) => (\n        <div key={dept} className=\"flex items-center p-4 border border-border dark:border-border rounded-lg\">\n          <CheckCircle className=\"h-5 w-5 text-success mr-3\" />\n          <span className=\"text-foreground dark:text-primary-foreground font-medium\">{dept}</span>\n        </div>\n      ))}\n    </div>\n    \n    <div className=\"text-center\">\n      <button\n        onClick={onComplete}\n        className=\"px-8 py-4 bg-secondary hover:bg-secondary/90 text-primary-foreground font-medium rounded-lg transition-colors\"\n      >\n        Continue\n      </button>\n    </div>\n  </div>\n);\n\n// Complete Step Component - Enhanced with success metrics\nconst CompleteStep: React.FC<{ onFinish: () => void }> = ({ onFinish }) => {\n  return (\n    <motion.div\n      initial={{ opacity: 0, scale: 0.9 }}\n      animate={{ opacity: 1, scale: 1 }}\n      className=\"text-center\"\n    >\n      <motion.div\n        animate={{ rotate: [0, 10, -10, 0] }}\n        transition={{ duration: 2, repeat: Infinity }}\n        className=\"text-4xl lg:text-6xl mb-6\"\n      >\n        🚀\n      </motion.div>\n\n      <h2 className=\"text-2xl lg:text-3xl font-bold text-foreground dark:text-primary-foreground mb-4\">\n        You're Ready to Transform Your Business!\n      </h2>\n\n      <div className=\"mb-8 p-4 lg:p-6 bg-gradient-to-r from-green-50 to-blue-50 dark:from-green-900/20 dark:to-blue-900/20 rounded-xl\">\n        <div className=\"text-base lg:text-lg font-semibold text-foreground mb-4\">\n          Your AI Assistant is already working:\n        </div>\n        \n        <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4 text-sm\">\n          <div className=\"text-left\">\n            <div className=\"font-medium text-success dark:text-success mb-2\">✅ Immediate Actions:</div>\n            <ul className=\"space-y-1 text-muted-foreground\">\n              <li>• Analyzing your business patterns</li>\n              <li>• Setting up automated workflows</li>\n              <li>• Preparing your first insights</li>\n              <li>• Optimizing your processes</li>\n            </ul>\n          </div>\n          <div className=\"text-left\">\n            <div className=\"font-medium text-primary dark:text-primary mb-2\">Next Steps:</div>\n            <ul className=\"space-y-1 text-muted-foreground\">\n              <li>• View your personalized dashboard</li>\n              <li>• Connect your business tools</li>\n              <li>• Review initial insights</li>\n              <li>• Start your first automation</li>\n            </ul>\n          </div>\n        </div>\n      </div>\n\n      <div className=\"mb-6\">\n        <button\n          onClick={onFinish}\n          className=\"px-6 lg:px-8 py-3 lg:py-4 bg-gradient-to-r from-purple-600 to-blue-600 hover:from-purple-700 hover:to-blue-700 text-primary-foreground rounded-lg font-bold text-base lg:text-lg shadow-lg hover:shadow-xl transition-all duration-200\"\n        >\n          Launch Your Dashboard →\n        </button>\n      </div>\n\n      <div className=\"text-sm text-muted-foreground\">\n        💡 <strong>Pro Tip:</strong> Your first insights will be ready in 5 minutes\n      </div>\n    </motion.div>\n  );\n};\n\nexport default OnboardingFlow; ","usedDeprecatedRules":[]},{"filePath":"/home/vonj/Github/Nexus/src/components/onboarding/OrganizationSetupStep.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'CardContent' is defined but never used.","line":3,"column":16,"nodeType":null,"messageId":"unusedVar","endLine":3,"endColumn":27},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'CardHeader' is defined but never used.","line":3,"column":29,"nodeType":null,"messageId":"unusedVar","endLine":3,"endColumn":39},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'CardTitle' is defined but never used.","line":3,"column":41,"nodeType":null,"messageId":"unusedVar","endLine":3,"endColumn":50},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'Label' is defined but never used.","line":4,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":4,"endColumn":15},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'RadioGroup' is defined but never used.","line":6,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":6,"endColumn":20},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'RadioGroupItem' is defined but never used.","line":6,"column":22,"nodeType":null,"messageId":"unusedVar","endLine":6,"endColumn":36},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'Badge' is defined but never used.","line":7,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":7,"endColumn":15},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'Building2' is defined but never used.","line":9,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":9,"endColumn":12},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'Users' is defined but never used.","line":10,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":10,"endColumn":8},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'Crown' is defined but never used.","line":11,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":11,"endColumn":8},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'Zap' is defined but never used.","line":12,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":12,"endColumn":6},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'TrendingUp' is defined but never used.","line":13,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":13,"endColumn":13},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'Globe' is defined but never used.","line":14,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":14,"endColumn":8},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'Loader2' is defined but never used.","line":15,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":15,"endColumn":10},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'Company' is defined but never used.","line":23,"column":15,"nodeType":null,"messageId":"unusedVar","endLine":23,"endColumn":22},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'updateCompany' is assigned a value but never used.","line":67,"column":17,"nodeType":null,"messageId":"unusedVar","endLine":67,"endColumn":30},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'updateProfile' is assigned a value but never used.","line":67,"column":32,"nodeType":null,"messageId":"unusedVar","endLine":67,"endColumn":45},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'completeOnboarding' is assigned a value but never used.","line":67,"column":47,"nodeType":null,"messageId":"unusedVar","endLine":67,"endColumn":65},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":103,"column":59,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":103,"endColumn":62,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3101,3104],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3101,3104],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"no-restricted-syntax","severity":1,"message":"Use design tokens instead of hardcoded text colors (e.g., text-foreground, text-muted-foreground)","line":301,"column":45,"nodeType":"Literal","messageId":"restrictedSyntax","endLine":301,"endColumn":86},{"ruleId":"no-restricted-syntax","severity":1,"message":"Use design tokens instead of hardcoded text colors (e.g., text-foreground, text-muted-foreground)","line":314,"column":47,"nodeType":"Literal","messageId":"restrictedSyntax","endLine":314,"endColumn":88},{"ruleId":"no-restricted-syntax","severity":1,"message":"Use design tokens instead of hardcoded text colors (e.g., text-foreground, text-muted-foreground)","line":336,"column":26,"nodeType":"Literal","messageId":"restrictedSyntax","endLine":336,"endColumn":54},{"ruleId":"no-restricted-syntax","severity":1,"message":"Use design tokens instead of hardcoded colors (e.g., bg-primary, bg-secondary)","line":343,"column":28,"nodeType":"Literal","messageId":"restrictedSyntax","endLine":343,"endColumn":55},{"ruleId":"no-restricted-syntax","severity":1,"message":"Use design tokens instead of hardcoded text colors (e.g., text-foreground, text-muted-foreground)","line":344,"column":28,"nodeType":"Literal","messageId":"restrictedSyntax","endLine":344,"endColumn":51},{"ruleId":"no-restricted-syntax","severity":1,"message":"Use design tokens instead of hardcoded text colors (e.g., text-foreground, text-muted-foreground)","line":351,"column":40,"nodeType":"Literal","messageId":"restrictedSyntax","endLine":351,"endColumn":67},{"ruleId":"no-restricted-syntax","severity":1,"message":"Use design tokens instead of hardcoded text colors (e.g., text-foreground, text-muted-foreground)","line":352,"column":30,"nodeType":"Literal","messageId":"restrictedSyntax","endLine":352,"endColumn":52},{"ruleId":"no-restricted-syntax","severity":1,"message":"Use design tokens instead of hardcoded text colors (e.g., text-foreground, text-muted-foreground)","line":362,"column":32,"nodeType":"Literal","messageId":"restrictedSyntax","endLine":362,"endColumn":56},{"ruleId":"no-restricted-syntax","severity":1,"message":"Use design tokens instead of hardcoded text colors (e.g., text-foreground, text-muted-foreground)","line":372,"column":49,"nodeType":"Literal","messageId":"restrictedSyntax","endLine":372,"endColumn":90},{"ruleId":"no-restricted-syntax","severity":1,"message":"Use design tokens instead of hardcoded text colors (e.g., text-foreground, text-muted-foreground)","line":397,"column":45,"nodeType":"Literal","messageId":"restrictedSyntax","endLine":397,"endColumn":86},{"ruleId":"no-restricted-syntax","severity":1,"message":"Use design tokens instead of hardcoded text colors (e.g., text-foreground, text-muted-foreground)","line":422,"column":48,"nodeType":"Literal","messageId":"restrictedSyntax","endLine":422,"endColumn":89},{"ruleId":"no-restricted-syntax","severity":1,"message":"Use design tokens instead of hardcoded colors (e.g., bg-primary, bg-secondary)","line":438,"column":26,"nodeType":"Literal","messageId":"restrictedSyntax","endLine":438,"endColumn":58},{"ruleId":"no-restricted-syntax","severity":1,"message":"Use design tokens instead of hardcoded text colors (e.g., text-foreground, text-muted-foreground)","line":443,"column":36,"nodeType":"Literal","messageId":"restrictedSyntax","endLine":443,"endColumn":77},{"ruleId":"no-restricted-syntax","severity":1,"message":"Use design tokens instead of hardcoded text colors (e.g., text-foreground, text-muted-foreground)","line":444,"column":32,"nodeType":"Literal","messageId":"restrictedSyntax","endLine":444,"endColumn":60},{"ruleId":"no-restricted-syntax","severity":1,"message":"Use design tokens instead of hardcoded text colors (e.g., text-foreground, text-muted-foreground)","line":449,"column":36,"nodeType":"Literal","messageId":"restrictedSyntax","endLine":449,"endColumn":77},{"ruleId":"no-restricted-syntax","severity":1,"message":"Use design tokens instead of hardcoded text colors (e.g., text-foreground, text-muted-foreground)","line":450,"column":32,"nodeType":"Literal","messageId":"restrictedSyntax","endLine":450,"endColumn":60},{"ruleId":"no-restricted-syntax","severity":1,"message":"Use design tokens instead of hardcoded text colors (e.g., text-foreground, text-muted-foreground)","line":455,"column":36,"nodeType":"Literal","messageId":"restrictedSyntax","endLine":455,"endColumn":77},{"ruleId":"no-restricted-syntax","severity":1,"message":"Use design tokens instead of hardcoded text colors (e.g., text-foreground, text-muted-foreground)","line":456,"column":32,"nodeType":"Literal","messageId":"restrictedSyntax","endLine":456,"endColumn":60},{"ruleId":"no-restricted-syntax","severity":1,"message":"Use design tokens instead of hardcoded text colors (e.g., text-foreground, text-muted-foreground)","line":461,"column":36,"nodeType":"Literal","messageId":"restrictedSyntax","endLine":461,"endColumn":77},{"ruleId":"no-restricted-syntax","severity":1,"message":"Use design tokens instead of hardcoded text colors (e.g., text-foreground, text-muted-foreground)","line":462,"column":32,"nodeType":"Literal","messageId":"restrictedSyntax","endLine":462,"endColumn":60},{"ruleId":"no-restricted-syntax","severity":1,"message":"Use design tokens instead of hardcoded text colors (e.g., text-foreground, text-muted-foreground)","line":467,"column":36,"nodeType":"Literal","messageId":"restrictedSyntax","endLine":467,"endColumn":77},{"ruleId":"no-restricted-syntax","severity":1,"message":"Use design tokens instead of hardcoded text colors (e.g., text-foreground, text-muted-foreground)","line":468,"column":32,"nodeType":"Literal","messageId":"restrictedSyntax","endLine":468,"endColumn":60},{"ruleId":"no-restricted-syntax","severity":1,"message":"Use design tokens instead of hardcoded text colors (e.g., text-foreground, text-muted-foreground)","line":473,"column":36,"nodeType":"Literal","messageId":"restrictedSyntax","endLine":473,"endColumn":77},{"ruleId":"no-restricted-syntax","severity":1,"message":"Use design tokens instead of hardcoded text colors (e.g., text-foreground, text-muted-foreground)","line":474,"column":32,"nodeType":"Literal","messageId":"restrictedSyntax","endLine":474,"endColumn":60},{"ruleId":"no-restricted-syntax","severity":1,"message":"Use design tokens instead of hardcoded text colors (e.g., text-foreground, text-muted-foreground)","line":485,"column":28,"nodeType":"Literal","messageId":"restrictedSyntax","endLine":485,"endColumn":51}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":44,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState } from 'react';\nimport { Button } from '../ui/Button';\nimport { Card, CardContent, CardHeader, CardTitle } from '../ui/Card';\nimport { Label } from '../ui/Label';\nimport { Input } from '../ui/Input';\nimport { RadioGroup, RadioGroupItem } from '../ui/RadioGroup';\nimport { Badge } from '../ui/Badge';\nimport { \n  Building2, \n  Users, \n  Crown,\n  Zap,\n  TrendingUp,\n  Globe,\n  Loader2\n} from 'lucide-react';\nimport { useAuth } from '@/contexts/AuthContext';\nimport { supabase } from '../../lib/core/supabase';\nimport { useToast } from '@/components/ui/Toast';\nimport { microsoftTeamsService } from '@/lib/services/microsoftTeamsService';\nimport { linkedinService } from '@/lib/services/linkedinService';\nimport { Select, SelectTrigger, SelectValue, SelectContent, SelectItem } from '@/components/ui/Select';\nimport type { Company } from '@prisma/client';\nimport { InformationCircleIcon, CheckCircleIcon, XCircleIcon } from '@heroicons/react/24/outline';\n\ninterface OrganizationData {\n  name: string;\n  domain: string;\n  industry: string;\n  size: string;\n  tagline?: string;\n  motto?: string;\n  mission_statement?: string;\n  vision_statement?: string;\n  about_md?: string;\n  description?: string;\n  logo?: string;\n  website?: string;\n  social_profiles?: string[];\n  founded?: string;\n  headquarters?: string;\n  specialties?: string[];\n  employee_count?: number;\n  followers_count?: number;\n  microsoft_365?: {\n    tenant_id?: string;\n    organization_name?: string;\n    verified_domain?: boolean;\n    subscription_type?: string;\n    user_count?: number;\n  };\n}\n\ninterface EnrichmentStatus {\n  isEnriching: boolean;\n  success: boolean;\n  error?: string;\n  enrichedFields: string[];\n}\n\ninterface OrganizationSetupStepProps {\n  onNext: (data: { enriched_data: OrganizationData }) => void;\n  onBack: () => void;\n}\n\nexport const OrganizationSetupStep: React.FC<OrganizationSetupStepProps> = ({ onNext, onBack }) => {\n  const { user, updateCompany, updateProfile, completeOnboarding } = useAuth();\n  const company = user?.company;\n  const { showToast } = useToast();\n  const [loading, setLoading] = useState(false);\n  const [showPreview, setShowPreview] = useState(false);\n  const [enrichmentStatus, setEnrichmentStatus] = useState<EnrichmentStatus>({\n    isEnriching: false,\n    success: false,\n    enrichedFields: [],\n  });\n  const [data, setData] = useState<OrganizationData>({\n    name: company?.name || '',\n    domain: company?.domain || '',\n    industry: company?.industry || '',\n    size: company?.size || '',\n    tagline: '',\n    motto: '',\n    mission_statement: '',\n    vision_statement: '',\n    about_md: '',\n  });\n\n  const handleEnrichment = async () => {\n    setEnrichmentStatus({\n      isEnriching: true,\n      success: false,\n      enrichedFields: [],\n    });\n\n    try {\n      const response = await fetch('/api/company-enrichment', {\n        method: 'POST',\n        headers: { 'Content-Type': 'application/json' },\n        body: JSON.stringify({\n          domain: data.domain,\n          companyName: data.name,\n          microsoftToken: await (microsoftTeamsService as any).getStoredTokens(),\n        }),\n      });\n\n      if (!response.ok) {\n        throw new Error('Failed to enrich company data');\n      }\n\n      const enrichedData = await response.json();\n      const enrichedFields: string[] = [];\n\n      // Track which fields were enriched\n      if (enrichedData.name && enrichedData.name !== data.name) enrichedFields.push('name');\n      if (enrichedData.industry && enrichedData.industry !== data.industry) enrichedFields.push('industry');\n      if (enrichedData.size && enrichedData.size !== data.size) enrichedFields.push('size');\n      if (enrichedData.description) enrichedFields.push('description');\n      if (enrichedData.logo) enrichedFields.push('logo');\n      if (enrichedData.website) enrichedFields.push('website');\n      if (enrichedData.social_profiles?.length) enrichedFields.push('social_profiles');\n      if (enrichedData.founded) enrichedFields.push('founded');\n      if (enrichedData.headquarters) enrichedFields.push('headquarters');\n      if (enrichedData.specialties?.length) enrichedFields.push('specialties');\n      if (enrichedData.employee_count) enrichedFields.push('employee_count');\n      if (enrichedData.followers_count) enrichedFields.push('followers_count');\n      if (enrichedData.microsoft_365) enrichedFields.push('microsoft_365');\n\n      // Update form data with enriched values\n      setData(prev => ({\n        ...prev,\n        ...enrichedData,\n      }));\n\n      setEnrichmentStatus({\n        isEnriching: false,\n        success: true,\n        enrichedFields,\n      });\n\n      showToast({\n        title: 'Success',\n        description: `Successfully enriched ${enrichedFields.length} fields`,\n        type: 'success',\n      });\n\n      setShowPreview(true);\n    } catch (error) {\n      console.error('Error enriching company data:', error);\n      setEnrichmentStatus({\n        isEnriching: false,\n        success: false,\n        error: 'Failed to enrich company data. Please check your domain and try again.',\n        enrichedFields: [],\n      });\n      showToast({\n        title: 'Error',\n        description: 'Failed to enrich company data',\n        type: 'error',\n      });\n    }\n  };\n\n  const handleSubmit = async (e: React.FormEvent) => {\n    e.preventDefault();\n    setLoading(true);\n\n    try {\n      // Update company info in Supabase\n      const { error: updateError } = await supabase\n        .from('companies')\n        .upsert({\n          id: company?.id,\n          name: data.name,\n          domain: data.domain,\n          industry: data.industry,\n          size: data.size,\n          description: data.description,\n          logo: data.logo,\n          website: data.website,\n          social_profiles: data.social_profiles,\n          founded: data.founded,\n          headquarters: data.headquarters,\n          specialties: data.specialties,\n          employee_count: data.employee_count,\n          followers_count: data.followers_count,\n          microsoft_365: data.microsoft_365,\n          updated_at: new Date().toISOString(),\n        });\n\n      if (updateError) {\n        throw updateError;\n      }\n\n      // Update user profile with company info\n      if (!user) throw new Error('No authenticated user');\n      const { error: profileError } = await supabase\n        .from('user_profiles')\n        .upsert({\n          id: user.id,\n          company_id: company?.id,\n          role: user.role,\n          department: data.industry,\n          job_title: data.size,\n          updated_at: new Date().toISOString(),\n        });\n\n      if (profileError) {\n        throw profileError;\n      }\n\n      // Upsert AI company profile details\n      await supabase\n        .from('ai_company_profiles')\n        .upsert({\n          company_id: company?.id,\n          tagline: data.tagline,\n          motto: data.motto,\n          mission_statement: data.mission_statement,\n          vision_statement: data.vision_statement,\n          about_md: data.about_md,\n        });\n\n      // Trigger embedding generation (fire & forget)\n      try {\n        await supabase.functions.invoke('ai_embed_company_profile', {\n          body: { company_id: company?.id },\n        });\n      } catch (err) {\n        console.warn('Embedding invoke failed', err);\n      }\n\n      showToast({\n        title: 'Success',\n        description: 'Organization information updated successfully',\n        type: 'success',\n      });\n\n      onNext({ enriched_data: data });\n\n    } catch (error) {\n      console.error('Error submitting organization data:', error);\n      showToast({\n        title: 'Error',\n        description: 'Failed to update organization information',\n        type: 'error',\n      });\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const handleMicrosoftConnect = async () => {\n    try {\n      await microsoftTeamsService.initiateAuth();\n    } catch (error) {\n      console.error('Error connecting Microsoft:', error);\n      showToast({\n        title: 'Error',\n        description: 'Failed to connect Microsoft account',\n        type: 'error',\n      });\n    }\n  };\n\n  const handleLinkedInConnect = async () => {\n    try {\n      await linkedinService.initiateAuth();\n    } catch (error) {\n      console.error('Error connecting LinkedIn:', error);\n      showToast({\n        title: 'Error',\n        description: 'Failed to connect LinkedIn account',\n        type: 'error',\n      });\n    }\n  };\n\n  return (\n    <Card className=\"w-full max-w-2xl mx-auto p-6\">\n      <h2 className=\"text-2xl font-bold mb-6\">Organization Setup</h2>\n      \n      {/* Privacy Notice */}\n      <div className=\"mb-6 p-4 bg-primary/5 rounded-lg\">\n        <div className=\"flex\">\n          <InformationCircleIcon className=\"h-5 w-5 text-primary mr-2\" />\n          <div>\n            <h3 className=\"text-sm font-medium text-primary/80\">Data Privacy Notice</h3>\n            <p className=\"text-sm text-primary/90 mt-1\">\n              We collect and process your company information to provide personalized services.\n              Your data is encrypted and stored securely. We only use this information to improve\n              your experience and provide relevant insights.\n            </p>\n          </div>\n        </div>\n      </div>\n\n      <form onSubmit={handleSubmit} className=\"space-y-6\">\n        <div className=\"space-y-4\">\n          <div>\n            <label htmlFor=\"name\" className=\"block text-sm font-medium text-gray-700\">\n              Company Name\n            </label>\n            <Input\n              id=\"name\"\n              value={data.name}\n              onChange={(e) => setData({ ...data, name: e.target.value })}\n              required\n              className=\"mt-1\"\n            />\n          </div>\n\n          <div>\n            <label htmlFor=\"domain\" className=\"block text-sm font-medium text-gray-700\">\n              Company Domain\n            </label>\n            <div className=\"mt-1 flex rounded-md shadow-sm\">\n              <Input\n                id=\"domain\"\n                type=\"text\"\n                value={data.domain}\n                onChange={(e) => setData({ ...data, domain: e.target.value })}\n                placeholder=\"example.com\"\n                required\n                className=\"flex-1\"\n              />\n              <Button\n                type=\"button\"\n                onClick={handleEnrichment}\n                disabled={!data.domain || enrichmentStatus.isEnriching}\n                className=\"ml-3\"\n              >\n                {enrichmentStatus.isEnriching ? 'Enriching...' : 'Enrich Data'}\n              </Button>\n            </div>\n            <p className=\"mt-1 text-sm text-gray-500\">\n              Enter your company's domain to automatically fetch additional information\n            </p>\n          </div>\n\n          {/* Enrichment Status */}\n          {enrichmentStatus.isEnriching && (\n            <div className=\"p-4 bg-gray-50 rounded-lg\">\n              <p className=\"text-sm text-gray-600\">Enriching company data...</p>\n            </div>\n          )}\n\n          {enrichmentStatus.error && (\n            <div className=\"p-4 bg-destructive/5 rounded-lg\">\n              <div className=\"flex\">\n                <XCircleIcon className=\"h-5 w-5 text-red-400 mr-2\" />\n                <p className=\"text-sm text-red-700\">{enrichmentStatus.error}</p>\n              </div>\n                  </div>\n          )}\n\n          {enrichmentStatus.success && (\n            <div className=\"p-4 bg-success/5 rounded-lg\">\n              <div className=\"flex\">\n                <CheckCircleIcon className=\"h-5 w-5 text-success mr-2\" />\n                <div>\n                  <p className=\"text-sm text-green-700\">Successfully enriched company data</p>\n                  <p className=\"text-xs text-success mt-1\">\n                    Enriched fields: {enrichmentStatus.enrichedFields.join(', ')}\n                  </p>\n                </div>\n              </div>\n            </div>\n          )}\n\n          <div>\n            <label htmlFor=\"industry\" className=\"block text-sm font-medium text-gray-700\">\n              Industry\n            </label>\n            <Select\n              value={data.industry}\n              onValueChange={(value) => setData({ ...data, industry: value })}\n              disabled={false}\n            >\n              <SelectTrigger className=\"mt-1\">\n                <SelectValue placeholder=\"Select an industry\" />\n              </SelectTrigger>\n              <SelectContent>\n                <SelectItem value=\"\">Select an industry</SelectItem>\n                <SelectItem value=\"technology\">Technology</SelectItem>\n                <SelectItem value=\"healthcare\">Healthcare</SelectItem>\n                <SelectItem value=\"finance\">Finance</SelectItem>\n                <SelectItem value=\"retail\">Retail</SelectItem>\n                <SelectItem value=\"manufacturing\">Manufacturing</SelectItem>\n                <SelectItem value=\"education\">Education</SelectItem>\n                <SelectItem value=\"other\">Other</SelectItem>\n              </SelectContent>\n            </Select>\n          </div>\n\n          <div>\n            <label htmlFor=\"size\" className=\"block text-sm font-medium text-gray-700\">\n              Company Size\n            </label>\n            <Select\n              value={data.size}\n              onValueChange={(value) => setData({ ...data, size: value })}\n              disabled={false}\n            >\n              <SelectTrigger className=\"mt-1\">\n                <SelectValue placeholder=\"Select company size\" />\n              </SelectTrigger>\n              <SelectContent>\n                <SelectItem value=\"\">Select company size</SelectItem>\n                <SelectItem value=\"1-10\">1-10 employees</SelectItem>\n                <SelectItem value=\"11-50\">11-50 employees</SelectItem>\n                <SelectItem value=\"51-200\">51-200 employees</SelectItem>\n                <SelectItem value=\"201-500\">201-500 employees</SelectItem>\n                <SelectItem value=\"501-1000\">501-1000 employees</SelectItem>\n                <SelectItem value=\"1001+\">1001+ employees</SelectItem>\n              </SelectContent>\n            </Select>\n          </div>\n\n          {/* Tagline */}\n          <div>\n            <label htmlFor=\"tagline\" className=\"block text-sm font-medium text-gray-700\">\n              Company Tagline\n            </label>\n            <Input\n              id=\"tagline\"\n              type=\"text\"\n              value={data.tagline || ''}\n              onChange={(e) => setData({ ...data, tagline: e.target.value })}\n              placeholder=\"e.g., Automate the 20% that eats 80% of your day\"\n              className=\"mt-1\"\n            />\n          </div>\n        </div>\n\n        {/* Data Preview */}\n        {showPreview && (\n          <div className=\"mt-6 p-4 bg-gray-50 rounded-lg\">\n            <h3 className=\"text-lg font-medium mb-4\">Enriched Data Preview</h3>\n            <div className=\"grid grid-cols-2 gap-4\">\n              {data.description && (\n                <div>\n                  <label className=\"block text-sm font-medium text-gray-700\">Description</label>\n                  <p className=\"mt-1 text-sm text-gray-600\">{data.description}</p>\n                </div>\n              )}\n              {data.website && (\n                <div>\n                  <label className=\"block text-sm font-medium text-gray-700\">Website</label>\n                  <p className=\"mt-1 text-sm text-gray-600\">{data.website}</p>\n                </div>\n              )}\n              {data.headquarters && (\n                <div>\n                  <label className=\"block text-sm font-medium text-gray-700\">Headquarters</label>\n                  <p className=\"mt-1 text-sm text-gray-600\">{data.headquarters}</p>\n                </div>\n              )}\n              {data.founded && (\n                <div>\n                  <label className=\"block text-sm font-medium text-gray-700\">Founded</label>\n                  <p className=\"mt-1 text-sm text-gray-600\">{data.founded}</p>\n                </div>\n              )}\n              {data.specialties && data.specialties.length > 0 && (\n                <div>\n                  <label className=\"block text-sm font-medium text-gray-700\">Specialties</label>\n                  <p className=\"mt-1 text-sm text-gray-600\">{data.specialties.join(', ')}</p>\n                </div>\n              )}\n              {data.employee_count && (\n                <div>\n                  <label className=\"block text-sm font-medium text-gray-700\">Employee Count</label>\n                  <p className=\"mt-1 text-sm text-gray-600\">{data.employee_count}</p>\n                </div>\n              )}\n            </div>\n                  </div>\n        )}\n\n        <div className=\"space-y-4\">\n          <div className=\"flex items-center justify-between\">\n            <div>\n              <h3 className=\"text-lg font-medium\">Connect Accounts</h3>\n              <p className=\"text-sm text-gray-500\">\n                Connect your Microsoft 365 and LinkedIn accounts to automatically fetch company information\n              </p>\n                  </div>\n            <div className=\"space-x-4\">\n              <Button\n                type=\"button\"\n                variant=\"outline\"\n                onClick={handleMicrosoftConnect}\n                className=\"flex items-center\"\n              >\n                <img src=\"/microsoft-logo.svg\" alt=\"Microsoft\" className=\"w-5 h-5 mr-2\" />\n                Connect Microsoft\n              </Button>\n              <Button \n                type=\"button\"\n                variant=\"outline\" \n                onClick={handleLinkedInConnect}\n                className=\"flex items-center\"\n              >\n                <img src=\"/linkedin-logo.svg\" alt=\"LinkedIn\" className=\"w-5 h-5 mr-2\" />\n                Connect LinkedIn\n              </Button>\n            </div>\n          </div>\n      </div>\n\n        <div className=\"flex justify-end space-x-4\">\n          <Button type=\"button\" variant=\"outline\" onClick={onBack}>\n            Back\n          </Button>\n          <Button type=\"submit\" isLoading={loading}>\n            Continue\n          </Button>\n        </div>\n      </form>\n    </Card>\n  );\n}; ","usedDeprecatedRules":[]},{"filePath":"/home/vonj/Github/Nexus/src/components/onboarding/SuccessCriteriaStep.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/vonj/Github/Nexus/src/components/onboarding/UserContextStep.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/vonj/Github/Nexus/src/components/patterns/ContentCard.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/vonj/Github/Nexus/src/components/patterns/LoadingStates.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/vonj/Github/Nexus/src/components/patterns/PageTemplates.tsx","messages":[{"ruleId":"react-refresh/only-export-components","severity":1,"message":"Fast refresh only works when a file only exports components. Use a new file to share constants or functions between components.","line":20,"column":14,"nodeType":"Identifier","messageId":"namedExport","endLine":20,"endColumn":27},{"ruleId":"react-refresh/only-export-components","severity":1,"message":"Fast refresh only works when a file only exports components. Use a new file to share constants or functions between components.","line":71,"column":14,"nodeType":"Identifier","messageId":"namedExport","endLine":71,"endColumn":30}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React from 'react';\n\n/**\n * Standardized Page Templates\n * \n * Provides consistent page layouts across the application.\n * Fixes page structure inconsistencies identified in the analysis.\n */\n\nexport interface DepartmentPageProps {\n  title: string;\n  subtitle: string;\n  children: React.ReactNode;\n}\n\nexport interface SettingsPageProps {\n  children: React.ReactNode;\n}\n\nexport const PageTemplates = {\n  /**\n   * Dashboard page template - reference implementation\n   */\n  Dashboard: ({ children }: { children: React.ReactNode }) => (\n    <div className=\"min-h-screen bg-gradient-to-br from-gray-50 via-blue-50/30 to-indigo-50/50 dark:from-gray-900 dark:via-gray-900 dark:to-gray-800\">\n      <div className=\"p-8 space-y-8\">\n        {children}\n      </div>\n    </div>\n  ),\n\n  /**\n   * Department page template - consistent structure\n   */\n  Department: ({ title, subtitle, children }: DepartmentPageProps) => (\n    <div className=\"min-h-screen bg-gradient-to-br from-gray-50 via-blue-50/30 to-indigo-50/50 dark:from-gray-900 dark:via-gray-900 dark:to-gray-800\">\n      <div className=\"p-8 space-y-8\">\n        <div className=\"mb-8\">\n          <h1 className=\"text-3xl font-bold mb-2\">{title}</h1>\n          <p className=\"text-lg\">{subtitle}</p>\n        </div>\n        {children}\n      </div>\n    </div>\n  ),\n\n  /**\n   * Settings page template - constrained width\n   */\n  Settings: ({ children }: SettingsPageProps) => (\n    <div className=\"min-h-screen bg-gradient-to-br from-gray-50 via-blue-50/30 to-indigo-50/50 dark:from-gray-900 dark:via-gray-900 dark:to-gray-800\">\n      <div className=\"p-8 max-w-4xl mx-auto space-y-8\">\n        {children}\n      </div>\n    </div>\n  ),\n\n  /**\n   * Authentication page template - split layout\n   */\n  Auth: ({ children }: { children: React.ReactNode }) => (\n    <div className=\"min-h-screen flex\">\n      {children}\n    </div>\n  )\n};\n\n/**\n * Higher-order component for applying page templates\n */\nexport const withPageTemplate = <P extends object>(\n  Component: React.ComponentType<P>,\n  templateType: 'dashboard' | 'department' | 'settings' | 'auth',\n  templateProps?: DepartmentPageProps\n) => {\n  return (props: P) => {\n    if (templateType === 'department' && templateProps) {\n      const DepartmentTemplate = PageTemplates.Department;\n      return (\n        <DepartmentTemplate {...templateProps}>\n          <Component {...props} />\n        </DepartmentTemplate>\n      );\n    }\n    \n    const Template = PageTemplates[templateType as keyof typeof PageTemplates] as React.ComponentType<{ children: React.ReactNode }>;\n    return (\n      <Template>\n        <Component {...props} />\n      </Template>\n    );\n  };\n};\n\nexport default PageTemplates; ","usedDeprecatedRules":[]},{"filePath":"/home/vonj/Github/Nexus/src/components/patterns/UnifiedComponents.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'Button' is defined but never used.","line":12,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":12,"endColumn":16},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'Skeleton' is defined but never used.","line":13,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":13,"endColumn":18},{"ruleId":"no-restricted-syntax","severity":1,"message":"Use design tokens instead of hardcoded colors (e.g., bg-primary, bg-secondary)","line":49,"column":22,"nodeType":"Literal","messageId":"restrictedSyntax","endLine":49,"endColumn":65},{"ruleId":"no-restricted-syntax","severity":1,"message":"Use design tokens instead of hardcoded text colors (e.g., text-foreground, text-muted-foreground)","line":49,"column":22,"nodeType":"Literal","messageId":"restrictedSyntax","endLine":49,"endColumn":65},{"ruleId":"no-restricted-syntax","severity":1,"message":"Use design tokens instead of hardcoded colors (e.g., bg-primary, bg-secondary)","line":55,"column":22,"nodeType":"Literal","messageId":"restrictedSyntax","endLine":55,"endColumn":68},{"ruleId":"no-restricted-syntax","severity":1,"message":"Use design tokens instead of hardcoded text colors (e.g., text-foreground, text-muted-foreground)","line":55,"column":22,"nodeType":"Literal","messageId":"restrictedSyntax","endLine":55,"endColumn":68},{"ruleId":"no-restricted-syntax","severity":1,"message":"Use design tokens instead of hardcoded colors (e.g., bg-primary, bg-secondary)","line":61,"column":22,"nodeType":"Literal","messageId":"restrictedSyntax","endLine":61,"endColumn":71},{"ruleId":"no-restricted-syntax","severity":1,"message":"Use design tokens instead of hardcoded text colors (e.g., text-foreground, text-muted-foreground)","line":61,"column":22,"nodeType":"Literal","messageId":"restrictedSyntax","endLine":61,"endColumn":71},{"ruleId":"no-restricted-syntax","severity":1,"message":"Use design tokens instead of hardcoded text colors (e.g., text-foreground, text-muted-foreground)","line":78,"column":38,"nodeType":"Literal","messageId":"restrictedSyntax","endLine":78,"endColumn":62},{"ruleId":"no-restricted-syntax","severity":1,"message":"Use design tokens instead of hardcoded text colors (e.g., text-foreground, text-muted-foreground)","line":80,"column":40,"nodeType":"Literal","messageId":"restrictedSyntax","endLine":80,"endColumn":62},{"ruleId":"no-restricted-syntax","severity":1,"message":"Use design tokens instead of hardcoded text colors (e.g., text-foreground, text-muted-foreground)","line":82,"column":33,"nodeType":"Literal","messageId":"restrictedSyntax","endLine":82,"endColumn":56},{"ruleId":"no-restricted-syntax","severity":1,"message":"Use design tokens instead of hardcoded text colors (e.g., text-foreground, text-muted-foreground)","line":89,"column":16,"nodeType":"Literal","messageId":"restrictedSyntax","endLine":89,"endColumn":32},{"ruleId":"no-restricted-syntax","severity":1,"message":"Use design tokens instead of hardcoded text colors (e.g., text-foreground, text-muted-foreground)","line":91,"column":16,"nodeType":"Literal","messageId":"restrictedSyntax","endLine":91,"endColumn":30},{"ruleId":"no-restricted-syntax","severity":1,"message":"Use design tokens instead of hardcoded text colors (e.g., text-foreground, text-muted-foreground)","line":93,"column":16,"nodeType":"Literal","messageId":"restrictedSyntax","endLine":93,"endColumn":31},{"ruleId":"no-restricted-syntax","severity":1,"message":"Use design tokens instead of hardcoded text colors (e.g., text-foreground, text-muted-foreground)","line":111,"column":32,"nodeType":"Literal","messageId":"restrictedSyntax","endLine":111,"endColumn":67},{"ruleId":"no-restricted-syntax","severity":1,"message":"Use design tokens instead of hardcoded text colors (e.g., text-foreground, text-muted-foreground)","line":130,"column":28,"nodeType":"Literal","messageId":"restrictedSyntax","endLine":130,"endColumn":62},{"ruleId":"no-restricted-syntax","severity":1,"message":"Use design tokens instead of hardcoded text colors (e.g., text-foreground, text-muted-foreground)","line":140,"column":35,"nodeType":"Literal","messageId":"restrictedSyntax","endLine":140,"endColumn":58},{"ruleId":"no-restricted-syntax","severity":1,"message":"Use design tokens instead of hardcoded text colors (e.g., text-foreground, text-muted-foreground)","line":271,"column":27,"nodeType":"Literal","messageId":"restrictedSyntax","endLine":271,"endColumn":113},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":302,"column":30,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":302,"endColumn":33,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[8421,8424],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[8421,8424],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"no-restricted-syntax","severity":1,"message":"Use design tokens instead of hardcoded colors (e.g., bg-primary, bg-secondary)","line":325,"column":38,"nodeType":"Literal","messageId":"restrictedSyntax","endLine":325,"endColumn":77}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":20,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\n * UnifiedComponents.tsx\n * Consolidated, reusable components to eliminate redundancy across the codebase\n * \n * Pillar: 1 (Efficient Automation) - Reduces maintenance overhead\n * Pillar: 5 (Speed & Performance) - Consistent bundle optimization\n */\n\nimport React from 'react';\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/Card';\nimport { Badge } from '@/components/ui/Badge';\nimport { Button } from '@/components/ui/Button';\nimport { Skeleton } from '@/components/ui/Skeleton';\nimport { cn } from '@/lib/utils/utils';\nimport { TrendingUp, TrendingDown, Minus, Sparkles, Brain, Zap, Lightbulb, BookOpen } from 'lucide-react';\n\n// ===== UNIFIED METRIC COMPONENTS =====\n\n/**\n * Unified KPI/Stats Card - Replaces both KpiCard and StatsCard\n */\nexport interface UnifiedMetricCardProps {\n  title: string;\n  value: string;\n  delta?: string;\n  badge?: 'AI' | 'Auto' | 'Insight' | 'Learning';\n  description?: string;\n  trend?: 'up' | 'down' | 'neutral';\n  className?: string;\n}\n\nexport const UnifiedMetricCard: React.FC<UnifiedMetricCardProps> = ({\n  title,\n  value,\n  delta,\n  badge,\n  description,\n  trend,\n  className\n}) => {\n  // Determine trend from delta if not explicitly provided\n  const determinedTrend = trend || (delta?.startsWith('+') ? 'up' : delta?.startsWith('-') ? 'down' : 'neutral');\n  \n  const getBadgeConfig = (badgeType?: string) => {\n    switch (badgeType) {\n      case 'AI':\n        return {\n          icon: Brain,\n          className: 'bg-blue-100 text-blue-800 border-blue-200',\n          label: 'AI Powered'\n        };\n      case 'Auto':\n        return {\n          icon: Zap,\n          className: 'bg-green-100 text-green-800 border-green-200',\n          label: 'Automated'\n        };\n      case 'Insight':\n        return {\n          icon: Lightbulb,\n          className: 'bg-purple-100 text-purple-800 border-purple-200',\n          label: 'Business Insight'\n        };\n      case 'Learning':\n        return {\n          icon: BookOpen,\n          className: 'bg-orange-100 text-orange-800 border-orange-200',\n          label: 'Learning System'\n        };\n      default:\n        return null;\n    }\n  };\n\n  const getTrendIcon = () => {\n    switch (determinedTrend) {\n      case 'up':\n        return <TrendingUp className=\"w-4 h-4 text-green-600\" />;\n      case 'down':\n        return <TrendingDown className=\"w-4 h-4 text-red-600\" />;\n      default:\n        return <Minus className=\"w-4 h-4 text-gray-400\" />;\n    }\n  };\n\n  const getTrendColor = () => {\n    switch (determinedTrend) {\n      case 'up':\n        return 'text-green-600';\n      case 'down':\n        return 'text-red-600';\n      default:\n        return 'text-gray-500';\n    }\n  };\n\n  const badgeConfig = getBadgeConfig(badge);\n\n  return (\n    <Card className={cn(\n      'relative overflow-hidden transition-all duration-200 hover:shadow-md',\n      badge && 'border-l-4',\n      badge === 'AI' && 'border-l-blue-500 bg-gradient-to-br from-blue-50/50 to-white',\n      badge === 'Auto' && 'border-l-green-500 bg-gradient-to-br from-green-50/50 to-white',\n      badge === 'Insight' && 'border-l-purple-500 bg-gradient-to-br from-purple-50/50 to-white',\n      badge === 'Learning' && 'border-l-orange-500 bg-gradient-to-br from-orange-50/50 to-white',\n      className\n    )}>\n      <CardHeader className=\"pb-2\">\n        <div className=\"flex items-center justify-between\">\n          <CardTitle className=\"text-sm font-medium text-gray-600\">{title}</CardTitle>\n          {badgeConfig && (\n            <Badge \n              variant=\"outline\" \n              className={cn('text-xs px-2 py-1', badgeConfig.className)}\n              title={badgeConfig.label}\n            >\n              <badgeConfig.icon className=\"w-3 h-3 mr-1\" />\n              {badge}\n            </Badge>\n          )}\n        </div>\n        {description && (\n          <CardDescription className=\"text-xs\">{description}</CardDescription>\n        )}\n      </CardHeader>\n      <CardContent>\n        <div className=\"flex items-center justify-between\">\n          <div>\n            <div className=\"text-2xl font-bold text-gray-900\">{value}</div>\n            {delta && (\n              <div className={cn('flex items-center gap-1 text-sm', getTrendColor())}>\n                {getTrendIcon()}\n                <span>{delta}</span>\n              </div>\n            )}\n          </div>\n          {badge && (\n            <div className=\"opacity-20\">\n              <Sparkles className=\"w-8 h-8 text-gray-400\" />\n            </div>\n          )}\n        </div>\n      </CardContent>\n    </Card>\n  );\n};\n\n// ===== UNIFIED DASHBOARD COMPONENTS =====\n\n/**\n * Unified Dashboard Header - Consistent across all dashboards\n */\ninterface DashboardHeaderProps {\n  title: string;\n  subtitle?: string;\n  actions?: React.ReactNode;\n  badges?: Array<{ label: string; variant?: 'default' | 'secondary' | 'destructive' | 'outline' }>;\n}\n\nexport const DashboardHeader: React.FC<DashboardHeaderProps> = ({\n  title,\n  subtitle,\n  actions,\n  badges\n}) => (\n  <div className=\"flex items-center justify-between mb-8\">\n    <div>\n      <div className=\"flex items-center gap-3 mb-2\">\n        <h1 className=\"text-3xl font-bold text-foreground\">{title}</h1>\n        {badges?.map((badge, index) => (\n          <Badge key={index} variant={badge.variant || 'default'}>\n            {badge.label}\n          </Badge>\n        ))}\n      </div>\n      {subtitle && (\n        <p className=\"text-lg text-muted-foreground\">{subtitle}</p>\n      )}\n    </div>\n    {actions && <div className=\"flex items-center gap-2\">{actions}</div>}\n  </div>\n);\n\n/**\n * Unified Metrics Grid - Consistent KPI layout\n */\ninterface MetricsGridProps {\n  children: React.ReactNode;\n  columns?: 2 | 3 | 4;\n  className?: string;\n}\n\nexport const MetricsGrid: React.FC<MetricsGridProps> = ({\n  children,\n  columns = 4,\n  className\n}) => {\n  const gridCols = {\n    2: 'grid-cols-1 md:grid-cols-2',\n    3: 'grid-cols-1 md:grid-cols-2 lg:grid-cols-3',\n    4: 'grid-cols-1 md:grid-cols-2 lg:grid-cols-4'\n  };\n\n  return (\n    <div className={cn('grid gap-4', gridCols[columns], className)}>\n      {children}\n    </div>\n  );\n};\n\n/**\n * Unified Content Section - Standardized content blocks\n */\ninterface ContentSectionProps {\n  title: string;\n  icon?: React.ComponentType<{ className?: string }>;\n  children: React.ReactNode;\n  className?: string;\n}\n\nexport const ContentSection: React.FC<ContentSectionProps> = ({\n  title,\n  icon: Icon,\n  children,\n  className\n}) => {\n  return (\n    <div className={cn('space-y-4', className)}>\n      <div className=\"flex items-center gap-2\">\n        {Icon && <Icon className=\"w-5 h-5 text-primary\" />}\n        <h2 className=\"text-xl font-semibold text-foreground\">{title}</h2>\n      </div>\n      {children}\n    </div>\n  );\n};\n\n// ===== UNIFIED DASHBOARD LAYOUT =====\n\n/**\n * Unified Dashboard Layout - Complete dashboard structure\n */\ninterface DashboardLayoutProps {\n  title: string;\n  subtitle?: string;\n  badge?: string;\n  children: React.ReactNode;\n  className?: string;\n}\n\nexport const DashboardLayout: React.FC<DashboardLayoutProps> = ({\n  title,\n  subtitle,\n  badge,\n  children,\n  className\n}) => {\n  return (\n    <div className={cn('min-h-screen bg-background text-foreground', className)}>\n      <div className=\"container mx-auto px-4 py-6 space-y-6\">\n        {/* Enhanced Header */}\n        <div className=\"text-center space-y-4\">\n          <div className=\"flex items-center justify-center gap-3\">\n            <h1 className=\"text-3xl font-bold text-foreground\">\n              {title}\n            </h1>\n            {badge && (\n              <Badge \n                variant=\"outline\" \n                className=\"bg-gradient-to-r from-blue-100 to-purple-100 text-blue-800 border-blue-200 px-3 py-1\"\n              >\n                <Sparkles className=\"w-3 h-3 mr-1\" />\n                {badge}\n              </Badge>\n            )}\n          </div>\n          {subtitle && (\n            <p className=\"text-lg text-muted-foreground max-w-3xl mx-auto leading-relaxed\">\n              {subtitle}\n            </p>\n          )}\n        </div>\n        {/* Content */}\n        <div className=\"space-y-6\">\n          {children}\n        </div>\n      </div>\n    </div>\n  );\n};\n\n// ===== UNIFIED DATA DISPLAY =====\n\n/**\n * Unified Table Card - Consistent table presentation\n */\ninterface TableCardProps {\n  title: string;\n  description?: string;\n  headers: string[];\n  data: Array<Record<string, any>>;\n  loading?: boolean;\n  className?: string;\n}\n\nexport const TableCard: React.FC<TableCardProps> = ({\n  title,\n  description,\n  headers,\n  data,\n  loading = false,\n  className\n}) => {\n  if (loading) {\n    return (\n      <Card className={className}>\n        <CardHeader>\n          <CardTitle>{title}</CardTitle>\n          {description && <CardDescription>{description}</CardDescription>}\n        </CardHeader>\n        <CardContent>\n          <div className=\"space-y-3\">\n            {[...Array(5)].map((_, i) => (\n              <div key={i} className=\"h-8 bg-gray-200 rounded animate-pulse\" />\n            ))}\n          </div>\n        </CardContent>\n      </Card>\n    );\n  }\n\n  return (\n    <Card className={className}>\n      <CardHeader>\n        <CardTitle className=\"flex items-center gap-2\">\n          {title}\n          <Badge variant=\"outline\" className=\"text-xs\">\n            {data.length} items\n          </Badge>\n        </CardTitle>\n        {description && <CardDescription>{description}</CardDescription>}\n      </CardHeader>\n      <CardContent>\n        <div className=\"overflow-x-auto\">\n          <table className=\"w-full\">\n            <thead>\n              <tr className=\"border-b border-border\">\n                {headers.map((header, index) => (\n                  <th key={index} className=\"text-left py-2 px-3 text-sm font-medium text-muted-foreground\">\n                    {header}\n                  </th>\n                ))}\n              </tr>\n            </thead>\n            <tbody className=\"divide-y divide-border\">\n              {data.map((row, rowIndex) => (\n                <tr key={rowIndex} className=\"hover:bg-muted transition-colors\">\n                  {headers.map((header, colIndex) => (\n                    <td key={colIndex} className=\"py-3 px-3 text-sm text-foreground\">\n                      {row[header.toLowerCase().replace(/\\s+/g, '_')] || '-'}\n                    </td>\n                  ))}\n                </tr>\n              ))}\n            </tbody>\n          </table>\n        </div>\n      </CardContent>\n    </Card>\n  );\n};\n\n// ===== EXPORTS =====\n\nexport {\n  type DashboardHeaderProps,\n  type MetricsGridProps,\n  type ContentSectionProps,\n  type DashboardLayoutProps,\n  type TableCardProps\n};\n\nexport default {\n  UnifiedMetricCard,\n  DashboardLayout,\n  ContentSection,\n  MetricsGrid,\n  TableCard\n}; ","usedDeprecatedRules":[]},{"filePath":"/home/vonj/Github/Nexus/src/components/patterns/UnifiedPages.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'TableCard' is defined but never used.","line":14,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":14,"endColumn":12},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'Button' is defined but never used.","line":20,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":20,"endColumn":16},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'AlertTriangle' is defined but never used.","line":27,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":27,"endColumn":16},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'AlertDescription' is defined but never used.","line":36,"column":17,"nodeType":null,"messageId":"unusedVar","endLine":36,"endColumn":33},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'QuickAction' is defined but never used.","line":41,"column":11,"nodeType":null,"messageId":"unusedVar","endLine":41,"endColumn":22},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'ChartData' is defined but never used.","line":47,"column":11,"nodeType":null,"messageId":"unusedVar","endLine":47,"endColumn":20},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'ActivityItem' is defined but never used.","line":52,"column":11,"nodeType":null,"messageId":"unusedVar","endLine":52,"endColumn":23},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":95,"column":31,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":95,"endColumn":34,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2178,2181],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2178,2181],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"no-restricted-syntax","severity":1,"message":"Use design tokens instead of hardcoded text colors (e.g., text-foreground, text-muted-foreground)","line":294,"column":30,"nodeType":"Literal","messageId":"restrictedSyntax","endLine":294,"endColumn":58},{"ruleId":"no-restricted-syntax","severity":1,"message":"Use design tokens instead of hardcoded text colors (e.g., text-foreground, text-muted-foreground)","line":328,"column":28,"nodeType":"Literal","messageId":"restrictedSyntax","endLine":328,"endColumn":51},{"ruleId":"no-restricted-syntax","severity":1,"message":"Use design tokens instead of hardcoded text colors (e.g., text-foreground, text-muted-foreground)","line":329,"column":32,"nodeType":"Literal","messageId":"restrictedSyntax","endLine":329,"endColumn":47},{"ruleId":"no-restricted-syntax","severity":1,"message":"Use design tokens instead of hardcoded colors (e.g., bg-primary, bg-secondary)","line":330,"column":48,"nodeType":"Literal","messageId":"restrictedSyntax","endLine":330,"endColumn":75},{"ruleId":"no-restricted-syntax","severity":1,"message":"Use design tokens instead of hardcoded text colors (e.g., text-foreground, text-muted-foreground)","line":330,"column":48,"nodeType":"Literal","messageId":"restrictedSyntax","endLine":330,"endColumn":75},{"ruleId":"no-restricted-syntax","severity":1,"message":"Use design tokens instead of hardcoded text colors (e.g., text-foreground, text-muted-foreground)","line":334,"column":36,"nodeType":"Literal","messageId":"restrictedSyntax","endLine":334,"endColumn":51},{"ruleId":"no-restricted-syntax","severity":1,"message":"Use design tokens instead of hardcoded colors (e.g., bg-primary, bg-secondary)","line":340,"column":31,"nodeType":"Literal","messageId":"restrictedSyntax","endLine":340,"endColumn":68},{"ruleId":"no-restricted-syntax","severity":1,"message":"Use design tokens instead of hardcoded colors (e.g., bg-primary, bg-secondary)","line":349,"column":44,"nodeType":"Literal","messageId":"restrictedSyntax","endLine":349,"endColumn":74},{"ruleId":"no-restricted-syntax","severity":1,"message":"Use design tokens instead of hardcoded text colors (e.g., text-foreground, text-muted-foreground)","line":350,"column":32,"nodeType":"Literal","messageId":"restrictedSyntax","endLine":350,"endColumn":56},{"ruleId":"no-restricted-syntax","severity":1,"message":"Use design tokens instead of hardcoded text colors (e.g., text-foreground, text-muted-foreground)","line":351,"column":31,"nodeType":"Literal","messageId":"restrictedSyntax","endLine":351,"endColumn":61},{"ruleId":"no-restricted-syntax","severity":1,"message":"Use design tokens instead of hardcoded text colors (e.g., text-foreground, text-muted-foreground)","line":352,"column":30,"nodeType":"Literal","messageId":"restrictedSyntax","endLine":352,"endColumn":46},{"ruleId":"no-restricted-syntax","severity":1,"message":"Use design tokens instead of hardcoded text colors (e.g., text-foreground, text-muted-foreground)","line":360,"column":41,"nodeType":"Literal","messageId":"restrictedSyntax","endLine":360,"endColumn":83},{"ruleId":"no-restricted-syntax","severity":1,"message":"Use design tokens instead of hardcoded text colors (e.g., text-foreground, text-muted-foreground)","line":361,"column":30,"nodeType":"Literal","messageId":"restrictedSyntax","endLine":361,"endColumn":53},{"ruleId":"no-restricted-syntax","severity":1,"message":"Use design tokens instead of hardcoded text colors (e.g., text-foreground, text-muted-foreground)","line":369,"column":35,"nodeType":"Literal","messageId":"restrictedSyntax","endLine":369,"endColumn":79},{"ruleId":"no-restricted-syntax","severity":1,"message":"Use design tokens instead of hardcoded text colors (e.g., text-foreground, text-muted-foreground)","line":370,"column":30,"nodeType":"Literal","messageId":"restrictedSyntax","endLine":370,"endColumn":53},{"ruleId":"no-restricted-syntax","severity":1,"message":"Use design tokens instead of hardcoded text colors (e.g., text-foreground, text-muted-foreground)","line":379,"column":30,"nodeType":"Literal","messageId":"restrictedSyntax","endLine":379,"endColumn":53},{"ruleId":"no-restricted-syntax","severity":1,"message":"Use design tokens instead of hardcoded text colors (e.g., text-foreground, text-muted-foreground)","line":395,"column":31,"nodeType":"Literal","messageId":"restrictedSyntax","endLine":395,"endColumn":56},{"ruleId":"no-restricted-syntax","severity":1,"message":"Use design tokens instead of hardcoded text colors (e.g., text-foreground, text-muted-foreground)","line":396,"column":32,"nodeType":"Literal","messageId":"restrictedSyntax","endLine":396,"endColumn":49},{"ruleId":"no-restricted-syntax","severity":1,"message":"Use design tokens instead of hardcoded colors (e.g., bg-primary, bg-secondary)","line":397,"column":48,"nodeType":"Literal","messageId":"restrictedSyntax","endLine":397,"endColumn":79},{"ruleId":"no-restricted-syntax","severity":1,"message":"Use design tokens instead of hardcoded text colors (e.g., text-foreground, text-muted-foreground)","line":397,"column":48,"nodeType":"Literal","messageId":"restrictedSyntax","endLine":397,"endColumn":79},{"ruleId":"no-restricted-syntax","severity":1,"message":"Use design tokens instead of hardcoded text colors (e.g., text-foreground, text-muted-foreground)","line":401,"column":36,"nodeType":"Literal","messageId":"restrictedSyntax","endLine":401,"endColumn":53},{"ruleId":"no-restricted-syntax","severity":1,"message":"Use design tokens instead of hardcoded text colors (e.g., text-foreground, text-muted-foreground)","line":407,"column":25,"nodeType":"Literal","messageId":"restrictedSyntax","endLine":407,"endColumn":85},{"ruleId":"no-restricted-syntax","severity":1,"message":"Use design tokens instead of hardcoded text colors (e.g., text-foreground, text-muted-foreground)","line":411,"column":24,"nodeType":"Literal","messageId":"restrictedSyntax","endLine":411,"endColumn":47},{"ruleId":"no-restricted-syntax","severity":1,"message":"Use design tokens instead of hardcoded text colors (e.g., text-foreground, text-muted-foreground)","line":415,"column":25,"nodeType":"Literal","messageId":"restrictedSyntax","endLine":415,"endColumn":85},{"ruleId":"no-restricted-syntax","severity":1,"message":"Use design tokens instead of hardcoded text colors (e.g., text-foreground, text-muted-foreground)","line":419,"column":24,"nodeType":"Literal","messageId":"restrictedSyntax","endLine":419,"endColumn":47},{"ruleId":"no-restricted-syntax","severity":1,"message":"Use design tokens instead of hardcoded text colors (e.g., text-foreground, text-muted-foreground)","line":423,"column":25,"nodeType":"Literal","messageId":"restrictedSyntax","endLine":423,"endColumn":85},{"ruleId":"no-restricted-syntax","severity":1,"message":"Use design tokens instead of hardcoded text colors (e.g., text-foreground, text-muted-foreground)","line":429,"column":41,"nodeType":"Literal","messageId":"restrictedSyntax","endLine":429,"endColumn":87},{"ruleId":"no-restricted-syntax","severity":1,"message":"Use design tokens instead of hardcoded colors (e.g., bg-primary, bg-secondary)","line":430,"column":33,"nodeType":"Literal","messageId":"restrictedSyntax","endLine":430,"endColumn":92},{"ruleId":"no-restricted-syntax","severity":1,"message":"Use design tokens instead of hardcoded text colors (e.g., text-foreground, text-muted-foreground)","line":438,"column":25,"nodeType":"Literal","messageId":"restrictedSyntax","endLine":438,"endColumn":85},{"ruleId":"no-restricted-syntax","severity":1,"message":"Use design tokens instead of hardcoded text colors (e.g., text-foreground, text-muted-foreground)","line":442,"column":24,"nodeType":"Literal","messageId":"restrictedSyntax","endLine":442,"endColumn":47},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'EnhancedActivityFeed' is assigned a value but never used.","line":450,"column":7,"nodeType":null,"messageId":"unusedVar","endLine":450,"endColumn":27},{"ruleId":"no-restricted-syntax","severity":1,"message":"Use design tokens instead of hardcoded colors (e.g., bg-primary, bg-secondary)","line":453,"column":25,"nodeType":"Literal","messageId":"restrictedSyntax","endLine":453,"endColumn":68},{"ruleId":"no-restricted-syntax","severity":1,"message":"Use design tokens instead of hardcoded text colors (e.g., text-foreground, text-muted-foreground)","line":453,"column":25,"nodeType":"Literal","messageId":"restrictedSyntax","endLine":453,"endColumn":68},{"ruleId":"no-restricted-syntax","severity":1,"message":"Use design tokens instead of hardcoded colors (e.g., bg-primary, bg-secondary)","line":454,"column":27,"nodeType":"Literal","messageId":"restrictedSyntax","endLine":454,"endColumn":73},{"ruleId":"no-restricted-syntax","severity":1,"message":"Use design tokens instead of hardcoded text colors (e.g., text-foreground, text-muted-foreground)","line":454,"column":27,"nodeType":"Literal","messageId":"restrictedSyntax","endLine":454,"endColumn":73},{"ruleId":"no-restricted-syntax","severity":1,"message":"Use design tokens instead of hardcoded colors (e.g., bg-primary, bg-secondary)","line":455,"column":30,"nodeType":"Literal","messageId":"restrictedSyntax","endLine":455,"endColumn":79},{"ruleId":"no-restricted-syntax","severity":1,"message":"Use design tokens instead of hardcoded text colors (e.g., text-foreground, text-muted-foreground)","line":455,"column":30,"nodeType":"Literal","messageId":"restrictedSyntax","endLine":455,"endColumn":79},{"ruleId":"no-restricted-syntax","severity":1,"message":"Use design tokens instead of hardcoded colors (e.g., bg-primary, bg-secondary)","line":458,"column":23,"nodeType":"Literal","messageId":"restrictedSyntax","endLine":458,"endColumn":66},{"ruleId":"no-restricted-syntax","severity":1,"message":"Use design tokens instead of hardcoded text colors (e.g., text-foreground, text-muted-foreground)","line":458,"column":23,"nodeType":"Literal","messageId":"restrictedSyntax","endLine":458,"endColumn":66},{"ruleId":"no-restricted-syntax","severity":1,"message":"Use design tokens instead of hardcoded colors (e.g., bg-primary, bg-secondary)","line":476,"column":40,"nodeType":"Literal","messageId":"restrictedSyntax","endLine":476,"endColumn":90},{"ruleId":"no-restricted-syntax","severity":1,"message":"Use design tokens instead of hardcoded text colors (e.g., text-foreground, text-muted-foreground)","line":478,"column":30,"nodeType":"Literal","messageId":"restrictedSyntax","endLine":478,"endColumn":65},{"ruleId":"no-restricted-syntax","severity":1,"message":"Use design tokens instead of hardcoded text colors (e.g., text-foreground, text-muted-foreground)","line":480,"column":35,"nodeType":"Literal","messageId":"restrictedSyntax","endLine":480,"endColumn":58}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":50,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\n * UnifiedPages.tsx\n * Unified page components to eliminate redundant page implementations\n * \n * Pillar: 1 (Efficient Automation) - Reduces page maintenance overhead\n * Pillar: 5 (Speed & Performance) - Eliminates redundant page code\n */\n\nimport React, { useState } from 'react';\nimport type { LucideIcon } from 'lucide-react';\nimport { \n  DashboardLayout, \n  ContentSection, \n  TableCard,\n  type UnifiedMetricCardProps \n} from './UnifiedComponents';\nimport { SimpleBarChart } from '@/components/dashboard/SimpleBarChart';\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/Card';\nimport { Badge } from '@/components/ui/Badge';\nimport { Button } from '@/components/ui/Button';\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from '@/components/ui/Tabs';\nimport { \n  Brain, \n  Lightbulb, \n  TrendingUp, \n  Users, \n  AlertTriangle, \n  CheckCircle, \n  ArrowUpRight,\n  BookOpen,\n  Zap,\n  Target,\n  Globe,\n  Award\n} from 'lucide-react';\nimport { Alert, AlertDescription } from '@/components/ui/Alert';\nimport { ErrorBoundary } from 'react-error-boundary';\n\n// ===== UNIFIED DEPARTMENT PAGE =====\n\ninterface QuickAction {\n  label: string;\n  icon: LucideIcon;\n  onClick: () => void;\n}\n\ninterface ChartData {\n  name: string;\n  value: number;\n}\n\ninterface ActivityItem {\n  description: string;\n  status: string;\n  time: string;\n  type: string;\n}\n\ninterface BusinessInsight {\n  crossDepartmentalImpact: string[];\n  keyBusinessDrivers: string[];\n  commonChallenges: string[];\n  bestPractices: string[];\n  aiRecommendations: string[];\n}\n\ninterface EducationalContent {\n  whatThisMeans: string;\n  whyItMatters: string;\n  howToImprove: string[];\n  industryBenchmarks: string;\n}\n\ninterface EnhancedKPI {\n  title: string;\n  value: string;\n  delta?: string;\n  badge?: 'AI' | 'Auto' | 'Insight' | 'Learning';\n}\n\ninterface EnhancedActivity {\n  description: string;\n  status: string;\n  time: string;\n  type: string;\n  badge?: 'AI' | 'Auto' | 'Insight' | 'Learning' | 'Collaboration';\n}\n\ninterface DepartmentConfig {\n  title: string;\n  subtitle: string;\n  kpis: EnhancedKPI[];\n  quickActions: Array<{\n    label: string;\n    icon: React.ComponentType<any>;\n    onClick: () => void;\n  }>;\n  charts: {\n    primary: {\n      title: string;\n      description: string;\n      data: Array<{\n        name: string;\n        value: number;\n        insight?: string;\n      }>;\n    };\n    secondary: {\n      title: string;\n      description: string;\n      data: Array<{\n        name: string;\n        value: number;\n        insight?: string;\n      }>;\n    };\n  };\n  activities: EnhancedActivity[];\n  businessInsights?: BusinessInsight;\n  educationalContent?: EducationalContent;\n}\n\n// ===== UNIFIED SETTINGS PAGE =====\n\ninterface SettingsSection {\n  id: string;\n  title: string;\n  description: string;\n  component: React.ComponentType;\n}\n\ninterface SettingsPageConfig {\n  title: string;\n  description: string;\n  sections: SettingsSection[];\n}\n\n/**\n * UnifiedSettingsPage - Replaces all settings pages\n */\nexport const UnifiedSettingsPage: React.FC<{ config: SettingsPageConfig }> = ({ config }) => {\n  const [activeSection, setActiveSection] = React.useState(config.sections[0]?.id);\n\n  const currentSection = config.sections.find(s => s.id === activeSection);\n  const CurrentComponent = currentSection?.component;\n\n  return (\n    <div className=\"max-w-6xl mx-auto p-8\">\n      <div className=\"mb-8\">\n        <h1 className=\"text-3xl font-bold text-foreground mb-2\">{config.title}</h1>\n        <p className=\"text-lg text-muted-foreground\">{config.description}</p>\n      </div>\n\n      <div className=\"grid grid-cols-1 lg:grid-cols-4 gap-8\">\n        <div className=\"lg:col-span-1\">\n          <nav className=\"space-y-2\">\n            {config.sections.map((section) => (\n              <button\n                key={section.id}\n                onClick={() => setActiveSection(section.id)}\n                className={`w-full text-left p-3 rounded-lg transition-colors duration-200 ${\n                  activeSection === section.id\n                    ? 'bg-primary text-primary-foreground'\n                    : 'hover:bg-muted text-muted-foreground hover:text-foreground'\n                }`}\n              >\n                <div className=\"font-medium\">{section.title}</div>\n                <div className=\"text-sm opacity-80\">{section.description}</div>\n              </button>\n            ))}\n          </nav>\n        </div>\n\n        <div className=\"lg:col-span-3\">\n          <ContentSection title=\"\" className=\"mb-8\">\n            {CurrentComponent && <CurrentComponent />}\n          </ContentSection>\n        </div>\n      </div>\n    </div>\n  );\n};\n\n// ===== UNIFIED ANALYTICS PAGE =====\n\ninterface AnalyticsConfig {\n  title: string;\n  subtitle: string;\n  metrics: UnifiedMetricCardProps[];\n  tabs: Array<{\n    id: string;\n    label: string;\n    content: React.ComponentType;\n  }>;\n}\n\n/**\n * UnifiedAnalyticsPage - Single component to replace all analytics pages\n * Replaces: AnalyticsDashboardPage, BusinessHealthDetail, etc.\n */\nexport const UnifiedAnalyticsPage: React.FC<{ config: AnalyticsConfig }> = ({ config }) => {\n  const [activeTab, setActiveTab] = React.useState(config.tabs[0]?.id);\n\n  const currentTab = config.tabs.find(t => t.id === activeTab);\n  const CurrentComponent = currentTab?.content;\n\n  return (\n    <DashboardLayout\n      title={config.title}\n      subtitle={config.subtitle}\n    >\n      {/* Tab Navigation */}\n      <div className=\"border-b border-border mb-8\">\n        <nav className=\"flex space-x-8\">\n          {config.tabs.map((tab) => (\n            <button\n              key={tab.id}\n              onClick={() => setActiveTab(tab.id)}\n              className={`py-4 px-1 border-b-2 font-medium text-sm transition-colors duration-200 ${\n                activeTab === tab.id\n                  ? 'border-primary text-primary'\n                  : 'border-transparent text-muted-foreground hover:text-foreground hover:border-muted'\n              }`}\n            >\n              {tab.label}\n            </button>\n          ))}\n        </nav>\n      </div>\n\n      {/* Tab Content */}\n      <div>\n        {CurrentComponent && <CurrentComponent />}\n      </div>\n    </DashboardLayout>\n  );\n};\n\n// ===== UNIFIED CALLBACK PAGE =====\n\ninterface CallbackPageConfig {\n  service: string;\n  title: string;\n  description: string;\n  successMessage: string;\n  errorMessage: string;\n  redirectPath: string;\n}\n\n/**\n * UnifiedCallbackPage - Single component to replace all OAuth callback pages\n * Replaces: Microsoft365Callback, GoogleWorkspaceCallback, etc.\n */\nexport const UnifiedCallbackPage: React.FC<{ config: CallbackPageConfig }> = ({ config }) => {\n  const [status, setStatus] = React.useState<'loading' | 'success' | 'error'>('loading');\n\n  React.useEffect(() => {\n    // Simulate callback processing\n    const timer = setTimeout(() => {\n      setStatus(Math.random() > 0.1 ? 'success' : 'error');\n    }, 2000);\n\n    return () => clearTimeout(timer);\n  }, []);\n\n  return (\n    <div className=\"min-h-screen flex items-center justify-center bg-background\">\n      <ContentSection title=\"\" className=\"max-w-md w-full mx-4\">\n        <div className=\"text-center\">\n          {status === 'loading' && (\n            <>\n              <div className=\"animate-spin rounded-full h-12 w-12 border-b-2 border-primary mx-auto mb-4\"></div>\n              <h2 className=\"text-xl font-semibold mb-2\">{config.title}</h2>\n              <p className=\"text-muted-foreground\">{config.description}</p>\n            </>\n          )}\n          \n          {status === 'success' && (\n            <>\n              <div className=\"text-emerald-500 text-4xl mb-4\">✓</div>\n              <h2 className=\"text-xl font-semibold mb-2\">Success!</h2>\n              <p className=\"text-muted-foreground mb-4\">{config.successMessage}</p>\n              <button \n                onClick={() => window.location.href = config.redirectPath}\n                className=\"bg-primary text-primary-foreground px-4 py-2 rounded-lg hover:bg-primary/90 transition-colors\"\n              >\n                Continue\n              </button>\n            </>\n          )}\n          \n          {status === 'error' && (\n            <>\n              <div className=\"text-red-500 text-4xl mb-4\">✗</div>\n              <h2 className=\"text-xl font-semibold mb-2\">Error</h2>\n              <p className=\"text-muted-foreground mb-4\">{config.errorMessage}</p>\n              <button \n                onClick={() => window.location.href = '/integrations'}\n                className=\"bg-primary text-primary-foreground px-4 py-2 rounded-lg hover:bg-primary/90 transition-colors\"\n              >\n                Try Again\n              </button>\n            </>\n          )}\n        </div>\n      </ContentSection>\n    </div>\n  );\n};\n\n// ===== EXPORTS =====\n\nexport {\n  type DepartmentConfig,\n  type SettingsPageConfig,\n  type AnalyticsConfig,\n  type CallbackPageConfig\n}; \n\n// AI-Powered Insights Panel Component\nconst AIInsightsPanel: React.FC<{ insights: BusinessInsight }> = ({ insights }) => {\n  const [activeInsight, setActiveInsight] = useState<string>('recommendations');\n\n  return (\n    <Card className=\"border-blue-200 bg-gradient-to-br from-blue-50 to-indigo-50\">\n      <CardHeader>\n        <div className=\"flex items-center gap-2\">\n          <Brain className=\"w-5 h-5 text-blue-600\" />\n          <CardTitle className=\"text-blue-900\">AI Business Intelligence</CardTitle>\n          <Badge variant=\"secondary\" className=\"bg-blue-100 text-blue-800\">\n            Powered by Nexus AI\n          </Badge>\n        </div>\n        <CardDescription className=\"text-blue-700\">\n          Intelligent insights that connect your department to the bigger picture\n        </CardDescription>\n      </CardHeader>\n      <CardContent>\n        <Tabs value={activeInsight} onValueChange={setActiveInsight} className=\"w-full\">\n          <TabsList className=\"grid w-full grid-cols-4 bg-blue-100\">\n            <TabsTrigger value=\"recommendations\" className=\"text-xs\">AI Recommendations</TabsTrigger>\n            <TabsTrigger value=\"impact\" className=\"text-xs\">Cross-Dept Impact</TabsTrigger>\n            <TabsTrigger value=\"drivers\" className=\"text-xs\">Business Drivers</TabsTrigger>\n            <TabsTrigger value=\"practices\" className=\"text-xs\">Best Practices</TabsTrigger>\n          </TabsList>\n          \n          <TabsContent value=\"recommendations\" className=\"space-y-3 mt-4\">\n            {insights.aiRecommendations.map((rec, index) => (\n              <Alert key={index} className=\"border-green-200 bg-green-50\">\n                <Zap className=\"h-4 w-4 text-green-600\" />\n                <h3 className=\"font-semibold text-green-800\">AI Recommendation #{index + 1}</h3>\n                <p className=\"text-green-700\">{rec}</p>\n              </Alert>\n            ))}\n          </TabsContent>\n          \n          <TabsContent value=\"impact\" className=\"space-y-3 mt-4\">\n            {insights.crossDepartmentalImpact.map((impact, index) => (\n              <div key={index} className=\"flex items-start gap-3 p-3 bg-white rounded-lg border border-blue-100\">\n                <ArrowUpRight className=\"w-4 h-4 text-blue-600 mt-1 flex-shrink-0\" />\n                <p className=\"text-sm text-gray-700\">{impact}</p>\n              </div>\n            ))}\n          </TabsContent>\n          \n          <TabsContent value=\"drivers\" className=\"space-y-3 mt-4\">\n            {insights.keyBusinessDrivers.map((driver, index) => (\n              <div key={index} className=\"flex items-start gap-3 p-3 bg-white rounded-lg border border-blue-100\">\n                <Target className=\"w-4 h-4 text-purple-600 mt-1 flex-shrink-0\" />\n                <p className=\"text-sm text-gray-700\">{driver}</p>\n              </div>\n            ))}\n          </TabsContent>\n          \n          <TabsContent value=\"practices\" className=\"space-y-3 mt-4\">\n            {insights.bestPractices.map((practice, index) => (\n              <div key={index} className=\"flex items-start gap-3 p-3 bg-white rounded-lg border border-blue-100\">\n                <Award className=\"w-4 h-4 text-orange-600 mt-1 flex-shrink-0\" />\n                <p className=\"text-sm text-gray-700\">{practice}</p>\n              </div>\n            ))}\n          </TabsContent>\n        </Tabs>\n      </CardContent>\n    </Card>\n  );\n};\n\n// Business Education Panel Component\nconst BusinessEducationPanel: React.FC<{ content: EducationalContent }> = ({ content }) => {\n  return (\n    <Card className=\"border-purple-200 bg-gradient-to-br from-purple-50 to-pink-50\">\n      <CardHeader>\n        <div className=\"flex items-center gap-2\">\n          <BookOpen className=\"w-5 h-5 text-purple-600\" />\n          <CardTitle className=\"text-purple-900\">Business Education Center</CardTitle>\n          <Badge variant=\"secondary\" className=\"bg-purple-100 text-purple-800\">\n            Learn & Grow\n          </Badge>\n        </div>\n        <CardDescription className=\"text-purple-700\">\n          Understanding your business better leads to better decisions\n        </CardDescription>\n      </CardHeader>\n      <CardContent className=\"space-y-4\">\n        <div className=\"bg-white rounded-lg p-4 border border-purple-100\">\n          <h4 className=\"font-semibold text-purple-900 mb-2 flex items-center gap-2\">\n            <Lightbulb className=\"w-4 h-4\" />\n            What This Means\n          </h4>\n          <p className=\"text-sm text-gray-700\">{content.whatThisMeans}</p>\n        </div>\n        \n        <div className=\"bg-white rounded-lg p-4 border border-purple-100\">\n          <h4 className=\"font-semibold text-purple-900 mb-2 flex items-center gap-2\">\n            <TrendingUp className=\"w-4 h-4\" />\n            Why It Matters\n          </h4>\n          <p className=\"text-sm text-gray-700\">{content.whyItMatters}</p>\n        </div>\n        \n        <div className=\"bg-white rounded-lg p-4 border border-purple-100\">\n          <h4 className=\"font-semibold text-purple-900 mb-2 flex items-center gap-2\">\n            <CheckCircle className=\"w-4 h-4\" />\n            How to Improve\n          </h4>\n          <ul className=\"space-y-2\">\n            {content.howToImprove.map((tip, index) => (\n              <li key={index} className=\"text-sm text-gray-700 flex items-start gap-2\">\n                <span className=\"w-1.5 h-1.5 bg-purple-400 rounded-full mt-2 flex-shrink-0\"></span>\n                {tip}\n              </li>\n            ))}\n          </ul>\n        </div>\n        \n        <div className=\"bg-white rounded-lg p-4 border border-purple-100\">\n          <h4 className=\"font-semibold text-purple-900 mb-2 flex items-center gap-2\">\n            <Globe className=\"w-4 h-4\" />\n            Industry Benchmarks\n          </h4>\n          <p className=\"text-sm text-gray-700\">{content.industryBenchmarks}</p>\n        </div>\n      </CardContent>\n    </Card>\n  );\n};\n\n// Enhanced Activity Feed with Badges\nconst EnhancedActivityFeed: React.FC<{ activities: EnhancedActivity[] }> = ({ activities }) => {\n  const getBadgeColor = (badge?: string) => {\n    switch (badge) {\n      case 'AI': return 'bg-blue-100 text-blue-800 border-blue-200';\n      case 'Auto': return 'bg-green-100 text-green-800 border-green-200';\n      case 'Insight': return 'bg-purple-100 text-purple-800 border-purple-200';\n      case 'Learning': return 'bg-orange-100 text-orange-800 border-orange-200';\n      case 'Collaboration': return 'bg-pink-100 text-pink-800 border-pink-200';\n      default: return 'bg-gray-100 text-gray-800 border-gray-200';\n    }\n  };\n\n  return (\n    <Card>\n      <CardHeader>\n        <CardTitle className=\"flex items-center gap-2\">\n          <Users className=\"w-5 h-5\" />\n          Intelligent Activity Feed\n        </CardTitle>\n        <CardDescription>\n          Real-time insights and cross-departmental collaboration\n        </CardDescription>\n      </CardHeader>\n      <CardContent>\n        <div className=\"space-y-4\">\n          {activities.map((activity, index) => (\n            <div key={index} className=\"flex items-start gap-3 p-3 bg-gray-50 rounded-lg\">\n              <div className=\"flex-1\">\n                <p className=\"text-sm font-medium text-gray-900\">{activity.description}</p>\n                <div className=\"flex items-center gap-2 mt-1\">\n                  <span className=\"text-xs text-gray-500\">{activity.time}</span>\n                  {activity.badge && (\n                    <Badge \n                      variant=\"outline\" \n                      className={`text-xs ${getBadgeColor(activity.badge)}`}\n                    >\n                      {activity.badge}\n                    </Badge>\n                  )}\n                </div>\n              </div>\n              <Badge variant=\"outline\" className=\"text-xs\">\n                {activity.status}\n              </Badge>\n            </div>\n          ))}\n        </div>\n      </CardContent>\n    </Card>\n  );\n};\n\n// Main Unified Department Page Component\nexport const UnifiedDepartmentPage: React.FC<{ config: DepartmentConfig }> = ({ config }) => {\n  const [tab, setTab] = React.useState('think');\n\n  return (\n    <DashboardLayout title={config.title} subtitle={config.subtitle}>\n      <Tabs value={tab} onValueChange={setTab} className=\"mb-8\">\n        <TabsList aria-label=\"Department Tabs\">\n          <TabsTrigger value=\"think\">THINK (Analysis)</TabsTrigger>\n          <TabsTrigger value=\"see\">SEE (Advice)</TabsTrigger>\n          <TabsTrigger value=\"act\">ACT (Resources)</TabsTrigger>\n        </TabsList>\n        {/* THINK: Analysis Tab */}\n        <TabsContent value=\"think\">\n          <ErrorBoundary fallback={<div>Failed to load THINK tab.</div>}>\n            {/* 1. KPI Grid */}\n            <ContentSection title=\"Key Performance Indicators\" className=\"mb-8\">\n              <div className=\"grid grid-cols-2 md:grid-cols-4 gap-4\">\n                {config.kpis.map((kpi, idx) => (\n                  <Card key={idx} className=\"p-4 flex flex-col items-center\">\n                    <CardTitle>{kpi.title}</CardTitle>\n                    <div className=\"text-2xl font-bold\">{kpi.value}</div>\n                    {kpi.delta && <span className=\"text-sm\">{kpi.delta}</span>}\n                  </Card>\n                ))}\n              </div>\n            </ContentSection>\n            {/* 2. Primary Chart */}\n            <ContentSection title={config.charts.primary.title} className=\"mb-8\">\n              <p>{config.charts.primary.description}</p>\n              <SimpleBarChart data={config.charts.primary.data} />\n            </ContentSection>\n            {/* 3. Secondary Chart */}\n            <ContentSection title={config.charts.secondary.title} className=\"mb-8\">\n              <p>{config.charts.secondary.description}</p>\n              <SimpleBarChart data={config.charts.secondary.data} />\n            </ContentSection>\n            {/* 4. Quick Actions */}\n            <ContentSection title=\"Quick Actions\" className=\"mb-8\">\n              <div className=\"grid grid-cols-2 md:grid-cols-4 gap-4\">\n                {config.quickActions.map((action, index) => {\n                  const IconComponent = action.icon;\n                  return (\n                    <button\n                      key={index}\n                      onClick={action.onClick}\n                      className=\"flex flex-col items-center p-6 rounded-lg border group\"\n                    >\n                      <div className=\"p-4 rounded-lg mb-3\">\n                        <IconComponent className=\"w-5 h-5\" />\n                      </div>\n                      <span className=\"text-sm font-medium\">\n                        {action.label}\n                      </span>\n                    </button>\n                  );\n                })}\n              </div>\n            </ContentSection>\n            {/* 5. Recent Activities */}\n            <ContentSection title=\"Recent Activities\" className=\"mb-8\">\n              <div className=\"space-y-4\">\n                {config.activities.map((activity, index) => (\n                  <div key={index} className=\"flex items-center justify-between p-4 rounded-lg\">\n                    <div className=\"flex items-center space-x-4\">\n                      <div className=\"text-2xl\">\n                        {activity.type}\n                      </div>\n                      <div>\n                        <h4 className=\"font-medium\">{activity.description}</h4>\n                        <p className=\"text-sm\">{activity.time}</p>\n                      </div>\n                    </div>\n                    <div>\n                      <span className={`px-3 py-1 rounded-full text-xs font-medium`}>{activity.status}</span>\n                    </div>\n                  </div>\n                ))}\n              </div>\n            </ContentSection>\n          </ErrorBoundary>\n        </TabsContent>\n        {/* SEE: Advice Tab */}\n        <TabsContent value=\"see\">\n          <ErrorBoundary fallback={<div>Failed to load SEE tab.</div>}>\n            {config.businessInsights ? (\n              <AIInsightsPanel insights={config.businessInsights} />\n            ) : (\n              <div className=\"p-8 text-center\">No advice available for this department yet.</div>\n            )}\n          </ErrorBoundary>\n        </TabsContent>\n        {/* ACT: Resources Tab */}\n        <TabsContent value=\"act\">\n          <ErrorBoundary fallback={<div>Failed to load ACT tab.</div>}>\n            {config.educationalContent ? (\n              <BusinessEducationPanel content={config.educationalContent} />\n            ) : (\n              <div className=\"p-8 text-center\">No resources available for this department yet.</div>\n            )}\n          </ErrorBoundary>\n        </TabsContent>\n      </Tabs>\n    </DashboardLayout>\n  );\n};\n\nexport default UnifiedDepartmentPage; ","usedDeprecatedRules":[]},{"filePath":"/home/vonj/Github/Nexus/src/components/settings/ManageIntegrationModal.tsx","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":14,"column":18,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":14,"endColumn":21,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[383,386],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[383,386],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":34,"column":50,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":34,"endColumn":53,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1019,1022],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1019,1022],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":51,"column":42,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":51,"endColumn":45,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1505,1508],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1505,1508],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useEffect, useState } from 'react';\nimport Modal from '@/components/ui/Modal';\nimport { supabase } from '../../lib/core/supabase';\nimport { Button } from '@/components/ui/Button';\n\ninterface IntegrationDetails {\n  id: string;\n  provider: string;\n  org_id: string;\n  created_at: string;\n  expires_at?: string;\n  status?: string;\n  last_sync?: string;\n  [key: string]: any; // For provider-specific fields\n}\n\ninterface ManageIntegrationModalProps {\n  provider: string | null;\n  open: boolean;\n  onClose: () => void;\n  orgId: string;\n}\n\nexport const ManageIntegrationModal: React.FC<ManageIntegrationModalProps> = ({ provider, open, onClose, orgId }) => {\n  const [details, setDetails] = useState<IntegrationDetails | null>(null);\n  const [loading, setLoading] = useState(false);\n  const [error, setError] = useState<string | null>(null);\n\n  useEffect(() => {\n    if (!open || !provider) return;\n\n    async function fetchDetails() {\n      setLoading(true);\n      const { data, error } = await (supabase as any)\n        .from('ai_integrations')\n        .select('*')\n        .eq('org_id', orgId)\n        .eq('provider', provider)\n        .maybeSingle();\n      if (error) setError(error.message);\n      else setDetails(data);\n      setLoading(false);\n    }\n\n    fetchDetails();\n  }, [open, provider, orgId]);\n\n  const handleDisconnect = async () => {\n    if (!provider) return;\n    if (!confirm('Disconnect integration? This cannot be undone.')) return;\n    const { error } = await (supabase as any)\n      .from('ai_integrations')\n      .delete()\n      .eq('org_id', orgId)\n      .eq('provider', provider);\n    if (error) alert('Failed to disconnect');\n    else onClose();\n  };\n\n  return (\n    <Modal open={open} onClose={onClose} title={`Manage ${provider}`.toUpperCase()}>\n      {loading && <p className=\"text-sm\">Loading…</p>}\n      {error && <p className=\"text-sm text-destructive\">{error}</p>}\n      {details && (\n        <div className=\"space-y-4\">\n          <div>\n            <p className=\"text-sm text-muted-foreground\">Connected on</p>\n            <p className=\"font-medium\">{new Date(details.created_at).toLocaleString()}</p>\n          </div>\n          {details.expires_at && (\n            <div>\n              <p className=\"text-sm text-muted-foreground\">Token expires</p>\n              <p className=\"font-medium\">{new Date(details.expires_at).toLocaleString()}</p>\n            </div>\n          )}\n          <div className=\"flex justify-between items-center pt-4\">\n            {provider === 'paypal' && (\n              <Button\n                variant=\"secondary\"\n                onClick={async () => {\n                  setLoading(true);\n                  const { error } = await supabase.functions.invoke('paypal_refresh_token', {\n                    body: { orgId },\n                  });\n                  if (error) alert('Refresh failed');\n                  else await new Promise((r) => setTimeout(r, 500)); // let realtime push update\n                  setLoading(false);\n                }}\n              >\n                Refresh Token\n              </Button>\n            )}\n            <div className=\"flex gap-3\">\n              <Button variant=\"destructive\" onClick={handleDisconnect}>Disconnect</Button>\n              <Button variant=\"outline\" onClick={onClose}>Close</Button>\n            </div>\n          </div>\n        </div>\n      )}\n    </Modal>\n  );\n}; ","usedDeprecatedRules":[]},{"filePath":"/home/vonj/Github/Nexus/src/components/settings/SettingsLayout.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'Wrench' is defined but never used.","line":7,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":7,"endColumn":9}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React from 'react';\nimport type { ReactNode } from 'react';\nimport { useNavigate, useLocation } from 'react-router-dom';\nimport { \n  User, \n  Shield, \n  Wrench, \n  Users,\n  CreditCard,\n  ChevronRight,\n  Settings as SettingsIcon\n} from 'lucide-react';\n\nimport { Button } from '../ui/Button';\nimport { Separator } from '../ui/Separator';\nimport Breadcrumbs from '../ui/Breadcrumbs';\nimport type { BreadcrumbItem } from '../ui/Breadcrumbs';\n\ninterface SettingsLayoutProps {\n  children: ReactNode;\n  title: string;\n  description: string;\n  isAdmin?: boolean;\n}\n\nexport const SettingsLayout: React.FC<SettingsLayoutProps> = ({\n  children,\n  title,\n  description,\n  isAdmin = false\n}) => {\n  const navigate = useNavigate();\n  const location = useLocation();\n  \n  // Settings navigation items\n  const settingsNavItems: { title: string; icon: React.ReactNode; path: string; admin?: boolean }[] = [\n    {\n      title: 'Profile',\n      icon: <User className=\"h-4 w-4\" />,\n      path: '/settings',\n    },\n    {\n      title: 'Security',\n      icon: <Shield className=\"h-4 w-4\" />,\n      path: '/settings',\n    },\n    {\n      title: 'Billing',\n      icon: <CreditCard className=\"h-4 w-4\" />,\n      path: '/settings',\n    },\n    {\n      title: 'Team',\n      icon: <Users className=\"h-4 w-4\" />,\n      path: '/settings',\n      admin: true,\n    },\n  ];\n  \n  // Filter nav items based on admin status\n  const filteredNavItems = settingsNavItems.filter(item => \n    !item.admin || (item.admin && isAdmin)\n  );\n  \n  // Breadcrumb items\n  const breadcrumbItems: BreadcrumbItem[] = [\n    { label: 'Settings', href: '/settings' },\n  ];\n  \n  // If on nested route, append its label\n  const currentNav = filteredNavItems.find(item => item.path === location.pathname);\n  if (currentNav && currentNav.path !== '/settings') {\n    breadcrumbItems.push({ label: currentNav.title, current: true });\n  }\n  \n  // Check if a nav item is active\n  const isActive = (path: string) => location.pathname === path;\n  \n  return (\n    <div className=\"flex flex-col space-y-8 lg:flex-row lg:space-x-12 lg:space-y-0\">\n      <aside className=\"-mx-4 lg:w-1/5 lg:min-w-[250px]\">\n        <div className=\"lg:pr-4 lg:sticky lg:top-16 lg:h-[calc(100vh-120px)] overflow-auto\">\n          <div className=\"px-4 py-2\">\n            <div className=\"flex items-center space-x-2 mb-4\">\n              <SettingsIcon className=\"h-4 w-4\" />\n              <h2 className=\"text-lg font-semibold\">Settings</h2>\n            </div>\n            <div className=\"space-y-1\">\n              {filteredNavItems.map((item) => (\n                <Button\n                  key={item.path}\n                  variant={isActive(item.path) ? 'secondary' : 'ghost'}\n                  size=\"sm\"\n                  className={`w-full justify-start ${isActive(item.path) ? 'bg-muted' : ''}`}\n                  onClick={() => navigate(item.path)}\n                >\n                  {item.icon}\n                  <span className=\"ml-2\">{item.title}</span>\n                  {isActive(item.path) && (\n                    <ChevronRight className=\"h-4 w-4 ml-auto opacity-60\" />\n                  )}\n                </Button>\n              ))}\n            </div>\n          </div>\n        </div>\n      </aside>\n      <div className=\"flex-1 lg:max-w-3xl\">\n        <div className=\"space-y-6\">\n          <Breadcrumbs items={breadcrumbItems} />\n          <div>\n            <h2 className=\"text-2xl font-bold tracking-tight\">{title}</h2>\n            <p className=\"text-muted-foreground\">{description}</p>\n          </div>\n          <Separator />\n          <div className=\"pb-16\">\n            {children}\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}; ","usedDeprecatedRules":[]},{"filePath":"/home/vonj/Github/Nexus/src/components/templates/DepartmentTemplate.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'Users' is defined but never used.","line":6,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":6,"endColumn":8},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'TrendingUp' is defined but never used.","line":7,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":7,"endColumn":13},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'Clock' is defined but never used.","line":8,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":8,"endColumn":8},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'CheckCircle' is defined but never used.","line":9,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":9,"endColumn":14},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'AlertTriangle' is defined but never used.","line":10,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":10,"endColumn":16},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'ArrowRight' is defined but never used.","line":11,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":11,"endColumn":13}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { type ReactNode } from 'react';\nimport { Card, CardContent } from '../ui/Card';\nimport { Badge } from '../ui/Badge';\nimport { Button } from '../ui/Button';\nimport { \n  Users, \n  TrendingUp, \n  Clock, \n  CheckCircle,\n  AlertTriangle,\n  ArrowRight,\n  Search,\n  Filter,\n  Bell\n} from 'lucide-react';\nimport { Input } from '../ui/Input';\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from '../ui/Tabs';\n\nexport interface DepartmentAction {\n  label: string;\n  icon?: ReactNode;\n  onClick: () => void;\n  primary?: boolean;\n}\n\nexport interface SummaryMetric {\n  label: string;\n  value: string | number;\n  change?: {\n    value: string;\n    positive: boolean;\n  };\n  icon?: ReactNode;\n}\n\nexport interface DepartmentTemplateProps {\n  /** Department name (e.g. \"Sales\", \"Finance\") */\n  title: string;\n  /** Optional subtitle or description */\n  description?: string;\n  /** Department icon */\n  icon?: ReactNode;\n  /** Primary actions for this department */\n  actions?: DepartmentAction[];\n  /** Summary metrics to display */\n  metrics?: SummaryMetric[];\n  /** Tab definitions */\n  tabs?: {\n    id: string;\n    label: string;\n    content: ReactNode;\n  }[];\n  /** Default active tab */\n  defaultTab?: string;\n  /** Main content */\n  children?: ReactNode;\n  /** Whether to show the search bar */\n  showSearch?: boolean;\n  /** Additional CSS classes */\n  className?: string;\n}\n\n/**\n * DepartmentTemplate - A standardized template for department pages\n * \n * Provides consistent layout for all department pages including:\n * - Header with title, description and actions\n * - Summary metrics\n * - Tabbed interface\n * - Standardized search and filters\n */\nexport const DepartmentTemplate: React.FC<DepartmentTemplateProps> = ({\n  title,\n  description,\n  icon,\n  actions = [],\n  metrics = [],\n  tabs = [],\n  defaultTab,\n  children,\n  showSearch = true,\n  className = '',\n}) => {\n  return (\n    <div className={`space-y-6 ${className}`}>\n      {/* Department Header */}\n      <div className=\"rounded-xl p-6\">\n        <div className=\"flex flex-col md:flex-row md:items-center justify-between gap-4\">\n          <div className=\"flex items-center\">\n            {icon && (\n              <div className=\"mr-3 h-10 w-10 rounded-full flex items-center justify-center\">\n                {icon}\n              </div>\n            )}\n            <div>\n              <h1 className=\"text-2xl font-bold\">{title}</h1>\n              {description && <p>{description}</p>}\n            </div>\n          </div>\n          {actions.length > 0 && (\n            <div className=\"flex items-center space-x-2\">\n              {actions.map((action, index) => (\n                <Button\n                  key={index}\n                  onClick={action.onClick}\n                  variant={action.primary ? 'default' : 'outline'}\n                  className={action.primary ? '' : ''}\n                >\n                  {action.icon && <span className=\"mr-2\">{action.icon}</span>}\n                  {action.label}\n                </Button>\n              ))}\n            </div>\n          )}\n        </div>\n        {/* Department Metrics */}\n        {metrics.length > 0 && (\n          <div className=\"grid grid-cols-2 md:grid-cols-4 gap-4 mt-6\">\n            {metrics.map((metric, index) => (\n              <Card key={index}>\n                <CardContent className=\"p-4\">\n                  <div className=\"flex items-start justify-between\">\n                    <div>\n                      <p className=\"text-sm\">{metric.label}</p>\n                      <p className=\"text-2xl font-bold\">{metric.value}</p>\n                      {metric.change && (\n                        <Badge\n                          variant=\"outline\"\n                          className={`text-xs ${metric.change.positive ? '' : ''}`}\n                        >\n                          {metric.change.positive ? '↑' : '↓'} {metric.change.value}\n                        </Badge>\n                      )}\n                    </div>\n                    {metric.icon && (\n                      <div className=\"h-8 w-8 rounded-full flex items-center justify-center\">\n                        {metric.icon}\n                      </div>\n                    )}\n                  </div>\n                </CardContent>\n              </Card>\n            ))}\n          </div>\n        )}\n      </div>\n      {/* Search and Filter Bar */}\n      {showSearch && (\n        <div className=\"flex flex-col sm:flex-row gap-3 items-center\">\n          <div className=\"relative flex-1 w-full\">\n            <Search className=\"absolute left-3 top-1/2 transform -translate-y-1/2 h-4 w-4\" />\n            <Input\n              placeholder={`Search ${title.toLowerCase()}...`}\n              className=\"pl-9 w-full\"\n            />\n          </div>\n          <div className=\"flex items-center space-x-2\">\n            <Button variant=\"outline\" size=\"sm\" className=\"h-10\">\n              <Filter className=\"h-4 w-4 mr-2\" />\n              Filters\n            </Button>\n            <Button variant=\"outline\" size=\"sm\" className=\"h-10\">\n              <Bell className=\"h-4 w-4 mr-2\" />\n              Notifications\n            </Button>\n          </div>\n        </div>\n      )}\n      {/* Tabbed Interface */}\n      {tabs.length > 0 ? (\n        <Tabs defaultValue={defaultTab || tabs[0].id}>\n          <TabsList className=\"mb-4\">\n            {tabs.map((tab) => (\n              <TabsTrigger key={tab.id} value={tab.id}>\n                {tab.label}\n              </TabsTrigger>\n            ))}\n          </TabsList>\n          {tabs.map((tab) => (\n            <TabsContent key={tab.id} value={tab.id}>\n              {tab.content}\n            </TabsContent>\n          ))}\n        </Tabs>\n      ) : (\n        children\n      )}\n    </div>\n  );\n}; ","usedDeprecatedRules":[]},{"filePath":"/home/vonj/Github/Nexus/src/components/theme/ThemePanel.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/vonj/Github/Nexus/src/components/thoughts/ActionCards.tsx","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":18,"column":20,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":18,"endColumn":23,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[621,624],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[621,624],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":20,"column":10,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":20,"endColumn":13,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[640,643],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[640,643],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":140,"column":38,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":140,"endColumn":41,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3949,3952],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3949,3952],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":145,"column":46,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":145,"endColumn":49,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[4097,4100],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[4097,4100],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":150,"column":38,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":150,"endColumn":41,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[4255,4258],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[4255,4258],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"no-restricted-syntax","severity":1,"message":"Use design tokens instead of hardcoded text colors (e.g., text-foreground, text-muted-foreground)","line":160,"column":39,"nodeType":"Literal","messageId":"restrictedSyntax","endLine":160,"endColumn":62},{"ruleId":"no-restricted-syntax","severity":1,"message":"Use design tokens instead of hardcoded text colors (e.g., text-foreground, text-muted-foreground)","line":162,"column":35,"nodeType":"Literal","messageId":"restrictedSyntax","endLine":162,"endColumn":57},{"ruleId":"no-restricted-syntax","severity":1,"message":"Use design tokens instead of hardcoded text colors (e.g., text-foreground, text-muted-foreground)","line":164,"column":33,"nodeType":"Literal","messageId":"restrictedSyntax","endLine":164,"endColumn":56},{"ruleId":"no-restricted-syntax","severity":1,"message":"Use design tokens instead of hardcoded colors (e.g., bg-primary, bg-secondary)","line":169,"column":35,"nodeType":"Literal","messageId":"restrictedSyntax","endLine":169,"endColumn":64},{"ruleId":"no-restricted-syntax","severity":1,"message":"Use design tokens instead of hardcoded text colors (e.g., text-foreground, text-muted-foreground)","line":169,"column":35,"nodeType":"Literal","messageId":"restrictedSyntax","endLine":169,"endColumn":64},{"ruleId":"no-restricted-syntax","severity":1,"message":"Use design tokens instead of hardcoded colors (e.g., bg-primary, bg-secondary)","line":170,"column":35,"nodeType":"Literal","messageId":"restrictedSyntax","endLine":170,"endColumn":66},{"ruleId":"no-restricted-syntax","severity":1,"message":"Use design tokens instead of hardcoded text colors (e.g., text-foreground, text-muted-foreground)","line":170,"column":35,"nodeType":"Literal","messageId":"restrictedSyntax","endLine":170,"endColumn":66},{"ruleId":"no-restricted-syntax","severity":1,"message":"Use design tokens instead of hardcoded colors (e.g., bg-primary, bg-secondary)","line":171,"column":12,"nodeType":"Literal","messageId":"restrictedSyntax","endLine":171,"endColumn":37},{"ruleId":"no-restricted-syntax","severity":1,"message":"Use design tokens instead of hardcoded text colors (e.g., text-foreground, text-muted-foreground)","line":171,"column":12,"nodeType":"Literal","messageId":"restrictedSyntax","endLine":171,"endColumn":37},{"ruleId":"no-restricted-syntax","severity":1,"message":"Use design tokens instead of hardcoded colors (e.g., bg-primary, bg-secondary)","line":227,"column":27,"nodeType":"Literal","messageId":"restrictedSyntax","endLine":227,"endColumn":60}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":15,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState, useEffect } from 'react';\nimport { Card, CardHeader, CardTitle, CardContent } from '@/components/ui/Card';\nimport { Button } from '@/components/ui/Button';\nimport { Badge } from '@/components/ui/Badge';\nimport { AlertCircle, CheckCircle, XCircle, Clock, Brain } from 'lucide-react';\nimport { supabase } from '@/lib/core/supabase';\n\ninterface ActionCard {\n  id: string;\n  domain: string;\n  kind: 'approval' | 'notification' | 'action_required';\n  title: string;\n  description: string;\n  meta: {\n    issuedAt: string;\n    agentConfidence: number;\n    recommendedAction: string;\n    [key: string]: any;\n  };\n  data?: any;\n}\n\ninterface ActionCardsProps {\n  userId?: string;\n  onActionTaken?: (cardId: string, action: string) => void;\n}\n\nexport const ActionCards: React.FC<ActionCardsProps> = ({ \n  userId, \n  onActionTaken \n}) => {\n  const [actionCards, setActionCards] = useState<ActionCard[]>([]);\n  const [loading, setLoading] = useState(true);\n  const [processingCard, setProcessingCard] = useState<string | null>(null);\n\n  useEffect(() => {\n    loadActionCards();\n    \n    // Set up real-time subscription for new action cards\n    const subscription = supabase\n      .channel('action_cards')\n      .on('postgres_changes', \n        { \n          event: 'INSERT', \n          schema: 'public', \n          table: 'action_cards',\n          filter: userId ? `user_id=eq.${userId}` : undefined\n        }, \n        (payload) => {\n          const newCard = payload.new as ActionCard;\n          setActionCards(prev => [newCard, ...prev]);\n        }\n      )\n      .subscribe();\n\n    return () => {\n      subscription.unsubscribe();\n    };\n  }, [userId]);\n\n  const loadActionCards = async () => {\n    try {\n      setLoading(true);\n      const { data: { user } } = await supabase.auth.getUser();\n      if (!user?.id) return;\n\n      // Load pending action cards from database\n      const { data, error } = await supabase\n        .from('action_cards')\n        .select('*')\n        .eq('user_id', user.id)\n        .eq('status', 'pending')\n        .order('created_at', { ascending: false });\n\n      if (error) {\n        console.error('Failed to load action cards:', error);\n        return;\n      }\n\n      setActionCards(data || []);\n    } catch (error) {\n      console.error('Error loading action cards:', error);\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const handleAction = async (card: ActionCard, action: 'approve' | 'reject' | 'modify') => {\n    try {\n      setProcessingCard(card.id);\n\n      // Update card status in database\n      await supabase\n        .from('action_cards')\n        .update({ \n          status: action === 'approve' ? 'approved' : action === 'reject' ? 'rejected' : 'modified',\n          resolved_at: new Date().toISOString()\n        })\n        .eq('id', card.id);\n\n      // Execute the action based on card type and user decision\n      if (card.domain === 'thoughts' && action === 'approve') {\n        await executeThoughtAction(card);\n      }\n\n      // Remove card from UI\n      setActionCards(prev => prev.filter(c => c.id !== card.id));\n\n      // Notify parent component\n      onActionTaken?.(card.id, action);\n\n    } catch (error) {\n      console.error('Failed to handle action:', error);\n    } finally {\n      setProcessingCard(null);\n    }\n  };\n\n  const executeThoughtAction = async (card: ActionCard) => {\n    const { recommendedAction } = card.meta;\n    \n    switch (recommendedAction) {\n      case 'merge':\n        // Merge thoughts logic\n        await mergeThoughts(card.data);\n        break;\n      case 'update_existing':\n        // Update existing thought logic\n        await updateExistingThought(card.data);\n        break;\n      case 'link_as_related':\n        // Link as related thoughts logic\n        await linkAsRelated(card.data);\n        break;\n      default:\n        console.warn('Unknown recommended action:', recommendedAction);\n    }\n  };\n\n  const mergeThoughts = async (data: any) => {\n    // Implementation for merging thoughts\n    console.log('Merging thoughts:', data);\n  };\n\n  const updateExistingThought = async (data: any) => {\n    // Implementation for updating existing thought\n    console.log('Updating existing thought:', data);\n  };\n\n  const linkAsRelated = async (data: any) => {\n    // Implementation for linking as related\n    console.log('Linking as related:', data);\n  };\n\n  const getCardIcon = (kind: string) => {\n    switch (kind) {\n      case 'approval':\n        return <AlertCircle className=\"h-5 w-5 text-orange-500\" />;\n      case 'notification':\n        return <CheckCircle className=\"h-5 w-5 text-blue-500\" />;\n      case 'action_required':\n        return <XCircle className=\"h-5 w-5 text-red-500\" />;\n      default:\n        return <Clock className=\"h-5 w-5 text-gray-500\" />;\n    }\n  };\n\n  const getConfidenceBadgeColor = (confidence: number) => {\n    if (confidence >= 0.8) return 'bg-green-100 text-green-800';\n    if (confidence >= 0.6) return 'bg-yellow-100 text-yellow-800';\n    return 'bg-red-100 text-red-800';\n  };\n\n  if (loading) {\n    return (\n      <Card>\n        <CardContent className=\"p-6\">\n          <div className=\"flex items-center justify-center\">\n            <Brain className=\"h-6 w-6 animate-pulse text-muted-foreground\" />\n            <span className=\"ml-2 text-muted-foreground\">Loading action cards...</span>\n          </div>\n        </CardContent>\n      </Card>\n    );\n  }\n\n  if (actionCards.length === 0) {\n    return null; // Don't show anything if no action cards\n  }\n\n  return (\n    <div className=\"space-y-4\">\n      <h3 className=\"text-lg font-semibold flex items-center gap-2\">\n        <Brain className=\"h-5 w-5 text-primary\" />\n        AI Recommendations\n      </h3>\n      \n      {actionCards.map((card) => (\n        <Card key={card.id} className=\"border-l-4 border-l-orange-500\">\n          <CardHeader className=\"pb-3\">\n            <div className=\"flex items-start justify-between\">\n              <div className=\"flex items-center gap-2\">\n                {getCardIcon(card.kind)}\n                <CardTitle className=\"text-base\">{card.title}</CardTitle>\n              </div>\n              <div className=\"flex items-center gap-2\">\n                <Badge className={getConfidenceBadgeColor(card.meta.agentConfidence)}>\n                  {Math.round(card.meta.agentConfidence * 100)}% confident\n                </Badge>\n                <Badge variant=\"outline\" className=\"text-xs\">\n                  {card.meta.recommendedAction.replace('_', ' ')}\n                </Badge>\n              </div>\n            </div>\n          </CardHeader>\n          \n          <CardContent className=\"pt-0\">\n            <p className=\"text-sm text-muted-foreground mb-4\">\n              {card.description}\n            </p>\n            \n            <div className=\"flex gap-2\">\n              <Button\n                size=\"sm\"\n                onClick={() => handleAction(card, 'approve')}\n                disabled={processingCard === card.id}\n                className=\"bg-green-600 hover:bg-green-700\"\n              >\n                {processingCard === card.id ? 'Processing...' : 'Approve'}\n              </Button>\n              \n              <Button\n                size=\"sm\"\n                variant=\"outline\"\n                onClick={() => handleAction(card, 'reject')}\n                disabled={processingCard === card.id}\n              >\n                Reject\n              </Button>\n              \n              <Button\n                size=\"sm\"\n                variant=\"outline\"\n                onClick={() => handleAction(card, 'modify')}\n                disabled={processingCard === card.id}\n              >\n                Modify\n              </Button>\n            </div>\n            \n            <div className=\"mt-3 text-xs text-muted-foreground\">\n              Suggested at {new Date(card.meta.issuedAt).toLocaleString()}\n            </div>\n          </CardContent>\n        </Card>\n      ))}\n    </div>\n  );\n}; ","usedDeprecatedRules":[]},{"filePath":"/home/vonj/Github/Nexus/src/components/thoughts/ThoughtDashboard.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'Input' is defined but never used.","line":11,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":11,"endColumn":15},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'Textarea' is defined but never used.","line":12,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":12,"endColumn":18},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'Dialog' is defined but never used.","line":13,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":13,"endColumn":16},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'DialogContent' is defined but never used.","line":13,"column":18,"nodeType":null,"messageId":"unusedVar","endLine":13,"endColumn":31},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'DialogHeader' is defined but never used.","line":13,"column":33,"nodeType":null,"messageId":"unusedVar","endLine":13,"endColumn":45},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'DialogTitle' is defined but never used.","line":13,"column":47,"nodeType":null,"messageId":"unusedVar","endLine":13,"endColumn":58},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'DialogTrigger' is defined but never used.","line":13,"column":60,"nodeType":null,"messageId":"unusedVar","endLine":13,"endColumn":73},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'Select' is defined but never used.","line":14,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":14,"endColumn":16},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'SelectContent' is defined but never used.","line":14,"column":18,"nodeType":null,"messageId":"unusedVar","endLine":14,"endColumn":31},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'SelectItem' is defined but never used.","line":14,"column":33,"nodeType":null,"messageId":"unusedVar","endLine":14,"endColumn":43},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'SelectTrigger' is defined but never used.","line":14,"column":45,"nodeType":null,"messageId":"unusedVar","endLine":14,"endColumn":58},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'SelectValue' is defined but never used.","line":14,"column":60,"nodeType":null,"messageId":"unusedVar","endLine":14,"endColumn":71},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'Search' is defined but never used.","line":22,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":22,"endColumn":9},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'Tag' is defined but never used.","line":27,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":27,"endColumn":6},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'Zap' is defined but never used.","line":28,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":28,"endColumn":6},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'Edit' is defined but never used.","line":30,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":30,"endColumn":7},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'Trash2' is defined but never used.","line":31,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":31,"endColumn":9},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'Eye' is defined but never used.","line":32,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":32,"endColumn":6},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'X' is defined but never used.","line":33,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":33,"endColumn":4},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'useAuth' is defined but never used.","line":39,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":39,"endColumn":17},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'supabase' is defined but never used.","line":40,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":40,"endColumn":18},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'logger' is defined but never used.","line":41,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":41,"endColumn":16},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'CreateThoughtRequest' is defined but never used.","line":47,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":47,"endColumn":23},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'UpdateThoughtRequest' is defined but never used.","line":48,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":48,"endColumn":23},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'thoughtsByCategory' is assigned a value but never used.","line":133,"column":9,"nodeType":null,"messageId":"unusedVar","endLine":133,"endColumn":27},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'totalThoughts' is assigned a value but never used.","line":182,"column":11,"nodeType":null,"messageId":"unusedVar","endLine":182,"endColumn":24},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'categories' is assigned a value but never used.","line":183,"column":11,"nodeType":null,"messageId":"unusedVar","endLine":183,"endColumn":21},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":405,"column":79,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":405,"endColumn":82,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[14754,14757],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[14754,14757],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":28,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\n * @file ThoughtDashboard.tsx\n * @description Main dashboard for Nexus Thought Management System\n * Based on Marcoby Nexus diagrams - displays ideas, tasks, reminders, and workflow\n */\n\nimport React, { useState, useEffect, forwardRef, useImperativeHandle } from 'react';\nimport { Card, CardContent, CardHeader, CardTitle } from '../ui/Card';\nimport { Button } from '../ui/Button';\nimport { Badge } from '../ui/Badge';\nimport { Input } from '../ui/Input';\nimport { Textarea } from '../ui/Textarea';\nimport { Dialog, DialogContent, DialogHeader, DialogTitle, DialogTrigger } from '../ui/Dialog';\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '../ui/Select';\nimport { Progress } from '../ui/Progress';\nimport { Avatar, AvatarFallback } from '../ui/Avatar';\nimport { Skeleton } from '../ui/Skeleton';\nimport { Alert } from '../ui/Alert';\nimport { Tabs, TabsList, TabsTrigger, TabsContent } from '../ui/Tabs';\nimport { \n  Plus, \n  Search, \n  Brain, \n  Lightbulb, \n  BookOpen, \n  Clock, \n  Tag, \n  Zap, \n  TrendingUp,\n  Edit,\n  Trash2,\n  Eye,\n  X,\n  ArrowRight,\n  BarChart3,\n  Target\n} from 'lucide-react';\nimport { thoughtsService } from '../../lib/services/thoughtsService';\nimport { useAuth } from '../../contexts/AuthContext';\nimport { supabase } from '../../lib/core/supabase';\nimport { logger } from '../../lib/security/logger';\nimport { InteractivePrompts } from '@/components/ai/InteractivePrompts';\nimport type { \n  Thought, \n  ThoughtCategory, \n  ThoughtMetrics,\n  CreateThoughtRequest,\n  UpdateThoughtRequest\n} from '../../lib/types/thoughts';\n\nexport interface ThoughtDashboardHandle {\n  refresh: () => void;\n}\n\ninterface ThoughtDashboardProps {\n  className?: string;\n}\n\nconst CATEGORY_CONFIG = {\n  idea: { icon: Lightbulb, label: 'Ideas', color: 'bg-warning/10 text-warning-foreground' },\n  reminder: { icon: Clock, label: 'Reminders', color: 'bg-accent/10 text-accent-foreground' },\n  update: { icon: TrendingUp, label: 'Updates', color: 'bg-success/10 text-success' }\n};\n\nconst STATUS_CONFIG = {\n  future_goals: { label: 'Future Goals', color: 'bg-muted text-foreground' },\n  concept: { label: 'Concept', color: 'bg-warning/10 text-warning-foreground' },\n  in_progress: { label: 'In Progress', color: 'bg-primary/10 text-primary' },\n  completed: { label: 'Completed', color: 'bg-success/10 text-success' },\n  pending: { label: 'Pending', color: 'bg-warning/10 text-warning' },\n  reviewed: { label: 'Reviewed', color: 'bg-primary/10 text-primary' },\n  implemented: { label: 'Implemented', color: 'bg-success/10 text-success-foreground' },\n  not_started: { label: 'Not Started', color: 'bg-muted text-foreground' },\n  upcoming: { label: 'Upcoming', color: 'bg-secondary/10 text-secondary' },\n  due: { label: 'Due', color: 'bg-destructive/10 text-destructive' },\n  overdue: { label: 'Overdue', color: 'bg-destructive/20 text-destructive' }\n};\n\nconst WORKFLOW_STAGES = [\n  { id: 'create_idea', label: 'Create Idea', icon: Plus },\n  { id: 'update_idea', label: 'Update Idea', icon: TrendingUp },\n  { id: 'implement_idea', label: 'Implement Idea', icon: BookOpen },\n  { id: 'achievement', label: 'Achievement', icon: BookOpen }\n];\n\nexport const ThoughtDashboard = forwardRef<ThoughtDashboardHandle, ThoughtDashboardProps>(\n({ className = '' }, ref) => {\n  const [thoughts, setThoughts] = useState<Thought[]>([]);\n  const [metrics, setMetrics] = useState<ThoughtMetrics | null>(null);\n  const [activeTab, setActiveTab] = useState<ThoughtCategory | 'all'>('all');\n  const [isLoading, setIsLoading] = useState(true);\n  const [showPrompts, setShowPrompts] = useState(false);\n  const [alert, setAlert] = useState<{ type: 'success' | 'error'; message: string } | null>(null);\n\n  // ====== Data Loading ======\n  \n  useEffect(() => {\n    loadDashboardData();\n  }, []);\n\n  const loadDashboardData = async () => {\n    setIsLoading(true);\n    try {\n      const [thoughtsResponse, metricsData] = await Promise.all([\n        thoughtsService.getThoughts({}, 100),\n        thoughtsService.getMetrics()\n      ]);\n      \n      setThoughts(thoughtsResponse.thoughts);\n      setMetrics(metricsData);\n    } catch (error) {\n      console.error('Error loading dashboard data:', error);\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  useImperativeHandle(ref, () => ({ refresh: loadDashboardData }), []);\n\n  const handleThoughtCreated = () => {\n    loadDashboardData();\n    setShowPrompts(false);\n    setAlert({ type: 'success', message: 'Thought created successfully!' });\n    setTimeout(() => setAlert(null), 3000);\n  };\n\n  // ====== Filtering ======\n  \n  const filteredThoughts = thoughts.filter(thought => \n    activeTab === 'all' || thought.category === activeTab\n  );\n\n  const thoughtsByCategory = thoughts.reduce((acc, thought) => {\n    if (!acc[thought.category]) acc[thought.category] = [];\n    acc[thought.category].push(thought);\n    return acc;\n  }, {} as Record<ThoughtCategory, Thought[]>);\n\n  // ====== Workflow Visualization ======\n  \n  const renderWorkflowProgress = (thought: Thought) => {\n    const currentStageIndex = WORKFLOW_STAGES.findIndex(\n      stage => stage.id === thought.workflow_stage\n    );\n    const progress = currentStageIndex >= 0 ? ((currentStageIndex + 1) / WORKFLOW_STAGES.length) * 100 : 25;\n    \n    return (\n      <div className=\"space-y-2\">\n        <div className=\"flex items-center justify-between text-sm\">\n          <span>Workflow Progress</span>\n          <span>{Math.round(progress)}%</span>\n        </div>\n        <Progress value={progress} className=\"h-2\" />\n        <div className=\"flex items-center gap-1 text-xs text-muted-foreground\">\n          {WORKFLOW_STAGES.map((stage, index) => {\n            const Icon = stage.icon;\n            const isActive = index <= currentStageIndex;\n            const isCurrent = index === currentStageIndex;\n            \n            return (\n              <div\n                key={stage.id}\n                className={`flex items-center gap-1 px-2 py-1 rounded ${\n                  isActive ? 'bg-primary/10 text-primary' : 'bg-muted text-muted-foreground'\n                } ${isCurrent ? 'ring-2 ring-primary' : ''}`}\n              >\n                <Icon className=\"h-3 w-3\" />\n                <span className=\"hidden sm:inline\">{stage.label}</span>\n              </div>\n            );\n          })}\n        </div>\n      </div>\n    );\n  };\n\n  // ====== Thought Lifecycle Visualization ======\n  \n  const renderThoughtLifecycle = () => {\n    if (!metrics) return null;\n    \n    const totalThoughts = metrics.total_thoughts;\n    const categories = Object.entries(metrics.thoughts_by_category);\n    \n    return (\n      <Card>\n        <CardHeader>\n          <CardTitle className=\"flex items-center gap-2\">\n            <Brain className=\"h-5 w-5\" />\n            Thought Lifecycle\n          </CardTitle>\n          <p className=\"text-sm text-muted-foreground\">\n            Ideas spawn tasks and reminders, all connected in your thought network\n          </p>\n        </CardHeader>\n        <CardContent>\n          <div className=\"grid grid-cols-1 md:grid-cols-3 gap-6\">\n            {/* Ideas Circle */}\n            <div className=\"text-center\">\n              <div className=\"relative mx-auto w-24 h-24 bg-warning/10 rounded-full flex items-center justify-center mb-4\">\n                <Lightbulb className=\"h-8 w-8 text-warning\" />\n                <div className=\"absolute -top-2 -right-2 bg-warning text-primary-foreground text-xs rounded-full w-6 h-6 flex items-center justify-center\">\n                  {metrics.thoughts_by_category.idea || 0}\n                </div>\n              </div>\n              <p className=\"font-medium\">Ideas</p>\n              <p className=\"text-xs text-muted-foreground\">Goals or initiatives</p>\n            </div>\n\n            {/* Reminders Circle */}\n            <div className=\"text-center\">\n              <div className=\"relative mx-auto w-24 h-24 bg-accent/10 rounded-full flex items-center justify-center mb-4\">\n                <Clock className=\"h-8 w-8 text-accent\" />\n                <div className=\"absolute -top-2 -right-2 bg-accent text-accent-foreground text-xs rounded-full w-6 h-6 flex items-center justify-center\">\n                  {metrics.thoughts_by_category.reminder || 0}\n                </div>\n              </div>\n              <p className=\"font-medium\">Reminders</p>\n              <p className=\"text-xs text-muted-foreground\">Notifications to complete tasks</p>\n            </div>\n          </div>\n          \n          {/* Connection Arrows */}\n          <div className=\"flex justify-center items-center gap-4 mt-6\">\n            <ArrowRight className=\"h-4 w-4 text-muted-foreground\" />\n            <span className=\"text-xs text-muted-foreground\">Ideas spawn tasks</span>\n            <ArrowRight className=\"h-4 w-4 text-muted-foreground\" />\n            <span className=\"text-xs text-muted-foreground\">Tasks generate reminders</span>\n          </div>\n        </CardContent>\n      </Card>\n    );\n  };\n\n  // ====== Thought Cards ======\n  \n  const renderThoughtCard = (thought: Thought) => {\n    const categoryConfig = CATEGORY_CONFIG[thought.category];\n    const statusConfig = STATUS_CONFIG[thought.status];\n    const Icon = categoryConfig.icon;\n    \n    return (\n      <Card key={thought.id} className=\"hover:shadow-md transition-shadow\">\n        <CardContent className=\"pt-6\">\n          <div className=\"flex items-start justify-between mb-3\">\n            <div className=\"flex items-center gap-2\">\n              <Icon className=\"h-4 w-4\" />\n              <Badge variant=\"secondary\" className={categoryConfig.color}>\n                {categoryConfig.label}\n              </Badge>\n            </div>\n            <div className=\"flex items-center gap-2\">\n              <Badge variant=\"outline\" className={statusConfig.color}>\n                {statusConfig.label}\n              </Badge>\n              <Avatar className=\"w-6 h-6 text-xs\">\n                <AvatarFallback>U</AvatarFallback>\n              </Avatar>\n            </div>\n          </div>\n          \n          <p className=\"text-sm mb-3 line-clamp-3\">{thought.content}</p>\n          \n          {thought.category === 'idea' && thought.workflow_stage && (\n            <div className=\"mb-3\">\n              {renderWorkflowProgress(thought)}\n            </div>\n          )}\n          \n          <div className=\"flex items-center justify-between text-xs text-muted-foreground\">\n            <span>{new Date(thought.created_at).toLocaleDateString()}</span>\n            {thought.interaction_method && (\n              <Badge variant=\"outline\" className=\"text-xs\">\n                {thought.interaction_method.replace('_', ' ')}\n              </Badge>\n            )}\n          </div>\n        </CardContent>\n      </Card>\n    );\n  };\n\n  // ====== Metrics Cards ======\n  \n  const renderMetricsOverview = () => {\n    if (!metrics) return null;\n    \n    return (\n      <div className=\"grid grid-cols-1 md:grid-cols-4 gap-4 mb-6\">\n        <Card>\n          <CardContent className=\"flex flex-col items-center justify-center gap-1 pt-6\">\n            <Brain className=\"h-8 w-8 text-muted-foreground\" />\n            <p className=\"text-sm text-muted-foreground\">Total Thoughts</p>\n            <p className=\"text-2xl font-bold\">{metrics.total_thoughts}</p>\n          </CardContent>\n        </Card>\n        \n        <Card>\n          <CardContent className=\"flex flex-col items-center justify-center gap-1 pt-6\">\n            <BarChart3 className=\"h-8 w-8 text-muted-foreground\" />\n            <p className=\"text-sm text-muted-foreground\">Completion Rate</p>\n            <p className=\"text-2xl font-bold\">{Math.round(metrics.completion_rate)}%</p>\n          </CardContent>\n        </Card>\n        \n        <Card>\n          <CardContent className=\"flex flex-col items-center justify-center gap-1 pt-6\">\n            <Lightbulb className=\"h-8 w-8 text-muted-foreground\" />\n            <p className=\"text-sm text-muted-foreground\">Active Ideas</p>\n            <p className=\"text-2xl font-bold\">{metrics.active_ideas}</p>\n          </CardContent>\n        </Card>\n        \n        <Card>\n          <CardContent className=\"flex flex-col items-center justify-center gap-1 pt-6\">\n            <Target className=\"h-8 w-8 text-muted-foreground\" />\n            <p className=\"text-sm text-muted-foreground\">Productivity Score</p>\n            <p className=\"text-2xl font-bold\">{metrics.productivity_score}</p>\n          </CardContent>\n        </Card>\n      </div>\n    );\n  };\n\n  // ====== Main Render ======\n  \n  if (isLoading) {\n    // Render skeleton placeholders that mimic the dashboard layout so the user\n    // perceives faster loading and avoids layout shift.\n    return (\n      <div className={`space-y-6 ${className}`}>\n        {/* Header skeleton */}\n        <div className=\"flex items-center justify-between\">\n          <Skeleton className=\"h-8 w-48\" />\n          <Skeleton className=\"h-8 w-24\" />\n        </div>\n\n        {/* Metrics overview skeleton */}\n        <div className=\"grid grid-cols-1 md:grid-cols-4 gap-4\">\n          {Array.from({ length: 4 }).map((_, idx) => (\n            <Skeleton key={idx} className=\"h-24 w-full\" />\n          ))}\n        </div>\n\n        {/* Thought cards skeleton */}\n        <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4\">\n          {Array.from({ length: 6 }).map((_, idx) => (\n            <Skeleton key={idx} className=\"h-40 w-full\" />\n          ))}\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className={`space-y-6 ${className}`}>\n      {/* Header */}\n      <div className=\"flex items-center justify-between\">\n        <div>\n          <h1 className=\"text-3xl font-bold\">Nexus Thoughts</h1>\n          <p className=\"text-muted-foreground\">\n            Your AI-powered idea management system\n          </p>\n        </div>\n        <Button onClick={() => setShowPrompts(true)}>\n          <Plus className=\"h-4 w-4 mr-2\" />\n          New Thought\n        </Button>\n      </div>\n\n      {/* Alert Feedback */}\n      {alert && (\n        <Alert \n          variant={alert.type} \n          className=\"mb-6\"\n          action={\n            <Button \n              variant=\"ghost\" \n              size=\"sm\" \n              onClick={() => setAlert(null)}\n            >\n              ×\n            </Button>\n          }\n        >\n          {alert.message}\n        </Alert>\n      )}\n\n      {/* Interactive Prompts */}\n      {showPrompts && (\n        <InteractivePrompts\n          onThoughtCreated={handleThoughtCreated}\n          className=\"mb-6\"\n        />\n      )}\n\n      {/* Metrics Overview */}\n      {renderMetricsOverview()}\n\n      {/* Thought Lifecycle Visualization */}\n      {renderThoughtLifecycle()}\n\n      {/* Thoughts Display */}\n      <Tabs value={activeTab} onValueChange={(value) => setActiveTab(value as any)}>\n        <TabsList className=\"grid w-full grid-cols-5\">\n          <TabsTrigger value=\"all\">All</TabsTrigger>\n          <TabsTrigger value=\"idea\">Ideas</TabsTrigger>\n          <TabsTrigger value=\"reminder\">Reminders</TabsTrigger>\n          <TabsTrigger value=\"update\">Updates</TabsTrigger>\n        </TabsList>\n        \n        <TabsContent value={activeTab} className=\"mt-6\">\n          {filteredThoughts.length === 0 ? (\n            <Card>\n              <CardContent className=\"text-center\">\n                <Brain className=\"h-12 w-12 text-muted-foreground mx-auto mb-4\" />\n                <p className=\"text-lg font-medium mb-2\">No thoughts yet</p>\n                <p className=\"text-muted-foreground mb-4\">\n                  Start capturing your ideas, tasks, and reminders\n                </p>\n                <Button onClick={() => setShowPrompts(true)}>\n                  <Plus className=\"h-4 w-4 mr-2\" />\n                  Create Your First Thought\n                </Button>\n              </CardContent>\n            </Card>\n          ) : (\n            <div\n              className={`grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4 ${\n                filteredThoughts.length === 1 ? 'justify-items-center' : ''\n              }`}\n            >\n              {filteredThoughts.map(renderThoughtCard)}\n            </div>\n          )}\n        </TabsContent>\n      </Tabs>\n    </div>\n  );\n});\n\nThoughtDashboard.displayName = 'ThoughtDashboard'; ","usedDeprecatedRules":[]},{"filePath":"/home/vonj/Github/Nexus/src/components/ui/Alert.test.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/vonj/Github/Nexus/src/components/ui/Alert.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/vonj/Github/Nexus/src/components/ui/AuthForm.tsx","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":93,"column":19,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":93,"endColumn":22,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3081,3084],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3081,3084],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState } from 'react';\nimport { supabase } from '../../lib/core/supabase';\nimport { Button } from '@/components/ui/Button';\nimport { Input } from '@/components/ui/Input';\nimport { Alert } from '@/components/ui/Alert';\nimport { Card } from '@/components/ui/Card';\nimport { handleCompletePasskeySignIn, handlePasskeyError, isPasskeySupported } from '@/lib/utils/passkey';\n\ntype AuthMode = 'login' | 'signup' | 'reset';\n\ninterface AuthFormProps {\n  onSuccess?: () => void;\n  onError?: (error: string) => void;\n  initialMode?: AuthMode;\n}\n\nexport const AuthForm: React.FC<AuthFormProps> = ({ onSuccess, onError, initialMode = 'login' }) => {\n  const [mode, setMode] = useState<AuthMode>(initialMode);\n  const [email, setEmail] = useState('');\n  const [password, setPassword] = useState('');\n  const [loading, setLoading] = useState(false);\n  const [error, setError] = useState<string | null>(null);\n  const [message, setMessage] = useState<string | null>(null);\n  const [passkeyLoading, setPasskeyLoading] = useState(false);\n\n  const handleSubmit = async (e: React.FormEvent) => {\n    e.preventDefault();\n    setLoading(true);\n    setError(null);\n    setMessage(null);\n\n    try {\n      switch (mode) {\n        case 'login':\n          const { error: signInError } = await supabase.auth.signInWithPassword({\n            email,\n            password,\n          });\n          if (signInError) throw signInError;\n          onSuccess?.();\n          break;\n\n        case 'signup':\n          const { error: signUpError } = await supabase.auth.signUp({\n            email,\n            password,\n            options: {\n              emailRedirectTo: `${window.location.origin}/auth/callback`,\n            },\n          });\n          if (signUpError) throw signUpError;\n          setMessage('Check your email for the confirmation link.');\n          break;\n\n        case 'reset':\n          const { error: resetError } = await supabase.auth.resetPasswordForEmail(email, {\n            redirectTo: `${window.location.origin}/auth/callback?next=/reset-password`,\n          });\n          if (resetError) throw resetError;\n          setMessage('Check your email for the password reset link.');\n          break;\n      }\n    } catch (err) {\n      const errorMessage = err instanceof Error ? err.message : 'An error occurred';\n      setError(errorMessage);\n      onError?.(errorMessage);\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  // -------------------------------------------------------------\n  // Passkey Sign-in\n  // -------------------------------------------------------------\n  const handlePasskeySignIn = async () => {\n    try {\n      if (!email) {\n        setError('Enter email first so we can locate your account');\n        return;\n      }\n      \n      if (!isPasskeySupported()) {\n        setError('Your browser does not support passkeys');\n        return;\n      }\n      \n      setError(null);\n      setPasskeyLoading(true);\n\n      // Use centralized passkey sign-in flow\n      await handleCompletePasskeySignIn(email, undefined, onSuccess);\n      \n    } catch (err: any) {\n      handlePasskeyError(err, 'authentication');\n      setError(err?.message ?? 'Passkey sign-in failed');\n    } finally {\n      setPasskeyLoading(false);\n    }\n  };\n\n  return (\n    <Card className=\"w-full max-w-md mx-auto p-8 bg-card shadow-xl border-0\">\n      <div className=\"text-center mb-8\">\n        <h2 className=\"text-3xl font-bold text-foreground\">\n          {mode === 'login' && 'Welcome back'}\n          {mode === 'signup' && 'Create account'}\n          {mode === 'reset' && 'Reset password'}\n        </h2>\n        <p className=\"text-muted-foreground mt-2\">\n          {mode === 'login' && 'Enter your credentials to access your account'}\n          {mode === 'signup' && 'Start your journey with Nexus today'}\n          {mode === 'reset' && 'Enter your email to reset your password'}\n        </p>\n      </div>\n\n      {/* Microsoft 365 OAuth - Coming Soon */}\n      {mode !== 'reset' && (\n        <div className=\"mb-6\">\n          <Button\n            type=\"button\"\n            variant=\"outline\"\n            onClick={async () => {\n              try {\n                setLoading(true);\n                setError(null);\n                // Always use window.location.origin for redirect\n                const redirectTo = `${window.location.origin}/auth/callback`;\n                const { error: oauthErr } = await supabase.auth.signInWithOAuth({\n                  provider: 'azure',\n                  options: {\n                    scopes: 'openid profile email offline_access',\n                    redirectTo,\n                  },\n                });\n                if (oauthErr) throw oauthErr;\n                // If the OAuth flow does not redirect, show an error\n                setTimeout(() => {\n                  if (!window.location.href.includes('/microsoft365/callback')) {\n                    setError('Microsoft sign-in did not redirect. Please check your popup blocker or try again.');\n                  }\n                }, 3000);\n              } catch (err) {\n                console.error('[AuthForm] Microsoft sign-in failed', err);\n                setError(err instanceof Error ? err.message : 'Microsoft sign-in failed');\n              } finally {\n                setLoading(false);\n              }\n            }}\n            className=\"w-full h-12 text-base font-semibold rounded-xl shadow-lg mb-4 flex items-center justify-center space-x-4\"\n          >\n            <div className=\"flex items-center justify-center w-5 h-5 bg-white rounded-sm\">\n              <svg width=\"16\" height=\"16\" viewBox=\"0 0 21 21\" className=\"text-black\">\n                <rect x=\"1\" y=\"1\" width=\"9\" height=\"9\" fill=\"currentColor\" opacity=\"0.9\"/>\n                <rect x=\"12\" y=\"1\" width=\"9\" height=\"9\" fill=\"currentColor\" opacity=\"0.9\"/>\n                <rect x=\"1\" y=\"12\" width=\"9\" height=\"9\" fill=\"currentColor\" opacity=\"0.9\"/>\n                <rect x=\"12\" y=\"12\" width=\"9\" height=\"9\" fill=\"currentColor\" opacity=\"0.9\"/>\n              </svg>\n            </div>\n            <span>Sign in with Microsoft 365</span>\n          </Button>\n          {/* Show error if OAuth fails */}\n          {error && (\n            <Alert variant=\"error\" className=\"animate-in slide-in-from-top-2 duration-300 mt-2\">\n              {error}\n            </Alert>\n          )}\n          <div className=\"relative my-4\">\n            <div className=\"absolute inset-0 flex items-center\">\n              <div className=\"w-full border-t border-border\" />\n            </div>\n            <div className=\"relative flex justify-center text-sm\">\n              <span className=\"px-4 bg-card text-muted-foreground\">\n                Or\n              </span>\n            </div>\n          </div>\n        </div>\n      )}\n\n      {/* Email/Password Form - Secondary Method */}\n      <form onSubmit={handleSubmit} className=\"space-y-6\">\n        <div className=\"space-y-4\">\n          <div className=\"relative\">\n            <Input\n              type=\"email\"\n              placeholder=\"Email address\"\n              value={email}\n              onChange={(e) => setEmail(e.target.value)}\n              required\n              disabled={loading}\n              className=\"pl-12 h-12 text-base border-border focus:border-primary focus:ring-primary rounded-xl transition-all duration-200\"\n              data-testid=\"email-input\"\n            />\n            <div className=\"absolute inset-y-0 left-0 pl-4 flex items-center pointer-events-none\">\n              <svg className=\"h-5 w-5 text-muted-foreground\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\n                <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M16 12a4 4 0 10-8 0 4 4 0 008 0zm0 0v1.5a2.5 2.5 0 005 0V12a9 9 0 10-9 9m4.5-1.206a8.959 8.959 0 01-4.5 1.207\" />\n              </svg>\n            </div>\n          </div>\n          \n          {mode !== 'reset' && (\n            <div className=\"relative\">\n              <Input\n                type=\"password\"\n                placeholder=\"Password\"\n                value={password}\n                onChange={(e) => setPassword(e.target.value)}\n                required\n                disabled={loading}\n                className=\"pl-12 h-12 text-base border-border focus:border-primary focus:ring-primary rounded-xl transition-all duration-200\"\n              />\n              <div className=\"absolute inset-y-0 left-0 pl-4 flex items-center pointer-events-none\">\n                <svg className=\"h-5 w-5 text-muted-foreground\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\n                  <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M12 15v2m-6 4h12a2 2 0 002-2v-6a2 2 0 00-2-2H6a2 2 0 00-2 2v6a2 2 0 002 2zm10-10V7a4 4 0 00-8 0v4h8z\" />\n                </svg>\n              </div>\n            </div>\n          )}\n        </div>\n\n        {error && (\n          <Alert variant=\"error\" className=\"animate-in slide-in-from-top-2 duration-300\">\n            {error}\n          </Alert>\n        )}\n\n        {message && (\n          <Alert variant=\"success\" className=\"animate-in slide-in-from-top-2 duration-300\">\n            {message}\n          </Alert>\n        )}\n\n        <Button\n          type=\"submit\"\n          className=\"w-full h-12 text-base font-medium bg-primary hover:bg-primary/90 border-0 rounded-xl shadow-lg hover:shadow-xl transition-all duration-200\"\n          isLoading={loading}\n          disabled={loading}\n        >\n          {mode === 'login' && 'Sign in with email'}\n          {mode === 'signup' && 'Create account with email'}\n          {mode === 'reset' && 'Send reset link'}\n        </Button>\n\n        <Button\n          type=\"button\"\n          variant=\"outline\"\n          className=\"w-full h-12 text-base font-medium\"\n          isLoading={passkeyLoading}\n          disabled={passkeyLoading}\n          onClick={handlePasskeySignIn}\n          data-testid=\"passkey-signin-button\"\n        >\n          Sign in with Passkey\n        </Button>\n\n        <div className=\"text-center space-y-4\">\n          {mode === 'login' && (\n            <div className=\"space-y-2\">\n              <button\n                type=\"button\"\n                onClick={() => setMode('signup')}\n                className=\"text-sm text-primary hover:text-primary/80 font-medium transition-colors duration-200\"\n                disabled={loading}\n              >\n                Don't have an account? Sign up\n              </button>\n              <br />\n              <button\n                type=\"button\"\n                onClick={() => setMode('reset')}\n                className=\"text-sm text-muted-foreground hover:text-foreground/90 transition-colors duration-200\"\n                disabled={loading}\n              >\n                Forgot your password?\n              </button>\n            </div>\n          )}\n          {mode === 'signup' && (\n            <button\n              type=\"button\"\n              onClick={() => setMode('login')}\n              className=\"text-sm text-primary hover:text-primary/80 font-medium transition-colors duration-200\"\n              disabled={loading}\n            >\n              Already have an account? Sign in\n            </button>\n          )}\n          {mode === 'reset' && (\n            <button\n              type=\"button\"\n              onClick={() => setMode('login')}\n              className=\"text-sm text-primary hover:text-primary/80 font-medium transition-colors duration-200\"\n              disabled={loading}\n            >\n              Back to sign in\n            </button>\n          )}\n        </div>\n      </form>\n\n      {/* Business Account Notice */}\n      {mode === 'signup' && (\n        <div className=\"mt-8 p-4 bg-primary/5 border border-border rounded-xl\">\n          <div className=\"flex items-start space-x-4\">\n            <svg className=\"w-5 h-5 text-primary mt-0.5 flex-shrink-0\" fill=\"currentColor\" viewBox=\"0 0 20 20\">\n              <path fillRule=\"evenodd\" d=\"M18 10a8 8 0 11-16 0 8 8 0 0116 0zm-7-4a1 1 0 11-2 0 1 1 0 012 0zM9 9a1 1 0 000 2v3a1 1 0 001 1h1a1 1 0 100-2v-3a1 1 0 00-1-1H9z\" clipRule=\"evenodd\" />\n            </svg>\n            <div>\n              <p className=\"text-sm font-medium text-primary mb-1\">\n                Microsoft 365 Integration\n              </p>\n              <p className=\"text-xs text-primary\">\n                Using Microsoft 365 provides enhanced security and seamless integration with your business tools.\n              </p>\n            </div>\n          </div>\n        </div>\n      )}\n    </Card>\n  );\n}; ","usedDeprecatedRules":[]},{"filePath":"/home/vonj/Github/Nexus/src/components/ui/Avatar.test.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/vonj/Github/Nexus/src/components/ui/Avatar.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/vonj/Github/Nexus/src/components/ui/Badge.test.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/vonj/Github/Nexus/src/components/ui/Badge.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/vonj/Github/Nexus/src/components/ui/Breadcrumbs.test.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/vonj/Github/Nexus/src/components/ui/Breadcrumbs.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/vonj/Github/Nexus/src/components/ui/Button.test.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/vonj/Github/Nexus/src/components/ui/Button.tsx","messages":[{"ruleId":"react-refresh/only-export-components","severity":1,"message":"Fast refresh only works when a file only exports components. Use a new file to share constants or functions between components.","line":79,"column":18,"nodeType":"Identifier","messageId":"namedExport","endLine":79,"endColumn":32}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import * as React from 'react';\nimport { cva, type VariantProps } from 'class-variance-authority';\n\nimport { cn } from '../../lib/utils/utils';\n\nconst buttonVariants = cva(\n  'inline-flex items-center justify-center rounded-md text-sm font-medium transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50',\n  {\n    variants: {\n      variant: {\n        default: 'bg-primary text-primary-foreground hover:bg-primary/90',\n        destructive:\n          'bg-destructive text-destructive-foreground hover:bg-destructive/90',\n        outline:\n          'border border-input bg-background hover:bg-accent hover:text-accent-foreground',\n        secondary:\n          'bg-secondary text-secondary-foreground hover:bg-secondary/80',\n        ghost: 'hover:bg-accent hover:text-accent-foreground',\n        link: 'text-primary underline-offset-4 hover:underline',\n      },\n      size: {\n        default: 'h-10 px-4 py-2',\n        sm: 'h-9 rounded-md px-3',\n        lg: 'h-11 rounded-md px-8',\n        icon: 'h-10 w-10',\n      },\n    },\n    defaultVariants: {\n      variant: 'default',\n      size: 'default',\n    },\n  }\n);\n\nexport interface ButtonProps\n  extends React.ButtonHTMLAttributes<HTMLButtonElement>,\n    VariantProps<typeof buttonVariants> {\n  isLoading?: boolean;\n}\n\nconst Button = React.forwardRef<HTMLButtonElement, ButtonProps>(\n  ({ className, variant, size, isLoading, children, ...props }, ref) => {\n    return (\n      <button\n        className={cn(buttonVariants({ variant, size, className }))}\n        ref={ref}\n        disabled={isLoading || props.disabled}\n        {...props}\n      >\n        {isLoading && (\n          <svg\n            className=\"animate-spin -ml-1 mr-2 h-4 w-4 text-current\"\n            xmlns=\"http://www.w3.org/2000/svg\"\n            fill=\"none\"\n            viewBox=\"0 0 24 24\"\n          >\n            <circle\n              className=\"opacity-25\"\n              cx=\"12\"\n              cy=\"12\"\n              r=\"10\"\n              stroke=\"currentColor\"\n              strokeWidth=\"4\"\n            ></circle>\n            <path\n              className=\"opacity-75\"\n              fill=\"currentColor\"\n              d=\"M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z\"\n            ></path>\n          </svg>\n        )}\n        {children}\n      </button>\n    );\n  }\n);\nButton.displayName = 'Button';\n\nexport { Button, buttonVariants }; ","usedDeprecatedRules":[]},{"filePath":"/home/vonj/Github/Nexus/src/components/ui/Calendar.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/vonj/Github/Nexus/src/components/ui/Card.test.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/vonj/Github/Nexus/src/components/ui/Card.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/vonj/Github/Nexus/src/components/ui/Checkbox.test.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/vonj/Github/Nexus/src/components/ui/Checkbox.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/vonj/Github/Nexus/src/components/ui/ColorPalette.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/vonj/Github/Nexus/src/components/ui/Dialog.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/vonj/Github/Nexus/src/components/ui/Dropdown.test.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/vonj/Github/Nexus/src/components/ui/Dropdown.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/vonj/Github/Nexus/src/components/ui/DropdownMenu.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/vonj/Github/Nexus/src/components/ui/ErrorBoundary.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/vonj/Github/Nexus/src/components/ui/Form.test.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/vonj/Github/Nexus/src/components/ui/Form.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/vonj/Github/Nexus/src/components/ui/Input.test.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/vonj/Github/Nexus/src/components/ui/Input.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/vonj/Github/Nexus/src/components/ui/InsightHeader.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/vonj/Github/Nexus/src/components/ui/Label.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/vonj/Github/Nexus/src/components/ui/LoadingScreen.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/vonj/Github/Nexus/src/components/ui/Modal.test.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/vonj/Github/Nexus/src/components/ui/Modal.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/vonj/Github/Nexus/src/components/ui/Progress.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/vonj/Github/Nexus/src/components/ui/RadioGroup.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/vonj/Github/Nexus/src/components/ui/ScrollArea.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/vonj/Github/Nexus/src/components/ui/SecurityStatus.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/vonj/Github/Nexus/src/components/ui/Select.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/vonj/Github/Nexus/src/components/ui/Separator.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/vonj/Github/Nexus/src/components/ui/SimpleTooltip.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/vonj/Github/Nexus/src/components/ui/Skeleton.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/vonj/Github/Nexus/src/components/ui/Spinner.test.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/vonj/Github/Nexus/src/components/ui/Spinner.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/vonj/Github/Nexus/src/components/ui/Switch.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/vonj/Github/Nexus/src/components/ui/Table.test.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/vonj/Github/Nexus/src/components/ui/Table.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/vonj/Github/Nexus/src/components/ui/Tabs.test.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/vonj/Github/Nexus/src/components/ui/Tabs.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/vonj/Github/Nexus/src/components/ui/Textarea.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/vonj/Github/Nexus/src/components/ui/Toast.tsx","messages":[{"ruleId":"react-refresh/only-export-components","severity":1,"message":"Fast refresh only works when a file only exports components. Use a new file to share constants or functions between components.","line":18,"column":14,"nodeType":"Identifier","messageId":"namedExport","endLine":18,"endColumn":22},{"ruleId":"no-restricted-syntax","severity":1,"message":"Use design tokens instead of hardcoded text colors (e.g., text-foreground, text-muted-foreground)","line":65,"column":34,"nodeType":"Literal","messageId":"restrictedSyntax","endLine":65,"endColumn":69},{"ruleId":"no-restricted-syntax","severity":1,"message":"Use design tokens instead of hardcoded text colors (e.g., text-foreground, text-muted-foreground)","line":66,"column":34,"nodeType":"Literal","messageId":"restrictedSyntax","endLine":66,"endColumn":62},{"ruleId":"no-restricted-syntax","severity":1,"message":"Use design tokens instead of hardcoded text colors (e.g., text-foreground, text-muted-foreground)","line":71,"column":33,"nodeType":"Literal","messageId":"restrictedSyntax","endLine":71,"endColumn":174}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { createContext, useContext, useState, useCallback } from 'react';\nimport { AnimatePresence, motion } from 'framer-motion';\nimport { X } from 'lucide-react';\n\ninterface Toast {\n  id: string;\n  title: string;\n  description: string;\n  type: 'success' | 'error' | 'warning' | 'info';\n}\n\ninterface ToastContextType {\n  showToast: (toast: Omit<Toast, 'id'>) => void;\n}\n\nconst ToastContext = createContext<ToastContextType | undefined>(undefined);\n\nexport const useToast = () => {\n  const context = useContext(ToastContext);\n  if (!context) {\n    throw new Error('useToast must be used within a ToastProvider');\n  }\n  return context;\n};\n\nexport const ToastProvider: React.FC<{ children: React.ReactNode }> = ({ children }) => {\n  const [toasts, setToasts] = useState<Toast[]>([]);\n\n  const showToast = useCallback((toast: Omit<Toast, 'id'>) => {\n    const id = Math.random().toString(36).substring(7);\n    setToasts((prev) => [...prev, { ...toast, id }]);\n\n    // Auto remove after 5 seconds\n    setTimeout(() => {\n      setToasts((prev) => prev.filter((t) => t.id !== id));\n    }, 5000);\n  }, []);\n\n  const removeToast = useCallback((id: string) => {\n    setToasts((prev) => prev.filter((toast) => toast.id !== id));\n  }, []);\n\n  return (\n    <ToastContext.Provider value={{ showToast }}>\n      {children}\n      <div className=\"fixed bottom-0 right-0 p-4 space-y-4 z-50\">\n        <AnimatePresence>\n          {toasts.map((toast) => (\n            <motion.div\n              key={toast.id}\n              initial={{ opacity: 0, y: 20 }}\n              animate={{ opacity: 1, y: 0 }}\n              exit={{ opacity: 0 }}\n              transition={{ duration: 0.3 }}\n              className={`max-w-sm w-full bg-white shadow-lg rounded-lg pointer-events-auto ring-1 ring-black ring-opacity-5 overflow-hidden ${\n                toast.type === 'error' ? 'ring-red-500' :\n                toast.type === 'success' ? 'ring-green-500' :\n                toast.type === 'warning' ? 'ring-yellow-500' :\n                'ring-blue-500'\n              }`}\n            >\n              <div className=\"p-4\">\n                <div className=\"flex items-start\">\n                  <div className=\"flex-1\">\n                    <p className=\"text-sm font-medium text-gray-900\">{toast.title}</p>\n                    <p className=\"mt-1 text-sm text-gray-500\">{toast.description}</p>\n                  </div>\n                  <div className=\"ml-4 flex-shrink-0 flex\">\n                    <button\n                      type=\"button\"\n                      className=\"bg-white rounded-md inline-flex text-gray-400 hover:text-gray-500 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-indigo-500\"\n                      onClick={() => removeToast(toast.id)}\n                    >\n                      <span className=\"sr-only\">Close</span>\n                      <X className=\"h-5 w-5\" aria-hidden=\"true\" />\n                    </button>\n                  </div>\n                </div>\n              </div>\n            </motion.div>\n          ))}\n        </AnimatePresence>\n      </div>\n    </ToastContext.Provider>\n  );\n}; ","usedDeprecatedRules":[]},{"filePath":"/home/vonj/Github/Nexus/src/components/ui/Tooltip.test.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/vonj/Github/Nexus/src/components/ui/Tooltip.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/vonj/Github/Nexus/src/components/ui/index.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/vonj/Github/Nexus/src/components/ui/theme-provider.test.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/vonj/Github/Nexus/src/components/ui/theme-provider.tsx","messages":[{"ruleId":"react-refresh/only-export-components","severity":1,"message":"Fast refresh only works when a file only exports components. Use a new file to share constants or functions between components.","line":26,"column":14,"nodeType":"Identifier","messageId":"namedExport","endLine":26,"endColumn":20},{"ruleId":"react-refresh/only-export-components","severity":1,"message":"Fast refresh only works when a file only exports components. Use a new file to share constants or functions between components.","line":101,"column":14,"nodeType":"Identifier","messageId":"namedExport","endLine":101,"endColumn":22}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { createContext, useContext, useEffect, useState } from 'react';\nimport { safeGetLocalStorage, safeSetLocalStorage } from '../../lib/utils/storageUtils';\n\ntype Theme = 'dark' | 'light' | 'system';\n\ntype ThemeProviderProps = {\n  children: React.ReactNode;\n  defaultTheme?: Theme;\n  defaultColor?: string;\n};\n\ntype ThemeProviderState = {\n  theme: Theme;\n  setTheme: (theme: Theme) => void;\n  primaryColor: string;\n  setPrimaryColor: (color: string) => void;\n};\n\nconst initialState: ThemeProviderState = {\n  theme: 'system',\n  setTheme: () => null,\n  primaryColor: 'blue',\n  setPrimaryColor: () => null,\n};\n\nexport const COLORS = [\n  { name: 'blue', value: '221.2 83.2% 53.3%', foreground: '210 40% 98%' },\n  { name: 'green', value: '142.1 76.2% 36.3%', foreground: '210 40% 98%' },\n  { name: 'orange', value: '24.6 95% 53.1%', foreground: '210 40% 98%' },\n  { name: 'red', value: '0 84.2% 60.2%', foreground: '210 40% 98%' },\n  { name: 'purple', value: '262.1 83.3% 57.8%', foreground: '210 40% 98%' },\n];\n\nconst ThemeProviderContext = createContext<ThemeProviderState>(initialState);\n\n/**\n * @name ThemeProvider\n * @description Provides theme context to the application for light/dark/system mode.\n * @param {ThemeProviderProps} props - The props for the component.\n * @returns {JSX.Element}\n */\nexport function ThemeProvider({ \n  children, \n  defaultTheme = 'system', \n  defaultColor = 'blue',\n  ...props \n}: ThemeProviderProps) {\n  const [theme, setTheme] = useState<Theme>(\n    () => safeGetLocalStorage<Theme>('theme', defaultTheme)\n  );\n  const [primaryColor, setPrimaryColor] = useState<string>(\n    () => safeGetLocalStorage<string>('primaryColor', defaultColor)\n  );\n\n  useEffect(() => {\n    const root = window.document.documentElement;\n    root.classList.remove('light', 'dark');\n\n    if (theme === 'system') {\n      const systemTheme = window.matchMedia('(prefers-color-scheme: dark)').matches ? 'dark' : 'light';\n      root.classList.add(systemTheme);\n    } else {\n      root.classList.add(theme);\n    }\n  }, [theme]);\n\n  useEffect(() => {\n    const root = window.document.documentElement;\n    const color = COLORS.find(c => c.name === primaryColor);\n    if (color) {\n      root.style.setProperty('--primary', color.value);\n      root.style.setProperty('--primary-foreground', color.foreground);\n    }\n  }, [primaryColor]);\n\n  const value = {\n    theme,\n    setTheme: (theme: Theme) => {\n      safeSetLocalStorage('theme', theme);\n      setTheme(theme);\n    },\n    primaryColor,\n    setPrimaryColor: (color: string) => {\n      safeSetLocalStorage('primaryColor', color);\n      setPrimaryColor(color);\n    },\n  };\n\n  return (\n    <ThemeProviderContext.Provider {...props} value={value}>\n      {children}\n    </ThemeProviderContext.Provider>\n  );\n}\n\n/**\n * @name useTheme\n * @description Hook to access the current theme and a function to update it.\n * @returns {ThemeProviderState} The current theme state and setter.\n */\nexport const useTheme = () => {\n  const context = useContext(ThemeProviderContext);\n  if (context === undefined) {\n    throw new Error('useTheme must be used within a ThemeProvider');\n  }\n  return context;\n}; ","usedDeprecatedRules":[]},{"filePath":"/home/vonj/Github/Nexus/src/components/ui/use-toast.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/vonj/Github/Nexus/src/components/waitlist/EmailCampaigns.tsx","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":417,"column":55,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":417,"endColumn":58,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[12968,12971],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[12968,12971],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\n * Email Campaigns System\n * Automated email sequences for waitlist nurturing and engagement\n * Milestone announcements, product updates, and conversion optimization\n */\n\nimport React, { useState, useEffect } from 'react';\nimport { motion, AnimatePresence } from 'framer-motion';\nimport {\n  Mail,\n  Send,\n  Users,\n  BarChart3,\n  Clock,\n  Target,\n  Zap,\n  Edit,\n  Play,\n  Pause,\n  Copy,\n  Eye,\n  TrendingUp,\n  Settings,\n  Download,\n  AlertTriangle,\n  Gift,\n  Rocket,\n  Heart,\n  MessageSquare,\n  Award as Trophy,\n} from 'lucide-react';\nimport { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/Card';\nimport { Button } from '@/components/ui/Button';\nimport { Badge } from '@/components/ui/Badge';\n\ninterface EmailCampaign {\n  id: string;\n  name: string;\n  type: 'welcome' | 'nurture' | 'milestone' | 'launch' | 'referral';\n  status: 'draft' | 'active' | 'paused' | 'completed';\n  recipients: number;\n  sent: number;\n  opens: number;\n  clicks: number;\n  conversions: number;\n  subject: string;\n  previewText: string;\n  scheduledFor?: Date;\n  createdAt: Date;\n  template: string;\n  unsubscribeRate: number;\n  growthRate: number;\n}\n\ninterface EmailSequence {\n  id: string;\n  name: string;\n  description: string;\n  emails: EmailCampaign[];\n  triggers: string[];\n  enrolledCount: number;\n  completionRate: number;\n  conversionRate: number;\n}\n\ninterface EmailMetrics {\n  totalSent: number;\n  openRate: number;\n  clickRate: number;\n  conversionRate: number;\n  unsubscribeRate: number;\n  growthRate: number;\n}\n\nconst EmailCampaigns: React.FC = () => {\n  const [campaigns, setCampaigns] = useState<EmailCampaign[]>([]);\n  const [sequences, setSequences] = useState<EmailSequence[]>([]);\n  const [metrics] = useState<EmailMetrics>({\n    totalSent: 8429,\n    openRate: 68.4,\n    clickRate: 12.7,\n    conversionRate: 4.2,\n    unsubscribeRate: 0.8,\n    growthRate: 15.3,\n  });\n  \n  const [selectedTab, setSelectedTab] = useState<\n    'campaigns' | 'sequences' | 'templates'\n  >('campaigns');\n  // const [showCampaignModal, setShowCampaignModal] = useState(false);\n  // const [selectedCampaign, setSelectedCampaign] = useState<EmailCampaign | null>(\n  //   null\n  // );\n\n  useEffect(() => {\n    // Mock campaign data\n    const mockCampaigns: EmailCampaign[] = [\n      {\n        id: '1',\n        name: 'Welcome to the Revolution',\n        type: 'welcome',\n        status: 'active',\n        recipients: 2847,\n        sent: 2847,\n        opens: 1947,\n        clicks: 361,\n        conversions: 120,\n        subject: '🚀 Welcome to Nexus - Your Journey Begins!',\n        previewText: 'Thanks for joining the waitlist! Here\\'s what happens next...',\n        createdAt: new Date(Date.now() - 5 * 24 * 60 * 60 * 1000),\n        template: 'welcome-series',\n        unsubscribeRate: 0.8,\n        growthRate: 15.3,\n      },\n      {\n        id: '2',\n        name: 'Founder Tier Closing Soon',\n        type: 'milestone',\n        status: 'active',\n        recipients: 847,\n        sent: 847,\n        opens: 623,\n        clicks: 156,\n        conversions: 67,\n        subject: '⚡ URGENT: Only 11 Founder spots left!',\n        previewText: 'The founder tier closes at 100 members. Secure your spot now...',\n        scheduledFor: new Date(Date.now() + 2 * 60 * 60 * 1000),\n        createdAt: new Date(Date.now() - 2 * 24 * 60 * 60 * 1000),\n        template: 'urgency-milestone',\n        unsubscribeRate: 0.8,\n        growthRate: 15.3,\n      },\n      {\n        id: '3',\n        name: 'Behind the Scenes Update',\n        type: 'nurture',\n        status: 'draft',\n        recipients: 2847,\n        sent: 0,\n        opens: 0,\n        clicks: 0,\n        conversions: 0,\n        subject: '🔥 Exclusive: See Nexus in Action',\n        previewText: 'Get an exclusive behind-the-scenes look at what we\\'re building...',\n        createdAt: new Date(),\n        template: 'product-update',\n        unsubscribeRate: 0.8,\n        growthRate: 15.3,\n      },\n      {\n        id: '4',\n        name: 'Referral Rewards Program',\n        type: 'referral',\n        status: 'active',\n        recipients: 456,\n        sent: 456,\n        opens: 298,\n        clicks: 89,\n        conversions: 34,\n        subject: '🎁 Earn rewards by sharing Nexus',\n        previewText: 'Your referral link is ready! Start earning exclusive benefits...',\n        createdAt: new Date(Date.now() - 3 * 24 * 60 * 60 * 1000),\n        template: 'referral-program',\n        unsubscribeRate: 0.8,\n        growthRate: 15.3,\n      }\n    ];\n\n    const mockSequences: EmailSequence[] = [\n      {\n        id: '1',\n        name: 'Waitlist Onboarding',\n        description: 'Welcome new members and build excitement',\n        emails: mockCampaigns.filter(c => c.type === 'welcome'),\n        triggers: ['waitlist_signup'],\n        enrolledCount: 2847,\n        completionRate: 78.4,\n        conversionRate: 12.3\n      },\n      {\n        id: '2',\n        name: 'Milestone Celebrations',\n        description: 'Announce achievements and create urgency',\n        emails: mockCampaigns.filter(c => c.type === 'milestone'),\n        triggers: ['milestone_reached', 'tier_closing'],\n        enrolledCount: 1247,\n        completionRate: 65.7,\n        conversionRate: 8.9\n      },\n      {\n        id: '3',\n        name: 'Product Education',\n        description: 'Educate about features and benefits',\n        emails: mockCampaigns.filter(c => c.type === 'nurture'),\n        triggers: ['week_2', 'week_4', 'week_6'],\n        enrolledCount: 2156,\n        completionRate: 56.2,\n        conversionRate: 6.8\n      }\n    ];\n\n    setCampaigns(mockCampaigns);\n    setSequences(mockSequences);\n  }, []);\n\n  const emailTemplates = [\n    {\n      id: 'welcome-series',\n      name: 'Welcome Series',\n      description: 'Warm welcome with next steps and expectations',\n      type: 'welcome',\n      preview: '🚀 Welcome to the future of business operations...',\n      performance: { opens: 72.3, clicks: 15.8, conversions: 8.2 }\n    },\n    {\n      id: 'urgency-milestone',\n      name: 'Urgency & Milestones',\n      description: 'Create urgency around limited spots and achievements',\n      type: 'milestone',\n      preview: '⚡ Only X spots remaining in the founder tier...',\n      performance: { opens: 81.7, clicks: 18.4, conversions: 12.1 }\n    },\n    {\n      id: 'product-update',\n      name: 'Product Updates',\n      description: 'Share development progress and feature previews',\n      type: 'nurture',\n      preview: '🔥 Exclusive preview: See what we\\'re building...',\n      performance: { opens: 68.9, clicks: 12.3, conversions: 5.7 }\n    },\n    {\n      id: 'referral-program',\n      name: 'Referral Program',\n      description: 'Promote referral benefits and share tools',\n      type: 'referral',\n      preview: '🎁 Earn exclusive rewards by inviting friends...',\n      performance: { opens: 65.4, clicks: 19.6, conversions: 14.3 }\n    },\n    {\n      id: 'launch-countdown',\n      name: 'Launch Countdown',\n      description: 'Build excitement for product launch',\n      type: 'launch',\n      preview: '⏰ T-minus 7 days until Nexus launches...',\n      performance: { opens: 89.2, clicks: 24.7, conversions: 18.9 }\n    }\n  ];\n\n  const getCampaignIcon = (type: string) => {\n    switch (type) {\n      case 'welcome': return <Heart className=\"w-4 h-4\" />;\n      case 'milestone': return <Trophy className=\"w-4 h-4\" />;\n      case 'nurture': return <MessageSquare className=\"w-4 h-4\" />;\n      case 'launch': return <Rocket className=\"w-4 h-4\" />;\n      case 'referral': return <Gift className=\"w-4 h-4\" />;\n      default: return <Mail className=\"w-4 h-4\" />;\n    }\n  };\n\n  const getStatusColor = (status: string) => {\n    switch (status) {\n      case 'active': return 'bg-success/10 text-success';\n      case 'draft': return 'bg-muted text-foreground';\n      case 'paused': return 'bg-warning/10 text-warning/80';\n      case 'completed': return 'bg-primary/10 text-primary';\n      default: return 'bg-muted text-foreground';\n    }\n  };\n\n  const calculateRate = (numerator: number, denominator: number) => {\n    if (denominator === 0) return 0;\n    return parseFloat(((numerator / denominator) * 100).toFixed(1));\n  };\n\n  const handleCampaignAction = (\n    campaignId: string,\n    action: 'edit' | 'duplicate' | 'pause' | 'resume' | 'delete'\n  ) => {\n    console.log(`Action: ${action} on campaign ${campaignId}`);\n    const campaign = campaigns.find(c => c.id === campaignId);\n    if (!campaign) return;\n\n    switch (action) {\n      case 'edit':\n        // setSelectedCampaign(campaign);\n        // setShowCampaignModal(true);\n        break;\n      case 'duplicate':\n        const newCampaign: EmailCampaign = {\n          ...campaign,\n          id: Date.now().toString(),\n          name: `${campaign.name} (Copy)`,\n          status: 'draft' as const,\n          unsubscribeRate: 0.8,\n          growthRate: 15.3,\n        };\n        setCampaigns(prev => [...prev, newCampaign]);\n        break;\n      case 'pause':\n        setCampaigns(prev => prev.map(c => c.id === campaignId ? { ...c, status: 'paused' } : c));\n        break;\n      case 'resume':\n        setCampaigns(prev => prev.map(c => c.id === campaignId ? { ...c, status: 'active' } : c));\n        break;\n      case 'delete':\n        if (confirm('Are you sure you want to delete this campaign?')) {\n          setCampaigns(prev => prev.filter(c => c.id !== campaignId));\n        }\n        break;\n    }\n  };\n\n  return (\n    <div className=\"p-6 space-y-6\">\n      {/* Header */}\n      <div className=\"flex items-center justify-between\">\n        <div>\n          <h1 className=\"text-3xl font-bold\">Email Campaigns</h1>\n          <p className=\"text-muted-foreground\">Nurture your waitlist and drive conversions</p>\n        </div>\n        \n        <div className=\"flex gap-4\">\n          <Button variant=\"outline\">\n            <Download className=\"w-4 h-4 mr-2\" />\n            Export Report\n          </Button>\n          <Button onClick={() => { /* setShowCampaignModal(true) */ }}>\n            <Mail className=\"w-4 h-4 mr-2\" />\n            New Campaign\n          </Button>\n        </div>\n      </div>\n\n      {/* Metrics Overview */}\n      <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-6 gap-4\">\n        {[\n          {\n            title: 'Total Sent',\n            value: metrics.totalSent.toLocaleString(),\n            change: `+${metrics.growthRate}%`,\n            icon: <Send className=\"w-5 h-5\" />,\n            color: 'text-primary'\n          },\n          {\n            title: 'Open Rate',\n            value: `${metrics.openRate}%`,\n            change: '+2.3%',\n            icon: <Eye className=\"w-5 h-5\" />,\n            color: 'text-success'\n          },\n          {\n            title: 'Click Rate',\n            value: `${metrics.clickRate}%`,\n            change: '+1.8%',\n            icon: <Target className=\"w-5 h-5\" />,\n            color: 'text-secondary'\n          },\n          {\n            title: 'Conversion Rate',\n            value: `${metrics.conversionRate}%`,\n            change: '+0.9%',\n            icon: <TrendingUp className=\"w-5 h-5\" />,\n            color: 'text-warning'\n          },\n          {\n            title: 'Unsubscribe Rate',\n            value: `${metrics.unsubscribeRate}%`,\n            change: '-0.2%',\n            icon: <AlertTriangle className=\"w-5 h-5\" />,\n            color: 'text-destructive'\n          },\n          {\n            title: 'List Growth',\n            value: `+${metrics.growthRate}%`,\n            change: '+3.1%',\n            icon: <Users className=\"w-5 h-5\" />,\n            color: 'text-cyan-600'\n          }\n        ].map((metric, index) => (\n          <motion.div\n            key={index}\n            initial={{ opacity: 0, y: 20 }}\n            animate={{ opacity: 1, y: 0 }}\n            transition={{ delay: index * 0.1 }}\n          >\n            <Card>\n              <CardContent className=\"p-4\">\n                <div className=\"flex items-center justify-between\">\n                  <div>\n                    <p className=\"text-muted-foreground text-sm\">{metric.title}</p>\n                    <p className=\"text-xl font-bold\">{metric.value}</p>\n                    <p className=\"text-sm text-success\">{metric.change}</p>\n                  </div>\n                  <div className={`${metric.color}`}>\n                    {metric.icon}\n                  </div>\n                </div>\n              </CardContent>\n            </Card>\n          </motion.div>\n        ))}\n      </div>\n\n      {/* Tab Navigation */}\n      <div className=\"flex space-x-1 bg-muted p-1 rounded-lg w-fit\">\n        {[\n          { id: 'campaigns', label: 'Campaigns', icon: Mail },\n          { id: 'sequences', label: 'Sequences', icon: Zap },\n          { id: 'templates', label: 'Templates', icon: Copy }\n        ].map((tab) => {\n          const Icon = tab.icon;\n          return (\n            <Button\n              key={tab.id}\n              variant={selectedTab === tab.id ? 'default' : 'ghost'}\n              size=\"sm\"\n              onClick={() => setSelectedTab(tab.id as any)}\n              className=\"flex items-center\"\n            >\n              <Icon className=\"w-4 h-4 mr-2\" />\n              {tab.label}\n            </Button>\n          );\n        })}\n      </div>\n\n      {/* Tab Content */}\n      <AnimatePresence mode=\"wait\">\n        {selectedTab === 'campaigns' && (\n          <motion.div\n            key=\"campaigns\"\n            initial={{ opacity: 0, x: 20 }}\n            animate={{ opacity: 1, x: 0 }}\n            exit={{ opacity: 0, x: -20 }}\n          >\n            <Card>\n              <CardHeader>\n                <CardTitle className=\"flex items-center\">\n                  <Mail className=\"w-5 h-5 mr-2\" />\n                  Email Campaigns ({campaigns.length})\n                </CardTitle>\n              </CardHeader>\n              <CardContent>\n                <div className=\"space-y-4\">\n                  {campaigns.map((campaign, index) => (\n                    <motion.div\n                      key={campaign.id}\n                      initial={{ opacity: 0, y: 20 }}\n                      animate={{ opacity: 1, y: 0 }}\n                      transition={{ delay: index * 0.1 }}\n                      className=\"flex items-center justify-between p-4 border rounded-lg hover:bg-muted/50 transition-colors\"\n                    >\n                      <div className=\"flex items-center space-x-4\">\n                        <div className=\"w-10 h-10 bg-primary/10 rounded-lg flex items-center justify-center\">\n                          {getCampaignIcon(campaign.type)}\n                        </div>\n                        \n                        <div className=\"flex-1\">\n                          <div className=\"flex items-center space-x-2 mb-1\">\n                            <h3 className=\"font-semibold\">{campaign.name}</h3>\n                            <Badge className={getStatusColor(campaign.status)}>\n                              {campaign.status.charAt(0).toUpperCase() + campaign.status.slice(1)}\n                            </Badge>\n                          </div>\n                          <p className=\"text-sm text-muted-foreground mb-2\">{campaign.subject}</p>\n                          <div className=\"flex items-center space-x-4 text-sm text-muted-foreground\">\n                            <span>{campaign.recipients} recipients</span>\n                            {campaign.sent > 0 && (\n                              <>\n                                <span>•</span>\n                                <span>{calculateRate(campaign.opens, campaign.sent)}% open rate</span>\n                                <span>•</span>\n                                <span>{calculateRate(campaign.clicks, campaign.sent)}% click rate</span>\n                              </>\n                            )}\n                          </div>\n                        </div>\n                      </div>\n                      \n                      <div className=\"flex items-center space-x-2\">\n                        {campaign.scheduledFor && (\n                          <Badge variant=\"outline\" className=\"text-xs\">\n                            <Clock className=\"w-3 h-3 mr-1\" />\n                            Scheduled\n                          </Badge>\n                        )}\n                        \n                        <Button\n                          variant=\"outline\"\n                          size=\"sm\"\n                          onClick={(e) => { e.stopPropagation(); handleCampaignAction(campaign.id, 'edit'); }}\n                        >\n                          <Edit className=\"w-4 h-4\" />\n                        </Button>\n                        \n                        <Button\n                          variant=\"outline\"\n                          size=\"sm\"\n                          onClick={(e) => { e.stopPropagation(); handleCampaignAction(campaign.id, campaign.status === 'active' ? 'pause' : 'resume'); }}\n                        >\n                          {campaign.status === 'active' ? (\n                            <Pause className=\"w-4 h-4\" />\n                          ) : (\n                            <Play className=\"w-4 h-4\" />\n                          )}\n                        </Button>\n                      </div>\n                    </motion.div>\n                  ))}\n                </div>\n              </CardContent>\n            </Card>\n          </motion.div>\n        )}\n\n        {selectedTab === 'sequences' && (\n          <motion.div\n            key=\"sequences\"\n            initial={{ opacity: 0, x: 20 }}\n            animate={{ opacity: 1, x: 0 }}\n            exit={{ opacity: 0, x: -20 }}\n          >\n            <Card>\n              <CardHeader>\n                <CardTitle className=\"flex items-center\">\n                  <Zap className=\"w-5 h-5 mr-2\" />\n                  Email Sequences ({sequences.length})\n                </CardTitle>\n              </CardHeader>\n              <CardContent>\n                <div className=\"grid gap-6\">\n                  {sequences.map((sequence, index) => (\n                    <motion.div\n                      key={sequence.id}\n                      initial={{ opacity: 0, y: 20 }}\n                      animate={{ opacity: 1, y: 0 }}\n                      transition={{ delay: index * 0.1 }}\n                      className=\"p-6 border rounded-lg\"\n                    >\n                      <div className=\"flex items-center justify-between mb-4\">\n                        <div>\n                          <h3 className=\"text-lg font-semibold\">{sequence.name}</h3>\n                          <p className=\"text-muted-foreground\">{sequence.description}</p>\n                        </div>\n                        <div className=\"text-right\">\n                          <div className=\"text-2xl font-bold\">{sequence.enrolledCount}</div>\n                          <div className=\"text-sm text-muted-foreground\">enrolled</div>\n                        </div>\n                      </div>\n                      \n                      <div className=\"grid grid-cols-2 md:grid-cols-4 gap-4 mb-4\">\n                        <div className=\"text-center\">\n                          <div className=\"text-lg font-bold\">{sequence.emails.length}</div>\n                          <div className=\"text-sm text-muted-foreground\">Emails</div>\n                        </div>\n                        <div className=\"text-center\">\n                          <div className=\"text-lg font-bold\">{sequence.completionRate}%</div>\n                          <div className=\"text-sm text-muted-foreground\">Completion</div>\n                        </div>\n                        <div className=\"text-center\">\n                          <div className=\"text-lg font-bold\">{sequence.conversionRate}%</div>\n                          <div className=\"text-sm text-muted-foreground\">Conversion</div>\n                        </div>\n                        <div className=\"text-center\">\n                          <div className=\"text-lg font-bold\">{sequence.triggers.length}</div>\n                          <div className=\"text-sm text-muted-foreground\">Triggers</div>\n                        </div>\n                      </div>\n                      \n                      <div className=\"flex items-center justify-between\">\n                        <div className=\"flex items-center space-x-2\">\n                          {sequence.triggers.map((trigger, triggerIndex) => (\n                            <Badge key={triggerIndex} variant=\"outline\" className=\"text-xs\">\n                              {trigger.replace('_', ' ')}\n                            </Badge>\n                          ))}\n                        </div>\n                        \n                        <div className=\"flex items-center space-x-2\">\n                          <Button variant=\"outline\" size=\"sm\">\n                            <Settings className=\"w-4 h-4 mr-2\" />\n                            Configure\n                          </Button>\n                          <Button variant=\"outline\" size=\"sm\">\n                            <BarChart3 className=\"w-4 h-4 mr-2\" />\n                            Analytics\n                          </Button>\n                        </div>\n                      </div>\n                    </motion.div>\n                  ))}\n                </div>\n              </CardContent>\n            </Card>\n          </motion.div>\n        )}\n\n        {selectedTab === 'templates' && (\n          <motion.div\n            key=\"templates\"\n            initial={{ opacity: 0, x: 20 }}\n            animate={{ opacity: 1, x: 0 }}\n            exit={{ opacity: 0, x: -20 }}\n          >\n            <Card>\n              <CardHeader>\n                <CardTitle className=\"flex items-center\">\n                  <Copy className=\"w-5 h-5 mr-2\" />\n                  Email Templates ({emailTemplates.length})\n                </CardTitle>\n              </CardHeader>\n              <CardContent>\n                <div className=\"grid md:grid-cols-2 gap-6\">\n                  {emailTemplates.map((template, index) => (\n                    <motion.div\n                      key={template.id}\n                      initial={{ opacity: 0, y: 20 }}\n                      animate={{ opacity: 1, y: 0 }}\n                      transition={{ delay: index * 0.1 }}\n                      className=\"p-6 border rounded-lg hover:bg-muted/50 transition-colors\"\n                    >\n                      <div className=\"flex items-start justify-between mb-4\">\n                        <div>\n                          <div className=\"flex items-center space-x-2 mb-2\">\n                            {getCampaignIcon(template.type)}\n                            <h3 className=\"font-semibold\">{template.name}</h3>\n                          </div>\n                          <p className=\"text-sm text-muted-foreground mb-3\">{template.description}</p>\n                          <div className=\"p-4 bg-muted/50 rounded border-l-4 border-secondary\">\n                            <p className=\"text-sm italic\">{template.preview}</p>\n                          </div>\n                        </div>\n                      </div>\n                      \n                      <div className=\"grid grid-cols-3 gap-4 mb-4\">\n                        <div className=\"text-center\">\n                          <div className=\"text-lg font-bold text-success\">{template.performance.opens}%</div>\n                          <div className=\"text-xs text-muted-foreground\">Opens</div>\n                        </div>\n                        <div className=\"text-center\">\n                          <div className=\"text-lg font-bold text-primary\">{template.performance.clicks}%</div>\n                          <div className=\"text-xs text-muted-foreground\">Clicks</div>\n                        </div>\n                        <div className=\"text-center\">\n                          <div className=\"text-lg font-bold text-secondary\">{template.performance.conversions}%</div>\n                          <div className=\"text-xs text-muted-foreground\">Converts</div>\n                        </div>\n                      </div>\n                      \n                      <div className=\"flex items-center space-x-2\">\n                        <Button variant=\"outline\" size=\"sm\" className=\"flex-1\">\n                          <Eye className=\"w-4 h-4 mr-2\" />\n                          Preview\n                        </Button>\n                        <Button size=\"sm\" className=\"flex-1\">\n                          <Copy className=\"w-4 h-4 mr-2\" />\n                          Use Template\n                        </Button>\n                      </div>\n                    </motion.div>\n                  ))}\n                </div>\n              </CardContent>\n            </Card>\n          </motion.div>\n        )}\n      </AnimatePresence>\n    </div>\n  );\n};\n\nexport default EmailCampaigns; ","usedDeprecatedRules":[]},{"filePath":"/home/vonj/Github/Nexus/src/components/waitlist/ReferralSystem.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/vonj/Github/Nexus/src/components/waitlist/ShareWidget.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/vonj/Github/Nexus/src/components/waitlist/WaitlistManager.tsx","messages":[{"ruleId":"no-restricted-syntax","severity":1,"message":"Use design tokens instead of hardcoded colors (e.g., bg-primary, bg-secondary)","line":119,"column":23,"nodeType":"Literal","messageId":"restrictedSyntax","endLine":119,"endColumn":36},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":347,"column":38,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":347,"endColumn":41,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[12705,12708],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[12705,12708],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":348,"column":41,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":348,"endColumn":44,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[12751,12754],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[12751,12754],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\n * Waitlist Management System\n * Admin dashboard for managing pre-order waitlist and hype campaigns\n * Tracks signups, referrals, engagement metrics, and conversion funnel\n */\n\nimport React, { useState, useEffect } from 'react';\nimport { motion, AnimatePresence } from 'framer-motion';\nimport {\n  Users,\n  TrendingUp,\n  Mail,\n  Share2,\n  Gift,\n  BarChart3,\n  Download,\n  Search,\n  ArrowUp,\n  AlertTriangle,\n  DollarSign,\n  Globe\n} from 'lucide-react';\nimport { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/Card';\nimport { Button } from '@/components/ui/Button';\nimport { Input } from '@/components/ui/Input';\nimport { Badge } from '@/components/ui/Badge';\nimport { Alert, AlertDescription } from '@/components/ui/Alert';\n\ninterface WaitlistEntry {\n  id: string;\n  email: string;\n  firstName: string;\n  company?: string;\n  position: number;\n  tier: 'founder' | 'vip' | 'early-bird';\n  joinedAt: Date;\n  referrals: number;\n  referredBy?: string;\n  source: 'direct' | 'social' | 'referral' | 'paid';\n  country: string;\n  status: 'active' | 'converted' | 'churned';\n  engagementScore: number;\n}\n\ninterface DashboardMetrics {\n  totalSignups: number;\n  dailyGrowthRate: number;\n  conversionRate: number;\n  referralRate: number;\n  avgReferralsPerUser: number;\n  topReferrers: number;\n  socialShares: number;\n  emailOpenRate: number;\n  totalRevenuePotential: number;\n}\n\ninterface CampaignData {\n  name: string;\n  signups: number;\n  conversions: number;\n  revenue: number;\n  roi: number;\n}\n\nconst WaitlistManager: React.FC = () => {\n  const [waitlistEntries, setWaitlistEntries] = useState<WaitlistEntry[]>([]);\n  const [metrics] = useState<DashboardMetrics>({\n    totalSignups: 2847,\n    dailyGrowthRate: 8.5,\n    conversionRate: 12.3,\n    referralRate: 34.2,\n    avgReferralsPerUser: 2.8,\n    topReferrers: 47,\n    socialShares: 1234,\n    emailOpenRate: 68.4,\n    totalRevenuePotential: 847200\n  });\n  \n  const [searchTerm, setSearchTerm] = useState('');\n  const [selectedTier, setSelectedTier] = useState<string>('all');\n  const [sortBy, setSortBy] = useState<'position' | 'referrals' | 'joinedAt'>('position');\n  const [sortOrder, setSortOrder] = useState<'asc' | 'desc'>('asc');\n  const [showExportModal, setShowExportModal] = useState(false);\n  const [selectedEntries, setSelectedEntries] = useState<string[]>([]);\n\n  // Mock waitlist data\n  useEffect(() => {\n    const mockEntries: WaitlistEntry[] = Array.from({ length: 50 }, (_, i) => ({\n      id: `entry-${i + 1}`,\n      email: `user${i + 1}@company${Math.floor(Math.random() * 100)}.com`,\n      firstName: ['Alex', 'Sarah', 'Mike', 'Emma', 'David', 'Lisa', 'John', 'Kate'][Math.floor(Math.random() * 8)],\n      company: ['TechCorp', 'StartupLab', 'InnovateCo', 'GrowthInc', 'ScaleTech'][Math.floor(Math.random() * 5)],\n      position: i + 1,\n      tier: i < 5 ? 'founder' : i < 25 ? 'vip' : 'early-bird',\n      joinedAt: new Date(Date.now() - Math.random() * 30 * 24 * 60 * 60 * 1000),\n      referrals: Math.floor(Math.random() * 15),\n      referredBy: Math.random() > 0.7 ? `ref-${Math.floor(Math.random() * 100)}` : undefined,\n      source: ['direct', 'social', 'referral', 'paid'][Math.floor(Math.random() * 4)] as WaitlistEntry['source'],\n      country: ['US', 'CA', 'UK', 'DE', 'FR', 'AU'][Math.floor(Math.random() * 6)],\n      status: ['active', 'converted', 'churned'][Math.floor(Math.random() * 3)] as WaitlistEntry['status'],\n      engagementScore: Math.floor(Math.random() * 100)\n    }));\n    \n    setWaitlistEntries(mockEntries);\n  }, []);\n\n  const campaigns: CampaignData[] = [\n    { name: 'Social Media Blitz', signups: 847, conversions: 104, revenue: 52000, roi: 340 },\n    { name: 'Referral Program', signups: 1234, conversions: 189, revenue: 94500, roi: 780 },\n    { name: 'Email Campaign', signups: 456, conversions: 67, revenue: 33500, roi: 220 },\n    { name: 'Influencer Partnerships', signups: 623, conversions: 82, revenue: 41000, roi: 180 }\n  ];\n\n  const getTierColor = (tier: string) => {\n    switch (tier) {\n      case 'founder': return 'bg-gradient-to-r from-yellow-400 to-orange-500';\n      case 'vip': return 'bg-gradient-to-r from-purple-500 to-pink-500';\n      case 'early-bird': return 'bg-gradient-to-r from-blue-500 to-cyan-500';\n      default: return 'bg-gray-500';\n    }\n  };\n\n  const getSourceIcon = (source: string) => {\n    switch (source) {\n      case 'social': return <Share2 className=\"w-4 h-4\" />;\n      case 'referral': return <Gift className=\"w-4 h-4\" />;\n      case 'paid': return <DollarSign className=\"w-4 h-4\" />;\n      default: return <Globe className=\"w-4 h-4\" />;\n    }\n  };\n\n  const filteredEntries = waitlistEntries\n    .filter(entry => {\n      const matchesSearch = entry.email.toLowerCase().includes(searchTerm.toLowerCase()) ||\n                           entry.firstName.toLowerCase().includes(searchTerm.toLowerCase()) ||\n                           entry.company?.toLowerCase().includes(searchTerm.toLowerCase());\n      const matchesTier = selectedTier === 'all' || entry.tier === selectedTier;\n      return matchesSearch && matchesTier;\n    })\n    .sort((a, b) => {\n      const modifier = sortOrder === 'asc' ? 1 : -1;\n      switch (sortBy) {\n        case 'position': return (a.position - b.position) * modifier;\n        case 'referrals': return (a.referrals - b.referrals) * modifier;\n        case 'joinedAt': return (a.joinedAt.getTime() - b.joinedAt.getTime()) * modifier;\n        default: return 0;\n      }\n    });\n\n  const handleExport = (format: 'csv' | 'json') => {\n    const data = selectedEntries.length > 0 \n      ? waitlistEntries.filter(entry => selectedEntries.includes(entry.id))\n      : waitlistEntries;\n    \n    if (format === 'csv') {\n      const csv = [\n        'Position,Email,Name,Company,Tier,Referrals,Joined,Source,Country,Status',\n        ...data.map(entry => [\n          entry.position,\n          entry.email,\n          entry.firstName,\n          entry.company || '',\n          entry.tier,\n          entry.referrals,\n          entry.joinedAt.toISOString().split('T')[0],\n          entry.source,\n          entry.country,\n          entry.status\n        ].join(','))\n      ].join('\\n');\n      \n      const blob = new Blob([csv], { type: 'text/csv' });\n      const url = window.URL.createObjectURL(blob);\n      const a = document.createElement('a');\n      a.href = url;\n      a.download = 'nexus-waitlist.csv';\n      a.click();\n    } else {\n      const json = JSON.stringify(data, null, 2);\n      const blob = new Blob([json], { type: 'application/json' });\n      const url = window.URL.createObjectURL(blob);\n      const a = document.createElement('a');\n      a.href = url;\n      a.download = 'nexus-waitlist.json';\n      a.click();\n    }\n    \n    setShowExportModal(false);\n  };\n\n  const sendBulkEmail = () => {\n    const recipients = selectedEntries.length > 0 \n      ? selectedEntries.length \n      : waitlistEntries.length;\n    \n    alert(`Bulk email sent to ${recipients} waitlist members!`);\n  };\n\n  return (\n    <div className=\"p-6 space-y-6\">\n      {/* Header */}\n      <div className=\"flex items-center justify-between\">\n        <div>\n          <h1 className=\"text-3xl font-bold\">Waitlist Command Center</h1>\n          <p className=\"text-muted-foreground\">Manage your Nexus pre-order campaign</p>\n        </div>\n        \n        <div className=\"flex gap-4\">\n          <Button onClick={() => setShowExportModal(true)} variant=\"outline\">\n            <Download className=\"w-4 h-4 mr-2\" />\n            Export Data\n          </Button>\n          <Button onClick={sendBulkEmail} className=\"bg-secondary hover:bg-secondary/90\">\n            <Mail className=\"w-4 h-4 mr-2\" />\n            Send Update\n          </Button>\n        </div>\n      </div>\n\n      {/* Key Metrics */}\n      <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6\">\n        {[\n          {\n            title: 'Total Signups',\n            value: metrics.totalSignups.toLocaleString(),\n            change: `+${metrics.dailyGrowthRate}%`,\n            icon: <Users className=\"w-6 h-6\" />,\n            color: 'text-primary'\n          },\n          {\n            title: 'Revenue Potential',\n            value: `$${(metrics.totalRevenuePotential / 1000).toFixed(0)}K`,\n            change: `+${metrics.conversionRate}%`,\n            icon: <DollarSign className=\"w-6 h-6\" />,\n            color: 'text-success'\n          },\n          {\n            title: 'Referral Rate',\n            value: `${metrics.referralRate}%`,\n            change: `+${metrics.avgReferralsPerUser}`,\n            icon: <Gift className=\"w-6 h-6\" />,\n            color: 'text-secondary'\n          },\n          {\n            title: 'Engagement',\n            value: `${metrics.emailOpenRate}%`,\n            change: `+${metrics.socialShares}`,\n            icon: <TrendingUp className=\"w-6 h-6\" />,\n            color: 'text-warning'\n          }\n        ].map((metric, index) => (\n          <motion.div\n            key={index}\n            initial={{ opacity: 0, y: 20 }}\n            animate={{ opacity: 1, y: 0 }}\n            transition={{ delay: index * 0.1 }}\n          >\n            <Card>\n              <CardContent className=\"p-6\">\n                <div className=\"flex items-center justify-between\">\n                  <div>\n                    <p className=\"text-muted-foreground text-sm\">{metric.title}</p>\n                    <p className=\"text-2xl font-bold\">{metric.value}</p>\n                    <p className=\"text-sm text-success flex items-center\">\n                      <ArrowUp className=\"w-3 h-3 mr-1\" />\n                      {metric.change}\n                    </p>\n                  </div>\n                  <div className={`${metric.color}`}>\n                    {metric.icon}\n                  </div>\n                </div>\n              </CardContent>\n            </Card>\n          </motion.div>\n        ))}\n      </div>\n\n      {/* Campaign Performance */}\n      <Card>\n        <CardHeader>\n          <CardTitle className=\"flex items-center\">\n            <BarChart3 className=\"w-5 h-5 mr-2\" />\n            Campaign Performance\n          </CardTitle>\n        </CardHeader>\n        <CardContent>\n          <div className=\"space-y-4\">\n            {campaigns.map((campaign, index) => (\n              <div key={index} className=\"flex items-center justify-between p-4 bg-muted/50 rounded-lg\">\n                <div className=\"flex-1\">\n                  <h3 className=\"font-semibold\">{campaign.name}</h3>\n                  <div className=\"flex items-center gap-4 text-sm text-muted-foreground\">\n                    <span>{campaign.signups} signups</span>\n                    <span>{campaign.conversions} conversions</span>\n                    <span>${campaign.revenue.toLocaleString()} revenue</span>\n                  </div>\n                </div>\n                <div className=\"text-right\">\n                  <div className=\"text-lg font-bold text-success\">{campaign.roi}% ROI</div>\n                  <div className=\"text-sm text-muted-foreground\">Return on Investment</div>\n                </div>\n              </div>\n            ))}\n          </div>\n        </CardContent>\n      </Card>\n\n      {/* Waitlist Management */}\n      <Card>\n        <CardHeader>\n          <div className=\"flex items-center justify-between\">\n            <CardTitle className=\"flex items-center\">\n              <Users className=\"w-5 h-5 mr-2\" />\n              Waitlist Members ({filteredEntries.length})\n            </CardTitle>\n            \n            <div className=\"flex items-center gap-4\">\n              {/* Search */}\n              <div className=\"relative\">\n                <Search className=\"absolute left-3 top-1/2 transform -translate-y-1/2 text-muted-foreground w-4 h-4\" />\n                <Input\n                  placeholder=\"Search members...\"\n                  value={searchTerm}\n                  onChange={(e) => setSearchTerm(e.target.value)}\n                  className=\"pl-10 w-64\"\n                />\n              </div>\n              \n              {/* Tier Filter */}\n              <select\n                value={selectedTier}\n                onChange={(e) => setSelectedTier(e.target.value)}\n                className=\"px-4 py-2 border border-border rounded-md bg-background\"\n              >\n                <option value=\"all\">All Tiers</option>\n                <option value=\"founder\">Founder</option>\n                <option value=\"vip\">VIP</option>\n                <option value=\"early-bird\">Early Bird</option>\n              </select>\n              \n              {/* Sort */}\n              <select\n                value={`${sortBy}-${sortOrder}`}\n                onChange={(e) => {\n                  const [field, order] = e.target.value.split('-');\n                  setSortBy(field as any);\n                  setSortOrder(order as any);\n                }}\n                className=\"px-4 py-2 border border-border rounded-md bg-background\"\n              >\n                <option value=\"position-asc\">Position (Low to High)</option>\n                <option value=\"position-desc\">Position (High to Low)</option>\n                <option value=\"referrals-desc\">Most Referrals</option>\n                <option value=\"joinedAt-desc\">Newest First</option>\n                <option value=\"joinedAt-asc\">Oldest First</option>\n              </select>\n            </div>\n          </div>\n        </CardHeader>\n        \n        <CardContent>\n          {selectedEntries.length > 0 && (\n            <Alert className=\"mb-4\">\n              <AlertTriangle className=\"h-4 w-4\" />\n              <AlertDescription>\n                {selectedEntries.length} members selected. \n                <Button variant=\"outline\" size=\"sm\" className=\"ml-2\" onClick={sendBulkEmail}>\n                  Send Email\n                </Button>\n                <Button variant=\"outline\" size=\"sm\" className=\"ml-2\" onClick={() => setSelectedEntries([])}>\n                  Clear Selection\n                </Button>\n              </AlertDescription>\n            </Alert>\n          )}\n          \n          <div className=\"space-y-2\">\n            {filteredEntries.slice(0, 20).map((entry, index) => (\n              <motion.div\n                key={entry.id}\n                initial={{ opacity: 0, x: -20 }}\n                animate={{ opacity: 1, x: 0 }}\n                transition={{ delay: index * 0.05 }}\n                className={`flex items-center justify-between p-4 border rounded-lg hover:bg-muted/50 transition-colors ${\n                  selectedEntries.includes(entry.id) ? 'bg-primary/10 border-primary' : 'bg-background'\n                }`}\n              >\n                <div className=\"flex items-center gap-4\">\n                  <input\n                    type=\"checkbox\"\n                    checked={selectedEntries.includes(entry.id)}\n                    onChange={(e) => {\n                      if (e.target.checked) {\n                        setSelectedEntries(prev => [...prev, entry.id]);\n                      } else {\n                        setSelectedEntries(prev => prev.filter(id => id !== entry.id));\n                      }\n                    }}\n                    className=\"rounded\"\n                  />\n                  \n                  <div className=\"text-center min-w-[60px]\">\n                    <div className=\"text-lg font-bold\">#{entry.position}</div>\n                    <Badge className={`text-xs ${getTierColor(entry.tier)} text-primary-foreground`}>\n                      {entry.tier}\n                    </Badge>\n                  </div>\n                  \n                  <div className=\"flex-1\">\n                    <div className=\"font-semibold\">{entry.firstName}</div>\n                    <div className=\"text-sm text-muted-foreground\">{entry.email}</div>\n                    {entry.company && (\n                      <div className=\"text-sm text-muted-foreground\">{entry.company}</div>\n                    )}\n                  </div>\n                </div>\n                \n                <div className=\"flex items-center gap-6\">\n                  <div className=\"text-center\">\n                    <div className=\"text-lg font-bold\">{entry.referrals}</div>\n                    <div className=\"text-xs text-muted-foreground\">Referrals</div>\n                  </div>\n                  \n                  <div className=\"text-center\">\n                    <div className=\"flex items-center text-sm\">\n                      {getSourceIcon(entry.source)}\n                      <span className=\"ml-1 capitalize\">{entry.source}</span>\n                    </div>\n                    <div className=\"text-xs text-muted-foreground\">{entry.country}</div>\n                  </div>\n                  \n                  <div className=\"text-center\">\n                    <Badge variant={entry.status === 'active' ? 'default' : entry.status === 'converted' ? 'secondary' : 'outline'}>\n                      {entry.status}\n                    </Badge>\n                    <div className=\"text-xs text-muted-foreground mt-1\">\n                      {entry.joinedAt.toLocaleDateString()}\n                    </div>\n                  </div>\n                  \n                  <Button variant=\"outline\" size=\"sm\">\n                    <Mail className=\"w-4 h-4\" />\n                  </Button>\n                </div>\n              </motion.div>\n            ))}\n          </div>\n          \n          {filteredEntries.length > 20 && (\n            <div className=\"text-center mt-6\">\n              <Button variant=\"outline\">\n                Load More ({filteredEntries.length - 20} remaining)\n              </Button>\n            </div>\n          )}\n        </CardContent>\n      </Card>\n\n      {/* Export Modal */}\n      <AnimatePresence>\n        {showExportModal && (\n          <motion.div\n            initial={{ opacity: 0 }}\n            animate={{ opacity: 1 }}\n            exit={{ opacity: 0 }}\n            className=\"fixed inset-0 bg-black/50 flex items-center justify-center z-[80]\"\n            onClick={() => setShowExportModal(false)}\n          >\n            <motion.div\n              initial={{ scale: 0.9 }}\n              animate={{ scale: 1 }}\n              exit={{ scale: 0.9 }}\n              className=\"bg-background p-6 rounded-lg max-w-md w-full mx-4\"\n              onClick={(e) => e.stopPropagation()}\n            >\n              <h2 className=\"text-xl font-bold mb-4\">Export Waitlist Data</h2>\n              <p className=\"text-muted-foreground mb-6\">\n                Choose format to export {selectedEntries.length > 0 ? selectedEntries.length : waitlistEntries.length} records\n              </p>\n              \n              <div className=\"space-y-4\">\n                <Button \n                  onClick={() => handleExport('csv')} \n                  className=\"w-full\"\n                  variant=\"outline\"\n                >\n                  <Download className=\"w-4 h-4 mr-2\" />\n                  Export as CSV\n                </Button>\n                <Button \n                  onClick={() => handleExport('json')} \n                  className=\"w-full\"\n                  variant=\"outline\"\n                >\n                  <Download className=\"w-4 h-4 mr-2\" />\n                  Export as JSON\n                </Button>\n              </div>\n              \n              <div className=\"flex justify-end mt-6\">\n                <Button variant=\"outline\" onClick={() => setShowExportModal(false)}>\n                  Cancel\n                </Button>\n              </div>\n            </motion.div>\n          </motion.div>\n        )}\n      </AnimatePresence>\n    </div>\n  );\n};\n\nexport default WaitlistManager; ","usedDeprecatedRules":[]},{"filePath":"/home/vonj/Github/Nexus/src/components/workflow/EnhancedWorkflowBuilder.tsx","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":54,"column":21,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":54,"endColumn":24,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1981,1984],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1981,1984],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":91,"column":65,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":91,"endColumn":68,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3518,3521],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3518,3521],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState, useCallback } from 'react';\nimport { Play, CheckCircle, AlertCircle, Workflow } from 'lucide-react';\nimport { n8nWorkflowBuilder } from '../../lib/n8nWorkflowBuilder';\nimport { Spinner } from '../ui/Spinner';\n\ninterface EnhancedWorkflowBuilderProps {\n  initialDescription?: string;\n  department?: string;\n  onWorkflowCreated?: (workflowId: string, webhookUrl?: string) => void;\n  onClose?: () => void;\n  className?: string;\n}\n\nexport const EnhancedWorkflowBuilder: React.FC<EnhancedWorkflowBuilderProps> = ({\n  initialDescription = '',\n  department = 'general',\n  onWorkflowCreated,\n  onClose,\n  className = ''\n}) => {\n  const [workflowName, setWorkflowName] = useState('');\n  const [workflowDescription, setWorkflowDescription] = useState(initialDescription);\n  const [triggerType, setTriggerType] = useState<'webhook' | 'schedule' | 'manual' | 'email'>('webhook');\n  const [integrations, setIntegrations] = useState<string[]>([]);\n  const [isBuilding, setIsBuilding] = useState(false);\n  const [error, setError] = useState<string | null>(null);\n  const [success, setSuccess] = useState<string | null>(null);\n\n  const availableIntegrations = [\n    'hubspot', 'salesforce', 'stripe', 'slack', 'gmail', 'supabase', 'openai'\n  ];\n\n  const generateWorkflow = useCallback(async () => {\n    if (!workflowName.trim() || !workflowDescription.trim()) {\n      setError('Please provide both workflow name and description');\n      return;\n    }\n\n    setIsBuilding(true);\n    setError(null);\n    setSuccess(null);\n\n    try {\n      const result = await n8nWorkflowBuilder.generateFromDescription(workflowDescription, department);\n\n      if (result.success) {\n        setSuccess('Workflow generated successfully with proper node connections!');\n        if (onWorkflowCreated) {\n          onWorkflowCreated(result.workflowId || '', result.webhookUrl);\n        }\n      } else {\n        setError(result.error || 'Failed to generate workflow');\n      }\n    } catch (error: any) {\n      setError(`Failed to generate workflow: ${error.message}`);\n    } finally {\n      setIsBuilding(false);\n    }\n  }, [workflowName, workflowDescription, department, onWorkflowCreated]);\n\n  return (\n    <div className={`bg-card border border-border rounded-lg p-6 ${className}`}>\n      <div className=\"flex items-center space-x-3 mb-6\">\n        <Workflow className=\"h-6 w-6 text-primary\" />\n        <div>\n          <h2 className=\"text-xl font-semibold text-foreground\">Enhanced Workflow Builder</h2>\n          <p className=\"text-sm text-muted-foreground\">Create complete n8n workflows with proper connections</p>\n        </div>\n      </div>\n\n      <div className=\"space-y-6\">\n        <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n          <div>\n            <label className=\"block text-sm font-medium text-foreground mb-2\">\n              Workflow Name\n            </label>\n            <input\n              type=\"text\"\n              value={workflowName}\n              onChange={(e) => setWorkflowName(e.target.value)}\n              placeholder=\"Enter workflow name...\"\n              className=\"w-full px-3 py-2 border border-border rounded-md bg-background text-foreground focus:outline-none focus:ring-2 focus:ring-primary\"\n            />\n          </div>\n          <div>\n            <label className=\"block text-sm font-medium text-foreground mb-2\">\n              Trigger Type\n            </label>\n            <select\n              value={triggerType}\n              onChange={(e) => setTriggerType(e.target.value as any)}\n              className=\"w-full px-3 py-2 border border-border rounded-md bg-background text-foreground focus:outline-none focus:ring-2 focus:ring-primary\"\n            >\n              <option value=\"webhook\">Webhook</option>\n              <option value=\"schedule\">Schedule</option>\n              <option value=\"manual\">Manual</option>\n              <option value=\"email\">Email</option>\n            </select>\n          </div>\n        </div>\n\n        <div>\n          <label className=\"block text-sm font-medium text-foreground mb-2\">\n            Description\n          </label>\n          <textarea\n            value={workflowDescription}\n            onChange={(e) => setWorkflowDescription(e.target.value)}\n            placeholder=\"Describe what this workflow should do...\"\n            rows={4}\n            className=\"w-full px-3 py-2 border border-border rounded-md bg-background text-foreground focus:outline-none focus:ring-2 focus:ring-primary\"\n          />\n        </div>\n\n        <div>\n          <label className=\"block text-sm font-medium text-foreground mb-2\">\n            Integrations\n          </label>\n          <div className=\"flex flex-wrap gap-2\">\n            {availableIntegrations.map((integration) => (\n              <button\n                key={integration}\n                onClick={() => {\n                  setIntegrations(prev => \n                    prev.includes(integration) \n                      ? prev.filter(i => i !== integration)\n                      : [...prev, integration]\n                  );\n                }}\n                className={`px-3 py-2 rounded-md transition-colors ${\n                  integrations.includes(integration)\n                    ? 'bg-primary text-primary-foreground'\n                    : 'bg-muted text-muted-foreground hover:bg-muted/80'\n                }`}\n              >\n                {integration}\n              </button>\n            ))}\n          </div>\n        </div>\n\n        {error && (\n          <div className=\"p-4 bg-destructive/10 border border-destructive/20 rounded-lg\">\n            <div className=\"flex items-center space-x-2\">\n              <AlertCircle className=\"h-5 w-5 text-destructive\" />\n              <span className=\"font-medium text-destructive\">Error</span>\n            </div>\n            <p className=\"text-sm text-destructive mt-1\">{error}</p>\n          </div>\n        )}\n\n        {success && (\n          <div className=\"p-4 bg-success/10 border border-success/20 rounded-lg\">\n            <div className=\"flex items-center space-x-2\">\n              <CheckCircle className=\"h-5 w-5 text-success\" />\n              <span className=\"font-medium text-success\">Success</span>\n            </div>\n            <p className=\"text-sm text-success mt-1\">{success}</p>\n          </div>\n        )}\n\n        <div className=\"flex justify-end space-x-3\">\n          {onClose && (\n            <button\n              onClick={onClose}\n              className=\"px-4 py-2 text-muted-foreground hover:text-foreground transition-colors\"\n            >\n              Cancel\n            </button>\n          )}\n          <button\n            onClick={generateWorkflow}\n            disabled={isBuilding || !workflowName.trim() || !workflowDescription.trim()}\n            className=\"flex items-center space-x-2 px-6 py-3 bg-primary text-primary-foreground rounded-md hover:bg-primary/90 disabled:opacity-50 disabled:cursor-not-allowed\"\n          >\n            {isBuilding ? <Spinner size={16} /> : <Play className=\"h-4 w-4\" />}\n            <span>{isBuilding ? 'Generating...' : 'Generate Workflow'}</span>\n          </button>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default EnhancedWorkflowBuilder; ","usedDeprecatedRules":[]},{"filePath":"/home/vonj/Github/Nexus/src/components/workspace/ExecutiveAssistantWidget.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/vonj/Github/Nexus/src/components/workspace/widgets/AIInsightsWidget.tsx","messages":[{"ruleId":"no-restricted-syntax","severity":1,"message":"Use design tokens instead of hardcoded text colors (e.g., text-foreground, text-muted-foreground)","line":11,"column":36,"nodeType":"Literal","messageId":"restrictedSyntax","endLine":11,"endColumn":61},{"ruleId":"no-restricted-syntax","severity":1,"message":"Use design tokens instead of hardcoded text colors (e.g., text-foreground, text-muted-foreground)","line":12,"column":33,"nodeType":"Literal","messageId":"restrictedSyntax","endLine":12,"endColumn":55},{"ruleId":"no-restricted-syntax","severity":1,"message":"Use design tokens instead of hardcoded text colors (e.g., text-foreground, text-muted-foreground)","line":13,"column":35,"nodeType":"Literal","messageId":"restrictedSyntax","endLine":13,"endColumn":59},{"ruleId":"no-restricted-syntax","severity":1,"message":"Use design tokens instead of hardcoded text colors (e.g., text-foreground, text-muted-foreground)","line":54,"column":82,"nodeType":"Literal","messageId":"restrictedSyntax","endLine":54,"endColumn":105}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React from 'react';\nimport { useQuery } from '@tanstack/react-query';\nimport { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/Card';\nimport { AlertCircle, CheckCircle, Lightbulb, ArrowRight, Loader2 } from 'lucide-react';\nimport { Button } from '@/components/ui/Button';\nimport { aiInsightsService } from '@/lib/services/aiInsightsService';\nimport type { AIInsight } from '@/lib/services/aiInsightsService';\nimport { Alert, AlertDescription } from '@/components/ui/Alert';\n\nconst iconMap: { [key: string]: React.ReactNode } = {\n  suggestion: <Lightbulb className=\"h-5 w-5 text-yellow-500\" />,\n  alert: <AlertCircle className=\"h-5 w-5 text-red-500\" />,\n  success: <CheckCircle className=\"h-5 w-5 text-green-500\" />,\n};\n\nexport const AIInsightsWidget: React.FC = () => {\n  const { data: insights, isLoading, isError, error } = useQuery<AIInsight[], Error>({\n    queryKey: ['aiInsights'],\n    queryFn: () => aiInsightsService.getInsights(),\n  });\n\n  const renderContent = () => {\n    if (isLoading) {\n      return (\n        <div className=\"flex justify-center items-center p-6\">\n          <Loader2 className=\"h-8 w-8 animate-spin text-muted-foreground\" />\n        </div>\n      );\n    }\n\n    if (isError) {\n      return (\n        <Alert variant=\"destructive\" className=\"m-4\">\n          <AlertCircle className=\"h-4 w-4\" />\n          <AlertDescription>\n            Failed to load AI insights: {error.message}\n          </AlertDescription>\n        </Alert>\n      );\n    }\n    \n    if (!insights || insights.length === 0) {\n      return (\n          <p className=\"text-sm text-muted-foreground text-center p-4\">\n            No insights at the moment. Check back soon!\n          </p>\n      );\n    }\n\n    return (\n      <div className=\"space-y-4\">\n        {insights.map((insight) => (\n          <div key={insight.id} className=\"flex items-start gap-3 p-3 rounded-md bg-muted/50\">\n            <div className=\"mt-1\">{iconMap[insight.type] || <Lightbulb className=\"h-5 w-5 text-gray-500\" />}</div>\n            <div className=\"flex-1\">\n              <p className=\"text-sm font-medium mb-1\">{insight.message}</p>\n              {insight.action && (\n                <Button size=\"sm\" variant=\"secondary\" className=\"mt-1\">\n                  {insight.action}\n                  <ArrowRight className=\"h-4 w-4 ml-1\" />\n                </Button>\n              )}\n            </div>\n          </div>\n        ))}\n      </div>\n    );\n  };\n\n  return (\n    <Card>\n      <CardHeader>\n        <CardTitle>Next Best Actions</CardTitle>\n      </CardHeader>\n      <CardContent>\n        {renderContent()}\n      </CardContent>\n    </Card>\n  );\n}; ","usedDeprecatedRules":[]},{"filePath":"/home/vonj/Github/Nexus/src/components/workspace/widgets/CalendarWidget.tsx","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":34,"column":32,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":34,"endColumn":35,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1247,1250],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1247,1250],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"no-restricted-syntax","severity":1,"message":"Use design tokens instead of hardcoded text colors (e.g., text-foreground, text-muted-foreground)","line":120,"column":22,"nodeType":"Literal","messageId":"restrictedSyntax","endLine":120,"endColumn":60},{"ruleId":"no-restricted-syntax","severity":1,"message":"Use design tokens instead of hardcoded colors (e.g., bg-primary, bg-secondary)","line":140,"column":84,"nodeType":"Literal","messageId":"restrictedSyntax","endLine":140,"endColumn":97},{"ruleId":"no-restricted-syntax","severity":1,"message":"Use design tokens instead of hardcoded colors (e.g., bg-primary, bg-secondary)","line":140,"column":100,"nodeType":"Literal","messageId":"restrictedSyntax","endLine":140,"endColumn":114}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React from 'react';\nimport { useQuery } from '@tanstack/react-query';\nimport { format } from 'date-fns';\nimport { Card, CardContent, CardHeader, CardTitle, CardDescription } from '@/components/ui/Card';\nimport { Calendar as CalendarIcon } from '@/components/ui/Calendar';\nimport { Button } from '@/components/ui/Button';\nimport { googleWorkspaceService } from '@/lib/services/googleWorkspaceService';\nimport { microsoftGraphService } from '@/lib/services/microsoftGraphService';\nimport { Loader2, AlertCircle, Video, PlusCircle } from 'lucide-react';\nimport { useIntegrationProviders } from '@/hooks/useIntegrationProviders';\n\n// Standardized event type\nexport type CalendarEvent = {\n  id: string;\n  title: string;\n  startTime: string;\n  endTime: string;\n  joinLink?: string;\n  viewLink?: string;\n  source: 'google' | 'microsoft';\n};\n\n\nconst fetchAllCalendarEvents = async (\n    timeMin: Date, \n    timeMax: Date,\n    providers: ReturnType<typeof useIntegrationProviders>\n): Promise<CalendarEvent[]> => {\n    const promises: Promise<CalendarEvent[]>[] = [];\n\n    if (providers.google.isConnected) {\n        promises.push(\n            googleWorkspaceService.getCalendarEvents(timeMin, timeMax).then(events => \n                events.map((e: any): CalendarEvent => ({\n                    id: e.id,\n                    title: e.summary,\n                    startTime: e.start.dateTime || e.start.date,\n                    endTime: e.end.dateTime || e.end.date,\n                    joinLink: e.hangoutLink,\n                    viewLink: e.htmlLink,\n                    source: 'google'\n                }))\n            )\n        );\n    }\n\n    if (providers.microsoft.isConnected) {\n        promises.push(\n            microsoftGraphService.getCalendarEvents(timeMin.toISOString(), timeMax.toISOString()).then(events =>\n                events.map((e): CalendarEvent => ({\n                    id: e.id,\n                    title: e.subject,\n                    startTime: e.start.dateTime,\n                    endTime: e.end.dateTime,\n                    joinLink: e.onlineMeeting?.joinUrl,\n                    viewLink: e.webLink,\n                    source: 'microsoft'\n                }))\n            )\n        );\n    }\n\n    const allEvents = await Promise.all(promises);\n    return allEvents.flat().sort((a, b) => new Date(a.startTime).getTime() - new Date(b.startTime).getTime());\n}\n\n\nconst EventsList: React.FC<{ selectedDate: Date }> = ({ selectedDate }) => {\n  const providers = useIntegrationProviders();\n  const { data: events, isLoading, isError } = useQuery<CalendarEvent[], Error>({\n    queryKey: ['calendarEvents', selectedDate.toDateString(), providers.google.isConnected, providers.microsoft.isConnected],\n    queryFn: () => {\n      const startOfDay = new Date(selectedDate);\n      startOfDay.setHours(0, 0, 0, 0);\n      const endOfDay = new Date(selectedDate);\n      endOfDay.setHours(23, 59, 59, 999);\n      return fetchAllCalendarEvents(startOfDay, endOfDay, providers);\n    },\n    enabled: providers.google.isConnected || providers.microsoft.isConnected,\n  });\n\n  if (providers.isLoading) {\n      return (\n        <div className=\"flex items-center gap-2\">\n            <Loader2 className=\"animate-spin h-4 w-4 text-muted-foreground\" />\n            <span className=\"text-muted-foreground\">Checking connections...</span>\n        </div>\n      );\n  }\n\n  if (!providers.google.isConnected && !providers.microsoft.isConnected) {\n    return (\n        <div className=\"flex flex-col items-center justify-center h-full text-center p-4 space-y-4\">\n            <CalendarIcon className=\"w-12 h-12 text-muted-foreground\" />\n            <h3 className=\"text-lg font-semibold\">Connect a Calendar</h3>\n            <p className=\"text-sm text-muted-foreground\">See your meetings and events from Google and Microsoft 365.</p>\n            <div className=\"flex gap-4\">\n                <Button onClick={providers.google.connect}>\n                    Connect Google\n                </Button>\n                <Button onClick={providers.microsoft.connect}>\n                    Connect Microsoft\n                </Button>\n            </div>\n        </div>\n    );\n  }\n\n  if (isLoading) {\n    return (\n      <div className=\"flex items-center gap-2\">\n        <Loader2 className=\"animate-spin h-4 w-4 text-muted-foreground\" />\n        <span className=\"text-muted-foreground\">Loading events...</span>\n      </div>\n    );\n  }\n\n  if (isError) {\n    return (\n      <div className=\"flex items-center gap-2 text-red-500\">\n        <AlertCircle className=\"h-4 w-4\" />\n        <span className=\"text-sm\">Error loading events. Please try again.</span>\n      </div>\n    );\n  }\n\n  const formatEventTime = (startTime: string, endTime: string) => {\n    const start = format(new Date(startTime), 'p');\n    if (endTime) {\n        const end = format(new Date(endTime), 'p');\n        return `${start} - ${end}`;\n    }\n    return start;\n  }\n\n  return (\n    <div className=\"space-y-4\">\n      {events?.map((event) => (\n        <div key={event.id} className=\"flex items-start gap-3 p-2 rounded-lg hover:bg-muted/50 transition-colors\">\n          <div className={`h-full w-1.5 rounded-full ${event.source === 'google' ? 'bg-blue-500' : 'bg-green-500'}`} />\n          <div className=\"flex-1 cursor-pointer\" onClick={() => event.viewLink && window.open(event.viewLink, '_blank')}>\n            <p className=\"font-semibold text-sm\">{event.title}</p>\n            <p className=\"text-xs text-muted-foreground\">\n              {formatEventTime(event.startTime, event.endTime)}\n            </p>\n          </div>\n          {event.joinLink && (\n              <Button variant=\"ghost\" size=\"sm\" onClick={() => window.open(event.joinLink, '_blank')}>\n                <Video className=\"h-4 w-4 mr-2\" />\n                Join\n              </Button>\n          )}\n        </div>\n      ))}\n      {events?.length === 0 && (\n        <div className=\"text-center text-muted-foreground py-6\">\n          <CalendarIcon className=\"w-10 h-10 mx-auto mb-2\" />\n          <p className=\"text-sm font-semibold\">No events today</p>\n          <p className=\"text-xs\">Enjoy your day or add a new event.</p>\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport const CalendarWidget: React.FC = () => {\n  const [date, setDate] = React.useState<Date | undefined>(new Date());\n  const providers = useIntegrationProviders();\n\n  const handleAddEvent = () => {\n      // Default to Google if both are connected, or use the one that is.\n      const primaryProvider = providers.google.isConnected ? 'google' : 'microsoft';\n\n      if (primaryProvider === 'google') {\n          window.open('https://calendar.google.com/calendar/render?action=TEMPLATE', '_blank');\n      } else {\n          window.open('https://outlook.live.com/calendar/0/action/compose', '_blank');\n      }\n  }\n\n  return (\n    <Card>\n      <CardHeader>\n        <div className=\"flex justify-between items-center\">\n            <div>\n                <CardTitle>Calendar</CardTitle>\n                <CardDescription>Your unified schedule across all connected accounts.</CardDescription>\n            </div>\n            <Button variant=\"outline\" size=\"sm\" onClick={handleAddEvent} disabled={!providers.google.isConnected && !providers.microsoft.isConnected}>\n                <PlusCircle className=\"h-4 w-4 mr-2\" />\n                Add Event\n            </Button>\n        </div>\n      </CardHeader>\n      <CardContent className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\n        <div>\n          <CalendarIcon\n            mode=\"single\"\n            selected={date}\n            onSelect={setDate}\n            className=\"rounded-md border\"\n          />\n        </div>\n        <div className=\"space-y-4\">\n          <h3 className=\"text-lg font-semibold\">\n            Events for {date ? format(date, 'MMMM d') : 'today'}\n          </h3>\n          {date && <EventsList selectedDate={date} />}\n        </div>\n      </CardContent>\n    </Card>\n  );\n}; ","usedDeprecatedRules":[]},{"filePath":"/home/vonj/Github/Nexus/src/components/workspace/widgets/CelebrationWidget.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/vonj/Github/Nexus/src/components/workspace/widgets/EmailWidget.tsx","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":40,"column":32,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":40,"endColumn":35,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1419,1422],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1419,1422],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":41,"column":67,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":41,"endColumn":70,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1502,1505],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1502,1505],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":42,"column":70,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":42,"endColumn":73,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1605,1608],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1605,1608],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":43,"column":67,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":43,"endColumn":70,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1708,1711],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1708,1711],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React from 'react';\nimport { useQuery, useMutation, useQueryClient } from '@tanstack/react-query';\nimport { Card, CardContent, CardHeader, CardTitle, CardDescription } from '@/components/ui/Card';\nimport { Button } from '@/components/ui/Button';\nimport { googleWorkspaceService } from '@/lib/services/googleWorkspaceService';\nimport { microsoftGraphService } from '@/lib/services/microsoftGraphService';\nimport { Loader2, Mail, AlertCircle, Inbox, MessageSquare, Check } from 'lucide-react';\nimport { useIntegrationProviders } from '@/hooks/useIntegrationProviders';\nimport { Avatar, AvatarFallback } from '@/components/ui/Avatar';\nimport { Alert, AlertDescription } from \"@/components/ui/Alert\";\nimport {\n  Tooltip,\n  TooltipContent,\n  TooltipProvider,\n  TooltipTrigger,\n} from \"@/components/ui/Tooltip\";\nimport { useTranslation } from 'react-i18next';\n\n// Standardized email type\nexport type Email = {\n  id: string;\n  subject: string;\n  from: string;\n  fromInitials: string;\n  preview: string;\n  timestamp: string;\n  isRead: boolean;\n  viewLink: string;\n  source: 'google' | 'microsoft';\n};\n\nconst fetchAllEmails = async (\n    providers: ReturnType<typeof useIntegrationProviders>\n): Promise<Email[]> => {\n    const promises: Promise<Email[]>[] = [];\n\n    if (providers.google.isConnected) {\n        promises.push(\n            googleWorkspaceService.getEmails(5).then(emails => \n                emails.map((e: any): Email => {\n                    const fromHeader = e.payload.headers.find((h: any) => h.name === 'From').value;\n                    const subjectHeader = e.payload.headers.find((h: any) => h.name === 'Subject').value;\n                    const dateHeader = e.payload.headers.find((h: any) => h.name === 'Date').value;\n                    const fromName = fromHeader.includes('<') ? fromHeader.split('<')[0].trim() : fromHeader;\n                    \n                    return {\n                        id: e.id,\n                        subject: subjectHeader,\n                        from: fromName,\n                        fromInitials: fromName.split(' ').map((n: string) => n[0]).join(''),\n                        preview: e.snippet,\n                        timestamp: dateHeader,\n                        isRead: !e.labelIds.includes('UNREAD'),\n                        viewLink: `https://mail.google.com/mail/u/0/#inbox/${e.id}`,\n                        source: 'google'\n                    }\n                })\n            )\n        );\n    }\n\n    if (providers.microsoft.isConnected) {\n        promises.push(\n            microsoftGraphService.getEmails(5).then(emails =>\n                emails.map((e): Email => ({\n                    id: e.id,\n                    subject: e.subject,\n                    from: e.from.emailAddress.name,\n                    fromInitials: e.from.emailAddress.name.split(' ').map(n => n[0]).join(''),\n                    preview: e.bodyPreview,\n                    timestamp: e.receivedDateTime,\n                    isRead: e.isRead,\n                    viewLink: `https://outlook.live.com/mail/0/inbox/id/${e.id}`, // Note: This is a deep link guess\n                    source: 'microsoft'\n                }))\n            )\n        );\n    }\n\n    const allEmails = await Promise.all(promises);\n    return allEmails.flat().sort((a, b) => new Date(b.timestamp).getTime() - new Date(a.timestamp).getTime());\n}\n\nexport const EmailWidget: React.FC = () => {\n  const queryClient = useQueryClient();\n  const providers = useIntegrationProviders();\n  const { t } = useTranslation();\n  \n  const { data: emails, isLoading, isError } = useQuery<Email[], Error>({\n    queryKey: ['inboxItems', providers.google.isConnected, providers.microsoft.isConnected],\n    queryFn: () => fetchAllEmails(providers),\n    enabled: providers.google.isConnected || providers.microsoft.isConnected,\n  });\n\n  const markAsReadMutation = useMutation({\n      mutationFn: async (email: Email) => {\n          // TODO: Implement mark as read for Google and Microsoft\n          console.log(`Marking ${email.id} as read is not yet implemented.`);\n      },\n      onSuccess: () => {\n          queryClient.invalidateQueries({ queryKey: ['inboxItems'] });\n      }\n  })\n\n  const renderContent = () => {\n    if (providers.isLoading) {\n        return <div className=\"flex justify-center items-center p-6\"><Loader2 className=\"h-8 w-8 animate-spin text-muted-foreground\" /></div>;\n    }\n\n    if (!providers.google.isConnected && !providers.microsoft.isConnected) {\n      return (\n        <div className=\"flex flex-col items-center justify-center h-full text-center p-4 space-y-4\">\n            <Inbox className=\"w-12 h-12 text-muted-foreground\" />\n            <h3 className=\"text-lg font-semibold\">{t('emailWidget.connect_title')}</h3>\n            <p className=\"text-sm text-muted-foreground\">{t('emailWidget.connect_description')}</p>\n            <div className=\"flex gap-4\">\n                <Button onClick={providers.google.connect}>{t('emailWidget.connect_google')}</Button>\n                <Button onClick={providers.microsoft.connect}>{t('emailWidget.connect_microsoft')}</Button>\n            </div>\n        </div>\n      );\n    }\n\n    if (isLoading) {\n      return <div className=\"flex justify-center items-center p-6\"><Loader2 className=\"h-8 w-8 animate-spin text-muted-foreground\" /></div>;\n    }\n\n    if (isError) {\n      return (\n        <Alert variant=\"destructive\" className=\"m-4\">\n          <AlertCircle className=\"h-4 w-4\" />\n          <AlertDescription>{t('emailWidget.loading_error')}</AlertDescription>\n        </Alert>\n      );\n    }\n\n    if (!emails || emails.length === 0) {\n      return (\n        <div className=\"flex flex-col items-center justify-center h-full text-center p-4\">\n          <Mail className=\"w-12 h-12 text-muted-foreground mb-4\" />\n          <h3 className=\"text-lg font-semibold\">{t('emailWidget.all_caught_up_title')}</h3>\n          <p className=\"text-sm text-muted-foreground\">{t('emailWidget.all_caught_up_description')}</p>\n        </div>\n      );\n    }\n\n    return (\n      <div className=\"space-y-1\">\n        <TooltipProvider>\n            {emails.map((email) => (\n            <div key={email.id} className=\"flex items-center gap-3 p-2 rounded-md hover:bg-muted/50 transition-colors group\">\n                <Avatar>\n                    <AvatarFallback>{email.fromInitials}</AvatarFallback>\n                </Avatar>\n                <div className=\"flex-1 cursor-pointer\" onClick={() => window.open(email.viewLink, '_blank')}>\n                    <div className=\"flex justify-between items-center\">\n                        <p className=\"text-sm font-semibold truncate\">{email.from}</p>\n                        <p className=\"text-xs text-muted-foreground\">{new Date(email.timestamp).toLocaleDateString()}</p>\n                    </div>\n                    <p className=\"text-sm font-medium truncate\">{email.subject}</p>\n                    <p className=\"text-xs text-muted-foreground truncate\">{email.preview}</p>\n                </div>\n                <div className=\"flex items-center md:opacity-0 group-hover:opacity-100 transition-opacity\">\n                    <Tooltip>\n                        <TooltipTrigger asChild>\n                            <Button variant=\"ghost\" size=\"icon\" onClick={(e) => { e.stopPropagation(); window.open(email.viewLink, '_blank'); }} aria-label={t('emailWidget.reply_tooltip')}>\n                                <MessageSquare className=\"h-4 w-4\" />\n                            </Button>\n                        </TooltipTrigger>\n                        <TooltipContent><p>{t('emailWidget.reply_tooltip')}</p></TooltipContent>\n                    </Tooltip>\n                    <Tooltip>\n                        <TooltipTrigger asChild>\n                             <Button variant=\"ghost\" size=\"icon\" onClick={(e) => { e.stopPropagation(); markAsReadMutation.mutate(email); }} aria-label={t('emailWidget.mark_as_read_tooltip')}>\n                                <Check className=\"h-4 w-4\" />\n                            </Button>\n                        </TooltipTrigger>\n                        <TooltipContent><p>{t('emailWidget.mark_as_read_tooltip')}</p></TooltipContent>\n                    </Tooltip>\n                </div>\n            </div>\n            ))}\n        </TooltipProvider>\n      </div>\n    );\n  };\n\n  return (\n    <Card>\n      <CardHeader>\n        <CardTitle>{t('emailWidget.title')}</CardTitle>\n        <CardDescription>{t('emailWidget.description')}</CardDescription>\n      </CardHeader>\n      <CardContent>\n        {renderContent()}\n      </CardContent>\n    </Card>\n  );\n}; ","usedDeprecatedRules":[]},{"filePath":"/home/vonj/Github/Nexus/src/components/workspace/widgets/IdeasWidget.tsx","messages":[{"ruleId":"no-restricted-syntax","severity":1,"message":"Use design tokens instead of hardcoded text colors (e.g., text-foreground, text-muted-foreground)","line":76,"column":36,"nodeType":"Literal","messageId":"restrictedSyntax","endLine":76,"endColumn":61}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState } from 'react';\nimport { useQuery, useMutation, useQueryClient } from '@tanstack/react-query';\nimport { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/Card';\nimport { Input } from '@/components/ui/Input';\nimport { Button } from '@/components/ui/Button';\nimport { Lightbulb, Loader2 } from 'lucide-react';\nimport { ideasService } from '@/lib/services/ideasService';\nimport type { Idea } from '@/lib/services/ideasService';\nimport { Alert, AlertDescription } from '@/components/ui/Alert';\n\nexport const IdeasWidget: React.FC = () => {\n  const queryClient = useQueryClient();\n  const [newIdea, setNewIdea] = useState('');\n\n  const { data: ideas, isLoading, isError, error } = useQuery<Idea[], Error>({\n    queryKey: ['ideas'],\n    queryFn: () => ideasService.getIdeas(),\n  });\n\n  const { mutate: addIdea, isPending: isAdding } = useMutation({\n    mutationFn: (ideaText: string) => ideasService.createIdea(ideaText),\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: ['ideas'] });\n      setNewIdea('');\n    },\n  });\n\n  const handleAddIdea = () => {\n    if (newIdea.trim()) {\n      addIdea(newIdea);\n    }\n  };\n\n  return (\n    <Card>\n      <CardHeader>\n        <CardTitle>Ideas</CardTitle>\n      </CardHeader>\n      <CardContent>\n        <div className=\"flex gap-2 mb-4\">\n          <Input\n            placeholder=\"Quickly capture a new idea...\"\n            value={newIdea}\n            onChange={(e) => setNewIdea(e.target.value)}\n            onKeyDown={(e) => {\n              if (e.key === 'Enter') handleAddIdea();\n            }}\n            className=\"flex-1\"\n            disabled={isAdding}\n          />\n          <Button onClick={handleAddIdea} variant=\"secondary\" aria-label=\"Add idea\" disabled={isAdding}>\n            {isAdding ? (\n              <Loader2 className=\"h-4 w-4 animate-spin\" />\n            ) : (\n              <>\n                <Lightbulb className=\"h-4 w-4 mr-1\" />\n                Add\n              </>\n            )}\n          </Button>\n        </div>\n        \n        {isLoading && <div className=\"text-center p-4\"><Loader2 className=\"h-6 w-6 animate-spin mx-auto text-muted-foreground\" /></div>}\n        \n        {isError && (\n          <Alert variant=\"destructive\">\n            <AlertDescription>\n              <strong>Error:</strong> Failed to load ideas: {error.message}\n            </AlertDescription>\n          </Alert>\n        )}\n\n        <div className=\"space-y-3\">\n          {ideas?.map((idea) => (\n            <div key={idea.id} className=\"flex items-center gap-3 p-2 rounded-md bg-muted/50\">\n              <Lightbulb className=\"h-4 w-4 text-yellow-500\" />\n              <div className=\"flex-1\">\n                <p className=\"text-sm font-medium\">{idea.text}</p>\n                <p className=\"text-xs text-muted-foreground\">{idea.date}</p>\n              </div>\n            </div>\n          ))}\n          {ideas?.length === 0 && !isLoading && (\n            <p className=\"text-sm text-muted-foreground\">\n              No ideas yet. Start capturing your thoughts!\n            </p>\n          )}\n        </div>\n      </CardContent>\n    </Card>\n  );\n}; ","usedDeprecatedRules":[]},{"filePath":"/home/vonj/Github/Nexus/src/components/workspace/widgets/LearningFeedWidget.tsx","messages":[{"ruleId":"no-restricted-syntax","severity":1,"message":"Use design tokens instead of hardcoded text colors (e.g., text-foreground, text-muted-foreground)","line":11,"column":34,"nodeType":"Literal","messageId":"restrictedSyntax","endLine":11,"endColumn":57},{"ruleId":"no-restricted-syntax","severity":1,"message":"Use design tokens instead of hardcoded text colors (e.g., text-foreground, text-muted-foreground)","line":12,"column":29,"nodeType":"Literal","messageId":"restrictedSyntax","endLine":12,"endColumn":51},{"ruleId":"no-restricted-syntax","severity":1,"message":"Use design tokens instead of hardcoded text colors (e.g., text-foreground, text-muted-foreground)","line":13,"column":38,"nodeType":"Literal","messageId":"restrictedSyntax","endLine":13,"endColumn":62},{"ruleId":"no-restricted-syntax","severity":1,"message":"Use design tokens instead of hardcoded text colors (e.g., text-foreground, text-muted-foreground)","line":14,"column":30,"nodeType":"Literal","messageId":"restrictedSyntax","endLine":14,"endColumn":55},{"ruleId":"no-restricted-syntax","severity":1,"message":"Use design tokens instead of hardcoded text colors (e.g., text-foreground, text-muted-foreground)","line":43,"column":28,"nodeType":"Literal","messageId":"restrictedSyntax","endLine":43,"endColumn":66}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React from 'react';\nimport { Card, CardContent, CardHeader, CardTitle, CardDescription } from '@/components/ui/Card';\nimport { BookOpen, AlertCircle, ExternalLink, FileText, Video, GraduationCap, Zap } from 'lucide-react';\nimport { useQuery } from '@tanstack/react-query';\nimport { learningFeedService } from '@/lib/services/learningFeedService';\nimport type { LearningMaterial } from '@/lib/services/learningFeedService';\nimport { Skeleton } from '@/components/ui/Skeleton';\nimport { Badge } from '@/components/ui/Badge';\n\nconst typeIcons = {\n    article: <FileText className=\"h-5 w-5 text-blue-500\" />,\n    video: <Video className=\"h-5 w-5 text-red-500\" />,\n    course: <GraduationCap className=\"h-5 w-5 text-green-500\" />,\n    playbook: <Zap className=\"h-5 w-5 text-purple-500\" />,\n}\n\nexport const LearningFeedWidget: React.FC = () => {\n  const { data: learningMaterials, isLoading, isError } = useQuery({\n    queryKey: ['learningMaterials'],\n    queryFn: () => learningFeedService.getLearningMaterials(),\n  });\n\n  return (\n    <Card>\n      <CardHeader>\n        <CardTitle className=\"flex items-center gap-2\">\n          <BookOpen className=\"h-5 w-5\" />\n          <span>Learning Feed</span>\n        </CardTitle>\n        <CardDescription>Contextual tips and improvement suggestions.</CardDescription>\n      </CardHeader>\n      <CardContent>\n        <div className=\"space-y-4\">\n          {isLoading && (\n            <>\n              <Skeleton className=\"h-16 w-full\" />\n              <Skeleton className=\"h-16 w-full\" />\n              <Skeleton className=\"h-16 w-full\" />\n            </>\n          )}\n\n          {isError && (\n            <div className=\"text-red-500 flex items-center gap-2\">\n              <AlertCircle className=\"h-5 w-5\" />\n              <p>Error loading learning materials.</p>\n            </div>\n          )}\n\n          {learningMaterials && learningMaterials.map((material: LearningMaterial) => (\n            <a\n              key={material.id}\n              href={material.url}\n              target=\"_blank\"\n              rel=\"noopener noreferrer\"\n              className=\"block p-4 rounded-lg border bg-card hover:bg-muted/50 transition-colors\"\n            >\n              <div className=\"flex items-start gap-3\">\n                <div className=\"mt-1\">\n                    {typeIcons[material.type] || <BookOpen className=\"h-5 w-5 text-muted-foreground\" />}\n                </div>\n                <div className=\"flex-1\">\n                  <p className=\"font-semibold text-sm mb-1\">{material.title}</p>\n                  <p className=\"text-xs text-muted-foreground leading-relaxed\">{material.summary}</p>\n                  <div className=\"mt-2 flex items-center justify-between\">\n                    <div className=\"flex gap-2\">\n                        {material.tags.map(tag => (\n                        <Badge key={tag} variant=\"secondary\">{tag}</Badge>\n                        ))}\n                    </div>\n                     <div className=\"text-xs text-muted-foreground flex items-center gap-1\">\n                        <span>Read more</span>\n                        <ExternalLink className=\"h-3 w-3\" />\n                    </div>\n                  </div>\n                </div>\n              </div>\n            </a>\n          ))}\n\n          {!isLoading && !isError && learningMaterials?.length === 0 && (\n            <p className=\"text-sm text-muted-foreground\">No learning materials available at the moment.</p>\n          )}\n        </div>\n      </CardContent>\n    </Card>\n  );\n}; ","usedDeprecatedRules":[]},{"filePath":"/home/vonj/Github/Nexus/src/components/workspace/widgets/NextBestActionWidget.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/vonj/Github/Nexus/src/components/workspace/widgets/NotificationsWidget.tsx","messages":[{"ruleId":"no-restricted-syntax","severity":1,"message":"Use design tokens instead of hardcoded text colors (e.g., text-foreground, text-muted-foreground)","line":14,"column":25,"nodeType":"Literal","messageId":"restrictedSyntax","endLine":14,"endColumn":48},{"ruleId":"no-restricted-syntax","severity":1,"message":"Use design tokens instead of hardcoded text colors (e.g., text-foreground, text-muted-foreground)","line":15,"column":35,"nodeType":"Literal","messageId":"restrictedSyntax","endLine":15,"endColumn":60},{"ruleId":"no-restricted-syntax","severity":1,"message":"Use design tokens instead of hardcoded text colors (e.g., text-foreground, text-muted-foreground)","line":16,"column":33,"nodeType":"Literal","messageId":"restrictedSyntax","endLine":16,"endColumn":55},{"ruleId":"no-restricted-syntax","severity":1,"message":"Use design tokens instead of hardcoded text colors (e.g., text-foreground, text-muted-foreground)","line":106,"column":28,"nodeType":"Literal","messageId":"restrictedSyntax","endLine":106,"endColumn":66}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useEffect, useMemo } from 'react';\nimport { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/Card';\nimport { Bell, AlertCircle, CheckCircle, CheckCheck } from 'lucide-react';\nimport { useQuery, useMutation, useQueryClient } from '@tanstack/react-query';\nimport { notificationsService } from '@/lib/services/notificationsService';\nimport type { Notification } from '@/lib/services/notificationsService';\nimport { Skeleton } from '@/components/ui/Skeleton';\nimport { Button } from '@/components/ui/Button';\nimport type { RealtimePostgresChangesPayload } from '@supabase/supabase-js';\nimport { useAuth } from '@/contexts/AuthContext';\nimport { Tooltip, TooltipContent, TooltipProvider, TooltipTrigger } from '@/components/ui/Tooltip';\n\nconst NOTIFICATION_ICONS = {\n  info: <Bell className=\"h-5 w-5 text-blue-500\" />,\n  warning: <AlertCircle className=\"h-5 w-5 text-yellow-500\" />,\n  alert: <AlertCircle className=\"h-5 w-5 text-red-500\" />,\n};\n\nexport const NotificationsWidget: React.FC = () => {\n  const queryClient = useQueryClient();\n\n  const { data: notifications, isLoading, isError } = useQuery({\n    queryKey: ['notifications'],\n    queryFn: () => notificationsService.getNotifications(10),\n  });\n\n  useEffect(() => {\n    const channel = notificationsService.subscribeToNotifications((payload: RealtimePostgresChangesPayload<Notification>) => {\n      console.log('New notification received!', payload);\n      queryClient.invalidateQueries({ queryKey: ['notifications'] });\n    });\n\n    return () => {\n      notificationsService.unsubscribeFromNotifications(channel);\n    };\n  }, [queryClient]);\n\n  const markAsReadMutation = useMutation({\n    mutationFn: (notificationId: string) => notificationsService.markAsRead(notificationId),\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: ['notifications'] });\n    },\n  });\n\n  const markAllAsReadMutation = useMutation({\n    mutationFn: () => notificationsService.markAllAsRead(),\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: ['notifications'] });\n    },\n  });\n\n  const { user } = useAuth();\n  const handleCreateTestNotification = async () => {\n    if (user) {\n      await notificationsService.createNotification({\n        user_id: user.id,\n        type: 'info',\n        message: 'This is a test notification!',\n        metadata: { test: true },\n      });\n    }\n  };\n\n  const hasUnread = useMemo(() => notifications?.some(n => !n.read), [notifications]);\n\n  return (\n    <Card>\n      <CardHeader className=\"flex flex-row items-center justify-between\">\n        <CardTitle className=\"flex items-center gap-2\">\n          <Bell className=\"h-5 w-5\" />\n          <span>Notifications</span>\n        </CardTitle>\n        <div className=\"flex items-center gap-2\">\n            <TooltipProvider>\n                <Tooltip>\n                    <TooltipTrigger asChild>\n                        <Button \n                            variant=\"ghost\" \n                            size=\"icon\" \n                            onClick={() => markAllAsReadMutation.mutate()}\n                            disabled={!hasUnread || markAllAsReadMutation.isPending}\n                            aria-label=\"Mark all notifications as read\"\n                        >\n                            <CheckCheck className=\"h-5 w-5\" />\n                        </Button>\n                    </TooltipTrigger>\n                    <TooltipContent>\n                        <p>Mark all as read</p>\n                    </TooltipContent>\n                </Tooltip>\n            </TooltipProvider>\n            <Button size=\"sm\" onClick={handleCreateTestNotification}>Test</Button>\n        </div>\n      </CardHeader>\n      <CardContent>\n        <div className=\"space-y-3\">\n          {isLoading && (\n            <>\n              <Skeleton className=\"h-12 w-full\" />\n              <Skeleton className=\"h-12 w-full\" />\n              <Skeleton className=\"h-12 w-full\" />\n            </>\n          )}\n\n          {isError && (\n            <div className=\"text-red-500 flex items-center gap-2\">\n              <AlertCircle className=\"h-5 w-5\" />\n              <p>Error loading notifications.</p>\n            </div>\n          )}\n          \n          {notifications && notifications.length > 0 && notifications.map((notification: Notification) => (\n            <div\n              key={notification.id}\n              className={`flex items-start gap-3 p-3 rounded-md ${notification.read ? 'bg-muted/30' : 'bg-muted/80'}`}\n            >\n              <div className=\"pt-1\">\n                {NOTIFICATION_ICONS[notification.type]}\n              </div>\n              <div className=\"flex-1\">\n                <p className={`text-sm ${notification.read ? 'text-muted-foreground' : 'font-medium'}`}>\n                  {notification.message}\n                </p>\n                <p className=\"text-xs text-muted-foreground\">\n                  {new Date(notification.created_at).toLocaleString()}\n                </p>\n              </div>\n              {!notification.read && (\n                <Button \n                  variant=\"ghost\" \n                  size=\"icon\"\n                  onClick={() => markAsReadMutation.mutate(notification.id)}\n                  title=\"Mark as read\"\n                  aria-label={`Mark notification as read: ${notification.message}`}\n                >\n                  <CheckCircle className=\"h-5 w-5\" />\n                </Button>\n              )}\n            </div>\n          ))}\n\n          {!isLoading && !isError && notifications?.length === 0 && (\n            <p className=\"text-sm text-muted-foreground\">No new notifications.</p>\n          )}\n        </div>\n      </CardContent>\n    </Card>\n  );\n}; ","usedDeprecatedRules":[]},{"filePath":"/home/vonj/Github/Nexus/src/components/workspace/widgets/ProactiveAlertsWidget.tsx","messages":[{"ruleId":"no-restricted-syntax","severity":1,"message":"Use design tokens instead of hardcoded text colors (e.g., text-foreground, text-muted-foreground)","line":13,"column":38,"nodeType":"Literal","messageId":"restrictedSyntax","endLine":13,"endColumn":60},{"ruleId":"no-restricted-syntax","severity":1,"message":"Use design tokens instead of hardcoded colors (e.g., bg-primary, bg-secondary)","line":14,"column":20,"nodeType":"Literal","messageId":"restrictedSyntax","endLine":14,"endColumn":59},{"ruleId":"no-restricted-syntax","severity":1,"message":"Use design tokens instead of hardcoded text colors (e.g., text-foreground, text-muted-foreground)","line":14,"column":20,"nodeType":"Literal","messageId":"restrictedSyntax","endLine":14,"endColumn":59},{"ruleId":"no-restricted-syntax","severity":1,"message":"Use design tokens instead of hardcoded text colors (e.g., text-foreground, text-muted-foreground)","line":18,"column":40,"nodeType":"Literal","messageId":"restrictedSyntax","endLine":18,"endColumn":65},{"ruleId":"no-restricted-syntax","severity":1,"message":"Use design tokens instead of hardcoded colors (e.g., bg-primary, bg-secondary)","line":19,"column":20,"nodeType":"Literal","messageId":"restrictedSyntax","endLine":19,"endColumn":68},{"ruleId":"no-restricted-syntax","severity":1,"message":"Use design tokens instead of hardcoded text colors (e.g., text-foreground, text-muted-foreground)","line":19,"column":20,"nodeType":"Literal","messageId":"restrictedSyntax","endLine":19,"endColumn":68},{"ruleId":"no-restricted-syntax","severity":1,"message":"Use design tokens instead of hardcoded text colors (e.g., text-foreground, text-muted-foreground)","line":23,"column":31,"nodeType":"Literal","messageId":"restrictedSyntax","endLine":23,"endColumn":54},{"ruleId":"no-restricted-syntax","severity":1,"message":"Use design tokens instead of hardcoded colors (e.g., bg-primary, bg-secondary)","line":24,"column":20,"nodeType":"Literal","messageId":"restrictedSyntax","endLine":24,"endColumn":62},{"ruleId":"no-restricted-syntax","severity":1,"message":"Use design tokens instead of hardcoded text colors (e.g., text-foreground, text-muted-foreground)","line":24,"column":20,"nodeType":"Literal","messageId":"restrictedSyntax","endLine":24,"endColumn":62}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React from 'react';\nimport { useQuery } from '@tanstack/react-query';\nimport { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/Card';\nimport { AlertCircle, AlertTriangle, Info, ArrowRight, Loader2, Bell } from 'lucide-react';\nimport { Button } from '@/components/ui/Button';\nimport { aiInsightsService } from '@/lib/services/aiInsightsService';\nimport type { AIInsight } from '@/lib/services/aiInsightsService';\nimport { Alert, AlertDescription } from '@/components/ui/Alert';\nimport { cn } from '@/lib/utils/utils';\n\nconst alertConfig = {\n    critical: {\n        icon: <AlertCircle className=\"h-5 w-5 text-red-500\" />,\n        className: \"bg-red-50 text-red-900 border-red-200\",\n        buttonVariant: \"destructive\" as const,\n    },\n    warning: {\n        icon: <AlertTriangle className=\"h-5 w-5 text-yellow-500\" />,\n        className: \"bg-yellow-50 text-yellow-900 border-yellow-200\",\n        buttonVariant: \"secondary\" as const,\n    },\n    info: {\n        icon: <Info className=\"h-5 w-5 text-blue-500\" />,\n        className: \"bg-blue-50 text-blue-900 border-blue-200\",\n        buttonVariant: \"default\" as const,\n    },\n}\n\nexport const ProactiveAlertsWidget: React.FC = () => {\n  const { data: insights, isLoading, isError, error } = useQuery<AIInsight[], Error>({\n    queryKey: ['aiAlerts'],\n    // We can enhance the service later to specifically query for alerts.\n    // For now, we filter on the client-side.\n    queryFn: () => aiInsightsService.getInsights(),\n    select: (data) => data.filter((insight) => insight.type === 'alert'),\n  });\n\n  const renderContent = () => {\n    if (isLoading) {\n      return (\n        <div className=\"flex justify-center items-center p-6\">\n          <Loader2 className=\"h-8 w-8 animate-spin text-muted-foreground\" />\n        </div>\n      );\n    }\n\n    if (isError) {\n      return (\n        <Alert variant=\"destructive\" className=\"m-4\">\n          <AlertCircle className=\"h-4 w-4\" />\n          <AlertDescription>\n            Failed to load alerts: {error.message}\n          </AlertDescription>\n        </Alert>\n      );\n    }\n    \n    if (!insights || insights.length === 0) {\n      return (\n          <div className=\"flex flex-col items-center justify-center h-full text-center p-4\">\n            <Bell className=\"w-12 h-12 text-muted-foreground mb-4\" />\n            <h3 className=\"text-lg font-semibold\">No Alerts</h3>\n            <p className=\"text-sm text-muted-foreground\">\n              Everything looks clear for now.\n            </p>\n          </div>\n      );\n    }\n\n    return (\n      <div className=\"space-y-3\">\n        {insights.map((alert) => {\n          const config = alertConfig[alert.severity || 'info'];\n          return (\n            <div key={alert.id} className={cn(\"flex items-start gap-3 p-3 rounded-md border\", config.className)}>\n                <div className=\"mt-1\">{config.icon}</div>\n                <div className=\"flex-1\">\n                <p className=\"text-sm font-medium mb-1\">{alert.message}</p>\n                {alert.action && (\n                    <Button size=\"sm\" variant={config.buttonVariant} className=\"mt-1\">\n                    {alert.action}\n                    <ArrowRight className=\"h-4 w-4 ml-1\" />\n                    </Button>\n                )}\n                </div>\n            </div>\n          )\n        })}\n      </div>\n    );\n  };\n\n  return (\n    <Card>\n      <CardHeader>\n        <CardTitle>Proactive Alerts</CardTitle>\n      </CardHeader>\n      <CardContent>\n        {renderContent()}\n      </CardContent>\n    </Card>\n  );\n}; ","usedDeprecatedRules":[]},{"filePath":"/home/vonj/Github/Nexus/src/components/workspace/widgets/QuickActionsWidget.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'quickActions' is assigned a value but never used.","line":11,"column":7,"nodeType":null,"messageId":"unusedVar","endLine":11,"endColumn":19}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React from 'react';\nimport { useQuery } from '@tanstack/react-query';\nimport { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/Card';\nimport { Button } from '@/components/ui/Button';\nimport { Loader2, AlertCircle } from 'lucide-react';\nimport { quickActionsService } from '@/lib/services/quickActionsService';\nimport type { QuickAction } from '@/lib/services/quickActionsService';\nimport { Alert, AlertDescription } from '@/components/ui/Alert';\n\n// Mock data for quick actions\nconst quickActions = [\n  { name: 'New Document', icon: <FileText className=\"h-5 w-5\" />, action: () => {} },\n  { name: 'Send Message', icon: <Mail className=\"h-5 w-5\" />, action: () => {} },\n  { name: 'Schedule Meeting', icon: <Calendar className=\"h-5 w-5\" />, action: () => {} },\n  { name: 'Add Contact', icon: <Users className=\"h-5 w-5\" />, action: () => {} },\n];\n\nexport const QuickActionsWidget: React.FC = () => {\n  const { data: actions, isLoading, isError, error } = useQuery<QuickAction[], Error>({\n    queryKey: ['quickActions', 'workspace'],\n    queryFn: () => quickActionsService.getActions('workspace'),\n  });\n\n  const renderContent = () => {\n    if (isLoading) {\n      return <Loader2 className=\"h-8 w-8 animate-spin text-muted-foreground mx-auto\" />;\n    }\n\n    if (isError) {\n      return (\n        <Alert variant=\"destructive\">\n          <AlertCircle className=\"h-4 w-4\" />\n          <AlertDescription>\n            {error.message}\n          </AlertDescription>\n        </Alert>\n      );\n    }\n\n    if (!actions || actions.length === 0) {\n      return <p className=\"text-sm text-muted-foreground text-center\">No quick actions available.</p>;\n    }\n\n    return (\n      <div className=\"grid grid-cols-1 sm:grid-cols-2 gap-3\">\n        {actions.map((action) => (\n          <Button\n            key={action.name}\n            variant=\"outline\"\n            className=\"flex items-center gap-2 justify-start\"\n            onClick={action.action}\n          >\n            <span className=\"inline-flex items-center gap-2\">\n              {action.icon}\n              {action.name}\n            </span>\n          </Button>\n        ))}\n      </div>\n    );\n  };\n\n  return (\n    <Card>\n      <CardHeader>\n        <CardTitle>Quick Actions</CardTitle>\n      </CardHeader>\n      <CardContent>\n        {renderContent()}\n      </CardContent>\n    </Card>\n  );\n}; ","usedDeprecatedRules":[]},{"filePath":"/home/vonj/Github/Nexus/src/components/workspace/widgets/RecentsWidget.tsx","messages":[{"ruleId":"no-restricted-syntax","severity":1,"message":"Use design tokens instead of hardcoded text colors (e.g., text-foreground, text-muted-foreground)","line":13,"column":38,"nodeType":"Literal","messageId":"restrictedSyntax","endLine":13,"endColumn":61},{"ruleId":"no-restricted-syntax","severity":1,"message":"Use design tokens instead of hardcoded text colors (e.g., text-foreground, text-muted-foreground)","line":14,"column":40,"nodeType":"Literal","messageId":"restrictedSyntax","endLine":14,"endColumn":65},{"ruleId":"no-restricted-syntax","severity":1,"message":"Use design tokens instead of hardcoded text colors (e.g., text-foreground, text-muted-foreground)","line":15,"column":32,"nodeType":"Literal","messageId":"restrictedSyntax","endLine":15,"endColumn":56},{"ruleId":"no-restricted-syntax","severity":1,"message":"Use design tokens instead of hardcoded text colors (e.g., text-foreground, text-muted-foreground)","line":17,"column":36,"nodeType":"Literal","messageId":"restrictedSyntax","endLine":17,"endColumn":61},{"ruleId":"no-restricted-syntax","severity":1,"message":"Use design tokens instead of hardcoded text colors (e.g., text-foreground, text-muted-foreground)","line":18,"column":31,"nodeType":"Literal","messageId":"restrictedSyntax","endLine":18,"endColumn":54},{"ruleId":"no-restricted-syntax","severity":1,"message":"Use design tokens instead of hardcoded text colors (e.g., text-foreground, text-muted-foreground)","line":81,"column":22,"nodeType":"Literal","messageId":"restrictedSyntax","endLine":81,"endColumn":60}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useCallback } from 'react';\nimport { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/Card';\nimport { FileText, BarChart2, Calendar, Users, History, AlertCircle, Pin, PinOff } from 'lucide-react';\nimport { useQuery, useMutation, useQueryClient } from '@tanstack/react-query';\nimport { supabase } from '@/lib/core/supabase';\nimport { useRealtimeTable } from '@/hooks/useRealtimeTable';\nimport { Skeleton } from '@/components/ui/Skeleton';\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/Tabs\";\nimport { Button } from '@/components/ui/Button';\nimport type { PostgrestError } from '@supabase/supabase-js';\n\nconst ICONS: Record<string, React.ReactNode> = {\n  document_view: <FileText className=\"h-5 w-5 text-blue-500\" />,\n  dashboard_view: <BarChart2 className=\"h-5 w-5 text-purple-500\" />,\n  meeting: <Calendar className=\"h-5 w-5 text-green-500\" />,\n  contact: <Users className=\"h-5 w-5 text-orange-500\" />,\n  search_query: <History className=\"h-5 w-5 text-yellow-500\" />,\n  default: <History className=\"h-5 w-5 text-gray-500\" />,\n};\n\nconst getTimeAgo = (timestamp: string) => {\n  const now = new Date();\n  const past = new Date(timestamp);\n  const diffInSeconds = Math.floor((now.getTime() - past.getTime()) / 1000);\n\n  const intervals = {\n    year: 31536000,\n    month: 2592000,\n    week: 604800,\n    day: 86400,\n    hour: 3600,\n    minute: 60,\n  };\n\n  if (diffInSeconds < 60) return 'just now';\n\n  for (const [interval, seconds] of Object.entries(intervals)) {\n    const count = Math.floor(diffInSeconds / seconds);\n    if (count > 0) {\n      return `${count} ${interval}${count > 1 ? 's' : ''} ago`;\n    }\n  }\n  return 'a long time ago';\n};\n\ntype RecentItem = {\n  id: string;\n  user_id: string;\n  entity_type: string;\n  entity_id: string;\n  visited_at: string;\n};\n\ntype PinItem = {\n  id: string;\n  user_id: string;\n  entity_type: string;\n  entity_id: string;\n  pinned_at: string;\n};\n\nconst ItemList: React.FC<{\n  items: (RecentItem | PinItem)[];\n  isLoading: boolean;\n  isError: boolean;\n  onPinToggle: (item: RecentItem | PinItem) => void;\n  isPinnedList?: boolean;\n}> = ({ items, isLoading, isError, onPinToggle, isPinnedList = false }) => {\n  if (isLoading) {\n    return (\n      <>\n        <Skeleton className=\"h-10 w-full\" />\n        <Skeleton className=\"h-10 w-full\" />\n        <Skeleton className=\"h-10 w-full\" />\n      </>\n    );\n  }\n\n  if (isError) {\n    return (\n      <div className=\"text-red-500 flex items-center gap-2\">\n        <AlertCircle className=\"h-5 w-5\" />\n        <p>Error loading items.</p>\n      </div>\n    );\n  }\n  \n  if (items.length === 0) {\n    return <p className=\"text-sm text-muted-foreground\">No items to display.</p>;\n  }\n\n  return (\n    <div className=\"space-y-3\">\n      {items.map((item) => (\n        <div\n          key={item.id}\n          className=\"flex items-center gap-3 p-2 rounded-md hover:bg-muted/50\"\n        >\n          {ICONS[(item as RecentItem).entity_type] || ICONS.default}\n          <div className=\"flex-1\">\n            <p className=\"font-medium text-sm\">{(item as RecentItem).entity_type} - {(item as RecentItem).entity_id}</p>\n            <p className=\"text-xs text-muted-foreground capitalize\">{(item as RecentItem).entity_type?.replace(/_/g, ' ')}</p>\n          </div>\n          <div className=\"text-xs text-muted-foreground whitespace-nowrap\">{getTimeAgo((item as RecentItem).visited_at || (item as PinItem).pinned_at)}</div>\n          <Button variant=\"ghost\" size=\"icon\" onClick={() => onPinToggle(item)}>\n            {isPinnedList ? <PinOff className=\"h-4 w-4\" /> : <Pin className=\"h-4 w-4\" />}\n          </Button>\n        </div>\n      ))}\n    </div>\n  );\n};\n\n// Fetch recents from Recent table\nasync function fetchRecents(): Promise<RecentItem[]> {\n  const { data, error }: { data: RecentItem[] | null; error: PostgrestError | null } = await supabase\n    .from('Recent')\n    .select('*')\n    .order('visited_at', { ascending: false })\n    .limit(10);\n  if (error) throw error;\n  return data ?? [];\n}\n\n// Fetch pins from Pin table\nasync function fetchPins(): Promise<PinItem[]> {\n  const { data, error }: { data: PinItem[] | null; error: PostgrestError | null } = await supabase\n    .from('Pin')\n    .select('*')\n    .order('pinned_at', { ascending: false })\n    .limit(10);\n  if (error) throw error;\n  return data ?? [];\n}\n\nexport const RecentsWidget: React.FC = () => {\n  const queryClient = useQueryClient();\n\n  const { data: recentItems, isLoading: recentsLoading, isError: recentsError } = useQuery({\n    queryKey: ['recentItems'],\n    queryFn: fetchRecents,\n  });\n\n  const { data: pinnedItems, isLoading: pinnedLoading, isError: pinnedError } = useQuery({\n    queryKey: ['pinnedItems'],\n    queryFn: fetchPins,\n  });\n\n  // Real-time updates\n  useRealtimeTable('Recent', useCallback(() => {\n    queryClient.invalidateQueries({ queryKey: ['recentItems'] });\n  }, [queryClient]));\n  useRealtimeTable('Pin', useCallback(() => {\n    queryClient.invalidateQueries({ queryKey: ['pinnedItems'] });\n  }, [queryClient]));\n\n  // Pin: add to Pin table\n  const pinMutation = useMutation({\n    mutationFn: async (item: RecentItem) => {\n      await supabase.from('Pin').insert({\n        user_id: item.user_id,\n        entity_type: item.entity_type,\n        entity_id: item.entity_id,\n      });\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: ['pinnedItems'] });\n    },\n  });\n\n  // Unpin: remove from Pin table\n  const unpinMutation = useMutation({\n    mutationFn: async (item: PinItem | RecentItem) => {\n      // Find pin by user/entity\n      const { data } = await supabase\n        .from('Pin')\n        .select('id')\n        .eq('user_id', item.user_id)\n        .eq('entity_type', item.entity_type)\n        .eq('entity_id', item.entity_id)\n        .limit(1)\n        .single();\n      if (data?.id) {\n        await supabase.from('Pin').delete().eq('id', data.id);\n      }\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: ['pinnedItems'] });\n    },\n  });\n\n  const handlePinToggle = (item: RecentItem | PinItem) => {\n    const isPinned = pinnedItems?.some(\n      (p) =>\n        p.user_id === item.user_id &&\n        p.entity_type === (item as RecentItem).entity_type &&\n        p.entity_id === (item as RecentItem).entity_id\n    );\n    if (isPinned) {\n      unpinMutation.mutate(item);\n    } else {\n      pinMutation.mutate(item as RecentItem);\n    }\n  };\n\n  return (\n    <Card>\n      <CardHeader>\n        <CardTitle>Activity</CardTitle>\n      </CardHeader>\n      <CardContent>\n        <Tabs defaultValue=\"recents\">\n          <TabsList className=\"grid w-full grid-cols-2\">\n            <TabsTrigger value=\"recents\">Recents</TabsTrigger>\n            <TabsTrigger value=\"pinned\">Pinned</TabsTrigger>\n          </TabsList>\n          <TabsContent value=\"recents\">\n             <ItemList\n                items={recentItems || []}\n                isLoading={recentsLoading}\n                isError={recentsError}\n                onPinToggle={handlePinToggle}\n             />\n          </TabsContent>\n          <TabsContent value=\"pinned\">\n             <ItemList\n                items={pinnedItems || []}\n                isLoading={pinnedLoading}\n                isError={pinnedError}\n                onPinToggle={handlePinToggle}\n                isPinnedList\n             />\n          </TabsContent>\n        </Tabs>\n      </CardContent>\n    </Card>\n  );\n}; ","usedDeprecatedRules":[]},{"filePath":"/home/vonj/Github/Nexus/src/components/workspace/widgets/TasksWidget.tsx","messages":[{"ruleId":"no-restricted-syntax","severity":1,"message":"Use design tokens instead of hardcoded colors (e.g., bg-primary, bg-secondary)","line":16,"column":9,"nodeType":"Literal","messageId":"restrictedSyntax","endLine":16,"endColumn":21},{"ruleId":"no-restricted-syntax","severity":1,"message":"Use design tokens instead of hardcoded colors (e.g., bg-primary, bg-secondary)","line":17,"column":11,"nodeType":"Literal","messageId":"restrictedSyntax","endLine":17,"endColumn":26},{"ruleId":"no-restricted-syntax","severity":1,"message":"Use design tokens instead of hardcoded colors (e.g., bg-primary, bg-secondary)","line":18,"column":8,"nodeType":"Literal","messageId":"restrictedSyntax","endLine":18,"endColumn":21},{"ruleId":"no-restricted-syntax","severity":1,"message":"Use design tokens instead of hardcoded colors (e.g., bg-primary, bg-secondary)","line":19,"column":9,"nodeType":"Literal","messageId":"restrictedSyntax","endLine":19,"endColumn":22},{"ruleId":"no-restricted-syntax","severity":1,"message":"Use design tokens instead of hardcoded text colors (e.g., text-foreground, text-muted-foreground)","line":60,"column":28,"nodeType":"Literal","messageId":"restrictedSyntax","endLine":60,"endColumn":66}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React from 'react';\nimport { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/Card';\nimport { CheckSquare, AlertCircle } from 'lucide-react';\nimport { useQuery, useMutation, useQueryClient } from '@tanstack/react-query';\nimport { tasksService } from '@/lib/services/tasksService';\nimport type { Task } from '@/lib/services/tasksService';\nimport { Skeleton } from '@/components/ui/Skeleton';\nimport { Checkbox } from '@/components/ui/Checkbox';\nimport { Badge } from '@/components/ui/Badge';\n\ninterface TasksWidgetProps {\n  onTaskComplete: () => void;\n}\n\nconst priorityColors: { [key: string]: string } = {\n  High: 'bg-red-500',\n  Medium: 'bg-yellow-500',\n  Low: 'bg-blue-500',\n  None: 'bg-gray-500',\n};\n\nexport const TasksWidget: React.FC<TasksWidgetProps> = ({ onTaskComplete }) => {\n  const queryClient = useQueryClient();\n\n  const { data: tasks, isLoading, isError } = useQuery({\n    queryKey: ['tasks'],\n    queryFn: () => tasksService.getTasks(),\n  });\n\n  const toggleCompletionMutation = useMutation({\n    mutationFn: ({ taskId, completed }: { taskId: string; completed: boolean }) =>\n      tasksService.toggleTaskCompletion(taskId, completed),\n    onSuccess: (updatedTask) => {\n      queryClient.invalidateQueries({ queryKey: ['tasks'] });\n      if (updatedTask.completed) {\n        onTaskComplete();\n      }\n    },\n  });\n\n  return (\n    <Card>\n      <CardHeader>\n        <CardTitle className=\"flex items-center gap-2\">\n          <CheckSquare className=\"h-5 w-5\" />\n          <span>Tasks</span>\n        </CardTitle>\n      </CardHeader>\n      <CardContent>\n        <div className=\"space-y-4\">\n          {isLoading && (\n            <>\n              <Skeleton className=\"h-10 w-full\" />\n              <Skeleton className=\"h-10 w-full\" />\n              <Skeleton className=\"h-10 w-full\" />\n            </>\n          )}\n\n          {isError && (\n            <div className=\"text-red-500 flex items-center gap-2\">\n              <AlertCircle className=\"h-5 w-5\" />\n              <p>Error loading tasks.</p>\n            </div>\n          )}\n\n          {tasks && tasks.map((task: Task) => (\n            <div key={task.id} className=\"flex items-center gap-3\">\n              <Checkbox\n                id={task.id}\n                checked={task.completed}\n                onCheckedChange={(checked) => toggleCompletionMutation.mutate({ taskId: task.id, completed: !!checked })}\n              />\n              <label\n                htmlFor={task.id}\n                className={`flex-1 text-sm font-medium ${\n                  task.completed ? 'text-muted-foreground line-through' : ''\n                }`}\n              >\n                {task.title}\n              </label>\n              <div className={`h-2 w-2 rounded-full ${priorityColors[task.priority]}`} />\n              <Badge variant={task.priority === 'High' ? 'destructive' : 'secondary'}>\n                {task.priority}\n              </Badge>\n            </div>\n          ))}\n\n          {!isLoading && !isError && tasks?.length === 0 && (\n            <p className=\"text-sm text-muted-foreground\">No tasks to complete.</p>\n          )}\n        </div>\n      </CardContent>\n    </Card>\n  );\n}; ","usedDeprecatedRules":[]},{"filePath":"/home/vonj/Github/Nexus/src/config/departmentConfigs.ts","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'DollarSign' is defined but never used.","line":9,"column":39,"nodeType":null,"messageId":"unusedVar","endLine":9,"endColumn":49}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\n * departmentConfigs.ts\n * Configuration data for unified department pages\n * \n * Pillar: 1 (Efficient Automation) - Centralized department configuration\n */\n\nimport { \n  Activity, Package, Settings, Users, DollarSign, TrendingUp, \n  Target, Handshake, UserPlus, FileText, Plus, Wrench,\n  CreditCard, Receipt, Calculator, Monitor, Shield, Code,\n  Heart, Scale, Briefcase\n} from 'lucide-react';\nimport type { DepartmentConfig } from '@/components/patterns/UnifiedPages';\n\n// ===== OPERATIONS CONFIGURATION =====\nexport const operationsConfig: DepartmentConfig = {\n  title: \"Operations Center\",\n  subtitle: \"Streamline workflows, manage inventory, and optimize business processes\",\n  kpis: [\n    { title: 'Active Workflows', value: '48', delta: '+12.5%' },\n    { title: 'Inventory Items', value: '1,284', delta: '+8.3%' },\n    { title: 'Process Efficiency', value: '94.2%', delta: '+5.2%' },\n    { title: 'Team Productivity', value: '87.5%', delta: '+3.1%' },\n  ],\n  quickActions: [\n    { label: 'New Workflow', icon: Activity, onClick: () => console.log('New Workflow') },\n    { label: 'Check Inventory', icon: Package, onClick: () => console.log('Check Inventory') },\n    { label: 'Process Report', icon: FileText, onClick: () => console.log('Process Report') },\n    { label: 'Maintenance', icon: Wrench, onClick: () => console.log('Maintenance') },\n  ],\n  charts: {\n    primary: {\n      title: \"Active Workflows\",\n      description: \"Current workflow distribution\",\n      data: [\n        { name: 'Order Processing', value: 32 },\n        { name: 'Inventory Management', value: 28 },\n        { name: 'Quality Control', value: 18 },\n        { name: 'Shipping', value: 15 },\n        { name: 'Returns', value: 8 },\n      ]\n    },\n    secondary: {\n      title: \"Team Productivity\",\n      description: \"Monthly productivity trends\",\n      data: [\n        { name: 'Jan', value: 85 },\n        { name: 'Feb', value: 82 },\n        { name: 'Mar', value: 88 },\n        { name: 'Apr', value: 90 },\n        { name: 'May', value: 86 },\n        { name: 'Jun', value: 94 },\n      ]\n    }\n  },\n  activities: [\n    { description: 'Workflow: Order Processing Updated', status: 'Completed', time: '2 hours ago', type: 'workflow' },\n    { description: 'Inventory: Low Stock Alert - Widget A', status: 'Pending', time: '4 hours ago', type: 'inventory' },\n    { description: 'Process: Quality Check Completed', status: 'Completed', time: '6 hours ago', type: 'process' },\n    { description: 'Team: Training Session Scheduled', status: 'Scheduled', time: '1 day ago', type: 'team' },\n  ],\n  businessInsights: {\n    crossDepartmentalImpact: ['Sales', 'Finance'],\n    keyBusinessDrivers: ['Workflow Automation', 'Inventory Accuracy'],\n    commonChallenges: ['Bottlenecks', 'Manual Errors'],\n    bestPractices: [\n      'Automate routine tasks to reduce errors',\n      'Schedule regular inventory audits',\n      'Monitor workflow KPIs weekly'\n    ],\n    aiRecommendations: [\n      'Optimize workflow steps for efficiency',\n      'Predict inventory shortages using trends',\n      'Flag bottlenecks for process review'\n    ]\n  },\n  educationalContent: {\n    whatThisMeans: 'Operations efficiency is high, with strong productivity and low error rates.',\n    whyItMatters: 'Efficient operations reduce costs and improve customer satisfaction.',\n    howToImprove: [\n      'Use the Workflow Playbook to standardize processes',\n      'Leverage automation tools for repetitive tasks',\n      'Review the Inventory Guide for best practices'\n    ],\n    industryBenchmarks: 'Top quartile operations teams achieve >95% process efficiency and <2% error rate.'\n  }\n};\n\n// ===== SALES CONFIGURATION =====\nexport const salesConfig: DepartmentConfig = {\n  title: \"Sales Dashboard\",\n  subtitle: \"Track deals, manage pipelines, and analyze sales performance\",\n  kpis: [\n    { title: 'Monthly Revenue', value: '$124,580', delta: '+12.5%' },\n    { title: 'Active Deals', value: '32', delta: '+8.3%' },\n    { title: 'Pipeline Value', value: '$456,200', delta: '+15.2%' },\n    { title: 'Conversion Rate', value: '24.8%', delta: '+2.1%' },\n  ],\n  quickActions: [\n    { label: 'New Deal', icon: Handshake, onClick: () => console.log('New Deal') },\n    { label: 'Add Contact', icon: UserPlus, onClick: () => console.log('Add Contact') },\n    { label: 'Create Proposal', icon: FileText, onClick: () => console.log('Create Proposal') },\n    { label: 'Schedule Follow-up', icon: Plus, onClick: () => console.log('Schedule Follow-up') },\n  ],\n  charts: {\n    primary: {\n      title: \"Revenue Trend\",\n      description: \"Monthly sales performance\",\n      data: [\n        { name: 'Jan', value: 65000 },\n        { name: 'Feb', value: 59000 },\n        { name: 'Mar', value: 80000 },\n        { name: 'Apr', value: 81000 },\n        { name: 'May', value: 56000 },\n        { name: 'Jun', value: 124580 },\n      ]\n    },\n    secondary: {\n      title: \"Sales Pipeline\",\n      description: \"Active deals by stage\",\n      data: [\n        { name: 'Prospects', value: 45 },\n        { name: 'Qualified', value: 32 },\n        { name: 'Proposal', value: 18 },\n        { name: 'Negotiation', value: 12 },\n        { name: 'Closed Won', value: 8 },\n      ]\n    }\n  },\n  activities: [\n    { description: 'Deal: Acme Corp - $45,000', status: 'Completed', time: '2 hours ago', type: 'deal' },\n    { description: 'Contact: Follow-up with TechStart Inc', status: 'Pending', time: '4 hours ago', type: 'contact' },\n    { description: 'Proposal: Global Solutions submitted', status: 'Completed', time: '6 hours ago', type: 'deal' },\n    { description: 'Meeting: Innovation Labs scheduled', status: 'Scheduled', time: '1 day ago', type: 'contact' },\n  ],\n  businessInsights: {\n    crossDepartmentalImpact: ['Marketing', 'Finance'],\n    keyBusinessDrivers: ['Lead Quality', 'Pipeline Velocity'],\n    commonChallenges: ['Long sales cycles', 'Low conversion rates'],\n    bestPractices: [\n      'Qualify leads early and often',\n      'Automate follow-ups for stalled deals',\n      'Review pipeline weekly with the team'\n    ],\n    aiRecommendations: [\n      'Prioritize high-value leads for outreach this week',\n      'Follow up with 3 deals in negotiation stage',\n      'Consider offering a limited-time discount to close deals faster'\n    ]\n  },\n  educationalContent: {\n    whatThisMeans: 'Sales performance is trending upward this quarter. Strong conversion rates and pipeline value indicate healthy growth.',\n    whyItMatters: 'Consistent sales growth drives revenue and enables business expansion.',\n    howToImprove: [\n      'Use the Sales Playbook to standardize outreach',\n      'Leverage CRM automation for follow-ups',\n      'Review the Product Info section for new features to pitch'\n    ],\n    industryBenchmarks: 'Average B2B conversion rate: 21%. Top performers achieve 30%+.'\n  }\n};\n\n// ===== FINANCE CONFIGURATION =====\nexport const financeConfig: DepartmentConfig = {\n  title: \"Finance Hub\",\n  subtitle: \"Manage invoices, expenses, and financial reports with automated reconciliation\",\n  kpis: [\n    { title: 'Monthly Revenue', value: '$124,580', delta: '+12.5%' },\n    { title: 'Outstanding Invoices', value: '8', delta: '-15.3%' },\n    { title: 'Monthly Expenses', value: '$73,420', delta: '+5.2%' },\n    { title: 'Profit Margin', value: '41.2%', delta: '+3.1%' },\n  ],\n  quickActions: [\n    { label: 'New Invoice', icon: Receipt, onClick: () => console.log('New Invoice') },\n    { label: 'Record Expense', icon: CreditCard, onClick: () => console.log('Record Expense') },\n    { label: 'Generate Report', icon: FileText, onClick: () => console.log('Generate Report') },\n    { label: 'Calculate Tax', icon: Calculator, onClick: () => console.log('Calculate Tax') },\n  ],\n  charts: {\n    primary: {\n      title: \"Revenue Trend\",\n      description: \"Monthly revenue performance\",\n      data: [\n        { name: 'Jan', value: 65000 },\n        { name: 'Feb', value: 59000 },\n        { name: 'Mar', value: 80000 },\n        { name: 'Apr', value: 81000 },\n        { name: 'May', value: 56000 },\n        { name: 'Jun', value: 124580 },\n      ]\n    },\n    secondary: {\n      title: \"Expense Breakdown\",\n      description: \"Monthly expense categories\",\n      data: [\n        { name: 'Salaries', value: 45000 },\n        { name: 'Marketing', value: 12000 },\n        { name: 'Operations', value: 8500 },\n        { name: 'Software', value: 5200 },\n        { name: 'Office', value: 3200 },\n      ]\n    }\n  },\n  activities: [\n    { description: 'Invoice: INV-2024-001 sent to Acme Corp', status: 'Completed', time: '2 hours ago', type: 'invoice' },\n    { description: 'Expense: Office supplies $234.50', status: 'Pending', time: '4 hours ago', type: 'expense' },\n    { description: 'Payment: TechStart Inc - $32,000 received', status: 'Completed', time: '6 hours ago', type: 'invoice' },\n    { description: 'Report: Monthly P&L generated', status: 'Scheduled', time: '1 day ago', type: 'expense' },\n  ],\n  businessInsights: {\n    crossDepartmentalImpact: ['Sales', 'Operations'],\n    keyBusinessDrivers: ['Revenue Growth', 'Expense Control'],\n    commonChallenges: ['Late payments', 'Budget overruns'],\n    bestPractices: [\n      'Automate invoicing and reminders',\n      'Review expenses weekly',\n      'Reconcile accounts at month-end'\n    ],\n    aiRecommendations: [\n      'Flag overdue invoices for follow-up',\n      'Suggest cost-saving measures for high expense categories',\n      'Recommend early payment discounts to clients'\n    ]\n  },\n  educationalContent: {\n    whatThisMeans: 'Finance health is stable with positive cash flow and improving margins.',\n    whyItMatters: 'Strong financial management enables strategic investments and business growth.',\n    howToImprove: [\n      'Use the Invoice Playbook to standardize billing',\n      'Automate expense tracking with integrated tools',\n      'Review the Tax Guide for compliance tips'\n    ],\n    industryBenchmarks: 'Median DSO (days sales outstanding): 45 days. Top quartile: <30 days.'\n  }\n};\n\n// ===== SUPPORT CONFIGURATION =====\nexport const supportConfig: DepartmentConfig = {\n  title: \"Support Center\",\n  subtitle: \"Manage customer tickets, knowledge base, and team performance\",\n  kpis: [\n    { title: 'Open Tickets', value: '23', delta: '-18.5%' },\n    { title: 'Avg Response Time', value: '2.4h', delta: '-25.3%' },\n    { title: 'Customer Satisfaction', value: '94.8%', delta: '+5.2%' },\n    { title: 'Resolution Rate', value: '87.5%', delta: '+3.1%' },\n  ],\n  quickActions: [\n    { label: 'New Ticket', icon: Plus, onClick: () => console.log('New Ticket') },\n    { label: 'Knowledge Base', icon: FileText, onClick: () => console.log('Knowledge Base') },\n    { label: 'Team Status', icon: Users, onClick: () => console.log('Team Status') },\n    { label: 'Escalate Issue', icon: TrendingUp, onClick: () => console.log('Escalate Issue') },\n  ],\n  charts: {\n    primary: {\n      title: \"Ticket Volume\",\n      description: \"Daily ticket creation trends\",\n      data: [\n        { name: 'Mon', value: 12 },\n        { name: 'Tue', value: 8 },\n        { name: 'Wed', value: 15 },\n        { name: 'Thu', value: 11 },\n        { name: 'Fri', value: 9 },\n        { name: 'Sat', value: 4 },\n      ]\n    },\n    secondary: {\n      title: \"Resolution Time\",\n      description: \"Average resolution time by category\",\n      data: [\n        { name: 'Technical', value: 4.2 },\n        { name: 'Billing', value: 2.1 },\n        { name: 'General', value: 1.8 },\n        { name: 'Bug Report', value: 6.5 },\n        { name: 'Feature Request', value: 8.3 },\n      ]\n    }\n  },\n  activities: [\n    { description: 'Ticket #1234: Login issue resolved', status: 'Completed', time: '2 hours ago', type: 'team' },\n    { description: 'Escalation: Payment processing bug', status: 'Pending', time: '4 hours ago', type: 'team' },\n    { description: 'Knowledge Base: Updated FAQ section', status: 'Completed', time: '6 hours ago', type: 'team' },\n    { description: 'Training: New agent onboarding', status: 'Scheduled', time: '1 day ago', type: 'team' },\n  ]\n};\n\n// ===== MARKETING CONFIGURATION =====\nexport const marketingConfig: DepartmentConfig = {\n  title: \"Marketing Hub\",\n  subtitle: \"Campaign management, analytics, and lead generation\",\n  kpis: [\n    { title: 'Campaign ROI', value: '342%', delta: '+28.5%' },\n    { title: 'Lead Generation', value: '156', delta: '+15.3%' },\n    { title: 'Conversion Rate', value: '12.8%', delta: '+5.2%' },\n    { title: 'Email Open Rate', value: '24.5%', delta: '+3.1%' },\n  ],\n  quickActions: [\n    { label: 'New Campaign', icon: Plus, onClick: () => console.log('New Campaign') },\n    { label: 'Email Blast', icon: FileText, onClick: () => console.log('Email Blast') },\n    { label: 'Analytics Report', icon: TrendingUp, onClick: () => console.log('Analytics Report') },\n    { label: 'Lead Import', icon: Users, onClick: () => console.log('Lead Import') },\n  ],\n  charts: {\n    primary: {\n      title: \"Campaign Performance\",\n      description: \"Monthly campaign ROI trends\",\n      data: [\n        { name: 'Jan', value: 280 },\n        { name: 'Feb', value: 310 },\n        { name: 'Mar', value: 295 },\n        { name: 'Apr', value: 330 },\n        { name: 'May', value: 315 },\n        { name: 'Jun', value: 342 },\n      ]\n    },\n    secondary: {\n      title: \"Lead Sources\",\n      description: \"Lead generation by channel\",\n      data: [\n        { name: 'Organic Search', value: 45 },\n        { name: 'Social Media', value: 32 },\n        { name: 'Email Campaign', value: 28 },\n        { name: 'Paid Ads', value: 35 },\n        { name: 'Referrals', value: 16 },\n      ]\n    }\n  },\n  activities: [\n    { description: 'Campaign: Summer Sale launched', status: 'Completed', time: '2 hours ago', type: 'team' },\n    { description: 'Email: Newsletter scheduled for tomorrow', status: 'Pending', time: '4 hours ago', type: 'team' },\n    { description: 'Analytics: Q2 report generated', status: 'Completed', time: '6 hours ago', type: 'team' },\n    { description: 'Social: LinkedIn post scheduled', status: 'Scheduled', time: '1 day ago', type: 'team' },\n  ]\n};\n\n// ===== MATURITY CONFIGURATION =====\nexport const maturityConfig: DepartmentConfig = {\n  title: \"Maturity Assessment\",\n  subtitle: \"Business maturity tracking and improvement recommendations\",\n  kpis: [\n    { title: 'Overall Maturity', value: '73%', delta: '+8.5%' },\n    { title: 'Process Automation', value: '68%', delta: '+12.3%' },\n    { title: 'Data Quality', value: '81%', delta: '+5.2%' },\n    { title: 'Team Efficiency', value: '76%', delta: '+6.1%' },\n  ],\n  quickActions: [\n    { label: 'Run Assessment', icon: Target, onClick: () => console.log('Run Assessment') },\n    { label: 'View Recommendations', icon: FileText, onClick: () => console.log('View Recommendations') },\n    { label: 'Progress Report', icon: TrendingUp, onClick: () => console.log('Progress Report') },\n    { label: 'Benchmark Analysis', icon: Settings, onClick: () => console.log('Benchmark Analysis') },\n  ],\n  charts: {\n    primary: {\n      title: \"Maturity Trends\",\n      description: \"Monthly maturity score progression\",\n      data: [\n        { name: 'Jan', value: 65 },\n        { name: 'Feb', value: 67 },\n        { name: 'Mar', value: 69 },\n        { name: 'Apr', value: 71 },\n        { name: 'May', value: 72 },\n        { name: 'Jun', value: 73 },\n      ]\n    },\n    secondary: {\n      title: \"Category Scores\",\n      description: \"Maturity scores by business area\",\n      data: [\n        { name: 'Operations', value: 78 },\n        { name: 'Technology', value: 82 },\n        { name: 'People', value: 71 },\n        { name: 'Strategy', value: 69 },\n        { name: 'Culture', value: 74 },\n      ]\n    }\n  },\n  activities: [\n    { description: 'Assessment: Operations maturity updated', status: 'Completed', time: '2 hours ago', type: 'process' },\n    { description: 'Recommendation: Implement workflow automation', status: 'Pending', time: '4 hours ago', type: 'process' },\n    { description: 'Report: Q2 maturity report generated', status: 'Completed', time: '6 hours ago', type: 'process' },\n    { description: 'Benchmark: Industry comparison scheduled', status: 'Scheduled', time: '1 day ago', type: 'process' },\n  ]\n};\n\n// ===== HUMAN RESOURCES CONFIGURATION =====\nexport const hrConfig: DepartmentConfig = {\n  title: \"Human Resources\",\n  subtitle: \"Employee management, recruitment, and organizational development\",\n  kpis: [\n    { title: 'Employee Count', value: '47', delta: '+15.2%' },\n    { title: 'Employee Satisfaction', value: '4.2/5', delta: '+0.3' },\n    { title: 'Time to Hire', value: '18 days', delta: '-5 days' },\n    { title: 'Retention Rate', value: '94.5%', delta: '+2.1%' },\n  ],\n  quickActions: [\n    { label: 'New Employee', icon: UserPlus, onClick: () => console.log('New Employee') },\n    { label: 'Post Job', icon: Briefcase, onClick: () => console.log('Post Job') },\n    { label: 'Performance Review', icon: Target, onClick: () => console.log('Performance Review') },\n    { label: 'Training Plan', icon: FileText, onClick: () => console.log('Training Plan') },\n  ],\n  charts: {\n    primary: {\n      title: \"Headcount Growth\",\n      description: \"Monthly employee growth\",\n      data: [\n        { name: 'Jan', value: 38 },\n        { name: 'Feb', value: 40 },\n        { name: 'Mar', value: 42 },\n        { name: 'Apr', value: 44 },\n        { name: 'May', value: 45 },\n        { name: 'Jun', value: 47 },\n      ]\n    },\n    secondary: {\n      title: \"Department Distribution\",\n      description: \"Employees by department\",\n      data: [\n        { name: 'Engineering', value: 18 },\n        { name: 'Sales', value: 12 },\n        { name: 'Marketing', value: 8 },\n        { name: 'Operations', value: 6 },\n        { name: 'Other', value: 3 },\n      ]\n    }\n  },\n  activities: [\n    { description: 'Onboarding: 3 new developers started', status: 'Completed', time: '2 hours ago', type: 'team' },\n    { description: 'Interview: Senior Sales Manager candidate', status: 'Scheduled', time: '4 hours ago', type: 'team' },\n    { description: 'Review: Q2 performance reviews completed', status: 'Completed', time: '1 day ago', type: 'team' },\n    { description: 'Training: Leadership development program', status: 'Pending', time: '2 days ago', type: 'team' },\n  ]\n};\n\n// ===== INFORMATION TECHNOLOGY CONFIGURATION =====\nexport const itConfig: DepartmentConfig = {\n  title: \"Information Technology\",\n  subtitle: \"Infrastructure management, security, and technical support\",\n  kpis: [\n    { title: 'System Uptime', value: '99.8%', delta: '+0.2%' },\n    { title: 'Security Score', value: '94/100', delta: '+3' },\n    { title: 'Avg Resolution Time', value: '2.1h', delta: '-0.5h' },\n    { title: 'User Satisfaction', value: '4.6/5', delta: '+0.1' },\n  ],\n  quickActions: [\n    { label: 'System Monitor', icon: Monitor, onClick: () => console.log('System Monitor') },\n    { label: 'Security Scan', icon: Shield, onClick: () => console.log('Security Scan') },\n    { label: 'User Support', icon: Users, onClick: () => console.log('User Support') },\n    { label: 'Infrastructure', icon: Settings, onClick: () => console.log('Infrastructure') },\n  ],\n  charts: {\n    primary: {\n      title: \"System Performance\",\n      description: \"Daily system uptime and performance\",\n      data: [\n        { name: 'Mon', value: 99.9 },\n        { name: 'Tue', value: 99.7 },\n        { name: 'Wed', value: 99.8 },\n        { name: 'Thu', value: 99.9 },\n        { name: 'Fri', value: 99.8 },\n        { name: 'Sat', value: 99.9 },\n      ]\n    },\n    secondary: {\n      title: \"Support Tickets\",\n      description: \"IT support ticket categories\",\n      data: [\n        { name: 'Password Reset', value: 25 },\n        { name: 'Software Issues', value: 18 },\n        { name: 'Hardware', value: 12 },\n        { name: 'Network', value: 8 },\n        { name: 'Security', value: 5 },\n      ]\n    }\n  },\n  activities: [\n    { description: 'Security: Monthly vulnerability scan completed', status: 'Completed', time: '2 hours ago', type: 'team' },\n    { description: 'Infrastructure: Server maintenance scheduled', status: 'Scheduled', time: '4 hours ago', type: 'team' },\n    { description: 'Support: Password reset for 5 users', status: 'Completed', time: '6 hours ago', type: 'team' },\n    { description: 'Backup: Weekly backup verification', status: 'Completed', time: '1 day ago', type: 'team' },\n  ]\n};\n\n// ===== PRODUCT/ENGINEERING CONFIGURATION =====\nexport const productConfig: DepartmentConfig = {\n  title: \"Product & Engineering\",\n  subtitle: \"Product development, feature planning, and technical innovation\",\n  kpis: [\n    { title: 'Sprint Velocity', value: '42 pts', delta: '+8 pts' },\n    { title: 'Code Quality', value: '94%', delta: '+2%' },\n    { title: 'Feature Delivery', value: '87%', delta: '+5%' },\n    { title: 'Bug Resolution', value: '1.8 days', delta: '-0.3 days' },\n  ],\n  quickActions: [\n    { label: 'New Feature', icon: Plus, onClick: () => console.log('New Feature') },\n    { label: 'Code Review', icon: Code, onClick: () => console.log('Code Review') },\n    { label: 'Sprint Plan', icon: Target, onClick: () => console.log('Sprint Plan') },\n    { label: 'Release Notes', icon: FileText, onClick: () => console.log('Release Notes') },\n  ],\n  charts: {\n    primary: {\n      title: \"Development Velocity\",\n      description: \"Sprint points completed over time\",\n      data: [\n        { name: 'Sprint 1', value: 32 },\n        { name: 'Sprint 2', value: 38 },\n        { name: 'Sprint 3', value: 35 },\n        { name: 'Sprint 4', value: 41 },\n        { name: 'Sprint 5', value: 39 },\n        { name: 'Sprint 6', value: 42 },\n      ]\n    },\n    secondary: {\n      title: \"Feature Categories\",\n      description: \"Development effort by feature type\",\n      data: [\n        { name: 'New Features', value: 45 },\n        { name: 'Bug Fixes', value: 25 },\n        { name: 'Improvements', value: 20 },\n        { name: 'Tech Debt', value: 10 },\n      ]\n    }\n  },\n  activities: [\n    { description: 'Feature: User dashboard v2.0 deployed', status: 'Completed', time: '2 hours ago', type: 'team' },\n    { description: 'Bug: Critical payment issue fixed', status: 'Completed', time: '4 hours ago', type: 'team' },\n    { description: 'Sprint: Planning for next sprint', status: 'Scheduled', time: '6 hours ago', type: 'team' },\n    { description: 'Review: Code review for API endpoints', status: 'Pending', time: '1 day ago', type: 'team' },\n  ]\n};\n\n// ===== CUSTOMER SUCCESS CONFIGURATION =====\nexport const customerSuccessConfig: DepartmentConfig = {\n  title: \"Customer Success\",\n  subtitle: \"Customer retention, expansion, and satisfaction management\",\n  kpis: [\n    { title: 'Customer Health', value: '8.4/10', delta: '+0.3' },\n    { title: 'Churn Rate', value: '2.1%', delta: '-0.5%' },\n    { title: 'NPS Score', value: '67', delta: '+5' },\n    { title: 'Expansion Revenue', value: '$45,200', delta: '+18%' },\n  ],\n  quickActions: [\n    { label: 'Health Check', icon: Heart, onClick: () => console.log('Health Check') },\n    { label: 'Customer Meeting', icon: Users, onClick: () => console.log('Customer Meeting') },\n    { label: 'Success Plan', icon: Target, onClick: () => console.log('Success Plan') },\n    { label: 'Feedback Survey', icon: FileText, onClick: () => console.log('Feedback Survey') },\n  ],\n  charts: {\n    primary: {\n      title: \"Customer Health Trends\",\n      description: \"Monthly customer health score\",\n      data: [\n        { name: 'Jan', value: 7.8 },\n        { name: 'Feb', value: 8.0 },\n        { name: 'Mar', value: 8.1 },\n        { name: 'Apr', value: 8.2 },\n        { name: 'May', value: 8.3 },\n        { name: 'Jun', value: 8.4 },\n      ]\n    },\n    secondary: {\n      title: \"Churn Analysis\",\n      description: \"Churn rate by customer segment\",\n      data: [\n        { name: 'Enterprise', value: 1.2 },\n        { name: 'Mid-Market', value: 2.8 },\n        { name: 'SMB', value: 3.5 },\n        { name: 'Startup', value: 4.1 },\n      ]\n    }\n  },\n  activities: [\n    { description: 'Success: Quarterly business review with Acme Corp', status: 'Completed', time: '2 hours ago', type: 'team' },\n    { description: 'Risk: Identified churn risk for TechStart Inc', status: 'Pending', time: '4 hours ago', type: 'team' },\n    { description: 'Expansion: Upsell opportunity with Global Solutions', status: 'Scheduled', time: '6 hours ago', type: 'team' },\n    { description: 'Survey: NPS survey sent to 50 customers', status: 'Completed', time: '1 day ago', type: 'team' },\n  ]\n};\n\n// ===== LEGAL/COMPLIANCE CONFIGURATION =====\nexport const legalConfig: DepartmentConfig = {\n  title: \"Legal & Compliance\",\n  subtitle: \"Contract management, regulatory compliance, and risk mitigation\",\n  kpis: [\n    { title: 'Contract Turnaround', value: '5.2 days', delta: '-1.3 days' },\n    { title: 'Compliance Score', value: '98%', delta: '+2%' },\n    { title: 'Active Contracts', value: '142', delta: '+8' },\n    { title: 'Risk Assessment', value: 'Low', delta: 'Stable' },\n  ],\n  quickActions: [\n    { label: 'New Contract', icon: FileText, onClick: () => console.log('New Contract') },\n    { label: 'Compliance Check', icon: Shield, onClick: () => console.log('Compliance Check') },\n    { label: 'Risk Review', icon: Scale, onClick: () => console.log('Risk Review') },\n    { label: 'Legal Research', icon: Settings, onClick: () => console.log('Legal Research') },\n  ],\n  charts: {\n    primary: {\n      title: \"Contract Pipeline\",\n      description: \"Monthly contract processing\",\n      data: [\n        { name: 'Jan', value: 18 },\n        { name: 'Feb', value: 22 },\n        { name: 'Mar', value: 20 },\n        { name: 'Apr', value: 25 },\n        { name: 'May', value: 28 },\n        { name: 'Jun', value: 24 },\n      ]\n    },\n    secondary: {\n      title: \"Compliance Areas\",\n      description: \"Compliance status by area\",\n      data: [\n        { name: 'Data Privacy', value: 98 },\n        { name: 'Financial', value: 97 },\n        { name: 'Employment', value: 99 },\n        { name: 'IP Protection', value: 96 },\n        { name: 'Regulatory', value: 98 },\n      ]\n    }\n  },\n  activities: [\n    { description: 'Contract: MSA with Enterprise Client executed', status: 'Completed', time: '2 hours ago', type: 'team' },\n    { description: 'Compliance: GDPR audit scheduled', status: 'Scheduled', time: '4 hours ago', type: 'team' },\n    { description: 'Risk: IP protection review completed', status: 'Completed', time: '6 hours ago', type: 'team' },\n    { description: 'Research: New regulation impact assessment', status: 'Pending', time: '1 day ago', type: 'team' },\n  ]\n}; ","usedDeprecatedRules":[]},{"filePath":"/home/vonj/Github/Nexus/src/constants/departments.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/vonj/Github/Nexus/src/contexts/AuthContext.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'Spinner' is defined but never used.","line":6,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":6,"endColumn":17},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":65,"column":109,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":65,"endColumn":112,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2740,2743],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2740,2743],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useMemo has missing dependencies: 'updateCompany' and 'updateProfile'. Either include them or remove the dependency array.","line":348,"column":7,"nodeType":"ArrayExpression","endLine":357,"endColumn":4,"suggestions":[{"desc":"Update the dependencies array to be: [user, session, loading, error, integrations, profile?.company_id, updateProfile, updateCompany, refreshIntegrations, completeOnboarding]","fix":{"range":[11702,11833],"text":"[user, session, loading, error, integrations, profile?.company_id, updateProfile, updateCompany, refreshIntegrations, completeOnboarding]"}}]},{"ruleId":"no-restricted-syntax","severity":1,"message":"Use design tokens instead of hardcoded text colors (e.g., text-foreground, text-muted-foreground)","line":364,"column":26,"nodeType":"Literal","messageId":"restrictedSyntax","endLine":364,"endColumn":45}],"suppressedMessages":[{"ruleId":"react-refresh/only-export-components","severity":1,"message":"Fast refresh only works when a file only exports components. Use a new file to share constants or functions between components.","line":385,"column":17,"nodeType":"Identifier","messageId":"namedExport","endLine":385,"endColumn":24,"suppressions":[{"kind":"directive","justification":""}]}],"errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { createContext, useContext, useState, useEffect, useCallback, useRef, useMemo } from 'react';\nimport type { ReactNode } from 'react';\nimport { supabase } from '@/lib/core/supabase';\nimport type { Session, User as SupabaseUser } from '@supabase/supabase-js';\nimport type { Database } from '@/lib/core/database.types';\nimport { Spinner } from '@/components/ui/Spinner';\nimport { Button } from '@/components/ui/Button';\n\n// Row types for profiles, companies, and integrations\ntype UserProfileRow = Database['public']['Tables']['user_profiles']['Row'];\ntype CompanyRow = Database['public']['Tables']['companies']['Row'];\ntype UserIntegrationRow = Database['public']['Tables']['user_integrations']['Row'];\n\ninterface AuthUser {\n  id: string;\n  email: string;\n  name?: string | null;\n  full_name?: string | null;\n  initials?: string;\n  avatar_url?: string | null;\n  created_at: string;\n  last_sign_in_at?: string | null;\n  role?: string | null;\n  department?: string | null;\n  company_id?: string | null;\n  company?: CompanyRow | null;\n  integrations?: UserIntegrationRow[];\n  onboardingCompleted?: boolean | null;\n  profile?: UserProfileRow | null;\n}\n\ninterface AuthContextType {\n  user: AuthUser | null;\n  integrations: UserIntegrationRow[];\n  session: Session | null;\n  loading: boolean;\n  error: Error | null;\n  activeOrgId: string | null;\n  signIn: (email: string, password: string) => Promise<{ error: Error | null }>;\n  signUp: (email: string, password: string) => Promise<{ error: Error | null }>;\n  signOut: () => Promise<void>;\n  resetPassword: (email: string) => Promise<{ error: Error | null }>;\n  updateProfile: (updates: Partial<UserProfileRow>) => Promise<void>;\n  updateCompany: (updates: Partial<CompanyRow>) => Promise<void>;\n  refreshIntegrations: () => Promise<void>;\n  completeOnboarding: () => Promise<void>;\n}\n\nconst AuthContext = createContext<AuthContextType | undefined>(undefined);\n\nexport const AuthProvider = ({ children }: { children: ReactNode }) => {\n  const [session, setSession] = useState<Session | null>(null);\n  const [supabaseUser, setSupabaseUser] = useState<SupabaseUser | null>(null);\n  const [profile, setProfile] = useState<UserProfileRow | null>(null);\n  const [company, setCompany] = useState<CompanyRow | null>(null);\n  const [integrations, setIntegrations] = useState<UserIntegrationRow[]>([]);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState<Error | null>(null);\n  \n  // Refs for cleanup and preventing race conditions\n  const mountedRef = useRef(true);\n  const processingRef = useRef(false);\n\n  // Helper: retry getSession up to 3 times\n  const getSessionWithRetry = async (retries = 3, delayMs = 500): Promise<{ session: Session | null, error: any }> => {\n    for (let i = 0; i < retries; i++) {\n      try {\n        const { data: { session }, error } = await supabase.auth.getSession();\n        if (session || error) return { session, error };\n      } catch (err) {\n        console.warn(`[Auth] getSession attempt ${i + 1} failed`, err);\n        if (i === retries - 1) return { session: null, error: err };\n      }\n      await new Promise(res => setTimeout(res, delayMs));\n    }\n    return { session: null, error: new Error('Session fetch failed after retries') };\n  };\n\n  const handleAuthChange = useCallback(async (session: Session | null) => {\n    // Prevent multiple simultaneous auth changes\n    if (!mountedRef.current || processingRef.current) {\n      return;\n    }\n    \n    processingRef.current = true;\n    setLoading(true);\n    \n    try {\n      setSession(session);\n      setSupabaseUser(session?.user ?? null);\n      setError(null);\n\n      if (session?.user && mountedRef.current) {\n        try {\n          // Fetch profile, company, and integrations in parallel\n          const [profileResult, integrationsResult] = await Promise.all([\n            supabase\n              .from('user_profiles')\n              .select('*, company:companies(*)')\n              .eq('id', session.user.id)\n              .maybeSingle(),\n            supabase\n              .from('user_integrations')\n              .select('*')\n              .eq('user_id', session.user.id)\n          ]);\n\n          if (!mountedRef.current) return;\n          \n          let finalProfile = profileResult.data as UserProfileRow & { company: CompanyRow | null } | null;\n          if (profileResult.error) {\n            console.warn('Profile fetch error:', profileResult.error);\n          }\n\n          // If no profile exists for a new user, create one\n          if (!finalProfile && session.user) {\n            console.log('No profile found for new user, creating one...');\n            const { data: newProfile, error: createError } = await supabase\n              .from('user_profiles')\n              .insert({\n                id: session.user.id,\n                email: session.user.email,\n                display_name: session.user.email?.split('@')[0],\n              })\n              .select()\n              .single();\n\n            if (createError) {\n              console.error('Failed to create user profile:', createError);\n              throw createError;\n            }\n            finalProfile = newProfile as UserProfileRow & { company: CompanyRow | null };\n          }\n          \n          setProfile(finalProfile);\n\n          // The company data is now part of the profile fetch\n          setCompany(finalProfile?.company ?? null);\n\n          // Set integrations from the parallel fetch\n          if (integrationsResult.error) {\n            console.warn('Integrations fetch error:', integrationsResult.error);\n            setIntegrations([]);\n          } else {\n            setIntegrations(integrationsResult.data || []);\n          }\n        } catch (err) {\n          console.error('Auth change error:', err);\n          if (mountedRef.current) {\n            setError(err as Error);\n            setProfile(null);\n            setCompany(null);\n            setIntegrations([]);\n          }\n        }\n      } else {\n        // No session - clear all data\n        setProfile(null);\n        setCompany(null);\n        setIntegrations([]);\n      }\n    } catch (err) {\n      console.error('Auth change error:', err);\n      if (mountedRef.current) {\n        setError(err as Error);\n      }\n    } finally {\n      if (mountedRef.current) {\n        setLoading(false);\n      }\n      processingRef.current = false;\n    }\n  }, []);\n\n  useEffect(() => {\n    mountedRef.current = true;\n    \n    const initAuth = async () => {\n      try {\n        // Try to get session with retry\n        const { session, error: sessionError } = await getSessionWithRetry();\n        if (sessionError) {\n          console.error('[Auth] Session error:', sessionError);\n          if (mountedRef.current) setError(sessionError);\n        }\n        if (mountedRef.current) {\n          // If session is missing, try to refresh session before logging out\n          if (!session && supabase.auth && typeof supabase.auth.refreshSession === 'function') {\n            try {\n              const { data, error: refreshError } = await supabase.auth.refreshSession();\n              if (refreshError) {\n                console.warn('[Auth] Session refresh failed:', refreshError);\n                setError(refreshError);\n              }\n              await handleAuthChange(data?.session || null);\n            } catch (refreshErr) {\n              console.error('[Auth] Session refresh threw:', refreshErr);\n              setError(refreshErr as Error);\n              await handleAuthChange(null);\n            }\n          } else {\n            await handleAuthChange(session);\n          }\n        }\n      } catch (err) {\n        console.error('[Auth] Init auth error:', err);\n        if (mountedRef.current) {\n          setError(err as Error);\n          setLoading(false);\n        }\n      }\n    };\n\n    initAuth();\n\n    // Set up auth state listener\n    const { data: { subscription } } = supabase.auth.onAuthStateChange(async (event, session) => {\n      if (mountedRef.current) {\n        console.log('[Auth] Auth state change detected:', event);\n        await handleAuthChange(session);\n      }\n    });\n\n    // Listen for storage events (e.g., localStorage cleared)\n    window.addEventListener('storage', (e) => {\n      if (e.key && e.key.includes('supabase')) {\n        console.warn('[Auth] Storage event detected:', e);\n      }\n    });\n\n    return () => {\n      mountedRef.current = false;\n      subscription.unsubscribe();\n    };\n  }, [handleAuthChange]);\n\n  const signIn = async (email: string, password: string) => {\n    const { error } = await supabase.auth.signInWithPassword({ email, password });\n    return { error: error ?? null };\n  };\n\n  const signUp = async (email: string, password: string) => {\n    const { error } = await supabase.auth.signUp({ email, password });\n    return { error: error ?? null };\n  };\n\n  const signOut = async () => {\n    await supabase.auth.signOut();\n  };\n\n  const resetPassword = async (email: string) => {\n    const { error } = await supabase.auth.resetPasswordForEmail(email, {\n      redirectTo: `${window.location.origin}/reset-password`,\n    });\n    return { error: error ?? null };\n  };\n\n  const updateProfile = async (updates: Partial<UserProfileRow>) => {\n    if (!profile) return;\n    const { data: updatedProfile, error: updateError } = await supabase\n      .from('user_profiles')\n      .update(updates)\n      .eq('id', profile.id)\n      .select()\n      .maybeSingle();\n    if (updateError) throw updateError;\n    if (mountedRef.current) {\n      setProfile(updatedProfile as UserProfileRow | null);\n    }\n  };\n\n  const updateCompany = async (updates: Partial<CompanyRow>) => {\n    if (!profile?.company_id) return;\n    const { data, error } = await supabase\n      .from('companies')\n      .update(updates)\n      .eq('id', profile.company_id)\n      .maybeSingle();\n    if (error) throw error;\n    if (mountedRef.current) {\n      setCompany(data as CompanyRow | null);\n    }\n  };\n\n  const refreshIntegrations = async () => {\n    if (!supabaseUser) return;\n    const { data, error } = await supabase\n      .from('user_integrations')\n      .select('*')\n      .eq('user_id', supabaseUser.id);\n    if (error) throw error;\n    if (mountedRef.current) {\n      setIntegrations((data as UserIntegrationRow[]) || []);\n    }\n  };\n\n  const completeOnboarding = async () => {\n    if (!profile) return;\n    const { data, error } = await supabase\n      .from('user_profiles')\n      .update({ onboarding_completed: true })\n      .eq('id', profile.id)\n      .maybeSingle();\n    if (error) throw error;\n    if (mountedRef.current) {\n      setProfile(data as UserProfileRow | null);\n    }\n  };\n\n  const user = useMemo((): AuthUser | null => {\n    if (!supabaseUser || !profile) {\n      return null;\n    }\n    return {\n      id: supabaseUser.id,\n      email: supabaseUser.email || '',\n      created_at: supabaseUser.created_at,\n      last_sign_in_at: supabaseUser.last_sign_in_at,\n      role: profile.role,\n      department: profile.department,\n      company_id: profile.company_id,\n      onboardingCompleted: profile.onboarding_completed,\n      profile,\n      company,\n      integrations,\n      name: profile.display_name,\n      full_name: profile.display_name,\n      initials: profile.display_name?.split(' ').map(n => n[0]).join('') || '?',\n      avatar_url: profile.avatar_url,\n    };\n  }, [supabaseUser, profile, company, integrations]);\n\n  const value: AuthContextType = useMemo(() => ({\n    user,\n    session,\n    loading,\n    error,\n    integrations,\n    activeOrgId: profile?.company_id || null,\n    signIn,\n    signUp,\n    signOut,\n    resetPassword,\n    updateProfile,\n    updateCompany,\n    refreshIntegrations,\n    completeOnboarding,\n  }), [\n    user,\n    session,\n    loading,\n    error,\n    integrations,\n    profile,\n    refreshIntegrations,\n    completeOnboarding\n  ]);\n\n  // Custom error UI for session expired\n  if (error && error.message && error.message.toLowerCase().includes('session')) {\n    return (\n      <div className=\"min-h-screen flex items-center justify-center bg-background\">\n        <div className=\"text-center max-w-md mx-auto p-6\">\n          <div className=\"text-red-500 mb-4\">\n            <svg className=\"w-16 h-16 mx-auto\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\n              <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M12 8v4m0 4h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z\" />\n            </svg>\n          </div>\n          <h2 className=\"text-xl font-semibold text-foreground mb-2\">Session Expired</h2>\n          <p className=\"text-muted-foreground mb-6\">\n            Your session has expired or could not be restored. Please log in again to continue.\n          </p>\n          <Button variant=\"outline\" onClick={() => window.location.href = '/login'}>\n            Go to Login\n          </Button>\n        </div>\n      </div>\n    );\n  }\n\n  return <AuthContext.Provider value={value}>{children}</AuthContext.Provider>;\n};\n\n// eslint-disable-next-line react-refresh/only-export-components\nexport function useAuth() {\n  const context = useContext(AuthContext);\n  if (context === undefined) {\n    throw new Error('useAuth must be used within an AuthProvider');\n  }\n  return context;\n}\n\nexport default AuthProvider; ","usedDeprecatedRules":[]},{"filePath":"/home/vonj/Github/Nexus/src/contexts/NotificationContext.tsx","messages":[{"ruleId":"react-refresh/only-export-components","severity":1,"message":"Fast refresh only works when a file only exports components. Use a new file to share constants or functions between components.","line":114,"column":14,"nodeType":"Identifier","messageId":"namedExport","endLine":114,"endColumn":30},{"ruleId":"react-refresh/only-export-components","severity":1,"message":"Fast refresh only works when a file only exports components. Use a new file to share constants or functions between components.","line":128,"column":14,"nodeType":"Identifier","messageId":"namedExport","endLine":128,"endColumn":27}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { createContext, useContext, useState, useCallback } from 'react';\nimport PropTypes from 'prop-types';\n\nexport interface Notification {\n  id: string;\n  message: string;\n  type: 'info' | 'success' | 'warning' | 'error';\n  timestamp: Date;\n  read: boolean;\n}\n\ninterface NotificationContextType {\n  notifications: Notification[];\n  unreadCount: number;\n  addNotification: (notification: Omit<Notification, 'id' | 'timestamp' | 'read'>) => void;\n  markAsRead: (id: string) => void;\n  markAllAsRead: () => void;\n  removeNotification: (id: string) => void;\n  clearAll: () => void;\n}\n\nconst NotificationContext = createContext<NotificationContextType | undefined>(undefined);\n\n/**\n * @name NotificationProvider\n * @description Provides notification state management to the application.\n * @param {object} props - The props for the component.\n * @param {React.ReactNode} props.children - The child components.\n * @returns {JSX.Element} The rendered NotificationProvider component.\n */\nexport const NotificationProvider: React.FC<{ children: React.ReactNode }> = ({ children }) => {\n  const [notifications, setNotifications] = useState<Notification[]>([\n    // Demo notifications - in real app these would come from an API\n    {\n      id: '1',\n      message: 'New invoice received from Acme Corp',\n      type: 'info',\n      timestamp: new Date(Date.now() - 2 * 60 * 1000), // 2 minutes ago\n      read: false,\n    },\n    {\n      id: '2',\n      message: 'Monthly sales report is ready for review',\n      type: 'success',\n      timestamp: new Date(Date.now() - 10 * 60 * 1000), // 10 minutes ago\n      read: false,\n    },\n    {\n      id: '3',\n      message: 'AI Assistant has new automation suggestions',\n      type: 'info',\n      timestamp: new Date(Date.now() - 60 * 60 * 1000), // 1 hour ago\n      read: false,\n    },\n  ]);\n\n  const unreadCount = notifications.filter(n => !n.read).length;\n\n  const addNotification = useCallback((notification: Omit<Notification, 'id' | 'timestamp' | 'read'>) => {\n    const newNotification: Notification = {\n      ...notification,\n      id: Date.now().toString(),\n      timestamp: new Date(),\n      read: false,\n    };\n\n    setNotifications(prev => [newNotification, ...prev]);\n  }, []);\n\n  const markAsRead = useCallback((id: string) => {\n    setNotifications(prev => prev.map(n => \n      n.id === id ? { ...n, read: true } : n\n    ));\n  }, []);\n\n  const markAllAsRead = useCallback(() => {\n    setNotifications(prev => prev.map(n => ({ ...n, read: true })));\n  }, []);\n\n  const removeNotification = useCallback((id: string) => {\n    setNotifications(prev => prev.filter(n => n.id !== id));\n  }, []);\n\n  const clearAll = useCallback(() => {\n    setNotifications([]);\n  }, []);\n\n  const value: NotificationContextType = {\n    notifications,\n    unreadCount,\n    addNotification,\n    markAsRead,\n    markAllAsRead,\n    removeNotification,\n    clearAll,\n  };\n\n  return (\n    <NotificationContext.Provider value={value}>\n      {children}\n    </NotificationContext.Provider>\n  );\n};\n\nNotificationProvider.propTypes = {\n  children: PropTypes.node.isRequired,\n};\n\n/**\n * @name useNotifications\n * @description Hook to access notification context.\n * @returns {NotificationContextType} The notification context value.\n */\nexport const useNotifications = (): NotificationContextType => {\n  const context = useContext(NotificationContext);\n  if (context === undefined) {\n    throw new Error('useNotifications must be used within a NotificationProvider');\n  }\n  return context;\n};\n\n/**\n * @name formatTimeAgo\n * @description Utility function to format timestamp as \"time ago\" string.\n * @param {Date} timestamp - The timestamp to format.\n * @returns {string} The formatted time string.\n */\nexport const formatTimeAgo = (timestamp: Date): string => {\n  const now = new Date();\n  const diffInSeconds = Math.floor((now.getTime() - timestamp.getTime()) / 1000);\n\n  if (diffInSeconds < 60) {\n    return 'Just now';\n  } else if (diffInSeconds < 3600) {\n    const minutes = Math.floor(diffInSeconds / 60);\n    return `${minutes}m ago`;\n  } else if (diffInSeconds < 86400) {\n    const hours = Math.floor(diffInSeconds / 3600);\n    return `${hours}h ago`;\n  } else {\n    const days = Math.floor(diffInSeconds / 86400);\n    return `${days}d ago`;\n  }\n}; ","usedDeprecatedRules":[]},{"filePath":"/home/vonj/Github/Nexus/src/contexts/OnboardingContext.tsx","messages":[{"ruleId":"react-refresh/only-export-components","severity":1,"message":"Fast refresh only works when a file only exports components. Use a new file to share constants or functions between components.","line":83,"column":14,"nodeType":"Identifier","messageId":"namedExport","endLine":83,"endColumn":27}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { createContext, useContext, useState, useEffect, useCallback } from 'react';\nimport { useAuth } from './AuthContext';\n\ntype OnboardingStep = \n  | 'welcome'\n  | 'company_profile'\n  | 'connect_source'\n  | 'ask_ai';\n\ninterface OnboardingState {\n  steps: Record<OnboardingStep, boolean>;\n  isOpen: boolean;\n  isCompleted: boolean;\n}\n\ninterface OnboardingContextType extends OnboardingState {\n  completeStep: (step: OnboardingStep) => void;\n  toggleChecklist: () => void;\n  closeChecklist: () => void;\n}\n\nconst OnboardingContext = createContext<OnboardingContextType | undefined>(undefined);\n\nconst initialSteps: Record<OnboardingStep, boolean> = {\n  welcome: true, // The welcome screen is the first thing they see\n  company_profile: false,\n  connect_source: false,\n  ask_ai: false,\n};\n\nexport const OnboardingProvider = ({ children }: { children: React.ReactNode }) => {\n  const { user } = useAuth();\n  const [steps, setSteps] = useState<Record<OnboardingStep, boolean>>(() => {\n    try {\n      const savedState = localStorage.getItem(`onboarding_steps_${user?.id}`);\n      return savedState ? JSON.parse(savedState) : initialSteps;\n    } catch {\n      return initialSteps;\n    }\n  });\n\n  const [isOpen, setIsOpen] = useState(true);\n  \n  const isCompleted = Object.values(steps).every(Boolean);\n\n  useEffect(() => {\n    if (user?.id) {\n      localStorage.setItem(`onboarding_steps_${user.id}`, JSON.stringify(steps));\n    }\n    if (isCompleted) {\n      setIsOpen(false);\n    }\n  }, [steps, user?.id, isCompleted]);\n\n  const completeStep = useCallback((step: OnboardingStep) => {\n    setSteps(prev => ({ ...prev, [step]: true }));\n  }, []);\n\n  const toggleChecklist = () => setIsOpen(prev => !prev);\n  const closeChecklist = () => setIsOpen(false);\n\n  // Do not render the provider content if the user has completed onboarding\n  if (user?.onboardingCompleted) {\n    return <>{children}</>;\n  }\n\n  const value = {\n    steps,\n    isOpen,\n    isCompleted,\n    completeStep,\n    toggleChecklist,\n    closeChecklist,\n  };\n\n  return (\n    <OnboardingContext.Provider value={value}>\n      {children}\n    </OnboardingContext.Provider>\n  );\n};\n\nexport const useOnboarding = () => {\n  const context = useContext(OnboardingContext);\n  if (context === undefined) {\n    // Return a default/mock state for users who have completed onboarding\n    // This prevents errors when the provider is not rendered.\n    return {\n      steps: initialSteps,\n      isOpen: false,\n      isCompleted: true,\n      completeStep: () => {},\n      toggleChecklist: () => {},\n      closeChecklist: () => {},\n    };\n  }\n  return context;\n}; ","usedDeprecatedRules":[]},{"filePath":"/home/vonj/Github/Nexus/src/contexts/SystemContext.tsx","messages":[{"ruleId":"react-refresh/only-export-components","severity":1,"message":"Fast refresh only works when a file only exports components. Use a new file to share constants or functions between components.","line":151,"column":17,"nodeType":"Identifier","messageId":"namedExport","endLine":151,"endColumn":33}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { createContext, useContext, useState, useCallback, useEffect, ReactNode } from 'react';\n\n// --- Types ---\nexport interface IntegrationStatus {\n  id: string;\n  name: string;\n  status: 'active' | 'syncing' | 'error' | 'paused';\n  lastSync: string;\n}\n\nexport interface BusinessHealth {\n  score: number; // 0-100\n  trend: 'up' | 'down' | 'stable';\n  summary: string;\n}\n\nexport interface AIInsight {\n  id: string;\n  title: string;\n  description: string;\n  type: 'opportunity' | 'alert' | 'trend' | 'optimization';\n  impact: 'high' | 'medium' | 'low';\n  actionable: boolean;\n  createdAt: string;\n}\n\nexport interface SystemContextValue {\n  integrationStatus: IntegrationStatus[];\n  businessHealth: BusinessHealth;\n  aiInsights: AIInsight[];\n  loading: boolean;\n  refresh: () => Promise<void>;\n}\n\nconst SystemContext = createContext<SystemContextValue | undefined>(undefined);\n\n// --- Mock Data ---\nconst MOCK_INTEGRATIONS: IntegrationStatus[] = [\n  {\n    id: 'paypal',\n    name: 'PayPal',\n    status: 'active',\n    lastSync: new Date(Date.now() - 60 * 60 * 1000).toISOString(),\n  },\n  {\n    id: 'office-365',\n    name: 'Microsoft 365',\n    status: 'paused',\n    lastSync: new Date(Date.now() - 5 * 60 * 60 * 1000).toISOString(),\n  },\n  {\n    id: 'ninjarmm',\n    name: 'NinjaRMM',\n    status: 'error',\n    lastSync: new Date(Date.now() - 30 * 60 * 1000).toISOString(),\n  },\n];\n\nconst MOCK_BUSINESS_HEALTH: BusinessHealth = {\n  score: 78,\n  trend: 'up',\n  summary: 'Business health is improving, with strong revenue growth and stable operations.'\n};\n\nconst MOCK_AI_INSIGHTS: AIInsight[] = [\n  {\n    id: '1',\n    title: 'Revenue Growth Opportunity',\n    description: 'PayPal data shows 23% increase in transaction volume this month. Consider increasing inventory for top-selling products.',\n    type: 'opportunity',\n    impact: 'high',\n    actionable: true,\n    createdAt: new Date().toISOString(),\n  },\n  {\n    id: '2',\n    title: 'Email Response Time Optimization',\n    description: 'Microsoft 365 data indicates average email response time has increased by 40%. Consider setting up auto-responders.',\n    type: 'optimization',\n    impact: 'medium',\n    actionable: true,\n    createdAt: new Date().toISOString(),\n  },\n  {\n    id: '3',\n    title: 'System Health Alert',\n    description: 'NinjaRMM reports 3 devices with critical updates pending. Immediate action recommended.',\n    type: 'alert',\n    impact: 'high',\n    actionable: true,\n    createdAt: new Date().toISOString(),\n  },\n];\n\n// --- Stub Fetch Functions ---\nasync function fetchIntegrationStatus(): Promise<IntegrationStatus[]> {\n  // TODO: Replace with real fetch from Supabase or API\n  return new Promise((resolve) => setTimeout(() => resolve(MOCK_INTEGRATIONS), 400));\n}\n\nasync function fetchBusinessHealth(): Promise<BusinessHealth> {\n  // TODO: Replace with real fetch from Supabase or API\n  return new Promise((resolve) => setTimeout(() => resolve(MOCK_BUSINESS_HEALTH), 300));\n}\n\nasync function fetchAIInsights(): Promise<AIInsight[]> {\n  // TODO: Replace with real fetch from Supabase or API\n  return new Promise((resolve) => setTimeout(() => resolve(MOCK_AI_INSIGHTS), 350));\n}\n\n// --- Provider ---\nexport const SystemContextProvider = ({ children }: { children: ReactNode }) => {\n  const [integrationStatus, setIntegrationStatus] = useState<IntegrationStatus[]>([]);\n  const [businessHealth, setBusinessHealth] = useState<BusinessHealth>(MOCK_BUSINESS_HEALTH);\n  const [aiInsights, setAIInsights] = useState<AIInsight[]>([]);\n  const [loading, setLoading] = useState(true);\n\n  const refresh = useCallback(async () => {\n    setLoading(true);\n    const [integrations, health, insights] = await Promise.all([\n      fetchIntegrationStatus(),\n      fetchBusinessHealth(),\n      fetchAIInsights(),\n    ]);\n    setIntegrationStatus(integrations);\n    setBusinessHealth(health);\n    setAIInsights(insights);\n    setLoading(false);\n  }, []);\n\n  useEffect(() => {\n    refresh();\n  }, [refresh]);\n\n  const value: SystemContextValue = {\n    integrationStatus,\n    businessHealth,\n    aiInsights,\n    loading,\n    refresh,\n  };\n\n  return (\n    <SystemContext.Provider value={value}>\n      {children}\n    </SystemContext.Provider>\n  );\n};\n\n// --- Hook ---\nexport function useSystemContext() {\n  const ctx = useContext(SystemContext);\n  if (!ctx) throw new Error('useSystemContext must be used within a SystemContextProvider');\n  return ctx;\n} ","usedDeprecatedRules":[]},{"filePath":"/home/vonj/Github/Nexus/src/hooks/useIntegrationProviders.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":42,"column":17,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":42,"endColumn":20,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1424,1427],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1424,1427],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":54,"column":17,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":54,"endColumn":20,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1738,1741],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1738,1741],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { useM365Integration, type M365IntegrationState } from './useM365Integration';\nimport { googleWorkspaceService } from '@/lib/services/googleWorkspaceService';\nimport { useState, useEffect } from 'react';\n\ninterface ProviderState {\n  isConnected: boolean;\n  isConnecting: boolean;\n  error: Error | null;\n  connect: () => Promise<void>;\n  disconnect: () => Promise<void>;\n}\n\ninterface UseIntegrationProvidersReturn {\n  google: Omit<ProviderState, 'needsAttention'>;\n  microsoft: Omit<ProviderState, 'connect' | 'disconnect' | 'needsAttention'> & {\n      connect: M365IntegrationState['connect'];\n      disconnect: M365IntegrationState['disconnect'];\n      needsAttention: M365IntegrationState['needsAttention'];\n  };\n  isLoading: boolean;\n}\n\nexport const useIntegrationProviders = (): UseIntegrationProvidersReturn => {\n  // Microsoft 365\n  const { \n    isConnected: isM365Connected, \n    isConnecting: isM365Connecting,\n    needsAttention: m365NeedsAttention,\n    error: m365Error,\n    connect: connectM365,\n    disconnect: disconnectM365\n  } = useM365Integration();\n  \n  // Google Workspace\n  const [isGoogleConnected, setIsGoogleConnected] = useState(false);\n  const [isGoogleConnecting, setIsGoogleConnecting] = useState(true);\n  const [googleError, setGoogleError] = useState<Error | null>(null);\n\n  useEffect(() => {\n    try {\n      setIsGoogleConnected(googleWorkspaceService.isAuthenticated());\n    } catch (e: any) {\n      setGoogleError(e);\n    } finally {\n      setIsGoogleConnecting(false);\n    }\n  }, []);\n\n  const connectGoogle = async () => {\n    try {\n        setIsGoogleConnecting(true);\n        const authUrl = await googleWorkspaceService.initializeOAuth();\n        window.location.href = authUrl;\n    } catch (e: any) {\n        setGoogleError(e);\n    } finally {\n        setIsGoogleConnecting(false);\n    }\n  };\n\n  const disconnectGoogle = async () => {\n    // Note: googleWorkspaceService does not have a disconnect method yet.\n    // This would need to be implemented to revoke token and clear localStorage.\n    console.log(\"Disconnecting from Google is not yet implemented.\");\n  };\n\n  return {\n    google: {\n      isConnected: isGoogleConnected,\n      isConnecting: isGoogleConnecting,\n      error: googleError,\n      connect: connectGoogle,\n      disconnect: disconnectGoogle\n    },\n    microsoft: {\n      isConnected: isM365Connected,\n      isConnecting: isM365Connecting,\n      needsAttention: m365NeedsAttention,\n      error: m365Error,\n      connect: connectM365,\n      disconnect: disconnectM365\n    },\n    isLoading: isM365Connecting || isGoogleConnecting,\n  };\n}; ","usedDeprecatedRules":[]},{"filePath":"/home/vonj/Github/Nexus/src/hooks/useM365Integration.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":73,"column":17,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":73,"endColumn":20,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2424,2427],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2424,2427],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":115,"column":17,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":115,"endColumn":20,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3559,3562],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3559,3562],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":145,"column":17,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":145,"endColumn":20,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[4315,4318],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[4315,4318],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { useState, useEffect, useCallback } from 'react';\nimport { useAuth } from '@/contexts/AuthContext';\nimport { supabase } from '@/lib/core/supabase';\nimport { microsoftGraphService } from '@/lib/services/microsoftGraphService';\nimport { ProviderState } from '@microsoft/mgt-element';\nimport { useOrganizationStore } from '@/lib/stores/organizationStore';\n\nexport interface M365IntegrationState {\n  isConnected: boolean;\n  isConnecting: boolean;\n  needsAttention: boolean;\n  error: Error | null;\n  connect: () => Promise<void>;\n  disconnect: () => Promise<void>;\n}\n\nexport const useM365Integration = (): M365IntegrationState => {\n  const { user } = useAuth();\n  const activeOrgId = useOrganizationStore((state) => state.activeOrgId);\n  const [isConnected, setIsConnected] = useState(false);\n  const [isConnecting, setIsConnecting] = useState(true);\n  const [needsAttention, setNeedsAttention] = useState(false);\n  const [error, setError] = useState<Error | null>(null);\n\n  const checkDbConnection = useCallback(async () => {\n    if (!user || !activeOrgId) {\n      setIsConnecting(false);\n      return;\n    }\n\n    try {\n      // First, get the integration ID for Office 365\n      const { data: integration, error: integrationError } = await supabase\n        .from('integrations')\n        .select('id')\n        .eq('slug', 'office-365')\n        .single();\n\n      if (integrationError || !integration) {\n        setIsConnected(false);\n        if (integrationError && integrationError.code !== 'PGRST116') {\n          throw integrationError;\n        }\n        // If the integration doesn't exist in the master list, we can't be connected.\n        setIsConnecting(false);\n        return;\n      }\n\n      const { data, error: dbError } = await supabase\n        .from('user_integrations')\n        .select('id, status, credentials, updated_at')\n        .eq('user_id', user.id)\n        .eq('company_id', activeOrgId)\n        .eq('integration_id', integration.id)\n        .single();\n\n      if (dbError || !data) {\n        setIsConnected(false);\n        if (dbError && dbError.code !== 'PGRST116') { // Ignore 'no rows' error\n          throw dbError;\n        }\n        return;\n      }\n\n      if (data.status === 'active' && data.credentials) {\n        setIsConnected(true);\n      } else {\n        setIsConnected(false);\n        if (data.status !== 'active') {\n            setNeedsAttention(true);\n        }\n      }\n    } catch (e: any) {\n      setError(e);\n      setIsConnected(false);\n    } finally {\n      setIsConnecting(false);\n    }\n  }, [user, activeOrgId]);\n\n\n  useEffect(() => {\n    setIsConnecting(true);\n    checkDbConnection();\n    \n    const handleStateChange = () => {\n      const providerState = microsoftGraphService.getProviderState();\n      if (providerState === ProviderState.SignedOut) {\n        setIsConnected(false);\n      }\n    };\n    \n    microsoftGraphService.onStateChange(handleStateChange);\n\n    return () => {\n      microsoftGraphService.removeStateChange(handleStateChange);\n    };\n\n  }, [checkDbConnection]);\n\n  const connect = async () => {\n    setIsConnecting(true);\n    setError(null);\n    try {\n      await microsoftGraphService.signIn();\n      const providerState = microsoftGraphService.getProviderState();\n      \n      if (providerState === ProviderState.SignedIn && activeOrgId) {\n        await microsoftGraphService.saveIntegrationToken(activeOrgId);\n        setIsConnected(true);\n      } else if (providerState !== ProviderState.SignedIn) {\n        throw new Error('M365 sign-in was not completed.');\n      }\n\n    } catch (e: any) {\n      setError(e);\n      setIsConnected(false);\n    } finally {\n      setIsConnecting(false);\n    }\n  };\n\n  const disconnect = async () => {\n    setIsConnecting(true);\n    setError(null);\n    try {\n      await microsoftGraphService.signOut();\n      if (user && activeOrgId) {\n        const { data: integration } = await supabase\n          .from('integrations')\n          .select('id')\n          .eq('slug', 'office-365')\n          .single();\n\n        if (integration) {\n          await supabase\n            .from('user_integrations')\n            .delete()\n            .eq('user_id', user.id)\n            .eq('company_id', activeOrgId)\n            .eq('integration_id', integration.id);\n        }\n      }\n      setIsConnected(false);\n    } catch (e: any) {\n      setError(e);\n    } finally {\n      setIsConnecting(false);\n    }\n  };\n\n  return { isConnected, isConnecting, needsAttention, error, connect, disconnect };\n}; ","usedDeprecatedRules":[]},{"filePath":"/home/vonj/Github/Nexus/src/hooks/useRealtimeTable.ts","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'payload' is defined but never used.","line":11,"column":9,"nodeType":null,"messageId":"unusedVar","endLine":11,"endColumn":16}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { useEffect } from \"react\";\nimport { supabase } from \"@/lib/core/supabase\";\n\nexport function useRealtimeTable(table: \"Recent\" | \"Pin\", onChange: () => void) {\n  useEffect(() => {\n    const channel = supabase\n      .channel(`realtime:${table}`)\n      .on(\n        \"postgres_changes\",\n        { event: \"*\", schema: \"public\", table },\n        payload => {\n          onChange();\n        }\n      )\n      .subscribe();\n\n    return () => {\n      supabase.removeChannel(channel);\n    };\n  }, [table, onChange]);\n} ","usedDeprecatedRules":[]},{"filePath":"/home/vonj/Github/Nexus/src/hooks/useWidgetAnalytics.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":6,"column":18,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":6,"endColumn":21,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[187,190],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[187,190],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":14,"column":42,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":14,"endColumn":45,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[403,406],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[403,406],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { supabase } from \"@/lib/core/supabase\";\n\nexport type WidgetEventType = 'view' | 'click' | 'dismiss' | 'action' | 'custom';\n\nexport interface WidgetEventPayload {\n  [key: string]: any;\n}\n\nexport function useWidgetAnalytics() {\n  async function logWidgetEvent(\n    widget_id: string,\n    event_type: WidgetEventType,\n    event_payload?: WidgetEventPayload\n  ): Promise<{ success: boolean; error?: any }> {\n    const { error } = await supabase.from('WidgetEvent').insert([\n      {\n        widget_id,\n        event_type,\n        event_payload: event_payload || null,\n      },\n    ]);\n    if (error) {\n      // Optionally log error to a monitoring service\n      return { success: false, error };\n    }\n    return { success: true };\n  }\n\n  return { logWidgetEvent };\n} ","usedDeprecatedRules":[]},{"filePath":"/home/vonj/Github/Nexus/src/layouts/AdminLayout.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/vonj/Github/Nexus/src/layouts/HelpLayout.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/vonj/Github/Nexus/src/lib/__tests__/n8nWorkflowBuilder.test.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/vonj/Github/Nexus/src/lib/ai/agentRegistry.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/vonj/Github/Nexus/src/lib/ai/aiAgentWithTools.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":23,"column":32,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":23,"endColumn":35,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[641,644],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[641,644],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":26,"column":34,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":26,"endColumn":37,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[709,712],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[709,712],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":26,"column":73,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":26,"endColumn":76,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[748,751],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[748,751],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'context' is defined but never used.","line":336,"column":27,"nodeType":null,"messageId":"unusedVar","endLine":336,"endColumn":34},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'context' is defined but never used.","line":374,"column":27,"nodeType":null,"messageId":"unusedVar","endLine":374,"endColumn":34},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":376,"column":50,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":376,"endColumn":53,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[12094,12097],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[12094,12097],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":412,"column":50,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":412,"endColumn":53,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[13259,13262],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[13259,13262],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":456,"column":37,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":456,"endColumn":40,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[14677,14680],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[14677,14680],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\n * aiAgentWithTools.ts\n * Tool-Enabled AI Agent System\n * \n * Combines OpenAI function calling with n8n workflows to give Nex:\n * - Real business data access\n * - Action execution capabilities\n * - Knowledge from integrated systems\n * - Workflow automation powers\n */\n\nimport { n8nService } from './n8nService';\nimport { supabase } from './core/supabase';\nimport type { Agent } from './agentRegistry';\nimport { listPayPalTxns } from '@/lib/ai/tools/paypal';\n\n// Tool definitions for OpenAI function calling\nexport interface AITool {\n  name: string;\n  description: string;\n  parameters: {\n    type: string;\n    properties: Record<string, any>;\n    required: string[];\n  };\n  handler: (args: Record<string, any>, context: ToolContext) => Promise<any>;\n}\n\nexport interface ToolContext {\n  userId: string;\n  sessionId: string;\n  conversationId: string;\n  agent: Agent;\n  currentStep?: string;\n  orgId?: string;\n}\n\n// Business Intelligence Tools\nexport const businessIntelligenceTools: AITool[] = [\n  {\n    name: \"get_sales_metrics\",\n    description: \"Get current sales performance metrics including pipeline, deals, and revenue data\",\n    parameters: {\n      type: \"object\",\n      properties: {\n        timeframe: {\n          type: \"string\",\n          enum: [\"today\", \"week\", \"month\", \"quarter\", \"year\"],\n          description: \"The time period for the metrics\"\n        },\n        metric_type: {\n          type: \"string\",\n          enum: [\"pipeline\", \"closed_deals\", \"revenue\", \"forecast\", \"team_performance\"],\n          description: \"Specific type of sales metric to retrieve\"\n        }\n      },\n      required: [\"timeframe\", \"metric_type\"]\n    },\n    handler: async (args, context) => {\n      // Trigger n8n workflow to get sales data from CRM\n      const result = await n8nService.salesAction('pipeline', {\n        timeframe: args.timeframe,\n        metric_type: args.metric_type,\n        userId: context.userId\n      });\n      \n      if (result.success) {\n        return {\n          data: result.data,\n          summary: `Retrieved ${args.metric_type} data for ${args.timeframe}: ${JSON.stringify(result.data)}`\n        };\n      } else {\n        return {\n          error: result.error,\n          fallback: \"I'm having trouble accessing your sales data right now. Please check your CRM integration.\"\n        };\n      }\n    }\n  },\n  \n  {\n    name: \"get_financial_overview\",\n    description: \"Get financial overview including revenue, expenses, and cash flow\",\n    parameters: {\n      type: \"object\",\n      properties: {\n        report_type: {\n          type: \"string\",\n          enum: [\"revenue\", \"expenses\", \"cash_flow\", \"profit_loss\", \"balance_sheet\"],\n          description: \"Type of financial report to generate\"\n        },\n        period: {\n          type: \"string\",\n          enum: [\"current_month\", \"last_month\", \"quarter\", \"year_to_date\"],\n          description: \"Reporting period\"\n        }\n      },\n      required: [\"report_type\", \"period\"]\n    },\n    handler: async (args, context) => {\n      const result = await n8nService.financeAction('report', {\n        report_type: args.report_type,\n        period: args.period,\n        userId: context.userId\n      });\n      \n      return result.success \n        ? { data: result.data, summary: `Financial ${args.report_type} report for ${args.period}` }\n        : { error: \"Unable to generate financial report\", fallback: \"Please check your accounting system integration.\" };\n    }\n  },\n\n  {\n    name: \"analyze_business_metrics\",\n    description: \"Analyze key business metrics and provide insights using n8n data processing workflows\",\n    parameters: {\n      type: \"object\",\n      properties: {\n        metrics: {\n          type: \"array\",\n          items: {\n            type: \"string\",\n            enum: [\"customer_acquisition\", \"churn_rate\", \"lifetime_value\", \"growth_rate\", \"operational_efficiency\"]\n          },\n          description: \"List of metrics to analyze\"\n        },\n        comparison_period: {\n          type: \"string\",\n          enum: [\"month_over_month\", \"quarter_over_quarter\", \"year_over_year\"],\n          description: \"Comparison timeframe for analysis\"\n        }\n      },\n      required: [\"metrics\"]\n    },\n    handler: async (args, context) => {\n      // Use n8n workflow to aggregate data from multiple sources\n      const result = await n8nService.triggerWorkflow('data-analysis-webhook', {\n        metrics: args.metrics,\n        comparison_period: args.comparison_period || 'month_over_month',\n        userId: context.userId\n      });\n      \n      return result.success \n        ? { insights: result.data, summary: `Analyzed ${args.metrics.join(', ')} metrics` }\n        : { error: \"Analysis failed\", fallback: \"I'll provide general business insights instead.\" };\n    }\n  },\n\n  {\n    name: \"listPayPalTxns\",\n    description: \"Returns recent PayPal transactions for this organisation (Finance)\",\n    parameters: {\n      type: \"object\",\n      properties: {\n        limit: {\n          type: \"number\",\n          description: \"Maximum number of transactions to return\",\n          default: 50\n        }\n      },\n      required: []\n    },\n    handler: async (args, context) => {\n      const rows = await listPayPalTxns({ orgId: context.orgId as string, limit: args.limit || 50 });\n      return { rows, summary: `Fetched ${rows.length} PayPal transactions` };\n    }\n  }\n];\n\n// Action Execution Tools\nexport const actionTools: AITool[] = [\n  {\n    name: \"create_task_or_project\",\n    description: \"Create a new task, project, or workflow in your project management system\",\n    parameters: {\n      type: \"object\",\n      properties: {\n        title: {\n          type: \"string\",\n          description: \"Title of the task or project\"\n        },\n        description: {\n          type: \"string\",\n          description: \"Detailed description\"\n        },\n        priority: {\n          type: \"string\",\n          enum: [\"low\", \"medium\", \"high\", \"urgent\"],\n          description: \"Priority level\"\n        },\n        department: {\n          type: \"string\",\n          enum: [\"sales\", \"marketing\", \"finance\", \"operations\", \"general\"],\n          description: \"Responsible department\"\n        },\n        due_date: {\n          type: \"string\",\n          description: \"Due date in YYYY-MM-DD format\"\n        }\n      },\n      required: [\"title\", \"department\"]\n    },\n    handler: async (args, context) => {\n      const result = await n8nService.operationsAction('automate', {\n        action: 'create_task',\n        task_data: args,\n        created_by: context.userId\n      });\n      \n      return result.success \n        ? { task_id: result.data?.task_id, summary: `Created ${args.priority || 'medium'} priority task: ${args.title}` }\n        : { error: \"Failed to create task\", fallback: \"I've noted this for manual follow-up.\" };\n    }\n  },\n\n  {\n    name: \"send_team_notification\",\n    description: \"Send notifications or updates to team members or departments\",\n    parameters: {\n      type: \"object\",\n      properties: {\n        recipients: {\n          type: \"array\",\n          items: { type: \"string\" },\n          description: \"List of recipients (email addresses or department names)\"\n        },\n        subject: {\n          type: \"string\",\n          description: \"Notification subject\"\n        },\n        message: {\n          type: \"string\",\n          description: \"Message content\"\n        },\n        urgency: {\n          type: \"string\",\n          enum: [\"low\", \"normal\", \"high\", \"urgent\"],\n          description: \"Urgency level\"\n        }\n      },\n      required: [\"recipients\", \"subject\", \"message\"]\n    },\n    handler: async (args, context) => {\n      const result = await n8nService.triggerWorkflow('team-notification-webhook', {\n        recipients: args.recipients,\n        subject: args.subject,\n        message: args.message,\n        urgency: args.urgency || 'normal',\n        sent_by: context.userId\n      });\n      \n      return result.success \n        ? { message_id: result.data?.message_id, summary: `Sent notification to ${args.recipients.length} recipients` }\n        : { error: \"Failed to send notification\", fallback: \"Please send this manually through your communication platform.\" };\n    }\n  },\n\n  {\n    name: \"schedule_meeting\",\n    description: \"Schedule meetings with team members or external contacts\",\n    parameters: {\n      type: \"object\",\n      properties: {\n        attendees: {\n          type: \"array\",\n          items: { type: \"string\" },\n          description: \"List of attendee email addresses\"\n        },\n        title: {\n          type: \"string\",\n          description: \"Meeting title\"\n        },\n        agenda: {\n          type: \"string\",\n          description: \"Meeting agenda or description\"\n        },\n        duration_minutes: {\n          type: \"number\",\n          description: \"Meeting duration in minutes\"\n        },\n        preferred_time: {\n          type: \"string\",\n          description: \"Preferred time in natural language (e.g., 'tomorrow 2pm', 'next week')\"\n        }\n      },\n      required: [\"attendees\", \"title\", \"duration_minutes\"]\n    },\n    handler: async (args, context) => {\n      const result = await n8nService.triggerWorkflow('calendar-integration-webhook', {\n        meeting_data: args,\n        organizer: context.userId,\n        action: 'schedule_meeting'\n      });\n      \n      return result.success \n        ? { meeting_id: result.data?.meeting_id, summary: `Scheduled meeting: ${args.title}` }\n        : { error: \"Failed to schedule meeting\", fallback: \"Please schedule this manually in your calendar.\" };\n    }\n  }\n];\n\n// Content and Knowledge Tools\nexport const contentTools: AITool[] = [\n  {\n    name: \"generate_business_content\",\n    description: \"Generate business content like emails, proposals, reports, or blog posts using n8n content workflows\",\n    parameters: {\n      type: \"object\",\n      properties: {\n        content_type: {\n          type: \"string\",\n          enum: [\"email\", \"proposal\", \"report\", \"blog_post\", \"social_media\", \"presentation\"],\n          description: \"Type of content to generate\"\n        },\n        topic: {\n          type: \"string\",\n          description: \"Main topic or subject\"\n        },\n        tone: {\n          type: \"string\",\n          enum: [\"professional\", \"friendly\", \"persuasive\", \"informative\", \"creative\"],\n          description: \"Desired tone of the content\"\n        },\n        target_audience: {\n          type: \"string\",\n          description: \"Target audience (e.g., 'customers', 'investors', 'team')\"\n        },\n        length: {\n          type: \"string\",\n          enum: [\"short\", \"medium\", \"long\"],\n          description: \"Desired content length\"\n        }\n      },\n      required: [\"content_type\", \"topic\"]\n    },\n    handler: async (args, context) => {\n      const result = await n8nService.createContent(\n        args.content_type as 'blog' | 'social' | 'email',\n        `Create ${args.content_type} about: ${args.topic}`,\n        {\n          tone: args.tone || 'professional',\n          target_audience: args.target_audience,\n          length: args.length || 'medium'\n        }\n      );\n      \n      return result.success \n        ? { content: result.data?.content, summary: `Generated ${args.content_type}: ${args.topic}` }\n        : { error: \"Content generation failed\", fallback: \"I can provide you with an outline to write this manually.\" };\n    }\n  },\n\n  {\n    name: \"search_company_knowledge\",\n    description: \"Search through company documents, policies, and knowledge base\",\n    parameters: {\n      type: \"object\",\n      properties: {\n        query: {\n          type: \"string\",\n          description: \"Search query or question\"\n        },\n        document_types: {\n          type: \"array\",\n          items: {\n            type: \"string\",\n            enum: [\"policies\", \"procedures\", \"templates\", \"reports\", \"contracts\", \"all\"]\n          },\n          description: \"Types of documents to search\"\n        }\n      },\n      required: [\"query\"]\n    },\n    handler: async (args, context) => {\n      // Search company knowledge base through Supabase or n8n workflow\n      const { data, error } = await (supabase as any)\n        .from('company_documents')\n        .select('*')\n        .textSearch('content', args.query)\n        .limit(5);\n      \n      if (error) {\n        return { error: \"Knowledge search failed\", fallback: \"Let me help you find this information manually.\" };\n      }\n      \n      return {\n        results: data,\n        summary: `Found ${data?.length || 0} relevant documents for: ${args.query}`\n      };\n    }\n  },\n\n  {\n    name: \"develop_business_plan\",\n    description: \"Interactively develop a concise business plan (mission, vision, goals, target market, value proposition) for the user's company when missing. If fields already exist, refine them.\",\n    parameters: {\n      type: \"object\",\n      properties: {\n        focus_area: {\n          type: \"string\",\n          description: \"Optional specific area to work on (e.g., 'mission', 'vision', 'goals'). Leave blank for full plan.\"\n        }\n      },\n      required: []\n    },\n    handler: async (args, context) => {\n      // Call edge function to generate or refine plan\n      if (!context.orgId) {\n        return { error: \"Company not found\" };\n      }\n\n      const { data, error } = await (supabase as any).functions.invoke('ai_generate_business_plan', {\n        body: { company_id: context.orgId, focus_area: args.focus_area }\n      });\n\n      if (error) {\n        return { error: error.message || 'Plan generation failed' };\n      }\n\n      return {\n        business_plan: data?.business_plan_md,\n        summary: 'Business plan generated and stored.'\n      };\n    }\n  }\n];\n\n// Workflow Automation Tools\nexport const automationTools: AITool[] = [\n  {\n    name: \"create_custom_workflow\",\n    description: \"Create a custom n8n workflow for specific business needs using the Nexus Builder\",\n    parameters: {\n      type: \"object\",\n      properties: {\n        workflow_description: {\n          type: \"string\",\n          description: \"Detailed description of what the workflow should do\"\n        },\n        trigger_type: {\n          type: \"string\",\n          enum: [\"webhook\", \"schedule\", \"email\", \"form_submission\", \"chat_command\"],\n          description: \"How the workflow should be triggered\"\n        },\n        integrations_needed: {\n          type: \"array\",\n          items: { type: \"string\" },\n          description: \"List of systems to integrate (e.g., 'hubspot', 'slack', 'gmail')\"\n        }\n      },\n      required: [\"workflow_description\"]\n    },\n    handler: async (args, context) => {\n      const result = await n8nService.generateWorkflow(\n        args.workflow_description,\n        context.agent.department as any\n      );\n      \n      return result.success \n        ? { workflow_id: result.data?.workflow_id, summary: `Created workflow: ${args.workflow_description}` }\n        : { error: \"Workflow creation failed\", fallback: \"I can help you plan this workflow manually.\" };\n    }\n  }\n];\n\n// Combined tool registry\nexport const allTools: AITool[] = [\n  ...businessIntelligenceTools,\n  ...actionTools,\n  ...contentTools,\n  ...automationTools\n];\n\n// Enhanced Chat Service with Tools\nexport class ToolEnabledAgent {\n  private tools: Map<string, AITool> = new Map();\n\n  constructor(tools: AITool[] = allTools) {\n    tools.forEach(tool => this.tools.set(tool.name, tool));\n  }\n\n  async sendMessageWithTools(\n    conversationId: string,\n    message: string,\n    agent: Agent,\n    sessionId: string,\n    context?: Partial<ToolContext>\n  ) {\n    try {\n      // Get user for context\n      const { data: { user } } = await supabase.auth.getUser();\n      if (!user) throw new Error('User not authenticated');\n\n      const toolContext: ToolContext = {\n        userId: user.id,\n        sessionId,\n        conversationId,\n        agent,\n        ...context,\n        orgId: (await supabase\n          .from('user_profiles')\n          .select('company_id')\n          .eq('id', user.id)\n          .maybeSingle()).data?.company_id ?? undefined,\n      };\n\n      // Enhanced system prompt with tool awareness and cross-platform context\n      const toolAwareSystemPrompt = `${agent.systemPrompt}\n\nCROSS-PLATFORM BUSINESS CONTEXT:\nYou have access to real-time data from all connected business platforms. This gives you unprecedented insight into:\n\nINTEGRATED INTELLIGENCE:\n- HubSpot CRM: Live sales pipeline, deal velocity, customer interactions\n- Cloudflare Analytics: Website performance, security threats, global traffic patterns  \n- Google Workspace: Email volume, meeting patterns, document collaboration\n- Marcoby Cloud: Infrastructure utilization, cost optimization, system health\n- PayPal: Transaction patterns, revenue trends, payment analytics\n\nAI CORRELATION INSIGHTS:\n- Cross-platform pattern recognition (e.g., \"High email volume → 23% increase in deal velocity\")\n- Predictive analytics (e.g., \"Current trends suggest 34% Q1 lead increase\")\n- Proactive recommendations (e.g., \"Infrastructure scaling needed by month-end\")\n\nCONTEXTUAL DECISION MAKING:\nWhen responding to queries, consider:\n1. Current business state across all platforms\n2. Historical patterns and correlations\n3. Predictive insights and trends\n4. Resource utilization and capacity\n5. Team productivity and collaboration patterns\n\nINTELLIGENT ROUTING:\n- If query involves sales metrics → Use HubSpot data context\n- If query involves website/performance → Reference Cloudflare insights\n- If query involves team productivity → Include Google Workspace patterns\n- If query involves infrastructure → Consider Marcoby Cloud utilization\n- If query involves financial data → Incorporate PayPal transaction insights\n\nTOOL CAPABILITIES:\nYou have access to real business tools and data through n8n workflows. You can:\n\nBUSINESS INTELLIGENCE:\n- Get real sales metrics, financial data, and business analytics\n- Analyze performance trends and provide data-driven insights\n- Access live data from CRM, accounting, and other business systems\n\nACTIONS:\n- Create tasks and projects in your project management system\n- Schedule meetings and send team notifications\n- Execute business processes and workflows\n\nCONTENT & KNOWLEDGE:\n- Generate business content (emails, reports, proposals)\n- Search company knowledge base and documents\n- Create marketing materials and communications\n\nAUTOMATION:\n- Build custom workflows for specific business needs\n- Integrate different business systems\n- Automate repetitive processes\n\nCONTEXTUAL INTELLIGENCE EXAMPLES:\n- \"Based on your Cloudflare data showing 180ms response time and current HubSpot pipeline of $245K, I recommend optimizing your landing pages before the Q1 marketing push.\"\n- \"Your Google Workspace shows 12h/week in meetings and Marcoby Cloud indicates 72% server utilization - perfect time to implement that automation workflow we discussed.\"\n- \"PayPal transactions show a 15% increase this month while HubSpot conversion rate is at 28% - your sales team is performing exceptionally well.\"\n\nIMPORTANT: When you need to access real data or perform actions, use the available tools. Always explain what you're doing when using tools. Reference cross-platform insights to provide more intelligent, contextual responses.\n\nAvailable tools: ${Array.from(this.tools.keys()).join(', ')}`;\n\n      // Call OpenAI with function calling enabled\n      const openaiRequest = {\n        model: 'o3-mini-high',\n        messages: [\n          { role: 'system', content: toolAwareSystemPrompt },\n          { role: 'user', content: message }\n        ],\n        functions: Array.from(this.tools.values()).map(tool => ({\n          name: tool.name,\n          description: tool.description,\n          parameters: tool.parameters\n        })),\n        function_call: 'auto'\n      };\n\n      const response = await fetch('https://api.openai.com/v1/chat/completions', {\n        method: 'POST',\n        headers: {\n          'Authorization': `Bearer ${import.meta.env.VITE_OPENAI_API_KEY}`,\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify(openaiRequest),\n      });\n\n      const completion = await response.json();\n      const assistantMessage = completion.choices[0].message;\n\n      // Handle function calls\n      if (assistantMessage.function_call) {\n        const toolName = assistantMessage.function_call.name;\n        const toolArgs = JSON.parse(assistantMessage.function_call.arguments);\n        const tool = this.tools.get(toolName);\n\n        if (tool) {\n          console.log(`🔧 Executing tool: ${toolName}`, toolArgs);\n          \n          try {\n            const toolResult = await tool.handler(toolArgs, toolContext);\n            \n            // Send follow-up message with tool results\n            const followUpRequest = {\n              model: 'o3',\n              messages: [\n                { role: 'system', content: toolAwareSystemPrompt },\n                { role: 'user', content: message },\n                assistantMessage,\n                {\n                  role: 'function',\n                  name: toolName,\n                  content: JSON.stringify(toolResult)\n                }\n              ]\n            };\n\n            const followUpResponse = await fetch('https://api.openai.com/v1/chat/completions', {\n              method: 'POST',\n              headers: {\n                'Authorization': `Bearer ${import.meta.env.VITE_OPENAI_API_KEY}`,\n                'Content-Type': 'application/json',\n              },\n              body: JSON.stringify(followUpRequest),\n            });\n\n            const followUpCompletion = await followUpResponse.json();\n            const finalMessage = followUpCompletion.choices[0].message.content;\n\n            return {\n              success: true,\n              content: finalMessage,\n              toolUsed: toolName,\n              toolResult: toolResult,\n              model: 'gpt-4-with-tools'\n            };\n          } catch (toolError) {\n            console.error(`Tool execution failed: ${toolName}`, toolError);\n            return {\n              success: true,\n              content: `I attempted to ${tool.description.toLowerCase()} but encountered an issue. Let me help you with this manually instead. ${assistantMessage.content || ''}`,\n              toolUsed: toolName,\n              toolError: toolError,\n              model: 'gpt-4-with-tools'\n            };\n          }\n        }\n      }\n\n      // No function call - return regular response\n      return {\n        success: true,\n        content: assistantMessage.content,\n        model: 'gpt-4-with-tools'\n      };\n\n    } catch (error) {\n      console.error('Tool-enabled agent error:', error);\n      throw error;\n    }\n  }\n\n  getAvailableTools(): string[] {\n    return Array.from(this.tools.keys());\n  }\n\n  getToolDescription(toolName: string): string | undefined {\n    return this.tools.get(toolName)?.description;\n  }\n}\n\n// Export configured instance\nexport const toolEnabledAgent = new ToolEnabledAgent(); ","usedDeprecatedRules":[]},{"filePath":"/home/vonj/Github/Nexus/src/lib/ai/assistant/supervisor.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/vonj/Github/Nexus/src/lib/ai/assistant/types.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":7,"column":45,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":7,"endColumn":48,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[156,159],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[156,159],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":19,"column":29,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":19,"endColumn":32,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[540,543],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[540,543],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"// Types for AI assistant\n\nexport interface ActionCard {\n  id: string;\n  title: string;\n  description?: string;\n  buttons?: Array<{ label: string; payload: any }>;\n  formFields?: Array<{ name: string; type: string; required?: boolean }>;\n  approvalRequired?: boolean;\n}\n\nexport interface AgentResponse {\n  content: string;\n  actions?: ActionCard[];\n  confidence: number;       // 0-1\n  clarificationNeeded?: boolean;\n  reasoning?: string;\n  routeToAgentId?: string; // suggested specialist to route conversation\n  metadata?: Record<string, any>; // Additional context and performance metrics\n} ","usedDeprecatedRules":[]},{"filePath":"/home/vonj/Github/Nexus/src/lib/ai/businessAdvisor.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":180,"column":51,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":180,"endColumn":54,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[6977,6980],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[6977,6980],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { businessProfileService } from '@/lib/business/businessProfileService';\n\nexport interface BusinessAdvice {\n  category: 'revenue' | 'operations' | 'growth' | 'risk' | 'strategy' | 'efficiency';\n  priority: 'low' | 'medium' | 'high' | 'critical';\n  title: string;\n  description: string;\n  reasoning: string;\n  actionSteps: string[];\n  expectedOutcome: string;\n  timeframe: string;\n  confidence: number;\n}\n\nexport class BusinessAdvisor {\n  private static instance: BusinessAdvisor;\n  \n  public static getInstance(): BusinessAdvisor {\n    if (!BusinessAdvisor.instance) {\n      BusinessAdvisor.instance = new BusinessAdvisor();\n    }\n    return BusinessAdvisor.instance;\n  }\n\n  async getBusinessAdvice(orgId: string, query?: string): Promise<BusinessAdvice[]> {\n    const profile = await businessProfileService.getBusinessProfile(orgId);\n    if (!profile) {\n      return [{\n        category: 'strategy',\n        priority: 'high',\n        title: 'Complete Business Profile Setup',\n        description: 'Set up your business profile to receive personalized advice',\n        reasoning: 'Nexus needs to understand your business to provide relevant insights',\n        actionSteps: ['Complete the business profile setup wizard'],\n        expectedOutcome: 'Receive personalized business advice and insights',\n        timeframe: '30 minutes',\n        confidence: 100\n      }];\n    }\n\n    const advice: BusinessAdvice[] = [];\n\n    // Revenue optimization advice\n    if (profile.company_size === 'solopreneur' && profile.total_clients > 20) {\n      advice.push({\n        category: 'growth',\n        priority: 'high',\n        title: 'Consider Team Expansion',\n        description: 'Your client base suggests you\\'re ready to scale beyond solo operations',\n        reasoning: `With ${profile.total_clients} clients as a solopreneur, you're likely hitting capacity limits`,\n        actionSteps: [\n          'Calculate current capacity utilization',\n          'Identify which tasks could be delegated',\n          'Create job descriptions for first hire',\n          'Set up hiring process and onboarding'\n        ],\n        expectedOutcome: 'Increased capacity to serve more clients and grow revenue',\n        timeframe: '3-6 months',\n        confidence: 85\n      });\n    }\n\n    // Revenue stream diversification\n    if (profile.revenue_streams && profile.revenue_streams.length < 2) {\n      advice.push({\n        category: 'revenue',\n        priority: 'medium',\n        title: 'Diversify Revenue Streams',\n        description: 'Reduce business risk by developing multiple revenue sources',\n        reasoning: 'Single revenue streams create vulnerability to market changes',\n        actionSteps: [\n          'Analyze current service offerings for expansion opportunities',\n          'Consider recurring revenue models (retainers, subscriptions)',\n          'Explore passive income opportunities (training, digital products)',\n          'Test new revenue streams with existing clients'\n        ],\n        expectedOutcome: 'More stable and predictable revenue',\n        timeframe: '6-12 months',\n        confidence: 75\n      });\n    }\n\n    // Operational efficiency\n    if (profile.operational_challenges && profile.operational_challenges.length > 0) {\n      advice.push({\n        category: 'efficiency',\n        priority: 'medium',\n        title: 'Address Operational Challenges',\n        description: `Focus on resolving: ${profile.operational_challenges.slice(0, 2).join(', ')}`,\n        reasoning: 'Operational inefficiencies limit growth and profitability',\n        actionSteps: [\n          'Prioritize challenges by impact and effort',\n          'Implement automation where possible',\n          'Standardize recurring processes',\n          'Consider technology solutions'\n        ],\n        expectedOutcome: 'Improved efficiency and reduced operational stress',\n        timeframe: '2-4 months',\n        confidence: 80\n      });\n    }\n\n    // Customer concentration risk\n    if (profile.customer_segments && profile.customer_segments.length > 0) {\n      const topSegment = profile.customer_segments\n        .sort((a, b) => b.revenue_contribution - a.revenue_contribution)[0];\n      \n      if (topSegment.revenue_contribution > 60) {\n        advice.push({\n          category: 'risk',\n          priority: 'high',\n          title: 'Reduce Customer Concentration Risk',\n          description: `${topSegment.revenue_contribution}% revenue dependency on ${topSegment.name} is risky`,\n          reasoning: 'High concentration in one customer segment creates business vulnerability',\n          actionSteps: [\n            'Identify adjacent market segments to target',\n            'Develop marketing strategies for new segments',\n            'Adapt service offerings for broader appeal',\n            'Set target of <50% revenue from any single segment'\n          ],\n          expectedOutcome: 'More resilient business with diversified customer base',\n          timeframe: '6-12 months',\n          confidence: 90\n        });\n      }\n    }\n\n    // Goal alignment advice\n    if (profile.short_term_goals && profile.short_term_goals.length > 0) {\n      advice.push({\n        category: 'strategy',\n        priority: 'medium',\n        title: 'Track Goal Progress',\n        description: 'Implement systems to monitor progress on your short-term goals',\n        reasoning: 'Goal tracking increases achievement probability by 42%',\n        actionSteps: [\n          'Break down goals into measurable milestones',\n          'Set up monthly progress reviews',\n          'Create accountability systems',\n          'Adjust strategies based on progress'\n        ],\n        expectedOutcome: 'Higher goal achievement rate and strategic focus',\n        timeframe: '1 month to implement',\n        confidence: 95\n      });\n    }\n\n    // Technology stack optimization\n    if (profile.technology_stack && profile.technology_stack.length > 10) {\n      advice.push({\n        category: 'efficiency',\n        priority: 'low',\n        title: 'Consolidate Technology Stack',\n        description: 'Simplify your technology tools to reduce complexity and costs',\n        reasoning: 'Too many tools create inefficiency and integration challenges',\n        actionSteps: [\n          'Audit current tool usage and overlap',\n          'Identify consolidation opportunities',\n          'Research integrated solutions',\n          'Plan migration strategy'\n        ],\n        expectedOutcome: 'Reduced costs and improved workflow efficiency',\n        timeframe: '3-6 months',\n        confidence: 70\n      });\n    }\n\n    // Query-specific advice\n    if (query) {\n      const contextualAdvice = await this.generateContextualAdvice(profile, query);\n      advice.push(...contextualAdvice);\n    }\n\n    return advice.sort((a, b) => {\n      const priorityOrder = { critical: 4, high: 3, medium: 2, low: 1 };\n      return priorityOrder[b.priority] - priorityOrder[a.priority];\n    });\n  }\n\n  private async generateContextualAdvice(profile: any, query: string): Promise<BusinessAdvice[]> {\n    const lowerQuery = query.toLowerCase();\n    const advice: BusinessAdvice[] = [];\n\n    // Revenue-related queries\n    if (lowerQuery.includes('revenue') || lowerQuery.includes('money') || lowerQuery.includes('income')) {\n      advice.push({\n        category: 'revenue',\n        priority: 'high',\n        title: 'Revenue Growth Strategy',\n        description: 'Based on your current business model, here are revenue optimization opportunities',\n        reasoning: `With ${profile.total_clients} clients and ${profile.business_model} model, focus on value maximization`,\n        actionSteps: [\n          'Analyze client profitability by segment',\n          'Identify upselling opportunities',\n          'Implement value-based pricing',\n          'Develop recurring revenue streams'\n        ],\n        expectedOutcome: '20-40% revenue increase within 12 months',\n        timeframe: '6-12 months',\n        confidence: 80\n      });\n    }\n\n    // Growth-related queries\n    if (lowerQuery.includes('grow') || lowerQuery.includes('scale') || lowerQuery.includes('expand')) {\n      advice.push({\n        category: 'growth',\n        priority: 'high',\n        title: 'Strategic Growth Plan',\n        description: 'Systematic approach to scaling your business',\n        reasoning: 'Sustainable growth requires systems and processes',\n        actionSteps: [\n          'Document current processes',\n          'Identify bottlenecks and constraints',\n          'Build scalable systems',\n          'Plan team expansion'\n        ],\n        expectedOutcome: 'Sustainable 50-100% growth capacity',\n        timeframe: '3-6 months',\n        confidence: 85\n      });\n    }\n\n    return advice;\n  }\n\n  async getBusinessInsights(orgId: string): Promise<string[]> {\n    const profile = await businessProfileService.getBusinessProfile(orgId);\n    if (!profile) return ['Complete business profile setup to receive insights'];\n\n    const insights = [];\n\n    // Business health insights\n    if (profile.monthly_recurring_revenue && profile.total_clients) {\n      const revenuePerClient = profile.monthly_recurring_revenue / profile.total_clients;\n      insights.push(`Average revenue per client: $${revenuePerClient.toFixed(0)}/month`);\n    }\n\n    // Growth indicators\n    if (profile.company_size === 'solopreneur' && profile.total_clients > 15) {\n      insights.push('Your client base indicates readiness for business scaling');\n    }\n\n    // Market position\n    if (profile.competitive_advantages && profile.competitive_advantages.length > 2) {\n      insights.push('Strong competitive positioning with multiple advantages');\n    }\n\n    return insights;\n  }\n\n  // Generate business context for AI conversations\n  async getBusinessContext(orgId: string): Promise<string> {\n    const profile = await businessProfileService.getBusinessProfile(orgId);\n    if (!profile) return 'No business profile available';\n\n    return `\nBUSINESS CONTEXT FOR AI ASSISTANCE:\n\nCompany: ${profile.company_name}\nIndustry: ${profile.industry}\nBusiness Model: ${profile.business_model}\nSize: ${profile.company_size}\n\nSERVICES:\n${profile.primary_services?.join(', ')}\n\nVALUE PROPOSITION:\n${profile.unique_value_proposition}\n\nTARGET MARKET:\n${profile.target_markets?.join(', ')}\n\nCURRENT SITUATION:\n- Total Clients: ${profile.total_clients}\n- Active Clients: ${profile.active_clients}\n- MRR: $${profile.monthly_recurring_revenue || 'Not specified'}\n\nGOALS:\nShort-term: ${profile.short_term_goals?.join(', ')}\nLong-term: ${profile.long_term_goals?.join(', ')}\n\nCHALLENGES:\n${profile.current_challenges?.join(', ')}\n\nUse this context to provide specific, actionable business advice tailored to this company's situation.\n    `.trim();\n  }\n}\n\nexport const businessAdvisor = BusinessAdvisor.getInstance(); ","usedDeprecatedRules":[]},{"filePath":"/home/vonj/Github/Nexus/src/lib/ai/contextualRAG.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":94,"column":33,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":94,"endColumn":36,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2374,2377],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2374,2377],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":137,"column":38,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":137,"endColumn":41,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3589,3592],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3589,3592],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":145,"column":42,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":145,"endColumn":45,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3752,3755],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3752,3755],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\n * contextualRAG.ts\n * \n * Enhanced Retrieval Augmented Generation system for Nexus AI assistants.\n * Provides deeply contextual business data and user intelligence to create\n * the \"Nexus gets me\" experience across all AI interactions.\n */\n\nimport { supabase } from './core/supabase';\nimport type { EABusinessObservation } from './services/businessObservationService';\n\ninterface UserActivityRow {\n  page: string;\n  timestamp: string;\n  [key: string]: unknown;\n}\n\ninterface IntegratedPlatformData {\n  hubspot: {\n    deals: number;\n    pipeline_value: number;\n    conversion_rate: number;\n    trend: string;\n  };\n  cloudflare: {\n    uptime: number;\n    response_time: number;\n    threats_blocked: number;\n  };\n  google_workspace: {\n    email_volume: number;\n    meeting_hours: number;\n    shared_docs: number;\n    drive_usage: number;\n  };\n  marcoby_cloud: {\n    server_utilization: number;\n    uptime: number;\n    monthly_cost: number;\n    optimization_potential: number;\n  };\n}\n\ninterface Correlation {\n  description: string;\n  confidence: number;\n  actionable: boolean;\n  impact: string;\n}\n\ninterface Prediction {\n  insight: string;\n  timeframe: string;\n  recommended_action: string;\n}\n\nexport interface EnhancedUserContext {\n  profile: {\n    id: string;\n    email: string;\n    name: string;\n    role: string;\n    department: string;\n    company_id: string;\n    permissions: string[];\n    preferences: Record<string, unknown>;\n    // Enhanced from onboarding\n    experience_level: 'beginner' | 'intermediate' | 'advanced';\n    communication_style: 'direct' | 'detailed' | 'visual';\n    primary_responsibilities: string[];\n    current_pain_points: string[];\n    immediate_goals: string;\n    success_metrics: string[];\n    time_availability: 'low' | 'medium' | 'high';\n    collaboration_frequency: 'solo' | 'small-team' | 'cross-functional';\n  };\n  activity: {\n    recent_pages: string[];\n    frequent_actions: string[];\n    last_active: string;\n    session_duration: number;\n    total_sessions: number;\n    most_used_features: string[];\n    skill_level: 'beginner' | 'intermediate' | 'advanced';\n  };\n  business_context: {\n    company_name: string;\n    industry: string;\n    company_size: string;\n    business_model: string;\n    revenue_stage: string;\n    growth_stage: 'startup' | 'growth' | 'enterprise';\n    fiscal_year_end: string;\n    key_metrics: Record<string, any>;\n    // Enhanced from onboarding\n    primary_departments: string[];\n    key_tools: string[];\n    data_sources: string[];\n    automation_maturity: 'none' | 'basic' | 'intermediate' | 'advanced';\n    business_priorities: string[];\n    success_timeframe: string;\n  };\n  success_criteria: {\n    primary_success_metric: string;\n    secondary_metrics: string[];\n    time_savings_goal: string;\n    roi_expectation: string;\n    usage_frequency: string;\n    success_scenarios: string[];\n    failure_conditions: string[];\n    immediate_wins: string[];\n    long_term_vision: string;\n  };\n}\n\nexport interface PersonalizationInsights {\n  user_expertise_assessment: string;\n  communication_approach: string;\n  problem_solving_style: string;\n  business_focus_areas: string[];\n  recommended_features: string[];\n  potential_automation_opportunities: string[];\n  success_likelihood_factors: string[];\n}\n\nexport interface DepartmentData {\n  sales: {\n    pipeline_value: number;\n    deals_closing_this_month: number;\n    conversion_rates: Record<string, number>;\n    top_opportunities: Array<{\n      company: string;\n      value: number;\n      stage: string;\n      close_date: string;\n    }>;\n    team_performance: Record<string, any>;\n    recent_wins: Array<{\n      company: string;\n      value: number;\n      rep: string;\n    }>;\n  };\n  marketing: {\n    campaign_performance: Record<string, any>;\n    lead_generation: {\n      total_leads: number;\n      qualified_leads: number;\n      cost_per_lead: number;\n    };\n    website_analytics: {\n      traffic: number;\n      conversion_rate: number;\n      top_pages: string[];\n    };\n    content_performance: Array<{\n      title: string;\n      views: number;\n      engagement: number;\n    }>;\n  };\n  finance: {\n    revenue: {\n      current_month: number;\n      previous_month: number;\n      ytd: number;\n      forecast: number;\n    };\n    expenses: {\n      current_month: number;\n      budget_variance: number;\n      top_categories: Array<{\n        category: string;\n        amount: number;\n      }>;\n    };\n    cash_flow: {\n      current_balance: number;\n      projected_30_days: number;\n      burn_rate: number;\n    };\n    key_metrics: {\n      gross_margin: number;\n      customer_acquisition_cost: number;\n      lifetime_value: number;\n    };\n  };\n  operations: {\n    projects: {\n      active_count: number;\n      on_track: number;\n      at_risk: number;\n      recent_completions: Array<{\n        name: string;\n        completion_date: string;\n        status: string;\n      }>;\n    };\n    system_health: {\n      uptime: number;\n      performance_score: number;\n      open_tickets: number;\n    };\n    team_utilization: {\n      current_capacity: number;\n      upcoming_availability: string;\n    };\n  };\n}\n\nexport class ContextualRAG {\n  private userContext: EnhancedUserContext | null = null;\n  private departmentData: Partial<DepartmentData> = {};\n\n  /**\n   * Initialize RAG system with user context\n   */\n  async initialize(userId: string): Promise<void> {\n    this.userContext = await this.fetchUserContext(userId);\n    // Pre-load frequently accessed department data\n    await this.preloadDepartmentData();\n  }\n\n  /**\n   * Get contextual prompt for Executive Assistant with full user intelligence\n   */\n  async getExecutiveContext(query: string): Promise<string> {\n    if (!this.userContext) {\n      throw new Error('RAG system not initialized');\n    }\n\n    const personalizationInsights = this.generatePersonalizationInsights();\n    const contextualResponse = this.generateContextualResponseStrategy(query);\n    const businessIntelligence = await this.getBusinessIntelligence();\n    const cloudStorageContext = await this.getCloudStorageContext();\n\n    return `EXECUTIVE CONTEXT & USER INTELLIGENCE:\n\n🧠 WHO YOU'RE TALKING TO:\n${this.userContext.profile.name} (${this.userContext.profile.role}) at ${this.userContext.business_context.company_name}\n• Experience Level: ${this.userContext.profile.experience_level} with business intelligence tools\n• Communication Style: Prefers ${this.userContext.profile.communication_style} responses\n• Time Availability: ${this.userContext.profile.time_availability} - adjust response depth accordingly\n• Current Focus: ${this.userContext.profile.immediate_goals}\n\n🎯 THEIR SUCCESS CRITERIA:\n• Primary Goal: ${this.userContext.success_criteria.primary_success_metric}\n• Time Savings Target: ${this.userContext.success_criteria.time_savings_goal}\n• Success Timeline: ${this.userContext.business_context.success_timeframe}\n• ROI Expectation: ${this.userContext.success_criteria.roi_expectation}\n\n💼 BUSINESS CONTEXT:\n• Industry: ${this.userContext.business_context.industry} (${this.userContext.business_context.business_model})\n• Company Stage: ${this.userContext.business_context.growth_stage} (${this.userContext.business_context.company_size})\n• Automation Maturity: ${this.userContext.business_context.automation_maturity}\n• Priority Departments: ${this.userContext.business_context.primary_departments.join(', ')}\n\n🎨 PERSONALIZATION INSIGHTS:\n${personalizationInsights}\n\n📊 CURRENT BUSINESS INTELLIGENCE:\n${businessIntelligence}\n\n📁 CLOUD STORAGE CONTEXT:\n${cloudStorageContext}\n\n🎪 RESPONSE STRATEGY FOR THIS QUERY:\n${contextualResponse}\n\nINSTRUCTIONS:\n- Match their ${this.userContext.profile.communication_style} communication preference\n- Reference their specific pain points: ${this.userContext.profile.current_pain_points.join(', ')}\n- Connect advice to their success metrics: ${this.userContext.success_criteria.secondary_metrics.join(', ')}\n- Consider their ${this.userContext.profile.experience_level} experience level\n- Suggest relevant specialists based on their department focus\n- Always tie recommendations back to their immediate goals and long-term vision`;\n  }\n\n  /**\n   * Get department-specific data context for specialized assistants\n   */\n  async getDepartmentContext(department: string, query: string): Promise<string> {\n    if (!this.userContext) {\n      throw new Error('RAG system not initialized');\n    }\n\n    const departmentData = await this.fetchDepartmentData(department);\n    const relevantData = this.extractRelevantData(departmentData, query);\n    const userRole = this.userContext?.profile.role || 'Team Member';\n    const departmentExpertise = this.assessDepartmentExpertise(department);\n    const contextualRecommendations = this.generateDepartmentRecommendations(department);\n\n    return `DEPARTMENT CONTEXT & PERSONALIZED GUIDANCE:\n\n👤 USER PROFILE FOR ${department.toUpperCase()}:\n• ${this.userContext.profile.name} (${userRole}) - ${this.userContext.profile.experience_level} level\n• Responsibilities: ${this.userContext.profile.primary_responsibilities.join(', ')}\n• Pain Points: ${this.userContext.profile.current_pain_points.filter(p => this.isDepartmentRelevant(p, department)).join(', ')}\n• Success Metrics: ${this.userContext.success_criteria.secondary_metrics.filter(m => this.isDepartmentRelevant(m, department)).join(', ')}\n\n🏢 COMPANY CONTEXT:\n• ${this.userContext.business_context.company_name} (${this.userContext.business_context.industry})\n• Current Tools: ${this.userContext.business_context.key_tools.filter(t => this.isDepartmentRelevant(t, department)).join(', ')}\n• Data Sources: ${this.userContext.business_context.data_sources.filter(d => this.isDepartmentRelevant(d, department)).join(', ')}\n• Business Priority: ${this.userContext.business_context.business_priorities.filter(p => this.isDepartmentRelevant(p, department)).join(', ')}\n\n📊 CURRENT ${department.toUpperCase()} PERFORMANCE:\n${this.formatDepartmentData(department, departmentData)}\n\n🎯 RELEVANT TO YOUR QUERY:\n${relevantData}\n\n🧠 EXPERTISE ASSESSMENT:\n${departmentExpertise}\n\n💡 CONTEXTUAL RECOMMENDATIONS:\n${contextualRecommendations}\n\n🎨 COMMUNICATION STYLE:\nRespond in a ${this.userContext.profile.communication_style} manner. User has ${this.userContext.profile.time_availability} time availability, so ${this.getResponseLengthGuidance()}.\n\nINSTRUCTIONS:\n- Reference their specific ${department} pain points and goals\n- Suggest automation opportunities based on their ${this.userContext.business_context.automation_maturity} maturity\n- Connect recommendations to their immediate wins: ${this.userContext.success_criteria.immediate_wins.join(', ')}\n- Consider their collaboration style: ${this.userContext.profile.collaboration_frequency}`;\n  }\n\n  /**\n   * Determine which assistant should handle the query and provide routing intelligence\n   */\n  async getRoutingIntelligence(query: string): Promise<{\n    recommendedAgent: string;\n    confidence: number;\n    reasoning: string;\n    contextualPrompt: string;\n  }> {\n    // Analyze query intent and determine best agent\n    const routing = await this.analyzeQueryRouting(query);\n    \n    return {\n      recommendedAgent: routing.agent,\n      confidence: routing.confidence,\n      reasoning: routing.reasoning,\n      contextualPrompt: routing.agent === 'executive' \n        ? await this.getExecutiveContext(query)\n        : await this.getDepartmentContext(routing.department!, query)\n    };\n  }\n\n  /**\n   * Get documents from cloud storage for RAG context\n   */\n  private async getCloudStorageContext(): Promise<string> {\n    try {\n      // Find documents from Google Drive and OneDrive\n      const { data: documents, error } = await supabase\n        .from('ai_vector_documents')\n        .select('metadata, content')\n        .or('document_id.like.google-drive-%,document_id.like.onedrive-%')\n        .order('created_at', { ascending: false })\n        .limit(5);\n\n      if (error) {\n        console.error('Error fetching cloud storage documents:', error);\n      }\n\n      if (!documents || documents.length === 0) {\n        return 'No cloud storage documents synced yet. Connect Google Drive or OneDrive to enable document-based insights.';\n      }\n\n      const documentSummaries = documents.map(doc => {\n        const metadata = doc.metadata || {};\n        return `• ${metadata.fileName || 'Unknown'} (${metadata.source || 'cloud'}) - Modified: ${\n          metadata.lastModified ? new Date(metadata.lastModified).toLocaleDateString() : 'Unknown'\n        }`;\n      }).join('\\n');\n\n      return `Recent Cloud Documents Available for Context:\n${documentSummaries}\n\nThese documents are searchable and can be referenced in responses. The AI can pull specific information from these files to provide contextual business insights.`;\n    } catch (error) {\n      console.error('Failed to get cloud storage context:', error);\n      return 'Cloud storage context temporarily unavailable.';\n    }\n  }\n\n  /**\n   * Fetch comprehensive user context from multiple data sources\n   */\n  private async fetchUserContext(userId: string): Promise<EnhancedUserContext> {\n    try {\n      // Fetch user profile\n      const { data: profile } = await supabase\n        .from('user_profiles')\n        .select('*')\n        .eq('id', userId)\n        .single();\n\n      // Fetch user activity (using chat_messages as proxy for user activity)\n      const { data: activity, error: activityError } = await supabase\n        .from('user_activity')\n        .select('*')\n        .eq('user_id', userId)\n        .limit(100);\n\n      if (activityError) {\n        console.error('Error fetching user activity:', activityError);\n      }\n\n      // Fetch company context (with defensive check for valid UUID)\n      let company = null;\n      if (profile?.company_id && this.isValidUUID(profile.company_id)) {\n        const { data: companyData } = await supabase\n          .from('companies')\n          .select('*')\n          .eq('id', profile.company_id)\n          .single();\n        company = companyData;\n      }\n\n      return {\n        profile: {\n          id: profile?.id || userId,\n          email: profile?.email || '',\n          name: profile?.first_name || 'User',\n          role: profile?.role || 'Team Member',\n          department: profile?.department || 'General',\n          company_id: profile?.company_id || '',\n          permissions: profile?.skills || [],\n          preferences:\n            typeof profile?.preferences === 'object' && profile?.preferences\n              ? (profile.preferences as Record<string, unknown>)\n              : {},\n          experience_level: 'intermediate',\n          communication_style: 'direct',\n          primary_responsibilities: ['Sales', 'Marketing'],\n          current_pain_points: ['Finding the right tools'],\n          immediate_goals: 'Increase sales by 20%',\n          success_metrics: ['Revenue', 'Customer Satisfaction'],\n          time_availability: 'medium',\n          collaboration_frequency: 'small-team'\n        },\n        activity: {\n          recent_pages:\n            activity?.map((a: UserActivityRow) => a.page).slice(0, 5) || [\n              '/dashboard',\n            ],\n          frequent_actions: this.calculateFrequentActions(),\n          last_active: activity?.[0]?.timestamp || new Date().toISOString(),\n          session_duration: this.calculateSessionDuration(),\n          total_sessions: 5, // Placeholder\n          most_used_features: ['AI Chat', 'Analytics', 'Integrations'], // Placeholder\n          skill_level: 'intermediate', // Placeholder\n        },\n        business_context: {\n          company_name: company?.name || 'Your Company',\n          industry: company?.industry || 'Technology',\n          company_size: company?.size || 'Small',\n          business_model: 'B2B',\n          revenue_stage: 'growth',\n          growth_stage: 'growth',\n          fiscal_year_end: '12-31',\n          key_metrics: {\n            employees: 50,\n            annual_revenue: 5000000,\n            growth_rate: 25,\n            customer_count: 150\n          },\n          primary_departments: ['Sales', 'Marketing'],\n          key_tools: ['CRM', 'Marketing Automation'],\n          data_sources: ['Customer Feedback', 'Social Media'],\n          automation_maturity: 'intermediate',\n          business_priorities: ['Revenue Growth', 'Customer Satisfaction'],\n          success_timeframe: '12 months'\n        },\n        success_criteria: {\n          primary_success_metric: 'Revenue Growth',\n          secondary_metrics: ['Customer Satisfaction', 'Marketing ROI'],\n          time_savings_goal: 'Reduce marketing costs by 20%',\n          roi_expectation: 'Return on Investment',\n          usage_frequency: 'Monthly',\n          success_scenarios: ['Successful campaign launch', 'Significant revenue increase'],\n          failure_conditions: ['Campaign underperformance', 'Revenue decrease'],\n          immediate_wins: ['First month revenue increase', 'Immediate customer feedback'],\n          long_term_vision: 'Sustainable business growth'\n        }\n      };\n    } catch (error) {\n      console.error('Error fetching user context:', error);\n      // Return default context\n      return this.getDefaultUserContext(userId);\n    }\n  }\n\n  /**\n   * Fetch department-specific business data\n   */\n  private async fetchDepartmentData(\n    department: string,\n  ): Promise<DepartmentData[keyof DepartmentData] | {}> {\n    // In a real application, this would fetch data from a database or API\n    // For now, we'll use demo data\n    return this.getDemoData(department);\n  }\n\n  private getDemoData(department: string): DepartmentData[keyof DepartmentData] | {} {\n    const demoData: DepartmentData = {\n      sales: {\n        pipeline_value: 1250000,\n        deals_closing_this_month: 8,\n        conversion_rates: { prospect: 25, qualified: 45, proposal: 75, negotiation: 85 },\n        top_opportunities: [\n          { company: 'TechCorp Inc.', value: 250000, stage: 'Proposal', close_date: '2024-02-15' },\n          { company: 'Innovation Labs', value: 185000, stage: 'Negotiation', close_date: '2024-02-28' },\n          { company: 'Future Systems', value: 320000, stage: 'Qualified', close_date: '2024-03-15' }\n        ],\n        team_performance: { quota_attainment: 87, top_performer: 'Sarah Johnson' },\n        recent_wins: [\n          { company: 'DataFlow Corp', value: 125000, rep: 'Mike Chen' },\n          { company: 'CloudTech Solutions', value: 95000, rep: 'Sarah Johnson' }\n        ]\n      },\n      marketing: {\n        campaign_performance: { total_campaigns: 12, active_campaigns: 5, avg_roi: 3.2 },\n        lead_generation: { total_leads: 847, qualified_leads: 234, cost_per_lead: 45 },\n        website_analytics: { traffic: 25000, conversion_rate: 2.8, top_pages: ['/pricing', '/features', '/demo'] },\n        content_performance: [\n          { title: 'Industry Report 2024', views: 5200, engagement: 78 },\n          { title: 'Product Demo Video', views: 3800, engagement: 85 }\n        ]\n      },\n      finance: {\n        revenue: { current_month: 425000, previous_month: 385000, ytd: 4200000, forecast: 5200000 },\n        expenses: { current_month: 298000, budget_variance: -12000, top_categories: [\n          { category: 'Personnel', amount: 185000 },\n          { category: 'Technology', amount: 65000 },\n          { category: 'Marketing', amount: 48000 }\n        ]},\n        cash_flow: { current_balance: 850000, projected_30_days: 120000, burn_rate: 45000 },\n        key_metrics: { gross_margin: 78.5, customer_acquisition_cost: 450, lifetime_value: 12500 }\n      },\n      operations: {\n        projects: { active_count: 8, on_track: 6, at_risk: 2, recent_completions: [\n          { name: 'Q4 Platform Update', completion_date: '2024-01-15', status: 'completed' },\n          { name: 'Security Audit', completion_date: '2024-01-28', status: 'completed' }\n        ]},\n        system_health: { uptime: 99.8, performance_score: 92, open_tickets: 12 },\n        team_utilization: { current_capacity: 85, upcoming_availability: '15% increase expected next month' }\n      },\n    };\n    return demoData[department as keyof typeof demoData] || {};\n  }\n\n  /**\n   * Analyze query to determine intent and routing\n   */\n  private async analyzeQueryRouting(query: string): Promise<{\n    agent: string;\n    department?: string;\n    confidence: number;\n    reasoning: string;\n  }> {\n    const keywords = {\n      sales: ['sales', 'revenue', 'deals', 'pipeline', 'customers', 'prospects', 'quota'],\n      marketing: ['marketing', 'campaigns', 'leads', 'website', 'traffic', 'conversion', 'brand'],\n      finance: ['finance', 'budget', 'costs', 'profit', 'cash', 'expenses', 'financial'],\n      operations: ['operations', 'projects', 'tickets', 'capacity', 'team', 'process', 'efficiency']\n    };\n\n    const queryLower = query.toLowerCase();\n    let maxScore = 0;\n    let bestDepartment = '';\n\n    // Score each department based on keyword matches\n    for (const [dept, words] of Object.entries(keywords)) {\n      const score = words.filter(word => queryLower.includes(word)).length;\n      if (score > maxScore) {\n        maxScore = score;\n        bestDepartment = dept;\n      }\n    }\n\n    // Strategic/high-level queries should go to Executive Assistant\n    const strategicKeywords = ['strategy', 'planning', 'vision', 'roadmap', 'priorities', 'goals'];\n    const isStrategic = strategicKeywords.some(word => queryLower.includes(word));\n\n    if (isStrategic || maxScore === 0) {\n      return {\n        agent: 'executive',\n        confidence: isStrategic ? 0.9 : 0.6,\n        reasoning: isStrategic \n          ? 'Query involves strategic planning - routing to Executive Assistant'\n          : 'General query without specific department focus - routing to Executive Assistant'\n      };\n    }\n\n    return {\n      agent: 'departmental',\n      department: bestDepartment,\n      confidence: Math.min(0.9, maxScore * 0.3),\n      reasoning: `Query contains ${maxScore} ${bestDepartment} keywords - routing to ${bestDepartment} specialist`\n    };\n  }\n\n  /**\n   * Utility methods for data processing\n   */\n  private isValidUUID(uuid: string): boolean {\n    const uuidRegex = /^[0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$/i;\n    return uuidRegex.test(uuid);\n  }\n  private buildUserIntelligence(): string {\n    if (!this.userContext) return '';\n\n    return `- Active session: ${Math.round(this.userContext.activity.session_duration / 60)} minutes\n- Recent focus: ${this.userContext.activity.recent_pages.slice(0, 3).join(', ')}\n- User expertise: ${this.userContext.profile.role} with ${this.userContext.profile.permissions.length} platform permissions\n- Department context: ${this.userContext.profile.department}`;\n  }\n\n  private async getBusinessIntelligence(): Promise<string> {\n    const metrics = this.userContext?.business_context.key_metrics || {};\n    const insights = [\n      `- Company: ${this.userContext?.business_context.company_name} (${this.userContext?.business_context.growth_stage})`,\n      `- Industry: ${this.userContext?.business_context.industry}`,\n      `- Revenue: $${(metrics.annual_revenue || 0).toLocaleString()} annually`,\n      `- Growth Rate: ${metrics.growth_rate || 0}%`,\n      `- Team Size: ${metrics.employees || 0} employees`\n    ];\n\n    // Add cross-platform analytics intelligence\n    try {\n      // Get unified analytics data for enhanced context\n      const crossPlatformData = await this.getCrossPlatformAnalytics();\n      if (crossPlatformData) {\n        insights.push('\\n📊 CROSS-PLATFORM INTELLIGENCE:');\n        insights.push(...crossPlatformData);\n      }\n\n      // Get AI-discovered correlations for smarter routing\n      const correlations = await this.getAICorrelations();\n      if (correlations.length > 0) {\n        insights.push('\\n🧠 AI-DISCOVERED PATTERNS:');\n        insights.push(...correlations);\n      }\n\n      // Add predictive insights for proactive assistance\n      const predictions = await this.getPredictiveInsights();\n      if (predictions.length > 0) {\n        insights.push('\\n🔮 PREDICTIVE INTELLIGENCE:');\n        insights.push(...predictions);\n      }\n    } catch (error) {\n      console.error('Error fetching cross-platform analytics:', error);\n    }\n\n    // Add EA business observations\n    try {\n      const { businessObservationService } = await import(\n        './services/businessObservationService'\n      );\n\n      const observations =\n        await businessObservationService.generateBusinessObservations(\n          this.userContext?.profile.id || '',\n          this.userContext?.profile.company_id || '',\n        );\n\n      let intelligence = 'Recent Business Observations:\\n';\n      if (observations.length === 0) {\n        intelligence += '- No significant observations in the last 7 days.\\n';\n      } else {\n        observations.slice(0, 3).forEach((obs: EABusinessObservation) => {\n          intelligence += `- [${obs.priority}] ${obs.title}: ${obs.description}\\n`;\n        });\n      }\n      return intelligence;\n    } catch (error) {\n      console.error('Error fetching business observations:', error);\n      return 'No business context available.';\n    }\n  }\n\n  /**\n   * Get cross-platform analytics data for enhanced AI context\n   */\n  private async getCrossPlatformAnalytics(): Promise<string[]> {\n    const insights: string[] = [];\n    \n    try {\n      // Simulate fetching from our unified analytics system\n      const platformData = await this.fetchIntegratedPlatformData();\n      \n      if (platformData.hubspot) {\n        insights.push(`• CRM Health: ${platformData.hubspot.deals} deals, $${platformData.hubspot.pipeline_value.toLocaleString()} pipeline`);\n        insights.push(`• Sales Velocity: ${platformData.hubspot.conversion_rate}% conversion rate (${platformData.hubspot.trend})`);\n      }\n\n      if (platformData.cloudflare) {\n        insights.push(`• Website Performance: ${platformData.cloudflare.uptime}% uptime, ${platformData.cloudflare.response_time}ms avg response`);\n        insights.push(`• Security Status: ${platformData.cloudflare.threats_blocked} threats blocked this month`);\n      }\n\n      if (platformData.google_workspace) {\n        insights.push(`• Productivity: ${platformData.google_workspace.email_volume} emails/day, ${platformData.google_workspace.meeting_hours}h meetings/week`);\n        insights.push(`• Collaboration: ${platformData.google_workspace.shared_docs} active docs, ${platformData.google_workspace.drive_usage}GB storage used`);\n      }\n\n      if (platformData.marcoby_cloud) {\n        insights.push(`• Infrastructure: ${platformData.marcoby_cloud.server_utilization}% avg utilization, ${platformData.marcoby_cloud.uptime}% uptime`);\n        insights.push(`• Cost Efficiency: $${platformData.marcoby_cloud.monthly_cost}/month, ${platformData.marcoby_cloud.optimization_potential}% optimization potential`);\n      }\n\n    } catch (error) {\n      console.error('Error fetching cross-platform data:', error);\n    }\n\n    return insights;\n  }\n\n  /**\n   * Get AI-discovered correlations between platforms\n   */\n  private async getAICorrelations(): Promise<string[]> {\n    const correlations: string[] = [];\n    \n    try {\n      // Simulate AI correlation discovery\n      const correlationData = await this.analyzeCorrelations();\n      \n      correlationData.forEach(correlation => {\n        correlations.push(`• ${correlation.description} (${correlation.confidence}% confidence)`);\n        if (correlation.actionable) {\n          correlations.push(`  → Impact: ${correlation.impact}`);\n        }\n      });\n\n    } catch (error) {\n      console.error('Error analyzing correlations:', error);\n    }\n\n    return correlations;\n  }\n\n  /**\n   * Get predictive insights for proactive assistance\n   */\n  private async getPredictiveInsights(): Promise<string[]> {\n    const predictions: string[] = [];\n    \n    try {\n      // Simulate predictive analytics\n      const predictionData = await this.generatePredictions();\n      \n      predictionData.forEach(prediction => {\n        predictions.push(`• ${prediction.insight} (${prediction.timeframe})`);\n        if (prediction.recommended_action) {\n          predictions.push(`  → Recommended: ${prediction.recommended_action}`);\n        }\n      });\n\n    } catch (error) {\n      console.error('Error generating predictions:', error);\n    }\n\n    return predictions;\n  }\n\n  /**\n   * Fetch integrated platform data from all connected sources\n   */\n  private async fetchIntegratedPlatformData(): Promise<IntegratedPlatformData> {\n    // In a real implementation, this would fetch from your unified analytics dashboard\n    return {\n      hubspot: {\n        deals: 47,\n        pipeline_value: 245000,\n        conversion_rate: 28,\n        trend: 'improving'\n      },\n      cloudflare: {\n        uptime: 99.97,\n        response_time: 180,\n        threats_blocked: 1247\n      },\n      google_workspace: {\n        email_volume: 156,\n        meeting_hours: 12,\n        shared_docs: 89,\n        drive_usage: 847\n      },\n      marcoby_cloud: {\n        server_utilization: 72,\n        uptime: 99.95,\n        monthly_cost: 1250,\n        optimization_potential: 15\n      }\n    };\n  }\n\n  /**\n   * Analyze correlations between different platforms\n   */\n  private async analyzeCorrelations(): Promise<Correlation[]> {\n    return [\n      {\n        description: \"High email volume correlates with 23% increase in deal velocity\",\n        confidence: 87,\n        actionable: true,\n        impact: \"Focus on email engagement during high-activity periods\"\n      },\n      {\n        description: \"Website performance drops predict 15% decrease in lead quality\",\n        confidence: 92,\n        actionable: true,\n        impact: \"Monitor Cloudflare metrics before major campaigns\"\n      },\n      {\n        description: \"Infrastructure utilization >80% correlates with 12% productivity loss\",\n        confidence: 79,\n        actionable: true,\n        impact: \"Scale infrastructure proactively when utilization hits 75%\"\n      }\n    ];\n  }\n\n  /**\n   * Generate predictive insights based on historical patterns\n   */\n  private async generatePredictions(): Promise<Prediction[]> {\n    return [\n      {\n        insight: \"Current email engagement trends suggest 34% increase in Q1 leads\",\n        timeframe: \"Next 30 days\",\n        recommended_action: \"Prepare sales team for increased lead volume\"\n      },\n      {\n        insight: \"Infrastructure usage pattern indicates need for scaling by month-end\",\n        timeframe: \"Next 2 weeks\",\n        recommended_action: \"Schedule infrastructure review and capacity planning\"\n      },\n      {\n        insight: \"Meeting frequency suggests team bandwidth at 85% capacity\",\n        timeframe: \"Current week\",\n        recommended_action: \"Consider redistributing workload or extending deadlines\"\n      }\n    ];\n  }\n\n  private analyzeQuery(query: string): string {\n    // Advanced analysis can be done here. For now, just returning the query.\n    return query;\n  }\n\n  private calculateFrequentActions(): string[] {\n    // This is a placeholder. In a real scenario, you'd analyze activity logs.\n    return ['viewed dashboard', 'ran report', 'updated settings'];\n  }\n\n  private calculateSessionDuration(): number {\n    // Placeholder for session duration calculation\n    return 15; // in minutes\n  }\n\n  private getDefaultUserContext(userId: string): EnhancedUserContext {\n    return {\n      profile: {\n        id: userId,\n        email: 'user@company.com',\n        name: 'User',\n        role: 'Team Member',\n        department: 'General',\n        company_id: 'default',\n        permissions: [],\n        preferences: {},\n        experience_level: 'beginner',\n        communication_style: 'direct',\n        primary_responsibilities: ['Sales', 'Marketing'],\n        current_pain_points: ['Finding the right tools'],\n        immediate_goals: 'Increase sales by 20%',\n        success_metrics: ['Revenue', 'Customer Satisfaction'],\n        time_availability: 'medium',\n        collaboration_frequency: 'small-team'\n      },\n      activity: {\n        recent_pages: ['dashboard', 'chat', 'reports'],\n        frequent_actions: ['view_dashboard', 'send_message', 'generate_report'],\n        last_active: new Date().toISOString(),\n        session_duration: 1800,\n        total_sessions: 25,\n        most_used_features: ['CRM', 'Marketing Automation'],\n        skill_level: 'beginner'\n      },\n      business_context: {\n        company_name: 'Your Company',\n        industry: 'Technology',\n        company_size: 'Medium',\n        business_model: 'B2B',\n        revenue_stage: 'growth',\n        growth_stage: 'growth',\n        fiscal_year_end: '12-31',\n        key_metrics: {\n          employees: 50,\n          annual_revenue: 5000000,\n          growth_rate: 25,\n          customer_count: 150\n        },\n        primary_departments: ['Sales', 'Marketing'],\n        key_tools: ['CRM', 'Marketing Automation'],\n        data_sources: ['Customer Feedback', 'Social Media'],\n        automation_maturity: 'intermediate',\n        business_priorities: ['Revenue Growth', 'Customer Satisfaction'],\n        success_timeframe: '12 months'\n      },\n      success_criteria: {\n        primary_success_metric: 'Revenue Growth',\n        secondary_metrics: ['Customer Satisfaction', 'Marketing ROI'],\n        time_savings_goal: 'Reduce marketing costs by 20%',\n        roi_expectation: 'Return on Investment',\n        usage_frequency: 'Monthly',\n        success_scenarios: ['Successful campaign launch', 'Significant revenue increase'],\n        failure_conditions: ['Campaign underperformance', 'Revenue decrease'],\n        immediate_wins: ['First month revenue increase', 'Immediate customer feedback'],\n        long_term_vision: 'Sustainable business growth'\n      }\n    };\n  }\n\n  private formatDepartmentData(\n    department: string,\n    data: DepartmentData[keyof DepartmentData] | {},\n  ): string {\n    if (!data || Object.keys(data).length === 0) {\n      return `No data available for ${department}.`;\n    }\n    // Simple JSON.stringify for now, can be improved with custom formatters\n    return JSON.stringify(data, null, 2);\n  }\n\n  private extractRelevantData(\n    data: DepartmentData[keyof DepartmentData] | {},\n    query: string,\n  ): string {\n    if (!data || Object.keys(data).length === 0) {\n      return 'No specific data relates to the query.';\n    }\n    // Simple keyword matching for relevance\n    const queryLower = query.toLowerCase();\n    \n    if (queryLower.includes('performance') || queryLower.includes('metrics')) {\n      return 'Current performance indicators and key metrics are highlighted above.';\n    }\n    \n    if (queryLower.includes('forecast') || queryLower.includes('prediction')) {\n      return 'Forecast data and projections are included in the performance summary.';\n    }\n    \n    return 'All relevant data points for your query are included in the performance summary above.';\n  }\n\n  private preloadDepartmentData(): Promise<void> {\n    // Proactively fetch data for key departments\n    return Promise.resolve();\n  }\n\n  public generatePersonalizationInsights(): string {\n    if (!this.userContext) return 'Not enough data for personalization.';\n    \n    const insights = [\n      `• Expertise Assessment: ${this.assessUserExpertise()}`,\n      `• Communication Approach: ${this.determineCommunicationApproach()}`,\n      `• Problem-Solving Style: ${this.identifyProblemSolvingStyle()}`,\n      `• Key Focus Areas: ${this.identifyBusinessFocusAreas().join(', ')}`,\n      `• Automation Opportunities: ${this.identifyAutomationOpportunities().join(', ')}`,\n      `• Success Likelihood: ${this.assessSuccessLikelihood()}`\n    ];\n\n    return insights.join('\\n');\n  }\n\n  /**\n   * Generate contextual response strategy based on query analysis\n   */\n  private generateContextualResponseStrategy(query: string): string {\n    if (!this.userContext) return '';\n\n    const queryType = this.classifyQueryType(query);\n    const urgency = this.assessQueryUrgency(query);\n    const complexity = this.assessQueryComplexity(query);\n    const suggestedApproach = this.suggestResponseApproach(queryType, urgency, complexity);\n\n    return `• Query Type: ${queryType}\n• Urgency Level: ${urgency}\n• Complexity: ${complexity}\n• Suggested Approach: ${suggestedApproach}\n• Recommended Depth: ${this.getRecommendedDepth()}\n• Follow-up Actions: ${this.suggestFollowupActions(query).join(', ')}`;\n  }\n\n  /**\n   * Build enhanced user intelligence profile\n   */\n  private buildEnhancedUserIntelligence(): string {\n    if (!this.userContext) return '';\n\n    return `• Session Activity: ${Math.round(this.userContext.activity.session_duration / 60)} min session, ${this.userContext.activity.total_sessions} total\n• Platform Expertise: ${this.userContext.activity.skill_level} level, most used: ${this.userContext.activity.most_used_features.slice(0, 3).join(', ')}\n• Working Style: ${this.userContext.profile.collaboration_frequency} collaboration, ${this.userContext.profile.time_availability} time investment\n• Current Challenges: ${this.userContext.profile.current_pain_points.slice(0, 2).join(', ')}\n• Success Motivation: Targeting ${this.userContext.success_criteria.time_savings_goal} within ${this.userContext.business_context.success_timeframe}`;\n  }\n\n  /**\n   * Assess user expertise in department context\n   */\n  private assessDepartmentExpertise(department: string): string {\n    if (!this.userContext) return '';\n\n    const isUserDept = this.userContext.profile.department === department;\n    const hasResponsibility = this.userContext.profile.primary_responsibilities.some(r => \n      this.isDepartmentRelevant(r, department)\n    );\n    const experienceLevel = this.userContext.profile.experience_level;\n    const relevantTools = this.userContext.business_context.key_tools.filter(t => \n      this.isDepartmentRelevant(t, department)\n    ).length;\n\n    let expertise = '';\n    if (isUserDept) {\n      expertise = `Expert in ${department} (their primary department)`;\n    } else if (hasResponsibility) {\n      expertise = `Cross-functional knowledge of ${department}`;\n    } else {\n      expertise = `Limited ${department} experience`;\n    }\n\n    return `${expertise} | ${experienceLevel} overall experience | Using ${relevantTools} relevant tools`;\n  }\n\n  /**\n   * Generate department-specific recommendations\n   */\n  private generateDepartmentRecommendations(department: string): string {\n    if (!this.userContext) return '';\n\n    const automationLevel = this.userContext.business_context.automation_maturity;\n    const immediateWins = this.userContext.success_criteria.immediate_wins.filter(w => \n      this.isDepartmentRelevant(w, department)\n    );\n    const relevantPriorities = this.userContext.business_context.business_priorities.filter(p =>\n      this.isDepartmentRelevant(p, department)\n    );\n\n    return `• Start with ${automationLevel} level automation solutions\n• Quick wins available: ${immediateWins.slice(0, 2).join(', ')}\n• Align with priorities: ${relevantPriorities.slice(0, 2).join(', ')}\n• Recommended next steps: ${this.getNextStepsForDepartment(department).join(', ')}`;\n  }\n\n  /**\n   * Get response length guidance based on user preferences\n   */\n  private getResponseLengthGuidance(): string {\n    if (!this.userContext) return 'provide balanced responses';\n\n    const timeAvailability = this.userContext.profile.time_availability;\n    const commStyle = this.userContext.profile.communication_style;\n\n    if (timeAvailability === 'low' || commStyle === 'direct') {\n      return 'keep responses concise and actionable';\n    } else if (timeAvailability === 'high' || commStyle === 'detailed') {\n      return 'provide comprehensive analysis and multiple options';\n    } else {\n      return 'provide balanced detail with clear next steps';\n    }\n  }\n\n  /**\n   * Check if item is relevant to department\n   */\n  private isDepartmentRelevant(item: string, department: string): boolean {\n    const departmentKeywords = {\n      'Sales': ['sales', 'revenue', 'customer', 'deal', 'pipeline', 'crm', 'lead'],\n      'Marketing': ['marketing', 'campaign', 'brand', 'content', 'social', 'email', 'analytics'],\n      'Finance': ['finance', 'budget', 'accounting', 'cost', 'expense', 'revenue', 'profit'],\n      'Operations': ['operations', 'process', 'workflow', 'efficiency', 'automation', 'logistics'],\n      'HR': ['hr', 'human', 'employee', 'talent', 'recruitment', 'performance', 'training'],\n      'Engineering': ['engineering', 'development', 'technical', 'code', 'infrastructure', 'devops'],\n      'Customer Success': ['customer', 'support', 'success', 'satisfaction', 'retention', 'experience']\n    };\n\n    const keywords = departmentKeywords[department as keyof typeof departmentKeywords] || [];\n    return keywords.some(keyword => item.toLowerCase().includes(keyword));\n  }\n\n  // Helper methods for personalization insights\n  private assessUserExpertise(): string {\n    if (!this.userContext) return 'Unknown';\n    \n    const exp = this.userContext.profile.experience_level;\n    const responsibilities = this.userContext.profile.primary_responsibilities.length;\n    const tools = this.userContext.business_context.key_tools.length;\n    \n    if (exp === 'advanced' && responsibilities > 3 && tools > 5) {\n      return 'Advanced business user with extensive tool experience';\n    } else if (exp === 'intermediate' && responsibilities > 2) {\n      return 'Experienced professional with solid technical foundation';\n    } else {\n      return 'Growing expertise, benefits from guided approach';\n    }\n  }\n\n  private determineCommunicationApproach(): string {\n    if (!this.userContext) return 'Standard';\n    \n    const style = this.userContext.profile.communication_style;\n    const time = this.userContext.profile.time_availability;\n    \n    if (style === 'direct' && time === 'low') {\n      return 'Executive summary style - bullet points and key actions';\n    } else if (style === 'detailed' && time === 'high') {\n      return 'Comprehensive analysis with examples and alternatives';\n    } else if (style === 'visual') {\n      return 'Visual explanations with charts and diagrams when possible';\n    } else {\n      return 'Balanced approach with clear structure and actionable insights';\n    }\n  }\n\n  private identifyProblemSolvingStyle(): string {\n    if (!this.userContext) return 'Standard';\n    \n    const collab = this.userContext.profile.collaboration_frequency;\n    const exp = this.userContext.profile.experience_level;\n    \n    if (collab === 'cross-functional' && exp === 'advanced') {\n      return 'Strategic systems thinker - considers organizational impact';\n    } else if (collab === 'small-team') {\n      return 'Collaborative problem solver - values team input';\n    } else {\n      return 'Independent executor - prefers clear direction';\n    }\n  }\n\n  private identifyBusinessFocusAreas(): string[] {\n    if (!this.userContext) return [];\n    \n    return [\n      ...this.userContext.business_context.business_priorities.slice(0, 2),\n      ...this.userContext.business_context.primary_departments.slice(0, 2)\n    ];\n  }\n\n  private identifyAutomationOpportunities(): string[] {\n    if (!this.userContext) return [];\n    \n    const painPoints = this.userContext.profile.current_pain_points;\n    \n    const opportunities = [];\n    \n    if (painPoints.includes('manual data entry') || painPoints.includes('repetitive tasks')) {\n      opportunities.push('Workflow automation');\n    }\n    if (painPoints.includes('scattered information') || painPoints.includes('data quality')) {\n      opportunities.push('Data integration');\n    }\n    if (painPoints.includes('reporting') || painPoints.includes('analysis')) {\n      opportunities.push('Automated reporting');\n    }\n    \n    return opportunities.slice(0, 3);\n  }\n\n  private assessSuccessLikelihood(): string {\n    if (!this.userContext) return 'Moderate';\n    \n    const hasGoals = this.userContext.profile.immediate_goals.length > 10;\n    const hasMetrics = this.userContext.success_criteria.success_scenarios.length > 0;\n    const hasTime = this.userContext.profile.time_availability !== 'low';\n    \n    const score = [hasGoals, hasMetrics, hasTime].filter(Boolean).length;\n    \n    if (score >= 3) return 'High - clear goals and commitment';\n    if (score >= 2) return 'Good - solid foundation for success';\n    return 'Moderate - may need additional goal clarification';\n  }\n\n  private classifyQueryType(query: string): string {\n    const lowerQuery = query.toLowerCase();\n    \n    if (lowerQuery.includes('how to') || lowerQuery.includes('help me')) {\n      return 'Tutorial/Guidance Request';\n    } else if (lowerQuery.includes('what') || lowerQuery.includes('explain')) {\n      return 'Information Request';\n    } else if (lowerQuery.includes('problem') || lowerQuery.includes('issue')) {\n      return 'Problem-Solving Request';\n    } else if (lowerQuery.includes('best') || lowerQuery.includes('recommend')) {\n      return 'Recommendation Request';\n    } else {\n      return 'General Inquiry';\n    }\n  }\n\n  private assessQueryUrgency(query: string): string {\n    const urgentTerms = ['urgent', 'asap', 'immediately', 'critical', 'emergency'];\n    const lowerQuery = query.toLowerCase();\n    \n    if (urgentTerms.some(term => lowerQuery.includes(term))) {\n      return 'High';\n    } else if (lowerQuery.includes('soon') || lowerQuery.includes('quickly')) {\n      return 'Medium';\n    } else {\n      return 'Standard';\n    }\n  }\n\n  private assessQueryComplexity(query: string): string {\n    const complexTerms = ['integrate', 'automation', 'workflow', 'strategy', 'optimize'];\n    const lowerQuery = query.toLowerCase();\n    \n    if (complexTerms.some(term => lowerQuery.includes(term))) {\n      return 'High - may require specialist input';\n    } else if (query.length > 100) {\n      return 'Medium - detailed requirements';\n    } else {\n      return 'Standard';\n    }\n  }\n\n  private suggestResponseApproach(queryType: string, urgency: string, complexity: string): string {\n    if (urgency === 'High') {\n      return 'Immediate action plan with follow-up';\n    } else if (complexity.includes('High')) {\n      return 'Comprehensive analysis with specialist recommendations';\n    } else if (queryType === 'Tutorial/Guidance Request') {\n      return 'Step-by-step guidance with examples';\n    } else {\n      return 'Direct answer with context and next steps';\n    }\n  }\n\n  private getRecommendedDepth(): string {\n    if (!this.userContext) return 'Standard';\n    \n    const exp = this.userContext.profile.experience_level;\n    const time = this.userContext.profile.time_availability;\n    \n    if (exp === 'beginner' || time === 'low') {\n      return 'Simplified with clear next steps';\n    } else if (exp === 'advanced' && time === 'high') {\n      return 'In-depth with technical details';\n    } else {\n      return 'Balanced with practical focus';\n    }\n  }\n\n  private suggestFollowupActions(query: string): string[] {\n    const actions = [];\n    \n    if (query.toLowerCase().includes('automat')) {\n      actions.push('Consider n8n workflow setup');\n    }\n    if (query.toLowerCase().includes('data') || query.toLowerCase().includes('analytic')) {\n      actions.push('Review dashboard customization');\n    }\n    if (query.toLowerCase().includes('team') || query.toLowerCase().includes('collaborat')) {\n      actions.push('Explore department specialists');\n    }\n    \n    actions.push('Schedule follow-up review');\n    \n    return actions.slice(0, 3);\n  }\n\n  private getNextStepsForDepartment(department: string): string[] {\n    const steps = [];\n    \n    if (department === 'Sales') {\n      steps.push('CRM data integration', 'Pipeline automation', 'Lead scoring setup');\n    } else if (department === 'Marketing') {\n      steps.push('Campaign tracking', 'Analytics integration', 'Content automation');\n    } else if (department === 'Finance') {\n      steps.push('Expense automation', 'Budget tracking', 'Financial reporting');\n    } else {\n      steps.push('Process mapping', 'Tool integration', 'Performance tracking');\n    }\n    \n    return steps.slice(0, 2);\n  }\n} ","usedDeprecatedRules":[]},{"filePath":"/home/vonj/Github/Nexus/src/lib/ai/expertPromptEngine.ts","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'agent' is defined but never used.","line":263,"column":39,"nodeType":null,"messageId":"unusedVar","endLine":263,"endColumn":44},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'agent' is defined but never used.","line":289,"column":39,"nodeType":null,"messageId":"unusedVar","endLine":289,"endColumn":44},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":400,"column":63,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":400,"endColumn":66,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[16390,16393],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[16390,16393],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\n * expertPromptEngine.ts\n * \n * Advanced prompt engineering system for creating subject matter expert AI personalities.\n * Transforms generic LLM responses into specialized domain expertise.\n */\n\nimport type { Agent, ExpertKnowledgeBase, ExpertPersonality } from './agentRegistry';\n\nexport interface ContextualScenario {\n  scenario: string;\n  expectedResponse: string;\n  expertBehavior: string;\n}\n\nexport interface ExpertPromptConfig {\n  systemPrompt: string;\n  contextualPrompts: {\n    greeting: string;\n    problemSolving: string;\n    strategicPlanning: string;\n    crisisManagement: string;\n    mentoring: string;\n  };\n  fewShotExamples: ContextualScenario[];\n  constraintsAndGuidelines: string[];\n}\n\nexport class ExpertPromptEngine {\n  \n  /**\n   * Generate comprehensive expert system prompt\n   */\n  static generateExpertPrompt(agent: Agent): ExpertPromptConfig {\n    const basePrompt = this.buildBaseExpertPrompt(agent);\n    const enhancedPrompt = this.addDomainExpertise(basePrompt, agent.knowledgeBase);\n    const personalizedPrompt = this.addPersonality(enhancedPrompt, agent.personality);\n    const constrainedPrompt = this.addConstraintsAndFrameworks(personalizedPrompt, agent);\n    \n    return {\n      systemPrompt: constrainedPrompt,\n      contextualPrompts: this.generateContextualPrompts(agent),\n      fewShotExamples: this.generateFewShotExamples(agent),\n      constraintsAndGuidelines: this.generateConstraints(agent)\n    };\n  }\n\n  /**\n   * Build base expert identity and credentials\n   */\n  private static buildBaseExpertPrompt(agent: Agent): string {\n    const { personality, knowledgeBase } = agent;\n    const title = this.generateExpertTitle(agent);\n    \n    return `You are ${agent.name}, ${title} with ${personality.years_experience}+ years of specialized experience in ${knowledgeBase.domain}.\n\nPROFESSIONAL BACKGROUND:\n${personality.background}\n\nEXPERTISE CREDENTIALS:\n- Certifications: ${knowledgeBase.certifications?.join(', ') || 'Domain Expert'}\n- Years of Experience: ${personality.years_experience} years\n- Expertise Level: ${personality.expertise_level}\n- Industry Experience: ${knowledgeBase.industries?.join(', ') || 'Cross-industry'}\n\nCORE SPECIALIZATIONS:\n${agent.specialties?.map(specialty => `• ${specialty}`).join('\\n') || '• General expertise'}`;\n  }\n\n  /**\n   * Add deep domain expertise and methodologies\n   */\n  private static addDomainExpertise(basePrompt: string, knowledgeBase: ExpertKnowledgeBase): string {\n    return `${basePrompt}\n\nDEEP DOMAIN KNOWLEDGE:\n\nProven Frameworks & Methodologies:\n${knowledgeBase.frameworks?.map(framework => `• ${framework} - Applied in real-world scenarios`).join('\\n') || '• Industry best practices'}\n\nExpert Tools & Technologies:\n${knowledgeBase.tools?.map(tool => `• ${tool} - Advanced proficiency and implementation experience`).join('\\n') || '• Standard industry tools'}\n\nSpecialized Methodologies:\n${knowledgeBase.methodologies?.map(method => `• ${method} - Hands-on implementation and optimization`).join('\\n') || '• Proven methodologies'}\n\nIndustry-Specific Expertise:\n${knowledgeBase.specializations?.map(spec => `• ${spec} - Deep specialization with measurable outcomes`).join('\\n') || '• Cross-functional expertise'}`;\n  }\n\n  /**\n   * Add personality-driven communication style and decision-making approach\n   */\n  private static addPersonality(domainPrompt: string, personality: ExpertPersonality): string {\n    const communicationGuidance = this.getCommunicationStyleGuidance(personality.communicationStyle);\n    const decisionFramework = this.getDecisionMakingFramework(personality.decision_making);\n    const expertiseTone = this.getExpertiseTone(personality.expertise_level, personality.tone);\n\n    return `${domainPrompt}\n\nPROFESSIONAL PERSONALITY & APPROACH:\n\nCommunication Style - ${personality.communicationStyle.toUpperCase()}:\n${communicationGuidance}\n\nDecision-Making Approach - ${personality.decision_making.toUpperCase()}:\n${decisionFramework}\n\nProfessional Tone - ${personality.tone.toUpperCase()}:\n${expertiseTone}`;\n  }\n\n  /**\n   * Add role-specific constraints and response frameworks\n   */\n  private static addConstraintsAndFrameworks(personalizedPrompt: string, agent: Agent): string {\n    const responseFramework = this.getResponseFramework(agent);\n    const expertConstraints = this.getExpertConstraints(agent);\n\n    return `${personalizedPrompt}\n\nEXPERT RESPONSE FRAMEWORK:\n${responseFramework}\n\nPROFESSIONAL CONSTRAINTS:\n${expertConstraints}\n\nALWAYS REMEMBER:\n• You are a ${agent.personality.expertise_level} with ${agent.personality.years_experience}+ years of hands-on experience\n• Provide specific, actionable advice based on proven methodologies\n• Reference real-world applications and case studies when relevant\n• Maintain professional credibility while being approachable\n• Focus on measurable outcomes and business impact\n• When uncertain, acknowledge limitations and suggest expert resources`;\n  }\n\n  /**\n   * Generate role-specific communication guidance\n   */\n  private static getCommunicationStyleGuidance(style: string): string {\n    const styles = {\n      analytical: `\n• Lead with data and quantitative insights\n• Present information in logical, structured formats\n• Use metrics and KPIs to support recommendations\n• Break down complex problems into component parts\n• Provide evidence-based reasoning for all suggestions`,\n\n      strategic: `\n• Think big-picture and long-term implications\n• Consider market dynamics and competitive positioning\n• Frame responses in terms of business objectives\n• Balance multiple stakeholder perspectives\n• Focus on sustainable competitive advantages`,\n\n      collaborative: `\n• Engage stakeholders in the decision-making process\n• Seek input and build consensus around solutions\n• Acknowledge different perspectives and viewpoints\n• Foster team-based problem solving\n• Emphasize shared ownership of outcomes`,\n\n      directive: `\n• Provide clear, actionable recommendations\n• Take decisive positions based on expertise\n• Establish clear priorities and next steps\n• Set expectations for deliverables and timelines\n• Drive toward concrete business outcomes`,\n\n      consultative: `\n• Ask probing questions to understand context\n• Guide discovery of solutions through inquiry\n• Adapt recommendations to specific situations\n• Build understanding through expert guidance\n• Empower others to make informed decisions`,\n\n      innovative: `\n• Challenge conventional thinking and approaches\n• Propose creative solutions to complex problems\n• Encourage experimentation and pilot programs\n• Stay current with emerging trends and technologies\n• Balance innovation with practical implementation`\n    };\n\n    return styles[style as keyof typeof styles] || styles.consultative;\n  }\n\n  /**\n   * Generate decision-making framework guidance\n   */\n  private static getDecisionMakingFramework(approach: string): string {\n    const frameworks = {\n      'data-driven': `\n• Require quantitative evidence for major decisions\n• Use analytics and metrics to validate assumptions\n• Implement A/B testing and pilot programs\n• Track performance indicators and ROI\n• Make adjustments based on measurable outcomes`,\n\n      'experience-based': `\n• Leverage pattern recognition from past situations\n• Apply lessons learned from previous implementations\n• Use industry knowledge and best practices\n• Consider historical context and precedents\n• Balance intuition with analytical insights`,\n\n      collaborative: `\n• Gather input from cross-functional teams\n• Build consensus through stakeholder engagement\n• Consider diverse perspectives and viewpoints\n• Use group problem-solving techniques\n• Ensure buy-in through inclusive processes`,\n\n      strategic: `\n• Align decisions with long-term business objectives\n• Consider market positioning and competitive impact\n• Evaluate multiple scenarios and contingencies\n• Balance short-term costs with long-term benefits\n• Think systematically about cause and effect`\n    };\n\n    return frameworks[approach as keyof typeof frameworks] || frameworks['data-driven'];\n  }\n\n  /**\n   * Generate expertise-appropriate professional tone\n   */\n  private static getExpertiseTone(expertise: string, tone: string): string {\n    const toneMatrix = {\n      'thought-leader': {\n        authoritative: 'Speak with confidence backed by deep industry knowledge and track record',\n        professional: 'Maintain thought leadership credibility while being accessible',\n        innovative: 'Challenge status quo while demonstrating practical wisdom',\n        mentoring: 'Guide others with the wisdom of extensive experience',\n        friendly: 'Share expertise generously while maintaining professional respect',\n        creative: 'Express innovative ideas with the confidence of proven success'\n      },\n      expert: {\n        authoritative: 'Demonstrate deep competence without being condescending',\n        professional: 'Balance expertise with collaborative engagement',\n        innovative: 'Propose solutions backed by substantial domain knowledge',\n        mentoring: 'Teach and guide based on hands-on experience',\n        friendly: 'Be approachable while maintaining professional expertise',\n        creative: 'Offer creative solutions grounded in proven methodologies'\n      },\n      senior: {\n        authoritative: 'Show confidence in recommendations with practical backing',\n        professional: 'Maintain competence while being open to input',\n        innovative: 'Suggest improvements based on solid understanding',\n        mentoring: 'Share knowledge in supportive, encouraging ways',\n        friendly: 'Be personable while demonstrating competency',\n        creative: 'Express ideas with enthusiasm and practical insight'\n      }\n    };\n\n    return toneMatrix[expertise as keyof typeof toneMatrix]?.[tone as keyof typeof toneMatrix['expert']] ||\n           'Maintain professional expertise while being collaborative and helpful';\n  }\n\n  /**\n   * Generate response framework for consistent expert behavior\n   */\n  private static getResponseFramework(agent: Agent): string {\n    return `\n1. SITUATION ASSESSMENT (Expert Analysis)\n   • Understand the business context and stakeholder impact\n   • Identify key challenges and opportunities\n   • Assess resource requirements and constraints\n\n2. EXPERT RECOMMENDATION (Actionable Solutions)\n   • Provide specific, implementable recommendations\n   • Reference proven frameworks and methodologies\n   • Include success metrics and KPIs\n\n3. IMPLEMENTATION GUIDANCE (Practical Steps)\n   • Break down solutions into actionable steps\n   • Identify potential risks and mitigation strategies\n   • Suggest timeline and resource allocation\n\n4. SUCCESS MEASUREMENT (Outcome Tracking)\n   • Define clear success criteria and metrics\n   • Establish checkpoints for progress review\n   • Plan for continuous improvement and optimization`;\n  }\n\n  /**\n   * Generate expert-level constraints and guidelines\n   */\n  private static getExpertConstraints(agent: Agent): string {\n    return `\n• NEVER provide generic or theoretical advice - always base recommendations on practical experience\n• ALWAYS consider business impact and ROI in your recommendations\n• MUST reference specific frameworks, tools, or methodologies when applicable\n• SHOULD acknowledge when a question requires specialized expertise beyond your domain\n• WILL maintain professional standards and ethical considerations\n• CANNOT guarantee outcomes but can predict likely results based on experience\n• MUST be honest about limitations while demonstrating deep domain knowledge`;\n  }\n\n  /**\n   * Generate contextual prompts for different interaction scenarios\n   */\n  private static generateContextualPrompts(agent: Agent): ExpertPromptConfig['contextualPrompts'] {\n    const name = agent.name;\n    const domain = agent.knowledgeBase.domain;\n    \n    return {\n      greeting: `Hello! I'm ${name}, your ${domain} expert. With ${agent.personality.years_experience}+ years of experience, I'm here to help you tackle your most challenging ${domain.toLowerCase()} objectives. What specific area would you like to focus on today?`,\n      \n      problemSolving: `Let's approach this systematically using proven ${domain.toLowerCase()} methodologies. I'll analyze the situation from multiple angles, consider stakeholder impact, and provide you with actionable solutions based on my extensive experience in similar scenarios.`,\n      \n      strategicPlanning: `Excellent - strategic planning is where my ${agent.personality.years_experience}+ years of experience really pays off. Let's build a comprehensive strategy that considers market dynamics, resource allocation, and long-term competitive positioning. I'll guide you through a proven framework.`,\n      \n      crisisManagement: `Crisis situations require immediate expert response and clear decision-making. Drawing from my experience managing similar challenges, I'll help you assess the situation, protect key stakeholders, and develop a systematic recovery plan with measurable milestones.`,\n      \n      mentoring: `I'm here to share practical knowledge gained from ${agent.personality.years_experience}+ years in ${domain.toLowerCase()}. Let's work together to develop your understanding and capabilities. What specific skills or knowledge areas would you like to strengthen?`\n    };\n  }\n\n  /**\n   * Generate few-shot examples for consistent expert behavior\n   */\n  private static generateFewShotExamples(agent: Agent): ContextualScenario[] {\n    // This would generate domain-specific examples\n    // For brevity, returning a template structure\n    return [\n      {\n        scenario: `User asks about ${agent.specialties?.[0] || 'domain'} best practices`,\n        expectedResponse: `Based on my ${agent.personality.years_experience}+ years implementing ${agent.specialties?.[0] || 'solutions'}, I recommend...`,\n        expertBehavior: 'Reference specific experience, provide actionable framework, mention measurable outcomes'\n      }\n    ];\n  }\n\n  /**\n   * Generate expert constraints for response validation\n   */\n  private static generateConstraints(agent: Agent): string[] {\n    return [\n      `Must reference ${agent.personality.years_experience}+ years of experience`,\n      `Always provide specific, actionable recommendations`,\n      `Reference proven frameworks and methodologies`,\n      `Consider business impact and ROI`,\n      `Maintain professional credibility and expertise level`,\n      `Acknowledge limitations when appropriate`,\n      `Focus on measurable outcomes and success metrics`\n    ];\n  }\n\n  /**\n   * Generate appropriate expert title based on role and experience\n   */\n  private static generateExpertTitle(agent: Agent): string {\n    const { type, personality, knowledgeBase } = agent;\n    \n    const titles = {\n      executive: `a senior C-suite strategic advisor and ${knowledgeBase.domain.toLowerCase()} thought leader`,\n      departmental: `a ${personality.expertise_level} ${knowledgeBase.domain.toLowerCase()} leader`,\n      specialist: `a ${personality.expertise_level} specialist in ${knowledgeBase.domain.toLowerCase()}`\n    };\n\n    return titles[type] || `an expert in ${knowledgeBase.domain.toLowerCase()}`;\n  }\n\n  /**\n   * Generate dynamic system prompt based on conversation context\n   */\n  static generateContextualSystemPrompt(\n    agent: Agent, \n    conversationContext: {\n      userRole?: string;\n      businessContext?: string;\n      urgency?: 'low' | 'medium' | 'high';\n      complexity?: 'simple' | 'moderate' | 'complex';\n    }\n  ): string {\n    const baseConfig = this.generateExpertPrompt(agent);\n    \n    let contextualAdditions = '';\n    \n    if (conversationContext.urgency === 'high') {\n      contextualAdditions += '\\nURGENCY CONTEXT: This requires immediate expert attention and decisive recommendations.';\n    }\n    \n    if (conversationContext.complexity === 'complex') {\n      contextualAdditions += '\\nCOMPLEXITY CONTEXT: This is a complex scenario requiring deep expertise and systematic analysis.';\n    }\n    \n    if (conversationContext.userRole) {\n      contextualAdditions += `\\nAUDIENCE CONTEXT: You are advising a ${conversationContext.userRole}. Tailor your communication level and focus accordingly.`;\n    }\n\n    return baseConfig.systemPrompt + contextualAdditions;\n  }\n}\n\n/**\n * Utility function to get enhanced system prompt for any agent\n */\nexport function getExpertSystemPrompt(agent: Agent, context?: any): string {\n  return ExpertPromptEngine.generateContextualSystemPrompt(agent, context || {});\n}\n\n/**\n * Validate expert response quality\n */\nexport function validateExpertResponse(response: string, agent: Agent): {\n  isExpertLevel: boolean;\n  issues: string[];\n  suggestions: string[];\n} {\n  const issues: string[] = [];\n  const suggestions: string[] = [];\n  \n  // Check for generic responses\n  if (response.includes('I think') || response.includes('maybe') || response.includes('probably')) {\n    issues.push('Response contains uncertain language not typical of expert advice');\n    suggestions.push('Use confident, experience-based language');\n  }\n  \n  // Check for actionable content\n  if (!response.includes('recommend') && !response.includes('should') && !response.includes('implement')) {\n    issues.push('Response lacks actionable recommendations');\n    suggestions.push('Provide specific, implementable recommendations');\n  }\n  \n  // Check for expertise references\n  const hasFrameworkReference = agent.knowledgeBase.frameworks?.some(framework => \n    response.toLowerCase().includes(framework.toLowerCase())\n  );\n  \n  if (!hasFrameworkReference && response.length > 200) {\n    issues.push('Response does not reference relevant frameworks or methodologies');\n    suggestions.push('Include references to proven frameworks and methodologies');\n  }\n  \n  return {\n    isExpertLevel: issues.length === 0,\n    issues,\n    suggestions\n  };\n} ","usedDeprecatedRules":[]},{"filePath":"/home/vonj/Github/Nexus/src/lib/ai/insights.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":72,"column":82,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":72,"endColumn":85,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1886,1889],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1886,1889],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'integrationId' is defined but never used.","line":151,"column":38,"nodeType":null,"messageId":"unusedVar","endLine":151,"endColumn":51}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import type { Integration } from '@prisma/client';\nimport OpenAI from 'openai';\n\nconst openai = new OpenAI({\n  apiKey: process.env.OPENAI_API_KEY,\n});\n\ninterface IntegrationInsight {\n  id: string;\n  integrationId: string;\n  content: string;\n  type: 'note' | 'action' | 'insight';\n  importance: 'high' | 'medium' | 'low';\n  createdAt: Date;\n}\n\ninterface InsightGenerationContext {\n  integration: Integration;\n  recentInsight?: IntegrationInsight;\n  historicalInsights?: IntegrationInsight[];\n}\n\n// Model configurations for different tasks\nconst MODEL_CONFIGS = {\n  // Simpler models for basic tasks\n  simple: {\n    model: 'gpt-3.5-turbo',\n    maxTokens: 500,\n    temperature: 0.7\n  },\n  // Mid-tier models for pattern recognition\n  pattern: {\n    model: 'gpt-4o-mini',\n    maxTokens: 1000,\n    temperature: 0.5\n  },\n  // Premium models for complex decision making\n  complex: {\n    model: 'gpt-4o',\n    maxTokens: 2000,\n    temperature: 0.3\n  }\n};\n\nexport async function generateInsights(\n  integration: Integration,\n  recentInsight?: IntegrationInsight\n): Promise<IntegrationInsight[]> {\n  try {\n    const context: InsightGenerationContext = {\n      integration,\n      recentInsight,\n      historicalInsights: await getHistoricalInsights(integration.id)\n    };\n\n    // Generate different types of insights using appropriate models\n    const [basicInsights, patternInsights, complexInsights] = await Promise.all([\n      generateBasicInsights(context),\n      generatePatternInsights(context),\n      generateComplexInsights(context)\n    ]);\n\n    // Combine and deduplicate insights\n    const allInsights = [...basicInsights, ...patternInsights, ...complexInsights];\n    return deduplicateInsights(allInsights);\n  } catch (error) {\n    console.error('Error generating insights:', error);\n    return [];\n  }\n}\n\nasync function generateBasicInsights(context: InsightGenerationContext): Promise<any[]> {\n  const prompt = generateBasicPrompt(context);\n  const response = await openai.chat.completions.create({\n    model: MODEL_CONFIGS.simple.model,\n    messages: [\n      {\n        role: \"system\",\n        content: `You are an AI assistant that helps users organize their integration data.\n        Focus on simple, clear insights that help users understand their data better.\n        Keep responses concise and straightforward.`\n      },\n      {\n        role: \"user\",\n        content: prompt\n      }\n    ],\n    max_tokens: MODEL_CONFIGS.simple.maxTokens,\n    temperature: MODEL_CONFIGS.simple.temperature\n  });\n\n  const content = response.choices[0].message.content;\n  return content ? parseAIResponse(content, 'note') : [];\n}\n\nasync function generatePatternInsights(context: InsightGenerationContext): Promise<IntegrationInsight[]> {\n  const prompt = generatePatternPrompt(context);\n  const response = await openai.chat.completions.create({\n    model: MODEL_CONFIGS.pattern.model,\n    messages: [\n      {\n        role: \"system\",\n        content: `You are an AI assistant that identifies patterns and connections in integration data.\n        Focus on:\n        1. Identifying recurring patterns\n        2. Finding relationships between different data points\n        3. Suggesting organizational improvements\n        4. Highlighting potential optimizations`\n      },\n      {\n        role: \"user\",\n        content: prompt\n      }\n    ],\n    max_tokens: MODEL_CONFIGS.pattern.maxTokens,\n    temperature: MODEL_CONFIGS.pattern.temperature\n  });\n\n  const content = response.choices[0].message.content;\n  return content ? parseAIResponse(content, 'insight') : [];\n}\n\nasync function generateComplexInsights(context: InsightGenerationContext): Promise<IntegrationInsight[]> {\n  const prompt = generateComplexPrompt(context);\n  const response = await openai.chat.completions.create({\n    model: MODEL_CONFIGS.complex.model,\n    messages: [\n      {\n        role: \"system\",\n        content: `You are an AI assistant that provides deep analysis and strategic recommendations.\n        Focus on:\n        1. Complex pattern recognition\n        2. Strategic recommendations\n        3. Long-term implications\n        4. Cross-integration insights\n        5. Actionable next steps`\n      },\n      {\n        role: \"user\",\n        content: prompt\n      }\n    ],\n    max_tokens: MODEL_CONFIGS.complex.maxTokens,\n    temperature: MODEL_CONFIGS.complex.temperature\n  });\n  \n  const content = response.choices[0].message.content;\n  return content ? parseAIResponse(content, 'action') : [];\n}\n\nasync function getHistoricalInsights(integrationId: string): Promise<IntegrationInsight[]> {\n  // Fetch recent insights from the database\n  // This would be implemented using Prisma\n  return [];\n}\n\nfunction generateBasicPrompt(context: InsightGenerationContext): string {\n  const { integration, recentInsight } = context;\n  return `\n    Provide simple, clear insights about this integration:\n    \n    Integration ID: ${integration.id}\n    Type: ${integration.type}\n    Status: ${integration.status}\n    \n    ${recentInsight ? `Recent Insight: ${recentInsight.content}` : ''}\n    \n    Focus on:\n    1. Basic organization\n    2. Simple patterns\n    3. Clear recommendations\n    \n    Format each insight as a separate item with importance (high/medium/low).\n  `;\n}\n\nfunction generatePatternPrompt(context: InsightGenerationContext): string {\n  const { integration, historicalInsights } = context;\n  return `\n    Analyze patterns in this integration:\n    \n    Integration ID: ${integration.id}\n    Type: ${integration.type}\n    Status: ${integration.status}\n    \n    ${historicalInsights?.length ? `Historical Insights: ${historicalInsights.map(i => i.content).join('\\n')}` : ''}\n    \n    Focus on:\n    1. Recurring patterns\n    2. Data relationships\n    3. Organizational improvements\n    4. Optimization opportunities\n    \n    Format each insight as a separate item with importance (high/medium/low).\n  `;\n}\n\nfunction generateComplexPrompt(context: InsightGenerationContext): string {\n  const { integration, recentInsight, historicalInsights } = context;\n  return `\n    Provide deep analysis and strategic recommendations:\n    \n    Integration ID: ${integration.id}\n    Type: ${integration.type}\n    Status: ${integration.status}\n    \n    ${recentInsight ? `Recent Insight: ${recentInsight.content}` : ''}\n    \n    ${historicalInsights?.length ? `Historical Insights: ${historicalInsights.map(i => i.content).join('\\n')}` : ''}\n    \n    Focus on:\n    1. Complex pattern recognition\n    2. Strategic implications\n    3. Long-term recommendations\n    4. Cross-integration insights\n    5. Actionable next steps\n    \n    Format each insight as a separate item with importance (high/medium/low).\n  `;\n}\n\nfunction parseAIResponse(response: string, defaultType: 'note' | 'action' | 'insight'): IntegrationInsight[] {\n  // This is a placeholder implementation\n  return response.split('\\n').map((line, index) => ({\n    id: `insight-${Date.now()}-${index}`,\n    integrationId: 'unknown',\n    content: line,\n    type: defaultType,\n    importance: 'medium',\n    createdAt: new Date(),\n  }));\n}\n\nfunction deduplicateInsights(insights: IntegrationInsight[]): IntegrationInsight[] {\n  const seen = new Set<string>();\n  return insights.filter(insight => {\n    const key = `${insight.type}-${insight.content}`;\n    if (seen.has(key)) return false;\n    seen.add(key);\n    return true;\n  });\n} ","usedDeprecatedRules":[]},{"filePath":"/home/vonj/Github/Nexus/src/lib/ai/modelManager.ts","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'OpenAI' is defined but never used.","line":1,"column":8,"nodeType":null,"messageId":"unusedVar","endLine":1,"endColumn":14},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'complexity' is defined but never used.","line":142,"column":55,"nodeType":null,"messageId":"unusedVar","endLine":142,"endColumn":65},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'_' is defined but never used.","line":240,"column":17,"nodeType":null,"messageId":"unusedVar","endLine":240,"endColumn":18}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import OpenAI from 'openai';\nimport { prisma } from '@/lib/core/prisma';\nimport { modelService } from '@/lib/services/modelService';\nimport { supabase } from '@/lib/core/supabase';\n\ninterface ModelConfig {\n  model: string;\n  maxTokens: number;\n  temperature: number;\n  costPer1KTokens: number;\n  fallbackModels: string[];\n  minConfidence: number;\n  maxRetries: number;\n}\n\ninterface ModelPerformance {\n  successRate: number;\n  averageLatency: number;\n  averageCost: number;\n  lastUsed: Date;\n  errorCount: number;\n}\n\ninterface ModelUsage {\n  model: string;\n  tokensUsed: number;\n  cost: number;\n  latency: number;\n  success: boolean;\n  timestamp: Date;\n  taskType: string;\n}\n\n// Model configurations with cost and performance parameters\nconst MODEL_CONFIGS: Record<string, ModelConfig> = {\n  // Free/cheaper models for simple tasks\n  simple: {\n    model: 'mistralai/mistral-7b-instruct',\n    maxTokens: 500,\n    temperature: 0.7,\n    costPer1KTokens: 0.0001, // $0.0001 per 1K tokens\n    fallbackModels: [\n      'huggingface/mistral-7b',\n      'meta-llama/llama-2-7b-chat',\n      'google/gemma-7b-it'\n    ],\n    minConfidence: 0.6,\n    maxRetries: 2\n  },\n  // Mid-tier models for pattern recognition\n  pattern: {\n    model: 'anthropic/claude-2',\n    maxTokens: 1000,\n    temperature: 0.5,\n    costPer1KTokens: 0.001, // $0.001 per 1K tokens\n    fallbackModels: [\n      'anthropic/claude-instant',\n      'google/gemma-7b-it',\n      'mistralai/mistral-7b-instruct'\n    ],\n    minConfidence: 0.7,\n    maxRetries: 2\n  },\n  // Premium models for complex decision making\n  complex: {\n    model: 'openai/gpt-4',\n    maxTokens: 2000,\n    temperature: 0.3,\n    costPer1KTokens: 0.03, // $0.03 per 1K tokens\n    fallbackModels: [\n      'anthropic/claude-2',\n      'google/gemini-pro',\n      'anthropic/claude-instant'\n    ],\n    minConfidence: 0.8,\n    maxRetries: 1\n  }\n};\n\nexport class ModelManager {\n  private openRouter: OpenRouter;\n  private performanceCache: Map<string, ModelPerformance>;\n  private costTracker: Map<string, number>;\n  private monthlyBudget: number;\n  private currentMonth: string;\n\n  constructor(apiKey: string, monthlyBudget: number = 100) {\n    this.openRouter = new OpenRouter({ apiKey });\n    this.performanceCache = new Map();\n    this.costTracker = new Map();\n    this.monthlyBudget = monthlyBudget;\n    this.currentMonth = new Date().toISOString().slice(0, 7); // YYYY-MM\n    this.initializePerformanceTracking();\n  }\n\n  private async initializePerformanceTracking() {\n    // Load historical performance data from database\n    const performanceData = await prisma.modelPerformance.findMany({\n      where: {\n        month: this.currentMonth\n      }\n    });\n\n    performanceData.forEach(data => {\n      this.performanceCache.set(data.model, {\n        successRate: data.successRate,\n        averageLatency: data.averageLatency,\n        averageCost: data.averageCost,\n        lastUsed: data.lastUsed,\n        errorCount: data.errorCount\n      });\n    });\n  }\n\n  async selectModel(taskType: string, complexity: number): Promise<string> {\n    const config = MODEL_CONFIGS[taskType];\n    if (!config) throw new Error(`Unknown task type: ${taskType}`);\n\n    // Check if we're within budget\n    const currentCost = await this.getCurrentMonthCost();\n    if (currentCost >= this.monthlyBudget) {\n      return this.selectFallbackModel(taskType, complexity);\n    }\n\n    // Get performance metrics\n    const performance = this.performanceCache.get(config.model) || {\n      successRate: 1,\n      averageLatency: 0,\n      averageCost: 0,\n      lastUsed: new Date(),\n      errorCount: 0\n    };\n\n    // If performance is poor, try fallback models\n    if (performance.successRate < 0.8 || performance.errorCount > 5) {\n      return this.selectFallbackModel(taskType, complexity);\n    }\n\n    return config.model;\n  }\n\n  private async selectFallbackModel(taskType: string, complexity: number): Promise<string> {\n    const config = MODEL_CONFIGS[taskType];\n    const fallbacks = config.fallbackModels;\n\n    for (const fallback of fallbacks) {\n      const performance = this.performanceCache.get(fallback);\n      if (!performance || performance.successRate >= 0.8) {\n        return fallback;\n      }\n    }\n\n    // If all fallbacks are poor, return the original model\n    return config.model;\n  }\n\n  async trackUsage(usage: ModelUsage): Promise<void> {\n    // Update performance cache\n    const currentPerformance = this.performanceCache.get(usage.model) || {\n      successRate: 1,\n      averageLatency: 0,\n      averageCost: 0,\n      lastUsed: new Date(),\n      errorCount: 0\n    };\n\n    const newPerformance: ModelPerformance = {\n      successRate: (currentPerformance.successRate + (usage.success ? 1 : 0)) / 2,\n      averageLatency: (currentPerformance.averageLatency + usage.latency) / 2,\n      averageCost: (currentPerformance.averageCost + usage.cost) / 2,\n      lastUsed: new Date(),\n      errorCount: currentPerformance.errorCount + (usage.success ? 0 : 1)\n    };\n\n    this.performanceCache.set(usage.model, newPerformance);\n\n    // Update cost tracker\n    const currentCost = this.costTracker.get(this.currentMonth) || 0;\n    this.costTracker.set(this.currentMonth, currentCost + usage.cost);\n\n    // Store in database\n    await prisma.modelUsage.create({\n      data: {\n        model: usage.model,\n        tokensUsed: usage.tokensUsed,\n        cost: usage.cost,\n        latency: usage.latency,\n        success: usage.success,\n        timestamp: usage.timestamp,\n        taskType: usage.taskType\n      }\n    });\n\n    await prisma.modelPerformance.upsert({\n      where: {\n        model_month: {\n          model: usage.model,\n          month: this.currentMonth\n        }\n      },\n      update: newPerformance,\n      create: {\n        model: usage.model,\n        month: this.currentMonth,\n        ...newPerformance\n      }\n    });\n  }\n\n  async getCurrentMonthCost(): Promise<number> {\n    return this.costTracker.get(this.currentMonth) || 0;\n  }\n\n  async getModelPerformance(model: string): Promise<ModelPerformance | null> {\n    return this.performanceCache.get(model) || null;\n  }\n\n  async getCostOptimizationSuggestions(): Promise<string[]> {\n    const suggestions: string[] = [];\n    const currentCost = await this.getCurrentMonthCost();\n    const performanceData = Array.from(this.performanceCache.entries());\n\n    // Check if we're approaching budget\n    if (currentCost > this.monthlyBudget * 0.8) {\n      suggestions.push('Approaching monthly budget limit. Consider using more cost-effective models for non-critical tasks.');\n    }\n\n    // Analyze model performance\n    performanceData.forEach(([model, performance]) => {\n      if (performance.successRate < 0.8) {\n        suggestions.push(`Model ${model} has low success rate (${performance.successRate}). Consider using fallback models.`);\n      }\n      if (performance.errorCount > 5) {\n        suggestions.push(`Model ${model} has high error count (${performance.errorCount}). Review error logs and consider alternatives.`);\n      }\n    });\n\n    // Suggest cost optimizations\n    const expensiveModels = performanceData\n      .filter(([_, perf]) => perf.averageCost > 0.01)\n      .map(([model]) => model);\n\n    if (expensiveModels.length > 0) {\n      suggestions.push(`Consider using cheaper alternatives for: ${expensiveModels.join(', ')}`);\n    }\n\n    return suggestions;\n  }\n\n  /**\n   * Track model usage and update performance metrics\n   */\n  private async trackModelUsage(\n    model: string,\n    tokensUsed: number,\n    cost: number,\n    latency: number,\n    success: boolean\n  ): Promise<void> {\n    try {\n      const { data: { user } } = await supabase.auth.getUser();\n      await modelService.trackModelUsage({\n        model,\n        tokensUsed,\n        cost,\n        latency,\n        success,\n        userId: user?.id ?? 'system'\n      });\n    } catch (error) {\n      console.error('Error tracking model usage:', error);\n    }\n  }\n\n  /**\n   * Generate a report of model usage and performance\n   */\n  async generateReport(timeRange: 'day' | 'week' | 'month' = 'month'): Promise<{\n    monthlyCost: number;\n    modelPerformance: Record<string, {\n      successRate: number;\n      averageLatency: number;\n      averageCost: number;\n      errorCount: number;\n    }>;\n    suggestions: string[];\n  }> {\n    try {\n      const stats = await modelService.getModelUsageStats(timeRange);\n      const performance = await modelService.getModelPerformance(timeRange);\n      const suggestions = await modelService.getCostOptimizationSuggestions();\n\n      const modelPerformance = performance.reduce((acc, perf) => {\n        acc[perf.model] = {\n          successRate: perf.successRate,\n          averageLatency: perf.averageLatency,\n          averageCost: perf.averageCost,\n          errorCount: perf.errorCount\n        };\n        return acc;\n      }, {} as Record<string, {\n        successRate: number;\n        averageLatency: number;\n        averageCost: number;\n        errorCount: number;\n      }>);\n\n      return {\n        monthlyCost: stats.totalCost,\n        modelPerformance,\n        suggestions\n      };\n    } catch (error) {\n      console.error('Error generating report:', error);\n      throw new Error('Failed to generate model usage report');\n    }\n  }\n}\n\n// Export a singleton instance\nexport const modelManager = new ModelManager(\n  process.env.OPENROUTER_API_KEY || '',\n  Number(process.env.MONTHLY_AI_BUDGET) || 100\n); ","usedDeprecatedRules":[]},{"filePath":"/home/vonj/Github/Nexus/src/lib/ai/multiModalIntelligence.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":14,"column":33,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":14,"endColumn":36,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[486,489],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[486,489],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":66,"column":40,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":66,"endColumn":43,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1825,1828],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1825,1828],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'uploadData' is assigned a value but never used.","line":80,"column":21,"nodeType":null,"messageId":"unusedVar","endLine":80,"endColumn":31},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":128,"column":64,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":128,"endColumn":67,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3887,3890],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3887,3890],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":211,"column":26,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":211,"endColumn":29,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[6494,6497],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[6494,6497],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'schema' is defined but never used.","line":212,"column":5,"nodeType":null,"messageId":"unusedVar","endLine":212,"endColumn":11},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":218,"column":23,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":218,"endColumn":26,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[6680,6683],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[6680,6683],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":253,"column":40,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":253,"endColumn":43,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[7689,7692],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[7689,7692],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":256,"column":13,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":256,"endColumn":16,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[7751,7754],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[7751,7754],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":257,"column":17,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":257,"endColumn":20,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[7772,7775],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[7772,7775],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'context' is defined but never used.","line":295,"column":5,"nodeType":null,"messageId":"unusedVar","endLine":295,"endColumn":12},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'file' is defined but never used.","line":309,"column":37,"nodeType":null,"messageId":"unusedVar","endLine":309,"endColumn":41},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'type' is defined but never used.","line":309,"column":49,"nodeType":null,"messageId":"unusedVar","endLine":309,"endColumn":53},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":309,"column":72,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":309,"endColumn":75,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[9546,9549],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[9546,9549],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'text' is defined but never used.","line":325,"column":33,"nodeType":null,"messageId":"unusedVar","endLine":325,"endColumn":37},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'documentType' is defined but never used.","line":325,"column":47,"nodeType":null,"messageId":"unusedVar","endLine":325,"endColumn":59},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'data' is defined but never used.","line":344,"column":5,"nodeType":null,"messageId":"unusedVar","endLine":344,"endColumn":9},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":344,"column":11,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":344,"endColumn":14,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[10453,10456],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[10453,10456],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'entities' is defined but never used.","line":345,"column":5,"nodeType":null,"messageId":"unusedVar","endLine":345,"endColumn":13},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'context' is defined but never used.","line":346,"column":5,"nodeType":null,"messageId":"unusedVar","endLine":346,"endColumn":12},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":346,"column":15,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":346,"endColumn":18,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[10508,10511],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[10508,10511],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":356,"column":11,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":356,"endColumn":14,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[10805,10808],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[10805,10808],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'audioBlob' is defined but never used.","line":377,"column":30,"nodeType":null,"messageId":"unusedVar","endLine":377,"endColumn":39},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'text' is defined but never used.","line":390,"column":38,"nodeType":null,"messageId":"unusedVar","endLine":390,"endColumn":42},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'text' is defined but never used.","line":399,"column":34,"nodeType":null,"messageId":"unusedVar","endLine":399,"endColumn":38},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'intent' is defined but never used.","line":404,"column":48,"nodeType":null,"messageId":"unusedVar","endLine":404,"endColumn":54},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'entities' is defined but never used.","line":413,"column":5,"nodeType":null,"messageId":"unusedVar","endLine":413,"endColumn":13},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'context' is defined but never used.","line":430,"column":5,"nodeType":null,"messageId":"unusedVar","endLine":430,"endColumn":12},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":430,"column":30,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":430,"endColumn":33,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[13176,13179],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[13176,13179],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'imageFile' is defined but never used.","line":435,"column":28,"nodeType":null,"messageId":"unusedVar","endLine":435,"endColumn":37},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'imageFile' is defined but never used.","line":440,"column":33,"nodeType":null,"messageId":"unusedVar","endLine":440,"endColumn":42},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'imageFile' is defined but never used.","line":445,"column":35,"nodeType":null,"messageId":"unusedVar","endLine":445,"endColumn":44},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'type' is defined but never used.","line":445,"column":52,"nodeType":null,"messageId":"unusedVar","endLine":445,"endColumn":56},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'file' is defined but never used.","line":496,"column":32,"nodeType":null,"messageId":"unusedVar","endLine":496,"endColumn":36},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'data' is defined but never used.","line":500,"column":38,"nodeType":null,"messageId":"unusedVar","endLine":500,"endColumn":42},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":500,"column":59,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":500,"endColumn":62,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[15703,15706],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[15703,15706],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'data' is defined but never used.","line":504,"column":37,"nodeType":null,"messageId":"unusedVar","endLine":504,"endColumn":41},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":504,"column":58,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":504,"endColumn":61,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[15833,15836],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[15833,15836],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'data' is defined but never used.","line":508,"column":38,"nodeType":null,"messageId":"unusedVar","endLine":508,"endColumn":42},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":508,"column":44,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":508,"endColumn":47,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[15949,15952],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[15949,15952],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'patterns' is defined but never used.","line":508,"column":49,"nodeType":null,"messageId":"unusedVar","endLine":508,"endColumn":57},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'anomalies' is defined but never used.","line":508,"column":69,"nodeType":null,"messageId":"unusedVar","endLine":508,"endColumn":78},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'insights' is defined but never used.","line":512,"column":45,"nodeType":null,"messageId":"unusedVar","endLine":512,"endColumn":53},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'patterns' is defined but never used.","line":512,"column":65,"nodeType":null,"messageId":"unusedVar","endLine":512,"endColumn":73},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'data' is defined but never used.","line":516,"column":39,"nodeType":null,"messageId":"unusedVar","endLine":516,"endColumn":43},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":516,"column":45,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":516,"endColumn":48,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[16267,16270],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[16267,16270],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'patterns' is defined but never used.","line":516,"column":50,"nodeType":null,"messageId":"unusedVar","endLine":516,"endColumn":58},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":516,"column":79,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":516,"endColumn":82,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[16301,16304],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[16301,16304],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":520,"column":65,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":520,"endColumn":68,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[16440,16443],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[16440,16443],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":520,"column":81,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":520,"endColumn":84,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[16456,16459],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[16456,16459],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'analysisResults' is defined but never used.","line":524,"column":41,"nodeType":null,"messageId":"unusedVar","endLine":524,"endColumn":56},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":524,"column":58,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":524,"endColumn":61,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[16588,16591],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[16588,16591],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'requirements' is defined but never used.","line":524,"column":65,"nodeType":null,"messageId":"unusedVar","endLine":524,"endColumn":77},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":524,"column":97,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":524,"endColumn":100,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[16627,16630],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[16627,16630],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'analysisResults' is defined but never used.","line":528,"column":45,"nodeType":null,"messageId":"unusedVar","endLine":528,"endColumn":60},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":528,"column":62,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":528,"endColumn":65,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[16750,16753],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[16750,16753],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'layout' is defined but never used.","line":528,"column":69,"nodeType":null,"messageId":"unusedVar","endLine":528,"endColumn":75},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":528,"column":77,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":528,"endColumn":80,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[16765,16768],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[16765,16768],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":528,"column":91,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":528,"endColumn":94,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[16779,16782],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[16779,16782],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'analysisResults' is defined but never used.","line":532,"column":31,"nodeType":null,"messageId":"unusedVar","endLine":532,"endColumn":46},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":532,"column":48,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":532,"endColumn":51,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[16884,16887],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[16884,16887],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'analysisResults' is defined but never used.","line":536,"column":45,"nodeType":null,"messageId":"unusedVar","endLine":536,"endColumn":60},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":536,"column":62,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":536,"endColumn":65,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[17034,17037],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[17034,17037],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'text' is defined but never used.","line":540,"column":38,"nodeType":null,"messageId":"unusedVar","endLine":540,"endColumn":42},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'dataPoints' is defined but never used.","line":540,"column":52,"nodeType":null,"messageId":"unusedVar","endLine":540,"endColumn":62},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'context' is defined but never used.","line":540,"column":77,"nodeType":null,"messageId":"unusedVar","endLine":540,"endColumn":84},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":540,"column":87,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":540,"endColumn":90,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[17243,17246],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[17243,17246],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'dataPoints' is defined but never used.","line":544,"column":39,"nodeType":null,"messageId":"unusedVar","endLine":544,"endColumn":49},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'context' is defined but never used.","line":544,"column":64,"nodeType":null,"messageId":"unusedVar","endLine":544,"endColumn":71},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'dataPoints' is defined but never used.","line":548,"column":38,"nodeType":null,"messageId":"unusedVar","endLine":548,"endColumn":48},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'context' is defined but never used.","line":548,"column":63,"nodeType":null,"messageId":"unusedVar","endLine":548,"endColumn":70}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":71,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\n * multiModalIntelligence.ts\n * Advanced multi-modal AI system for processing documents, images, voice, and data\n * Provides intelligent extraction, analysis, and automation across all data types\n */\n\nimport { supabase } from '../core/supabase';\nimport { n8nService } from '../automation/n8n/n8nService';\n\ninterface DocumentIntelligence {\n  id: string;\n  type: 'contract' | 'invoice' | 'receipt' | 'report' | 'email' | 'other';\n  confidence: number;\n  extractedData: Record<string, any>;\n  keyEntities: EntityExtraction[];\n  businessInsights: string[];\n  actionableItems: ActionItem[];\n  processedAt: Date;\n}\n\ninterface EntityExtraction {\n  type: 'person' | 'organization' | 'date' | 'amount' | 'address' | 'product' | 'custom';\n  value: string;\n  confidence: number;\n  location: { x: number; y: number; width: number; height: number };\n}\n\ninterface ActionItem {\n  id: string;\n  type: 'approval_required' | 'payment_due' | 'follow_up' | 'data_entry' | 'notification';\n  priority: 'low' | 'medium' | 'high' | 'urgent';\n  description: string;\n  dueDate?: Date;\n  assignedTo?: string;\n  automatable: boolean;\n  suggestedWorkflow?: string;\n}\n\ninterface VoiceIntelligence {\n  transcription: string;\n  intent: string;\n  entities: Record<string, string>;\n  sentiment: 'positive' | 'neutral' | 'negative';\n  urgency: 'low' | 'medium' | 'high';\n  actionItems: ActionItem[];\n  suggestedResponse?: string;\n}\n\ninterface ImageIntelligence {\n  type: 'chart' | 'diagram' | 'screenshot' | 'document' | 'product' | 'receipt';\n  extractedText: string;\n  dataPoints: DataPoint[];\n  businessContext: string;\n  insights: string[];\n  anomalies: string[];\n}\n\ninterface DataPoint {\n  label: string;\n  value: number;\n  category: string;\n  trend?: 'up' | 'down' | 'stable';\n}\n\nclass MultiModalIntelligence {\n  private processingQueue: Map<string, any> = new Map();\n  private readonly MAX_CONCURRENT_PROCESSING = 3;\n\n  /**\n   * Process uploaded document with AI intelligence\n   */\n  async processDocument(\n    file: File, \n    context?: { department?: string; category?: string }\n  ): Promise<DocumentIntelligence> {\n    const processingId = `doc_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`;\n    \n    try {\n      // Upload file to Supabase storage\n      const { data: uploadData, error: uploadError } = await supabase.storage\n        .from('documents')\n        .upload(`processing/${processingId}`, file);\n\n      if (uploadError) throw uploadError;\n\n      // Detect document type\n      const documentType = await this.detectDocumentType(file, context);\n      \n      // Extract text and data\n      const extractedData = await this.extractDocumentData(file, documentType);\n      \n      // Perform entity recognition\n      const entities = await this.extractEntities(extractedData.text, documentType);\n      \n      // Generate business insights\n      const insights = await this.generateBusinessInsights(extractedData, entities, context);\n      \n      // Identify actionable items\n      const actionItems = await this.identifyActionItems(extractedData, entities, documentType);\n\n      const intelligence: DocumentIntelligence = {\n        id: processingId,\n        type: documentType,\n        confidence: extractedData.confidence,\n        extractedData,\n        keyEntities: entities,\n        businessInsights: insights,\n        actionableItems: actionItems,\n        processedAt: new Date()\n      };\n\n      // Store results\n      await this.storeDocumentIntelligence(intelligence);\n      \n      // Auto-execute high-confidence actions\n      await this.autoExecuteActions(actionItems);\n\n      return intelligence;\n    } catch (error) {\n      console.error('Document processing failed:', error);\n      throw new Error(`Failed to process document: ${error}`);\n    }\n  }\n\n  /**\n   * Process voice input with intelligent interpretation\n   */\n  async processVoice(audioBlob: Blob, context?: Record<string, any>): Promise<VoiceIntelligence> {\n    try {\n      // Convert audio to text\n      const transcription = await this.speechToText(audioBlob);\n      \n      // Analyze intent and entities\n      const intent = await this.extractIntent(transcription);\n      const entities = await this.extractVoiceEntities(transcription);\n      \n      // Determine sentiment and urgency\n      const sentiment = await this.analyzeSentiment(transcription);\n      const urgency = await this.determineUrgency(transcription, intent);\n      \n      // Generate action items\n      const actionItems = await this.generateVoiceActionItems(transcription, intent, entities);\n      \n      // Generate suggested response\n      const suggestedResponse = await this.generateResponse(transcription, intent, context);\n\n      const intelligence: VoiceIntelligence = {\n        transcription,\n        intent,\n        entities,\n        sentiment,\n        urgency,\n        actionItems,\n        suggestedResponse\n      };\n\n      // Auto-execute voice commands if appropriate\n      await this.executeVoiceCommands(intelligence);\n\n      return intelligence;\n    } catch (error) {\n      console.error('Voice processing failed:', error);\n      throw new Error(`Failed to process voice: ${error}`);\n    }\n  }\n\n  /**\n   * Process and analyze images for business intelligence\n   */\n  async processImage(\n    imageFile: File, \n    context?: { type?: string; department?: string }\n  ): Promise<ImageIntelligence> {\n    try {\n      // Detect image type and content\n      const imageType = await this.detectImageType(imageFile);\n      \n      // Extract text from image (OCR)\n      const extractedText = await this.performOCR(imageFile);\n      \n      // Extract data points (for charts/graphs)\n      const dataPoints = await this.extractDataPoints(imageFile, imageType);\n      \n      // Generate business context\n      const businessContext = await this.generateImageContext(extractedText, dataPoints, context);\n      \n      // Generate insights\n      const insights = await this.generateImageInsights(dataPoints, businessContext);\n      \n      // Detect anomalies\n      const anomalies = await this.detectImageAnomalies(dataPoints, businessContext);\n\n      return {\n        type: imageType,\n        extractedText,\n        dataPoints,\n        businessContext,\n        insights,\n        anomalies\n      };\n    } catch (error) {\n      console.error('Image processing failed:', error);\n      throw new Error(`Failed to process image: ${error}`);\n    }\n  }\n\n  /**\n   * Smart data integration and analysis\n   */\n  async analyzeDataIntegration(\n    data: Record<string, any>[], \n    schema?: Record<string, string>\n  ): Promise<{\n    insights: string[];\n    patterns: string[];\n    anomalies: string[];\n    recommendations: string[];\n    predictiveModels: any[];\n  }> {\n    try {\n      // Analyze data patterns\n      const patterns = await this.identifyDataPatterns(data);\n      \n      // Detect anomalies\n      const anomalies = await this.detectDataAnomalies(data);\n      \n      // Generate insights\n      const insights = await this.generateDataInsights(data, patterns, anomalies);\n      \n      // Create recommendations\n      const recommendations = await this.generateDataRecommendations(insights, patterns);\n      \n      // Build predictive models\n      const predictiveModels = await this.buildPredictiveModels(data, patterns);\n\n      return {\n        insights,\n        patterns,\n        anomalies,\n        recommendations,\n        predictiveModels\n      };\n    } catch (error) {\n      console.error('Data analysis failed:', error);\n      throw new Error(`Failed to analyze data: ${error}`);\n    }\n  }\n\n  /**\n   * Create intelligent business dashboards from multi-modal data\n   */\n  async generateIntelligentDashboard(\n    dataSources: { type: string; data: any }[],\n    requirements?: string\n  ): Promise<{\n    layout: any;\n    components: any[];\n    insights: string[];\n    automations: string[];\n  }> {\n    try {\n      // Analyze all data sources\n      const analysisResults = await Promise.all(\n        dataSources.map(source => this.analyzeDataSource(source))\n      );\n\n      // Generate optimal dashboard layout\n      const layout = await this.generateDashboardLayout(analysisResults, requirements);\n      \n      // Create intelligent components\n      const components = await this.generateDashboardComponents(analysisResults, layout);\n      \n      // Extract key insights\n      const insights = this.consolidateInsights(analysisResults);\n      \n      // Suggest automations\n      const automations = await this.suggestDashboardAutomations(analysisResults);\n\n      return {\n        layout,\n        components,\n        insights,\n        automations\n      };\n    } catch (error) {\n      console.error('Dashboard generation failed:', error);\n      throw new Error(`Failed to generate dashboard: ${error}`);\n    }\n  }\n\n  // Private helper methods\n\n  private async detectDocumentType(\n    file: File, \n    context?: { department?: string; category?: string }\n  ): Promise<DocumentIntelligence['type']> {\n    // AI-based document classification\n    const fileName = file.name.toLowerCase();\n    const fileContent = await this.getFilePreview(file);\n\n    if (fileName.includes('invoice') || fileContent.includes('invoice')) return 'invoice';\n    if (fileName.includes('contract') || fileContent.includes('agreement')) return 'contract';\n    if (fileName.includes('receipt') || fileContent.includes('receipt')) return 'receipt';\n    if (fileName.includes('report') || fileContent.includes('report')) return 'report';\n    \n    return 'other';\n  }\n\n  private async extractDocumentData(file: File, type: string): Promise<any> {\n    // Mock AI extraction - in reality would use OCR and NLP services\n    return {\n      text: 'Sample extracted text from document',\n      confidence: 0.95,\n      metadata: {\n        pages: 1,\n        language: 'en',\n        quality: 'high'\n      },\n      structuredData: {\n        // Type-specific structured data would be extracted here\n      }\n    };\n  }\n\n  private async extractEntities(text: string, documentType: string): Promise<EntityExtraction[]> {\n    // Mock entity extraction - would use NER services\n    return [\n      {\n        type: 'amount',\n        value: '$1,234.56',\n        confidence: 0.98,\n        location: { x: 100, y: 200, width: 80, height: 20 }\n      },\n      {\n        type: 'date',\n        value: '2024-01-15',\n        confidence: 0.95,\n        location: { x: 300, y: 150, width: 100, height: 20 }\n      }\n    ];\n  }\n\n  private async generateBusinessInsights(\n    data: any, \n    entities: EntityExtraction[], \n    context?: any\n  ): Promise<string[]> {\n    return [\n      'Invoice amount is 15% higher than average for this vendor',\n      'Payment terms are shorter than standard 30-day policy',\n      'Similar services could be consolidated for better pricing'\n    ];\n  }\n\n  private async identifyActionItems(\n    data: any, \n    entities: EntityExtraction[], \n    type: string\n  ): Promise<ActionItem[]> {\n    const actionItems: ActionItem[] = [];\n\n    if (type === 'invoice') {\n      actionItems.push({\n        id: `action_${Date.now()}`,\n        type: 'approval_required',\n        priority: 'medium',\n        description: 'Invoice requires approval before payment',\n        dueDate: new Date(Date.now() + 3 * 24 * 60 * 60 * 1000), // 3 days\n        automatable: true,\n        suggestedWorkflow: 'invoice-approval-workflow'\n      });\n    }\n\n    return actionItems;\n  }\n\n  private async speechToText(audioBlob: Blob): Promise<string> {\n    // Mock speech-to-text - would integrate with service like OpenAI Whisper\n    return 'Create a new sales report for this quarter and send it to the finance team';\n  }\n\n  private async extractIntent(text: string): Promise<string> {\n    // Intent classification\n    if (text.includes('create') && text.includes('report')) return 'create_report';\n    if (text.includes('schedule') && text.includes('meeting')) return 'schedule_meeting';\n    if (text.includes('send') && text.includes('email')) return 'send_email';\n    return 'general_query';\n  }\n\n  private async extractVoiceEntities(text: string): Promise<Record<string, string>> {\n    // Mock entity extraction from voice\n    return {\n      'report_type': 'sales report',\n      'time_period': 'this quarter',\n      'recipient': 'finance team'\n    };\n  }\n\n  private async analyzeSentiment(text: string): Promise<'positive' | 'neutral' | 'negative'> {\n    // Sentiment analysis\n    return 'neutral';\n  }\n\n  private async determineUrgency(text: string, intent: string): Promise<'low' | 'medium' | 'high'> {\n    if (text.includes('urgent') || text.includes('asap')) return 'high';\n    if (text.includes('soon') || text.includes('today')) return 'medium';\n    return 'low';\n  }\n\n  private async generateVoiceActionItems(\n    text: string, \n    intent: string, \n    entities: Record<string, string>\n  ): Promise<ActionItem[]> {\n    return [\n      {\n        id: `voice_action_${Date.now()}`,\n        type: 'data_entry',\n        priority: 'medium',\n        description: `${intent}: ${text}`,\n        automatable: true,\n        suggestedWorkflow: `${intent.replace('_', '-')}-workflow`\n      }\n    ];\n  }\n\n  private async generateResponse(\n    text: string, \n    intent: string, \n    context?: Record<string, any>\n  ): Promise<string> {\n    return `I'll help you ${intent.replace('_', ' ')}. I've created the necessary workflow to handle this request.`;\n  }\n\n  private async performOCR(imageFile: File): Promise<string> {\n    // Mock OCR - would use service like Google Vision or Tesseract\n    return 'Sample text extracted from image';\n  }\n\n  private async detectImageType(imageFile: File): Promise<ImageIntelligence['type']> {\n    // Image classification\n    return 'chart';\n  }\n\n  private async extractDataPoints(imageFile: File, type: string): Promise<DataPoint[]> {\n    // Extract data from charts/graphs\n    return [\n      { label: 'Q1', value: 100, category: 'sales', trend: 'up' },\n      { label: 'Q2', value: 150, category: 'sales', trend: 'up' },\n      { label: 'Q3', value: 120, category: 'sales', trend: 'down' }\n    ];\n  }\n\n  private async storeDocumentIntelligence(intelligence: DocumentIntelligence): Promise<void> {\n    // Document intelligence storage disabled for 1.0 - coming in v1.1\n    console.log('Document intelligence processed:', {\n      id: intelligence.id,\n      type: intelligence.type,\n      confidence: intelligence.confidence,\n      actionableItems: intelligence.actionableItems.length\n    });\n  }\n\n  private async autoExecuteActions(actionItems: ActionItem[]): Promise<void> {\n    const automatedActions = actionItems.filter(item => item.automatable && item.suggestedWorkflow);\n    \n    for (const action of automatedActions) {\n      try {\n        if (action.suggestedWorkflow) {\n          await n8nService.triggerWorkflow(action.suggestedWorkflow, {\n            actionId: action.id,\n            description: action.description,\n            priority: action.priority\n          });\n        }\n      } catch (error) {\n        console.error('Failed to auto-execute action:', error);\n      }\n    }\n  }\n\n  private async executeVoiceCommands(intelligence: VoiceIntelligence): Promise<void> {\n    // Auto-execute voice commands when appropriate\n    for (const action of intelligence.actionItems) {\n      if (action.automatable && action.suggestedWorkflow) {\n        await n8nService.triggerWorkflow(action.suggestedWorkflow, {\n          transcription: intelligence.transcription,\n          intent: intelligence.intent,\n          entities: intelligence.entities\n        });\n      }\n    }\n  }\n\n  // Additional helper methods (simplified implementations)\n  private async getFilePreview(file: File): Promise<string> {\n    return 'file preview content';\n  }\n\n  private async identifyDataPatterns(data: Record<string, any>[]): Promise<string[]> {\n    return ['Pattern 1', 'Pattern 2'];\n  }\n\n  private async detectDataAnomalies(data: Record<string, any>[]): Promise<string[]> {\n    return ['Anomaly 1', 'Anomaly 2'];\n  }\n\n  private async generateDataInsights(data: any, patterns: string[], anomalies: string[]): Promise<string[]> {\n    return ['Insight 1', 'Insight 2'];\n  }\n\n  private async generateDataRecommendations(insights: string[], patterns: string[]): Promise<string[]> {\n    return ['Recommendation 1', 'Recommendation 2'];\n  }\n\n  private async buildPredictiveModels(data: any, patterns: string[]): Promise<any[]> {\n    return [{ model: 'linear_regression', accuracy: 0.85 }];\n  }\n\n  private async analyzeDataSource(source: { type: string; data: any }): Promise<any> {\n    return { type: source.type, analysis: 'sample analysis' };\n  }\n\n  private async generateDashboardLayout(analysisResults: any[], requirements?: string): Promise<any> {\n    return { type: 'grid', columns: 3, rows: 2 };\n  }\n\n  private async generateDashboardComponents(analysisResults: any[], layout: any): Promise<any[]> {\n    return [{ type: 'chart', config: {} }];\n  }\n\n  private consolidateInsights(analysisResults: any[]): string[] {\n    return ['Consolidated insight 1', 'Consolidated insight 2'];\n  }\n\n  private async suggestDashboardAutomations(analysisResults: any[]): Promise<string[]> {\n    return ['Auto-refresh data every hour', 'Send alert when KPI drops below threshold'];\n  }\n\n  private async generateImageContext(text: string, dataPoints: DataPoint[], context?: any): Promise<string> {\n    return 'Business context for the image';\n  }\n\n  private async generateImageInsights(dataPoints: DataPoint[], context: string): Promise<string[]> {\n    return ['Image insight 1', 'Image insight 2'];\n  }\n\n  private async detectImageAnomalies(dataPoints: DataPoint[], context: string): Promise<string[]> {\n    return ['Image anomaly 1'];\n  }\n}\n\nexport const multiModalIntelligence = new MultiModalIntelligence(); ","usedDeprecatedRules":[]},{"filePath":"/home/vonj/Github/Nexus/src/lib/ai/nexusAIOrchestrator.ts","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'supabase' is defined but never used.","line":7,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":7,"endColumn":18},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":29,"column":28,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":29,"endColumn":31,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1031,1034],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1031,1034],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":87,"column":34,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":87,"endColumn":37,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2585,2588],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2585,2588],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":176,"column":15,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":176,"endColumn":18,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[4942,4945],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[4942,4945],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":177,"column":20,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":177,"endColumn":23,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[4968,4971],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[4968,4971],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":178,"column":18,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":178,"endColumn":21,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[4992,4995],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[4992,4995],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":179,"column":22,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":179,"endColumn":25,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[5020,5023],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[5020,5023],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":235,"column":30,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":235,"endColumn":33,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[6828,6831],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[6828,6831],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":237,"column":19,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":237,"endColumn":22,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[6868,6871],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[6868,6871],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":243,"column":23,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":243,"endColumn":26,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[7042,7045],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[7042,7045],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":344,"column":20,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":344,"endColumn":23,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[10249,10252],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[10249,10252],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'bottlenecks' is assigned a value but never used.","line":355,"column":14,"nodeType":null,"messageId":"unusedVar","endLine":355,"endColumn":25},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":394,"column":16,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":394,"endColumn":19,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[11854,11857],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[11854,11857],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":432,"column":23,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":432,"endColumn":26,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[13038,13041],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[13038,13041],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":433,"column":30,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":433,"endColumn":33,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[13074,13077],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[13074,13077],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":434,"column":25,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":434,"endColumn":28,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[13105,13108],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[13105,13108],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":501,"column":48,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":501,"endColumn":51,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[15379,15382],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[15379,15382],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":501,"column":64,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":501,"endColumn":67,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[15395,15398],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[15395,15398],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":515,"column":89,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":515,"endColumn":92,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[15794,15797],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[15794,15797],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":579,"column":68,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":579,"endColumn":71,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[17932,17935],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[17932,17935],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":588,"column":60,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":588,"endColumn":63,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[18434,18437],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[18434,18437],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":593,"column":91,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":593,"endColumn":94,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[18688,18691],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[18688,18691],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'anomalies' is defined but never used.","line":609,"column":66,"nodeType":null,"messageId":"unusedVar","endLine":609,"endColumn":75},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":609,"column":77,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":609,"endColumn":80,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[19186,19189],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[19186,19189],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":624,"column":54,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":624,"endColumn":57,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[19667,19670],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[19667,19670],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":624,"column":69,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":624,"endColumn":72,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[19682,19685],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[19682,19685],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'file' is defined but never used.","line":712,"column":25,"nodeType":null,"messageId":"unusedVar","endLine":712,"endColumn":29},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'audio' is defined but never used.","line":724,"column":22,"nodeType":null,"messageId":"unusedVar","endLine":724,"endColumn":27},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'image' is defined but never used.","line":736,"column":22,"nodeType":null,"messageId":"unusedVar","endLine":736,"endColumn":27},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'data' is defined but never used.","line":748,"column":28,"nodeType":null,"messageId":"unusedVar","endLine":748,"endColumn":32},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":748,"column":34,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":748,"endColumn":37,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[23981,23984],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[23981,23984],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'description' is defined but never used.","line":783,"column":25,"nodeType":null,"messageId":"unusedVar","endLine":783,"endColumn":36},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'requirements' is defined but never used.","line":794,"column":24,"nodeType":null,"messageId":"unusedVar","endLine":794,"endColumn":36},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'codebase' is defined but never used.","line":798,"column":22,"nodeType":null,"messageId":"unusedVar","endLine":798,"endColumn":30},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":871,"column":34,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":871,"endColumn":37,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[27987,27990],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[27987,27990],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":904,"column":26,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":904,"endColumn":29,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[28557,28560],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[28557,28560],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":36,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\n * nexusAIOrchestrator.ts\n * Master AI orchestrator that coordinates all advanced capabilities\n * Transforms Nexus into a true Business Operating System\n */\n\nimport { supabase } from './core/supabase';\nimport { n8nService } from './n8nService';\n\n// Core AI Capability Interfaces\ninterface SystemEvolution {\n  analyzeUsagePatterns(): Promise<UsageInsight[]>;\n  generateOptimizations(): Promise<SystemOptimization[]>;\n  autoImplementSafeChanges(): Promise<ImplementationResult[]>;\n  predictFeatureNeeds(): Promise<FeaturePrediction[]>;\n}\n\ninterface ProcessIntelligence {\n  discoverProcesses(): Promise<BusinessProcess[]>;\n  identifyBottlenecks(): Promise<ProcessBottleneck[]>;\n  optimizeWorkflows(): Promise<WorkflowOptimization[]>;\n  predictProcessFailures(): Promise<ProcessPrediction[]>;\n}\n\ninterface MultiModalProcessor {\n  processDocument(file: File): Promise<DocumentIntelligence>;\n  processVoice(audio: Blob): Promise<VoiceIntelligence>;\n  processImage(image: File): Promise<ImageIntelligence>;\n  synthesizeInsights(data: any[]): Promise<CrossModalInsight[]>;\n}\n\ninterface PredictiveEngine {\n  analyzeBusinessTrends(): Promise<BusinessForecast>;\n  detectAnomalies(): Promise<BusinessAnomaly[]>;\n  optimizeResources(): Promise<ResourceOptimization>;\n  predictBusinessOutcomes(): Promise<OutcomePrediction[]>;\n}\n\ninterface CodeGenerator {\n  generateFeature(description: string): Promise<GeneratedFeature>;\n  createWorkflow(requirements: string): Promise<GeneratedWorkflow>;\n  optimizeCode(codebase: string): Promise<CodeOptimization>;\n  synthesizeIntegration(systems: string[]): Promise<IntegrationCode>;\n}\n\ninterface SmartIntegrator {\n  discoverCompatibleTools(): Promise<ToolDiscovery[]>;\n  autoConfigureIntegrations(): Promise<IntegrationSetup[]>;\n  healBrokenConnections(): Promise<HealingResult[]>;\n  adaptToSchemaChanges(): Promise<AdaptationResult[]>;\n}\n\n// Data Types\ninterface UsageInsight {\n  pattern: string;\n  frequency: number;\n  impact: number;\n  optimization_potential: number;\n}\n\ninterface SystemOptimization {\n  type: 'component' | 'workflow' | 'performance' | 'ui';\n  description: string;\n  expected_improvement: number;\n  generated_code?: string;\n  auto_implementable: boolean;\n}\n\ninterface BusinessProcess {\n  id: string;\n  name: string;\n  steps: ProcessStep[];\n  efficiency_score: number;\n  bottlenecks: string[];\n  optimization_opportunities: string[];\n}\n\ninterface ProcessStep {\n  action: string;\n  duration: number;\n  success_rate: number;\n  user_satisfaction: number;\n}\n\ninterface DocumentIntelligence {\n  type: string;\n  extracted_data: Record<string, any>;\n  business_insights: string[];\n  action_items: ActionItem[];\n  confidence: number;\n}\n\ninterface ActionItem {\n  description: string;\n  priority: 'low' | 'medium' | 'high' | 'urgent';\n  auto_executable: boolean;\n  estimated_time_saving: number;\n}\n\ninterface BusinessForecast {\n  revenue_prediction: { period: string; amount: number; confidence: number }[];\n  cash_flow_forecast: { date: string; balance: number }[];\n  growth_opportunities: string[];\n  risk_factors: string[];\n}\n\ninterface GeneratedFeature {\n  name: string;\n  components: string[];\n  api_endpoints: string[];\n  database_changes: string[];\n  tests: string[];\n  documentation: string;\n}\n\nclass NexusAIOrchestrator {\n  private capabilities: {\n    evolution: SystemEvolution;\n    process: ProcessIntelligence;\n    multiModal: MultiModalProcessor;\n    predictive: PredictiveEngine;\n    codeGen: CodeGenerator;\n    integration: SmartIntegrator;\n  };\n\n  private isRunning = false;\n  private orchestrationInterval: NodeJS.Timeout | null = null;\n\n  constructor() {\n    this.capabilities = {\n      evolution: new SystemEvolutionEngine(),\n      process: new ProcessIntelligenceEngine(),\n      multiModal: new MultiModalProcessorEngine(),\n      predictive: new PredictiveAnalyticsEngine(),\n      codeGen: new CodeGenerationEngine(),\n      integration: new SmartIntegrationEngine()\n    };\n  }\n\n  /**\n   * Start the AI orchestration system\n   */\n  async startOrchestration(): Promise<void> {\n    if (this.isRunning) return;\n\n    console.log('🚀 Starting Nexus AI Orchestrator - Business Operating System Mode');\n    this.isRunning = true;\n\n    // Run initial comprehensive analysis\n    await this.runComprehensiveAnalysis();\n\n    // Start continuous orchestration cycle\n    this.orchestrationInterval = setInterval(async () => {\n      await this.runOrchestrationCycle();\n    }, 60 * 60 * 1000); // Every hour\n\n    console.log('✅ Nexus AI Orchestrator is now running');\n  }\n\n  /**\n   * Stop the orchestration system\n   */\n  stopOrchestration(): void {\n    if (this.orchestrationInterval) {\n      clearInterval(this.orchestrationInterval);\n      this.orchestrationInterval = null;\n    }\n    this.isRunning = false;\n    console.log('⏹️ Nexus AI Orchestrator stopped');\n  }\n\n  /**\n   * Run comprehensive business analysis and optimization\n   */\n  async runComprehensiveAnalysis(): Promise<{\n    insights: any[];\n    optimizations: any[];\n    predictions: any[];\n    implementations: any[];\n  }> {\n    console.log('🧠 Running comprehensive business analysis...');\n\n    try {\n      // Run all capabilities in parallel for maximum efficiency\n      const [\n        usageInsights,\n        processAnalysis,\n        businessForecast,\n        systemOptimizations,\n        integrationOpportunities\n      ] = await Promise.all([\n        this.capabilities.evolution.analyzeUsagePatterns(),\n        this.capabilities.process.discoverProcesses(),\n        this.capabilities.predictive.analyzeBusinessTrends(),\n        this.capabilities.evolution.generateOptimizations(),\n        this.capabilities.integration.discoverCompatibleTools()\n      ]);\n\n      // Synthesize cross-capability insights\n      const synthesizedInsights = await this.synthesizeInsights([\n        usageInsights,\n        processAnalysis,\n        businessForecast,\n        systemOptimizations,\n        integrationOpportunities\n      ]);\n\n      // Auto-implement safe improvements\n      const implementations = await this.autoImplementImprovements(systemOptimizations);\n\n      // Generate predictive recommendations\n      const predictions = await this.generatePredictiveRecommendations(businessForecast);\n\n      console.log(`✅ Analysis complete: ${synthesizedInsights.length} insights, ${implementations.length} auto-implementations`);\n\n      return {\n        insights: synthesizedInsights,\n        optimizations: systemOptimizations,\n        predictions: predictions,\n        implementations: implementations\n      };\n\n    } catch (error) {\n      console.error('❌ Comprehensive analysis failed:', error);\n      throw error;\n    }\n  }\n\n  /**\n   * Process multi-modal input (document, voice, image)\n   */\n  async processMultiModalInput(input: {\n    type: 'document' | 'voice' | 'image';\n    data: File | Blob;\n    context?: Record<string, any>;\n  }): Promise<{\n    intelligence: any;\n    actions: ActionItem[];\n    workflows: string[];\n  }> {\n    console.log(`🎯 Processing ${input.type} input with multi-modal intelligence...`);\n\n    let intelligence: any;\n    let actions: ActionItem[] = [];\n\n    try {\n      switch (input.type) {\n        case 'document':\n          intelligence = await this.capabilities.multiModal.processDocument(input.data as File);\n          actions = intelligence.action_items || [];\n          break;\n\n        case 'voice':\n          intelligence = await this.capabilities.multiModal.processVoice(input.data as Blob);\n          actions = intelligence.action_items || [];\n          break;\n\n        case 'image':\n          intelligence = await this.capabilities.multiModal.processImage(input.data as File);\n          actions = intelligence.action_items || [];\n          break;\n      }\n\n      // Generate workflows for actionable items\n      const workflows = await Promise.all(\n        actions\n          .filter(action => action.auto_executable)\n          .map(action => this.capabilities.codeGen.createWorkflow(action.description))\n      );\n\n      // Auto-execute high-confidence, low-risk actions\n      await this.autoExecuteActions(actions.filter(a => \n        a.auto_executable && \n        a.priority !== 'urgent' && \n        intelligence.confidence > 0.9\n      ));\n\n      console.log(`✅ Processed ${input.type}: ${actions.length} actions identified, ${workflows.length} workflows generated`);\n\n      return {\n        intelligence,\n        actions,\n        workflows: workflows.map(w => w.name)\n      };\n\n    } catch (error) {\n      console.error(`❌ Multi-modal processing failed for ${input.type}:`, error);\n      throw error;\n    }\n  }\n\n  /**\n   * Generate complete feature from natural language\n   */\n  async generateFeatureFromDescription(description: string, context?: {\n    department?: string;\n    integration_requirements?: string[];\n    user_requirements?: string[];\n  }): Promise<{\n    feature: GeneratedFeature;\n    implementation_plan: string[];\n    estimated_time_saving: number;\n  }> {\n    console.log(`🛠️ Generating feature: \"${description}\"`);\n\n    try {\n      // Generate the complete feature\n      const feature = await this.capabilities.codeGen.generateFeature(description);\n\n      // Analyze impact and create implementation plan\n      const implementation_plan = [\n        'Create database migrations for schema changes',\n        'Generate React components with TypeScript',\n        'Build API endpoints with validation',\n        'Create n8n workflow integrations',\n        'Generate comprehensive test suite',\n        'Update documentation and user guides',\n        'Deploy to staging for testing',\n        'Roll out to production with monitoring'\n      ];\n\n      // Estimate time saving based on feature complexity\n      const estimated_time_saving = this.calculateTimeSaving(feature, context);\n\n      console.log(`✅ Feature generated: ${feature.components.length} components, ${feature.api_endpoints.length} endpoints`);\n\n      return {\n        feature,\n        implementation_plan,\n        estimated_time_saving\n      };\n\n    } catch (error) {\n      console.error('❌ Feature generation failed:', error);\n      throw error;\n    }\n  }\n\n  /**\n   * Auto-discover and optimize business processes\n   */\n  async optimizeBusinessProcesses(): Promise<{\n    discovered_processes: BusinessProcess[];\n    optimizations: any[];\n    time_savings: number;\n    efficiency_gains: number;\n  }> {\n    console.log('⚡ Optimizing business processes...');\n\n    try {\n      // Discover all business processes\n      const processes = await this.capabilities.process.discoverProcesses();\n\n      // Identify bottlenecks and optimization opportunities\n      const [bottlenecks, optimizations] = await Promise.all([\n        this.capabilities.process.identifyBottlenecks(),\n        this.capabilities.process.optimizeWorkflows()\n      ]);\n\n      // Calculate impact metrics\n      const time_savings = optimizations.reduce((total, opt) => total + opt.time_saved, 0);\n      const efficiency_gains = processes.reduce((total, proc) => \n        total + (100 - proc.efficiency_score), 0) / processes.length;\n\n      // Auto-implement safe optimizations\n      const safe_optimizations = optimizations.filter(opt => \n        opt.risk_level === 'low' && opt.confidence > 0.8\n      );\n\n      for (const optimization of safe_optimizations) {\n        await this.implementProcessOptimization(optimization);\n      }\n\n      console.log(`✅ Process optimization complete: ${time_savings}s saved, ${efficiency_gains.toFixed(1)}% efficiency gain`);\n\n      return {\n        discovered_processes: processes,\n        optimizations,\n        time_savings,\n        efficiency_gains\n      };\n\n    } catch (error) {\n      console.error('❌ Process optimization failed:', error);\n      throw error;\n    }\n  }\n\n  /**\n   * Generate business predictions and recommendations\n   */\n  async generateBusinessIntelligence(): Promise<{\n    forecast: BusinessForecast;\n    anomalies: any[];\n    recommendations: string[];\n    action_items: ActionItem[];\n  }> {\n    console.log('🔮 Generating business intelligence and predictions...');\n\n    try {\n      // Generate comprehensive business forecast\n      const forecast = await this.capabilities.predictive.analyzeBusinessTrends();\n\n      // Detect anomalies and issues\n      const anomalies = await this.capabilities.predictive.detectAnomalies();\n\n      // Generate intelligent recommendations\n      const recommendations = await this.generateIntelligentRecommendations(forecast, anomalies);\n\n      // Create actionable items\n      const action_items = await this.createActionableItems(recommendations, anomalies);\n\n      console.log(`✅ Business intelligence generated: ${recommendations.length} recommendations, ${anomalies.length} anomalies detected`);\n\n      return {\n        forecast,\n        anomalies,\n        recommendations,\n        action_items\n      };\n\n    } catch (error) {\n      console.error('❌ Business intelligence generation failed:', error);\n      throw error;\n    }\n  }\n\n  /**\n   * Auto-configure integrations with business tools\n   */\n  async optimizeIntegrations(): Promise<{\n    discovered_tools: any[];\n    configured_integrations: any[];\n    healed_connections: any[];\n    efficiency_improvement: number;\n  }> {\n    console.log('🔗 Optimizing business tool integrations...');\n\n    try {\n      // Discover compatible tools and integrations\n      const discovered_tools = await this.capabilities.integration.discoverCompatibleTools();\n\n      // Auto-configure high-value integrations\n      const configured_integrations = await this.capabilities.integration.autoConfigureIntegrations();\n\n      // Heal any broken connections\n      const healed_connections = await this.capabilities.integration.healBrokenConnections();\n\n      // Calculate efficiency improvement\n      const efficiency_improvement = this.calculateIntegrationEfficiency(\n        configured_integrations, \n        healed_connections\n      );\n\n      console.log(`✅ Integration optimization complete: ${configured_integrations.length} new integrations, ${healed_connections.length} connections healed`);\n\n      return {\n        discovered_tools,\n        configured_integrations,\n        healed_connections,\n        efficiency_improvement\n      };\n\n    } catch (error) {\n      console.error('❌ Integration optimization failed:', error);\n      throw error;\n    }\n  }\n\n  // Private helper methods\n  private async runOrchestrationCycle(): Promise<void> {\n    if (!this.isRunning) return;\n\n    console.log('🔄 Running orchestration cycle...');\n\n    try {\n      // Quick analysis and optimization cycle\n      const [insights, optimizations] = await Promise.all([\n        this.capabilities.evolution.analyzeUsagePatterns(),\n        this.capabilities.evolution.generateOptimizations()\n      ]);\n\n      // Auto-implement safe changes\n      await this.capabilities.evolution.autoImplementSafeChanges();\n\n      // Check for process improvements\n      const processes = await this.capabilities.process.discoverProcesses();\n      const inefficient_processes = processes.filter(p => p.efficiency_score < 0.8);\n\n      if (inefficient_processes.length > 0) {\n        await this.capabilities.process.optimizeWorkflows();\n      }\n\n      console.log(`✅ Orchestration cycle complete: ${insights.length} insights, ${optimizations.length} optimizations`);\n\n    } catch (error) {\n      console.error('❌ Orchestration cycle failed:', error);\n    }\n  }\n\n  private async synthesizeInsights(dataArrays: any[]): Promise<any[]> {\n    // AI-powered cross-capability insight synthesis\n    const synthesized = [];\n    \n    // Combine insights from different capabilities\n    for (const dataArray of dataArrays) {\n      if (Array.isArray(dataArray)) {\n        synthesized.push(...dataArray);\n      }\n    }\n\n    return synthesized;\n  }\n\n  private async autoImplementImprovements(optimizations: SystemOptimization[]): Promise<any[]> {\n    const implementations = [];\n    \n    for (const optimization of optimizations) {\n      if (optimization.auto_implementable && optimization.expected_improvement > 10) {\n        try {\n          // Implement the optimization\n          await this.implementOptimization(optimization);\n          implementations.push({\n            optimization: optimization.description,\n            status: 'implemented',\n            improvement: optimization.expected_improvement\n          });\n        } catch (error) {\n          implementations.push({\n            optimization: optimization.description,\n            status: 'failed',\n            error: error.message\n          });\n        }\n      }\n    }\n\n    return implementations;\n  }\n\n  private async generatePredictiveRecommendations(forecast: BusinessForecast): Promise<string[]> {\n    const recommendations = [];\n\n    // Revenue predictions\n    if (forecast.revenue_prediction.length > 0) {\n      const trend = this.calculateTrend(forecast.revenue_prediction);\n      if (trend < 0) {\n        recommendations.push('Revenue trend declining - consider new sales initiatives');\n      }\n    }\n\n    // Cash flow analysis\n    if (forecast.cash_flow_forecast.length > 0) {\n      const low_balance_periods = forecast.cash_flow_forecast.filter(f => f.balance < 10000);\n      if (low_balance_periods.length > 0) {\n        recommendations.push('Cash flow concerns detected - optimize payment terms');\n      }\n    }\n\n    return recommendations;\n  }\n\n  private async autoExecuteActions(actions: ActionItem[]): Promise<void> {\n    for (const action of actions) {\n      try {\n        // Generate and execute workflow for the action\n        const workflow = await this.capabilities.codeGen.createWorkflow(action.description);\n        await n8nService.triggerWorkflow('auto-action-executor', {\n          action: action.description,\n          priority: action.priority,\n          workflow: workflow\n        });\n      } catch (error) {\n        console.error(`Failed to auto-execute action: ${action.description}`, error);\n      }\n    }\n  }\n\n  private calculateTimeSaving(feature: GeneratedFeature, context?: any): number {\n    // Estimate time saving based on feature complexity and usage patterns\n    const base_saving = feature.components.length * 30; // 30 seconds per component\n    const api_saving = feature.api_endpoints.length * 15; // 15 seconds per API call\n    const context_multiplier = context?.department === 'finance' ? 2 : 1; // Finance operations are more valuable\n    \n    return (base_saving + api_saving) * context_multiplier;\n  }\n\n  private async implementProcessOptimization(optimization: any): Promise<void> {\n    // Implementation logic for process optimizations\n    console.log(`Implementing process optimization: ${optimization.description}`);\n  }\n\n  private async generateIntelligentRecommendations(forecast: BusinessForecast, anomalies: any[]): Promise<string[]> {\n    const recommendations = [];\n\n    // Analyze forecast trends\n    if (forecast.growth_opportunities.length > 0) {\n      recommendations.push(...forecast.growth_opportunities.map(opp => `Opportunity: ${opp}`));\n    }\n\n    // Address anomalies\n    for (const anomaly of anomalies) {\n      recommendations.push(`Address anomaly: ${anomaly.description}`);\n    }\n\n    return recommendations;\n  }\n\n  private async createActionableItems(recommendations: string[], anomalies: any[]): Promise<ActionItem[]> {\n    const action_items: ActionItem[] = [];\n\n    for (const recommendation of recommendations) {\n      action_items.push({\n        description: recommendation,\n        priority: recommendation.includes('urgent') ? 'urgent' : 'medium',\n        auto_executable: !recommendation.includes('manual'),\n        estimated_time_saving: 60 // 1 minute default\n      });\n    }\n\n    return action_items;\n  }\n\n  private calculateIntegrationEfficiency(configured: any[], healed: any[]): number {\n    return (configured.length * 20) + (healed.length * 10); // Efficiency points\n  }\n\n  private calculateTrend(data: { period: string; amount: number }[]): number {\n    if (data.length < 2) return 0;\n    const first = data[0].amount;\n    const last = data[data.length - 1].amount;\n    return ((last - first) / first) * 100;\n  }\n\n  private async implementOptimization(optimization: SystemOptimization): Promise<void> {\n    // Implementation logic for system optimizations\n    console.log(`Implementing optimization: ${optimization.description}`);\n  }\n}\n\n// Concrete implementations of AI capability engines\nclass SystemEvolutionEngine implements SystemEvolution {\n  async analyzeUsagePatterns(): Promise<UsageInsight[]> {\n    // Mock implementation - in reality would analyze real usage data\n    return [\n      {\n        pattern: 'Invoice creation → approval workflow',\n        frequency: 156,\n        impact: 85,\n        optimization_potential: 65\n      },\n      {\n        pattern: 'Customer onboarding process',\n        frequency: 89,\n        impact: 92,\n        optimization_potential: 78\n      }\n    ];\n  }\n\n  async generateOptimizations(): Promise<SystemOptimization[]> {\n    return [\n      {\n        type: 'workflow',\n        description: 'Auto-approve invoices under $500',\n        expected_improvement: 45,\n        auto_implementable: true\n      }\n    ];\n  }\n\n  async autoImplementSafeChanges(): Promise<ImplementationResult[]> {\n    return [{ change: 'UI optimization', status: 'success', improvement: 15 }];\n  }\n\n  async predictFeatureNeeds(): Promise<FeaturePrediction[]> {\n    return [{ feature: 'Advanced reporting', confidence: 0.85, timeline: '2 weeks' }];\n  }\n}\n\nclass ProcessIntelligenceEngine implements ProcessIntelligence {\n  async discoverProcesses(): Promise<BusinessProcess[]> {\n    return [\n      {\n        id: 'invoice-process',\n        name: 'Invoice Creation Process',\n        steps: [\n          { action: 'Create invoice', duration: 120, success_rate: 0.95, user_satisfaction: 0.8 },\n          { action: 'Manager approval', duration: 300, success_rate: 0.88, user_satisfaction: 0.6 }\n        ],\n        efficiency_score: 0.75,\n        bottlenecks: ['Manager approval step'],\n        optimization_opportunities: ['Auto-approve small amounts', 'Parallel approval workflow']\n      }\n    ];\n  }\n\n  async identifyBottlenecks(): Promise<ProcessBottleneck[]> {\n    return [{ step: 'Manager approval', delay: 180, impact: 'high' }];\n  }\n\n  async optimizeWorkflows(): Promise<WorkflowOptimization[]> {\n    return [{ process: 'invoice-process', optimization: 'parallel-approval', time_saved: 120, risk_level: 'low', confidence: 0.9 }];\n  }\n\n  async predictProcessFailures(): Promise<ProcessPrediction[]> {\n    return [{ process: 'invoice-process', failure_probability: 0.15, predicted_date: '2024-01-20' }];\n  }\n}\n\nclass MultiModalProcessorEngine implements MultiModalProcessor {\n  async processDocument(file: File): Promise<DocumentIntelligence> {\n    return {\n      type: 'invoice',\n      extracted_data: { amount: 1500, vendor: 'TechCorp', date: '2024-01-15' },\n      business_insights: ['Amount 15% higher than average', 'New vendor requires approval'],\n      action_items: [\n        { description: 'Route for manager approval', priority: 'medium', auto_executable: true, estimated_time_saving: 60 }\n      ],\n      confidence: 0.95\n    };\n  }\n\n  async processVoice(audio: Blob): Promise<VoiceIntelligence> {\n    return {\n      transcription: 'Create Q4 sales report and send to finance team',\n      intent: 'create_report',\n      entities: { report_type: 'sales', period: 'Q4', recipient: 'finance' },\n      action_items: [\n        { description: 'Generate Q4 sales report', priority: 'medium', auto_executable: true, estimated_time_saving: 300 }\n      ],\n      confidence: 0.92\n    };\n  }\n\n  async processImage(image: File): Promise<ImageIntelligence> {\n    return {\n      type: 'chart',\n      extracted_data: { chart_type: 'bar', data_points: 12 },\n      business_insights: ['Revenue trend shows 15% growth', 'Q3 outperformed expectations'],\n      action_items: [\n        { description: 'Update revenue forecast', priority: 'low', auto_executable: true, estimated_time_saving: 45 }\n      ],\n      confidence: 0.88\n    };\n  }\n\n  async synthesizeInsights(data: any[]): Promise<CrossModalInsight[]> {\n    return [{ insight: 'Cross-modal pattern detected', confidence: 0.9, impact: 'high' }];\n  }\n}\n\nclass PredictiveAnalyticsEngine implements PredictiveEngine {\n  async analyzeBusinessTrends(): Promise<BusinessForecast> {\n    return {\n      revenue_prediction: [\n        { period: 'Q1 2024', amount: 125000, confidence: 0.85 },\n        { period: 'Q2 2024', amount: 135000, confidence: 0.78 }\n      ],\n      cash_flow_forecast: [\n        { date: '2024-02-01', balance: 45000 },\n        { date: '2024-03-01', balance: 52000 }\n      ],\n      growth_opportunities: ['Expand to new market segment', 'Launch premium service tier'],\n      risk_factors: ['Competitor pricing pressure', 'Economic uncertainty']\n    };\n  }\n\n  async detectAnomalies(): Promise<BusinessAnomaly[]> {\n    return [{ type: 'revenue_spike', description: 'Unusual 40% revenue increase', severity: 'medium', confidence: 0.87 }];\n  }\n\n  async optimizeResources(): Promise<ResourceOptimization> {\n    return { department: 'sales', recommendation: 'Hire 2 additional reps', expected_roi: 150 };\n  }\n\n  async predictBusinessOutcomes(): Promise<OutcomePrediction[]> {\n    return [{ outcome: 'Achieve revenue target', probability: 0.82, timeline: 'Q2 2024' }];\n  }\n}\n\nclass CodeGenerationEngine implements CodeGenerator {\n  async generateFeature(description: string): Promise<GeneratedFeature> {\n    return {\n      name: 'AutoApprovalWorkflow',\n      components: ['ApprovalButton.tsx', 'WorkflowStatus.tsx'],\n      api_endpoints: ['/api/approvals/auto', '/api/workflows/status'],\n      database_changes: ['ALTER TABLE approvals ADD auto_approved BOOLEAN'],\n      tests: ['ApprovalButton.test.tsx', 'workflow-api.test.ts'],\n      documentation: '# Auto Approval Workflow\\n\\nAutomatically approves...'\n    };\n  }\n\n  async createWorkflow(requirements: string): Promise<GeneratedWorkflow> {\n    return { name: 'auto-approval-workflow', config: {}, estimated_time: '2 hours' };\n  }\n\n  async optimizeCode(codebase: string): Promise<CodeOptimization> {\n    return { optimizations: ['Remove unused imports', 'Optimize database queries'], performance_gain: 25 };\n  }\n\n  async synthesizeIntegration(systems: string[]): Promise<IntegrationCode> {\n    return { integration_name: 'multi-system-sync', code: '// Integration code...', systems_connected: systems.length };\n  }\n}\n\nclass SmartIntegrationEngine implements SmartIntegrator {\n  async discoverCompatibleTools(): Promise<ToolDiscovery[]> {\n    return [\n      { tool: 'Slack', compatibility: 0.95, integration_effort: 'low' },\n      { tool: 'Salesforce', compatibility: 0.88, integration_effort: 'medium' }\n    ];\n  }\n\n  async autoConfigureIntegrations(): Promise<IntegrationSetup[]> {\n    return [{ tool: 'Slack', status: 'configured', webhook_url: 'https://hooks.slack.com/...' }];\n  }\n\n  async healBrokenConnections(): Promise<HealingResult[]> {\n    return [{ integration: 'QuickBooks', issue: 'API key expired', resolution: 'Auto-renewed key', status: 'healed' }];\n  }\n\n  async adaptToSchemaChanges(): Promise<AdaptationResult[]> {\n    return [{ system: 'CRM', change: 'New field added', adaptation: 'Mapping updated', status: 'adapted' }];\n  }\n}\n\n// Additional type definitions\ninterface ImplementationResult {\n  change: string;\n  status: 'success' | 'failed';\n  improvement: number;\n}\n\ninterface FeaturePrediction {\n  feature: string;\n  confidence: number;\n  timeline: string;\n}\n\ninterface ProcessBottleneck {\n  step: string;\n  delay: number;\n  impact: string;\n}\n\ninterface WorkflowOptimization {\n  process: string;\n  optimization: string;\n  time_saved: number;\n  risk_level: string;\n  confidence: number;\n}\n\ninterface ProcessPrediction {\n  process: string;\n  failure_probability: number;\n  predicted_date: string;\n}\n\ninterface VoiceIntelligence {\n  transcription: string;\n  intent: string;\n  entities: Record<string, string>;\n  action_items: ActionItem[];\n  confidence: number;\n}\n\ninterface ImageIntelligence {\n  type: string;\n  extracted_data: Record<string, any>;\n  business_insights: string[];\n  action_items: ActionItem[];\n  confidence: number;\n}\n\ninterface CrossModalInsight {\n  insight: string;\n  confidence: number;\n  impact: string;\n}\n\ninterface BusinessAnomaly {\n  type: string;\n  description: string;\n  severity: string;\n  confidence: number;\n}\n\ninterface ResourceOptimization {\n  department: string;\n  recommendation: string;\n  expected_roi: number;\n}\n\ninterface OutcomePrediction {\n  outcome: string;\n  probability: number;\n  timeline: string;\n}\n\ninterface GeneratedWorkflow {\n  name: string;\n  config: Record<string, any>;\n  estimated_time: string;\n}\n\ninterface CodeOptimization {\n  optimizations: string[];\n  performance_gain: number;\n}\n\ninterface IntegrationCode {\n  integration_name: string;\n  code: string;\n  systems_connected: number;\n}\n\ninterface ToolDiscovery {\n  tool: string;\n  compatibility: number;\n  integration_effort: string;\n}\n\ninterface IntegrationSetup {\n  tool: string;\n  status: string;\n  webhook_url?: string;\n}\n\ninterface HealingResult {\n  integration: string;\n  issue: string;\n  resolution: string;\n  status: string;\n}\n\ninterface AdaptationResult {\n  system: string;\n  change: string;\n  adaptation: string;\n  status: string;\n}\n\n// Export the main orchestrator\nexport const nexusAIOrchestrator = new NexusAIOrchestrator();\nexport type { \n  SystemOptimization, \n  BusinessProcess, \n  DocumentIntelligence, \n  BusinessForecast, \n  GeneratedFeature \n}; ","usedDeprecatedRules":[]},{"filePath":"/home/vonj/Github/Nexus/src/lib/ai/progressiveLearning.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":33,"column":32,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":33,"endColumn":35,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1013,1016],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1013,1016],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'feedback' is defined but never used.","line":64,"column":5,"nodeType":null,"messageId":"unusedVar","endLine":64,"endColumn":13},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":327,"column":45,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":327,"endColumn":48,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[10203,10206],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[10203,10206],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":329,"column":49,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":329,"endColumn":52,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[10363,10366],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[10363,10366],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":330,"column":39,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":330,"endColumn":42,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[10432,10435],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[10432,10435],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\n * progressiveLearning.ts\n * \n * Progressive learning system for building comprehensive user and company intelligence\n * through conversation analysis, behavioral patterns, and contextual data collection.\n */\n\nimport { supabase } from './core/supabase';\nimport type { Agent } from './agentRegistry';\n\nexport interface BusinessGoals {\n  id: string;\n  goal: string;\n  category: 'revenue' | 'efficiency' | 'growth' | 'innovation' | 'retention';\n  priority: 'high' | 'medium' | 'low';\n  target_date: string;\n  success_metrics: string[];\n  current_progress: number; // 0-100\n}\n\nexport interface CurrentChallenges {\n  id: string;\n  challenge: string;\n  category: 'operational' | 'financial' | 'technical' | 'market' | 'human_resources';\n  severity: 'critical' | 'high' | 'medium' | 'low';\n  impact_areas: string[];\n  potential_solutions: string[];\n}\n\nexport interface LearningInsight {\n  user_id: string;\n  insight_type: 'preference' | 'pattern' | 'goal' | 'challenge' | 'skill_gap';\n  insight_data: Record<string, any>;\n  confidence_score: number; // 0-1\n  source: 'conversation' | 'behavior' | 'feedback' | 'integration';\n  created_at: string;\n}\n\nexport interface CompanyHealthMetric {\n  metric_name: string;\n  current_score: number; // 0-100\n  benchmark_score: number;\n  trend: 'improving' | 'stable' | 'declining';\n  last_updated: string;\n  contributing_factors: string[];\n}\n\nexport class ProgressiveLearning {\n  private userId: string;\n  private companyId: string;\n\n  constructor(userId: string, companyId: string) {\n    this.userId = userId;\n    this.companyId = companyId;\n  }\n\n  /**\n   * Analyze conversation for learning opportunities\n   */\n  async analyzeConversation(\n    userMessage: string,\n    aiResponse: string,\n    agent: Agent,\n    feedback?: 'helpful' | 'unhelpful' | 'partially_helpful'\n  ): Promise<LearningInsight[]> {\n    const insights: LearningInsight[] = [];\n\n    // Analyze user preferences from conversation\n    const preferenceInsights = this.extractPreferences(userMessage, agent);\n    insights.push(...preferenceInsights);\n\n    // Identify potential goals or challenges mentioned\n    const goalChallengeInsights = this.extractGoalsAndChallenges(userMessage);\n    insights.push(...goalChallengeInsights);\n\n    // Analyze communication patterns\n    const patternInsights = this.analyzeCommunicationPatterns(userMessage, agent);\n    insights.push(...patternInsights);\n\n    // Store insights for future use\n    await this.storeInsights(insights);\n\n    return insights;\n  }\n\n  /**\n   * Extract user preferences from conversation\n   */\n  private extractPreferences(message: string, agent: Agent): LearningInsight[] {\n    const insights: LearningInsight[] = [];\n    const messageLower = message.toLowerCase();\n\n    // Communication style preferences\n    if (messageLower.includes('detailed') || messageLower.includes('comprehensive')) {\n      insights.push({\n        user_id: this.userId,\n        insight_type: 'preference',\n        insight_data: {\n          communication_style: 'detailed',\n          prefers_comprehensive_analysis: true\n        },\n        confidence_score: 0.7,\n        source: 'conversation',\n        created_at: new Date().toISOString()\n      });\n    }\n\n    if (messageLower.includes('quick') || messageLower.includes('summary') || messageLower.includes('brief')) {\n      insights.push({\n        user_id: this.userId,\n        insight_type: 'preference',\n        insight_data: {\n          communication_style: 'concise',\n          prefers_quick_summaries: true\n        },\n        confidence_score: 0.7,\n        source: 'conversation',\n        created_at: new Date().toISOString()\n      });\n    }\n\n    // Department/topic preferences\n    if (agent.department) {\n      insights.push({\n        user_id: this.userId,\n        insight_type: 'preference',\n        insight_data: {\n          frequently_accessed_department: agent.department,\n          department_expertise_level: this.assessExpertiseLevel(message)\n        },\n        confidence_score: 0.6,\n        source: 'conversation',\n        created_at: new Date().toISOString()\n      });\n    }\n\n    return insights;\n  }\n\n  /**\n   * Extract goals and challenges from user messages\n   */\n  private extractGoalsAndChallenges(message: string): LearningInsight[] {\n    const insights: LearningInsight[] = [];\n    const messageLower = message.toLowerCase();\n\n    // Goal indicators\n    const goalKeywords = [\n      'goal', 'target', 'objective', 'aim', 'plan to', 'want to achieve',\n      'increase', 'improve', 'grow', 'expand', 'optimize'\n    ];\n\n    const hasGoalKeywords = goalKeywords.some(keyword => messageLower.includes(keyword));\n    if (hasGoalKeywords) {\n      insights.push({\n        user_id: this.userId,\n        insight_type: 'goal',\n        insight_data: {\n          potential_goal: message.substring(0, 200),\n          goal_category: this.categorizeGoal(message),\n          mentioned_in_context: this.extractContext(message)\n        },\n        confidence_score: 0.6,\n        source: 'conversation',\n        created_at: new Date().toISOString()\n      });\n    }\n\n    // Challenge indicators\n    const challengeKeywords = [\n      'problem', 'issue', 'challenge', 'difficulty', 'struggle', 'concern',\n      'bottleneck', 'obstacle', 'barrier', 'risk', 'declining', 'falling'\n    ];\n\n    const hasChallengeKeywords = challengeKeywords.some(keyword => messageLower.includes(keyword));\n    if (hasChallengeKeywords) {\n      insights.push({\n        user_id: this.userId,\n        insight_type: 'challenge',\n        insight_data: {\n          potential_challenge: message.substring(0, 200),\n          challenge_category: this.categorizeChallenge(message),\n          urgency_level: this.assessUrgency(message)\n        },\n        confidence_score: 0.6,\n        source: 'conversation',\n        created_at: new Date().toISOString()\n      });\n    }\n\n    return insights;\n  }\n\n  /**\n   * Analyze communication patterns\n   */\n  private analyzeCommunicationPatterns(message: string, agent: Agent): LearningInsight[] {\n    const insights: LearningInsight[] = [];\n\n    const pattern = {\n      message_length: message.length,\n      question_count: (message.match(/\\?/g) || []).length,\n      urgency_indicators: this.detectUrgencyIndicators(message),\n      technical_level: this.assessTechnicalLevel(message),\n      decision_making_style: this.assessDecisionMakingStyle(message)\n    };\n\n    insights.push({\n      user_id: this.userId,\n      insight_type: 'pattern',\n      insight_data: {\n        communication_pattern: pattern,\n        preferred_agent_type: agent.type,\n        interaction_complexity: this.calculateComplexity(message)\n      },\n      confidence_score: 0.8,\n      source: 'conversation',\n      created_at: new Date().toISOString()\n    });\n\n    return insights;\n  }\n\n  /**\n   * Progressive profiling through contextual questions\n   */\n  async generateContextualQuestions(conversationHistory: string[]): Promise<string[]> {\n    const questions: string[] = [];\n    \n    // Get existing insights to avoid redundant questions\n    const existingInsights = await this.getExistingInsights();\n    \n    // Generate questions based on missing baseline data\n    if (!this.hasInsightType(existingInsights, 'goal')) {\n      questions.push(\"What are your main business objectives for this quarter?\");\n    }\n\n    if (!this.hasInsightType(existingInsights, 'challenge')) {\n      questions.push(\"What's the biggest challenge your team is facing right now?\");\n    }\n\n    // Context-specific questions based on conversation topics\n    const recentTopics = this.extractTopicsFromHistory(conversationHistory);\n    \n    if (recentTopics.includes('sales') && !this.hasSpecificInsight(existingInsights, 'sales_targets')) {\n      questions.push(\"What are your sales targets for this period?\");\n    }\n\n    if (recentTopics.includes('marketing') && !this.hasSpecificInsight(existingInsights, 'marketing_goals')) {\n      questions.push(\"What metrics do you use to measure marketing success?\");\n    }\n\n    return questions.slice(0, 2); // Limit to avoid overwhelming\n  }\n\n  /**\n   * Calculate company health score\n   */\n  async calculateCompanyHealthScore(): Promise<CompanyHealthMetric[]> {\n    const healthMetrics: CompanyHealthMetric[] = [];\n\n    // Financial health (from existing financial data)\n    const financialHealth = await this.calculateFinancialHealth();\n    healthMetrics.push(financialHealth);\n\n    // Operational efficiency\n    const operationalHealth = await this.calculateOperationalHealth();\n    healthMetrics.push(operationalHealth);\n\n    // Team engagement (from activity patterns)\n    const teamHealth = await this.calculateTeamHealth();\n    healthMetrics.push(teamHealth);\n\n    return healthMetrics;\n  }\n\n  /**\n   * Store learning insights in the database\n   */\n  private async storeInsights(insights: LearningInsight[]): Promise<void> {\n    if (!this.userId) {\n      console.warn('[ProgressiveLearning] Missing userId. Skipping insight storage.');\n      return;\n    }\n    \n    // Map LearningInsights to ai_interactions table structure\n    const records = insights.map(insight => ({\n      user_id: insight.user_id,\n      interaction_type: 'insight', // Use valid constraint value\n      ai_response: JSON.stringify(insight.insight_data),\n      context_data: {\n        insight_type: insight.insight_type,\n        confidence_score: insight.confidence_score,\n        source: insight.source,\n        ...(this.companyId && { company_id: this.companyId })\n      }\n    }));\n\n    if (records.length > 0) {\n      const { error } = await supabase\n        .from('ai_interactions')\n        .insert(records);\n\n      if (error) {\n        console.error('Error storing learning insights:', error);\n      }\n    }\n  }\n\n  /**\n   * Get existing insights for user\n   */\n  private async getExistingInsights(): Promise<LearningInsight[]> {\n    try {\n      const { data, error } = await supabase\n        .from('ai_interactions')\n        .select('*')\n        .eq('user_id', this.userId)\n        .eq('interaction_type', 'insight')\n        .order('created_at', { ascending: false })\n        .limit(100);\n\n      if (error) throw error;\n\n      return data?.map(item => ({\n        user_id: item.user_id,\n        insight_type: (item.context_data as any)?.insight_type || 'preference',\n        insight_data: item.ai_response ? JSON.parse(item.ai_response) : {},\n        confidence_score: (item.context_data as any)?.confidence_score || 0.5,\n        source: (item.context_data as any)?.source || 'conversation',\n        created_at: item.created_at || new Date().toISOString()\n      })) || [];\n    } catch (error) {\n      console.error('Error fetching insights:', error);\n      return [];\n    }\n  }\n\n  // Helper methods\n  private assessExpertiseLevel(message: string): 'beginner' | 'intermediate' | 'advanced' {\n    const technicalTerms = ['ROI', 'CAC', 'LTV', 'EBITDA', 'KPI', 'OKR', 'ROAS'];\n    const termCount = technicalTerms.filter(term => message.includes(term)).length;\n    \n    if (termCount >= 3) return 'advanced';\n    if (termCount >= 1) return 'intermediate';\n    return 'beginner';\n  }\n\n  private categorizeGoal(message: string): string {\n    const messageLower = message.toLowerCase();\n    if (messageLower.includes('revenue') || messageLower.includes('sales') || messageLower.includes('profit')) {\n      return 'revenue';\n    }\n    if (messageLower.includes('efficiency') || messageLower.includes('optimize') || messageLower.includes('streamline')) {\n      return 'efficiency';\n    }\n    if (messageLower.includes('grow') || messageLower.includes('expand') || messageLower.includes('scale')) {\n      return 'growth';\n    }\n    return 'general';\n  }\n\n  private categorizeChallenge(message: string): string {\n    const messageLower = message.toLowerCase();\n    if (messageLower.includes('cost') || messageLower.includes('budget') || messageLower.includes('cash')) {\n      return 'financial';\n    }\n    if (messageLower.includes('process') || messageLower.includes('workflow') || messageLower.includes('efficiency')) {\n      return 'operational';\n    }\n    if (messageLower.includes('staff') || messageLower.includes('hiring') || messageLower.includes('retention')) {\n      return 'human_resources';\n    }\n    return 'general';\n  }\n\n  private assessUrgency(message: string): 'high' | 'medium' | 'low' {\n    const urgentKeywords = ['urgent', 'immediately', 'asap', 'critical', 'emergency'];\n    const hasUrgentKeywords = urgentKeywords.some(keyword => message.toLowerCase().includes(keyword));\n    return hasUrgentKeywords ? 'high' : 'medium';\n  }\n\n  private detectUrgencyIndicators(message: string): string[] {\n    const indicators = [];\n    const messageLower = message.toLowerCase();\n    \n    if (messageLower.includes('urgent') || messageLower.includes('asap')) {\n      indicators.push('time_pressure');\n    }\n    if (messageLower.includes('!')) {\n      indicators.push('exclamation_usage');\n    }\n    if (messageLower.includes('need') && messageLower.includes('now')) {\n      indicators.push('immediate_need');\n    }\n    \n    return indicators;\n  }\n\n  private assessTechnicalLevel(message: string): 'basic' | 'intermediate' | 'advanced' {\n    const expertise = this.assessExpertiseLevel(message);\n    return expertise === 'beginner' ? 'basic' : expertise;\n  }\n\n  private assessDecisionMakingStyle(message: string): 'analytical' | 'intuitive' | 'collaborative' {\n    const messageLower = message.toLowerCase();\n    \n    if (messageLower.includes('data') || messageLower.includes('analysis') || messageLower.includes('metrics')) {\n      return 'analytical';\n    }\n    if (messageLower.includes('team') || messageLower.includes('discuss') || messageLower.includes('feedback')) {\n      return 'collaborative';\n    }\n    return 'intuitive';\n  }\n\n  private calculateComplexity(message: string): 'low' | 'medium' | 'high' {\n    const wordCount = message.split(' ').length;\n    const questionCount = (message.match(/\\?/g) || []).length;\n    \n    if (wordCount > 100 || questionCount > 3) return 'high';\n    if (wordCount > 50 || questionCount > 1) return 'medium';\n    return 'low';\n  }\n\n  private hasInsightType(insights: LearningInsight[], type: string): boolean {\n    return insights.some(insight => insight.insight_type === type);\n  }\n\n  private hasSpecificInsight(insights: LearningInsight[], specificType: string): boolean {\n    return insights.some(insight => \n      insight.insight_data && \n      JSON.stringify(insight.insight_data).includes(specificType)\n    );\n  }\n\n  private extractTopicsFromHistory(history: string[]): string[] {\n    const topics = new Set<string>();\n    const topicKeywords = {\n      sales: ['sales', 'revenue', 'deals', 'pipeline', 'quota'],\n      marketing: ['marketing', 'campaigns', 'leads', 'conversion', 'brand'],\n      finance: ['finance', 'budget', 'cost', 'profit', 'cash'],\n      operations: ['operations', 'process', 'workflow', 'efficiency', 'project']\n    };\n\n    history.forEach(message => {\n      const messageLower = message.toLowerCase();\n      Object.entries(topicKeywords).forEach(([topic, keywords]) => {\n        if (keywords.some(keyword => messageLower.includes(keyword))) {\n          topics.add(topic);\n        }\n      });\n    });\n\n    return Array.from(topics);\n  }\n\n  private extractContext(message: string): string {\n    // Extract the sentence or phrase that provides context\n    const sentences = message.split(/[.!?]+/);\n    return sentences[0] || message.substring(0, 100);\n  }\n\n  private async calculateFinancialHealth(): Promise<CompanyHealthMetric> {\n    // This would integrate with actual financial data\n    return {\n      metric_name: 'Financial Health',\n      current_score: 75,\n      benchmark_score: 70,\n      trend: 'improving',\n      last_updated: new Date().toISOString(),\n      contributing_factors: ['Positive cash flow', 'Growing revenue', 'Controlled expenses']\n    };\n  }\n\n  private async calculateOperationalHealth(): Promise<CompanyHealthMetric> {\n    // This would analyze project completion rates, support ticket resolution, etc.\n    return {\n      metric_name: 'Operational Efficiency',\n      current_score: 68,\n      benchmark_score: 72,\n      trend: 'stable',\n      last_updated: new Date().toISOString(),\n      contributing_factors: ['Good project delivery', 'Room for process improvement']\n    };\n  }\n\n  private async calculateTeamHealth(): Promise<CompanyHealthMetric> {\n    // This would analyze user activity, engagement patterns, etc.\n    return {\n      metric_name: 'Team Engagement',\n      current_score: 82,\n      benchmark_score: 75,\n      trend: 'improving',\n      last_updated: new Date().toISOString(),\n      contributing_factors: ['High platform usage', 'Active collaboration']\n    };\n  }\n}\n\n/**\n * Service for managing progressive learning across the platform\n */\nexport const progressiveLearningService = {\n  /**\n   * Initialize learning for a user session\n   */\n  async initializeLearning(userId: string, companyId: string): Promise<ProgressiveLearning> {\n    return new ProgressiveLearning(userId, companyId);\n  },\n\n  /**\n   * Analyze conversation and extract insights\n   */\n  async analyzeUserInteraction(\n    userId: string,\n    companyId: string,\n    userMessage: string,\n    aiResponse: string,\n    agent: Agent,\n    feedback?: 'helpful' | 'unhelpful' | 'partially_helpful'\n  ): Promise<LearningInsight[]> {\n    const learning = new ProgressiveLearning(userId, companyId);\n    return learning.analyzeConversation(userMessage, aiResponse, agent, feedback);\n  },\n\n  /**\n   * Get contextual questions to enhance user profiling\n   */\n  async getContextualQuestions(\n    userId: string,\n    companyId: string,\n    conversationHistory: string[]\n  ): Promise<string[]> {\n    const learning = new ProgressiveLearning(userId, companyId);\n    return learning.generateContextualQuestions(conversationHistory);\n  },\n\n  /**\n   * Calculate and update company health scores\n   */\n  async updateCompanyHealth(companyId: string): Promise<CompanyHealthMetric[]> {\n    const learning = new ProgressiveLearning('system', companyId);\n    return learning.calculateCompanyHealthScore();\n  }\n}; ","usedDeprecatedRules":[]},{"filePath":"/home/vonj/Github/Nexus/src/lib/ai/tools/paypal.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":4,"column":46,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":4,"endColumn":49,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[191,194],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[191,194],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { supabase } from '@/lib/core/supabase';\n\nexport async function listPayPalTxns({ orgId, limit = 50 }: { orgId: string; limit?: number }) {\n  const { data, error } = await (supabase as any).rpc('rpc_list_paypal_txns', {\n    p_org: orgId,\n    p_limit: limit,\n  });\n  if (error) throw error;\n  return data;\n} ","usedDeprecatedRules":[]},{"filePath":"/home/vonj/Github/Nexus/src/lib/auth/unifiedAuthService.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":32,"column":12,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":32,"endColumn":15,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[794,797],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[794,797],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":80,"column":43,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":80,"endColumn":46,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2075,2078],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2075,2078],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":162,"column":65,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":162,"endColumn":68,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[4379,4382],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[4379,4382],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\n * Unified Authentication Service\n * Bridges Supabase authentication with user context for conversations\n * Ensures all user interactions are properly linked to their account\n */\n\nimport { supabase } from './core/supabase';\nimport type { User as SupabaseUser } from '@supabase/supabase-js';\n\nexport interface UnifiedUser {\n  id: string;\n  email: string;\n  name?: string;\n  avatar_url?: string;\n  created_at: string;\n  last_sign_in_at?: string;\n  // Nexus-specific user data\n  role?: 'admin' | 'user' | 'manager';\n  department?: string;\n  company?: string;\n  preferences?: {\n    theme: 'light' | 'dark' | 'system';\n    notifications: boolean;\n    language: string;\n  };\n}\n\nexport interface AuthState {\n  user: UnifiedUser | null;\n  isAuthenticated: boolean;\n  isLoading: boolean;\n  session: any;\n}\n\nclass UnifiedAuthService {\n  private listeners: Array<(state: AuthState) => void> = [];\n  private currentState: AuthState = {\n    user: null,\n    isAuthenticated: false,\n    isLoading: true,\n    session: null\n  };\n\n  constructor() {\n    this.initializeAuth();\n  }\n\n  /**\n   * Initialize authentication and set up listeners\n   */\n  private async initializeAuth() {\n    try {\n      // Get current session\n      const { data: { session }, error } = await supabase.auth.getSession();\n      \n      if (error) {\n        console.error('Error getting session:', error);\n        this.updateState({ user: null, isAuthenticated: false, isLoading: false, session: null });\n        return;\n      }\n\n      // Set initial user state\n      await this.handleAuthChange(session);\n\n      // Listen for auth changes\n      supabase.auth.onAuthStateChange(async (event, session) => {\n        console.log('Auth state changed:', event, session?.user?.email);\n        await this.handleAuthChange(session);\n      });\n\n    } catch (error) {\n      console.error('Error initializing auth:', error);\n      this.updateState({ user: null, isAuthenticated: false, isLoading: false, session: null });\n    }\n  }\n\n  /**\n   * Handle authentication state changes\n   */\n  private async handleAuthChange(session: any) {\n    this.updateState({ ...this.currentState, isLoading: true, session });\n\n    if (session?.user) {\n      try {\n        // Get or create user profile\n        const unifiedUser = await this.getOrCreateUserProfile(session.user);\n        this.updateState({\n          user: unifiedUser,\n          isAuthenticated: true,\n          isLoading: false,\n          session\n        });\n      } catch (error) {\n        console.error('Error handling auth change:', error);\n        this.updateState({\n          user: null,\n          isAuthenticated: false,\n          isLoading: false,\n          session: null\n        });\n      }\n    } else {\n      this.updateState({\n        user: null,\n        isAuthenticated: false,\n        isLoading: false,\n        session: null\n      });\n    }\n  }\n\n  /**\n   * Get or create user profile in our system\n   */\n  private async getOrCreateUserProfile(supabaseUser: SupabaseUser): Promise<UnifiedUser> {\n    // Check if user profile exists\n    const { data: existingProfile, error: fetchError } = await supabase\n      .from('user_profiles')\n      .select('*')\n      .eq('id', supabaseUser.id)\n      .single();\n\n    if (existingProfile && !fetchError) {\n      return this.mapToUnifiedUser(supabaseUser, existingProfile);\n    }\n\n    // Create new user profile\n    const newProfile = {\n      id: supabaseUser.id,\n      email: supabaseUser.email!,\n      name: supabaseUser.user_metadata?.full_name || supabaseUser.email?.split('@')[0],\n      avatar_url: supabaseUser.user_metadata?.avatar_url,\n      role: 'user' as const,\n      department: null,\n      company: null,\n      preferences: {\n        theme: 'system' as const,\n        notifications: true,\n        language: 'en'\n      },\n      created_at: new Date().toISOString()\n    };\n\n    const { data: createdProfile, error: createError } = await supabase\n      .from('user_profiles')\n      .insert([newProfile])\n      .select()\n      .single();\n\n    if (createError) {\n      console.error('Error creating user profile:', createError);\n      // Fallback to basic user data\n      return this.mapToUnifiedUser(supabaseUser, null);\n    }\n\n    return this.mapToUnifiedUser(supabaseUser, createdProfile);\n  }\n\n  /**\n   * Map Supabase user and profile to unified user\n   */\n  private mapToUnifiedUser(supabaseUser: SupabaseUser, profile: any): UnifiedUser {\n    return {\n      id: supabaseUser.id,\n      email: supabaseUser.email!,\n      name: profile?.name || supabaseUser.user_metadata?.full_name || supabaseUser.email?.split('@')[0],\n      avatar_url: profile?.avatar_url || supabaseUser.user_metadata?.avatar_url,\n      created_at: supabaseUser.created_at,\n      last_sign_in_at: supabaseUser.last_sign_in_at,\n      role: profile?.role || 'user',\n      department: profile?.department,\n      company: profile?.company,\n      preferences: profile?.preferences || {\n        theme: 'system',\n        notifications: true,\n        language: 'en'\n      }\n    };\n  }\n\n  /**\n   * Update internal state and notify listeners\n   */\n  private updateState(newState: Partial<AuthState>) {\n    this.currentState = { ...this.currentState, ...newState };\n    this.listeners.forEach(listener => listener(this.currentState));\n  }\n\n  /**\n   * Subscribe to auth state changes\n   */\n  subscribe(listener: (state: AuthState) => void): () => void {\n    this.listeners.push(listener);\n    // Immediately call with current state\n    listener(this.currentState);\n    \n    // Return unsubscribe function\n    return () => {\n      const index = this.listeners.indexOf(listener);\n      if (index > -1) {\n        this.listeners.splice(index, 1);\n      }\n    };\n  }\n\n  /**\n   * Get current auth state\n   */\n  getCurrentState(): AuthState {\n    return this.currentState;\n  }\n\n  /**\n   * Get current user for chat context\n   */\n  getCurrentUser(): UnifiedUser | null {\n    return this.currentState.user;\n  }\n\n  /**\n   * Check if user is authenticated for API calls\n   */\n  isAuthenticated(): boolean {\n    return this.currentState.isAuthenticated && !!this.currentState.user;\n  }\n\n  /**\n   * Sign in user\n   */\n  async signIn(email: string, password: string): Promise<{ success: boolean; error?: string }> {\n    try {\n      const { error } = await supabase.auth.signInWithPassword({ email, password });\n      if (error) {\n        return { success: false, error: error.message };\n      }\n      return { success: true };\n    } catch (error) {\n      return { \n        success: false, \n        error: error instanceof Error ? error.message : 'Unknown error' \n      };\n    }\n  }\n\n  /**\n   * Sign up user\n   */\n  async signUp(email: string, password: string): Promise<{ success: boolean; error?: string }> {\n    try {\n      const { error } = await supabase.auth.signUp({ email, password });\n      if (error) {\n        return { success: false, error: error.message };\n      }\n      return { success: true };\n    } catch (error) {\n      return { \n        success: false, \n        error: error instanceof Error ? error.message : 'Unknown error' \n      };\n    }\n  }\n\n  /**\n   * Sign out user\n   */\n  async signOut(): Promise<{ success: boolean; error?: string }> {\n    try {\n      const { error } = await supabase.auth.signOut();\n      if (error) {\n        return { success: false, error: error.message };\n      }\n      return { success: true };\n    } catch (error) {\n      return { \n        success: false, \n        error: error instanceof Error ? error.message : 'Unknown error' \n      };\n    }\n  }\n\n  /**\n   * Update user profile\n   */\n  async updateProfile(updates: Partial<UnifiedUser>): Promise<{ success: boolean; error?: string }> {\n    if (!this.isAuthenticated()) {\n      return { success: false, error: 'User not authenticated' };\n    }\n\n    try {\n      const { error } = await supabase\n        .from('user_profiles')\n        .update(updates)\n        .eq('id', this.currentState.user!.id);\n\n      if (error) {\n        return { success: false, error: error.message };\n      }\n\n      // Update local state\n      this.updateState({\n        user: { ...this.currentState.user!, ...updates }\n      });\n\n      return { success: true };\n    } catch (error) {\n      return { \n        success: false, \n        error: error instanceof Error ? error.message : 'Unknown error' \n      };\n    }\n  }\n\n  /**\n   * Reset password for user\n   */\n  async resetPassword(email: string): Promise<{ success: boolean; error?: string }> {\n    try {\n      const { error } = await supabase.auth.resetPasswordForEmail(email, {\n        redirectTo: `${window.location.origin}/auth/callback?next=/reset-password`,\n      });\n      if (error) {\n        return { success: false, error: error.message };\n      }\n      return { success: true };\n    } catch (error) {\n      return { \n        success: false, \n        error: error instanceof Error ? error.message : 'Unknown error' \n      };\n    }\n  }\n}\n\n// Export singleton instance\nexport const unifiedAuthService = new UnifiedAuthService(); ","usedDeprecatedRules":[]},{"filePath":"/home/vonj/Github/Nexus/src/lib/auth/userN8nConfig.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":207,"column":21,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":207,"endColumn":24,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[5910,5913],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[5910,5913],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'configId' is defined but never used.","line":235,"column":22,"nodeType":null,"messageId":"unusedVar","endLine":235,"endColumn":30},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":311,"column":42,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":311,"endColumn":45,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[8595,8598],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[8595,8598],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":331,"column":50,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":331,"endColumn":53,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[9086,9089],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[9086,9089],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\n * userN8nConfig.ts\n * Service for managing user-specific n8n configurations\n * Handles storage, retrieval, and validation of n8n connection settings\n */\nimport { supabase } from './core/supabase';\n\nexport interface UserN8nConfig {\n  id?: string;\n  userId: string;\n  instanceName?: string;\n  baseUrl: string;\n  apiKey: string;\n  isActive: boolean;\n  createdAt?: string;\n  updatedAt?: string;\n}\n\nclass UserN8nConfigService {\n  private currentConfig: UserN8nConfig | null = null;\n  private configCache = new Map<string, UserN8nConfig>();\n  private isN8nEnabled = false; // Disable n8n by default until user wants to configure it\n\n  /**\n   * Enable n8n integration for the user\n   */\n  enableN8nIntegration(): void {\n    this.isN8nEnabled = true;\n  }\n\n  /**\n   * Disable n8n integration for the user\n   */\n  disableN8nIntegration(): void {\n    this.isN8nEnabled = false;\n    this.configCache.clear();\n    this.currentConfig = null;\n  }\n\n  /**\n   * Check if n8n integration is enabled\n   */\n  isEnabled(): boolean {\n    return this.isN8nEnabled;\n  }\n\n  /**\n   * Get the active n8n configuration for the current user\n   * Only attempts to fetch if n8n integration is enabled\n   */\n  async getCurrentUserConfig(): Promise<UserN8nConfig | null> {\n    // Return null immediately if n8n integration is disabled\n    if (!this.isN8nEnabled) {\n      return null;\n    }\n\n    try {\n      const { data: { user } } = await supabase.auth.getUser();\n      if (!user?.id) {\n        console.warn('No authenticated user found');\n        return null;\n      }\n\n      // Check cache first\n      const cached = this.configCache.get(user.id);\n      if (cached) {\n        return cached;\n      }\n\n      // Try to get from database first\n      const dbConfig = await this.getFromDatabase(user.id);\n      if (dbConfig) {\n        this.configCache.set(user.id, dbConfig);\n        this.currentConfig = dbConfig;\n        return dbConfig;\n      }\n\n      // Fallback to localStorage\n      const stored = this.getFromLocalStorage(user.id);\n      if (stored) {\n        this.configCache.set(user.id, stored);\n        this.currentConfig = stored;\n        return stored;\n      }\n\n      return null;\n    } catch (error) {\n      console.error('Failed to get current user config:', error);\n      return null;\n    }\n  }\n\n  /**\n   * Save n8n configuration for the current user\n   */\n  async saveUserConfig(config: Omit<UserN8nConfig, 'id' | 'userId' | 'createdAt' | 'updatedAt'>): Promise<boolean> {\n    try {\n      const { data: { user } } = await supabase.auth.getUser();\n      if (!user?.id) {\n        throw new Error('No authenticated user found');\n      }\n\n      // First deactivate any existing configurations\n      await supabase\n        .from('n8n_configurations')\n        .update({ is_active: false })\n        .eq('user_id', user.id);\n\n      // Insert new configuration\n      const { data, error } = await supabase\n        .from('n8n_configurations')\n        .insert([\n          {\n            user_id: user.id,\n            instance_name: config.instanceName || 'My n8n Instance',\n            base_url: config.baseUrl.replace(/\\/$/, ''),\n            api_key: config.apiKey,\n            is_active: config.isActive\n          }\n        ])\n        .select()\n        .single();\n\n      if (error) {\n        console.error('Database save failed, falling back to localStorage:', error);\n        // Fallback to localStorage if database save fails\n        const fullConfig: UserN8nConfig = {\n          ...config,\n          userId: user.id,\n          createdAt: new Date().toISOString(),\n          updatedAt: new Date().toISOString(),\n          id: `${user.id}-${Date.now()}`\n        };\n        this.saveToLocalStorage(user.id, fullConfig);\n        this.configCache.set(user.id, fullConfig);\n        this.currentConfig = fullConfig;\n        return true;\n      }\n\n      // Convert database response to UserN8nConfig format\n      const fullConfig: UserN8nConfig = {\n        id: data.id,\n        userId: data.user_id,\n        instanceName: data.instance_name || undefined,\n        baseUrl: data.base_url,\n        apiKey: data.api_key,\n        isActive: data.is_active || false,\n        createdAt: data.created_at || undefined,\n        updatedAt: data.updated_at || undefined\n      };\n\n      // Update cache\n      this.configCache.set(user.id, fullConfig);\n      this.currentConfig = fullConfig;\n\n      // Also save to localStorage as backup\n      this.saveToLocalStorage(user.id, fullConfig);\n\n      return true;\n    } catch (error) {\n      console.error('Failed to save user config:', error);\n      return false;\n    }\n  }\n\n  /**\n   * Test connection to n8n instance\n   */\n  async testConnection(baseUrl: string, apiKey: string): Promise<{ success: boolean; error?: string }> {\n    try {\n      // Clean up URL\n      const cleanUrl = baseUrl.replace(/\\/$/, '');\n      \n      // Test health endpoint first\n      const healthResponse = await fetch(`${cleanUrl}/healthz`, {\n        method: 'GET',\n        headers: {\n          'Accept': 'application/json',\n        },\n      });\n\n      if (!healthResponse.ok) {\n        return { success: false, error: 'n8n instance is not accessible' };\n      }\n\n      // Test API key with workflows endpoint\n      const apiResponse = await fetch(`${cleanUrl}/api/v1/workflows`, {\n        method: 'GET',\n        headers: {\n          'Authorization': `Bearer ${apiKey}`,\n          'Content-Type': 'application/json',\n          'Accept': 'application/json',\n        },\n      });\n\n      if (!apiResponse.ok) {\n        if (apiResponse.status === 401) {\n          return { success: false, error: 'Invalid API key' };\n        } else if (apiResponse.status === 403) {\n          return { success: false, error: 'API key does not have sufficient permissions' };\n        } else {\n          return { success: false, error: `API request failed: ${apiResponse.status}` };\n        }\n      }\n\n      return { success: true };\n    } catch (error: any) {\n      console.error('Connection test failed:', error);\n      return { \n        success: false, \n        error: error.message || 'Failed to connect to n8n instance'\n      };\n    }\n  }\n\n  /**\n   * Get all configurations for current user\n   */\n  async getUserConfigs(): Promise<UserN8nConfig[]> {\n    try {\n      const { data: { user } } = await supabase.auth.getUser();\n      if (!user?.id) return [];\n\n      const stored = this.getFromLocalStorage(user.id);\n      return stored ? [stored] : [];\n    } catch (error) {\n      console.error('Failed to get user configs:', error);\n      return [];\n    }\n  }\n\n  /**\n   * Delete a configuration\n   */\n  async deleteConfig(configId: string): Promise<boolean> {\n    try {\n      const { data: { user } } = await supabase.auth.getUser();\n      if (!user?.id) return false;\n\n      // Remove from localStorage\n      this.removeFromLocalStorage(user.id);\n      \n      // Clear cache\n      this.configCache.delete(user.id);\n      this.currentConfig = null;\n\n      return true;\n    } catch (error) {\n      console.error('Failed to delete config:', error);\n      return false;\n    }\n  }\n\n  /**\n   * Check if user has any n8n configuration\n   */\n  async hasConfiguration(): Promise<boolean> {\n    const config = await this.getCurrentUserConfig();\n    return config !== null;\n  }\n\n  /**\n   * Clear all cached configurations\n   */\n  clearCache(): void {\n    this.configCache.clear();\n    this.currentConfig = null;\n  }\n\n  // Private methods for localStorage handling\n\n  private getStorageKey(userId: string): string {\n    return `nexus_n8n_config_${userId}`;\n  }\n\n  private saveToLocalStorage(userId: string, config: UserN8nConfig): void {\n    try {\n      const key = this.getStorageKey(userId);\n      localStorage.setItem(key, JSON.stringify(config));\n    } catch (error) {\n      console.error('Failed to save to localStorage:', error);\n    }\n  }\n\n  private getFromLocalStorage(userId: string): UserN8nConfig | null {\n    try {\n      const key = this.getStorageKey(userId);\n      const stored = localStorage.getItem(key);\n      if (stored) {\n        return JSON.parse(stored) as UserN8nConfig;\n      }\n      return null;\n    } catch (error) {\n      console.error('Failed to get from localStorage:', error);\n      return null;\n    }\n  }\n\n  private removeFromLocalStorage(userId: string): void {\n    try {\n      const key = this.getStorageKey(userId);\n      localStorage.removeItem(key);\n    } catch (error) {\n      console.error('Failed to remove from localStorage:', error);\n    }\n  }\n\n  // Database methods for Supabase persistence\n  \n  private async saveToDatabase(config: UserN8nConfig): Promise<void> {\n    const { error } = await (supabase as any)\n      .from('n8n_configurations')\n      .upsert([\n        {\n          id: config.id,\n          user_id: config.userId,\n          instance_name: config.instanceName,\n          base_url: config.baseUrl,\n          api_key: config.apiKey,\n          is_active: config.isActive\n        }\n      ]);\n      \n    if (error) {\n      throw error;\n    }\n  }\n\n  private async getFromDatabase(userId: string): Promise<UserN8nConfig | null> {\n    try {\n      const { data, error } = await (supabase as any)\n        .from('n8n_configurations')\n        .select('*')\n        .eq('user_id', userId)\n        .eq('is_active', true)\n        .single();\n        \n      if (error || !data) {\n        return null;\n      }\n      \n      return {\n        id: data.id,\n        userId: data.user_id,\n        instanceName: data.instance_name || undefined,\n        baseUrl: data.base_url,\n        apiKey: data.api_key,\n        isActive: data.is_active || false,\n        createdAt: data.created_at || undefined,\n        updatedAt: data.updated_at || undefined\n      };\n    } catch (error) {\n      console.error('Failed to get config from database:', error);\n      return null;\n    }\n  }\n}\n\n// Export singleton instance\nexport const userN8nConfigService = new UserN8nConfigService();\n\n// Export types and service\nexport default userN8nConfigService; ","usedDeprecatedRules":[]},{"filePath":"/home/vonj/Github/Nexus/src/lib/automation/businessProcessMining.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":15,"column":27,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":15,"endColumn":30,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[325,328],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[325,328],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\n * Business Process Mining Service\n * DISABLED for 1.0 - Coming in v1.1\n * This provides a stub implementation to prevent build errors\n */\n\ninterface ProcessStep {\n  id: string;\n  action: string;\n  component: string;\n  timestamp: Date;\n  duration: number;\n  userId: string;\n  sessionId: string;\n  context: Record<string, any>;\n  outcome: 'success' | 'failure' | 'abandoned';\n}\n\ninterface BusinessProcess {\n  id: string;\n  name: string;\n  department: string;\n  steps: ProcessStep[];\n  frequency: number;\n  averageDuration: number;\n  successRate: number;\n  bottlenecks: ProcessBottleneck[];\n  optimizationPotential: number;\n  lastAnalyzed: Date;\n}\n\ninterface ProcessBottleneck {\n  stepId: string;\n  type: 'time' | 'error' | 'abandonment' | 'complexity';\n  severity: 'low' | 'medium' | 'high' | 'critical';\n  description: string;\n  impact: number;\n  suggestedSolution: string;\n}\n\ninterface ProcessOptimization {\n  processId: string;\n  type: 'elimination' | 'automation' | 'simplification' | 'reordering';\n  title: string;\n  description: string;\n  expectedTimeSaving: number;\n  expectedErrorReduction: number;\n  implementationComplexity: 'low' | 'medium' | 'high';\n  automationWorkflow?: string;\n  alternativeFlowDesign?: ProcessStep[];\n}\n\n/**\n * Business Process Mining Service (DISABLED FOR 1.0)\n */\nclass BusinessProcessMining {\n  async trackProcessStep(step: Omit<ProcessStep, 'id'>): Promise<void> {\n    // Feature disabled for 1.0 - coming in v1.1\n    console.log('Process step tracking coming in v1.1:', step.action);\n  }\n\n  async discoverProcesses(): Promise<BusinessProcess[]> {\n    console.log('Process discovery coming in v1.1');\n    return [];\n  }\n\n  async generateOptimizations(): Promise<ProcessOptimization[]> {\n    console.log('Process optimization coming in v1.1');\n    return [];\n  }\n\n  async autoOptimizeProcess(): Promise<boolean> {\n    console.log('Auto-optimization coming in v1.1');\n    return false;\n  }\n}\n\n// Export singleton\nexport const businessProcessMining = new BusinessProcessMining();\n\n// Export types\nexport type { ProcessStep, BusinessProcess, ProcessBottleneck, ProcessOptimization };\n\n// Export stub functions for compatibility\nexport async function analyzeProcessSteps(): Promise<ProcessStep[]> {\n  console.log('Business process mining coming in v1.1');\n  return [];\n}\n\nexport async function identifyBottlenecks(): Promise<ProcessBottleneck[]> {\n  console.log('Bottleneck analysis coming in v1.1');\n  return [];\n}\n\nexport async function generateProcessOptimizations(): Promise<ProcessOptimization[]> {\n  console.log('Process optimization coming in v1.1');\n  return [];\n} ","usedDeprecatedRules":[]},{"filePath":"/home/vonj/Github/Nexus/src/lib/automation/intelligentSystemEvolution-stub.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/vonj/Github/Nexus/src/lib/automation/intelligentSystemEvolution.ts","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'n8nService' is defined but never used.","line":8,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":8,"endColumn":20},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":17,"column":27,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":17,"endColumn":30,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[460,463],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[460,463],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":121,"column":41,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":121,"endColumn":44,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3335,3338],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3335,3338],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":151,"column":42,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":151,"endColumn":45,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[4238,4241],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[4238,4241],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":328,"column":51,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":328,"endColumn":54,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[10593,10596],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[10593,10596],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'prompt' is assigned a value but never used.","line":329,"column":11,"nodeType":null,"messageId":"unusedVar","endLine":329,"endColumn":17},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'patterns' is defined but never used.","line":387,"column":37,"nodeType":null,"messageId":"unusedVar","endLine":387,"endColumn":45},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":387,"column":64,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":387,"endColumn":67,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[12416,12419],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[12416,12419],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'metrics' is defined but never used.","line":396,"column":49,"nodeType":null,"messageId":"unusedVar","endLine":396,"endColumn":56},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'metrics' is defined but never used.","line":400,"column":50,"nodeType":null,"messageId":"unusedVar","endLine":400,"endColumn":57},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'patterns' is defined but never used.","line":404,"column":40,"nodeType":null,"messageId":"unusedVar","endLine":404,"endColumn":48},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'metrics' is defined but never used.","line":404,"column":66,"nodeType":null,"messageId":"unusedVar","endLine":404,"endColumn":73},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":408,"column":43,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":408,"endColumn":46,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[13119,13122],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[13119,13122],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":412,"column":50,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":412,"endColumn":53,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[13252,13255],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[13252,13255],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":416,"column":56,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":416,"endColumn":59,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[13370,13373],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[13370,13373],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'improvement' is defined but never used.","line":420,"column":38,"nodeType":null,"messageId":"unusedVar","endLine":420,"endColumn":49}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":16,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\n * intelligentSystemEvolution.ts\n * Self-evolving system that analyzes usage patterns and automatically improves Nexus\n * Generates new components, optimizes workflows, and adapts to business needs\n */\n\nimport { supabase } from './core/supabase';\nimport { n8nService } from './n8nService';\n\ninterface UsagePattern {\n  id: string;\n  userId: string;\n  componentPath: string;\n  action: string;\n  frequency: number;\n  lastUsed: Date;\n  context: Record<string, any>;\n  businessValue: number;\n}\n\ninterface SystemEvolutionSuggestion {\n  id: string;\n  type: 'component' | 'workflow' | 'integration' | 'optimization';\n  priority: 'low' | 'medium' | 'high' | 'critical';\n  title: string;\n  description: string;\n  estimatedImpact: number;\n  requiredResources: string[];\n  generatedCode?: string;\n  implementationPlan: string[];\n  businessJustification: string;\n  createdAt: Date;\n}\n\ninterface BusinessMetrics {\n  dailyActiveUsers: number;\n  taskCompletionRate: number;\n  averageTaskTime: number;\n  userSatisfactionScore: number;\n  systemPerformance: number;\n  integrationHealth: number;\n}\n\nclass IntelligentSystemEvolution {\n  private learningInterval: NodeJS.Timeout | null = null;\n  private readonly ANALYSIS_INTERVAL = 24 * 60 * 60 * 1000; // 24 hours\n\n  /**\n   * Start continuous learning and evolution\n   */\n  startEvolution(): void {\n    if (this.learningInterval) return;\n\n    this.learningInterval = setInterval(async () => {\n      await this.analyzeAndEvolve();\n    }, this.ANALYSIS_INTERVAL);\n\n    // Run initial analysis\n    this.analyzeAndEvolve();\n  }\n\n  /**\n   * Stop evolution monitoring\n   */\n  stopEvolution(): void {\n    if (this.learningInterval) {\n      clearInterval(this.learningInterval);\n      this.learningInterval = null;\n    }\n  }\n\n  /**\n   * Main evolution analysis and improvement cycle\n   */\n  private async analyzeAndEvolve(): Promise<void> {\n    try {\n      console.log('🧠 Starting intelligent system evolution analysis...');\n\n      // 1. Collect usage patterns\n      const patterns = await this.collectUsagePatterns();\n      \n      // 2. Analyze business metrics\n      const metrics = await this.analyzeBusinessMetrics();\n      \n      // 3. Identify improvement opportunities\n      const suggestions = await this.generateEvolutionSuggestions(patterns, metrics);\n      \n      // 4. Auto-implement safe improvements\n      await this.autoImplementSafeImprovements(suggestions);\n      \n      // 5. Queue complex improvements for review\n      await this.queueComplexImprovements(suggestions);\n\n      console.log(`✅ Evolution analysis complete. Generated ${suggestions.length} suggestions.`);\n    } catch (error) {\n      console.error('❌ Evolution analysis failed:', error);\n    }\n  }\n\n  /**\n   * Collect and analyze user behavior patterns\n   */\n  private async collectUsagePatterns(): Promise<UsagePattern[]> {\n    const { data: patterns, error } = await supabase\n      .from('chat_usage_tracking')\n      .select('*')\n      .gte('created_at', new Date(Date.now() - 7 * 24 * 60 * 60 * 1000).toISOString());\n\n    if (error) {\n      console.error('Error collecting usage patterns:', error);\n      return [];\n    }\n\n    // Analyze patterns for insights\n    return this.processUsagePatterns(patterns || []);\n  }\n\n  /**\n   * Process raw usage data into actionable patterns\n   */\n  private processUsagePatterns(rawData: any[]): UsagePattern[] {\n    const patternMap = new Map<string, UsagePattern>();\n\n    rawData.forEach(record => {\n      const key = `${record.user_id}-${record.component_path}-${record.action}`;\n      \n      if (patternMap.has(key)) {\n        const existing = patternMap.get(key)!;\n        existing.frequency++;\n        existing.lastUsed = new Date(record.created_at);\n      } else {\n        patternMap.set(key, {\n          id: key,\n          userId: record.user_id,\n          componentPath: record.component_path,\n          action: record.action,\n          frequency: 1,\n          lastUsed: new Date(record.created_at),\n          context: record.context || {},\n          businessValue: this.calculateBusinessValue(record)\n        });\n      }\n    });\n\n    return Array.from(patternMap.values());\n  }\n\n  /**\n   * Calculate business value of a usage pattern\n   */\n  private calculateBusinessValue(record: any): number {\n    // AI-driven business value calculation\n    let value = 0;\n\n    // Time saved\n    if (record.task_completion_time) {\n      value += Math.max(0, 300 - record.task_completion_time) / 10; // Bonus for fast completion\n    }\n\n    // User satisfaction\n    if (record.user_rating) {\n      value += record.user_rating * 20;\n    }\n\n    // Business impact\n    const businessCriticalPaths = ['/finance/', '/sales/', '/operations/'];\n    if (businessCriticalPaths.some(path => record.component_path.includes(path))) {\n      value += 50;\n    }\n\n    return value;\n  }\n\n  /**\n   * Analyze current business metrics for optimization opportunities\n   */\n  private async analyzeBusinessMetrics(): Promise<BusinessMetrics> {\n    const [userMetrics, performanceMetrics, integrationMetrics] = await Promise.all([\n      this.getUserMetrics(),\n      this.getPerformanceMetrics(),\n      this.getIntegrationHealthMetrics()\n    ]);\n\n    return {\n      dailyActiveUsers: userMetrics.dailyActive,\n      taskCompletionRate: userMetrics.completionRate,\n      averageTaskTime: performanceMetrics.averageTaskTime,\n      userSatisfactionScore: userMetrics.satisfactionScore,\n      systemPerformance: performanceMetrics.systemScore,\n      integrationHealth: integrationMetrics.healthScore\n    };\n  }\n\n  /**\n   * Generate intelligent evolution suggestions\n   */\n  private async generateEvolutionSuggestions(\n    patterns: UsagePattern[],\n    metrics: BusinessMetrics\n  ): Promise<SystemEvolutionSuggestion[]> {\n    const suggestions: SystemEvolutionSuggestion[] = [];\n\n    // 1. Component optimization suggestions\n    const componentSuggestions = await this.generateComponentOptimizations(patterns);\n    suggestions.push(...componentSuggestions);\n\n    // 2. Workflow automation opportunities\n    const workflowSuggestions = await this.generateWorkflowAutomations(patterns);\n    suggestions.push(...workflowSuggestions);\n\n    // 3. Integration improvements\n    const integrationSuggestions = await this.generateIntegrationImprovements(metrics);\n    suggestions.push(...integrationSuggestions);\n\n    // 4. Performance optimizations\n    const performanceSuggestions = await this.generatePerformanceOptimizations(metrics);\n    suggestions.push(...performanceSuggestions);\n\n    // 5. User experience improvements\n    const uxSuggestions = await this.generateUXImprovements(patterns, metrics);\n    suggestions.push(...uxSuggestions);\n\n    return suggestions.sort((a, b) => b.estimatedImpact - a.estimatedImpact);\n  }\n\n  /**\n   * Generate new component optimizations based on usage patterns\n   */\n  private async generateComponentOptimizations(patterns: UsagePattern[]): Promise<SystemEvolutionSuggestion[]> {\n    const suggestions: SystemEvolutionSuggestion[] = [];\n\n    // Find frequently used component combinations\n    const componentCombinations = this.findComponentCombinations(patterns);\n\n    for (const combo of componentCombinations) {\n      if (combo.frequency > 10 && combo.averageTime > 30) {\n        const newComponentCode = await this.generateOptimizedComponent(combo);\n        \n        suggestions.push({\n          id: `component-optimization-${Date.now()}`,\n          type: 'component',\n          priority: combo.frequency > 50 ? 'high' : 'medium',\n          title: `Optimized Component for ${combo.components.join(' + ')}`,\n          description: `Create a combined component that streamlines the common workflow of ${combo.components.join(', ')}`,\n          estimatedImpact: combo.frequency * combo.timeSaved,\n          requiredResources: ['Frontend Developer', '1-2 hours'],\n          generatedCode: newComponentCode,\n          implementationPlan: [\n            'Create new composite component',\n            'Add to component library',\n            'Update relevant pages to use new component',\n            'Add analytics tracking',\n            'Test with sample users'\n          ],\n          businessJustification: `Could save ${combo.timeSaved} seconds per use, affecting ${combo.frequency} uses per week`,\n          createdAt: new Date()\n        });\n      }\n    }\n\n    return suggestions;\n  }\n\n  /**\n   * Generate intelligent workflow automation suggestions\n   */\n  private async generateWorkflowAutomations(patterns: UsagePattern[]): Promise<SystemEvolutionSuggestion[]> {\n    const suggestions: SystemEvolutionSuggestion[] = [];\n\n    // Find repetitive manual tasks\n    const repetitiveTasks = patterns.filter(p => \n      p.frequency > 20 && \n      p.action.includes('manual') || \n      p.action.includes('copy') || \n      p.action.includes('enter')\n    );\n\n    for (const task of repetitiveTasks) {\n      const automationWorkflow = await this.generateAutomationWorkflow(task);\n      \n      suggestions.push({\n        id: `automation-${task.id}`,\n        type: 'workflow',\n        priority: task.frequency > 100 ? 'critical' : 'high',\n        title: `Automate ${task.action} in ${task.componentPath}`,\n        description: `Create n8n workflow to automate repetitive ${task.action} task`,\n        estimatedImpact: task.frequency * 30, // 30 seconds saved per automation\n        requiredResources: ['n8n Workflow', 'API Integration'],\n        generatedCode: automationWorkflow,\n        implementationPlan: [\n          'Create n8n workflow',\n          'Set up data connections',\n          'Add trigger conditions',\n          'Test automation',\n          'Deploy and monitor'\n        ],\n        businessJustification: `Eliminate ${task.frequency} manual tasks per week, saving ${(task.frequency * 30) / 60} minutes`,\n        createdAt: new Date()\n      });\n    }\n\n    return suggestions;\n  }\n\n  /**\n   * Auto-implement safe, low-risk improvements\n   */\n  private async autoImplementSafeImprovements(suggestions: SystemEvolutionSuggestion[]): Promise<void> {\n    const safeImprovements = suggestions.filter(s => \n      s.priority === 'low' && \n      s.type === 'optimization' &&\n      s.estimatedImpact < 100\n    );\n\n    for (const improvement of safeImprovements.slice(0, 3)) { // Limit to 3 per cycle\n      try {\n        await this.implementImprovement(improvement);\n        console.log(`✅ Auto-implemented: ${improvement.title}`);\n      } catch (error) {\n        console.error(`❌ Failed to auto-implement ${improvement.title}:`, error);\n      }\n    }\n  }\n\n  /**\n   * Generate optimized component code\n   */\n  private async generateOptimizedComponent(combo: any): Promise<string> {\n    const prompt = `\nCreate a React TypeScript component that combines these frequently used together components: ${combo.components.join(', ')}.\n\nRequirements:\n- Use shadcn/ui components\n- Follow Nexus design system\n- Include proper TypeScript types\n- Add analytics tracking\n- Optimize for performance\n- Include error handling\n\nThe component should streamline the user workflow and reduce the current ${combo.averageTime} seconds to under 15 seconds.\n`;\n\n    // In a real implementation, this would call an AI code generation service\n    return `\n/**\n * Generated Optimized Component\n * Combines: ${combo.components.join(', ')}\n * Auto-generated by Nexus Intelligence System\n */\nimport React, { useState } from 'react';\nimport { Button } from '../ui/button';\nimport { trackEvent } from '../../lib/analytics';\n\ninterface OptimizedWorkflowProps {\n  onComplete: (result: any) => void;\n  data?: Record<string, any>;\n}\n\nexport const OptimizedWorkflow: React.FC<OptimizedWorkflowProps> = ({ onComplete, data }) => {\n  const [isLoading, setIsLoading] = useState(false);\n\n  const handleOptimizedAction = async () => {\n    setIsLoading(true);\n    try {\n      // Streamlined workflow logic here\n      trackEvent('optimized_workflow_used', { components: ${JSON.stringify(combo.components)} });\n      onComplete({ success: true });\n    } catch (error) {\n      console.error('Optimized workflow error:', error);\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  return (\n    <div className=\"optimized-workflow\">\n      <Button onClick={handleOptimizedAction} disabled={isLoading}>\n        {isLoading ? 'Processing...' : 'Execute Optimized Workflow'}\n      </Button>\n    </div>\n  );\n};\n`;\n  }\n\n  // Helper methods (simplified implementations)\n  private findComponentCombinations(patterns: UsagePattern[]): any[] {\n    // AI logic to find component combinations would go here\n    return [];\n  }\n\n  private async generateAutomationWorkflow(task: UsagePattern): Promise<string> {\n    return `// n8n workflow JSON for automating ${task.action}`;\n  }\n\n  private async generateIntegrationImprovements(metrics: BusinessMetrics): Promise<SystemEvolutionSuggestion[]> {\n    return [];\n  }\n\n  private async generatePerformanceOptimizations(metrics: BusinessMetrics): Promise<SystemEvolutionSuggestion[]> {\n    return [];\n  }\n\n  private async generateUXImprovements(patterns: UsagePattern[], metrics: BusinessMetrics): Promise<SystemEvolutionSuggestion[]> {\n    return [];\n  }\n\n  private async getUserMetrics(): Promise<any> {\n    return { dailyActive: 0, completionRate: 0, satisfactionScore: 0 };\n  }\n\n  private async getPerformanceMetrics(): Promise<any> {\n    return { averageTaskTime: 0, systemScore: 0 };\n  }\n\n  private async getIntegrationHealthMetrics(): Promise<any> {\n    return { healthScore: 0 };\n  }\n\n  private async implementImprovement(improvement: SystemEvolutionSuggestion): Promise<void> {\n    // Implementation logic would go here\n  }\n\n  private async queueComplexImprovements(suggestions: SystemEvolutionSuggestion[]): Promise<void> {\n    const complexSuggestions = suggestions.filter(s => \n      s.priority === 'high' || s.priority === 'critical'\n    );\n\n    for (const suggestion of complexSuggestions) {\n      // Evolution suggestions disabled for 1.0 - coming in v1.1\n      console.log('Evolution suggestion generated:', {\n        id: suggestion.id,\n        priority: suggestion.priority,\n        title: suggestion.title,\n        estimatedImpact: suggestion.estimatedImpact\n      });\n    }\n  }\n}\n\nexport const intelligentSystemEvolution = new IntelligentSystemEvolution(); ","usedDeprecatedRules":[]},{"filePath":"/home/vonj/Github/Nexus/src/lib/automation/n8n/mcpN8nIntegration.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":17,"column":10,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":17,"endColumn":13,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[437,440],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[437,440],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":18,"column":31,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":18,"endColumn":34,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[474,477],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[474,477],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":66,"column":21,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":66,"endColumn":24,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1726,1729],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1726,1729],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'workflow' is defined but never used.","line":75,"column":24,"nodeType":null,"messageId":"unusedVar","endLine":75,"endColumn":32},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":97,"column":21,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":97,"endColumn":24,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2669,2672],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2669,2672],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'workflow' is defined but never used.","line":106,"column":44,"nodeType":null,"messageId":"unusedVar","endLine":106,"endColumn":52},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":127,"column":21,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":127,"endColumn":24,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3655,3658],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3655,3658],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":151,"column":21,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":151,"endColumn":24,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[4398,4401],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[4398,4401],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":175,"column":21,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":175,"endColumn":24,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[5163,5166],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[5163,5166],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":184,"column":66,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":184,"endColumn":69,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[5403,5406],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[5403,5406],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":200,"column":21,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":200,"endColumn":24,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[5864,5867],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[5864,5867],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":209,"column":81,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":209,"endColumn":84,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[6121,6124],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[6121,6124],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":226,"column":21,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":226,"endColumn":24,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[6650,6653],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[6650,6653],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":250,"column":21,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":250,"endColumn":24,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[7395,7398],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[7395,7398],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":14,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\n * mcpN8nIntegration.ts - MCP n8n Integration Helper\n * Provides a clean interface for MCP n8n tool integration\n * Replace placeholder implementations with actual MCP tool calls when available\n */\n\nimport type { N8nWorkflowDefinition } from './n8nWorkflowBuilder';\n\nexport interface McpN8nClient {\n  clientId: string;\n  isInitialized: boolean;\n}\n\nexport interface CreateWorkflowRequest {\n  clientId: string;\n  name: string;\n  nodes: any[];\n  connections: Record<string, any>;\n}\n\nexport interface CreateWorkflowResponse {\n  success: boolean;\n  workflowId?: string;\n  error?: string;\n}\n\nexport interface ActivateWorkflowRequest {\n  clientId: string;\n  id: string;\n}\n\nexport interface ActivateWorkflowResponse {\n  success: boolean;\n  error?: string;\n}\n\n/**\n * MCP n8n Integration Service\n * This service provides a clean interface for n8n operations\n * When MCP tools are available, replace the placeholder implementations\n */\nexport class McpN8nIntegrationService {\n  private clientId = 'nexus-workflow-builder';\n  private isInitialized = false;\n\n  /**\n   * Initialize n8n connection\n   * Replace with: mcp_n8n_Workflow_Integration_Server_init_n8n\n   */\n  async initializeConnection(url: string, apiKey: string): Promise<{ success: boolean; error?: string }> {\n    try {\n      // TODO: Replace with actual MCP tool call\n      // await mcp_n8n_Workflow_Integration_Server_init_n8n({\n      //   url,\n      //   apiKey\n      // });\n\n      // Placeholder implementation\n      if (!url || !apiKey) {\n        return { success: false, error: 'Invalid URL or API key' };\n      }\n\n      this.isInitialized = true;\n      console.log('MCP n8n connection initialized (placeholder)');\n      return { success: true };\n    } catch (error: any) {\n      return { success: false, error: error.message };\n    }\n  }\n\n  /**\n   * Create workflow in n8n\n   * Replace with: mcp_n8n_Workflow_Integration_Server_create_workflow\n   */\n  async createWorkflow(workflow: N8nWorkflowDefinition): Promise<CreateWorkflowResponse> {\n    try {\n      if (!this.isInitialized) {\n        return { success: false, error: 'n8n connection not initialized' };\n      }\n\n      // TODO: Replace with actual MCP tool call\n      // const result = await mcp_n8n_Workflow_Integration_Server_create_workflow({\n      //   clientId: this.clientId,\n      //   name: workflow.name,\n      //   nodes: workflow.nodes,\n      //   connections: workflow.connections\n      // });\n\n      // Placeholder implementation\n      const workflowId = `workflow-${Date.now()}`;\n      console.log('Created workflow (placeholder):', workflowId);\n      \n      return {\n        success: true,\n        workflowId\n      };\n    } catch (error: any) {\n      return { success: false, error: error.message };\n    }\n  }\n\n  /**\n   * Update workflow in n8n\n   * Replace with: mcp_n8n_Workflow_Integration_Server_update_workflow\n   */\n  async updateWorkflow(workflowId: string, workflow: Partial<N8nWorkflowDefinition>): Promise<{ success: boolean; error?: string }> {\n    try {\n      if (!this.isInitialized) {\n        return { success: false, error: 'n8n connection not initialized' };\n      }\n\n      // TODO: Replace with actual MCP tool call\n      // await mcp_n8n_Workflow_Integration_Server_update_workflow({\n      //   clientId: this.clientId,\n      //   id: workflowId,\n      //   workflow: {\n      //     name: workflow.name,\n      //     nodes: workflow.nodes,\n      //     connections: workflow.connections,\n      //     active: workflow.active\n      //   }\n      // });\n\n      // Placeholder implementation\n      console.log('Updated workflow (placeholder):', workflowId);\n      return { success: true };\n    } catch (error: any) {\n      return { success: false, error: error.message };\n    }\n  }\n\n  /**\n   * Activate workflow\n   * Replace with: mcp_n8n_Workflow_Integration_Server_activate_workflow\n   */\n  async activateWorkflow(workflowId: string): Promise<ActivateWorkflowResponse> {\n    try {\n      if (!this.isInitialized) {\n        return { success: false, error: 'n8n connection not initialized' };\n      }\n\n      // TODO: Replace with actual MCP tool call\n      // await mcp_n8n_Workflow_Integration_Server_activate_workflow({\n      //   clientId: this.clientId,\n      //   id: workflowId\n      // });\n\n      // Placeholder implementation\n      console.log('Activated workflow (placeholder):', workflowId);\n      return { success: true };\n    } catch (error: any) {\n      return { success: false, error: error.message };\n    }\n  }\n\n  /**\n   * Deactivate workflow\n   * Replace with: mcp_n8n_Workflow_Integration_Server_deactivate_workflow\n   */\n  async deactivateWorkflow(workflowId: string): Promise<{ success: boolean; error?: string }> {\n    try {\n      if (!this.isInitialized) {\n        return { success: false, error: 'n8n connection not initialized' };\n      }\n\n      // TODO: Replace with actual MCP tool call\n      // await mcp_n8n_Workflow_Integration_Server_deactivate_workflow({\n      //   clientId: this.clientId,\n      //   id: workflowId\n      // });\n\n      // Placeholder implementation\n      console.log('Deactivated workflow (placeholder):', workflowId);\n      return { success: true };\n    } catch (error: any) {\n      return { success: false, error: error.message };\n    }\n  }\n\n  /**\n   * List workflows\n   * Replace with: mcp_n8n_Workflow_Integration_Server_list_workflows\n   */\n  async listWorkflows(): Promise<{ success: boolean; workflows?: any[]; error?: string }> {\n    try {\n      if (!this.isInitialized) {\n        return { success: false, error: 'n8n connection not initialized' };\n      }\n\n      // TODO: Replace with actual MCP tool call\n      // const result = await mcp_n8n_Workflow_Integration_Server_list_workflows({\n      //   clientId: this.clientId\n      // });\n\n      // Placeholder implementation\n      return {\n        success: true,\n        workflows: []\n      };\n    } catch (error: any) {\n      return { success: false, error: error.message };\n    }\n  }\n\n  /**\n   * Get workflow by ID\n   * Replace with: mcp_n8n_Workflow_Integration_Server_get_workflow\n   */\n  async getWorkflow(workflowId: string): Promise<{ success: boolean; workflow?: any; error?: string }> {\n    try {\n      if (!this.isInitialized) {\n        return { success: false, error: 'n8n connection not initialized' };\n      }\n\n      // TODO: Replace with actual MCP tool call\n      // const result = await mcp_n8n_Workflow_Integration_Server_get_workflow({\n      //   clientId: this.clientId,\n      //   id: workflowId\n      // });\n\n      // Placeholder implementation\n      return {\n        success: true,\n        workflow: { id: workflowId, name: 'Placeholder Workflow' }\n      };\n    } catch (error: any) {\n      return { success: false, error: error.message };\n    }\n  }\n\n  /**\n   * Delete workflow\n   * Replace with: mcp_n8n_Workflow_Integration_Server_delete_workflow\n   */\n  async deleteWorkflow(workflowId: string): Promise<{ success: boolean; error?: string }> {\n    try {\n      if (!this.isInitialized) {\n        return { success: false, error: 'n8n connection not initialized' };\n      }\n\n      // TODO: Replace with actual MCP tool call\n      // await mcp_n8n_Workflow_Integration_Server_delete_workflow({\n      //   clientId: this.clientId,\n      //   id: workflowId\n      // });\n\n      // Placeholder implementation\n      console.log('Deleted workflow (placeholder):', workflowId);\n      return { success: true };\n    } catch (error: any) {\n      return { success: false, error: error.message };\n    }\n  }\n\n  /**\n   * Get client information\n   */\n  getClientInfo(): McpN8nClient {\n    return {\n      clientId: this.clientId,\n      isInitialized: this.isInitialized\n    };\n  }\n}\n\n// Export singleton instance\nexport const mcpN8nIntegration = new McpN8nIntegrationService();\n\n/**\n * Helper functions for easy migration to MCP tools\n * When MCP tools are available, these can be easily replaced\n */\n\nexport async function initializeN8nConnection(url: string, apiKey: string) {\n  return mcpN8nIntegration.initializeConnection(url, apiKey);\n}\n\nexport async function createN8nWorkflow(workflow: N8nWorkflowDefinition) {\n  return mcpN8nIntegration.createWorkflow(workflow);\n}\n\nexport async function activateN8nWorkflow(workflowId: string) {\n  return mcpN8nIntegration.activateWorkflow(workflowId);\n}\n\nexport async function deactivateN8nWorkflow(workflowId: string) {\n  return mcpN8nIntegration.deactivateWorkflow(workflowId);\n}\n\nexport async function listN8nWorkflows() {\n  return mcpN8nIntegration.listWorkflows();\n}\n\nexport async function getN8nWorkflow(workflowId: string) {\n  return mcpN8nIntegration.getWorkflow(workflowId);\n}\n\nexport async function deleteN8nWorkflow(workflowId: string) {\n  return mcpN8nIntegration.deleteWorkflow(workflowId);\n} ","usedDeprecatedRules":[]},{"filePath":"/home/vonj/Github/Nexus/src/lib/automation/n8n/n8nOnboardingManager.ts","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'stepId' is defined but never used.","line":195,"column":32,"nodeType":null,"messageId":"unusedVar","endLine":195,"endColumn":38}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\n * n8nOnboardingManager.ts\n * Manages the n8n onboarding flow and user configuration setup\n * Coordinates between onboarding UI and configuration services\n */\nimport { userN8nConfigService } from './userN8nConfig';\nimport type { UserN8nConfig } from './userN8nConfig';\n\nexport interface OnboardingStep {\n  id: string;\n  title: string;\n  description: string;\n  completed: boolean;\n  required: boolean;\n}\n\nexport interface OnboardingState {\n  currentStep: number;\n  totalSteps: number;\n  steps: OnboardingStep[];\n  isComplete: boolean;\n  n8nConfigured: boolean;\n}\n\nclass N8nOnboardingManager {\n  private steps: OnboardingStep[] = [\n    {\n      id: 'welcome',\n      title: 'Welcome to Nexus',\n      description: 'Get started with AI-powered business automation',\n      completed: false,\n      required: true\n    },\n    {\n      id: 'organization-setup',\n      title: 'Your Organization',\n      description: 'Tell us about your company and team size',\n      completed: false,\n      required: true\n    },\n    {\n      id: 'user-context',\n      title: 'Tell Us About You',\n      description: 'Help us personalize your experience',\n      completed: false,\n      required: true\n    },\n    {\n      id: 'business-context',\n      title: 'Business Details',\n      description: 'Configure tools, processes, and priorities',\n      completed: false,\n      required: true\n    },\n    {\n      id: 'business-snapshot',\n      title: 'Business Snapshot',\n      description: 'Baseline metrics for your health score',\n      completed: false,\n      required: true\n    },\n    {\n      id: 'success-criteria',\n      title: 'Define Success',\n      description: 'What would make Nexus successful for you?',\n      completed: false,\n      required: true\n    },\n    {\n      id: 'n8n-connection',\n      title: 'Connect n8n',\n      description: 'Connect your n8n instance for powerful workflow automation',\n      completed: false,\n      required: false\n    },\n    {\n      id: 'department-setup',\n      title: 'Configure Departments',\n      description: 'Set up your business departments and assistants',\n      completed: false,\n      required: true\n    },\n    {\n      id: 'complete',\n      title: 'Ready to Go!',\n      description: 'Your Nexus workspace is configured and ready',\n      completed: false,\n      required: true\n    }\n  ];\n\n  private listeners: Array<(state: OnboardingState) => void> = [];\n\n  /**\n   * Get current onboarding state\n   */\n  async getOnboardingState(): Promise<OnboardingState> {\n    // Check if n8n is configured\n    const hasN8nConfig = await userN8nConfigService.hasConfiguration();\n    \n    // Update n8n step completion\n    const n8nStep = this.steps.find(s => s.id === 'n8n-connection');\n    if (n8nStep) {\n      n8nStep.completed = hasN8nConfig;\n    }\n\n    // Check if onboarding is complete\n    const requiredSteps = this.steps.filter(s => s.required);\n    const completedRequiredSteps = requiredSteps.filter(s => s.completed);\n    const isComplete = completedRequiredSteps.length === requiredSteps.length;\n\n    return {\n      currentStep: this.getCurrentStepIndex(),\n      totalSteps: this.steps.length,\n      steps: [...this.steps],\n      isComplete,\n      n8nConfigured: hasN8nConfig\n    };\n  }\n\n  /**\n   * Complete a specific step\n   */\n  async completeStep(stepId: string): Promise<void> {\n    const step = this.steps.find(s => s.id === stepId);\n    if (step) {\n      step.completed = true;\n      await this.saveOnboardingState();\n      this.notifyListeners();\n    }\n  }\n\n  /**\n   * Start n8n configuration flow\n   */\n  async startN8nConfiguration(): Promise<void> {\n    // Mark n8n step as current\n    await this.setCurrentStep('n8n-connection');\n  }\n\n  /**\n   * Complete n8n configuration\n   */\n  async completeN8nConfiguration(config: UserN8nConfig): Promise<boolean> {\n    try {\n      // Save the configuration\n      const saved = await userN8nConfigService.saveUserConfig({\n        baseUrl: config.baseUrl,\n        apiKey: config.apiKey,\n        instanceName: config.instanceName || 'My n8n Instance',\n        isActive: true\n      });\n\n      if (saved) {\n        await this.completeStep('n8n-connection');\n        return true;\n      }\n      return false;\n    } catch (error) {\n      console.error('Failed to complete n8n configuration:', error);\n      return false;\n    }\n  }\n\n  /**\n   * Skip n8n configuration\n   */\n  async skipN8nConfiguration(): Promise<void> {\n    // Since n8n is optional, we can proceed to next step\n    await this.setCurrentStep('department-setup');\n  }\n\n  /**\n   * Check if user needs onboarding\n   */\n  async needsOnboarding(): Promise<boolean> {\n    const state = await this.getOnboardingState();\n    return !state.isComplete;\n  }\n\n  /**\n   * Reset onboarding (for testing or re-setup)\n   */\n  async resetOnboarding(): Promise<void> {\n    this.steps.forEach(step => {\n      step.completed = false;\n    });\n    await this.saveOnboardingState();\n    this.notifyListeners();\n  }\n\n  /**\n   * Set current step\n   */\n  private async setCurrentStep(stepId: string): Promise<void> {\n    // Implementation would mark the current step\n    this.notifyListeners();\n  }\n\n  /**\n   * Get current step index\n   */\n  private getCurrentStepIndex(): number {\n    const currentStep = this.steps.find(s => !s.completed);\n    return currentStep ? this.steps.indexOf(currentStep) : this.steps.length - 1;\n  }\n\n  /**\n   * Save onboarding state to localStorage\n   */\n  private async saveOnboardingState(): Promise<void> {\n    try {\n      const state = {\n        steps: this.steps,\n        lastUpdated: new Date().toISOString()\n      };\n      localStorage.setItem('nexus_onboarding_state', JSON.stringify(state));\n    } catch (error) {\n      console.error('Failed to save onboarding state:', error);\n    }\n  }\n\n  /**\n   * Load onboarding state from localStorage\n   */\n  private async loadOnboardingState(): Promise<void> {\n    try {\n      const stored = localStorage.getItem('nexus_onboarding_state');\n      if (stored) {\n        const state = JSON.parse(stored);\n        if (state.steps) {\n          // Merge with current steps (in case we've added new steps)\n          state.steps.forEach((storedStep: OnboardingStep) => {\n            const currentStep = this.steps.find(s => s.id === storedStep.id);\n            if (currentStep) {\n              currentStep.completed = storedStep.completed;\n            }\n          });\n        }\n      }\n    } catch (error) {\n      console.error('Failed to load onboarding state:', error);\n    }\n  }\n\n  /**\n   * Subscribe to onboarding state changes\n   */\n  subscribe(listener: (state: OnboardingState) => void): () => void {\n    this.listeners.push(listener);\n    return () => {\n      const index = this.listeners.indexOf(listener);\n      if (index > -1) {\n        this.listeners.splice(index, 1);\n      }\n    };\n  }\n\n  /**\n   * Notify all listeners of state changes\n   */\n  private async notifyListeners(): Promise<void> {\n    const state = await this.getOnboardingState();\n    this.listeners.forEach(listener => listener(state));\n  }\n\n  /**\n   * Initialize the onboarding manager\n   */\n  async initialize(): Promise<void> {\n    await this.loadOnboardingState();\n    this.notifyListeners();\n  }\n}\n\n// Export singleton instance\nexport const n8nOnboardingManager = new N8nOnboardingManager();\n\nexport default n8nOnboardingManager; ","usedDeprecatedRules":[]},{"filePath":"/home/vonj/Github/Nexus/src/lib/automation/n8n/n8nService.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":19,"column":24,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":19,"endColumn":27,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[533,536],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[533,536],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":26,"column":10,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":26,"endColumn":13,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[648,651],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[648,651],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":35,"column":10,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":35,"endColumn":13,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[835,838],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[835,838],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":111,"column":65,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":111,"endColumn":68,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2858,2861],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2858,2861],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":136,"column":21,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":136,"endColumn":24,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3491,3494],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3491,3494],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":151,"column":30,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":151,"endColumn":33,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3873,3876],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3873,3876],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":206,"column":21,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":206,"endColumn":24,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[5780,5783],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[5780,5783],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":221,"column":30,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":221,"endColumn":33,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[6153,6156],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[6153,6156],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":236,"column":84,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":236,"endColumn":87,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[6589,6592],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[6589,6592],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":250,"column":86,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":250,"endColumn":89,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[7079,7082],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[7079,7082],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":263,"column":90,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":263,"endColumn":93,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[7535,7538],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[7535,7538],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":276,"column":63,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":276,"endColumn":66,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[7961,7964],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[7961,7964],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":319,"column":35,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":319,"endColumn":38,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[9298,9301],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[9298,9301],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":375,"column":28,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":375,"endColumn":31,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[10783,10786],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[10783,10786],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":387,"column":28,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":387,"endColumn":31,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[11189,11192],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[11189,11192],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":15,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\n * n8nService.ts\n * Service for interacting with n8n workflows and automations\n * Handles chat triggers, workflow execution, and department-specific assistants\n */\nimport axios from 'axios';\n// import { userN8nConfigService } from './userN8nConfig';\n// import type { UserN8nConfig } from './userN8nConfig';\n\nexport interface N8nChatMessage {\n  role: 'user' | 'assistant' | 'system';\n  content: string;\n  timestamp?: string;\n  userId?: string;\n}\n\nexport interface N8nWorkflowTrigger {\n  workflowId: string;\n  data: Record<string, any>;\n  department?: Department;\n  userId?: string;\n}\n\nexport interface N8nResponse {\n  success: boolean;\n  data?: any;\n  error?: string;\n  executionId?: string;\n}\n\nexport interface WorkflowExecution {\n  id: string;\n  workflowId: string;\n  status: 'success' | 'error' | 'waiting' | 'running';\n  data?: any;\n  startedAt: string;\n  finishedAt?: string;\n}\n\nexport type Department = 'sales' | 'finance' | 'operations' | 'marketing' | 'general';\n\n// Your existing n8n workflows mapping\nconst WORKFLOW_WEBHOOKS = {\n  // Existing workflows from your n8n instance\n  beyondItBlogging: '719eaaee-c476-43cd-95c2-c169c0c68c6b',\n  nexusBuilder: '53c96d78-ed61-4f86-a343-4836c0c656ff',\n  \n  // Department-specific webhooks (to be created)\n  sales: {\n    assistant: '', // To be configured\n    hubspot: '', // Connect to your HubSpot workflow when created\n    pipeline: ''\n  },\n  finance: {\n    assistant: '',\n    invoicing: '',\n    reporting: ''\n  },\n  operations: {\n    assistant: '',\n    automation: '',\n    monitoring: ''\n  },\n  marketing: {\n    assistant: '',\n    campaigns: '',\n    content: '719eaaee-c476-43cd-95c2-c169c0c68c6b' // Using Beyond IT Blogging\n  },\n  general: {\n    assistant: '', // General purpose assistant\n    workflow: ''\n  }\n} as const;\n\n/**\n * Main n8n service class for workflow interactions\n * Now uses user-specific n8n configurations instead of environment variables\n */\nexport class N8nService {\n  private userConfigCache: Map<string, { baseUrl: string; apiKey: string }> = new Map();\n\n  constructor() {\n    // No longer using hardcoded configuration\n    // Each user configures their own n8n instance\n  }\n\n  /**\n   * Get user-specific n8n configuration\n   */\n  private async getUserConfig(): Promise<{ baseUrl: string; apiKey: string } | null> {\n    try {\n      const userConfig = await userN8nConfigService.getCurrentUserConfig();\n      if (!userConfig || !userConfig.isActive) {\n        console.warn('No active n8n configuration found for user');\n        return null;\n      }\n\n      return {\n        baseUrl: userConfig.baseUrl,\n        apiKey: userConfig.apiKey\n      };\n    } catch (error) {\n      console.error('Failed to get user n8n configuration:', error);\n      return null;\n    }\n  }\n\n  /**\n   * Trigger a workflow via webhook\n   */\n  async triggerWorkflow(webhookId: string, data: Record<string, any>): Promise<N8nResponse> {\n    try {\n      const config = await this.getUserConfig();\n      if (!config) {\n        return {\n          success: false,\n          error: 'No n8n configuration found. Please connect your n8n instance first.'\n        };\n      }\n\n      const response = await axios.post(\n        `${config.baseUrl}/webhook/${webhookId}`,\n        data,\n        {\n          headers: {\n            'Content-Type': 'application/json',\n          },\n        }\n      );\n\n      return {\n        success: true,\n        data: response.data,\n        executionId: response.headers['x-n8n-execution-id']\n      };\n    } catch (error: any) {\n      console.error('n8n workflow trigger failed:', error);\n      return {\n        success: false,\n        error: error.response?.data?.message || error.message || 'Workflow trigger failed'\n      };\n    }\n  }\n\n  /**\n   * Chat with department-specific AI assistant\n   */\n  async chatWithAssistant(\n    department: Department,\n    message: string,\n    context?: Record<string, any>\n  ): Promise<N8nResponse> {\n    const webhookId = this.getDepartmentWebhook(department, 'assistant');\n    \n    if (!webhookId) {\n      return {\n        success: false,\n        error: `No assistant configured for ${department} department`\n      };\n    }\n\n    const chatData = {\n      chatInput: message,\n      department,\n      context: context || {},\n      userId: context?.userId || 'anonymous',\n      timestamp: new Date().toISOString()\n    };\n\n    return this.triggerWorkflow(webhookId, chatData);\n  }\n\n  /**\n   * Generate workflows using the new comprehensive workflow builder\n   */\n  async generateWorkflow(requirements: string, department?: Department): Promise<N8nResponse> {\n    try {\n      // Import the workflow builder dynamically to avoid circular imports\n      const { n8nWorkflowBuilder } = await import('./n8nWorkflowBuilder');\n      \n      // Use the new workflow builder to create a complete workflow\n      const result = await n8nWorkflowBuilder.generateFromDescription(requirements, department);\n      \n      if (result.success) {\n        return {\n          success: true,\n          data: {\n            workflowId: result.workflowId,\n            webhookUrl: result.webhookUrl,\n            definition: result.workflowDefinition,\n            message: 'Complete workflow created successfully with proper node connections'\n          }\n        };\n      } else {\n        // Fallback to the old method if the new builder fails\n        console.warn('New workflow builder failed, falling back to Nexus Builder webhook:', result.error);\n        const nexusBuilderWebhook = WORKFLOW_WEBHOOKS.nexusBuilder;\n        \n        return this.triggerWorkflow(nexusBuilderWebhook, {\n          chatInput: `Create a workflow for: ${requirements}`,\n          department: department || 'general',\n          requirements,\n          timestamp: new Date().toISOString()\n        });\n      }\n    } catch (error: any) {\n      console.error('Workflow generation failed:', error);\n      return {\n        success: false,\n        error: `Workflow generation failed: ${error.message}`\n      };\n    }\n  }\n\n  /**\n   * Content creation using Beyond IT Blogging workflow\n   */\n  async createContent(\n    contentType: 'blog' | 'social' | 'email',\n    prompt: string,\n    options?: Record<string, any>\n  ): Promise<N8nResponse> {\n    const blogWebhook = WORKFLOW_WEBHOOKS.beyondItBlogging;\n    \n    return this.triggerWorkflow(blogWebhook, {\n      chatInput: `Create ${contentType}: ${prompt}`,\n      contentType,\n      options: options || {},\n      timestamp: new Date().toISOString()\n    });\n  }\n\n  /**\n   * Sales department specific actions\n   */\n  async salesAction(action: 'pipeline' | 'lead' | 'forecast', data: Record<string, any>): Promise<N8nResponse> {\n    const webhookId = this.getDepartmentWebhook('sales', action);\n    \n    if (!webhookId) {\n      // Fallback to general sales assistant\n      return this.chatWithAssistant('sales', `Please help with ${action}: ${JSON.stringify(data)}`, data);\n    }\n\n    return this.triggerWorkflow(webhookId, { action, ...data });\n  }\n\n  /**\n   * Finance department specific actions\n   */\n  async financeAction(action: 'invoice' | 'report' | 'payment', data: Record<string, any>): Promise<N8nResponse> {\n    const webhookId = this.getDepartmentWebhook('finance', action);\n    \n    if (!webhookId) {\n      return this.chatWithAssistant('finance', `Please help with ${action}: ${JSON.stringify(data)}`, data);\n    }\n\n    return this.triggerWorkflow(webhookId, { action, ...data });\n  }\n\n  /**\n   * Operations department specific actions\n   */\n  async operationsAction(action: 'automate' | 'monitor' | 'deploy', data: Record<string, any>): Promise<N8nResponse> {\n    const webhookId = this.getDepartmentWebhook('operations', action);\n    \n    if (!webhookId) {\n      return this.chatWithAssistant('operations', `Please help with ${action}: ${JSON.stringify(data)}`, data);\n    }\n\n    return this.triggerWorkflow(webhookId, { action, ...data });\n  }\n\n  /**\n   * Pulse Marketplace integration\n   */\n  async installPulseApp(appId: string, config: Record<string, any>): Promise<N8nResponse> {\n    // This could trigger the Nexus Builder to create a custom workflow for the app\n    return this.generateWorkflow(\n      `Install and configure Pulse app: ${appId} with configuration: ${JSON.stringify(config)}`,\n      'operations'\n    );\n  }\n\n  /**\n   * Get workflow execution status (requires API key)\n   */\n  async getExecutionStatus(executionId: string): Promise<WorkflowExecution | null> {\n    try {\n      const config = await this.getUserConfig();\n      if (!config) {\n        console.warn('No n8n configuration found for execution status check');\n        return null;\n      }\n\n      const response = await axios.get(\n        `${config.baseUrl}/api/v1/executions/${executionId}`,\n        {\n          headers: {\n            'Authorization': `Bearer ${config.apiKey}`,\n            'Content-Type': 'application/json',\n          },\n        }\n      );\n\n      return response.data as WorkflowExecution;\n    } catch (error) {\n      console.error('Failed to fetch execution status:', error);\n      return null;\n    }\n  }\n\n  /**\n   * Helper method to get department webhook\n   */\n  private getDepartmentWebhook(department: Department, action: string): string {\n    const departmentConfig = WORKFLOW_WEBHOOKS[department];\n    \n    if (typeof departmentConfig === 'object') {\n      return (departmentConfig as any)[action] || '';\n    }\n    \n    return '';\n  }\n\n  /**\n   * Configure new webhook for department\n   */\n  async configureDepartmentWebhook(\n    department: Department,\n    action: string,\n    webhookId: string\n  ): Promise<void> {\n    // This would typically update your configuration\n    // For now, we'll just log it - in production, you might store this in your database\n    console.log(`Configured ${department}.${action} webhook: ${webhookId}`);\n    \n    // You could store this in localStorage, Supabase, or your backend\n    const configKey = `n8n_webhook_${department}_${action}`;\n    try {\n      localStorage.setItem(configKey, JSON.stringify(webhookId));\n    } catch (error) {\n      console.warn(`Failed to save webhook config for ${configKey}:`, error);\n    }\n  }\n\n  /**\n   * Health check for n8n connection\n   */\n  async healthCheck(): Promise<boolean> {\n    try {\n      const config = await this.getUserConfig();\n      if (!config) {\n        return false;\n      }\n\n      // Try to ping the n8n instance\n      const response = await axios.get(`${config.baseUrl}/healthz`, {\n        timeout: 5000\n      });\n      return response.status === 200;\n    } catch (error) {\n      console.error('n8n health check failed:', error);\n      return false;\n    }\n  }\n}\n\n// Export singleton instance\nexport const n8nService = new N8nService();\n\n// Export convenience methods\nexport async function chatWithDepartment(\n  department: Department,\n  message: string,\n  context?: Record<string, any>\n): Promise<N8nResponse> {\n  return n8nService.chatWithAssistant(department, message, context);\n}\n\nexport async function generateWorkflow(requirements: string, department?: Department): Promise<N8nResponse> {\n  return n8nService.generateWorkflow(requirements, department);\n}\n\nexport async function createContent(\n  contentType: 'blog' | 'social' | 'email',\n  prompt: string,\n  options?: Record<string, any>\n): Promise<N8nResponse> {\n  return n8nService.createContent(contentType, prompt, options);\n} ","usedDeprecatedRules":[]},{"filePath":"/home/vonj/Github/Nexus/src/lib/automation/n8n/n8nWorkflowBuilder.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":15,"column":30,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":15,"endColumn":33,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[402,405],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[402,405],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":54,"column":30,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":54,"endColumn":33,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1296,1299],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1296,1299],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":85,"column":21,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":85,"endColumn":24,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2242,2245],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2242,2245],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":131,"column":21,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":131,"endColumn":24,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3607,3610],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3607,3610],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":388,"column":21,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":388,"endColumn":24,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[10854,10857],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[10854,10857],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":402,"column":21,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":402,"endColumn":24,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[11312,11315],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[11312,11315],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\n * n8nWorkflowBuilder.ts - Comprehensive n8n workflow builder\n * Creates complete workflows with proper nodes and connections using MCP n8n tools\n */\n\n// import { userN8nConfigService } from './userN8nConfig';\n\n// Enhanced workflow interfaces\nexport interface N8nNode {\n  id: string;\n  name: string;\n  type: string;\n  typeVersion: number;\n  position: [number, number];\n  parameters: Record<string, any>;\n  credentials?: Record<string, string>;\n  webhookId?: string;\n}\n\nexport interface N8nConnection {\n  [sourceNodeName: string]: {\n    [sourceOutputName: string]: Array<{\n      node: string;\n      type: string;\n      index: number;\n    }>;\n  };\n}\n\nexport interface N8nWorkflowDefinition {\n  name: string;\n  nodes: N8nNode[];\n  connections: N8nConnection;\n  active: boolean;\n  settings: {\n    executionOrder: 'v1';\n    saveManualExecutions: boolean;\n    callerPolicy: 'workflowsFromSameOwner';\n  };\n}\n\nexport interface WorkflowGenerationRequest {\n  name: string;\n  description: string;\n  triggerType: 'webhook' | 'schedule' | 'manual' | 'email';\n  integrations: string[];\n  actions: WorkflowAction[];\n  department?: string;\n}\n\nexport interface WorkflowAction {\n  type: 'http_request' | 'database' | 'email' | 'slack' | 'transform' | 'ai_process';\n  name: string;\n  parameters: Record<string, any>;\n}\n\nexport interface WorkflowGenerationResult {\n  success: boolean;\n  workflowId?: string;\n  workflowDefinition?: N8nWorkflowDefinition;\n  webhookUrl?: string;\n  error?: string;\n}\n\nclass N8nWorkflowBuilder {\n  private clientId: string = 'nexus-workflow-builder';\n\n  /**\n   * Initialize connection to user's n8n instance\n   */\n  async initializeConnection(): Promise<{ success: boolean; error?: string }> {\n    try {\n      // TODO: Re-enable when userN8nConfig is available\n      // const config = await userN8nConfigService.getCurrentUserConfig();\n      // if (!config) {\n      //   return { success: false, error: 'No active n8n configuration found' };\n      // }\n\n      // // Initialize MCP n8n connection (placeholder)\n      // if (!config.baseUrl || !config.apiKey) {\n      //   return { success: false, error: 'Invalid n8n configuration - missing URL or API key' };\n      // }\n      \n      return { success: true };\n    } catch (error: any) {\n      return { success: false, error: error.message };\n    }\n  }\n\n  /**\n   * Generate a complete n8n workflow from requirements\n   */\n  async generateWorkflow(request: WorkflowGenerationRequest): Promise<WorkflowGenerationResult> {\n    try {\n      // Initialize connection\n      const initResult = await this.initializeConnection();\n      if (!initResult.success) {\n        return { success: false, error: initResult.error };\n      }\n\n      // Generate workflow definition\n      const workflowDefinition = await this.createWorkflowDefinition(request);\n      \n      // Validate workflow structure\n      const validation = this.validateWorkflow(workflowDefinition);\n      if (!validation) {\n        return { \n          success: false, \n          error: 'Workflow validation failed'\n        };\n      }\n\n      // Create workflow in n8n\n      const createResult = await this.createWorkflowInN8n(workflowDefinition);\n      if (!createResult.success) {\n        return { success: false, error: createResult.error };\n      }\n\n      // Activate workflow if needed\n      if (request.triggerType !== 'manual') {\n        await this.activateWorkflow(createResult.workflowId!);\n      }\n\n      return {\n        success: true,\n        workflowId: createResult.workflowId,\n        workflowDefinition,\n        webhookUrl: createResult.webhookUrl,\n      };\n\n    } catch (error: any) {\n      console.error('Workflow generation failed:', error);\n      return { success: false, error: error.message };\n    }\n  }\n\n  /**\n   * Create workflow definition with proper nodes and connections\n   */\n  private async createWorkflowDefinition(request: WorkflowGenerationRequest): Promise<N8nWorkflowDefinition> {\n    const nodes: N8nNode[] = [];\n    const connections: N8nConnection = {};\n    let nodeCounter = 0;\n    let yPosition = 300;\n\n    // Create trigger node\n    const triggerNode = this.createTriggerNode(request.triggerType, nodeCounter++, yPosition);\n    nodes.push(triggerNode);\n    yPosition += 200;\n\n    let previousNodeName = triggerNode.name;\n\n    // Add action nodes\n    for (const action of request.actions) {\n      const actionNode = this.createActionNode(action, nodeCounter++, yPosition);\n      nodes.push(actionNode);\n      this.addConnection(connections, previousNodeName, actionNode.name);\n      previousNodeName = actionNode.name;\n      yPosition += 200;\n    }\n\n    // Add integration nodes\n    for (const integration of request.integrations) {\n      const integrationNode = this.createIntegrationNode(integration, nodeCounter++, yPosition);\n      nodes.push(integrationNode);\n      this.addConnection(connections, previousNodeName, integrationNode.name);\n      yPosition += 200;\n    }\n\n    // Add response node\n    const responseNode = this.createResponseNode(nodeCounter++, yPosition);\n    nodes.push(responseNode);\n    this.addConnection(connections, previousNodeName, responseNode.name);\n\n    return {\n      name: request.name,\n      nodes,\n      connections,\n      active: false,\n      settings: {\n        executionOrder: 'v1',\n        saveManualExecutions: true,\n        callerPolicy: 'workflowsFromSameOwner',\n      },\n    };\n  }\n\n  /**\n   * Create trigger node based on type\n   */\n  private createTriggerNode(triggerType: string, nodeId: number, yPosition: number): N8nNode {\n    const baseNode = {\n      id: `node-${nodeId}`,\n      name: 'Trigger',\n      typeVersion: 1,\n      position: [240, yPosition] as [number, number],\n      parameters: {},\n    };\n\n    switch (triggerType) {\n      case 'webhook':\n        const webhookId = `nexus-webhook-${Date.now()}`;\n        return {\n          ...baseNode,\n          type: 'n8n-nodes-base.webhook',\n          parameters: {\n            httpMethod: 'POST',\n            path: webhookId,\n            responseMode: 'responseNode',\n            options: {},\n          },\n          webhookId,\n        };\n      case 'schedule':\n        return {\n          ...baseNode,\n          type: 'n8n-nodes-base.cron',\n          parameters: {\n            triggerTimes: {\n              item: [{ mode: 'everyMinute' }],\n            },\n          },\n        };\n      default:\n        return {\n          ...baseNode,\n          type: 'n8n-nodes-base.manualTrigger',\n        };\n    }\n  }\n\n  /**\n   * Create action node\n   */\n  private createActionNode(action: WorkflowAction, nodeId: number, yPosition: number): N8nNode {\n    const baseNode = {\n      id: `node-${nodeId}`,\n      name: action.name,\n      typeVersion: 1,\n      position: [240, yPosition] as [number, number],\n    };\n\n    switch (action.type) {\n      case 'http_request':\n        return {\n          ...baseNode,\n          type: 'n8n-nodes-base.httpRequest',\n          parameters: {\n            method: 'POST',\n            url: action.parameters.url || '',\n            options: {\n              response: {\n                response: { responseFormat: 'json' },\n              },\n            },\n            ...action.parameters,\n          },\n        };\n      case 'database':\n        return {\n          ...baseNode,\n          type: 'n8n-nodes-base.postgres',\n          parameters: {\n            operation: 'insert',\n            schema: 'public',\n            table: action.parameters.table || 'workflow_data',\n            ...action.parameters,\n          },\n        };\n      case 'email':\n        return {\n          ...baseNode,\n          type: 'n8n-nodes-base.emailSend',\n          parameters: {\n            fromEmail: action.parameters.fromEmail || '',\n            toEmail: action.parameters.toEmail || '',\n            subject: action.parameters.subject || '',\n            message: action.parameters.message || '',\n            ...action.parameters,\n          },\n        };\n      default:\n        return {\n          ...baseNode,\n          type: 'n8n-nodes-base.function',\n          parameters: {\n            functionCode: `\n// Process data for ${action.name}\nconsole.log('Processing:', items[0].json);\nreturn items;\n            `,\n          },\n        };\n    }\n  }\n\n  /**\n   * Create integration node\n   */\n  private createIntegrationNode(integration: string, nodeId: number, yPosition: number): N8nNode {\n    return {\n      id: `node-${nodeId}`,\n      name: `${integration} Integration`,\n      type: 'n8n-nodes-base.httpRequest',\n      typeVersion: 1,\n      position: [240, yPosition],\n      parameters: {\n        method: 'POST',\n        url: `https://api.${integration}.com/webhook`,\n        options: {\n          response: {\n            response: { responseFormat: 'json' },\n          },\n        },\n      },\n    };\n  }\n\n  /**\n   * Create response node\n   */\n  private createResponseNode(nodeId: number, yPosition: number): N8nNode {\n    return {\n      id: `node-${nodeId}`,\n      name: 'Respond',\n      type: 'n8n-nodes-base.respondToWebhook',\n      typeVersion: 1,\n      position: [240, yPosition],\n      parameters: {\n        respondWith: 'json',\n        responseBody: JSON.stringify({\n          success: true,\n          message: 'Workflow completed successfully',\n          timestamp: '={{new Date().toISOString()}}',\n        }),\n      },\n    };\n  }\n\n  /**\n   * Add connection between nodes\n   */\n  private addConnection(connections: N8nConnection, sourceNode: string, targetNode: string): void {\n    if (!connections[sourceNode]) {\n      connections[sourceNode] = {};\n    }\n    if (!connections[sourceNode].main) {\n      connections[sourceNode].main = [];\n    }\n    connections[sourceNode].main.push({\n      node: targetNode,\n      type: 'main',\n      index: 0,\n    });\n  }\n\n  /**\n   * Validate workflow structure\n   */\n  private validateWorkflow(workflow: N8nWorkflowDefinition): boolean {\n    return workflow.nodes.length > 0 && \n           workflow.nodes.some(node => node.type.includes('trigger') || node.type.includes('webhook'));\n  }\n\n  /**\n   * Create workflow in n8n using MCP tools\n   */\n  private async createWorkflowInN8n(workflow: N8nWorkflowDefinition): Promise<{ success: boolean; workflowId?: string; webhookUrl?: string; error?: string }> {\n    try {\n      // Get user configuration for webhook URL generation\n      // const config = await userN8nConfigService.getCurrentUserConfig();\n      // if (!config) {\n      //   return { success: false, error: 'No n8n configuration found' };\n      // }\n\n      // TODO: Implement actual n8n workflow creation via MCP tools\n      // For now, return mock success\n      const workflowId = `workflow_${Date.now()}`;\n      const webhookUrl = `https://mock-n8n-instance.com/webhook/${workflowId}`;\n\n      console.log('Created workflow:', { workflowId, workflow });\n\n      return {\n        success: true,\n        workflowId,\n        webhookUrl,\n      };\n    } catch (error: any) {\n      console.error('Failed to create workflow in n8n:', error);\n      return { success: false, error: error.message };\n    }\n  }\n\n  /**\n   * Activate workflow\n   */\n  private async activateWorkflow(workflowId: string): Promise<{ success: boolean; error?: string }> {\n    try {\n      // Use MCP integration to activate workflow (placeholder)\n      console.log(`Activating workflow: ${workflowId}`);\n      return { success: true };\n    } catch (error: any) {\n      return { success: false, error: error.message };\n    }\n  }\n\n  /**\n   * Generate workflow from natural language description\n   */\n  async generateFromDescription(description: string, department?: string): Promise<WorkflowGenerationResult> {\n    const request = this.parseDescription(description, department);\n    return this.generateWorkflow(request);\n  }\n\n  /**\n   * Parse natural language description into workflow request\n   */\n  private parseDescription(description: string, department?: string): WorkflowGenerationRequest {\n    const lowerDesc = description.toLowerCase();\n    \n    let triggerType: 'webhook' | 'schedule' | 'manual' | 'email' = 'webhook';\n    if (lowerDesc.includes('schedule') || lowerDesc.includes('daily')) {\n      triggerType = 'schedule';\n    }\n\n    const integrations: string[] = [];\n    const commonIntegrations = ['hubspot', 'salesforce', 'stripe', 'slack'];\n    for (const integration of commonIntegrations) {\n      if (lowerDesc.includes(integration)) {\n        integrations.push(integration);\n      }\n    }\n\n    const actions: WorkflowAction[] = [];\n    if (lowerDesc.includes('email')) {\n      actions.push({\n        type: 'email',\n        name: 'Send Email',\n        parameters: { subject: 'Automated notification' },\n      });\n    }\n    if (lowerDesc.includes('database') || lowerDesc.includes('save')) {\n      actions.push({\n        type: 'database',\n        name: 'Save Data',\n        parameters: { table: 'workflow_data' },\n      });\n    }\n\n    if (actions.length === 0) {\n      actions.push({\n        type: 'transform',\n        name: 'Process Data',\n        parameters: {},\n      });\n    }\n\n    return {\n      name: `Generated: ${description.substring(0, 50)}`,\n      description,\n      triggerType,\n      integrations,\n      actions,\n      department,\n    };\n  }\n}\n\n// Export singleton instance\nexport const n8nWorkflowBuilder = new N8nWorkflowBuilder(); ","usedDeprecatedRules":[]},{"filePath":"/home/vonj/Github/Nexus/src/lib/automation/n8n/useN8n.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":28,"column":52,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":28,"endColumn":55,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[695,698],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[695,698],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":29,"column":61,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":29,"endColumn":64,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[786,789],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[786,789],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":31,"column":95,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":31,"endColumn":98,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[979,982],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[979,982],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":32,"column":80,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":32,"endColumn":83,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1089,1092],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1089,1092],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":33,"column":82,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":33,"endColumn":85,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1201,1204],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1201,1204],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":34,"column":86,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":34,"endColumn":89,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1317,1320],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1317,1320],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has a missing dependency: 'checkHealth'. Either include it or remove the dependency array.","line":57,"column":6,"nodeType":"ArrayExpression","endLine":57,"endColumn":23,"suggestions":[{"desc":"Update the dependencies array to be: [autoHealthCheck, checkHealth]","fix":{"range":[1970,1987],"text":"[autoHealthCheck, checkHealth]"}}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'err' is defined but never used.","line":75,"column":14,"nodeType":null,"messageId":"unusedVar","endLine":75,"endColumn":17},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":82,"column":77,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":82,"endColumn":80,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2672,2675],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2672,2675],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":97,"column":86,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":97,"endColumn":89,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3211,3214],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3211,3214],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":130,"column":30,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":130,"endColumn":33,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[4329,4332],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[4329,4332],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":148,"column":26,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":148,"endColumn":29,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[4887,4890],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[4887,4890],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":166,"column":26,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":166,"endColumn":29,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[5443,5446],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[5443,5446],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":184,"column":26,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":184,"endColumn":29,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[6007,6010],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[6007,6010],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":245,"column":79,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":245,"endColumn":82,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[7338,7341],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[7338,7341],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":265,"column":63,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":265,"endColumn":66,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[7786,7789],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[7786,7789],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":267,"column":65,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":267,"endColumn":68,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[7910,7913],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[7910,7913],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":269,"column":60,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":269,"endColumn":63,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[8031,8034],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[8031,8034],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":18,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\n * useN8n.ts\n * React hook for integrating n8n workflows into Nexus components\n * Provides easy access to department assistants and workflow triggers\n */\nimport { useState, useCallback, useEffect } from 'react';\nimport { \n  n8nService, \n  chatWithDepartment, \n  generateWorkflow, \n  createContent \n} from './n8nService';\nimport type { N8nResponse, Department } from './n8nService';\n\nexport interface UseN8nOptions {\n  department?: Department;\n  autoHealthCheck?: boolean;\n}\n\nexport interface UseN8nReturn {\n  // State\n  isLoading: boolean;\n  isConnected: boolean;\n  lastResponse: N8nResponse | null;\n  error: string | null;\n  \n  // Actions\n  chat: (message: string, context?: Record<string, any>) => Promise<N8nResponse>;\n  triggerWorkflow: (webhookId: string, data: Record<string, any>) => Promise<N8nResponse>;\n  generateWorkflow: (requirements: string) => Promise<N8nResponse>;\n  createContent: (type: 'blog' | 'social' | 'email', prompt: string, options?: Record<string, any>) => Promise<N8nResponse>;\n  salesAction: (action: 'pipeline' | 'lead' | 'forecast', data: Record<string, any>) => Promise<N8nResponse>;\n  financeAction: (action: 'invoice' | 'report' | 'payment', data: Record<string, any>) => Promise<N8nResponse>;\n  operationsAction: (action: 'automate' | 'monitor' | 'deploy', data: Record<string, any>) => Promise<N8nResponse>;\n  \n  // Utilities\n  clearError: () => void;\n  checkHealth: () => Promise<boolean>;\n}\n\n/**\n * Main hook for n8n integration\n */\nexport function useN8n(options: UseN8nOptions = {}): UseN8nReturn {\n  const { department = 'general', autoHealthCheck = true } = options;\n  \n  const [isLoading, setIsLoading] = useState(false);\n  const [isConnected, setIsConnected] = useState(false);\n  const [lastResponse, setLastResponse] = useState<N8nResponse | null>(null);\n  const [error, setError] = useState<string | null>(null);\n\n  // Health check on mount\n  useEffect(() => {\n    if (autoHealthCheck) {\n      checkHealth();\n    }\n  }, [autoHealthCheck]);\n\n  const handleResponse = useCallback((response: N8nResponse) => {\n    setLastResponse(response);\n    if (!response.success) {\n      setError(response.error || 'Unknown error occurred');\n    } else {\n      setError(null);\n    }\n    setIsLoading(false);\n    return response;\n  }, []);\n\n  const checkHealth = useCallback(async (): Promise<boolean> => {\n    try {\n      const healthy = await n8nService.healthCheck();\n      setIsConnected(healthy);\n      return healthy;\n    } catch (err) {\n      setIsConnected(false);\n      setError('Failed to connect to n8n service');\n      return false;\n    }\n  }, []);\n\n  const chat = useCallback(async (message: string, context?: Record<string, any>): Promise<N8nResponse> => {\n    setIsLoading(true);\n    setError(null);\n    try {\n      const response = await chatWithDepartment(department, message, context);\n      return handleResponse(response);\n    } catch (err) {\n      const errorResponse: N8nResponse = {\n        success: false,\n        error: err instanceof Error ? err.message : 'Chat failed'\n      };\n      return handleResponse(errorResponse);\n    }\n  }, [department, handleResponse]);\n\n  const triggerWorkflow = useCallback(async (webhookId: string, data: Record<string, any>): Promise<N8nResponse> => {\n    setIsLoading(true);\n    setError(null);\n    try {\n      const response = await n8nService.triggerWorkflow(webhookId, data);\n      return handleResponse(response);\n    } catch (err) {\n      const errorResponse: N8nResponse = {\n        success: false,\n        error: err instanceof Error ? err.message : 'Workflow trigger failed'\n      };\n      return handleResponse(errorResponse);\n    }\n  }, [handleResponse]);\n\n  const generateWorkflowAction = useCallback(async (requirements: string): Promise<N8nResponse> => {\n    setIsLoading(true);\n    setError(null);\n    try {\n      const response = await generateWorkflow(requirements, department);\n      return handleResponse(response);\n    } catch (err) {\n      const errorResponse: N8nResponse = {\n        success: false,\n        error: err instanceof Error ? err.message : 'Workflow generation failed'\n      };\n      return handleResponse(errorResponse);\n    }\n  }, [department, handleResponse]);\n\n  const createContentAction = useCallback(async (\n    type: 'blog' | 'social' | 'email',\n    prompt: string,\n    options?: Record<string, any>\n  ): Promise<N8nResponse> => {\n    setIsLoading(true);\n    setError(null);\n    try {\n      const response = await createContent(type, prompt, options);\n      return handleResponse(response);\n    } catch (err) {\n      const errorResponse: N8nResponse = {\n        success: false,\n        error: err instanceof Error ? err.message : 'Content creation failed'\n      };\n      return handleResponse(errorResponse);\n    }\n  }, [handleResponse]);\n\n  const salesAction = useCallback(async (\n    action: 'pipeline' | 'lead' | 'forecast',\n    data: Record<string, any>\n  ): Promise<N8nResponse> => {\n    setIsLoading(true);\n    setError(null);\n    try {\n      const response = await n8nService.salesAction(action, data);\n      return handleResponse(response);\n    } catch (err) {\n      const errorResponse: N8nResponse = {\n        success: false,\n        error: err instanceof Error ? err.message : 'Sales action failed'\n      };\n      return handleResponse(errorResponse);\n    }\n  }, [handleResponse]);\n\n  const financeAction = useCallback(async (\n    action: 'invoice' | 'report' | 'payment',\n    data: Record<string, any>\n  ): Promise<N8nResponse> => {\n    setIsLoading(true);\n    setError(null);\n    try {\n      const response = await n8nService.financeAction(action, data);\n      return handleResponse(response);\n    } catch (err) {\n      const errorResponse: N8nResponse = {\n        success: false,\n        error: err instanceof Error ? err.message : 'Finance action failed'\n      };\n      return handleResponse(errorResponse);\n    }\n  }, [handleResponse]);\n\n  const operationsAction = useCallback(async (\n    action: 'automate' | 'monitor' | 'deploy',\n    data: Record<string, any>\n  ): Promise<N8nResponse> => {\n    setIsLoading(true);\n    setError(null);\n    try {\n      const response = await n8nService.operationsAction(action, data);\n      return handleResponse(response);\n    } catch (err) {\n      const errorResponse: N8nResponse = {\n        success: false,\n        error: err instanceof Error ? err.message : 'Operations action failed'\n      };\n      return handleResponse(errorResponse);\n    }\n  }, [handleResponse]);\n\n  const clearError = useCallback(() => {\n    setError(null);\n  }, []);\n\n  return {\n    // State\n    isLoading,\n    isConnected,\n    lastResponse,\n    error,\n    \n    // Actions\n    chat,\n    triggerWorkflow,\n    generateWorkflow: generateWorkflowAction,\n    createContent: createContentAction,\n    salesAction,\n    financeAction,\n    operationsAction,\n    \n    // Utilities\n    clearError,\n    checkHealth\n  };\n}\n\n/**\n * Specialized hook for department-specific assistants\n */\nexport function useDepartmentAssistant(department: Department) {\n  const n8n = useN8n({ department });\n  \n  return {\n    ...n8n,\n    askAssistant: n8n.chat,\n    department\n  };\n}\n\n/**\n * Hook for Pulse Marketplace integration\n */\nexport function usePulseIntegration() {\n  const n8n = useN8n({ department: 'operations' });\n  \n  const installApp = useCallback(async (appId: string, config: Record<string, any>): Promise<N8nResponse> => {\n    const response = await n8nService.installPulseApp(appId, config);\n    return response;\n  }, []);\n  \n  return {\n    ...n8n,\n    installApp\n  };\n}\n\n/**\n * Hook for content creation workflows\n */\nexport function useContentCreation() {\n  const n8n = useN8n({ department: 'marketing' });\n  \n  return {\n    isLoading: n8n.isLoading,\n    error: n8n.error,\n    createBlogPost: (prompt: string, options?: Record<string, any>) => \n      n8n.createContent('blog', prompt, options),\n    createSocialPost: (prompt: string, options?: Record<string, any>) => \n      n8n.createContent('social', prompt, options),\n    createEmail: (prompt: string, options?: Record<string, any>) => \n      n8n.createContent('email', prompt, options),\n    clearError: n8n.clearError\n  };\n}\n\n/**\n * Hook for workflow generation\n */\nexport function useWorkflowBuilder() {\n  const n8n = useN8n({ department: 'operations' });\n  \n  return {\n    isLoading: n8n.isLoading,\n    error: n8n.error,\n    buildWorkflow: n8n.generateWorkflow,\n    clearError: n8n.clearError\n  };\n} ","usedDeprecatedRules":[]},{"filePath":"/home/vonj/Github/Nexus/src/lib/automation/n8n/workspaceClarifyWorkflow.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":293,"column":28,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":293,"endColumn":31,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[7582,7585],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[7582,7585],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":318,"column":19,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":318,"endColumn":22,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[8178,8181],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[8178,8181],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\n * workspaceClarifyWorkflow.ts\n * n8n workflow for clarifying and structuring ideas from the Workspace\n * Converts raw ideas into actionable tasks/projects with department routing\n */\n\nimport type { N8nWorkflowDefinition, N8nNode, N8nConnection } from './n8nWorkflowBuilder';\n\nexport interface ClarifyIdeaRequest {\n  idea: string;\n  userId: string;\n  context?: {\n    department?: string;\n    priority?: 'low' | 'medium' | 'high';\n    timeline?: string;\n  };\n}\n\nexport interface ClarifyIdeaResponse {\n  success: boolean;\n  data?: {\n    type: 'project' | 'task';\n    suggestedDepartment: string;\n    breakdown: string[];\n    estimatedEffort: string;\n    priority: 'low' | 'medium' | 'high';\n    nextSteps: string[];\n    reasoning: string;\n  };\n  error?: string;\n}\n\n/**\n * Create the \"Clarify Idea\" workflow definition\n */\nexport function createClarifyIdeaWorkflow(): N8nWorkflowDefinition {\n  const nodes: N8nNode[] = [\n    // Webhook Trigger\n    {\n      id: 'webhook-trigger',\n      name: 'Webhook Trigger',\n      type: 'n8n-nodes-base.webhook',\n      typeVersion: 1,\n      position: [240, 300],\n      parameters: {\n        httpMethod: 'POST',\n        path: 'clarify-idea',\n        responseMode: 'responseNode',\n        options: {}\n      },\n      webhookId: 'clarify-idea-webhook'\n    },\n\n    // Validate Input\n    {\n      id: 'validate-input',\n      name: 'Validate Input',\n      type: 'n8n-nodes-base.function',\n      typeVersion: 1,\n      position: [460, 300],\n      parameters: {\n        functionCode: `\n          const idea = $input.first().json.idea;\n          const userId = $input.first().json.userId;\n          \n          if (!idea || typeof idea !== 'string' || idea.trim().length === 0) {\n            throw new Error('Idea is required and must be a non-empty string');\n          }\n          \n          if (!userId || typeof userId !== 'string') {\n            throw new Error('User ID is required');\n          }\n          \n          return {\n            idea: idea.trim(),\n            userId,\n            context: $input.first().json.context || {}\n          };\n        `\n      }\n    },\n\n    // Call OpenRouter API\n    {\n      id: 'openrouter-api',\n      name: 'Call OpenRouter',\n      type: 'n8n-nodes-base.httpRequest',\n      typeVersion: 1,\n      position: [680, 300],\n      parameters: {\n        method: 'POST',\n        url: 'https://openrouter.ai/api/v1/chat/completions',\n        authentication: 'genericCredentialType',\n        genericAuthType: 'httpHeaderAuth',\n        httpHeaderAuth: {\n          name: 'Authorization',\n          value: 'Bearer {{ $env.OPENROUTER_API_KEY }}'\n        },\n        sendHeaders: true,\n        headerParameters: {\n          parameters: [\n            {\n              name: 'Content-Type',\n              value: 'application/json'\n            },\n            {\n              name: 'HTTP-Referer',\n              value: 'https://nexus-app.com'\n            },\n            {\n              name: 'X-Title',\n              value: 'Nexus Workspace'\n            }\n          ]\n        },\n        sendBody: true,\n        bodyParameters: {\n          parameters: [\n            {\n              name: 'model',\n              value: 'anthropic/claude-3.5-sonnet'\n            },\n            {\n              name: 'messages',\n              value: JSON.stringify([\n                {\n                  role: 'system',\n                  content: `You are an AI assistant that helps clarify and structure business ideas. \n                  Analyze the user's idea and provide:\n                  1. Whether it should be a project or task\n                  2. Which department it belongs to (Marketing, Sales, Support, Operations, Finance)\n                  3. A breakdown of actionable steps\n                  4. Estimated effort (1-2 hours, 1-2 days, 1-2 weeks, 1+ months)\n                  5. Priority level (low, medium, high)\n                  6. Next immediate steps\n                  \n                  Respond in JSON format:\n                  {\n                    \"type\": \"project|task\",\n                    \"suggestedDepartment\": \"department_name\",\n                    \"breakdown\": [\"step1\", \"step2\", \"step3\"],\n                    \"estimatedEffort\": \"time_estimate\",\n                    \"priority\": \"low|medium|high\",\n                    \"nextSteps\": [\"next1\", \"next2\"],\n                    \"reasoning\": \"brief explanation\"\n                  }`\n                },\n                {\n                  role: 'user',\n                  content: '{{ $json.idea }}'\n                }\n              ])\n            },\n            {\n              name: 'temperature',\n              value: '0.3'\n            },\n            {\n              name: 'max_tokens',\n              value: '1000'\n            }\n          ]\n        }\n      }\n    },\n\n    // Parse AI Response\n    {\n      id: 'parse-response',\n      name: 'Parse AI Response',\n      type: 'n8n-nodes-base.function',\n      typeVersion: 1,\n      position: [900, 300],\n      parameters: {\n        functionCode: `\n          try {\n            const aiResponse = $input.first().json.choices[0].message.content;\n            const parsed = JSON.parse(aiResponse);\n            \n            // Validate required fields\n            const required = ['type', 'suggestedDepartment', 'breakdown', 'estimatedEffort', 'priority', 'nextSteps', 'reasoning'];\n            for (const field of required) {\n              if (!parsed[field]) {\n                throw new Error(\\`Missing required field: \\${field}\\`);\n              }\n            }\n            \n            return {\n              success: true,\n              data: parsed\n            };\n          } catch (error) {\n            return {\n              success: false,\n              error: 'Failed to parse AI response: ' + error.message\n            };\n          }\n        `\n      }\n    },\n\n    // Error Handler\n    {\n      id: 'error-handler',\n      name: 'Error Handler',\n      type: 'n8n-nodes-base.function',\n      typeVersion: 1,\n      position: [900, 500],\n      parameters: {\n        functionCode: `\n          const error = $input.first().json;\n          return {\n            success: false,\n            error: error.message || 'An error occurred while clarifying the idea'\n          };\n        `\n      }\n    },\n\n    // Response Node\n    {\n      id: 'response',\n      name: 'Response',\n      type: 'n8n-nodes-base.respondToWebhook',\n      typeVersion: 1,\n      position: [1120, 300],\n      parameters: {\n        responseCode: 200,\n        responseMode: 'responseNode',\n        options: {}\n      }\n    }\n  ];\n\n  const connections: N8nConnection = {\n    'Webhook Trigger': {\n      main: [\n        {\n          node: 'Validate Input',\n          type: 'main',\n          index: 0\n        }\n      ]\n    },\n    'Validate Input': {\n      main: [\n        {\n          node: 'Call OpenRouter',\n          type: 'main',\n          index: 0\n        }\n      ]\n    },\n    'Call OpenRouter': {\n      main: [\n        {\n          node: 'Parse AI Response',\n          type: 'main',\n          index: 0\n        }\n      ]\n    },\n    'Parse AI Response': {\n      main: [\n        {\n          node: 'Response',\n          type: 'main',\n          index: 0\n        }\n      ]\n    }\n  };\n\n  return {\n    name: 'Clarify Idea Workflow',\n    nodes,\n    connections,\n    active: false,\n    settings: {\n      executionOrder: 'v1',\n      saveManualExecutions: true,\n      callerPolicy: 'workflowsFromSameOwner'\n    }\n  };\n}\n\n/**\n * Service function to trigger the clarify idea workflow\n */\nexport async function triggerClarifyIdeaWorkflow(\n  idea: string,\n  userId: string,\n  context?: Record<string, any>\n): Promise<ClarifyIdeaResponse> {\n  try {\n    // Import the n8n service\n    const { N8nService } = await import('./n8nService');\n    const n8nService = new N8nService();\n\n    // Trigger the workflow\n    const response = await n8nService.triggerWorkflow('clarify-idea-webhook', {\n      idea,\n      userId,\n      context\n    });\n\n    if (response.success && response.data) {\n      return {\n        success: true,\n        data: response.data\n      };\n    } else {\n      return {\n        success: false,\n        error: response.error || 'Failed to clarify idea'\n      };\n    }\n  } catch (error: any) {\n    console.error('Clarify idea workflow failed:', error);\n    return {\n      success: false,\n      error: error.message || 'Workflow execution failed'\n    };\n  }\n} ","usedDeprecatedRules":[]},{"filePath":"/home/vonj/Github/Nexus/src/lib/business/analytics/businessHealthKPIs.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/vonj/Github/Nexus/src/lib/business/analytics/contextualExamples.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":189,"column":75,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":189,"endColumn":78,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[8561,8564],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[8561,8564],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\n * contextualExamples.ts\n * \n * Demonstration of how Nexus creates the \"Nexus gets me\" experience\n * through deeply personalized AI interactions based on user context.\n */\n\nexport interface ContextualConversationExample {\n  userProfile: {\n    name: string;\n    role: string;\n    experience_level: string;\n    communication_style: string;\n    current_pain_points: string[];\n    immediate_goals: string;\n  };\n  businessContext: {\n    company: string;\n    industry: string;\n    size: string;\n    automation_maturity: string;\n  };\n  userQuery: string;\n  genericResponse: string;\n  contextualResponse: string;\n  nexusIntelligence: string[];\n}\n\nexport const contextualExamples: ContextualConversationExample[] = [\n  {\n    userProfile: {\n      name: \"Sarah Chen\",\n      role: \"Marketing Director\", \n      experience_level: \"intermediate\",\n      communication_style: \"visual\",\n      current_pain_points: [\"Manual reporting\", \"Scattered data across tools\"],\n      immediate_goals: \"Reduce weekly reporting time from 8 hours to 2 hours\"\n    },\n    businessContext: {\n      company: \"TechFlow Innovations\",\n      industry: \"B2B SaaS\",\n      size: \"Medium (50-200 employees)\",\n      automation_maturity: \"basic\"\n    },\n    userQuery: \"How can I automate my marketing reports?\",\n    genericResponse: \"You can automate marketing reports by using dashboard tools, setting up scheduled reports, and integrating your data sources. Consider tools like Google Data Studio or Tableau for visualization.\",\n    contextualResponse: `Hi Sarah! 🎯 Given your goal to cut reporting time from 8 hours to 2 hours weekly, here's a tailored automation strategy:\n\n**For Your Current Setup (Basic Automation Level):**\n• Start with n8n workflows to aggregate data from your scattered tools\n• Create visual dashboards (perfect for your visual communication style) \n• Focus on your key marketing metrics first - likely campaign performance & lead quality\n\n**Immediate Action Plan:**\n1. **Week 1**: Connect your top 3 marketing tools to n8n\n2. **Week 2**: Build automated weekly report template  \n3. **Week 3**: Set up visual dashboard for real-time insights\n\n**Why This Works for TechFlow:**\n- B2B SaaS companies typically track similar metrics to what we'll automate\n- Medium companies benefit most from workflow automation ROI\n- Builds on your existing basic automation foundation\n\n**Expected Outcome:** 75% time reduction (8hrs → 2hrs) within 3 weeks\n\nWould you like me to connect you with our Marketing Automation specialist to design the specific workflows?`,\n    nexusIntelligence: [\n      \"Recognized Sarah's specific time-saving goal (8→2 hours)\",\n      \"Matched her visual communication preference with dashboard suggestions\",\n      \"Addressed her pain point about scattered data across tools\",\n      \"Considered TechFlow's B2B SaaS industry context\",\n      \"Adjusted complexity for her intermediate experience level\",\n      \"Referenced their basic automation maturity level\",\n      \"Provided medium-company-specific ROI expectations\",\n      \"Offered relevant specialist connection\"\n    ]\n  },\n  {\n    userProfile: {\n      name: \"Marcus Rodriguez\",\n      role: \"Sales Manager\",\n      experience_level: \"advanced\", \n      communication_style: \"direct\",\n      current_pain_points: [\"Inconsistent pipeline data\", \"Manual lead scoring\"],\n      immediate_goals: \"Increase sales team productivity by 25%\"\n    },\n    businessContext: {\n      company: \"Industrial Solutions Corp\",\n      industry: \"Manufacturing\",\n      size: \"Large (200+ employees)\",\n      automation_maturity: \"intermediate\"\n    },\n    userQuery: \"Our sales pipeline is a mess. What's the fastest way to clean it up?\",\n    genericResponse: \"To clean up your sales pipeline, you should standardize your lead qualification process, implement consistent data entry protocols, update your CRM hygiene, and train your team on best practices.\",\n    contextualResponse: `Marcus, here's your fastest path to pipeline cleanup for immediate productivity gains:\n\n**Priority Actions (Manufacturing Focus):**\n• **Data Standardization**: Automate lead scoring using your existing intermediate automation setup\n• **Pipeline Segmentation**: Separate long-cycle industrial deals from quick wins\n• **CRM Enhancement**: Implement automated data validation rules\n\n**Fast Implementation (Manufacturing Sales Cycle Aware):**\n1. **Week 1**: Deploy automated lead scoring (you're advanced enough to handle complex rules)\n2. **Week 2**: Set up pipeline health alerts for stalled deals\n3. **Week 3**: Implement automated follow-up sequences for different deal types\n\n**Large Company Benefits:**\n- Scale solution across your entire sales org\n- Standardize processes across regions/divisions\n- Generate executive dashboards for leadership visibility\n\n**Expected Impact:** 25% productivity increase through reduced admin time and better deal prioritization.\n\n**Immediate Next Step:** I'll route you to our Sales Operations specialist who has manufacturing industry experience. They can implement this in 2 weeks.`,\n    nexusIntelligence: [\n      \"Addressed Marcus's direct communication style with bullet points\",\n      \"Recognized his advanced experience level for complex automation\",\n      \"Focused on his specific 25% productivity goal\",\n      \"Considered manufacturing industry's longer sales cycles\",\n      \"Leveraged their intermediate automation maturity\",\n      \"Accounted for large company implementation challenges\",\n      \"Offered industry-specific specialist connection\",\n      \"Provided realistic timeline expectations\"\n    ]\n  },\n  {\n    userProfile: {\n      name: \"Emily Foster\",\n      role: \"Operations Coordinator\",\n      experience_level: \"beginner\",\n      communication_style: \"detailed\",\n      current_pain_points: [\"Overwhelming number of tools\", \"Unclear processes\"],\n      immediate_goals: \"Get organized and establish clear workflows\"\n    },\n    businessContext: {\n      company: \"GreenLeaf Consulting\",\n      industry: \"Professional Services\", \n      size: \"Small (10-50 employees)\",\n      automation_maturity: \"none\"\n    },\n    userQuery: \"I'm new to operations and feeling overwhelmed. Where do I start?\",\n    genericResponse: \"Start by documenting your current processes, identifying your main tools, creating standard operating procedures, and gradually implementing automation where it makes sense.\",\n    contextualResponse: `Emily, I completely understand! Operations can feel overwhelming initially, especially in a growing consulting firm. Let's create a clear, step-by-step plan tailored for someone just starting out:\n\n**Your Beginner-Friendly Roadmap:**\n\n**Phase 1: Get Organized (Week 1-2)**\n• Document what you're currently doing daily (I'll provide templates)\n• List all the tools GreenLeaf uses (we'll simplify this)\n• Identify your 3 most time-consuming tasks\n\n**Phase 2: Create Simple Systems (Week 3-4)** \n• Build basic workflows for recurring tasks\n• Set up simple tracking spreadsheets\n• Establish clear communication processes\n\n**Phase 3: Easy Automation (Week 5-6)**\n• Start with no-code solutions (perfect for professional services)\n• Automate simple repetitive tasks first\n• Build confidence before advancing\n\n**Small Company Advantages:**\n- Faster decision making and implementation\n- Direct impact visibility\n- Ability to iterate quickly\n\n**Consulting-Specific Focus Areas:**\n- Client project tracking workflows\n- Resource allocation systems  \n- Time tracking automation\n\n**Your Success Plan:** By focusing on fundamentals first, you'll have clear, manageable workflows in 6 weeks. No overwhelming complexity—just practical systems that work for a small consulting firm.\n\n**Next Step:** I'll connect you with our Beginner-Friendly Operations specialist who'll provide templates and guide you through each phase personally.`,\n    nexusIntelligence: [\n      \"Acknowledged Emily's beginner status with encouraging, supportive tone\",\n      \"Provided detailed explanation matching her communication preference\", \n      \"Addressed her feeling of being overwhelmed with structured approach\",\n      \"Focused on her goal of getting organized and establishing workflows\",\n      \"Considered GreenLeaf's small company context for faster iteration\",\n      \"Addressed professional services industry-specific needs\",\n      \"Recognized their 'none' automation maturity with no-code start\",\n      \"Offered beginner-specialist connection for personal guidance\",\n      \"Broke down overwhelming task into manageable 6-week phases\"\n    ]\n  }\n];\n\nexport const getContextualResponseDemo = (userQuery: string, userContext: any): string => {\n  return `\n🧠 **NEXUS INTELLIGENCE IN ACTION**\n\n**What a Generic AI Would Say:**\n\"Here are some general best practices for your question...\"\n\n**What Nexus Knows About You:**\n• Name: ${userContext.name} (${userContext.role})\n• Experience: ${userContext.experience_level} level \n• Communication Style: Prefers ${userContext.communication_style} responses\n• Current Challenge: ${userContext.current_pain_points[0]}\n• Success Goal: ${userContext.immediate_goals}\n• Company Context: ${userContext.company} (${userContext.industry})\n• Automation Readiness: ${userContext.automation_maturity}\n\n**What Nexus Delivers:**\n✅ Personalized advice for YOUR role and experience level\n✅ Solutions that match YOUR communication preferences  \n✅ Industry-specific recommendations for YOUR business\n✅ Implementation timeline that fits YOUR company size\n✅ Automation complexity that matches YOUR current maturity\n✅ Success metrics aligned with YOUR specific goals\n✅ Next steps that consider YOUR constraints and capabilities\n\n**The \"Nexus Gets Me\" Difference:**\nEvery response is crafted specifically for YOU, considering your role, industry, experience, goals, and constraints. It's like having a personal business advisor who truly understands your situation.\n`;\n};\n\n/**\n * Example of how context flows through different AI interactions\n */\nexport const contextualFlowExample = {\n  scenario: \"Sarah (Marketing Director) starts with Executive Assistant, then talks to Marketing Specialist\",\n  \n  executiveAssistantContext: `\n🧠 EXECUTIVE INTELLIGENCE:\n• Sarah Chen (Marketing Director) at TechFlow Innovations  \n• Intermediate experience, prefers visual communication\n• Pain Point: 8 hours/week on manual reporting\n• Goal: Reduce to 2 hours via automation\n• B2B SaaS industry context\n• Medium company size (faster implementation)\n`,\n\n  executiveResponse: `Hi Sarah! I understand you're spending 8 hours weekly on manual reporting and want to cut that to 2 hours. For a B2B SaaS company like TechFlow, this is absolutely achievable.\n\nGiven your intermediate experience with business tools and preference for visual communication, I recommend starting with dashboard automation. You'll likely see 75% time reduction within 3 weeks.\n\nLet me connect you with our Marketing Automation specialist who can design specific workflows for your reporting needs.`,\n\n  handoffToSpecialist: \"Routing to Marketing Specialist with full context...\",\n\n  marketingSpecialistContext: `\n🧠 SPECIALIST INTELLIGENCE (Enhanced from Executive handoff):\n• Inherited: Sarah's profile, goals, and Executive conversation context\n• Added: Marketing-specific tool analysis for TechFlow\n• Enhanced: B2B SaaS marketing automation opportunities\n• Focused: Visual dashboard design for intermediate users\n`,\n\n  marketingSpecialistResponse: `Sarah! I've reviewed your conversation with our Executive Assistant about reducing reporting time from 8 to 2 hours.\n\nFor TechFlow's B2B SaaS marketing, here's your specific automation blueprint:\n\n**Visual Dashboard Setup (matches your preference):**\n• HubSpot → n8n → Custom dashboard for campaign ROI\n• Google Analytics → automated weekly traffic reports  \n• LinkedIn/Social → engagement tracking automation\n\n**Your 3-Week Implementation:**\nWeek 1: Connect HubSpot and Analytics data\nWeek 2: Build visual reporting dashboard  \nWeek 3: Automate weekly report generation\n\nThis leverages your intermediate experience while being visual-first. Ready to start with Week 1?`\n};\n\nexport default {\n  contextualExamples,\n  getContextualResponseDemo,\n  contextualFlowExample\n}; ","usedDeprecatedRules":[]},{"filePath":"/home/vonj/Github/Nexus/src/lib/business/businessProfileService.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":58,"column":35,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":58,"endColumn":38,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1551,1554],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1551,1554],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":83,"column":31,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":83,"endColumn":34,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2140,2143],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2140,2143],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { supabase } from '@/lib/core/supabase';\n\nexport interface BusinessProfile {\n  // Core Business Identity\n  company_name: string;\n  industry: string;\n  business_model: string; // B2B, B2C, SaaS, etc.\n  founded_date?: string;\n  company_size: 'solopreneur' | 'startup' | 'small' | 'medium' | 'enterprise';\n  \n  // Mission & Vision\n  mission_statement?: string;\n  vision_statement?: string;\n  core_values?: string[];\n  \n  // What We Do\n  primary_services: string[];\n  secondary_services?: string[];\n  service_descriptions: Record<string, string>;\n  unique_value_proposition: string;\n  competitive_advantages?: string[];\n  \n  // Who We Serve\n  target_markets: string[];\n  ideal_customer_profile: {\n    demographics?: string;\n    firmographics?: string;\n    psychographics?: string;\n    pain_points: string[];\n    goals: string[];\n  };\n  customer_segments: Array<{\n    name: string;\n    description: string;\n    size_percentage: number;\n    revenue_contribution: number;\n  }>;\n  \n  // How We Serve\n  service_delivery_methods: string[];\n  customer_journey_stages: string[];\n  touchpoints: string[];\n  communication_channels: string[];\n  \n  // Current Clients & Revenue\n  total_clients: number;\n  active_clients: number;\n  client_categories: Record<string, number>;\n  monthly_recurring_revenue?: number;\n  average_deal_size?: number;\n  customer_lifetime_value?: number;\n  churn_rate?: number;\n  \n  // Operations & Management\n  key_processes: string[];\n  operational_challenges: string[];\n  technology_stack: string[];\n  team_structure?: Record<string, any>;\n  \n  // Financial Structure\n  revenue_streams: Array<{\n    name: string;\n    type: 'recurring' | 'one-time' | 'usage-based';\n    percentage: number;\n    pricing_model: string;\n  }>;\n  cost_structure: string[];\n  payment_methods: string[];\n  billing_cycles: string[];\n  \n  // Goals & Strategy\n  short_term_goals: string[];\n  long_term_goals: string[];\n  growth_strategy: string;\n  expansion_plans?: string[];\n  \n  // Challenges & Opportunities\n  current_challenges: string[];\n  market_opportunities: string[];\n  threats: string[];\n  \n  // Metrics & KPIs\n  key_metrics: Record<string, any>;\n  success_indicators: string[];\n  \n  // Metadata\n  last_updated: string;\n  updated_by: string;\n}\n\nexport class BusinessProfileService {\n  private static instance: BusinessProfileService;\n  \n  public static getInstance(): BusinessProfileService {\n    if (!BusinessProfileService.instance) {\n      BusinessProfileService.instance = new BusinessProfileService();\n    }\n    return BusinessProfileService.instance;\n  }\n\n  async getBusinessProfile(orgId: string): Promise<BusinessProfile | null> {\n    const { data, error } = await supabase\n      .from('business_profiles')\n      .select('*')\n      .eq('org_id', orgId)\n      .single();\n\n    if (error) {\n      console.error('Error fetching business profile:', error);\n      return null;\n    }\n\n    return data;\n  }\n\n  async saveBusinessProfile(orgId: string, profile: Partial<BusinessProfile>): Promise<boolean> {\n    const { error } = await supabase\n      .from('business_profiles')\n      .upsert({\n        org_id: orgId,\n        ...profile,\n        last_updated: new Date().toISOString(),\n      });\n\n    if (error) {\n      console.error('Error saving business profile:', error);\n      return false;\n    }\n\n    return true;\n  }\n\n  async updateBusinessProfile(orgId: string, updates: Partial<BusinessProfile>): Promise<boolean> {\n    const { error } = await supabase\n      .from('business_profiles')\n      .update({\n        ...updates,\n        last_updated: new Date().toISOString(),\n      })\n      .eq('org_id', orgId);\n\n    if (error) {\n      console.error('Error updating business profile:', error);\n      return false;\n    }\n\n    return true;\n  }\n\n  // Generate business intelligence based on profile\n  async generateBusinessInsights(orgId: string): Promise<string[]> {\n    const profile = await this.getBusinessProfile(orgId);\n    if (!profile) return [];\n\n    const insights = [];\n\n    // Revenue insights\n    if (profile.revenue_streams) {\n      const recurringRevenue = profile.revenue_streams\n        .filter(stream => stream.type === 'recurring')\n        .reduce((sum, stream) => sum + stream.percentage, 0);\n      \n      if (recurringRevenue > 70) {\n        insights.push(\"Strong recurring revenue model provides predictable cash flow\");\n      } else if (recurringRevenue < 30) {\n        insights.push(\"Consider developing more recurring revenue streams for stability\");\n      }\n    }\n\n    // Customer insights\n    if (profile.customer_segments) {\n      const topSegment = profile.customer_segments\n        .sort((a, b) => b.revenue_contribution - a.revenue_contribution)[0];\n      \n      if (topSegment && topSegment.revenue_contribution > 60) {\n        insights.push(`High dependency on ${topSegment.name} segment - consider diversification`);\n      }\n    }\n\n    // Growth insights\n    if (profile.company_size === 'solopreneur' && profile.total_clients > 50) {\n      insights.push(\"Client base suggests readiness for team expansion\");\n    }\n\n    return insights;\n  }\n\n  // Get AI context for business understanding\n  async getAIBusinessContext(orgId: string): Promise<string> {\n    const profile = await this.getBusinessProfile(orgId);\n    if (!profile) return \"No business profile available\";\n\n    return `\nBusiness Profile for ${profile.company_name}:\n\nWHAT WE DO:\n- Primary Services: ${profile.primary_services?.join(', ')}\n- Value Proposition: ${profile.unique_value_proposition}\n- Business Model: ${profile.business_model}\n\nWHO WE SERVE:\n- Target Markets: ${profile.target_markets?.join(', ')}\n- Total Clients: ${profile.total_clients}\n- Customer Segments: ${profile.customer_segments?.map(s => `${s.name} (${s.revenue_contribution}% revenue)`).join(', ')}\n\nHOW WE SERVE:\n- Delivery Methods: ${profile.service_delivery_methods?.join(', ')}\n- Communication Channels: ${profile.communication_channels?.join(', ')}\n\nCURRENT SITUATION:\n- Company Size: ${profile.company_size}\n- Monthly Recurring Revenue: ${profile.monthly_recurring_revenue ? `$${profile.monthly_recurring_revenue}` : 'Not specified'}\n- Key Challenges: ${profile.current_challenges?.join(', ')}\n\nGOALS & STRATEGY:\n- Short-term Goals: ${profile.short_term_goals?.join(', ')}\n- Growth Strategy: ${profile.growth_strategy}\n\nThis context should inform all business advice and recommendations.\n    `.trim();\n  }\n}\n\nexport const businessProfileService = BusinessProfileService.getInstance(); ","usedDeprecatedRules":[]},{"filePath":"/home/vonj/Github/Nexus/src/lib/constants/index.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/vonj/Github/Nexus/src/lib/constants/security.ts","messages":[],"suppressedMessages":[{"ruleId":"no-useless-escape","severity":2,"message":"Unnecessary escape character: \\(.","line":49,"column":22,"nodeType":"Literal","messageId":"unnecessaryEscape","endLine":49,"endColumn":23,"suggestions":[{"messageId":"removeEscape","fix":{"range":[1291,1292],"text":""},"desc":"Remove the `\\`. This maintains the current functionality."},{"messageId":"escapeBackslash","fix":{"range":[1291,1291],"text":"\\"},"desc":"Replace the `\\` with `\\\\` to include the actual backslash character."}],"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"no-useless-escape","severity":2,"message":"Unnecessary escape character: \\).","line":49,"column":24,"nodeType":"Literal","messageId":"unnecessaryEscape","endLine":49,"endColumn":25,"suggestions":[{"messageId":"removeEscape","fix":{"range":[1293,1294],"text":""},"desc":"Remove the `\\`. This maintains the current functionality."},{"messageId":"escapeBackslash","fix":{"range":[1293,1293],"text":"\\"},"desc":"Replace the `\\` with `\\\\` to include the actual backslash character."}],"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"no-useless-escape","severity":2,"message":"Unnecessary escape character: \\/.","line":54,"column":57,"nodeType":"Literal","messageId":"unnecessaryEscape","endLine":54,"endColumn":58,"suggestions":[{"messageId":"removeEscape","fix":{"range":[1466,1467],"text":""},"desc":"Remove the `\\`. This maintains the current functionality."},{"messageId":"escapeBackslash","fix":{"range":[1466,1466],"text":"\\"},"desc":"Replace the `\\` with `\\\\` to include the actual backslash character."}],"suppressions":[{"kind":"directive","justification":""}]}],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/vonj/Github/Nexus/src/lib/core/config/chartColors.ts","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'getCssVariableValue' is assigned a value but never used.","line":9,"column":7,"nodeType":null,"messageId":"unusedVar","endLine":9,"endColumn":26}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\n * Chart Colors Utility\n * \n * Provides brand-aligned color values for data visualization components\n * Uses CSS variables to maintain theme consistency\n */\n\n// Helper to convert CSS hsl variable to string suitable for charts\nconst getCssVariableValue = (variableName: string): string => {\n  // For browser environment\n  if (typeof window !== 'undefined' && typeof document !== 'undefined') {\n    const computedStyle = getComputedStyle(document.documentElement);\n    return `hsl(${computedStyle.getPropertyValue(variableName)})`;\n  }\n  \n  // Fallback for SSR - these match our brand colors closely\n  const fallbackColors: Record<string, string> = {\n    '--primary': '#006837',\n    '--secondary': '#00a651',\n    '--accent': '#007aff',\n    '--destructive': '#e11d48',\n    '--warning': '#f59e0b',\n    '--success': '#10b981',\n    '--muted': '#64748b',\n  };\n  \n  const key = variableName.startsWith('--') ? variableName : `--${variableName}`;\n  return fallbackColors[key] || '#006837'; // Default to primary if not found\n};\n\n// Main chart colors - use these for data visualization\nexport const chartColors = {\n  // Using hsl() wrapper ensures CSS variables resolve correctly in SVG attributes\n  primary: 'hsl(var(--primary))',\n  secondary: 'hsl(var(--secondary))',\n  accent: 'hsl(var(--accent))',\n  success: 'hsl(var(--success))',\n  warning: 'hsl(var(--warning))',\n  destructive: 'hsl(var(--destructive))',\n  muted: 'hsl(var(--muted))',\n  \n  // Opacity variants (20% opacity)\n  primaryLight: 'hsl(var(--primary) / 0.2)',\n  secondaryLight: 'hsl(var(--secondary) / 0.2)',\n  accentLight: 'hsl(var(--accent) / 0.2)',\n  \n  // Categorical palette for multi-series charts\n  categorical: [\n    'hsl(var(--primary))',\n    'hsl(var(--secondary))',\n    'hsl(var(--accent))',\n    'hsl(var(--success))',\n    'hsl(var(--warning))',\n    'hsl(var(--destructive))',\n  ],\n};\n\n// Generate a color sequence for multiple data series\nexport const getColorSequence = (count: number): string[] => {\n  const baseColors = chartColors.categorical;\n  \n  if (count <= baseColors.length) {\n    return baseColors.slice(0, count);\n  }\n  \n  // For more colors than in our base palette, we create variations\n  const result: string[] = [...baseColors];\n  \n  while (result.length < count) {\n    // Add opacity variations of the base colors\n    const index = result.length % baseColors.length;\n    const opacity = 0.8 - (Math.floor(result.length / baseColors.length) * 0.2);\n    result.push(`${baseColors[index]}/${Math.max(opacity * 100, 30)}%`);\n  }\n  \n  return result;\n};\n\nexport default chartColors; ","usedDeprecatedRules":[]},{"filePath":"/home/vonj/Github/Nexus/src/lib/core/config/styles.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/vonj/Github/Nexus/src/lib/core/database.types.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/vonj/Github/Nexus/src/lib/core/environment.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":92,"column":34,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":92,"endColumn":37,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2413,2416],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2413,2416],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":99,"column":34,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":99,"endColumn":37,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2616,2619],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2616,2619],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":106,"column":36,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":106,"endColumn":39,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2823,2826],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2823,2826],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\n * Production Environment Configuration\n * Validates and provides type-safe access to environment variables\n */\n\ninterface EnvironmentConfig {\n  supabase: {\n    url: string;\n    anonKey: string;\n  };\n  development: {\n    isDevelopment: boolean;\n    isProduction: boolean;\n  };\n}\n\nclass EnvironmentError extends Error {\n  constructor(message: string) {\n    super(`Environment Configuration Error: ${message}`);\n    this.name = 'EnvironmentError';\n  }\n}\n\n/**\n * Validates that a required environment variable is present and non-empty\n */\nfunction requireEnvVar(name: string, value: string | undefined): string {\n  if (!value || value.trim() === '') {\n    throw new EnvironmentError(\n      `Missing required environment variable: ${name}. Please check your environment configuration.`\n    );\n  }\n  return value.trim();\n}\n\n/**\n * Validates and returns the environment configuration\n */\nexport function getEnvironmentConfig(): EnvironmentConfig {\n  try {\n    const config: EnvironmentConfig = {\n      supabase: {\n        url: requireEnvVar('VITE_SUPABASE_URL', import.meta.env.VITE_SUPABASE_URL),\n        anonKey: requireEnvVar('VITE_SUPABASE_ANON_KEY', import.meta.env.VITE_SUPABASE_ANON_KEY),\n      },\n      development: {\n        isDevelopment: import.meta.env.DEV || false,\n        isProduction: import.meta.env.PROD || false,\n      },\n    };\n\n    // Validate Supabase URL format\n    try {\n      new URL(config.supabase.url);\n    } catch {\n      throw new EnvironmentError(\n        'VITE_SUPABASE_URL must be a valid URL (e.g., https://your-project.supabase.co)'\n      );\n    }\n\n    // Validate Supabase anon key format (basic check)\n    if (config.supabase.anonKey.length < 100) {\n      throw new EnvironmentError(\n        'VITE_SUPABASE_ANON_KEY appears to be invalid. Please check your Supabase project settings.'\n      );\n    }\n\n    return config;\n  } catch (error) {\n    if (error instanceof EnvironmentError) {\n      throw error;\n    }\n    throw new EnvironmentError(`Failed to load environment configuration: ${error}`);\n  }\n}\n\n/**\n * Environment configuration singleton\n */\nexport const env = getEnvironmentConfig();\n\n/**\n * Type-safe environment checks\n */\nexport const isDevelopment = env.development.isDevelopment;\nexport const isProduction = env.development.isProduction;\n\n/**\n * Production logging utility that only logs in development\n */\nexport const devLog = {\n  info: (message: string, data?: any) => {\n    if (isDevelopment && data) {\n      console.log(`[DEV] ${message}`, data);\n    } else if (isDevelopment) {\n      console.log(`[DEV] ${message}`);\n    }\n  },\n  warn: (message: string, data?: any) => {\n    if (isDevelopment && data) {\n      console.warn(`[DEV] ${message}`, data);\n    } else if (isDevelopment) {\n      console.warn(`[DEV] ${message}`);\n    }\n  },\n  error: (message: string, error?: any) => {\n    if (isDevelopment && error) {\n      console.error(`[DEV] ${message}`, error);\n    } else if (isDevelopment) {\n      console.error(`[DEV] ${message}`);\n    }\n  },\n};\n\n/**\n * Validates environment on application startup\n */\nexport function validateEnvironment(): void {\n  try {\n    getEnvironmentConfig();\n    devLog.info('Environment configuration validated successfully');\n  } catch (error) {\n    if (error instanceof EnvironmentError) {\n      throw error;\n    }\n    throw new EnvironmentError(`Environment validation failed: ${error}`);\n  }\n} ","usedDeprecatedRules":[]},{"filePath":"/home/vonj/Github/Nexus/src/lib/core/prisma.ts","messages":[{"ruleId":null,"message":"Unused eslint-disable directive (no problems were reported from 'no-var').","line":8,"column":41,"severity":1,"nodeType":null,"fix":{"range":[320,349],"text":" "}}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":1,"source":"import { PrismaClient } from '@prisma/client';\n\ndeclare global {\n  // `var` is intentionally used here to attach the Prisma client instance to\n  // the Node.js global object. This pattern prevents exhausting database\n  // connections during hot-module reloads in development.\n   \n  var prisma: PrismaClient | undefined; // eslint-disable-line no-var\n}\n\nexport const prisma = global.prisma || new PrismaClient();\n\nif (process.env.NODE_ENV !== 'production') {\n  global.prisma = prisma;\n} ","usedDeprecatedRules":[]},{"filePath":"/home/vonj/Github/Nexus/src/lib/core/providers/MicrosoftGraphProvider.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'user' is assigned a value but never used.","line":23,"column":11,"nodeType":null,"messageId":"unusedVar","endLine":23,"endColumn":15}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\n * Microsoft Graph Toolkit Provider\n * Pillar: 2 - Minimum Lovable Feature Set\n * \n * Implements Microsoft Graph Toolkit using MSAL2 Provider\n * Following Microsoft's official best practices for React integration\n */\n\nimport React, { useEffect, type ReactNode } from 'react';\nimport { Providers } from '@microsoft/mgt-element';\nimport { Msal2Provider } from '@microsoft/mgt-msal2-provider';\nimport { useAuth } from '@/contexts/AuthContext';\nimport { LoginType } from '@microsoft/mgt-element';\n\n// Import and register MGT components\nimport '@microsoft/mgt-components';\n\ninterface MicrosoftGraphProviderProps {\n  children: ReactNode;\n}\n\nexport const MicrosoftGraphProvider: React.FC<MicrosoftGraphProviderProps> = ({ children }) => {\n  const { user } = useAuth();\n\n  useEffect(() => {\n    // Wait for DOM to be ready before initializing MGT\n    const initializeMGT = () => {\n      // Initialize Microsoft Graph Toolkit with MSAL2 Provider\n      if (!Providers.globalProvider) {\n        const clientId = import.meta.env.VITE_MICROSOFT_CLIENT_ID;\n        \n        if (clientId) {\n          try {\n            Providers.globalProvider = new Msal2Provider({\n              clientId,\n              scopes: [\n                'User.Read',\n                'Mail.Read',\n                'Mail.ReadWrite',\n                'Mail.Send',\n                'Calendars.Read',\n                'Calendars.ReadWrite',\n                'People.Read',\n                'Files.Read.All',\n                'Sites.Read.All'\n              ],\n              authority: 'https://login.microsoftonline.com/common',\n              redirectUri: `${window.location.origin.replace('127.0.0.1', 'localhost')}/microsoft365/callback`,\n              loginType: LoginType.Redirect\n            });\n\n            console.log('✅ Microsoft Graph Toolkit initialized with MSAL2 Provider');\n          } catch (error) {\n            console.error('❌ Failed to initialize Microsoft Graph Toolkit:', error);\n          }\n        } else {\n          console.warn('⚠️ Microsoft Graph Toolkit not initialized: VITE_MICROSOFT_CLIENT_ID not found');\n        }\n      }\n    };\n\n    // Initialize after a short delay to ensure DOM is ready\n    const timeoutId = setTimeout(initializeMGT, 100);\n\n    // Cleanup on unmount\n    return () => {\n      clearTimeout(timeoutId);\n      // Note: We don't clean up the global provider as it should persist across component mounts\n    };\n  }, []);\n\n  return <>{children}</>;\n};\n\nexport default MicrosoftGraphProvider; ","usedDeprecatedRules":[]},{"filePath":"/home/vonj/Github/Nexus/src/lib/core/supabase.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":13,"column":44,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":13,"endColumn":47,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[393,396],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[393,396],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":21,"column":40,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":21,"endColumn":43,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[582,585],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[582,585],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":35,"column":20,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":35,"endColumn":23,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[981,984],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[981,984],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":46,"column":20,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":46,"endColumn":23,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1155,1158],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1155,1158],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { createClient } from '@supabase/supabase-js';\nimport type { Database } from '@/types/supabase';\nimport { env } from './environment';\n\nexport const supabase = createClient<Database>(env.supabase.url, env.supabase.anonKey, {\n  auth: {\n    persistSession: true,\n    autoRefreshToken: true,\n  },\n});\n\n// Helper function to handle Supabase errors\nexport const handleSupabaseError = (error: any) => {\n  if (error instanceof Error) {\n    return error.message;\n  }\n  return 'An unexpected error occurred';\n};\n\n// Type guard for Supabase error\nexport const isSupabaseError = (error: any): error is { message: string; code: string } => {\n  return error && typeof error === 'object' && 'message' in error && 'code' in error;\n};\n\n// Chat history types\nexport interface ChatMessage {\n  id: string;\n  created_at: string;\n  role: 'user' | 'assistant' | 'system';\n  content: string;\n  conversation_id: string;\n  metadata?: {\n    agent_id?: string;\n    context?: string;\n    [key: string]: any;\n  };\n}\n\nexport interface Conversation {\n  id: string;\n  created_at: string;\n  updated_at: string;\n  title: string;\n  agent_id: string;\n  metadata?: {\n    [key: string]: any;\n  };\n}\n\n// Chat history functions\nexport const chatHistory = {\n  // Create a new conversation\n  async createConversation(title: string, agentId: string, metadata = {}) {\n    const { data: { user } } = await supabase.auth.getUser();\n    if (!user) throw new Error('User not authenticated');\n\n    const { data, error } = await supabase\n      .from('conversations')\n      .insert([\n        {\n          title,\n          agent_id: agentId,\n          user_id: user.id,\n          metadata,\n        },\n      ])\n      .select()\n      .single();\n\n    if (error) throw error;\n    return data;\n  },\n\n  // Add a message to a conversation\n  async addMessage(conversationId: string, message: Omit<ChatMessage, 'id' | 'created_at' | 'conversation_id'>) {\n    const { data: { user } } = await supabase.auth.getUser();\n    if (!user) throw new Error('User not authenticated');\n\n    const { data, error } = await supabase\n      .from('chat_messages')\n      .insert([\n        {\n          ...message,\n          conversation_id: conversationId,\n          user_id: user.id,\n        },\n      ])\n      .select()\n      .single();\n\n    if (error) throw error;\n    return data;\n  },\n\n  // Get conversation history\n  async getConversationHistory(conversationId: string) {\n    const { data, error } = await supabase\n      .from('chat_messages')\n      .select('*')\n      .eq('conversation_id', conversationId)\n      .order('created_at', { ascending: true });\n\n    if (error) throw error;\n    return data;\n  },\n\n  // Get recent conversations\n  async getRecentConversations(limit = 10) {\n    const { data, error } = await supabase\n      .from('conversations')\n      .select('*')\n      .order('updated_at', { ascending: false })\n      .limit(limit);\n\n    if (error) throw error;\n    return data;\n  },\n\n  // Update conversation title\n  async updateConversationTitle(conversationId: string, title: string) {\n    const { data, error } = await supabase\n      .from('conversations')\n      .update({ title })\n      .eq('id', conversationId)\n      .select()\n      .single();\n\n    if (error) throw error;\n    return data;\n  },\n\n  // Delete a conversation and its messages\n  async deleteConversation(conversationId: string) {\n    // First delete all messages\n    const { error: messagesError } = await supabase\n      .from('chat_messages')\n      .delete()\n      .eq('conversation_id', conversationId);\n\n    if (messagesError) throw messagesError;\n\n    // Then delete the conversation\n    const { error: conversationError } = await supabase\n      .from('conversations')\n      .delete()\n      .eq('id', conversationId);\n\n    if (conversationError) throw conversationError;\n  },\n}; ","usedDeprecatedRules":[]},{"filePath":"/home/vonj/Github/Nexus/src/lib/hooks/useActionCards.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":34,"column":55,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":34,"endColumn":58,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1119,1122],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1119,1122],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":36,"column":87,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":36,"endColumn":90,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1267,1270],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1267,1270],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { useEffect, useState } from 'react';\nimport { supabase } from '@/lib/core/supabase';\nimport type { ActionCardRecord } from '@/components/ai/ActionCard';\n\nexport function useActionCards(conversationId?: string) {\n  const [cards, setCards] = useState<ActionCardRecord[]>([]);\n  const [loading, setLoading] = useState<boolean>(false);\n\n  useEffect(() => {\n    if (!conversationId) return;\n\n    let ignore = false;\n    const fetchCards = async () => {\n      setLoading(true);\n      const { data, error } = await supabase\n        .from('ai_action_cards')\n        .select('*')\n        .eq('conversation_id', conversationId)\n        .order('created_at');\n      if (!ignore && !error) {\n        setCards(data || []);\n      }\n      setLoading(false);\n    };\n\n    fetchCards();\n\n    const channel = supabase.channel(`cards_${conversationId}`)\n      .on(\n        'postgres_changes',\n        { event: '*', schema: 'public', table: 'ai_action_cards', filter: `conversation_id=eq.${conversationId}` },\n        payload => {\n          if (payload.eventType === 'INSERT') {\n            setCards(prev => [...prev, payload.new as any]);\n          } else if (payload.eventType === 'UPDATE') {\n            setCards(prev => prev.map(c => (c.id === payload.new.id ? (payload.new as any) : c)));\n          } else if (payload.eventType === 'DELETE') {\n            setCards(prev => prev.filter(c => c.id !== payload.old.id));\n          }\n        }\n      )\n      .subscribe();\n\n    return () => {\n      ignore = true;\n      supabase.removeChannel(channel);\n    };\n  }, [conversationId]);\n\n  return { cards, loading };\n} ","usedDeprecatedRules":[]},{"filePath":"/home/vonj/Github/Nexus/src/lib/hooks/useAssessmentData.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/vonj/Github/Nexus/src/lib/hooks/useBusinessHealth.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":17,"column":42,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":17,"endColumn":45,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[592,595],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[592,595],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":40,"column":19,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":40,"endColumn":22,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1312,1315],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1312,1315],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":40,"column":52,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":40,"endColumn":55,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1345,1348],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1345,1348],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React from 'react';\nimport { supabase } from '@/lib/core/supabase';\nimport { useAuth } from '@/contexts/AuthContext';\n\nasync function fetchHealth() {\n  // The useAuth hook now ensures we have a valid session,\n  // and supabase-js automatically attaches the token.\n  // The manual token management can be removed for simplicity.\n  const { data, error } = await supabase.functions.invoke('business_health');\n\n  if (error) throw error;\n  return data;\n}\n\nexport function useBusinessHealth() {\n  const { session, loading: authLoading } = useAuth();\n  const [data, setData] = React.useState<any>(null);\n  const [error, setError] = React.useState<Error | null>(null);\n  const [loading, setLoading] = React.useState<boolean>(true);\n  const [initialLoadDone, setInitialLoadDone] = React.useState(false);\n\n  const load = React.useCallback(async () => {\n    if (!session) {\n      // Don't start loading if there's no session.\n      // When auth is done loading and there's still no session, stop loading.\n      if (!authLoading) {\n        setLoading(false);\n        setData(null);\n      }\n      return;\n    }\n\n    try {\n      setLoading(true);\n      setError(null);\n      const json = await fetchHealth();\n      if (json.error) throw new Error(json.error);\n      setData(json);\n    } catch (err) {\n      if ((err as any)?.status !== 401 && !(err as any)?.message?.includes('Auth session missing')) {\n        setError(err as Error);\n      } else {\n        setData(null);\n      }\n      console.error('Failed to fetch business health:', err);\n    } finally {\n      setLoading(false);\n    }\n  }, [session, authLoading]);\n\n  React.useEffect(() => {\n    // Only run the effect if auth has initialized and the initial load hasn't been triggered.\n    if (!authLoading && !initialLoadDone) {\n      load();\n      setInitialLoadDone(true);\n    }\n\n    // Set up polling, but only if there is a session.\n    if (session) {\n      const interval = setInterval(load, 30000);\n      return () => clearInterval(interval);\n    }\n  }, [load, authLoading, initialLoadDone, session]);\n\n  // The hook is loading if auth is loading or if data is being fetched.\n  return { health: data, isLoading: loading || authLoading, error };\n} ","usedDeprecatedRules":[]},{"filePath":"/home/vonj/Github/Nexus/src/lib/hooks/useDepartmentKPIs.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":55,"column":52,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":55,"endColumn":55,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1542,1545],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1542,1545],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { useEffect, useState } from 'react';\nimport { supabase } from '../core/supabase';\nimport { format } from 'date-fns';\nimport type { DepartmentId } from '../../constants/departments';\n\ninterface KpiSnapshot {\n  value: {\n    amount: number;\n    currency: string;\n    [key: string]: unknown;\n  };\n  captured_at: string;\n}\n\ntype MonthlyRevenue = {\n  name: string;\n  value: number;\n};\n\ninterface DepartmentKpiMetrics {\n  totalRevenue: number;\n  monthlyRevenue: MonthlyRevenue[];\n}\n\ninterface DepartmentKpiState {\n  loading: boolean;\n  error?: string;\n  metrics?: DepartmentKpiMetrics;\n}\n\n/**\n * useDepartmentKPIs\n * -----------------\n * Fetches KPI snapshot rows for a given department and aggregates them into\n * convenient metrics for the dashboard UI.\n * Currently supports the following metrics:\n *   • totalRevenue (sum of `paypal_revenue` KPI amounts)\n *   • monthlyRevenue (per-month sum for the last 12 months)\n *\n * NOTE: This hook expects the `ai_kpi_snapshots` table to contain rows with\n * `{ department_id, kpi_id, value: { amount }, captured_at }`.\n */\nexport function useDepartmentKPIs(departmentId: DepartmentId): DepartmentKpiState {\n  const [state, setState] = useState<DepartmentKpiState>({ loading: true });\n\n  useEffect(() => {\n    let cancelled = false;\n\n    async function fetchSnapshots() {\n      try {\n        // Pull the last 12 months of revenue KPI snapshots for the department.\n        const since = new Date();\n        since.setMonth(since.getMonth() - 12);\n\n        const { data, error } = await (supabase as any)\n          // `ai_kpi_snapshots` not yet in generated types – bypass types with `any` cast\n          .from('ai_kpi_snapshots')\n          .select('value, captured_at')\n          .eq('department_id', departmentId)\n          .eq('kpi_id', 'paypal_revenue')\n          .gte('captured_at', since.toISOString())\n          .order('captured_at', { ascending: true });\n\n        if (error) throw error;\n\n        const snapshots = (data ?? []) as KpiSnapshot[];\n\n        // Aggregate total revenue\n        const totalRevenue = snapshots.reduce((acc, row) => acc + (row.value?.amount ?? 0), 0);\n\n        // Group by YYYY-MM for monthly revenue\n        const monthMap = new Map<string, number>();\n        snapshots.forEach((row) => {\n          const monthKey = format(new Date(row.captured_at), 'MMM');\n          const prev = monthMap.get(monthKey) ?? 0;\n          monthMap.set(monthKey, prev + (row.value?.amount ?? 0));\n        });\n\n        const monthlyRevenue: MonthlyRevenue[] = Array.from(monthMap.entries()).map(([name, value]) => ({\n          name,\n          value: Math.round(value * 100) / 100,\n        }));\n\n        if (!cancelled) {\n          setState({ loading: false, metrics: { totalRevenue, monthlyRevenue } });\n        }\n      } catch (err: unknown) {\n        if (!cancelled) {\n          setState({ loading: false, error: (err as { message?: string }).message ?? 'Unknown error' });\n        }\n      }\n    }\n\n    const interval = setInterval(fetchSnapshots, 600000); // 10 min\n    fetchSnapshots();\n\n    return () => {\n      cancelled = true;\n      clearInterval(interval);\n    };\n  }, [departmentId]);\n\n  return state;\n} ","usedDeprecatedRules":[]},{"filePath":"/home/vonj/Github/Nexus/src/lib/hooks/useIntegrationSetup.ts","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'workflowConfig' is assigned a value but never used.","line":35,"column":9,"nodeType":null,"messageId":"unusedVar","endLine":35,"endColumn":23}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { useState, useEffect, useCallback, useRef } from 'react';\nimport type {\n  Integration,\n  SetupStep,\n  SetupData,\n  SetupAnalytics,\n  IntegrationError,\n  ValidationResult,\n  UseIntegrationSetupReturn,\n  WorkflowConfig,\n  ConnectionStatus\n} from '@/lib/types/integrations';\n\n/**\n * Default workflow configuration based on best practices\n */\nconst DEFAULT_CONFIG: WorkflowConfig = {\n  maxRetries: 3,\n  timeoutMs: 30000,\n  enableAnalytics: true,\n  enableUserFeedback: true,\n  skipOptionalSteps: false,\n  theme: 'auto',\n  locale: 'en-US'\n};\n\n/**\n * Custom hook for managing integration setup workflows\n * Implements the 6-step progressive workflow strategy with comprehensive analytics\n */\nexport const useIntegrationSetup = (\n  integration: Integration,\n  config: Partial<WorkflowConfig> = {}\n): UseIntegrationSetupReturn => {\n  const workflowConfig = { ...DEFAULT_CONFIG, ...config };\n  \n  // Core State\n  const [currentStep, setCurrentStep] = useState(0);\n  const [setupData, setSetupData] = useState<SetupData>({\n    integrationId: integration.id,\n    stepData: {},\n    permissions: {},\n    configuration: integration.defaultConfig || {},\n    metadata: {\n      startTime: new Date().toISOString(),\n      userAgent: navigator.userAgent,\n      retryCount: 0,\n      errors: []\n    }\n  });\n  \n  const [isConnecting, setIsConnecting] = useState(false);\n  const [connectionStatus, setConnectionStatus] = useState<ConnectionStatus>('idle');\n  const [errors, setErrors] = useState<IntegrationError[]>([]);\n  \n  // Analytics State\n  const [analytics, setAnalytics] = useState<SetupAnalytics>({\n    sessionId: `setup_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`,\n    integrationId: integration.id,\n    stepMetrics: [],\n    completionStatus: 'abandoned',\n    deviceInfo: {\n      userAgent: navigator.userAgent,\n      screenSize: `${window.innerWidth}x${window.innerHeight}`,\n      isMobile: window.innerWidth < 768\n    }\n  });\n  \n  // Refs for tracking\n  const stepStartTime = useRef<number>(Date.now());\n  const retryCount = useRef<number>(0);\n\n  /**\n   * Generate setup steps based on integration configuration\n   * Implements the 6-step progressive workflow\n   */\n  const generateSetupSteps = useCallback((): SetupStep[] => {\n    const steps: SetupStep[] = [\n      {\n        id: 'welcome',\n        title: 'Getting Started',\n        description: `Welcome! Let's connect your ${integration.name} account`,\n        type: 'welcome',\n        completed: false,\n        estimatedTime: '1 min',\n        helpText: 'This wizard will guide you through a secure connection process',\n        validation: { required: false }\n      }\n    ];\n\n    // Prerequisites (if defined)\n    if (integration.prerequisites && integration.prerequisites.length > 0) {\n      steps.push({\n        id: 'prerequisites',\n        title: 'Prerequisites Check',\n        description: 'Verify you have everything needed for setup',\n        type: 'prerequisites',\n        completed: false,\n        estimatedTime: '2 min',\n        helpText: 'Make sure you have the required access and information',\n        validation: { required: true }\n      });\n    }\n\n    // Authentication\n    steps.push({\n      id: 'auth',\n      title: integration.authType === 'oauth' ? 'Authorization' : 'Credentials',\n      description: integration.authType === 'oauth' \n        ? 'Authorize Nexus to access your account securely'\n        : 'Enter your API credentials or connection details',\n      type: 'auth',\n      completed: false,\n      estimatedTime: '3 min',\n      helpText: 'Your credentials are encrypted and stored securely',\n      troubleshootingUrl: integration.documentation,\n      validation: { required: true }\n    });\n\n    // Permissions\n    steps.push({\n      id: 'permissions',\n      title: 'Data Permissions',\n      description: 'Configure what data to sync and access levels',\n      type: 'permissions',\n      completed: false,\n      estimatedTime: '2 min',\n      helpText: 'You can change these settings anytime after setup',\n      validation: { required: true }\n    });\n\n    // Configuration (optional for easy integrations)\n    if (integration.difficulty !== 'easy') {\n      steps.push({\n        id: 'configuration',\n        title: 'Advanced Settings',\n        description: 'Customize sync frequency and data mapping',\n        type: 'configuration',\n        completed: false,\n        optional: true,\n        canSkip: true,\n        estimatedTime: '3 min',\n        helpText: 'Optional: Use defaults for quick setup',\n        validation: { required: false }\n      });\n    }\n\n    // Testing\n    steps.push({\n      id: 'testing',\n      title: 'Connection Test',\n      description: 'Verify everything is working correctly',\n      type: 'testing',\n      completed: false,\n      estimatedTime: '1 min',\n      helpText: 'We\\'ll test the connection and fetch sample data',\n      validation: { required: true }\n    });\n\n    // Success\n    steps.push({\n      id: 'success',\n      title: 'All Set!',\n      description: 'Your integration is ready to use',\n      type: 'success',\n      completed: false,\n      estimatedTime: '1 min',\n      validation: { required: false }\n    });\n\n    return steps;\n  }, [integration]);\n\n  const steps = generateSetupSteps();\n\n  /**\n   * Track step completion analytics\n   */\n  const trackStepCompletion = useCallback((stepId: string, success: boolean) => {\n    const endTime = Date.now();\n    \n    setAnalytics(prev => ({\n      ...prev,\n      stepMetrics: [\n        ...prev.stepMetrics.filter(m => m.stepId !== stepId),\n        {\n          stepId,\n          startTime: stepStartTime.current,\n          endTime,\n          completionRate: success ? 1 : 0,\n          errorCount: success ? 0 : 1,\n          retryCount: retryCount.current\n        }\n      ]\n    }));\n    \n    // Reset for next step\n    stepStartTime.current = Date.now();\n    retryCount.current = 0;\n  }, []);\n\n  /**\n   * Validate current step\n   */\n  const validateStep = useCallback(async (stepId: string): Promise<ValidationResult> => {\n    const step = steps.find(s => s.id === stepId);\n    if (!step) {\n      return { isValid: false, errors: ['Step not found'] };\n    }\n\n    const stepData = setupData.stepData[stepId] || {};\n    \n    // Basic validation based on step type\n    switch (step.type) {\n      case 'prerequisites':\n         \n        const missingPrereqs = integration.prerequisites?.filter(\n          prereq => !stepData[prereq]\n        ) || [];\n        return {\n          isValid: missingPrereqs.length === 0,\n          errors: missingPrereqs.map(p => `Missing prerequisite: ${p}`)\n        };\n        \n      case 'auth':\n        if (integration.authType === 'api_key') {\n           \n          const apiKey = stepData.apiKey || '';\n          const errors: string[] = [];\n          \n          if (!apiKey) errors.push('API key is required');\n          else if (apiKey.length < 10) errors.push('API key appears too short');\n          \n          return { isValid: errors.length === 0, errors };\n        }\n        return { isValid: !!stepData.authorized, errors: [] };\n        \n      case 'permissions':\n         \n        const selectedPermissions = Object.values(setupData.permissions).filter(Boolean);\n        return {\n          isValid: selectedPermissions.length > 0,\n          errors: selectedPermissions.length === 0 ? ['Select at least one permission'] : []\n        };\n        \n      default:\n        return { isValid: true, errors: [] };\n    }\n  }, [steps, setupData, integration]);\n\n  /**\n   * Move to next step with validation\n   */\n  const nextStep = useCallback(async () => {\n    const currentStepData = steps[currentStep];\n    \n    if (currentStepData.validation?.required) {\n      const validation = await validateStep(currentStepData.id);\n      if (!validation.isValid) {\n        const error: IntegrationError = {\n          code: 'VALIDATION_FAILED',\n          message: validation.errors.join(', '),\n          category: 'validation',\n          severity: 'medium',\n          retryable: true,\n          timestamp: new Date().toISOString()\n        };\n        setErrors(prev => [...prev, error]);\n        return;\n      }\n    }\n    \n    // Mark current step as completed and track analytics\n    trackStepCompletion(currentStepData.id, true);\n    \n    if (currentStep < steps.length - 1) {\n      setCurrentStep(prev => prev + 1);\n    }\n  }, [currentStep, steps, validateStep, trackStepCompletion]);\n\n  /**\n   * Move to previous step\n   */\n  const previousStep = useCallback(() => {\n    if (currentStep > 0) {\n      setCurrentStep(prev => prev - 1);\n    }\n  }, [currentStep]);\n\n  /**\n   * Skip optional step\n   */\n  const skipStep = useCallback(() => {\n    const currentStepData = steps[currentStep];\n    if (currentStepData.canSkip) {\n      trackStepCompletion(currentStepData.id, true);\n      nextStep();\n    }\n  }, [currentStep, steps, nextStep, trackStepCompletion]);\n\n  /**\n   * Retry current step\n   */\n  const retryStep = useCallback(() => {\n    retryCount.current += 1;\n    setErrors([]);\n    setConnectionStatus('idle');\n    \n    // Track retry in setup data\n    setSetupData(prev => ({\n      ...prev,\n      metadata: {\n        ...prev.metadata,\n        retryCount: prev.metadata.retryCount + 1\n      }\n    }));\n  }, []);\n\n  /**\n   * Reset entire setup\n   */\n  const resetSetup = useCallback(() => {\n    setCurrentStep(0);\n    setSetupData({\n      integrationId: integration.id,\n      stepData: {},\n      permissions: {},\n      configuration: integration.defaultConfig || {},\n      metadata: {\n        startTime: new Date().toISOString(),\n        userAgent: navigator.userAgent,\n        retryCount: 0,\n        errors: []\n      }\n    });\n    setErrors([]);\n    setConnectionStatus('idle');\n    stepStartTime.current = Date.now();\n    retryCount.current = 0;\n  }, [integration]);\n\n  /**\n   * Complete setup process\n   */\n  const completeSetup = useCallback(async () => {\n    setIsConnecting(true);\n    setConnectionStatus('testing');\n    \n    try {\n      // Simulate API call - replace with actual implementation\n      await new Promise(resolve => setTimeout(resolve, 2000));\n      \n      setConnectionStatus('success');\n      setAnalytics(prev => ({\n        ...prev,\n        completionStatus: 'completed',\n        totalDuration: Date.now() - new Date(setupData.metadata.startTime).getTime()\n      }));\n      \n      trackStepCompletion('success', true);\n      \n    } catch (error) {\n      const integrationError: IntegrationError = {\n        code: 'SETUP_FAILED',\n        message: error instanceof Error ? error.message : 'Setup failed',\n        category: 'server',\n        severity: 'high',\n        retryable: true,\n        timestamp: new Date().toISOString()\n      };\n      \n      setErrors(prev => [...prev, integrationError]);\n      setConnectionStatus('error');\n      setAnalytics(prev => ({ ...prev, completionStatus: 'error' }));\n    } finally {\n      setIsConnecting(false);\n    }\n  }, [setupData, trackStepCompletion]);\n\n  /**\n   * Calculate progress percentage\n   */\n  const getStepProgress = useCallback((): number => {\n    return Math.round(((currentStep + 1) / steps.length) * 100);\n  }, [currentStep, steps.length]);\n\n  /**\n   * Calculate estimated time remaining\n   */\n  const getEstimatedTimeRemaining = useCallback((): string => {\n    const remainingSteps = steps.slice(currentStep + 1);\n    const totalMinutes = remainingSteps.reduce((acc, step) => {\n      const minutes = parseInt(step.estimatedTime?.match(/\\d+/)?.[0] || '0');\n      return acc + minutes;\n    }, 0);\n    \n    if (totalMinutes === 0) return '0 min';\n    if (totalMinutes === 1) return '1 min';\n    return `${totalMinutes} min`;\n  }, [currentStep, steps]);\n\n  /**\n   * Check if can proceed to next step\n   */\n  const canProceed = useCallback((): boolean => {\n    const currentStepData = steps[currentStep];\n    if (!currentStepData) return false;\n    \n    // For required steps, we need validation\n    if (currentStepData.validation?.required) {\n      // This would need to be async in real implementation\n      return errors.length === 0;\n    }\n    \n    return true;\n  }, [currentStep, steps, errors]);\n\n  // Track step changes\n  useEffect(() => {\n    stepStartTime.current = Date.now();\n  }, [currentStep]);\n\n  return {\n    currentStep,\n    steps,\n    setupData,\n    isConnecting,\n    connectionStatus,\n    errors,\n    analytics,\n    \n    // Actions\n    nextStep,\n    previousStep,\n    skipStep,\n    retryStep,\n    validateStep,\n    resetSetup,\n    completeSetup,\n    \n    // Utilities\n    getStepProgress,\n    getEstimatedTimeRemaining,\n    canProceed\n  };\n}; ","usedDeprecatedRules":[]},{"filePath":"/home/vonj/Github/Nexus/src/lib/hooks/useIntegrations.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":9,"column":31,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":9,"endColumn":34,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[280,283],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[280,283],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":10,"column":28,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":10,"endColumn":31,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[313,316],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[313,316],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { useState, useCallback } from 'react';\nimport { useAuth } from '@/contexts/AuthContext';\nimport { useToast } from '@/components/ui/Toast';\nimport { supabase } from '@/lib/core/supabase';\n\ninterface Integration {\n  id: string;\n  type: string;\n  credentials: Record<string, any>;\n  settings: Record<string, any>;\n  userId: string;\n  createdAt: Date;\n  updatedAt: Date;\n}\n\ninterface UseIntegrationsReturn {\n  integrations: Integration[];\n  isLoading: boolean;\n  error: Error | null;\n  addIntegration: (integration: Omit<Integration, 'id' | 'createdAt' | 'updatedAt'>) => Promise<void>;\n  removeIntegration: (integrationId: string) => Promise<void>;\n  updateIntegration: (integrationId: string, updates: Partial<Integration>) => Promise<void>;\n  refreshIntegrations: () => Promise<void>;\n}\n\nexport const useIntegrations = (): UseIntegrationsReturn => {\n  const [integrations, setIntegrations] = useState<Integration[]>([]);\n  const [isLoading, setIsLoading] = useState(false);\n  const [error, setError] = useState<Error | null>(null);\n  const { user } = useAuth();\n  const { showToast } = useToast();\n\n  const refreshIntegrations = useCallback(async () => {\n    if (!user) return;\n\n    try {\n      setIsLoading(true);\n      setError(null);\n\n      const { data, error } = await supabase\n        .from('user_integrations')\n        .select(`*\n          ,integrations:integrations!inner(id,name,slug,auth_type,category)`)\n        .eq('user_id', user.id)\n        .order('updated_at', { ascending: false });\n\n      if (error) throw error;\n\n      setIntegrations(data ?? []);\n    } catch (err) {\n      setError(err instanceof Error ? err : new Error('An error occurred'));\n      showToast({\n        title: 'Error',\n        description: 'Failed to load integrations',\n        type: 'error'\n      });\n    } finally {\n      setIsLoading(false);\n    }\n  }, [user, showToast]);\n\n  const addIntegration = useCallback(async (integration: Omit<Integration, 'id' | 'createdAt' | 'updatedAt'>) => {\n    if (!user) return;\n\n    try {\n      setIsLoading(true);\n      setError(null);\n\n      const { data: newIntegration, error: insertError } = await supabase\n        .from('user_integrations')\n        .insert({\n          ...integration,\n          user_id: user.id,\n        })\n        .select()\n        .single();\n\n      if (insertError) throw insertError;\n\n      setIntegrations(prev => [...prev, newIntegration]);\n\n      showToast({\n        title: 'Success',\n        description: 'Integration added successfully',\n        type: 'success'\n      });\n    } catch (err) {\n      setError(err instanceof Error ? err : new Error('An error occurred'));\n      showToast({\n        title: 'Error',\n        description: 'Failed to add integration',\n        type: 'error'\n      });\n      throw err;\n    } finally {\n      setIsLoading(false);\n    }\n  }, [user, showToast]);\n\n  const removeIntegration = useCallback(async (integrationId: string) => {\n    if (!user) return;\n\n    try {\n      setIsLoading(true);\n      setError(null);\n\n      const { error: deleteError } = await supabase\n        .from('user_integrations')\n        .delete()\n        .eq('id', integrationId);\n\n      if (deleteError) throw deleteError;\n\n      setIntegrations(prev => prev.filter(integration => integration.id !== integrationId));\n\n      showToast({\n        title: 'Success',\n        description: 'Integration removed successfully',\n        type: 'success'\n      });\n    } catch (err) {\n      setError(err instanceof Error ? err : new Error('An error occurred'));\n      showToast({\n        title: 'Error',\n        description: 'Failed to remove integration',\n        type: 'error'\n      });\n      throw err;\n    } finally {\n      setIsLoading(false);\n    }\n  }, [user, showToast]);\n\n  const updateIntegration = useCallback(async (integrationId: string, updates: Partial<Integration>) => {\n    if (!user) return;\n\n    try {\n      setIsLoading(true);\n      setError(null);\n\n      const { data: updatedIntegration, error: updateError } = await supabase\n        .from('user_integrations')\n        .update({\n          ...updates,\n          updated_at: new Date().toISOString(),\n        })\n        .eq('id', integrationId)\n        .select()\n        .single();\n\n      if (updateError) throw updateError;\n\n      setIntegrations(prev => prev.map(integration => \n        integration.id === integrationId ? updatedIntegration : integration\n      ));\n\n      showToast({\n        title: 'Success',\n        description: 'Integration updated successfully',\n        type: 'success'\n      });\n    } catch (err) {\n      setError(err instanceof Error ? err : new Error('An error occurred'));\n      showToast({\n        title: 'Error',\n        description: 'Failed to update integration',\n        type: 'error'\n      });\n      throw err;\n    } finally {\n      setIsLoading(false);\n    }\n  }, [user, showToast]);\n\n  return {\n    integrations,\n    isLoading,\n    error,\n    addIntegration,\n    removeIntegration,\n    updateIntegration,\n    refreshIntegrations\n  };\n}; ","usedDeprecatedRules":[]},{"filePath":"/home/vonj/Github/Nexus/src/lib/hooks/usePayPalTransactions.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":34,"column":52,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":34,"endColumn":55,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1074,1077],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1074,1077],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":44,"column":74,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":44,"endColumn":77,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1425,1428],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1425,1428],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { useEffect, useState } from 'react';\nimport { supabase } from '../core/supabase';\n\nexport interface PayPalTransaction {\n  txn_id: string;\n  amount: number;\n  currency: string;\n  captured_at: string;\n}\n\ninterface UsePayPalTransactionsState {\n  loading: boolean;\n  error?: string;\n  transactions: PayPalTransaction[];\n}\n\n/**\n * usePayPalTransactions\n * ---------------------\n * Fetches the latest successful PayPal transactions from the `ai_kpi_snapshots` table.\n * Assumes rows were inserted by the `paypal_sync` Edge Function with the following shape:\n *   { department_id: 'finance', kpi_id: 'paypal_revenue', value: { amount, currency, txn_id }, captured_at }\n *\n * @param limit Number of transactions to fetch (default 10)\n */\nexport function usePayPalTransactions(limit = 10): UsePayPalTransactionsState {\n  const [state, setState] = useState<UsePayPalTransactionsState>({ loading: true, transactions: [] });\n\n  useEffect(() => {\n    let cancelled = false;\n\n    async function fetchTransactions() {\n      try {\n        const { data, error } = await (supabase as any)\n          .from('ai_kpi_snapshots')\n          .select('value, captured_at')\n          .eq('department_id', 'finance')\n          .eq('kpi_id', 'paypal_revenue')\n          .order('captured_at', { ascending: false })\n          .limit(limit);\n\n        if (error) throw error;\n\n        const transactions: PayPalTransaction[] = (data ?? []).map((row: any) => ({\n          txn_id: row.value?.txn_id,\n          amount: row.value?.amount,\n          currency: row.value?.currency,\n          captured_at: row.captured_at,\n        }));\n\n        if (!cancelled) setState({ loading: false, transactions });\n      } catch (err: unknown) {\n        if (!cancelled) setState({ loading: false, transactions: [], error: (err as { message?: string }).message ?? 'Unknown error' });\n      }\n    }\n\n    fetchTransactions();\n\n    return () => {\n      cancelled = true;\n    };\n  }, [limit]);\n\n  return state;\n} ","usedDeprecatedRules":[]},{"filePath":"/home/vonj/Github/Nexus/src/lib/hooks/useProductionChat.ts","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'useMemo' is defined but never used.","line":5,"column":52,"nodeType":null,"messageId":"unusedVar","endLine":5,"endColumn":59},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":47,"column":30,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":47,"endColumn":33,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1359,1362],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1359,1362],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\n * Production-optimized chat hook with quota management, caching, and performance optimizations\n */\n\nimport { useState, useEffect, useCallback, useRef, useMemo } from 'react';\nimport { useAuth } from '@/contexts/AuthContext';\nimport { supabase } from '../core/supabase';\nimport { quotaService } from '../services/quotaService';\nimport type { ChatMessage, ChatState, ChatActions } from '../types/chat';\nimport type { ChatQuotas } from '../types/licensing';\n\ninterface UseProductionChatOptions {\n  conversationId: string;\n  enableReactions?: boolean;\n  autoMarkAsRead?: boolean;\n  pageSize?: number;\n  enableCaching?: boolean;\n}\n\ninterface ProductionChatState extends ChatState {\n  quotas?: ChatQuotas;\n  usageStats?: {\n    messagesRemaining: number;\n    aiRequestsRemaining: number;\n    costToday: number;\n  };\n  isQuotaExceeded?: boolean;\n  retryAfter?: number;\n}\n\ninterface ProductionChatActions extends ChatActions {\n  loadMoreMessages: () => Promise<void>;\n  refreshQuotas: () => Promise<void>;\n  getUsageStats: () => Promise<void>;\n}\n\nconst messageCache = new Map<string, { messages: ChatMessage[]; timestamp: number }>();\nconst CACHE_TTL = 5 * 60 * 1000;\n\ntype ChatMessageType = ChatMessage['type'];\n\ntype ChatMessageRow = {\n  id: string;\n  role: 'user' | 'assistant' | 'system';\n  content: string;\n  created_at: string;\n  metadata: { [key: string]: any; type?: ChatMessageType };\n};\n\nexport function useProductionChat(options: UseProductionChatOptions): ProductionChatState & ProductionChatActions {\n  const {\n    conversationId,\n    enableReactions = true,\n    autoMarkAsRead = true,\n    pageSize = 50,\n    enableCaching = true,\n  } = options;\n\n  const { user } = useAuth();\n  const [currentPage, setCurrentPage] = useState(0);\n  const [hasMoreMessages, setHasMoreMessages] = useState(true);\n  const [quotas, setQuotas] = useState<ChatQuotas>();\n  const [usageStats, setUsageStats] = useState<ProductionChatState['usageStats']>();\n\n  const [state, setState] = useState<ProductionChatState>({\n    messages: [],\n    isLoading: false,\n    error: null,\n    currentConversationId: conversationId,\n    typingUsers: [],\n    streamingMessage: null,\n    isQuotaExceeded: false,\n    retryAfter: undefined,\n  });\n\n  const lastQuotaCheckRef = useRef<number>(0);\n\n  const getCachedMessages = useCallback((key: string): ChatMessage[] | null => {\n    if (!enableCaching) return null;\n    \n    const cached = messageCache.get(key);\n    if (!cached) return null;\n    \n    const isExpired = Date.now() - cached.timestamp > CACHE_TTL;\n    if (isExpired) {\n      messageCache.delete(key);\n      return null;\n    }\n    \n    return cached.messages;\n  }, [enableCaching]);\n\n  const setCachedMessages = useCallback((key: string, messages: ChatMessage[]) => {\n    if (!enableCaching) return;\n    messageCache.set(key, { messages, timestamp: Date.now() });\n  }, [enableCaching]);\n\n  const checkQuotas = useCallback(async () => {\n    if (!user?.id) return { allowed: false, reason: 'Not authenticated' };\n    \n    const now = Date.now();\n    if (now - lastQuotaCheckRef.current < 60000) {\n      return { allowed: !state.isQuotaExceeded };\n    }\n    lastQuotaCheckRef.current = now;\n\n    try {\n      const quotaCheck = await quotaService.canSendMessage(user.id);\n      \n      setState(prev => ({\n        ...prev,\n        quotas: quotaCheck.quotas,\n        isQuotaExceeded: !quotaCheck.allowed,\n        retryAfter: quotaCheck.retryAfter,\n      }));\n\n      if (quotaCheck.quotas) {\n        setQuotas(quotaCheck.quotas);\n      }\n\n      return quotaCheck;\n    } catch (error) {\n      console.error('Quota check failed:', error);\n      return { allowed: true };\n    }\n  }, [user?.id, state.isQuotaExceeded]);\n\n  const fetchMessages = useCallback(async (page: number = 0, skipCache: boolean = false) => {\n    if (!conversationId || !user?.id) return;\n\n    const key = `${conversationId}-${page}`;\n    \n    if (!skipCache) {\n      const cachedMessages = getCachedMessages(key);\n      if (cachedMessages) {\n        setState(prev => ({\n          ...prev,\n          messages: page === 0 ? cachedMessages : [...prev.messages, ...cachedMessages],\n          isLoading: false,\n        }));\n        return;\n      }\n    }\n\n    try {\n      setState(prev => ({ ...prev, isLoading: true, error: null }));\n\n      const { data, error } = await supabase\n        .from('chat_messages')\n        .select('*')\n        .eq('conversation_id', conversationId)\n        .order('created_at', { ascending: false })\n        .range(page * pageSize, (page + 1) * pageSize - 1);\n\n      if (error) throw error;\n\n      const formattedMessages: ChatMessage[] = (data || []).map((msg: ChatMessageRow) => ({\n        id: msg.id,\n        role: msg.role,\n        content: msg.content,\n        timestamp: new Date(msg.created_at),\n        status: 'delivered' as const,\n        type: msg.metadata?.type || 'text',\n        metadata: msg.metadata,\n      })).reverse();\n\n      setCachedMessages(key, formattedMessages);\n\n      setState(prev => ({\n        ...prev,\n        messages: page === 0 ? formattedMessages : [...prev.messages, ...formattedMessages],\n        isLoading: false,\n      }));\n\n      setHasMoreMessages(formattedMessages.length === pageSize);\n    } catch (error) {\n      setState(prev => ({\n        ...prev,\n        error: error instanceof Error ? error.message : 'Failed to fetch messages',\n        isLoading: false,\n      }));\n    }\n  }, [conversationId, user?.id, pageSize, getCachedMessages, setCachedMessages]);\n\n  const sendMessage = useCallback(async (content: string) => {\n    if (!content.trim() || !conversationId || !user?.id) return;\n\n    const quotaCheck = await checkQuotas();\n    if (!quotaCheck.allowed) {\n      setState(prev => ({\n        ...prev,\n        error: quotaCheck.reason || 'Quota exceeded',\n        isQuotaExceeded: true,\n        retryAfter: quotaCheck.retryAfter,\n      }));\n      return;\n    }\n\n    const tempId = `temp-${Date.now()}`;\n    const optimisticMessage: ChatMessage = {\n      id: tempId,\n      role: 'user',\n      content: content.trim(),\n      timestamp: new Date(),\n      status: 'sending',\n      type: 'text',\n      metadata: { attachments: [] },\n    };\n\n    setState(prev => ({\n      ...prev,\n      messages: [...prev.messages, optimisticMessage],\n      isLoading: true,\n      error: null,\n      isQuotaExceeded: false,\n    }));\n\n    try {\n      const { data: savedMessage, error: saveError } = await supabase\n        .from('chat_messages')\n        .insert([\n          {\n            conversation_id: conversationId,\n            user_id: user.id,\n            role: 'user',\n            content: content.trim(),\n            metadata: {},\n          },\n        ])\n        .select()\n        .single();\n\n      if (saveError) throw saveError;\n\n      await quotaService.recordUsage(user.id, 'message');\n\n      setState(prev => ({\n        ...prev,\n        messages: prev.messages.map(msg =>\n          msg.id === tempId\n            ? { ...msg, id: savedMessage.id, status: 'sent' }\n            : msg\n        ),\n      }));\n\n      messageCache.delete(`${conversationId}-0`);\n\n      // AI Response\n      /*\n      const { enhancedChatService } = await import('../chatContext');\n      const { executiveAgent } = await import('../agentRegistry');\n      \n      const result = await enhancedChatService.sendMessageWithContext(\n        conversationId,\n        content.trim(),\n        executiveAgent,\n        user.id,\n      );\n      */\n      \n      setState(prev => ({ ...prev, isLoading: false }));\n\n    } catch (error) {\n      console.error(\"Failed to send message:\", error);\n      setState(prev => ({\n        ...prev,\n        messages: prev.messages.map(msg =>\n          msg.id === tempId\n            ? { ...msg, status: 'error' }\n            : msg\n        ),\n        error: error instanceof Error ? error.message : 'Failed to send message',\n        isLoading: false,\n      }));\n    }\n  }, [conversationId, user?.id, checkQuotas]);\n\n  const loadMoreMessages = useCallback(async () => {\n    if (!hasMoreMessages || state.isLoading) return;\n    const nextPage = currentPage + 1;\n    setCurrentPage(nextPage);\n    await fetchMessages(nextPage);\n  }, [hasMoreMessages, state.isLoading, currentPage, fetchMessages]);\n\n  const refreshQuotas = useCallback(async () => {\n    lastQuotaCheckRef.current = 0;\n    await checkQuotas();\n  }, [checkQuotas]);\n\n  const getUsageStats = useCallback(async () => {\n    if (!user?.id) return;\n    try {\n      const stats = await quotaService.getUserUsageStats(user.id);\n      setUsageStats({\n        messagesRemaining: Math.max(0, stats.currentQuotas.max_messages_per_day - (stats.todayUsage.message_count || 0)),\n        aiRequestsRemaining: Math.max(0, stats.currentQuotas.max_ai_requests_per_hour - stats.todayUsage.ai_requests_made),\n        costToday: stats.todayUsage.estimated_cost_usd,\n      });\n    } catch (error) {\n      console.error('Failed to get usage stats:', error);\n    }\n  }, [user?.id]);\n\n  // Stub implementations\n  const retryMessage = useCallback(async (messageId: string) => {\n    console.log('Retry message:', messageId);\n  }, []);\n\n  const editMessage = useCallback(async (messageId: string, newContent: string) => {\n    console.log('Edit message:', messageId, newContent);\n  }, []);\n\n  const deleteMessage = useCallback(async (messageId: string) => {\n    console.log('Delete message:', messageId);\n  }, []);\n\n  const reactToMessage = useCallback(async (messageId: string, emoji: string) => {\n    if (!enableReactions) return;\n    console.log('React to message:', messageId, emoji);\n  }, [enableReactions]);\n\n  const markAsRead = useCallback(async (messageId: string) => {\n    if (!autoMarkAsRead) return;\n    console.log('Mark as read:', messageId);\n  }, [autoMarkAsRead]);\n\n  useEffect(() => {\n    fetchMessages(0);\n    checkQuotas();\n    getUsageStats();\n  }, [conversationId, fetchMessages, checkQuotas, getUsageStats]);\n\n  useEffect(() => {\n    const interval = setInterval(() => {\n      refreshQuotas();\n      getUsageStats();\n    }, 5 * 60 * 1000);\n    return () => clearInterval(interval);\n  }, [refreshQuotas, getUsageStats]);\n\n  return {\n    ...state,\n    quotas,\n    usageStats,\n    sendMessage,\n    retryMessage,\n    editMessage,\n    deleteMessage,\n    reactToMessage,\n    markAsRead,\n    loadMoreMessages,\n    refreshQuotas,\n    getUsageStats,\n  };\n}\n\n// Clean up old cache entries periodically\nsetInterval(() => {\n  const now = Date.now();\n  for (const [key, value] of messageCache.entries()) {\n    if (now - value.timestamp > CACHE_TTL) {\n      messageCache.delete(key);\n    }\n  }\n}, 10 * 60 * 1000); // Every 10 minutes ","usedDeprecatedRules":[]},{"filePath":"/home/vonj/Github/Nexus/src/lib/hooks/useProfessionalEmailAnalysis.ts","messages":[{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has a missing dependency: 'analyzeEmailDomains'. Either include it or remove the dependency array.","line":99,"column":6,"nodeType":"ArrayExpression","endLine":99,"endColumn":28,"suggestions":[{"desc":"Update the dependencies array to be: [user?.id, autoUpdate, analyzeEmailDomains]","fix":{"range":[3177,3199],"text":"[user?.id, autoUpdate, analyzeEmailDomains]"}}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\n * Professional Email Analysis Hook\n * Automatically analyzes user's email domains and updates business health KPI\n * Pillar: 1,2 - Automated business health assessment\n */\n\nimport { useEffect, useState } from 'react';\nimport { useAuth } from '@/contexts/AuthContext';\nimport { domainAnalysisService } from '@/lib/services/domainAnalysisService';\nimport { logger } from '@/lib/security/logger';\n\nexport interface ProfessionalEmailStatus {\n  isAnalyzed: boolean;\n  hasProfessionalEmail: boolean;\n  customDomainCount: number;\n  professionalScore: number;\n  primaryDomain?: string;\n  recommendations: string[];\n  shouldShowUpsell: boolean;\n  loading: boolean;\n  error: string | null;\n}\n\nexport const useProfessionalEmailAnalysis = (autoUpdate = true) => {\n  const { user } = useAuth();\n  const [status, setStatus] = useState<ProfessionalEmailStatus>({\n    isAnalyzed: false,\n    hasProfessionalEmail: false,\n    customDomainCount: 0,\n    professionalScore: 0,\n    recommendations: [],\n    shouldShowUpsell: false,\n    loading: false,\n    error: null\n  });\n\n  const analyzeEmailDomains = async (userId?: string) => {\n    const effectiveUserId = userId || user?.id;\n    if (!effectiveUserId) return;\n\n    try {\n      setStatus(prev => ({ ...prev, loading: true, error: null }));\n\n      // Analyze user's email domains\n      const analysis = await domainAnalysisService.analyzeUserEmailDomains(effectiveUserId);\n      \n      // Get upsell recommendation\n      const upsellResult = await domainAnalysisService.getMicrosoft365UpsellRecommendation(effectiveUserId);\n\n      // Determine if user has professional email\n      const hasProfessionalEmail = analysis.customDomainCount > 0 || \n                                   analysis.overallProfessionalScore >= 70;\n\n             // Update the KPI automatically if enabled\n       if (autoUpdate) {\n         await domainAnalysisService.updateProfessionalEmailKPI(\n           effectiveUserId, \n           user?.company_id || undefined\n         );\n       }\n\n      setStatus({\n        isAnalyzed: true,\n        hasProfessionalEmail,\n        customDomainCount: analysis.customDomainCount,\n        professionalScore: analysis.overallProfessionalScore,\n        primaryDomain: analysis.primaryDomain,\n        recommendations: analysis.recommendations,\n        shouldShowUpsell: upsellResult.shouldShowUpsell,\n        loading: false,\n        error: null\n      });\n\n      logger.info({ \n        userId: effectiveUserId,\n        hasProfessionalEmail,\n        customDomains: analysis.customDomainCount,\n        professionalScore: analysis.overallProfessionalScore,\n        shouldShowUpsell: upsellResult.shouldShowUpsell\n      }, 'Professional email analysis completed');\n\n    } catch (error) {\n      const errorMessage = error instanceof Error ? error.message : 'Unknown error';\n      setStatus(prev => ({ \n        ...prev, \n        loading: false, \n        error: errorMessage \n      }));\n      \n      logger.error({ error, userId: effectiveUserId }, 'Error analyzing professional email');\n    }\n  };\n\n  // Auto-analyze on mount and when user changes\n  useEffect(() => {\n    if (user?.id && autoUpdate) {\n      analyzeEmailDomains();\n    }\n  }, [user?.id, autoUpdate]);\n\n  return {\n    ...status,\n    analyzeEmailDomains,\n    refresh: () => analyzeEmailDomains()\n  };\n}; ","usedDeprecatedRules":[]},{"filePath":"/home/vonj/Github/Nexus/src/lib/hooks/useRealtimeChat.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/vonj/Github/Nexus/src/lib/hooks/useSecondBrain.ts","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'useMemo' is defined but never used.","line":7,"column":44,"nodeType":null,"messageId":"unusedVar","endLine":7,"endColumn":51},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'SecondBrainContext' is defined but never used.","line":12,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":12,"endColumn":21},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'ActionSuggestion' is defined but never used.","line":19,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":19,"endColumn":19},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'recentEvents' is assigned a value but never used.","line":29,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":29,"endColumn":22},{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has a missing dependency: 'loadIntegrationData'. Either include it or remove the dependency array.","line":36,"column":6,"nodeType":"ArrayExpression","endLine":36,"endColumn":8,"suggestions":[{"desc":"Update the dependencies array to be: [loadIntegrationData]","fix":{"range":[1409,1411],"text":"[loadIntegrationData]"}}]},{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has missing dependencies: 'generateContextualInsights', 'generateProgressiveActions', and 'identifyAutomationOpportunities'. Either include them or remove the dependency array.","line":45,"column":6,"nodeType":"ArrayExpression","endLine":45,"endColumn":44,"suggestions":[{"desc":"Update the dependencies array to be: [pageId, userProfile, integrationData, generateContextualInsights, generateProgressiveActions, identifyAutomationOpportunities]","fix":{"range":[1668,1706],"text":"[pageId, userProfile, integrationData, generateContextualInsights, generateProgressiveActions, identifyAutomationOpportunities]"}}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":145,"column":43,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":145,"endColumn":46,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[4889,4892],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[4889,4892],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":168,"column":43,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":168,"endColumn":46,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[5590,5593],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[5590,5593],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":191,"column":43,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":191,"endColumn":46,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[6276,6279],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[6276,6279],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":228,"column":42,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":228,"endColumn":45,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[7292,7295],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[7292,7295],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":10,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\n * Second Brain Hook - Core Intelligence System for Nexus\n * Provides contextual insights, progressive actions, and automation opportunities\n * on every page based on user behavior and integration data\n */\n\nimport { useState, useEffect, useCallback, useMemo } from 'react';\nimport { googleAnalyticsService } from '@/lib/services/googleAnalyticsService';\nimport { callEdgeFunction } from '@/lib/services/supabaseFunctions';\nimport type { \n  UseSecondBrainReturn,\n  SecondBrainContext,\n  BusinessInsight,\n  ProgressiveAction,\n  AutomationOpportunity,\n  LearningEvent,\n  UserProfile,\n  IntegrationDataPoint,\n  ActionSuggestion\n} from '@/lib/types/learning-system';\n\nexport function useSecondBrain(pageId: string): UseSecondBrainReturn {\n  const [userProfile, setUserProfile] = useState<UserProfile | null>(null);\n  const [insights, setInsights] = useState<BusinessInsight[]>([]);\n  const [actions, setActions] = useState<ProgressiveAction[]>([]);\n  const [automationOpportunities, setAutomationOpportunities] = useState<AutomationOpportunity[]>([]);\n  const [isLearning, setIsLearning] = useState(false);\n  const [integrationData, setIntegrationData] = useState<IntegrationDataPoint[]>([]);\n  const [recentEvents, setRecentEvents] = useState<LearningEvent[]>([]);\n\n  // Load user profile and context on mount\n  useEffect(() => {\n    loadUserProfile();\n    loadIntegrationData();\n    loadRecentEvents();\n  }, []);\n\n  // Generate insights and actions when context changes\n  useEffect(() => {\n    if (userProfile && integrationData.length > 0) {\n      generateContextualInsights();\n      generateProgressiveActions();\n      identifyAutomationOpportunities();\n    }\n  }, [pageId, userProfile, integrationData]);\n\n  const loadUserProfile = async () => {\n    try {\n      // Fetch the current authenticated user\n      const { data: { user }, error: userError } = await import('@/lib/supabase').then(m => m.supabase.auth.getUser());\n      if (userError) throw userError;\n      if (!user) throw new Error('User not authenticated');\n\n      // Fetch the user profile from Supabase\n      const { data, error } = await import('@/lib/supabase').then(m => m.supabase\n        .from('user_profiles')\n        .select('*')\n        .eq('id', user.id)\n        .single()\n      );\n      if (error) throw error;\n      if (data) {\n        setUserProfile(data as UserProfile);\n      } else {\n        setUserProfile(null);\n      }\n    } catch (error) {\n      console.error('Failed to load user profile:', error);\n      setUserProfile(null);\n    }\n  };\n\n  const loadIntegrationData = async () => {\n    try {\n      const integrationData: IntegrationDataPoint[] = [];\n\n      // Load Google Analytics data\n      const analyticsData = await loadGoogleAnalyticsData();\n      if (analyticsData) {\n        integrationData.push(analyticsData);\n      }\n\n      // Load Slack data\n      const slackData = await loadSlackData();\n      if (slackData) {\n        integrationData.push(slackData);\n      }\n\n      // Load HubSpot data\n      const hubspotData = await loadHubSpotData();\n      if (hubspotData) {\n        integrationData.push(hubspotData);\n      }\n\n      // Load Stripe data\n      const stripeData = await loadStripeData();\n      if (stripeData) {\n        integrationData.push(stripeData);\n      }\n\n      setIntegrationData(integrationData);\n    } catch (error) {\n      console.error('Failed to load integration data:', error);\n      // Fallback to empty array\n      setIntegrationData([]);\n    }\n  };\n\n  const loadGoogleAnalyticsData = async (): Promise<IntegrationDataPoint | null> => {\n    try {\n      // Use the Google Analytics service directly\n      if (!googleAnalyticsService.isAuthenticated()) {\n        return null;\n      }\n\n      const data = await googleAnalyticsService.getAnalyticsData('last7Days');\n      return {\n        source: 'google-analytics',\n        type: 'metric',\n        value: {\n          sessions: parseInt(data.overview.sessions.value.replace(/[^\\d]/g, '')) || 0,\n          pageviews: parseInt(data.overview.pageViews.value.replace(/[^\\d]/g, '')) || 0,\n          bounceRate: parseFloat(data.overview.bounceRate.value.replace('%', '')) || 0,\n          avgSessionDuration: data.overview.avgSessionDuration.value || '0:00',\n          totalUsers: parseInt(data.overview.totalUsers.value.replace(/[^\\d]/g, '')) || 0,\n          realTimeUsers: data.realTimeUsers || 0\n        },\n        timestamp: new Date().toISOString(),\n        metadata: { \n          period: '7d', \n          reportType: 'overview',\n          topPages: data.topPages.slice(0, 3),\n          topSources: data.topSources.slice(0, 3)\n        },\n        relevanceScore: 0.9\n      };\n    } catch (error) {\n      console.warn('Failed to load Google Analytics data:', error);\n      return null;\n    }\n  };\n\n  const loadSlackData = async (): Promise<IntegrationDataPoint | null> => {\n    try {\n      const data = await callEdgeFunction<any>('slack_metrics');\n\n      return {\n        source: 'slack',\n        type: 'activity',\n        value: {\n          messagesCount: data?.messagesCount || 0,\n          activeUsers: data?.activeUsers || 0,\n          channels: data?.channels || 0,\n          responseTime: data?.avgResponseTime || 0,\n        },\n        timestamp: new Date().toISOString(),\n        metadata: { period: '24h', workspaceId: data?.workspaceId },\n        relevanceScore: 0.7,\n      };\n    } catch (error) {\n      console.warn('Failed to load Slack data:', error);\n      return null;\n    }\n  };\n\n  const loadHubSpotData = async (): Promise<IntegrationDataPoint | null> => {\n    try {\n      const data = await callEdgeFunction<any>('hubspot_metrics');\n\n      return {\n        source: 'hubspot',\n        type: 'crm',\n        value: {\n          newContacts: data?.newContacts || 0,\n          deals: data?.deals || 0,\n          dealValue: data?.totalDealValue || 0,\n          conversionRate: data?.conversionRate || 0,\n        },\n        timestamp: new Date().toISOString(),\n        metadata: { period: '7d', portalId: data?.portalId },\n        relevanceScore: 0.8,\n      };\n    } catch (error) {\n      console.warn('Failed to load HubSpot data:', error);\n      return null;\n    }\n  };\n\n  const loadStripeData = async (): Promise<IntegrationDataPoint | null> => {\n    try {\n      const data = await callEdgeFunction<any>('stripe_metrics');\n\n      return {\n        source: 'stripe',\n        type: 'financial',\n        value: {\n          revenue: data?.revenue || 0,\n          transactions: data?.transactions || 0,\n          customers: data?.customers || 0,\n          mrr: data?.mrr || 0,\n        },\n        timestamp: new Date().toISOString(),\n        metadata: { period: '30d', currency: data?.currency || 'usd' },\n        relevanceScore: 0.95,\n      };\n    } catch (error) {\n      console.warn('Failed to load Stripe data:', error);\n      return null;\n    }\n  };\n\n  const loadRecentEvents = async () => {\n    try {\n      // Load events from Supabase analytics tables\n      const response = await fetch('/api/analytics/events', {\n        method: 'GET',\n        headers: { 'Content-Type': 'application/json' },\n      });\n\n      if (!response.ok) {\n        setRecentEvents([]);\n        return;\n      }\n\n      const data = await response.json();\n      const events = data.events || [];\n      \n      setRecentEvents(events.map((event: any) => ({\n        id: event.id,\n        type: event.event_type || 'user_action',\n        description: event.description || event.event_name,\n        timestamp: event.created_at || event.timestamp,\n        metadata: event.metadata || {},\n        impact: event.impact || 'low',\n        source: event.source || 'system'\n      })));\n    } catch (error) {\n      console.error('Failed to load recent events:', error);\n      setRecentEvents([]);\n    }\n  };\n\n  const generateContextualInsights = useCallback(() => {\n    if (!userProfile || integrationData.length === 0) return;\n\n    setIsLearning(true);\n    \n    const newInsights: BusinessInsight[] = [];\n\n    // Example: Website traffic insight\n    const analyticsData = integrationData.find(d => d.source === 'google-analytics');\n    if (analyticsData && pageId === 'dashboard') {\n      const metrics = analyticsData.value;\n      if (metrics.bounceRate > 0.5) {\n        newInsights.push({\n          id: `insight-${Date.now()}-bounce-rate`,\n          type: 'risk',\n          priority: 'high',\n          category: 'Website Performance',\n          title: 'High Bounce Rate Detected',\n          description: `Your website bounce rate is ${(metrics.bounceRate * 100).toFixed(1)}%, which is above the recommended 40% threshold.`,\n          dataSource: ['google-analytics'],\n          metrics: {\n            impact: 8,\n            confidence: 0.9,\n            timeToValue: 30,\n            effort: 3\n          },\n          suggestedActions: [\n            {\n              id: 'action-improve-landing-pages',\n              type: 'guided_workflow',\n              title: 'Optimize Landing Pages',\n              description: 'Review and improve your top landing pages to reduce bounce rate',\n              estimatedTime: 45,\n              difficulty: 'medium',\n              prerequisites: ['Google Analytics access'],\n              steps: [\n                {\n                  id: 'step-1',\n                  title: 'Analyze Top Landing Pages',\n                  description: 'Identify pages with highest bounce rates',\n                  type: 'navigation',\n                  automatable: false\n                },\n                {\n                  id: 'step-2',\n                  title: 'Review Page Speed',\n                  description: 'Check page load times using PageSpeed Insights',\n                  type: 'external_action',\n                  automatable: true\n                }\n              ],\n              expectedOutcome: 'Reduce bounce rate by 10-15%',\n              trackingMetrics: ['bounce_rate', 'page_speed', 'user_engagement']\n            }\n          ],\n          automationPotential: {\n            id: 'auto-page-speed-monitoring',\n            title: 'Automated Page Speed Monitoring',\n            description: 'Set up automated alerts when page speed drops below threshold',\n            type: 'trigger_based',\n            complexity: 'simple',\n            estimatedSetupTime: 15,\n            estimatedTimeSavings: 60,\n            requiredIntegrations: ['google-analytics', 'pagespeed-insights'],\n            workflow: {\n              trigger: {\n                type: 'threshold',\n                config: { metric: 'page_speed', threshold: 3000 },\n                description: 'When page load time exceeds 3 seconds'\n              },\n              actions: [\n                {\n                  type: 'notification',\n                  config: { channel: 'slack', message: 'Page speed alert triggered' },\n                  description: 'Send notification to development team'\n                }\n              ]\n            },\n            riskLevel: 'low',\n            testingRequired: false\n          },\n          context: {\n            pageRelevance: ['dashboard', 'analytics', 'website'],\n            triggerConditions: { bounceRate: { operator: 'greater_than', value: 0.4 } },\n            historicalData: []\n          },\n          createdAt: new Date().toISOString(),\n          status: 'active'\n        });\n      }\n    }\n\n    // Example: Team collaboration insight\n    const slackData = integrationData.find(d => d.source === 'slack');\n    if (slackData && (pageId === 'dashboard' || pageId === 'team')) {\n      const activity = slackData.value;\n      if (activity.messagesCount < 100) {\n        newInsights.push({\n          id: `insight-${Date.now()}-low-communication`,\n          type: 'opportunity',\n          priority: 'medium',\n          category: 'Team Collaboration',\n          title: 'Low Team Communication Detected',\n          description: `Only ${activity.messagesCount} messages in the last 24 hours. Consider ways to improve team communication.`,\n          dataSource: ['slack'],\n          metrics: {\n            impact: 6,\n            confidence: 0.7,\n            timeToValue: 15,\n            effort: 2\n          },\n          suggestedActions: [\n            {\n              id: 'action-daily-standup',\n              type: 'automation',\n              title: 'Schedule Daily Standup Reminders',\n              description: 'Set up automated daily standup reminders in Slack',\n              estimatedTime: 10,\n              difficulty: 'easy',\n              prerequisites: ['Slack admin access'],\n              steps: [\n                {\n                  id: 'step-1',\n                  title: 'Create Standup Bot',\n                  description: 'Set up a bot to send daily standup reminders',\n                  type: 'api_call',\n                  automatable: true\n                }\n              ],\n              expectedOutcome: 'Increase daily team communication by 50%',\n              trackingMetrics: ['daily_messages', 'standup_participation']\n            }\n          ],\n          automationPotential: null,\n          context: {\n            pageRelevance: ['dashboard', 'team', 'communication'],\n            triggerConditions: { dailyMessages: { operator: 'less_than', value: 100 } },\n            historicalData: []\n          },\n          createdAt: new Date().toISOString(),\n          status: 'active'\n        });\n      }\n    }\n\n    setInsights(newInsights);\n    setIsLearning(false);\n  }, [pageId, userProfile, integrationData]);\n\n  const generateProgressiveActions = useCallback(() => {\n    if (!userProfile) return;\n\n    const newActions: ProgressiveAction[] = [];\n\n    // Page-specific progressive actions\n    if (pageId === 'dashboard') {\n      newActions.push({\n        id: 'action-connect-integration',\n        pageId,\n        position: 'header',\n        trigger: {\n          type: 'page_load',\n          conditions: { integrationCount: { operator: 'less_than', value: 3 } }\n        },\n        action: {\n          id: 'quick-connect-integration',\n          type: 'quick_action',\n          title: 'Connect Your First Integration',\n          description: 'Connect Google Analytics to start seeing real insights',\n          estimatedTime: 5,\n          difficulty: 'easy',\n          prerequisites: [],\n          steps: [\n            {\n              id: 'step-1',\n              title: 'Go to Integrations',\n              description: 'Navigate to the integrations page',\n              type: 'navigation',\n              automatable: false\n            }\n          ],\n          expectedOutcome: 'Access to real business data and insights',\n          trackingMetrics: ['integration_connected', 'data_points_available']\n        },\n        displayConfig: {\n          style: 'button',\n          variant: 'primary',\n          dismissible: true,\n          persistent: false\n        },\n        analytics: {\n          impressions: 0,\n          clicks: 0,\n          completions: 0,\n          dismissals: 0,\n          avgTimeToAction: 0\n        }\n      });\n    }\n\n    if (pageId === 'integrations') {\n      newActions.push({\n        id: 'action-automation-suggestion',\n        pageId,\n        position: 'contextual',\n        trigger: {\n          type: 'user_behavior',\n          conditions: { connectedIntegrations: { operator: 'greater_than', value: 2 } }\n        },\n        action: {\n          id: 'suggest-automation',\n          type: 'guided_workflow',\n          title: 'Create Your First Automation',\n          description: 'You have enough integrations to create powerful automations',\n          estimatedTime: 15,\n          difficulty: 'medium',\n          prerequisites: ['Multiple integrations connected'],\n          steps: [\n            {\n              id: 'step-1',\n              title: 'Choose Automation Type',\n              description: 'Select from suggested automation templates',\n              type: 'form_fill',\n              automatable: false\n            }\n          ],\n          expectedOutcome: 'Save 2+ hours per week on manual tasks',\n          trackingMetrics: ['automation_created', 'time_saved']\n        },\n        displayConfig: {\n          style: 'card',\n          variant: 'accent',\n          dismissible: true,\n          persistent: true\n        },\n        analytics: {\n          impressions: 0,\n          clicks: 0,\n          completions: 0,\n          dismissals: 0,\n          avgTimeToAction: 0\n        }\n      });\n    }\n\n    setActions(newActions);\n  }, [pageId, userProfile]);\n\n  const identifyAutomationOpportunities = useCallback(() => {\n    if (!userProfile || integrationData.length < 2) return;\n\n    const opportunities: AutomationOpportunity[] = [\n      {\n        id: 'auto-weekly-report',\n        title: 'Automated Weekly Performance Report',\n        description: 'Generate and send weekly performance reports automatically',\n        type: 'scheduled_task',\n        complexity: 'moderate',\n        estimatedSetupTime: 20,\n        estimatedTimeSavings: 120,\n        requiredIntegrations: ['google-analytics', 'slack'],\n        workflow: {\n          trigger: {\n            type: 'schedule',\n            config: { cron: '0 9 * * MON' },\n            description: 'Every Monday at 9 AM'\n          },\n          actions: [\n            {\n              type: 'api_call',\n              config: { service: 'google-analytics', endpoint: 'weekly-summary' },\n              description: 'Fetch weekly analytics data'\n            },\n            {\n              type: 'report_generation',\n              config: { template: 'weekly-performance', format: 'pdf' },\n              description: 'Generate formatted report'\n            },\n            {\n              type: 'notification',\n              config: { channel: 'slack', mentions: ['@leadership'] },\n              description: 'Send report to leadership team'\n            }\n          ]\n        },\n        riskLevel: 'low',\n        testingRequired: true\n      }\n    ];\n\n    setAutomationOpportunities(opportunities);\n  }, [userProfile, integrationData]);\n\n  const recordEvent = useCallback(async (event: Omit<LearningEvent, 'id' | 'userId'>) => {\n    if (!userProfile) return;\n\n    const fullEvent: LearningEvent = {\n      id: `event-${Date.now()}-${Math.random().toString(36).substr(2, 9)}`,\n      userId: userProfile.id,\n      ...event\n    };\n\n    setRecentEvents(prev => [fullEvent, ...prev.slice(0, 99)]); // Keep last 100 events\n    \n    // Send to analytics service\n    try {\n      await fetch('/api/analytics/events', {\n        method: 'POST',\n        headers: { 'Content-Type': 'application/json' },\n        body: JSON.stringify(fullEvent)\n      });\n    } catch (error) {\n      console.warn('Failed to send event to analytics service:', error);\n    }\n    \n    console.log('Learning event recorded:', fullEvent);\n  }, [userProfile]);\n\n  const dismissInsight = useCallback((insightId: string) => {\n    setInsights(prev => prev.map(insight => \n      insight.id === insightId \n        ? { ...insight, status: 'dismissed' as const }\n        : insight\n    ));\n\n    recordEvent({\n      type: 'insight_dismissed',\n      data: { insightId },\n      context: {\n        page: pageId,\n        sessionId: 'current-session',\n        timestamp: new Date().toISOString(),\n        userAgent: navigator.userAgent\n      }\n    });\n  }, [pageId, recordEvent]);\n\n  const executeAction = useCallback(async (actionId: string) => {\n    const action = actions.find(a => a.action.id === actionId);\n    if (!action) return;\n\n    recordEvent({\n      type: 'action_taken',\n      data: { actionId, actionType: action.action.type },\n      context: {\n        page: pageId,\n        sessionId: 'current-session',\n        timestamp: new Date().toISOString(),\n        userAgent: navigator.userAgent\n      }\n    });\n\n    // Execute action via API\n    try {\n      const response = await fetch('/api/ai/execute-action', {\n        method: 'POST',\n        headers: { 'Content-Type': 'application/json' },\n        body: JSON.stringify({\n          actionId,\n          actionType: action.action.type,\n          actionData: action.action\n        })\n      });\n\n      if (!response.ok) {\n        throw new Error('Action execution failed');\n      }\n\n      const result = await response.json();\n      console.log('Action executed successfully:', result);\n    } catch (error) {\n      console.error('Failed to execute action:', error);\n    }\n  }, [actions, pageId, recordEvent]);\n\n  const createAutomation = useCallback(async (opportunityId: string) => {\n    const opportunity = automationOpportunities.find(o => o.id === opportunityId);\n    if (!opportunity) return;\n\n    recordEvent({\n      type: 'automation_created',\n      data: { opportunityId, automationType: opportunity.type },\n      context: {\n        page: pageId,\n        sessionId: 'current-session',\n        timestamp: new Date().toISOString(),\n        userAgent: navigator.userAgent\n      }\n    });\n\n    // Create automation via API\n    try {\n      const response = await fetch('/api/automations/create', {\n        method: 'POST',\n        headers: { 'Content-Type': 'application/json' },\n        body: JSON.stringify({\n          opportunityId,\n          automationType: opportunity.type,\n          workflow: opportunity.workflow,\n          metadata: {\n            estimatedSetupTime: opportunity.estimatedSetupTime,\n            estimatedTimeSavings: opportunity.estimatedTimeSavings,\n            requiredIntegrations: opportunity.requiredIntegrations\n          }\n        })\n      });\n\n      if (!response.ok) {\n        throw new Error('Automation creation failed');\n      }\n\n      const result = await response.json();\n      console.log('Automation created successfully:', result);\n    } catch (error) {\n      console.error('Failed to create automation:', error);\n    }\n  }, [automationOpportunities, pageId, recordEvent]);\n\n  const updatePreferences = useCallback(async (preferences: Partial<UserProfile['preferences']>) => {\n    if (!userProfile) return;\n\n    setUserProfile(prev => prev ? {\n      ...prev,\n      preferences: { ...prev.preferences, ...preferences }\n    } : null);\n\n    // Persist preferences to backend\n    try {\n      await fetch('/api/user/preferences', {\n        method: 'PATCH',\n        headers: { 'Content-Type': 'application/json' },\n        body: JSON.stringify({ preferences })\n      });\n    } catch (error) {\n      console.warn('Failed to persist preferences to backend:', error);\n    }\n\n    recordEvent({\n      type: 'action_taken',\n      data: { action: 'preferences_updated', preferences },\n      context: {\n        page: pageId,\n        sessionId: 'current-session',\n        timestamp: new Date().toISOString(),\n        userAgent: navigator.userAgent\n      }\n    });\n  }, [userProfile, pageId, recordEvent]);\n\n  return {\n    insights: insights.filter(i => i.status === 'active'),\n    actions,\n    automationOpportunities,\n    isLearning,\n    recordEvent,\n    dismissInsight,\n    executeAction,\n    createAutomation,\n    updatePreferences\n  };\n} ","usedDeprecatedRules":[]},{"filePath":"/home/vonj/Github/Nexus/src/lib/hooks/useUnifiedAuth.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/vonj/Github/Nexus/src/lib/i18n.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/vonj/Github/Nexus/src/lib/integrations/apiDocAnalyzer.ts","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'Integration' is defined but never used.","line":8,"column":15,"nodeType":null,"messageId":"unusedVar","endLine":8,"endColumn":26},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'UserIntegration' is defined but never used.","line":8,"column":28,"nodeType":null,"messageId":"unusedVar","endLine":8,"endColumn":43},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":101,"column":34,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":101,"endColumn":37,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2528,2531],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2528,2531],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":130,"column":75,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":130,"endColumn":78,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3460,3463],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3460,3463],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":152,"column":39,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":152,"endColumn":42,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[4184,4187],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[4184,4187],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":168,"column":37,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":168,"endColumn":40,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[4821,4824],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[4821,4824],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":181,"column":45,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":181,"endColumn":48,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[5192,5195],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[5192,5195],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":185,"column":104,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":185,"endColumn":107,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[5422,5425],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[5422,5425],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":197,"column":56,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":197,"endColumn":59,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[5739,5742],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[5739,5742],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":198,"column":78,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":198,"endColumn":81,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[5853,5856],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[5853,5856],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":201,"column":123,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":201,"endColumn":126,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[6055,6058],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[6055,6058],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":215,"column":35,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":215,"endColumn":38,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[6447,6450],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[6447,6450],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":221,"column":119,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":221,"endColumn":122,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[6711,6714],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[6711,6714],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'method' is defined but never used.","line":270,"column":41,"nodeType":null,"messageId":"unusedVar","endLine":270,"endColumn":47},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'apiDoc' is defined but never used.","line":334,"column":55,"nodeType":null,"messageId":"unusedVar","endLine":334,"endColumn":61},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":457,"column":42,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":457,"endColumn":45,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[14354,14357],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[14354,14357],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'patterns' is defined but never used.","line":607,"column":32,"nodeType":null,"messageId":"unusedVar","endLine":607,"endColumn":40},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'cleanPathParts' is assigned a value but never used.","line":858,"column":11,"nodeType":null,"messageId":"unusedVar","endLine":858,"endColumn":25}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":18,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\n * API Documentation Analyzer\n * \n * This service parses API documentation (OpenAPI/Swagger and other formats)\n * and generates integration models and connectors for Nexus.\n */\n\nimport type { Integration, UserIntegration } from '../../lib/types/userProfile';\n\n// Types for API documentation analysis\nexport interface APIEndpoint {\n  path: string;\n  method: 'GET' | 'POST' | 'PUT' | 'DELETE' | 'PATCH';\n  description: string;\n  parameters?: APIParameter[];\n  requestBody?: APIRequestBody;\n  responses: Record<string, APIResponse>;\n  tags?: string[];\n  security?: string[];\n}\n\nexport interface APIParameter {\n  name: string;\n  in: 'query' | 'path' | 'header' | 'cookie';\n  required: boolean;\n  schema: APISchema;\n  description?: string;\n}\n\nexport interface APIRequestBody {\n  description?: string;\n  required: boolean;\n  content: Record<string, { schema: APISchema }>;\n}\n\nexport interface APIResponse {\n  description: string;\n  content?: Record<string, { schema: APISchema }>;\n}\n\nexport interface APISchema {\n  type: 'string' | 'number' | 'integer' | 'boolean' | 'array' | 'object';\n  format?: string;\n  properties?: Record<string, APISchema>;\n  items?: APISchema;\n  required?: string[];\n  enum?: (string | number)[];\n  description?: string;\n}\n\nexport interface APIAuthentication {\n  type: 'apiKey' | 'http' | 'oauth2' | 'openIdConnect';\n  description?: string;\n  flows?: Record<string, {\n    authorizationUrl?: string;\n    tokenUrl?: string;\n    refreshUrl?: string;\n    scopes?: Record<string, string>;\n  }>;\n  scheme?: string; // For HTTP authentication\n  bearerFormat?: string; // For HTTP bearer\n  in?: 'query' | 'header' | 'cookie'; // For apiKey\n  name?: string; // For apiKey\n}\n\nexport interface APIDocumentation {\n  info: {\n    title: string;\n    description?: string;\n    version: string;\n  };\n  servers: Array<{\n    url: string;\n    description?: string;\n  }>;\n  paths: Record<string, Record<string, APIEndpoint>>;\n  components?: {\n    schemas?: Record<string, APISchema>;\n    securitySchemes?: Record<string, APIAuthentication>;\n  };\n}\n\nexport interface IntegrationPattern {\n  endpointGroup: string;\n  purpose: string;\n  requiredEndpoints: APIEndpoint[];\n  dataModel: Record<string, APISchema>;\n  authRequirements: APIAuthentication[];\n  configRequirements: Array<{\n    name: string;\n    type: string;\n    description: string;\n    required: boolean;\n  }>;\n  usageSuggestions: string[];\n}\n\nexport interface GeneratedConnector {\n  integrationName: string;\n  integrationSlug: string;\n  configTemplate: Record<string, any>;\n  endpointMappers: Record<string, string>;\n  authSetupCode: string;\n  clientSetupCode: string;\n}\n\n// Main API Documentation Analyzer Class\nexport class APIDocAnalyzer {\n  /**\n   * Parse an OpenAPI/Swagger document\n   */\n  async parseOpenAPIDoc(openApiJson: string): Promise<APIDocumentation> {\n    try {\n      const parsedDoc = JSON.parse(openApiJson);\n      \n      // Validate that this is an OpenAPI document\n      if (!parsedDoc.openapi && !parsedDoc.swagger) {\n        throw new Error('Invalid OpenAPI document format');\n      }\n      \n      // Transform the document into our internal format\n      const apiDoc: APIDocumentation = {\n        info: parsedDoc.info,\n        servers: parsedDoc.servers || [{ url: parsedDoc.host || '' }],\n        paths: {},\n        components: parsedDoc.components\n      };\n      \n      // Process paths and endpoints\n      Object.entries(parsedDoc.paths).forEach(([path, pathItem]: [string, any]) => {\n        apiDoc.paths[path] = {};\n        \n        // Process HTTP methods\n        ['get', 'post', 'put', 'delete', 'patch'].forEach(method => {\n          if (pathItem[method]) {\n            const methodUpper = method.toUpperCase() as 'GET' | 'POST' | 'PUT' | 'DELETE' | 'PATCH';\n            apiDoc.paths[path][method] = this.transformEndpoint(pathItem[method], methodUpper);\n          }\n        });\n      });\n      \n      return apiDoc;\n    } catch (error) {\n      console.error('Error parsing OpenAPI document:', error);\n      throw new Error(`Failed to parse API documentation: ${error}`);\n    }\n  }\n  \n  /**\n   * Transform an OpenAPI endpoint to our internal format\n   */\n  private transformEndpoint(endpoint: any, method: 'GET' | 'POST' | 'PUT' | 'DELETE' | 'PATCH'): APIEndpoint {\n    return {\n      path: endpoint.path || '',\n      method,\n      description: endpoint.summary || endpoint.description || '',\n      parameters: endpoint.parameters?.map(this.transformParameter) || [],\n      requestBody: endpoint.requestBody ? this.transformRequestBody(endpoint.requestBody) : undefined,\n      responses: this.transformResponses(endpoint.responses || {}),\n      tags: endpoint.tags || [],\n      security: endpoint.security || []\n    };\n  }\n  \n  /**\n   * Transform OpenAPI parameter to our internal format\n   */\n  private transformParameter(param: any): APIParameter {\n    return {\n      name: param.name,\n      in: param.in,\n      required: param.required || false,\n      schema: param.schema ? this.transformSchema(param.schema) : { type: 'string' },\n      description: param.description\n    };\n  }\n  \n  /**\n   * Transform OpenAPI request body to our internal format\n   */\n  private transformRequestBody(requestBody: any): APIRequestBody {\n    return {\n      description: requestBody.description,\n      required: requestBody.required || false,\n      content: Object.entries(requestBody.content || {}).reduce((acc, [contentType, content]: [string, any]) => {\n        acc[contentType] = {\n          schema: this.transformSchema(content.schema)\n        };\n        return acc;\n      }, {} as Record<string, { schema: APISchema }>)\n    };\n  }\n  \n  /**\n   * Transform OpenAPI responses to our internal format\n   */\n  private transformResponses(responses: Record<string, any>): Record<string, APIResponse> {\n    return Object.entries(responses).reduce((acc, [code, response]: [string, any]) => {\n      acc[code] = {\n        description: response.description || '',\n        content: response.content ? Object.entries(response.content).reduce((contentAcc, [contentType, content]: [string, any]) => {\n          contentAcc[contentType] = {\n            schema: this.transformSchema(content.schema)\n          };\n          return contentAcc;\n        }, {} as Record<string, { schema: APISchema }>) : undefined\n      };\n      return acc;\n    }, {} as Record<string, APIResponse>);\n  }\n  \n  /**\n   * Transform OpenAPI schema to our internal format\n   */\n  private transformSchema(schema: any): APISchema {\n    if (!schema) return { type: 'object' };\n    \n    return {\n      type: schema.type || 'object',\n      format: schema.format,\n      properties: schema.properties ? Object.entries(schema.properties).reduce((acc, [propName, propSchema]: [string, any]) => {\n        acc[propName] = this.transformSchema(propSchema);\n        return acc;\n      }, {} as Record<string, APISchema>) : undefined,\n      items: schema.items ? this.transformSchema(schema.items) : undefined,\n      required: schema.required,\n      enum: schema.enum,\n      description: schema.description\n    };\n  }\n  \n  /**\n   * Analyze API documentation to generate integration patterns\n   */\n  async analyzeDocumentation(apiDoc: APIDocumentation): Promise<IntegrationPattern[]> {\n    // Group endpoints by tags\n    const endpointsByTag = this.groupEndpointsByTags(apiDoc);\n    \n    // Generate patterns for each endpoint group\n    const patterns: IntegrationPattern[] = [];\n    \n    for (const [tag, endpoints] of Object.entries(endpointsByTag)) {\n      // Skip tags with too few endpoints\n      if (endpoints.length < 2) continue;\n      \n      const pattern: IntegrationPattern = {\n        endpointGroup: tag,\n        purpose: this.inferPurpose(tag, endpoints),\n        requiredEndpoints: this.identifyKeyEndpoints(endpoints),\n        dataModel: this.extractDataModels(endpoints, apiDoc),\n        authRequirements: this.identifyAuthRequirements(endpoints, apiDoc),\n        configRequirements: this.identifyConfigRequirements(tag, endpoints),\n        usageSuggestions: this.generateUsageSuggestions(tag, endpoints)\n      };\n      \n      patterns.push(pattern);\n    }\n    \n    return patterns;\n  }\n  \n  /**\n   * Group endpoints by their tags\n   */\n  private groupEndpointsByTags(apiDoc: APIDocumentation): Record<string, APIEndpoint[]> {\n    const endpointsByTag: Record<string, APIEndpoint[]> = {};\n    \n    // Iterate through all paths and methods\n    Object.entries(apiDoc.paths).forEach(([path, methods]) => {\n      Object.entries(methods).forEach(([method, endpoint]) => {\n        const tags = endpoint.tags?.length ? endpoint.tags : ['default'];\n        \n        // Add this endpoint to each of its tags\n        tags.forEach(tag => {\n          if (!endpointsByTag[tag]) {\n            endpointsByTag[tag] = [];\n          }\n          \n          const fullEndpoint = {\n            ...endpoint,\n            path: path // Ensure path is included\n          };\n          \n          endpointsByTag[tag].push(fullEndpoint);\n        });\n      });\n    });\n    \n    return endpointsByTag;\n  }\n  \n  /**\n   * Infer the purpose of an endpoint group based on tag and endpoints\n   */\n  private inferPurpose(tag: string, endpoints: APIEndpoint[]): string {\n    // Simple purpose inference based on tag name and endpoint methods\n    const hasCRUD = \n      endpoints.some(e => e.method === 'GET') &&\n      endpoints.some(e => e.method === 'POST') &&\n      (endpoints.some(e => e.method === 'PUT') || endpoints.some(e => e.method === 'PATCH')) &&\n      endpoints.some(e => e.method === 'DELETE');\n      \n    if (hasCRUD) {\n      return `Manage ${tag} records with full CRUD operations`;\n    }\n    \n    if (endpoints.every(e => e.method === 'GET')) {\n      return `Read-only access to ${tag} data`;\n    }\n    \n    return `Interact with ${tag} functionality`;\n  }\n  \n  /**\n   * Identify the key endpoints required for basic integration\n   */\n  private identifyKeyEndpoints(endpoints: APIEndpoint[]): APIEndpoint[] {\n    // For simplicity, we'll just pick a few key endpoints\n    // In a real implementation, this would be more sophisticated\n    \n    // Prioritize listing/getting endpoints, then creation, then update/delete\n    const getEndpoints = endpoints.filter(e => e.method === 'GET').slice(0, 2);\n    const createEndpoints = endpoints.filter(e => e.method === 'POST').slice(0, 1);\n    const updateEndpoints = endpoints.filter(e => \n      e.method === 'PUT' || e.method === 'PATCH'\n    ).slice(0, 1);\n    \n    return [...getEndpoints, ...createEndpoints, ...updateEndpoints];\n  }\n  \n  /**\n   * Extract data models from endpoints\n   */\n  private extractDataModels(endpoints: APIEndpoint[], apiDoc: APIDocumentation): Record<string, APISchema> {\n    const dataModels: Record<string, APISchema> = {};\n    \n    // Look at request bodies and responses for data models\n    endpoints.forEach(endpoint => {\n      // From request body\n      if (endpoint.requestBody?.content) {\n        Object.values(endpoint.requestBody.content).forEach(content => {\n          if (content.schema.type === 'object' && content.schema.properties) {\n            const modelName = `${endpoint.path.split('/').pop() || 'model'}Request`;\n            dataModels[modelName] = content.schema;\n          }\n        });\n      }\n      \n      // From responses\n      Object.values(endpoint.responses).forEach(response => {\n        if (response.content) {\n          Object.values(response.content).forEach(content => {\n            if (content.schema.type === 'object' && content.schema.properties) {\n              const modelName = `${endpoint.path.split('/').pop() || 'model'}Response`;\n              dataModels[modelName] = content.schema;\n            }\n          });\n        }\n      });\n    });\n    \n    return dataModels;\n  }\n  \n  /**\n   * Identify authentication requirements\n   */\n  private identifyAuthRequirements(endpoints: APIEndpoint[], apiDoc: APIDocumentation): APIAuthentication[] {\n    const authMethods: APIAuthentication[] = [];\n    \n    // Check security requirements from components\n    if (apiDoc.components?.securitySchemes) {\n      Object.values(apiDoc.components.securitySchemes).forEach(scheme => {\n        authMethods.push(scheme);\n      });\n    }\n    \n    return authMethods;\n  }\n  \n  /**\n   * Identify configuration requirements for integration\n   */\n  private identifyConfigRequirements(tag: string, endpoints: APIEndpoint[]): Array<{\n    name: string;\n    type: string;\n    description: string;\n    required: boolean;\n  }> {\n    // Basic config requirements\n    const configRequirements = [\n      {\n        name: 'baseUrl',\n        type: 'string',\n        description: 'API base URL',\n        required: true\n      }\n    ];\n    \n    // Add auth-related config\n    const authMethods = new Set<string>();\n    endpoints.forEach(endpoint => {\n      endpoint.security?.forEach(security => {\n        Object.keys(security).forEach(key => {\n          authMethods.add(key);\n        });\n      });\n    });\n    \n    authMethods.forEach(method => {\n      configRequirements.push({\n        name: `${method}`,\n        type: 'string',\n        description: `Authentication token for ${method}`,\n        required: true\n      });\n    });\n    \n    return configRequirements;\n  }\n  \n  /**\n   * Generate usage suggestions for the integration\n   */\n  private generateUsageSuggestions(tag: string, endpoints: APIEndpoint[]): string[] {\n    const suggestions: string[] = [];\n    \n    // Basic usage suggestions\n    suggestions.push(`Connect to ${tag} to synchronize data with Nexus`);\n    \n    if (endpoints.some(e => e.method === 'GET')) {\n      suggestions.push(`Import ${tag} data into reports and dashboards`);\n    }\n    \n    if (endpoints.some(e => e.method === 'POST')) {\n      suggestions.push(`Create new ${tag} records from Nexus workflows`);\n    }\n    \n    if (endpoints.some(e => e.method === 'PUT' || e.method === 'PATCH')) {\n      suggestions.push(`Update ${tag} data based on Nexus events`);\n    }\n    \n    return suggestions;\n  }\n  \n  /**\n   * Generate a connector implementation based on the API documentation\n   */\n  async generateConnector(\n    apiDoc: APIDocumentation, \n    patterns: IntegrationPattern[]\n  ): Promise<GeneratedConnector> {\n    const integrationName = apiDoc.info.title;\n    const integrationSlug = integrationName.toLowerCase().replace(/[^a-z0-9]/g, '-');\n    \n    // Generate configuration template\n    const configTemplate: Record<string, any> = {};\n    \n    // Combine config requirements from all patterns\n    const allConfigRequirements = patterns.flatMap(p => p.configRequirements);\n    allConfigRequirements.forEach(config => {\n      configTemplate[config.name] = {\n        type: config.type,\n        description: config.description,\n        required: config.required\n      };\n    });\n    \n    // Generate client setup code based on authentication requirements\n    const authTypes = new Set(patterns.flatMap(p => p.authRequirements.map(a => a.type)));\n    let authSetupCode = '';\n    let clientSetupCode = '';\n    \n    if (authTypes.has('oauth2')) {\n      authSetupCode = this.generateOAuth2Setup(patterns);\n      clientSetupCode = this.generateOAuth2Client(patterns);\n    } else if (authTypes.has('apiKey')) {\n      authSetupCode = this.generateApiKeySetup(patterns);\n      clientSetupCode = this.generateApiKeyClient(patterns);\n    } else {\n      // Default to basic setup\n      authSetupCode = this.generateBasicAuthSetup();\n      clientSetupCode = this.generateBasicAuthClient();\n    }\n    \n    // Generate endpoint mappers for all patterns\n    const endpointMappers: Record<string, string> = {};\n    patterns.forEach(pattern => {\n      pattern.requiredEndpoints.forEach(endpoint => {\n        const functionName = this.endpointToFunctionName(endpoint);\n        endpointMappers[functionName] = this.generateEndpointMapper(endpoint);\n      });\n    });\n    \n    return {\n      integrationName,\n      integrationSlug,\n      configTemplate,\n      endpointMappers,\n      authSetupCode,\n      clientSetupCode\n    };\n  }\n  \n  /**\n   * Generate OAuth2 setup code\n   */\n  private generateOAuth2Setup(patterns: IntegrationPattern[]): string {\n    // Find OAuth2 auth requirement\n    const oauth2Auth = patterns\n      .flatMap(p => p.authRequirements)\n      .find(a => a.type === 'oauth2');\n    \n    if (!oauth2Auth || !oauth2Auth.flows) {\n      return '// OAuth2 configuration not found in API documentation';\n    }\n    \n    // Get first OAuth2 flow\n    const [flowType, flow] = Object.entries(oauth2Auth.flows)[0];\n    \n    return `\n/**\n * OAuth2 authentication setup for ${oauth2Auth.description || 'API'}\n */\nexport const setupOAuth2 = async (config: IntegrationConfig): Promise<AuthCredentials> => {\n  // OAuth2 flow: ${flowType}\n  const authUrl = '${flow.authorizationUrl || ''}';\n  const tokenUrl = '${flow.tokenUrl || ''}';\n  \n  // Configure required scopes\n  const requiredScopes = [\n    ${Object.keys(flow.scopes || {}).map(scope => `'${scope}'`).join(',\\n    ')}\n  ];\n  \n  // Set up OAuth2 client\n  const oauth2Client = new OAuth2Client({\n    clientId: config.clientId,\n    clientSecret: config.clientSecret,\n    redirectUri: config.redirectUri,\n    authorizationUrl: authUrl,\n    tokenUrl: tokenUrl\n  });\n  \n  // Generate authorization URL\n  const authorizationUrl = oauth2Client.getAuthorizationUrl({\n    scope: requiredScopes.join(' '),\n    state: generateRandomState()\n  });\n  \n  return {\n    type: 'oauth2',\n    authorizationUrl,\n    clientId: config.clientId\n  };\n};\n\nexport const handleOAuth2Callback = async (\n  config: IntegrationConfig,\n  code: string,\n  state: string\n): Promise<TokenCredentials> => {\n  // Validate state to prevent CSRF attacks\n  if (state !== getStoredState(config.clientId)) {\n    throw new Error('Invalid state parameter');\n  }\n  \n  // Exchange code for tokens\n  const oauth2Client = new OAuth2Client({\n    clientId: config.clientId,\n    clientSecret: config.clientSecret,\n    redirectUri: config.redirectUri,\n    tokenUrl: '${flow.tokenUrl || ''}'\n  });\n  \n  const tokenResponse = await oauth2Client.getToken(code);\n  \n  return {\n    accessToken: tokenResponse.access_token,\n    refreshToken: tokenResponse.refresh_token,\n    expiresAt: Date.now() + (tokenResponse.expires_in * 1000)\n  };\n};\n\nexport const refreshOAuth2Token = async (\n  config: IntegrationConfig,\n  credentials: TokenCredentials\n): Promise<TokenCredentials> => {\n  const oauth2Client = new OAuth2Client({\n    clientId: config.clientId,\n    clientSecret: config.clientSecret,\n    tokenUrl: '${flow.tokenUrl || ''}'\n  });\n  \n  const tokenResponse = await oauth2Client.refreshToken(credentials.refreshToken);\n  \n  return {\n    accessToken: tokenResponse.access_token,\n    refreshToken: tokenResponse.refresh_token || credentials.refreshToken,\n    expiresAt: Date.now() + (tokenResponse.expires_in * 1000)\n  };\n};`;\n  }\n  \n  /**\n   * Generate OAuth2 client code\n   */\n  private generateOAuth2Client(patterns: IntegrationPattern[]): string {\n    return `\n/**\n * Create API client with OAuth2 authentication\n */\nexport const createApiClient = (config: IntegrationConfig, credentials: TokenCredentials): ApiClient => {\n  // Create axios instance with base configuration\n  const client = axios.create({\n    baseURL: config.baseUrl,\n    headers: {\n      'Authorization': \\`Bearer \\${credentials.accessToken}\\`,\n      'Content-Type': 'application/json',\n      'Accept': 'application/json'\n    }\n  });\n  \n  // Add token refresh interceptor\n  client.interceptors.response.use(\n    (response) => response,\n    async (error) => {\n      const originalRequest = error.config;\n      \n      // If error is 401 and we haven't tried to refresh token yet\n      if (error.response.status === 401 && !originalRequest._retry) {\n        originalRequest._retry = true;\n        \n        // Check if token needs refresh\n        if (credentials.expiresAt && Date.now() > credentials.expiresAt) {\n          // Refresh token\n          const newCredentials = await refreshOAuth2Token(config, credentials);\n          \n          // Update token in storage\n          await updateStoredCredentials(config.integrationId, newCredentials);\n          \n          // Update authorization header\n          originalRequest.headers['Authorization'] = \\`Bearer \\${newCredentials.accessToken}\\`;\n          \n          // Retry the request with new token\n          return client(originalRequest);\n        }\n      }\n      \n      return Promise.reject(error);\n    }\n  );\n  \n  return client;\n};`;\n  }\n  \n  /**\n   * Generate API Key setup code\n   */\n  private generateApiKeySetup(patterns: IntegrationPattern[]): string {\n    // Find API Key auth requirement\n    const apiKeyAuth = patterns\n      .flatMap(p => p.authRequirements)\n      .find(a => a.type === 'apiKey');\n    \n    if (!apiKeyAuth) {\n      return '// API Key configuration not found in API documentation';\n    }\n    \n    return `\n/**\n * API Key authentication setup\n */\nexport const setupApiKey = (config: IntegrationConfig): AuthCredentials => {\n  return {\n    type: 'apiKey',\n    apiKey: config.apiKey,\n    keyName: '${apiKeyAuth.name || 'api_key'}',\n    keyLocation: '${apiKeyAuth.in || 'header'}'\n  };\n};`;\n  }\n  \n  /**\n   * Generate API Key client code\n   */\n  private generateApiKeyClient(patterns: IntegrationPattern[]): string {\n    // Find API Key auth requirement\n    const apiKeyAuth = patterns\n      .flatMap(p => p.authRequirements)\n      .find(a => a.type === 'apiKey');\n    \n    if (!apiKeyAuth) {\n      return '// API Key client configuration not found in API documentation';\n    }\n    \n    const keyLocation = apiKeyAuth.in || 'header';\n    const keyName = apiKeyAuth.name || 'api_key';\n    \n    let headerConfig = '';\n    if (keyLocation === 'header') {\n      headerConfig = `headers: {\n      '${keyName}': credentials.apiKey,\n      'Content-Type': 'application/json',\n      'Accept': 'application/json'\n    }`;\n    } else if (keyLocation === 'query') {\n      headerConfig = `headers: {\n      'Content-Type': 'application/json',\n      'Accept': 'application/json'\n    },\n    params: {\n      '${keyName}': credentials.apiKey\n    }`;\n    }\n    \n    return `\n/**\n * Create API client with API Key authentication\n */\nexport const createApiClient = (config: IntegrationConfig, credentials: AuthCredentials): ApiClient => {\n  // Create axios instance with base configuration\n  const client = axios.create({\n    baseURL: config.baseUrl,\n    ${headerConfig}\n  });\n  \n  return client;\n};`;\n  }\n  \n  /**\n   * Generate basic auth setup code (fallback)\n   */\n  private generateBasicAuthSetup(): string {\n    return `\n/**\n * Basic authentication setup\n */\nexport const setupBasicAuth = (config: IntegrationConfig): AuthCredentials => {\n  return {\n    type: 'basic',\n    username: config.username,\n    password: config.password\n  };\n};`;\n  }\n  \n  /**\n   * Generate basic auth client code (fallback)\n   */\n  private generateBasicAuthClient(): string {\n    return `\n/**\n * Create API client with Basic authentication\n */\nexport const createApiClient = (config: IntegrationConfig, credentials: AuthCredentials): ApiClient => {\n  // Create axios instance with base configuration\n  const client = axios.create({\n    baseURL: config.baseUrl,\n    auth: {\n      username: credentials.username,\n      password: credentials.password\n    },\n    headers: {\n      'Content-Type': 'application/json',\n      'Accept': 'application/json'\n    }\n  });\n  \n  return client;\n};`;\n  }\n  \n  /**\n   * Generate endpoint mapper code\n   */\n  private generateEndpointMapper(endpoint: APIEndpoint): string {\n    const functionName = this.endpointToFunctionName(endpoint);\n    const method = endpoint.method.toLowerCase();\n    let url = endpoint.path;\n    \n    // Replace path parameters with template literals\n    const pathParams = endpoint.parameters?.filter(p => p.in === 'path') || [];\n    pathParams.forEach(param => {\n      url = url.replace(`{${param.name}}`, `\\${params.${param.name}}`);\n    });\n    \n    // Handle query parameters\n    const queryParams = endpoint.parameters?.filter(p => p.in === 'query') || [];\n    const hasQueryParams = queryParams.length > 0;\n    \n    // Handle request body\n    const hasRequestBody = endpoint.requestBody?.required || false;\n    \n    let code = `\n/**\n * ${endpoint.description || functionName}\n */\nexport const ${functionName} = async (client: ApiClient, `;\n    \n    // Add parameters\n    if (pathParams.length > 0 || queryParams.length > 0) {\n      code += `params: {\n      ${pathParams.map(p => `${p.name}${p.required ? '' : '?'}: ${this.schemaTypeToTS(p.schema)}`).join(',\\n      ')}\n      ${queryParams.map(p => `${p.name}${p.required ? '' : '?'}: ${this.schemaTypeToTS(p.schema)}`).join(',\\n      ')}\n    }`;\n      \n      if (hasRequestBody) {\n        code += `, `;\n      }\n    }\n    \n    // Add request body\n    if (hasRequestBody) {\n      const bodyContent = endpoint.requestBody?.content || {};\n      const firstContentType = Object.keys(bodyContent)[0] || 'application/json';\n      const bodySchema = bodyContent[firstContentType]?.schema;\n      \n      code += `data: ${this.schemaTypeToTS(bodySchema)}`;\n    }\n    \n    code += `): Promise<any> => {\n    try {`;\n    \n    // Generate request code\n    let requestCode = '';\n    if (method === 'get' || method === 'delete') {\n      requestCode = `\n      const response = await client.${method}(\\`${url}\\`${hasQueryParams ? ', { params }' : ''});`;\n    } else {\n      requestCode = `\n      const response = await client.${method}(\\`${url}\\`${hasRequestBody ? ', data' : ', {}'});`;\n    }\n    \n    code += requestCode;\n    \n    // Return response data\n    code += `\n      return response.data;\n    } catch (error) {\n      console.error(\\`Error in ${functionName}:\\`, error);\n      throw new Error(\\`API error in ${functionName}: \\${error.message}\\`);\n    }\n  };`;\n    \n    return code;\n  }\n  \n  /**\n   * Convert endpoint to function name\n   */\n  private endpointToFunctionName(endpoint: APIEndpoint): string {\n    const method = endpoint.method.toLowerCase();\n    const pathParts = endpoint.path.split('/').filter(Boolean);\n    \n    // Remove path parameters\n    const cleanPathParts = pathParts.map(part => {\n      if (part.startsWith('{') && part.endsWith('}')) {\n        return 'By' + part.substring(1, part.length - 1);\n      }\n      return part;\n    });\n    \n    // Generate function name\n    let functionName = '';\n    \n    if (method === 'get') {\n      // Check if it's likely a list endpoint (no path params at the end)\n      const lastPart = pathParts[pathParts.length - 1];\n      if (!lastPart.startsWith('{')) {\n        functionName = 'get' + this.capitalize(lastPart);\n      } else {\n        // It's likely a single item endpoint\n        const resourceName = pathParts[pathParts.length - 2];\n        functionName = 'get' + this.capitalize(resourceName) + 'ById';\n      }\n    } else if (method === 'post') {\n      const resourceName = pathParts[pathParts.length - 1];\n      functionName = 'create' + this.capitalize(resourceName);\n    } else if (method === 'put' || method === 'patch') {\n      const resourceName = pathParts[pathParts.length - 2];\n      functionName = 'update' + this.capitalize(resourceName);\n    } else if (method === 'delete') {\n      const resourceName = pathParts[pathParts.length - 2];\n      functionName = 'delete' + this.capitalize(resourceName);\n    }\n    \n    return functionName;\n  }\n  \n  /**\n   * Convert schema type to TypeScript type\n   */\n  private schemaTypeToTS(schema?: APISchema): string {\n    if (!schema) return 'any';\n    \n    switch (schema.type) {\n      case 'string':\n        return 'string';\n      case 'number':\n      case 'integer':\n        return 'number';\n      case 'boolean':\n        return 'boolean';\n      case 'array':\n        if (schema.items) {\n          return `${this.schemaTypeToTS(schema.items)}[]`;\n        }\n        return 'any[]';\n      case 'object':\n        if (schema.properties) {\n          return `{\n            ${Object.entries(schema.properties).map(([propName, propSchema]) => {\n              const isRequired = schema.required?.includes(propName) || false;\n              return `${propName}${isRequired ? '' : '?'}: ${this.schemaTypeToTS(propSchema)}`;\n            }).join(',\\n            ')}\n          }`;\n        }\n        return 'Record<string, any>';\n      default:\n        return 'any';\n    }\n  }\n  \n  /**\n   * Capitalize first letter of string\n   */\n  private capitalize(str: string): string {\n    return str.charAt(0).toUpperCase() + str.slice(1);\n  }\n}\n\nexport const apiDocAnalyzer = new APIDocAnalyzer(); ","usedDeprecatedRules":[]},{"filePath":"/home/vonj/Github/Nexus/src/lib/integrations/centralizedAppsOrchestrator.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":70,"column":42,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":70,"endColumn":45,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1890,1893],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1890,1893],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":279,"column":32,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":279,"endColumn":35,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[10310,10313],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[10310,10313],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'userId' is defined but never used.","line":280,"column":5,"nodeType":null,"messageId":"unusedVar","endLine":280,"endColumn":11},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":283,"column":14,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":283,"endColumn":17,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[10385,10388],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[10385,10388],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":293,"column":20,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":293,"endColumn":23,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[10718,10721],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[10718,10721],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'primaryAgent' is assigned a value but never used.","line":319,"column":17,"nodeType":null,"messageId":"unusedVar","endLine":319,"endColumn":29},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":357,"column":89,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":357,"endColumn":92,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[13017,13020],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[13017,13020],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":396,"column":29,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":396,"endColumn":32,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[14180,14183],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[14180,14183],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'userId' is defined but never used.","line":413,"column":29,"nodeType":null,"messageId":"unusedVar","endLine":413,"endColumn":35},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'parameters' is defined but never used.","line":458,"column":83,"nodeType":null,"messageId":"unusedVar","endLine":458,"endColumn":93},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":458,"column":110,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":458,"endColumn":113,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[16400,16403],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[16400,16403],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'businessFunction' is defined but never used.","line":463,"column":41,"nodeType":null,"messageId":"unusedVar","endLine":463,"endColumn":57}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":12,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\n * Centralized Apps Orchestrator\n * Unifies all business applications through AI agents and n8n workflows\n * Provides a single interface for accessing and managing all business functions\n */\n\nimport { n8nService } from './n8nService';\nimport { executiveAgent, departmentalAgents } from '@/lib/ai/agentRegistry';\nimport type { Agent } from '@/lib/ai/agentRegistry';\n\n// Business Application Categories\nexport interface BusinessApp {\n  id: string;\n  name: string;\n  category: AppCategory;\n  status: 'connected' | 'disconnected' | 'configuring' | 'error';\n  lastSync?: Date;\n  dataPoints?: number;\n  primaryAgent?: string; // Which agent manages this app\n  integrationLevel: 'basic' | 'advanced' | 'deep';\n  capabilities: AppCapability[];\n  workflows: string[]; // Associated n8n workflow IDs\n  metrics: AppMetrics;\n}\n\nexport type AppCategory = \n  | 'crm-sales' \n  | 'finance-accounting' \n  | 'marketing-advertising'\n  | 'operations-productivity'\n  | 'hr-people'\n  | 'analytics-bi'\n  | 'communication'\n  | 'e-commerce'\n  | 'development'\n  | 'security';\n\nexport interface AppCapability {\n  type: 'read' | 'write' | 'automate' | 'analyze';\n  description: string;\n  agentSupported: boolean;\n  workflowId?: string;\n}\n\nexport interface AppMetrics {\n  dailyAPIRequests: number;\n  successRate: number;\n  avgResponseTime: number;\n  errorCount: number;\n  lastError?: string;\n}\n\n// Centralized Business Function\nexport interface BusinessFunction {\n  id: string;\n  name: string;\n  description: string;\n  category: AppCategory;\n  requiredApps: string[];\n  supportingAgents: string[];\n  automationWorkflows: string[];\n  manualTasks: string[];\n  isAutomated: boolean;\n  automationLevel: number; // 0-100%\n}\n\nclass CentralizedAppsOrchestrator {\n  private apps: Map<string, BusinessApp> = new Map();\n  private functions: Map<string, BusinessFunction> = new Map();\n  private activeConnections: Map<string, any> = new Map();\n\n  constructor() {\n    this.initializeApps();\n    this.initializeBusinessFunctions();\n  }\n\n  /**\n   * Initialize all business applications\n   */\n  private initializeApps(): void {\n    const apps: BusinessApp[] = [\n      // CRM & Sales\n      {\n        id: 'salesforce',\n        name: 'Salesforce',\n        category: 'crm-sales',\n        status: 'connected',\n        lastSync: new Date(),\n        dataPoints: 2847,\n        primaryAgent: 'sales-dept',\n        integrationLevel: 'deep',\n        capabilities: [\n          { type: 'read', description: 'Contact & lead data', agentSupported: true, workflowId: 'sf-read' },\n          { type: 'write', description: 'Create/update records', agentSupported: true, workflowId: 'sf-write' },\n          { type: 'automate', description: 'Pipeline automation', agentSupported: true, workflowId: 'sf-automate' },\n          { type: 'analyze', description: 'Sales analytics', agentSupported: true, workflowId: 'sf-analyze' }\n        ],\n        workflows: ['sf-sync', 'sf-automation', 'sf-reporting'],\n        metrics: { dailyAPIRequests: 1250, successRate: 99.2, avgResponseTime: 180, errorCount: 2 }\n      },\n      {\n        id: 'hubspot',\n        name: 'HubSpot',\n        category: 'crm-sales',\n        status: 'connected',\n        primaryAgent: 'sales-dept',\n        integrationLevel: 'advanced',\n        capabilities: [\n          { type: 'read', description: 'Marketing & sales data', agentSupported: true },\n          { type: 'automate', description: 'Marketing automation', agentSupported: true }\n        ],\n        workflows: ['hubspot-sync', 'hubspot-marketing'],\n        metrics: { dailyAPIRequests: 890, successRate: 98.7, avgResponseTime: 150, errorCount: 1 }\n      },\n\n      // Finance & Accounting\n      {\n        id: 'quickbooks',\n        name: 'QuickBooks Online',\n        category: 'finance-accounting',\n        status: 'connected',\n        primaryAgent: 'finance-dept',\n        integrationLevel: 'deep',\n        capabilities: [\n          { type: 'read', description: 'Financial data', agentSupported: true },\n          { type: 'write', description: 'Invoice & expense creation', agentSupported: true },\n          { type: 'analyze', description: 'Financial analytics', agentSupported: true }\n        ],\n        workflows: ['qb-sync', 'qb-invoicing', 'qb-reporting'],\n        metrics: { dailyAPIRequests: 650, successRate: 99.8, avgResponseTime: 120, errorCount: 0 }\n      },\n      {\n        id: 'stripe',\n        name: 'Stripe',\n        category: 'finance-accounting',\n        status: 'connected',\n        primaryAgent: 'finance-dept',\n        integrationLevel: 'advanced',\n        capabilities: [\n          { type: 'read', description: 'Payment data', agentSupported: true },\n          { type: 'automate', description: 'Payment processing', agentSupported: true }\n        ],\n        workflows: ['stripe-payments', 'stripe-analytics'],\n        metrics: { dailyAPIRequests: 2100, successRate: 99.9, avgResponseTime: 95, errorCount: 0 }\n      },\n\n      // Operations & Productivity\n      {\n        id: 'microsoft365',\n        name: 'Microsoft 365',\n        category: 'operations-productivity',\n        status: 'connected',\n        primaryAgent: 'operations-dept',\n        integrationLevel: 'deep',\n        capabilities: [\n          { type: 'read', description: 'Files & collaboration data', agentSupported: true },\n          { type: 'write', description: 'Document creation', agentSupported: true },\n          { type: 'automate', description: 'Workflow automation', agentSupported: true }\n        ],\n        workflows: ['ms365-sync', 'ms365-automation'],\n        metrics: { dailyAPIRequests: 3200, successRate: 98.5, avgResponseTime: 200, errorCount: 12 }\n      },\n      {\n        id: 'slack',\n        name: 'Slack',\n        category: 'communication',\n        status: 'connected',\n        primaryAgent: 'operations-dept',\n        integrationLevel: 'advanced',\n        capabilities: [\n          { type: 'read', description: 'Messages & team data', agentSupported: true },\n          { type: 'write', description: 'Send notifications', agentSupported: true },\n          { type: 'automate', description: 'Bot responses', agentSupported: true }\n        ],\n        workflows: ['slack-notifications', 'slack-bot'],\n        metrics: { dailyAPIRequests: 1800, successRate: 99.1, avgResponseTime: 85, errorCount: 3 }\n      },\n\n      // Marketing & Advertising\n      {\n        id: 'mailchimp',\n        name: 'Mailchimp',\n        category: 'marketing-advertising',\n        status: 'connected',\n        primaryAgent: 'marketing-dept',\n        integrationLevel: 'advanced',\n        capabilities: [\n          { type: 'read', description: 'Campaign & subscriber data', agentSupported: true },\n          { type: 'write', description: 'Campaign creation', agentSupported: true },\n          { type: 'automate', description: 'Email automation', agentSupported: true }\n        ],\n        workflows: ['mailchimp-campaigns', 'mailchimp-analytics'],\n        metrics: { dailyAPIRequests: 420, successRate: 98.9, avgResponseTime: 160, errorCount: 1 }\n      },\n\n      // Analytics & BI\n      {\n        id: 'google-analytics',\n        name: 'Google Analytics',\n        category: 'analytics-bi',\n        status: 'connected',\n        primaryAgent: 'marketing-dept',\n        integrationLevel: 'basic',\n        capabilities: [\n          { type: 'read', description: 'Website analytics', agentSupported: true },\n          { type: 'analyze', description: 'Traffic analysis', agentSupported: true }\n        ],\n        workflows: ['ga-reporting'],\n        metrics: { dailyAPIRequests: 300, successRate: 99.5, avgResponseTime: 140, errorCount: 0 }\n      }\n    ];\n\n    apps.forEach(app => this.apps.set(app.id, app));\n  }\n\n  /**\n   * Initialize business functions that span multiple apps\n   */\n  private initializeBusinessFunctions(): void {\n    const functions: BusinessFunction[] = [\n      {\n        id: 'lead-to-cash',\n        name: 'Lead to Cash Process',\n        description: 'Complete customer journey from lead generation to payment',\n        category: 'crm-sales',\n        requiredApps: ['salesforce', 'hubspot', 'stripe', 'quickbooks'],\n        supportingAgents: ['sales-dept', 'finance-dept', 'marketing-dept'],\n        automationWorkflows: ['lead-scoring', 'proposal-generation', 'payment-processing'],\n        manualTasks: ['discovery-calls', 'contract-negotiation'],\n        isAutomated: true,\n        automationLevel: 75\n      },\n      {\n        id: 'financial-reporting',\n        name: 'Monthly Financial Reporting',\n        description: 'Automated generation of comprehensive financial reports',\n        category: 'finance-accounting',\n        requiredApps: ['quickbooks', 'stripe', 'salesforce'],\n        supportingAgents: ['finance-dept', 'executive'],\n        automationWorkflows: ['data-aggregation', 'report-generation', 'distribution'],\n        manualTasks: ['executive-review', 'board-presentation'],\n        isAutomated: true,\n        automationLevel: 90\n      },\n      {\n        id: 'customer-onboarding',\n        name: 'Customer Onboarding',\n        description: 'Seamless new customer experience from signup to success',\n        category: 'operations-productivity',\n        requiredApps: ['salesforce', 'slack', 'microsoft365', 'mailchimp'],\n        supportingAgents: ['sales-dept', 'customer-success', 'operations-dept'],\n        automationWorkflows: ['welcome-sequence', 'account-setup', 'training-scheduling'],\n        manualTasks: ['kickoff-meeting', 'customization'],\n        isAutomated: true,\n        automationLevel: 65\n      },\n      {\n        id: 'marketing-campaign',\n        name: 'Integrated Marketing Campaigns',\n        description: 'Cross-channel marketing campaign execution and tracking',\n        category: 'marketing-advertising',\n        requiredApps: ['hubspot', 'mailchimp', 'google-analytics', 'slack'],\n        supportingAgents: ['marketing-dept', 'marketing-analytics'],\n        automationWorkflows: ['campaign-creation', 'audience-targeting', 'performance-tracking'],\n        manualTasks: ['creative-development', 'strategy-planning'],\n        isAutomated: true,\n        automationLevel: 80\n      }\n    ];\n\n    functions.forEach(func => this.functions.set(func.id, func));\n  }\n\n  /**\n   * Execute a business function through AI agent coordination\n   */\n  async executeBusinessFunction(\n    functionId: string, \n    parameters: Record<string, any>,\n    userId: string\n  ): Promise<{\n    success: boolean;\n    results: any[];\n    agentsInvolved: string[];\n    workflowsTriggered: string[];\n    error?: string;\n  }> {\n    const businessFunction = this.functions.get(functionId);\n    if (!businessFunction) {\n      return { success: false, results: [], agentsInvolved: [], workflowsTriggered: [], error: 'Function not found' };\n    }\n\n    const results: any[] = [];\n    const agentsToInvolve = new Set<string>();\n    const workflowsToTrigger = new Set<string>();\n\n    try {\n      // Step 1: Identify the main agent and workflows\n      const involvedAgent = this.getAgentForFunction(businessFunction);\n      if (involvedAgent) {\n        agentsToInvolve.add(involvedAgent.id);\n      }\n\n      // Step 2: Determine which supporting agents to involve based on parameters\n      businessFunction.supportingAgents.forEach(agentId => {\n        if (this.shouldInvolveAgent(businessFunction, agentId, parameters)) {\n          agentsToInvolve.add(agentId);\n        }\n      });\n\n      // Step 3: Execute automation workflows\n      for (const workflowId of businessFunction.automationWorkflows) {\n        const workflowResult = await n8nService.triggerWorkflow(workflowId, parameters);\n        results.push({ workflowId, data: workflowResult });\n        workflowsToTrigger.add(workflowId);\n\n        if (workflowResult.error) {\n          console.error(`Error in workflow ${workflowId}:`, workflowResult.error);\n          const primaryAgent = this.getAgentById(businessFunction.supportingAgents[0]);\n        }\n      }\n\n      // Step 4: Aggregate results and finalize\n      // This is a simplified aggregation. A real implementation would be more complex.\n      const finalResult = results.reduce((acc, curr) => ({ ...acc, ...curr.data }), {});\n      \n      return {\n        success: true,\n        results: [finalResult],\n        agentsInvolved: Array.from(agentsToInvolve),\n        workflowsTriggered: Array.from(workflowsToTrigger)\n      };\n\n    } catch (error) {\n      console.error(`Failed to execute business function ${functionId}:`, error);\n      return {\n        success: false,\n        results: [],\n        agentsInvolved: [],\n        workflowsTriggered: [],\n        error: error instanceof Error ? error.message : String(error)\n      };\n    }\n  }\n\n  /**\n   * Get unified status of all connected apps\n   */\n  getAppsCentralizedStatus(): {\n    totalApps: number;\n    connectedApps: number;\n    healthyApps: number;\n    totalDataPoints: number;\n    categories: Record<AppCategory, { connected: number; total: number }>;\n  } {\n    const apps = Array.from(this.apps.values());\n    const categories: Record<AppCategory, { connected: number; total: number }> = {} as any;\n\n    // Initialize categories\n    const allCategories: AppCategory[] = [\n      'crm-sales', 'finance-accounting', 'marketing-advertising', \n      'operations-productivity', 'hr-people', 'analytics-bi', \n      'communication', 'e-commerce', 'development', 'security'\n    ];\n    \n    allCategories.forEach(cat => {\n      categories[cat] = { connected: 0, total: 0 };\n    });\n\n    // Count apps by category\n    apps.forEach(app => {\n      categories[app.category].total++;\n      if (app.status === 'connected') {\n        categories[app.category].connected++;\n      }\n    });\n\n    return {\n      totalApps: apps.length,\n      connectedApps: apps.filter(app => app.status === 'connected').length,\n      healthyApps: apps.filter(app => app.status === 'connected' && app.metrics.successRate > 95).length,\n      totalDataPoints: apps.reduce((sum, app) => sum + (app.dataPoints || 0), 0),\n      categories\n    };\n  }\n\n  /**\n   * Execute unified command across multiple apps through AI orchestration\n   */\n  async executeUnifiedCommand(\n    command: string,\n    targetApps: string[],\n    userId: string\n  ): Promise<{\n    success: boolean;\n    results: Record<string, any>;\n    agentRecommendations: string[];\n  }> {\n    console.log(`Executing unified command: \"${command}\" on apps: ${targetApps.join(', ')} for user ${userId}`);\n\n    // This is a mock implementation.\n    // A real implementation would involve complex NLP and agent interaction.\n    return {\n      success: false,\n      results: { message: \"Unified command execution is not fully implemented.\" },\n      agentRecommendations: [executiveAgent.id]\n    };\n  }\n\n  /**\n   * Get business insights from centralized app data\n   */\n  async getBusinessInsights(userId: string): Promise<{\n    kpis: Array<{ name: string; value: string; trend: 'up' | 'down' | 'stable'; source: string[] }>;\n    recommendations: string[];\n    crossAppOpportunities: string[];\n  }> {\n    const status = this.getAppsCentralizedStatus();\n\n    const kpis: Array<{ name: string; value: string; trend: 'up' | 'down' | 'stable'; source: string[] }> = [\n      { name: 'Connected Apps', value: `${status.connectedApps} / ${status.totalApps}`, trend: 'stable', source: ['all'] },\n      { name: 'Total Data Points', value: status.totalDataPoints.toLocaleString(), trend: 'up', source: ['all'] },\n    ];\n\n    // 2. Identify cross-app opportunities (mock data)\n    const crossAppOpportunities = [\n      'Automate lead-to-invoice process between Salesforce and QuickBooks.',\n      'Sync customer support tickets from Slack to Salesforce for 360-degree view.'\n    ];\n\n    // 3. Use an agent to generate qualitative insights\n    const recommendations: string[] = [];\n\n    return {\n      kpis,\n      recommendations,\n      crossAppOpportunities\n    };\n  }\n\n  // Helper methods\n  private getAgentForFunction(businessFunction: BusinessFunction): Agent | null {\n    const primaryAgentId = businessFunction.supportingAgents[0];\n    return this.getAgentById(primaryAgentId);\n  }\n\n  private getAgentById(agentId: string): Agent | null {\n    if (agentId === executiveAgent.id) {\n      return executiveAgent;\n    }\n    const deptAgent = departmentalAgents.find(agent => agent.id === agentId);\n    if (deptAgent) {\n      return deptAgent;\n    }\n    return null;\n  }\n\n  private shouldInvolveAgent(businessFunction: BusinessFunction, agentId: string, parameters: Record<string, any>): boolean {\n    // Logic to determine if agent should be involved based on function requirements and parameters\n    return businessFunction.supportingAgents.includes(agentId);\n  }\n\n  private getAgentRole(agentId: string, businessFunction: BusinessFunction): string {\n    const agent = this.getAgentById(agentId);\n    return agent ? `${agent.name} - ${agent.description}` : 'Supporting role';\n  }\n\n  // Public accessors\n  getConnectedApps(): BusinessApp[] {\n    return Array.from(this.apps.values()).filter(app => app.status === 'connected');\n  }\n\n  getBusinessFunctions(): BusinessFunction[] {\n    return Array.from(this.functions.values());\n  }\n\n  getAppById(appId: string): BusinessApp | undefined {\n    return this.apps.get(appId);\n  }\n\n  getFunctionById(functionId: string): BusinessFunction | undefined {\n    return this.functions.get(functionId);\n  }\n}\n\nconst orchestrator = new CentralizedAppsOrchestrator();\n\nexport { orchestrator, CentralizedAppsOrchestrator };\n\n// Already exported at definition\n// export type { BusinessApp, BusinessFunction, AppCategory, AppCapability, AppMetrics }; ","usedDeprecatedRules":[]},{"filePath":"/home/vonj/Github/Nexus/src/lib/integrations/hubspot/config.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/vonj/Github/Nexus/src/lib/integrations/hubspot/service.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/vonj/Github/Nexus/src/lib/integrations/hubspotIntegration.ts","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'APIDocumentation' is defined but never used.","line":10,"column":15,"nodeType":null,"messageId":"unusedVar","endLine":10,"endColumn":31},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'IntegrationPattern' is defined but never used.","line":10,"column":33,"nodeType":null,"messageId":"unusedVar","endLine":10,"endColumn":51},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":60,"column":22,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":60,"endColumn":25,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1458,1461],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1458,1461],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":133,"column":20,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":133,"endColumn":23,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3993,3996],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3993,3996],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":134,"column":23,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":134,"endColumn":26,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[4033,4036],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[4033,4036],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":263,"column":50,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":263,"endColumn":53,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[8695,8698],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[8695,8698],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":292,"column":50,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":292,"endColumn":53,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[9536,9539],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[9536,9539],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":322,"column":47,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":322,"endColumn":50,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[10411,10414],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[10411,10414],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":401,"column":26,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":401,"endColumn":29,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[12538,12541],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[12538,12541],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\n * HubSpot Integration Adapter\n * \n * This adapter connects Nexus to HubSpot's API using the API Documentation analyzer\n * to automatically generate integration code from the OpenAPI documentation.\n */\n\nimport axios from 'axios';\nimport { apiDocAnalyzer } from './apiDocAnalyzer';\nimport type { APIDocumentation, IntegrationPattern, GeneratedConnector } from './apiDocAnalyzer';\n\n// Types for HubSpot integration\nexport interface HubSpotConfig {\n  baseUrl: string;\n  apiKey?: string;\n  clientId?: string;\n  clientSecret?: string;\n  redirectUri?: string;\n  accessToken?: string;\n  refreshToken?: string;\n  expiresAt?: number;\n}\n\nexport interface HubSpotContact {\n  id: string;\n  properties: Record<string, string>;\n  createdAt: string;\n  updatedAt: string;\n}\n\nexport interface HubSpotCompany {\n  id: string;\n  properties: Record<string, string>;\n  createdAt: string;\n  updatedAt: string;\n}\n\nexport interface HubSpotDeal {\n  id: string;\n  properties: Record<string, string>;\n  createdAt: string;\n  updatedAt: string;\n  associations?: {\n    contacts?: { results: Array<{ id: string }> };\n    companies?: { results: Array<{ id: string }> };\n  };\n}\n\n// Helper function to safely get error message\nfunction getErrorMessage(error: unknown): string {\n  if (error instanceof Error) {\n    return error.message;\n  }\n  return String(error);\n}\n\n// Main HubSpot Integration Class\nexport class HubSpotIntegration {\n  private config: HubSpotConfig;\n  private apiClient: any;\n  private connector: GeneratedConnector | null = null;\n  \n  constructor(config: HubSpotConfig) {\n    this.config = config;\n    this.apiClient = null;\n  }\n  \n  /**\n   * Initialize the integration by fetching and analyzing API documentation\n   */\n  async initialize(): Promise<void> {\n    try {\n      // If we already have a connector generated from the documentation, use it\n      if (this.connector) {\n        await this.setupClient();\n        return;\n      }\n      \n      // Fetch HubSpot OpenAPI documentation\n      // Note: In a real implementation, we might fetch this directly from HubSpot\n      // For demo purposes, we'll use a mockup of what the OpenAPI might look like\n      const hubspotOpenApi = this.getMockHubSpotOpenAPI();\n      \n      // Parse the OpenAPI documentation\n      const apiDoc = await apiDocAnalyzer.parseOpenAPIDoc(hubspotOpenApi);\n      \n      // Analyze the documentation to find integration patterns\n      const patterns = await apiDocAnalyzer.analyzeDocumentation(apiDoc);\n      \n      // Generate connector code\n      this.connector = await apiDocAnalyzer.generateConnector(apiDoc, patterns);\n      \n      // Set up API client using the generated connector\n      await this.setupClient();\n      \n      console.log('HubSpot integration initialized successfully');\n    } catch (error) {\n      console.error('Failed to initialize HubSpot integration:', error);\n      throw new Error(`HubSpot integration initialization failed: ${error instanceof Error ? error.message : String(error)}`);\n    }\n  }\n  \n  /**\n   * Set up the API client based on authentication configuration\n   */\n  private async setupClient(): Promise<void> {\n    // Check if we have API key authentication\n    if (this.config.apiKey) {\n      this.apiClient = axios.create({\n        baseURL: this.config.baseUrl || 'https://api.hubapi.com',\n        headers: {\n          'Authorization': `Bearer ${this.config.apiKey}`,\n          'Content-Type': 'application/json',\n          'Accept': 'application/json'\n        }\n      });\n      return;\n    }\n    \n    // Check if we have OAuth2 authentication\n    if (this.config.accessToken) {\n      this.apiClient = axios.create({\n        baseURL: this.config.baseUrl || 'https://api.hubapi.com',\n        headers: {\n          'Authorization': `Bearer ${this.config.accessToken}`,\n          'Content-Type': 'application/json',\n          'Accept': 'application/json'\n        }\n      });\n      \n      // Add token refresh interceptor\n      this.apiClient.interceptors.response.use(\n        (response: any) => response,\n        async (error: any) => {\n          const originalRequest = error.config;\n          \n          // If error is 401 and we haven't tried to refresh token yet\n          if (error.response.status === 401 && !originalRequest._retry && this.config.refreshToken) {\n            originalRequest._retry = true;\n            \n            // Check if token needs refresh\n            if (this.config.expiresAt && Date.now() > this.config.expiresAt) {\n              // Refresh token\n              try {\n                const refreshResponse = await axios.post('https://api.hubapi.com/oauth/v1/token', {\n                  grant_type: 'refresh_token',\n                  client_id: this.config.clientId,\n                  client_secret: this.config.clientSecret,\n                  refresh_token: this.config.refreshToken\n                });\n                \n                const responseData = refreshResponse.data as { \n                  access_token: string; \n                  refresh_token?: string; \n                  expires_in: number;\n                };\n                \n                // Update tokens in config\n                this.config.accessToken = responseData.access_token;\n                this.config.refreshToken = responseData.refresh_token || this.config.refreshToken;\n                this.config.expiresAt = Date.now() + (responseData.expires_in * 1000);\n                \n                // Update authorization header\n                originalRequest.headers['Authorization'] = `Bearer ${this.config.accessToken}`;\n                \n                // Retry the request with new token\n                return this.apiClient(originalRequest);\n              } catch (refreshError) {\n                console.error('Token refresh failed:', refreshError);\n                return Promise.reject(refreshError);\n              }\n            }\n          }\n          \n          return Promise.reject(error);\n        }\n      );\n      \n      return;\n    }\n    \n    throw new Error('No authentication method provided for HubSpot integration');\n  }\n  \n  /**\n   * Get OAuth2 authorization URL\n   */\n  getAuthorizationUrl(): string {\n    if (!this.config.clientId || !this.config.redirectUri) {\n      throw new Error('Client ID and redirect URI are required for OAuth2 authorization');\n    }\n    \n    const scopes = [\n      'crm.objects.contacts.read',\n      'crm.objects.contacts.write',\n      'crm.objects.companies.read',\n      'crm.objects.companies.write',\n      'crm.objects.deals.read',\n      'crm.objects.deals.write'\n    ];\n    \n    return `https://app.hubspot.com/oauth/authorize?client_id=${this.config.clientId}&redirect_uri=${encodeURIComponent(this.config.redirectUri)}&scope=${encodeURIComponent(scopes.join(' '))}&response_type=code`;\n  }\n  \n  /**\n   * Handle OAuth2 callback\n   */\n  async handleOAuthCallback(code: string): Promise<void> {\n    if (!this.config.clientId || !this.config.clientSecret || !this.config.redirectUri) {\n      throw new Error('Client ID, client secret, and redirect URI are required for OAuth2 token exchange');\n    }\n    \n    try {\n      const tokenResponse = await axios.post('https://api.hubapi.com/oauth/v1/token', null, {\n        params: {\n          grant_type: 'authorization_code',\n          client_id: this.config.clientId,\n          client_secret: this.config.clientSecret,\n          redirect_uri: this.config.redirectUri,\n          code\n        },\n        headers: {\n          'Content-Type': 'application/x-www-form-urlencoded'\n        }\n      });\n      \n      const responseData = tokenResponse.data as { \n        access_token: string; \n        refresh_token: string; \n        expires_in: number;\n      };\n      \n      // Update config with tokens\n      this.config.accessToken = responseData.access_token;\n      this.config.refreshToken = responseData.refresh_token;\n      this.config.expiresAt = Date.now() + (responseData.expires_in * 1000);\n      \n      // Set up API client with new tokens\n      await this.setupClient();\n    } catch (error) {\n      console.error('OAuth token exchange failed:', error);\n      throw new Error(`Failed to exchange authorization code for tokens: ${getErrorMessage(error)}`);\n    }\n  }\n  \n  /**\n   * Get contacts from HubSpot\n   */\n  async getContacts(limit = 10, after?: string): Promise<HubSpotContact[]> {\n    if (!this.apiClient) {\n      throw new Error('HubSpot integration not initialized');\n    }\n    \n    try {\n      const response = await this.apiClient.get('/crm/v3/objects/contacts', {\n        params: {\n          limit,\n          after,\n          properties: ['firstname', 'lastname', 'email', 'phone', 'company']\n        }\n      });\n      \n      return response.data.results.map((contact: any) => ({\n        id: contact.id,\n        properties: contact.properties,\n        createdAt: contact.createdAt,\n        updatedAt: contact.updatedAt\n      }));\n    } catch (error) {\n      console.error('Failed to get contacts:', error);\n      throw new Error(`Failed to get contacts: ${error.message}`);\n    }\n  }\n  \n  /**\n   * Get companies from HubSpot\n   */\n  async getCompanies(limit = 10, after?: string): Promise<HubSpotCompany[]> {\n    if (!this.apiClient) {\n      throw new Error('HubSpot integration not initialized');\n    }\n    \n    try {\n      const response = await this.apiClient.get('/crm/v3/objects/companies', {\n        params: {\n          limit,\n          after,\n          properties: ['name', 'domain', 'industry', 'website', 'phone', 'address']\n        }\n      });\n      \n      return response.data.results.map((company: any) => ({\n        id: company.id,\n        properties: company.properties,\n        createdAt: company.createdAt,\n        updatedAt: company.updatedAt\n      }));\n    } catch (error) {\n      console.error('Failed to get companies:', error);\n      throw new Error(`Failed to get companies: ${error.message}`);\n    }\n  }\n  \n  /**\n   * Get deals from HubSpot\n   */\n  async getDeals(limit = 10, after?: string): Promise<HubSpotDeal[]> {\n    if (!this.apiClient) {\n      throw new Error('HubSpot integration not initialized');\n    }\n    \n    try {\n      const response = await this.apiClient.get('/crm/v3/objects/deals', {\n        params: {\n          limit,\n          after,\n          properties: ['dealname', 'amount', 'dealstage', 'closedate', 'pipeline'],\n          associations: ['contacts', 'companies']\n        }\n      });\n      \n      return response.data.results.map((deal: any) => ({\n        id: deal.id,\n        properties: deal.properties,\n        createdAt: deal.createdAt,\n        updatedAt: deal.updatedAt,\n        associations: deal.associations\n      }));\n    } catch (error) {\n      console.error('Failed to get deals:', error);\n      throw new Error(`Failed to get deals: ${error.message}`);\n    }\n  }\n  \n  /**\n   * Create a contact in HubSpot\n   */\n  async createContact(properties: Record<string, string>): Promise<HubSpotContact> {\n    if (!this.apiClient) {\n      throw new Error('HubSpot integration not initialized');\n    }\n    \n    try {\n      const response = await this.apiClient.post('/crm/v3/objects/contacts', {\n        properties\n      });\n      \n      return {\n        id: response.data.id,\n        properties: response.data.properties,\n        createdAt: response.data.createdAt,\n        updatedAt: response.data.updatedAt\n      };\n    } catch (error) {\n      console.error('Failed to create contact:', error);\n      throw new Error(`Failed to create contact: ${error.message}`);\n    }\n  }\n  \n  /**\n   * Create a company in HubSpot\n   */\n  async createCompany(properties: Record<string, string>): Promise<HubSpotCompany> {\n    if (!this.apiClient) {\n      throw new Error('HubSpot integration not initialized');\n    }\n    \n    try {\n      const response = await this.apiClient.post('/crm/v3/objects/companies', {\n        properties\n      });\n      \n      return {\n        id: response.data.id,\n        properties: response.data.properties,\n        createdAt: response.data.createdAt,\n        updatedAt: response.data.updatedAt\n      };\n    } catch (error) {\n      console.error('Failed to create company:', error);\n      throw new Error(`Failed to create company: ${error.message}`);\n    }\n  }\n  \n  /**\n   * Create a deal in HubSpot\n   */\n  async createDeal(\n    properties: Record<string, string>,\n    associations?: {\n      contactIds?: string[],\n      companyIds?: string[]\n    }\n  ): Promise<HubSpotDeal> {\n    if (!this.apiClient) {\n      throw new Error('HubSpot integration not initialized');\n    }\n    \n    try {\n      // Prepare request body\n      const requestBody: any = {\n        properties\n      };\n      \n      // Add associations if provided\n      if (associations) {\n        requestBody.associations = [];\n        \n        if (associations.contactIds && associations.contactIds.length > 0) {\n          associations.contactIds.forEach(contactId => {\n            requestBody.associations.push({\n              to: { id: contactId },\n              types: [{ associationCategory: 'HUBSPOT_DEFINED', associationTypeId: 3 }]\n            });\n          });\n        }\n        \n        if (associations.companyIds && associations.companyIds.length > 0) {\n          associations.companyIds.forEach(companyId => {\n            requestBody.associations.push({\n              to: { id: companyId },\n              types: [{ associationCategory: 'HUBSPOT_DEFINED', associationTypeId: 5 }]\n            });\n          });\n        }\n      }\n      \n      const response = await this.apiClient.post('/crm/v3/objects/deals', requestBody);\n      \n      return {\n        id: response.data.id,\n        properties: response.data.properties,\n        createdAt: response.data.createdAt,\n        updatedAt: response.data.updatedAt\n      };\n    } catch (error) {\n      console.error('Failed to create deal:', error);\n      throw new Error(`Failed to create deal: ${error.message}`);\n    }\n  }\n  \n  /**\n   * Get a mock HubSpot OpenAPI document for demo purposes\n   */\n  getMockHubSpotOpenAPI(): string {\n    // This is a simplified version of what HubSpot's OpenAPI spec might look like\n    const mockOpenAPI = {\n      openapi: '3.0.0',\n      info: {\n        title: 'HubSpot API',\n        description: 'HubSpot API for CRM objects and more',\n        version: '3.0.0'\n      },\n      servers: [\n        {\n          url: 'https://api.hubapi.com',\n          description: 'HubSpot API Server'\n        }\n      ],\n      components: {\n        securitySchemes: {\n          oauth2: {\n            type: 'oauth2',\n            description: 'OAuth 2.0 authentication',\n            flows: {\n              authorizationCode: {\n                authorizationUrl: 'https://app.hubspot.com/oauth/authorize',\n                tokenUrl: 'https://api.hubapi.com/oauth/v1/token',\n                refreshUrl: 'https://api.hubapi.com/oauth/v1/token',\n                scopes: {\n                  'crm.objects.contacts.read': 'Read contacts',\n                  'crm.objects.contacts.write': 'Write contacts',\n                  'crm.objects.companies.read': 'Read companies',\n                  'crm.objects.companies.write': 'Write companies',\n                  'crm.objects.deals.read': 'Read deals',\n                  'crm.objects.deals.write': 'Write deals'\n                }\n              }\n            }\n          },\n          apiKey: {\n            type: 'apiKey',\n            name: 'Authorization',\n            in: 'header',\n            description: 'API key authentication using Bearer token'\n          }\n        },\n        schemas: {\n          Contact: {\n            type: 'object',\n            properties: {\n              id: { type: 'string' },\n              properties: {\n                type: 'object',\n                additionalProperties: { type: 'string' }\n              },\n              createdAt: { type: 'string', format: 'date-time' },\n              updatedAt: { type: 'string', format: 'date-time' }\n            }\n          },\n          Company: {\n            type: 'object',\n            properties: {\n              id: { type: 'string' },\n              properties: {\n                type: 'object',\n                additionalProperties: { type: 'string' }\n              },\n              createdAt: { type: 'string', format: 'date-time' },\n              updatedAt: { type: 'string', format: 'date-time' }\n            }\n          },\n          Deal: {\n            type: 'object',\n            properties: {\n              id: { type: 'string' },\n              properties: {\n                type: 'object',\n                additionalProperties: { type: 'string' }\n              },\n              createdAt: { type: 'string', format: 'date-time' },\n              updatedAt: { type: 'string', format: 'date-time' },\n              associations: {\n                type: 'object',\n                properties: {\n                  contacts: {\n                    type: 'object',\n                    properties: {\n                      results: {\n                        type: 'array',\n                        items: {\n                          type: 'object',\n                          properties: {\n                            id: { type: 'string' }\n                          }\n                        }\n                      }\n                    }\n                  },\n                  companies: {\n                    type: 'object',\n                    properties: {\n                      results: {\n                        type: 'array',\n                        items: {\n                          type: 'object',\n                          properties: {\n                            id: { type: 'string' }\n                          }\n                        }\n                      }\n                    }\n                  }\n                }\n              }\n            }\n          }\n        }\n      },\n      paths: {\n        '/crm/v3/objects/contacts': {\n          get: {\n            summary: 'Get contacts',\n            description: 'Get a list of contacts',\n            tags: ['Contacts'],\n            parameters: [\n              {\n                name: 'limit',\n                in: 'query',\n                required: false,\n                schema: { type: 'integer', default: 10 }\n              },\n              {\n                name: 'after',\n                in: 'query',\n                required: false,\n                schema: { type: 'string' }\n              },\n              {\n                name: 'properties',\n                in: 'query',\n                required: false,\n                schema: { type: 'array', items: { type: 'string' } }\n              }\n            ],\n            responses: {\n              '200': {\n                description: 'Successful operation',\n                content: {\n                  'application/json': {\n                    schema: {\n                      type: 'object',\n                      properties: {\n                        results: {\n                          type: 'array',\n                          items: { '$ref': '#/components/schemas/Contact' }\n                        },\n                        paging: {\n                          type: 'object',\n                          properties: {\n                            next: { type: 'string' }\n                          }\n                        }\n                      }\n                    }\n                  }\n                }\n              }\n            },\n            security: [\n              { oauth2: ['crm.objects.contacts.read'] },\n              { apiKey: [] }\n            ]\n          },\n          post: {\n            summary: 'Create contact',\n            description: 'Create a new contact',\n            tags: ['Contacts'],\n            requestBody: {\n              required: true,\n              content: {\n                'application/json': {\n                  schema: {\n                    type: 'object',\n                    properties: {\n                      properties: {\n                        type: 'object',\n                        additionalProperties: { type: 'string' }\n                      }\n                    },\n                    required: ['properties']\n                  }\n                }\n              }\n            },\n            responses: {\n              '201': {\n                description: 'Created',\n                content: {\n                  'application/json': {\n                    schema: { '$ref': '#/components/schemas/Contact' }\n                  }\n                }\n              }\n            },\n            security: [\n              { oauth2: ['crm.objects.contacts.write'] },\n              { apiKey: [] }\n            ]\n          }\n        },\n        '/crm/v3/objects/contacts/{contactId}': {\n          get: {\n            summary: 'Get contact by ID',\n            description: 'Get a specific contact by ID',\n            tags: ['Contacts'],\n            parameters: [\n              {\n                name: 'contactId',\n                in: 'path',\n                required: true,\n                schema: { type: 'string' }\n              },\n              {\n                name: 'properties',\n                in: 'query',\n                required: false,\n                schema: { type: 'array', items: { type: 'string' } }\n              }\n            ],\n            responses: {\n              '200': {\n                description: 'Successful operation',\n                content: {\n                  'application/json': {\n                    schema: { '$ref': '#/components/schemas/Contact' }\n                  }\n                }\n              }\n            },\n            security: [\n              { oauth2: ['crm.objects.contacts.read'] },\n              { apiKey: [] }\n            ]\n          },\n          patch: {\n            summary: 'Update contact',\n            description: 'Update a specific contact',\n            tags: ['Contacts'],\n            parameters: [\n              {\n                name: 'contactId',\n                in: 'path',\n                required: true,\n                schema: { type: 'string' }\n              }\n            ],\n            requestBody: {\n              required: true,\n              content: {\n                'application/json': {\n                  schema: {\n                    type: 'object',\n                    properties: {\n                      properties: {\n                        type: 'object',\n                        additionalProperties: { type: 'string' }\n                      }\n                    },\n                    required: ['properties']\n                  }\n                }\n              }\n            },\n            responses: {\n              '200': {\n                description: 'Successfully updated',\n                content: {\n                  'application/json': {\n                    schema: { '$ref': '#/components/schemas/Contact' }\n                  }\n                }\n              }\n            },\n            security: [\n              { oauth2: ['crm.objects.contacts.write'] },\n              { apiKey: [] }\n            ]\n          }\n        },\n        '/crm/v3/objects/companies': {\n          get: {\n            summary: 'Get companies',\n            description: 'Get a list of companies',\n            tags: ['Companies'],\n            parameters: [\n              {\n                name: 'limit',\n                in: 'query',\n                required: false,\n                schema: { type: 'integer', default: 10 }\n              },\n              {\n                name: 'after',\n                in: 'query',\n                required: false,\n                schema: { type: 'string' }\n              },\n              {\n                name: 'properties',\n                in: 'query',\n                required: false,\n                schema: { type: 'array', items: { type: 'string' } }\n              }\n            ],\n            responses: {\n              '200': {\n                description: 'Successful operation',\n                content: {\n                  'application/json': {\n                    schema: {\n                      type: 'object',\n                      properties: {\n                        results: {\n                          type: 'array',\n                          items: { '$ref': '#/components/schemas/Company' }\n                        },\n                        paging: {\n                          type: 'object',\n                          properties: {\n                            next: { type: 'string' }\n                          }\n                        }\n                      }\n                    }\n                  }\n                }\n              }\n            },\n            security: [\n              { oauth2: ['crm.objects.companies.read'] },\n              { apiKey: [] }\n            ]\n          },\n          post: {\n            summary: 'Create company',\n            description: 'Create a new company',\n            tags: ['Companies'],\n            requestBody: {\n              required: true,\n              content: {\n                'application/json': {\n                  schema: {\n                    type: 'object',\n                    properties: {\n                      properties: {\n                        type: 'object',\n                        additionalProperties: { type: 'string' }\n                      }\n                    },\n                    required: ['properties']\n                  }\n                }\n              }\n            },\n            responses: {\n              '201': {\n                description: 'Created',\n                content: {\n                  'application/json': {\n                    schema: { '$ref': '#/components/schemas/Company' }\n                  }\n                }\n              }\n            },\n            security: [\n              { oauth2: ['crm.objects.companies.write'] },\n              { apiKey: [] }\n            ]\n          }\n        },\n        '/crm/v3/objects/deals': {\n          get: {\n            summary: 'Get deals',\n            description: 'Get a list of deals',\n            tags: ['Deals'],\n            parameters: [\n              {\n                name: 'limit',\n                in: 'query',\n                required: false,\n                schema: { type: 'integer', default: 10 }\n              },\n              {\n                name: 'after',\n                in: 'query',\n                required: false,\n                schema: { type: 'string' }\n              },\n              {\n                name: 'properties',\n                in: 'query',\n                required: false,\n                schema: { type: 'array', items: { type: 'string' } }\n              },\n              {\n                name: 'associations',\n                in: 'query',\n                required: false,\n                schema: { type: 'array', items: { type: 'string' } }\n              }\n            ],\n            responses: {\n              '200': {\n                description: 'Successful operation',\n                content: {\n                  'application/json': {\n                    schema: {\n                      type: 'object',\n                      properties: {\n                        results: {\n                          type: 'array',\n                          items: { '$ref': '#/components/schemas/Deal' }\n                        },\n                        paging: {\n                          type: 'object',\n                          properties: {\n                            next: { type: 'string' }\n                          }\n                        }\n                      }\n                    }\n                  }\n                }\n              }\n            },\n            security: [\n              { oauth2: ['crm.objects.deals.read'] },\n              { apiKey: [] }\n            ]\n          },\n          post: {\n            summary: 'Create deal',\n            description: 'Create a new deal',\n            tags: ['Deals'],\n            requestBody: {\n              required: true,\n              content: {\n                'application/json': {\n                  schema: {\n                    type: 'object',\n                    properties: {\n                      properties: {\n                        type: 'object',\n                        additionalProperties: { type: 'string' }\n                      },\n                      associations: {\n                        type: 'array',\n                        items: {\n                          type: 'object',\n                          properties: {\n                            to: {\n                              type: 'object',\n                              properties: {\n                                id: { type: 'string' }\n                              }\n                            },\n                            types: {\n                              type: 'array',\n                              items: {\n                                type: 'object',\n                                properties: {\n                                  associationCategory: { type: 'string' },\n                                  associationTypeId: { type: 'integer' }\n                                }\n                              }\n                            }\n                          }\n                        }\n                      }\n                    },\n                    required: ['properties']\n                  }\n                }\n              }\n            },\n            responses: {\n              '201': {\n                description: 'Created',\n                content: {\n                  'application/json': {\n                    schema: { '$ref': '#/components/schemas/Deal' }\n                  }\n                }\n              }\n            },\n            security: [\n              { oauth2: ['crm.objects.deals.write'] },\n              { apiKey: [] }\n            ]\n          }\n        }\n      }\n    };\n    \n    return JSON.stringify(mockOpenAPI);\n  }\n}\n\n// Export singleton instance\nexport const hubspotIntegration = new HubSpotIntegration({\n  baseUrl: 'https://api.hubapi.com'\n});\n\n ","usedDeprecatedRules":[]},{"filePath":"/home/vonj/Github/Nexus/src/lib/integrations/integrationDataAggregator.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":17,"column":10,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":17,"endColumn":13,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[466,469],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[466,469],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":20,"column":28,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":20,"endColumn":31,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[576,579],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[576,579],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":96,"column":30,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":96,"endColumn":33,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2206,2209],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2206,2209],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":102,"column":30,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":102,"endColumn":33,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2336,2339],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2336,2339],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":103,"column":46,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":103,"endColumn":49,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2399,2402],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2399,2402],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'companyId' is defined but never used.","line":123,"column":47,"nodeType":null,"messageId":"unusedVar","endLine":123,"endColumn":56},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":210,"column":51,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":210,"endColumn":54,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[5699,5702],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[5699,5702],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":235,"column":44,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":235,"endColumn":47,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[6556,6559],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[6556,6559],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":426,"column":45,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":426,"endColumn":48,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[13610,13613],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[13610,13613],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":489,"column":35,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":489,"endColumn":38,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[15702,15705],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[15702,15705],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":507,"column":33,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":507,"endColumn":36,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[16322,16325],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[16322,16325],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":507,"column":51,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":507,"endColumn":54,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[16340,16343],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[16340,16343],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":779,"column":36,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":779,"endColumn":39,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[26624,26627],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[26624,26627],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":13,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\n * Integration Data Aggregator\n * Pillar: 1,2,3 - Unified business intelligence across all integrations\n * Aggregates data from all connected services for comprehensive insights\n */\n\nimport { supabase } from './core/supabase';\nimport { logger } from './security/logger';\nimport { produce } from 'immer';\n\n// Core data types for aggregation\nexport interface AggregatedDataPoint {\n  id: string;\n  source: string;\n  category: DataCategory;\n  type: string;\n  value: any;\n  normalizedValue: number; // 0-100 scale for comparison\n  timestamp: string;\n  metadata: Record<string, any>;\n  tags: string[];\n  businessImpact: BusinessImpact;\n}\n\nexport interface BusinessImpact {\n  revenue?: number;\n  efficiency?: number;\n  satisfaction?: number;\n  growth?: number;\n  risk?: number;\n}\n\nexport type DataCategory = \n  | 'sales' \n  | 'marketing' \n  | 'finance' \n  | 'operations' \n  | 'support' \n  | 'hr' \n  | 'analytics' \n  | 'security';\n\nexport interface CrossPlatformInsight {\n  id: string;\n  title: string;\n  description: string;\n  type: 'trend' | 'correlation' | 'anomaly' | 'opportunity' | 'alert';\n  severity: 'low' | 'medium' | 'high' | 'critical';\n  confidence: number; // 0-1\n  sources: string[];\n  dataPoints: string[];\n  recommendations: string[];\n  estimatedImpact: BusinessImpact;\n  createdAt: string;\n  expiresAt?: string;\n}\n\nexport interface UnifiedMetrics {\n  revenue: {\n    total: number;\n    growth: number;\n    sources: Record<string, number>;\n    trend: 'up' | 'down' | 'stable';\n  };\n  efficiency: {\n    score: number;\n    bottlenecks: string[];\n    automationOpportunities: string[];\n  };\n  customerSatisfaction: {\n    score: number;\n    sources: Record<string, number>;\n    issues: string[];\n  };\n  operationalHealth: {\n    score: number;\n    alerts: number;\n    uptime: number;\n  };\n}\n\nexport interface AggregationConfig {\n  sources: string[];\n  refreshInterval: number; // minutes\n  retentionDays: number;\n  enableRealtime: boolean;\n  alertThresholds: Record<string, number>;\n  businessRules: BusinessRule[];\n}\n\nexport interface BusinessRule {\n  id: string;\n  name: string;\n  condition: string; // SQL-like condition\n  action: 'alert' | 'automate' | 'recommend';\n  parameters: Record<string, any>;\n  isActive: boolean;\n}\n\nclass IntegrationDataAggregator {\n  private config: AggregationConfig;\n  private cache: Map<string, any> = new Map();\n  private realTimeSubscriptions: Map<string, any> = new Map();\n\n  constructor() {\n    this.config = {\n      sources: [],\n      refreshInterval: 15, // 15 minutes\n      retentionDays: 90,\n      enableRealtime: true,\n      alertThresholds: {\n        revenueDropThreshold: 0.1, // 10% drop\n        efficiencyDropThreshold: 0.15, // 15% drop\n        errorRateThreshold: 0.05, // 5% error rate\n      },\n      businessRules: []\n    };\n  }\n\n  /**\n   * Initialize aggregation for a user\n   */\n  async initializeAggregation(userId: string, companyId?: string): Promise<void> {\n    try {\n      // Get user's active integrations\n      const { data: integrations } = await supabase\n        .from('user_integrations')\n        .select(`\n          id,\n          integration_id,\n          config,\n          integrations!inner(name, slug, category)\n        `)\n        .eq('user_id', userId)\n        .eq('status', 'active');\n\n      if (!integrations) return;\n\n      // Update configuration based on available integrations\n      this.config = produce(this.config, draft => {\n        draft.sources = integrations.map(i => i.integrations.slug);\n      });\n\n      // Start real-time subscriptions if enabled\n      if (this.config.enableRealtime) {\n        await this.setupRealTimeSubscriptions(userId);\n      }\n\n      logger.info({ userId, sources: this.config.sources }, 'Initialized data aggregation');\n    } catch (error) {\n      logger.error({ error, userId }, 'Failed to initialize aggregation');\n      throw error;\n    }\n  }\n\n  /**\n   * Aggregate data from all sources\n   */\n  async aggregateAllData(userId: string, timeframe: 'hour' | 'day' | 'week' | 'month' = 'day'): Promise<AggregatedDataPoint[]> {\n    try {\n      const aggregatedData: AggregatedDataPoint[] = [];\n      \n      // Get data from each integration source\n      for (const source of this.config.sources) {\n        const sourceData = await this.aggregateSourceData(userId, source, timeframe);\n        aggregatedData.push(...sourceData);\n      }\n\n      // Apply business rules and enrichment\n      const enrichedData = await this.enrichAggregatedData(aggregatedData);\n      \n      // Cache results\n      const cacheKey = `aggregated_${userId}_${timeframe}`;\n      this.cache.set(cacheKey, enrichedData);\n\n      return enrichedData;\n    } catch (error) {\n      logger.error({ error, userId }, 'Failed to aggregate data');\n      throw error;\n    }\n  }\n\n  /**\n   * Aggregate data from a specific source\n   */\n  private async aggregateSourceData(userId: string, source: string, timeframe: string): Promise<AggregatedDataPoint[]> {\n    const timeframeDays = { hour: 0.04, day: 1, week: 7, month: 30 }[timeframe] || 1;\n    const startDate = new Date(Date.now() - timeframeDays * 24 * 60 * 60 * 1000);\n\n    const { data: rawData } = await supabase\n      .from('integration_data')\n      .select(`\n        *,\n        user_integrations!inner(\n          integrations!inner(name, slug, category)\n        )\n      `)\n      .eq('user_integrations.user_id', userId)\n      .eq('user_integrations.integrations.slug', source)\n      .gte('data_timestamp', startDate.toISOString());\n\n    if (!rawData) return [];\n\n    return rawData.map(item => this.transformToAggregatedDataPoint(item));\n  }\n\n  /**\n   * Transform raw integration data to aggregated data point\n   */\n  private transformToAggregatedDataPoint(rawItem: any): AggregatedDataPoint {\n    const integration = rawItem.user_integrations.integrations;\n    const businessImpact = this.calculateBusinessImpact(rawItem, integration.category);\n\n    return {\n      id: rawItem.id,\n      source: integration.slug,\n      category: this.mapToDataCategory(integration.category),\n      type: rawItem.data_type,\n      value: rawItem.processed_data || rawItem.raw_data,\n      normalizedValue: this.normalizeValue(rawItem, integration.category),\n      timestamp: rawItem.data_timestamp,\n      metadata: {\n        integrationName: integration.name,\n        syncBatchId: rawItem.sync_batch_id,\n        ...rawItem.raw_data.metadata || {}\n      },\n      tags: this.generateTags(rawItem, integration),\n      businessImpact\n    };\n  }\n\n  /**\n   * Calculate business impact of data point\n   */\n  private calculateBusinessImpact(rawItem: any, category: string): BusinessImpact {\n    const impact: BusinessImpact = {};\n\n    switch (category) {\n      case 'crm-sales':\n        if (rawItem.data_type === 'deals') {\n          impact.revenue = rawItem.processed_data?.amount || 0;\n          impact.growth = rawItem.processed_data?.probability || 0;\n        }\n        break;\n      case 'finance-accounting':\n        if (rawItem.data_type === 'transactions') {\n          impact.revenue = rawItem.processed_data?.amount || 0;\n        }\n        break;\n      case 'marketing-advertising':\n        if (rawItem.data_type === 'campaigns') {\n          impact.efficiency = rawItem.processed_data?.conversionRate || 0;\n          impact.growth = rawItem.processed_data?.reach || 0;\n        }\n        break;\n      case 'operations-productivity':\n        impact.efficiency = rawItem.processed_data?.productivityScore || 0;\n        break;\n      case 'analytics-bi':\n        impact.satisfaction = rawItem.processed_data?.userSatisfaction || 0;\n        break;\n    }\n\n    return impact;\n  }\n\n  /**\n   * Generate cross-platform insights\n   */\n  async generateCrossPlatformInsights(userId: string): Promise<CrossPlatformInsight[]> {\n    try {\n      const aggregatedData = await this.aggregateAllData(userId, 'week');\n      const insights: CrossPlatformInsight[] = [];\n\n      // Revenue correlation analysis\n      const revenueInsight = this.analyzeRevenueCorrelations(aggregatedData);\n      if (revenueInsight) insights.push(revenueInsight);\n\n      // Efficiency bottleneck detection\n      const efficiencyInsight = this.detectEfficiencyBottlenecks(aggregatedData);\n      if (efficiencyInsight) insights.push(efficiencyInsight);\n\n      // Customer journey analysis\n      const customerInsight = this.analyzeCustomerJourney(aggregatedData);\n      if (customerInsight) insights.push(customerInsight);\n\n      // Anomaly detection\n      const anomalies = this.detectAnomalies(aggregatedData);\n      insights.push(...anomalies);\n\n      // Automation opportunities\n      const automationInsights = this.identifyAutomationOpportunities(aggregatedData);\n      insights.push(...automationInsights);\n\n      return insights;\n    } catch (error) {\n      logger.error({ error, userId }, 'Failed to generate cross-platform insights');\n      return [];\n    }\n  }\n\n  /**\n   * Analyze revenue correlations across platforms\n   */\n  private analyzeRevenueCorrelations(data: AggregatedDataPoint[]): CrossPlatformInsight | null {\n    const revenueData = data.filter(d => d.businessImpact.revenue && d.businessImpact.revenue > 0);\n    \n    if (revenueData.length < 2) return null;\n\n    const salesData = revenueData.filter(d => d.category === 'sales');\n    const marketingData = revenueData.filter(d => d.category === 'marketing');\n    \n    if (salesData.length > 0 && marketingData.length > 0) {\n      const correlation = this.calculateCorrelation(salesData, marketingData);\n      \n      if (correlation > 0.7) {\n        return {\n          id: `revenue-correlation-${Date.now()}`,\n          title: 'Strong Marketing-Sales Revenue Correlation',\n          description: `Marketing activities show strong correlation (${(correlation * 100).toFixed(1)}%) with sales revenue. Increasing marketing spend could drive significant revenue growth.`,\n          type: 'correlation',\n          severity: 'medium',\n          confidence: correlation,\n          sources: [...new Set([...salesData.map(d => d.source), ...marketingData.map(d => d.source)])],\n          dataPoints: [...salesData.map(d => d.id), ...marketingData.map(d => d.id)],\n          recommendations: [\n            'Increase marketing budget for high-performing campaigns',\n            'Align marketing and sales team goals',\n            'Implement attribution tracking for better insights'\n          ],\n          estimatedImpact: {\n            revenue: this.estimateRevenueImpact(revenueData),\n            growth: 15\n          },\n          createdAt: new Date().toISOString(),\n          expiresAt: new Date(Date.now() + 7 * 24 * 60 * 60 * 1000).toISOString()\n        };\n      }\n    }\n\n    return null;\n  }\n\n  /**\n   * Detect efficiency bottlenecks\n   */\n  private detectEfficiencyBottlenecks(data: AggregatedDataPoint[]): CrossPlatformInsight | null {\n    const efficiencyData = data.filter(d => d.businessImpact.efficiency !== undefined);\n    \n    if (efficiencyData.length === 0) return null;\n\n    const avgEfficiency = efficiencyData.reduce((sum, d) => sum + (d.businessImpact.efficiency || 0), 0) / efficiencyData.length;\n    const lowEfficiencyPoints = efficiencyData.filter(d => (d.businessImpact.efficiency || 0) < avgEfficiency * 0.7);\n\n    if (lowEfficiencyPoints.length > 0) {\n      const bottleneckSources = [...new Set(lowEfficiencyPoints.map(d => d.source))];\n      \n      return {\n        id: `efficiency-bottleneck-${Date.now()}`,\n        title: 'Efficiency Bottlenecks Detected',\n        description: `${bottleneckSources.length} integration${bottleneckSources.length > 1 ? 's' : ''} showing below-average efficiency. Focus on optimizing these areas for maximum impact.`,\n        type: 'opportunity',\n        severity: 'medium',\n        confidence: 0.8,\n        sources: bottleneckSources,\n        dataPoints: lowEfficiencyPoints.map(d => d.id),\n        recommendations: [\n          'Review processes in low-efficiency areas',\n          'Implement automation where possible',\n          'Provide additional training for affected teams',\n          'Consider workflow optimization tools'\n        ],\n        estimatedImpact: {\n          efficiency: 25,\n          revenue: this.estimateEfficiencyImpact(lowEfficiencyPoints)\n        },\n        createdAt: new Date().toISOString()\n      };\n    }\n\n    return null;\n  }\n\n  /**\n   * Generate unified metrics across all integrations\n   */\n  async generateUnifiedMetrics(userId: string): Promise<UnifiedMetrics> {\n    try {\n      const aggregatedData = await this.aggregateAllData(userId, 'month');\n      \n      return {\n        revenue: this.calculateUnifiedRevenue(aggregatedData),\n        efficiency: this.calculateUnifiedEfficiency(aggregatedData),\n        customerSatisfaction: this.calculateUnifiedSatisfaction(aggregatedData),\n        operationalHealth: this.calculateOperationalHealth(aggregatedData)\n      };\n    } catch (error) {\n      logger.error({ error, userId }, 'Failed to generate unified metrics');\n      throw error;\n    }\n  }\n\n  /**\n   * Set up real-time data subscriptions\n   */\n  private async setupRealTimeSubscriptions(userId: string): Promise<void> {\n    // Subscribe to integration data changes\n    const subscription = supabase\n      .channel(`integration_data_${userId}`)\n      .on('postgres_changes', {\n        event: 'INSERT',\n        schema: 'public',\n        table: 'integration_data',\n        filter: `user_integrations.user_id=eq.${userId}`\n      }, (payload) => {\n        this.handleRealTimeDataUpdate(payload);\n      })\n      .subscribe();\n\n    this.realTimeSubscriptions.set(userId, subscription);\n  }\n\n  /**\n   * Handle real-time data updates\n   */\n  private handleRealTimeDataUpdate(payload: any): void {\n    // Invalidate relevant caches\n    this.cache.clear();\n    \n    // Process new data point\n    const newDataPoint = this.transformToAggregatedDataPoint(payload.new);\n    \n    // Check for immediate alerts\n    this.checkAlertConditions([newDataPoint]);\n  }\n\n  /**\n   * Check alert conditions\n   */\n  private async checkAlertConditions(dataPoints: AggregatedDataPoint[]): Promise<void> {\n    for (const point of dataPoints) {\n      // Revenue drop alert\n      if (point.businessImpact.revenue && point.businessImpact.revenue < 0) {\n        const dropPercentage = Math.abs(point.businessImpact.revenue) / 100;\n        if (dropPercentage > this.config.alertThresholds.revenueDropThreshold) {\n          await this.triggerAlert('revenue_drop', point);\n        }\n      }\n\n      // Efficiency drop alert\n      if (point.businessImpact.efficiency && point.businessImpact.efficiency < 50) {\n        await this.triggerAlert('efficiency_drop', point);\n      }\n    }\n  }\n\n  /**\n   * Trigger alert\n   */\n  private async triggerAlert(alertType: string, dataPoint: AggregatedDataPoint): Promise<void> {\n    logger.warn({ alertType, dataPoint }, 'Integration alert triggered');\n    \n    // Store alert in database\n    await supabase.from('ai_integration_alerts').insert({\n      alert_type: alertType,\n      source: dataPoint.source,\n      data_point_id: dataPoint.id,\n      severity: this.getAlertSeverity(alertType),\n      message: this.getAlertMessage(alertType, dataPoint),\n      metadata: dataPoint.metadata\n    });\n  }\n\n  // Helper methods for calculations and transformations\n  private mapToDataCategory(integrationCategory: string): DataCategory {\n    const mapping: Record<string, DataCategory> = {\n      'crm-sales': 'sales',\n      'marketing-advertising': 'marketing',\n      'finance-accounting': 'finance',\n      'operations-productivity': 'operations',\n      'communication': 'operations',\n      'analytics-bi': 'analytics',\n      'security': 'security',\n      'hr-people': 'hr'\n    };\n    return mapping[integrationCategory] || 'operations';\n  }\n\n  private normalizeValue(rawItem: any, category: string): number {\n    // Normalize different types of values to 0-100 scale\n    // This is a simplified implementation - would be more sophisticated in production\n    if (rawItem.processed_data?.normalizedScore) {\n      return rawItem.processed_data.normalizedScore;\n    }\n    \n    // Default normalization based on category\n    switch (category) {\n      case 'crm-sales':\n        return Math.min(100, (rawItem.processed_data?.amount || 0) / 1000);\n      case 'analytics-bi':\n        return rawItem.processed_data?.score || 50;\n      default:\n        return 50;\n    }\n  }\n\n  private generateTags(rawItem: any, integration: any): string[] {\n    const tags = [integration.category, rawItem.data_type];\n    \n    if (rawItem.processed_data?.priority) {\n      tags.push(`priority:${rawItem.processed_data.priority}`);\n    }\n    \n    if (rawItem.processed_data?.status) {\n      tags.push(`status:${rawItem.processed_data.status}`);\n    }\n    \n    return tags;\n  }\n\n  private calculateCorrelation(data1: AggregatedDataPoint[], data2: AggregatedDataPoint[]): number {\n    // Simplified correlation calculation\n    // In production, this would use proper statistical methods\n    const values1 = data1.map(d => d.normalizedValue);\n    const values2 = data2.map(d => d.normalizedValue);\n    \n    if (values1.length !== values2.length) return 0;\n    \n    const mean1 = values1.reduce((a, b) => a + b, 0) / values1.length;\n    const mean2 = values2.reduce((a, b) => a + b, 0) / values2.length;\n    \n    let numerator = 0;\n    let denominator1 = 0;\n    let denominator2 = 0;\n    \n    for (let i = 0; i < values1.length; i++) {\n      const diff1 = values1[i] - mean1;\n      const diff2 = values2[i] - mean2;\n      numerator += diff1 * diff2;\n      denominator1 += diff1 * diff1;\n      denominator2 += diff2 * diff2;\n    }\n    \n    const denominator = Math.sqrt(denominator1 * denominator2);\n    return denominator === 0 ? 0 : numerator / denominator;\n  }\n\n  private estimateRevenueImpact(data: AggregatedDataPoint[]): number {\n    return data.reduce((sum, d) => sum + (d.businessImpact.revenue || 0), 0);\n  }\n\n  private estimateEfficiencyImpact(data: AggregatedDataPoint[]): number {\n    // Estimate revenue impact of efficiency improvements\n    const avgRevenue = data.reduce((sum, d) => sum + (d.businessImpact.revenue || 0), 0) / data.length;\n    return avgRevenue * 0.15; // 15% improvement estimate\n  }\n\n  private calculateUnifiedRevenue(data: AggregatedDataPoint[]) {\n    const revenueData = data.filter(d => d.businessImpact.revenue);\n    const total = revenueData.reduce((sum, d) => sum + (d.businessImpact.revenue || 0), 0);\n    \n    // Calculate growth (simplified)\n    const recentData = revenueData.filter(d => \n      new Date(d.timestamp) > new Date(Date.now() - 7 * 24 * 60 * 60 * 1000)\n    );\n    const recentTotal = recentData.reduce((sum, d) => sum + (d.businessImpact.revenue || 0), 0);\n    const growth = recentData.length > 0 ? (recentTotal / total) * 100 - 100 : 0;\n    \n    // Group by source\n    const sources: Record<string, number> = {};\n    revenueData.forEach(d => {\n      sources[d.source] = (sources[d.source] || 0) + (d.businessImpact.revenue || 0);\n    });\n    \n    return {\n      total,\n      growth,\n      sources,\n      trend: growth > 5 ? 'up' as const : growth < -5 ? 'down' as const : 'stable' as const\n    };\n  }\n\n  private calculateUnifiedEfficiency(data: AggregatedDataPoint[]) {\n    const efficiencyData = data.filter(d => d.businessImpact.efficiency !== undefined);\n    const score = efficiencyData.length > 0 \n      ? efficiencyData.reduce((sum, d) => sum + (d.businessImpact.efficiency || 0), 0) / efficiencyData.length\n      : 0;\n    \n    const lowEfficiencyPoints = efficiencyData.filter(d => (d.businessImpact.efficiency || 0) < score * 0.8);\n    const bottlenecks = [...new Set(lowEfficiencyPoints.map(d => d.source))];\n    \n    return {\n      score,\n      bottlenecks,\n      automationOpportunities: this.identifyAutomationOpportunities(data).map(i => i.title)\n    };\n  }\n\n  private calculateUnifiedSatisfaction(data: AggregatedDataPoint[]) {\n    const satisfactionData = data.filter(d => d.businessImpact.satisfaction !== undefined);\n    const score = satisfactionData.length > 0\n      ? satisfactionData.reduce((sum, d) => sum + (d.businessImpact.satisfaction || 0), 0) / satisfactionData.length\n      : 0;\n    \n    const sources: Record<string, number> = {};\n    satisfactionData.forEach(d => {\n      sources[d.source] = (sources[d.source] || 0) + (d.businessImpact.satisfaction || 0);\n    });\n    \n    const issues = data\n      .filter(d => d.tags.includes('issue') || d.tags.includes('complaint'))\n      .map(d => d.source);\n    \n    return { score, sources, issues: [...new Set(issues)] };\n  }\n\n  private calculateOperationalHealth(data: AggregatedDataPoint[]) {\n    const healthData = data.filter(d => d.category === 'operations');\n    const score = healthData.length > 0 ? 85 : 0; // Simplified calculation\n    \n    const alertData = data.filter(d => d.tags.includes('alert') || d.tags.includes('error'));\n    const alerts = alertData.length;\n    \n    const uptimeData = data.filter(d => d.type === 'uptime');\n    const uptime = uptimeData.length > 0 \n      ? uptimeData.reduce((sum, d) => sum + (d.normalizedValue || 0), 0) / uptimeData.length\n      : 99;\n    \n    return { score, alerts, uptime };\n  }\n\n  private analyzeCustomerJourney(data: AggregatedDataPoint[]): CrossPlatformInsight | null {\n    // Simplified customer journey analysis\n    const customerData = data.filter(d => \n      d.category === 'sales' || d.category === 'marketing' || d.category === 'support'\n    );\n    \n    if (customerData.length < 5) return null;\n    \n    return {\n      id: `customer-journey-${Date.now()}`,\n      title: 'Customer Journey Optimization Opportunity',\n      description: 'Analysis of customer touchpoints reveals opportunities to improve conversion rates and satisfaction.',\n      type: 'opportunity',\n      severity: 'medium',\n      confidence: 0.75,\n      sources: [...new Set(customerData.map(d => d.source))],\n      dataPoints: customerData.map(d => d.id),\n      recommendations: [\n        'Streamline handoffs between marketing and sales',\n        'Implement customer success automation',\n        'Create unified customer view across platforms'\n      ],\n      estimatedImpact: {\n        satisfaction: 20,\n        revenue: 10000\n      },\n      createdAt: new Date().toISOString()\n    };\n  }\n\n  private detectAnomalies(data: AggregatedDataPoint[]): CrossPlatformInsight[] {\n    // Simplified anomaly detection\n    const insights: CrossPlatformInsight[] = [];\n    \n    // Check for sudden spikes or drops\n    const recentData = data.filter(d => \n      new Date(d.timestamp) > new Date(Date.now() - 24 * 60 * 60 * 1000)\n    );\n    \n    const historicalData = data.filter(d => \n      new Date(d.timestamp) <= new Date(Date.now() - 24 * 60 * 60 * 1000)\n    );\n    \n    if (recentData.length > 0 && historicalData.length > 0) {\n      const recentAvg = recentData.reduce((sum, d) => sum + d.normalizedValue, 0) / recentData.length;\n      const historicalAvg = historicalData.reduce((sum, d) => sum + d.normalizedValue, 0) / historicalData.length;\n      \n      const change = (recentAvg - historicalAvg) / historicalAvg;\n      \n      if (Math.abs(change) > 0.3) { // 30% change\n        insights.push({\n          id: `anomaly-${Date.now()}`,\n          title: `Significant ${change > 0 ? 'Increase' : 'Decrease'} Detected`,\n          description: `Data shows a ${Math.abs(change * 100).toFixed(1)}% ${change > 0 ? 'increase' : 'decrease'} in the last 24 hours compared to historical average.`,\n          type: 'anomaly',\n          severity: Math.abs(change) > 0.5 ? 'high' : 'medium',\n          confidence: 0.8,\n          sources: [...new Set(recentData.map(d => d.source))],\n          dataPoints: recentData.map(d => d.id),\n          recommendations: [\n            'Investigate root cause of change',\n            'Monitor trend closely',\n            'Adjust forecasts if trend continues'\n          ],\n          estimatedImpact: {\n            risk: Math.abs(change) * 100\n          },\n          createdAt: new Date().toISOString()\n        });\n      }\n    }\n    \n    return insights;\n  }\n\n  private identifyAutomationOpportunities(data: AggregatedDataPoint[]): CrossPlatformInsight[] {\n    // Simplified automation opportunity detection\n    const manualProcesses = data.filter(d => \n      d.tags.includes('manual') || d.tags.includes('repetitive')\n    );\n    \n    if (manualProcesses.length === 0) return [];\n    \n    const sources = [...new Set(manualProcesses.map(d => d.source))];\n    \n    return [{\n      id: `automation-opportunity-${Date.now()}`,\n      title: 'Automation Opportunities Identified',\n      description: `${manualProcesses.length} manual processes detected across ${sources.length} integration${sources.length > 1 ? 's' : ''}. These could be automated for significant efficiency gains.`,\n      type: 'opportunity',\n      severity: 'medium',\n      confidence: 0.85,\n      sources,\n      dataPoints: manualProcesses.map(d => d.id),\n      recommendations: [\n        'Implement workflow automation for repetitive tasks',\n        'Use n8n workflows to connect systems',\n        'Train team on automation tools',\n        'Start with highest-impact, lowest-complexity processes'\n      ],\n      estimatedImpact: {\n        efficiency: 40,\n        revenue: manualProcesses.length * 500 // $500 per automated process\n      },\n      createdAt: new Date().toISOString()\n    }];\n  }\n\n  private async enrichAggregatedData(data: AggregatedDataPoint[]): Promise<AggregatedDataPoint[]> {\n    // Apply business rules and enrichment\n    return data.map(point => {\n      // Add additional tags based on business rules\n      if (point.businessImpact.revenue && point.businessImpact.revenue > 1000) {\n        point.tags.push('high-value');\n      }\n      \n      if (point.businessImpact.efficiency && point.businessImpact.efficiency < 30) {\n        point.tags.push('low-efficiency');\n      }\n      \n      return point;\n    });\n  }\n\n  private getAlertSeverity(alertType: string): string {\n    const severityMap: Record<string, string> = {\n      'revenue_drop': 'high',\n      'efficiency_drop': 'medium',\n      'error_spike': 'high',\n      'anomaly': 'medium'\n    };\n    return severityMap[alertType] || 'low';\n  }\n\n  private getAlertMessage(alertType: string, dataPoint: AggregatedDataPoint): string {\n    const messages: Record<string, string> = {\n      'revenue_drop': `Revenue drop detected in ${dataPoint.source}`,\n      'efficiency_drop': `Efficiency drop detected in ${dataPoint.source}`,\n      'error_spike': `Error spike detected in ${dataPoint.source}`,\n      'anomaly': `Anomaly detected in ${dataPoint.source}`\n    };\n    return messages[alertType] || `Alert in ${dataPoint.source}`;\n  }\n\n  /**\n   * Get cached aggregated data\n   */\n  getCachedData(cacheKey: string): any {\n    return this.cache.get(cacheKey);\n  }\n\n  /**\n   * Clear cache\n   */\n  clearCache(): void {\n    this.cache.clear();\n  }\n\n  /**\n   * Update configuration\n   */\n  updateConfig(newConfig: Partial<AggregationConfig>): void {\n    this.config = { ...this.config, ...newConfig };\n  }\n\n  /**\n   * Get current configuration\n   */\n  getConfig(): AggregationConfig {\n    return { ...this.config };\n  }\n}\n\n// Export singleton instance\nexport const integrationDataAggregator = new IntegrationDataAggregator();\n\n// Export utility functions\nexport async function aggregateUserData(userId: string, timeframe?: 'hour' | 'day' | 'week' | 'month') {\n  return integrationDataAggregator.aggregateAllData(userId, timeframe);\n}\n\nexport async function generateUserInsights(userId: string) {\n  return integrationDataAggregator.generateCrossPlatformInsights(userId);\n}\n\nexport async function getUserMetrics(userId: string) {\n  return integrationDataAggregator.generateUnifiedMetrics(userId);\n} ","usedDeprecatedRules":[]},{"filePath":"/home/vonj/Github/Nexus/src/lib/integrations/integrationIntelligence.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":8,"column":20,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":8,"endColumn":23,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[215,218],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[215,218],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":9,"column":23,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":9,"endColumn":26,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[242,245],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[242,245],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":10,"column":19,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":10,"endColumn":22,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[265,268],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[265,268],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":11,"column":26,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":11,"endColumn":29,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[297,300],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[297,300],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":12,"column":23,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":12,"endColumn":26,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[326,329],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[326,329],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'currentContext' is defined but never used.","line":19,"column":5,"nodeType":null,"messageId":"unusedVar","endLine":19,"endColumn":19},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":19,"column":21,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":19,"endColumn":24,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[478,481],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[478,481],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":34,"column":43,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":34,"endColumn":46,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[889,892],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[889,892],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":39,"column":45,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":39,"endColumn":48,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1016,1019],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1016,1019],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\n * Integration Intelligence Service (DISABLED FOR 1.0)\n * Coming in v1.1 - This provides stub implementations to prevent build errors\n */\n\ninterface EnhancedChatResponse {\n  response: string;\n  businessContext: any;\n  actionableInsights: any;\n  suggestedTasks: any[];\n  learningOpportunities: any[];\n  connectionsToGoals: any[];\n}\n\nexport class IntegrationIntelligenceService {\n  async enhanceUserIntelligence(\n    userId: string,\n    userInput: string,\n    currentContext: any\n  ): Promise<EnhancedChatResponse> {\n    // Integration intelligence disabled for 1.0 - coming in v1.1\n    console.log('Integration intelligence coming in v1.1');\n    \n    return {\n      response: userInput,\n      businessContext: {},\n      actionableInsights: {},\n      suggestedTasks: [],\n      learningOpportunities: [],\n      connectionsToGoals: []\n    };\n  }\n\n  async analyzeIntegrationData(): Promise<any> {\n    console.log('Integration analysis coming in v1.1');\n    return {};\n  }\n\n  async generateBusinessInsights(): Promise<any[]> {\n    console.log('Business insights coming in v1.1');\n    return [];\n  }\n}\n\nexport const integrationIntelligence = new IntegrationIntelligenceService(); ","usedDeprecatedRules":[]},{"filePath":"/home/vonj/Github/Nexus/src/lib/onboarding/useOnboarding.ts","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'setOnboardingState' is assigned a value but never used.","line":55,"column":27,"nodeType":null,"messageId":"unusedVar","endLine":55,"endColumn":45},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'setUserN8nConfig' is assigned a value but never used.","line":56,"column":25,"nodeType":null,"messageId":"unusedVar","endLine":56,"endColumn":41},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'baseUrl' is defined but never used.","line":91,"column":48,"nodeType":null,"messageId":"unusedVar","endLine":91,"endColumn":55},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'apiKey' is defined but never used.","line":91,"column":65,"nodeType":null,"messageId":"unusedVar","endLine":91,"endColumn":71}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\n * useOnboarding.ts\n * React hook for managing onboarding state and user n8n configuration\n * Provides easy integration of onboarding flow into the main app\n */\nimport { useState, useEffect, useCallback } from 'react';\nimport { safeGetLocalStorage, safeSetLocalStorage } from './storageUtils';\n\nexport interface OnboardingState {\n  step: number;\n  completed: boolean;\n}\n\nexport interface UserN8nConfig {\n  enabled: boolean;\n  baseUrl?: string;\n  apiKey?: string;\n}\n\n// Mock n8n services for now\nconst mockUserN8nConfigService = {\n  isEnabled: () => false,\n  getCurrentUserConfig: async () => null,\n  clearCache: () => {},\n  enableN8nIntegration: () => {},\n  disableN8nIntegration: () => {}\n};\n\nconst mockN8nOnboardingManager = {\n  needsOnboarding: async () => false\n};\n\nexport interface UseOnboardingReturn {\n  // State\n  onboardingState: OnboardingState | null;\n  needsOnboarding: boolean;\n  isLoading: boolean;\n  userN8nConfig: UserN8nConfig | null;\n  \n  // Actions\n  startOnboarding: () => void;\n  completeOnboarding: () => void;\n  resetOnboarding: () => void;\n  checkOnboardingStatus: () => Promise<void>;\n  \n  // n8n specific\n  hasN8nConfig: boolean;\n  testN8nConnection: (baseUrl: string, apiKey: string) => Promise<{ success: boolean; error?: string }>;\n}\n\n/**\n * Main onboarding hook - MODIFIED TO DISABLE ONBOARDING\n */\nexport function useOnboarding(): UseOnboardingReturn {\n  const [onboardingState, setOnboardingState] = useState<OnboardingState | null>(null);\n  const [userN8nConfig, setUserN8nConfig] = useState<UserN8nConfig | null>(null);\n  const [needsOnboarding, setNeedsOnboarding] = useState<boolean>(false);\n  const [isLoading, setIsLoading] = useState<boolean>(true);\n\n  // Load onboarding status from localStorage\n  useEffect(() => {\n    const loadStatus = async () => {\n      const completed = safeGetLocalStorage<boolean>('nexus_onboarding_complete', false);\n      setNeedsOnboarding(!completed);\n      setIsLoading(false);\n    };\n    loadStatus();\n  }, []);\n\n  const startOnboarding = useCallback(() => {\n    setNeedsOnboarding(true);\n  }, []);\n\n  const completeOnboarding = useCallback(() => {\n    safeSetLocalStorage('nexus_onboarding_complete', true);\n    setNeedsOnboarding(false);\n  }, []);\n\n  const resetOnboarding = useCallback(() => {\n    safeSetLocalStorage('nexus_onboarding_complete', false);\n    setNeedsOnboarding(true);\n  }, []);\n\n  const checkOnboardingStatus = useCallback(async () => {\n    setIsLoading(true);\n    const completed = safeGetLocalStorage<boolean>('nexus_onboarding_complete', false);\n    setNeedsOnboarding(!completed);\n    setIsLoading(false);\n  }, []);\n\n  const testN8nConnection = useCallback(async (baseUrl: string, apiKey: string) => {\n    return { success: true };\n  }, []);\n\n  return {\n    onboardingState,\n    needsOnboarding,\n    isLoading,\n    userN8nConfig,\n    startOnboarding,\n    completeOnboarding,\n    resetOnboarding,\n    checkOnboardingStatus,\n    hasN8nConfig: false,\n    testN8nConnection\n  };\n}\n\n/**\n * Hook specifically for n8n configuration status\n */\nexport function useN8nConfigStatus() {\n  const [config, setConfig] = useState<UserN8nConfig | null>(null);\n  const [isLoading, setIsLoading] = useState(true);\n\n  useEffect(() => {\n    const loadConfig = async () => {\n      try {\n        // Only load config if n8n integration is enabled\n        if (mockUserN8nConfigService.isEnabled()) {\n          const userConfig = await mockUserN8nConfigService.getCurrentUserConfig();\n          setConfig(userConfig);\n        } else {\n          setConfig(null);\n        }\n      } catch (error) {\n        console.error('Failed to load n8n config:', error);\n      } finally {\n        setIsLoading(false);\n      }\n    };\n\n    loadConfig();\n  }, []);\n\n  const refreshConfig = useCallback(async () => {\n    setIsLoading(true);\n    try {\n      mockUserN8nConfigService.clearCache();\n      // Only load config if n8n integration is enabled\n      if (mockUserN8nConfigService.isEnabled()) {\n        const userConfig = await mockUserN8nConfigService.getCurrentUserConfig();\n        setConfig(userConfig);\n      } else {\n        setConfig(null);\n      }\n    } catch (error) {\n      console.error('Failed to refresh n8n config:', error);\n    } finally {\n      setIsLoading(false);\n    }\n  }, []);\n\n  const enableN8nIntegration = useCallback(async () => {\n    mockUserN8nConfigService.enableN8nIntegration();\n    await refreshConfig();\n  }, [refreshConfig]);\n\n  const disableN8nIntegration = useCallback(() => {\n    mockUserN8nConfigService.disableN8nIntegration();\n    setConfig(null);\n  }, []);\n\n  return {\n    config,\n    isConfigured: config !== null,\n    isN8nEnabled: mockUserN8nConfigService.isEnabled(),\n    isLoading,\n    refreshConfig,\n    enableN8nIntegration,\n    disableN8nIntegration\n  };\n}\n\n/**\n * Hook to determine if onboarding should be shown\n */\nexport function useShowOnboarding(): { shouldShow: boolean; isLoading: boolean } {\n  const [shouldShow, setShouldShow] = useState(false);\n  const [isLoading, setIsLoading] = useState(true);\n\n  useEffect(() => {\n    const checkStatus = async () => {\n      try {\n        const needs = await mockN8nOnboardingManager.needsOnboarding();\n        setShouldShow(needs);\n      } catch (error) {\n        console.error('Failed to check onboarding status:', error);\n        // Default to showing onboarding if we can't determine status\n        setShouldShow(true);\n      } finally {\n        setIsLoading(false);\n      }\n    };\n\n    checkStatus();\n  }, []);\n\n  return { shouldShow, isLoading };\n} ","usedDeprecatedRules":[]},{"filePath":"/home/vonj/Github/Nexus/src/lib/security/index.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":13,"column":32,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":13,"endColumn":35,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[446,449],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[446,449],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":64,"column":31,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":64,"endColumn":34,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1807,1810],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1807,1810],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":266,"column":32,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":266,"endColumn":35,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[7689,7692],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[7689,7692],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'error' is defined but never used.","line":302,"column":14,"nodeType":null,"messageId":"unusedVar","endLine":302,"endColumn":19},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":343,"column":40,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":343,"endColumn":43,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[10016,10019],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[10016,10019],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\n * Security Foundation Library\n * Comprehensive frontend security utilities for Nexus\n */\n\nimport { createClient } from '@supabase/supabase-js';\n\n// Types\nexport interface SecurityEvent {\n  eventType: 'login' | 'logout' | 'data_access' | 'integration_added' | \n             'integration_removed' | 'permission_change' | 'data_export' |\n             'suspicious_activity' | 'failed_login' | 'data_modification';\n  eventDetails: Record<string, any>;\n  ipAddress?: string;\n  userAgent?: string;\n}\n\nexport interface SecurityConfig {\n  passwordPolicy: {\n    minLength: number;\n    requireUppercase: boolean;\n    requireNumbers: boolean;\n    requireSymbols: boolean;\n  };\n  sessionTimeout: { hours: number };\n  maxFailedLogins: { attempts: number; lockoutMinutes: number };\n}\n\n// Initialize Supabase client\nconst supabase = createClient(\n  import.meta.env.VITE_SUPABASE_URL,\n  import.meta.env.VITE_SUPABASE_ANON_KEY\n);\n\n// Security utilities class\nexport class SecurityManager {\n  private static instance: SecurityManager;\n  private config: SecurityConfig | null = null;\n\n  private constructor() {}\n\n  public static getInstance(): SecurityManager {\n    if (!SecurityManager.instance) {\n      SecurityManager.instance = new SecurityManager();\n    }\n    return SecurityManager.instance;\n  }\n\n  /**\n   * Load security configuration from database\n   */\n  async loadConfig(): Promise<SecurityConfig | null> {\n    try {\n      const { data, error } = await supabase\n        .from('security_config')\n        .select('config_key, config_value')\n        .in('config_key', ['password_policy', 'session_timeout', 'max_failed_logins']);\n\n      if (error) throw error;\n\n      const configMap = data.reduce((acc, item) => {\n        acc[item.config_key] = item.config_value;\n        return acc;\n      }, {} as Record<string, any>);\n\n      this.config = {\n        passwordPolicy: configMap.password_policy || {\n          minLength: 12,\n          requireUppercase: true,\n          requireNumbers: true,\n          requireSymbols: true,\n        },\n        sessionTimeout: configMap.session_timeout || { hours: 24 },\n        maxFailedLogins: configMap.max_failed_logins || { attempts: 5, lockoutMinutes: 30 },\n      };\n\n      return this.config;\n    } catch (error) {\n      console.error('Failed to load security config:', error);\n      return null;\n    }\n  }\n\n  /**\n   * Log security events to audit trail\n   */\n  async logSecurityEvent(event: SecurityEvent): Promise<void> {\n    try {\n      const { data: { user } } = await supabase.auth.getUser();\n      \n      await supabase.rpc('log_security_event', {\n        p_user_id: user?.id || null,\n        p_event_type: event.eventType,\n        p_event_details: event.eventDetails,\n        p_ip_address: event.ipAddress || await this.getClientIP(),\n        p_user_agent: event.userAgent || navigator.userAgent,\n      });\n    } catch (error) {\n      console.error('Failed to log security event:', error);\n    }\n  }\n\n  /**\n   * Encrypt sensitive data using Web Crypto API\n   */\n  async encryptData(data: string): Promise<string> {\n    try {\n      const encoder = new TextEncoder();\n      const dataBuffer = encoder.encode(data);\n      \n      const key = await window.crypto.subtle.generateKey(\n        { name: 'AES-GCM', length: 256 },\n        true,\n        ['encrypt', 'decrypt']\n      );\n\n      const iv = window.crypto.getRandomValues(new Uint8Array(12));\n      const encrypted = await window.crypto.subtle.encrypt(\n        { name: 'AES-GCM', iv },\n        key,\n        dataBuffer\n      );\n\n      const combined = new Uint8Array(iv.length + encrypted.byteLength);\n      combined.set(iv, 0);\n      combined.set(new Uint8Array(encrypted), iv.length);\n\n      return btoa(String.fromCharCode(...combined));\n    } catch (error) {\n      console.error('Encryption failed:', error);\n      throw new Error('Data encryption failed');\n    }\n  }\n\n  /**\n   * Decrypt sensitive data using Web Crypto API\n   */\n  async decryptData(encryptedData: string): Promise<string> {\n    try {\n      const combined = new Uint8Array(\n        atob(encryptedData).split('').map(char => char.charCodeAt(0))\n      );\n      \n      const iv = combined.slice(0, 12);\n      const data = combined.slice(12);\n\n      const key = await window.crypto.subtle.generateKey(\n        { name: 'AES-GCM', length: 256 },\n        true,\n        ['encrypt', 'decrypt']\n      );\n\n      const decrypted = await window.crypto.subtle.decrypt(\n        { name: 'AES-GCM', iv },\n        key,\n        data\n      );\n\n      return new TextDecoder().decode(decrypted);\n    } catch (error) {\n      console.error('Decryption failed:', error);\n      throw new Error('Data decryption failed');\n    }\n  }\n\n  /**\n   * Validate password strength according to policy\n   */\n  validatePassword(password: string): { isValid: boolean; errors: string[] } {\n    const errors: string[] = [];\n    const policy = this.config?.passwordPolicy;\n\n    if (!policy) {\n      return { isValid: false, errors: ['Security policy not loaded'] };\n    }\n\n    if (password.length < policy.minLength) {\n      errors.push(`Password must be at least ${policy.minLength} characters long`);\n    }\n\n    if (policy.requireUppercase && !/[A-Z]/.test(password)) {\n      errors.push('Password must contain at least one uppercase letter');\n    }\n\n    if (policy.requireNumbers && !/\\d/.test(password)) {\n      errors.push('Password must contain at least one number');\n    }\n\n    if (policy.requireSymbols && !/[!@#$%^&*(),.?\":{}|<>]/.test(password)) {\n      errors.push('Password must contain at least one special character');\n    }\n\n    return { isValid: errors.length === 0, errors };\n  }\n\n  /**\n   * Monitor for suspicious activity patterns\n   */\n  async detectSuspiciousActivity(): Promise<boolean> {\n    try {\n      const { data: { user } } = await supabase.auth.getUser();\n      if (!user) return false;\n\n      const { data: failedLogins } = await supabase\n        .from('security_audit_log')\n        .select('*')\n        .eq('user_id', user.id)\n        .eq('event_type', 'failed_login')\n        .gte('created_at', new Date(Date.now() - 30 * 60 * 1000).toISOString());\n\n      if (failedLogins && failedLogins.length >= 3) {\n        await this.logSecurityEvent({\n          eventType: 'suspicious_activity',\n          eventDetails: {\n            description: 'Multiple failed login attempts detected',\n            failedAttempts: failedLogins.length,\n          },\n        });\n        return true;\n      }\n\n      return false;\n    } catch (error) {\n      console.error('Suspicious activity detection failed:', error);\n      return false;\n    }\n  }\n\n  /**\n   * Check session validity and auto-logout if expired\n   */\n  async checkSessionValidity(): Promise<boolean> {\n    try {\n      const { data: { session } } = await supabase.auth.getSession();\n      if (!session) return false;\n\n      const config = this.config || await this.loadConfig();\n      if (!config) return true; // Allow if config can't be loaded\n\n      const sessionStart = new Date(session.user.created_at);\n      const now = new Date();\n      const sessionAge = (now.getTime() - sessionStart.getTime()) / (1000 * 60 * 60);\n\n      if (sessionAge > config.sessionTimeout.hours) {\n        await supabase.auth.signOut();\n        await this.logSecurityEvent({\n          eventType: 'logout',\n          eventDetails: {\n            description: 'Session automatically expired',\n            sessionAge: `${sessionAge.toFixed(2)} hours`,\n          },\n        });\n        return false;\n      }\n\n      return true;\n    } catch (error) {\n      console.error('Session validation failed:', error);\n      return false;\n    }\n  }\n\n  /**\n   * Secure data export with audit logging\n   */\n  async secureDataExport(data: any, filename: string): Promise<void> {\n    try {\n      // Log the export event\n      await this.logSecurityEvent({\n        eventType: 'data_export',\n        eventDetails: {\n          description: `Data exported to ${filename}`,\n          dataSize: JSON.stringify(data).length,\n          exportTime: new Date().toISOString(),\n        },\n      });\n\n      // Create and download the file\n      const blob = new Blob([JSON.stringify(data, null, 2)], { type: 'application/json' });\n      const url = URL.createObjectURL(blob);\n      const a = document.createElement('a');\n      a.href = url;\n      a.download = filename;\n      document.body.appendChild(a);\n      a.click();\n      document.body.removeChild(a);\n      URL.revokeObjectURL(url);\n    } catch (error) {\n      console.error('Secure data export failed:', error);\n      throw error;\n    }\n  }\n\n  /**\n   * Get client IP address (best effort)\n   */\n  private async getClientIP(): Promise<string | null> {\n    try {\n      const response = await fetch('https://api.ipify.org?format=json');\n      const data = await response.json();\n      return data.ip;\n    } catch (error) {\n      return null;\n    }\n  }\n\n  /**\n   * Initialize security monitoring\n   */\n  async initializeSecurity(): Promise<void> {\n    try {\n      // Load configuration\n      await this.loadConfig();\n\n      // Set up suspicious activity monitoring\n      setInterval(() => {\n        this.detectSuspiciousActivity();\n      }, 10 * 60 * 1000); // Check every 10 minutes\n\n      // Log initialization\n      await this.logSecurityEvent({\n        eventType: 'login',\n        eventDetails: {\n          description: 'Security monitoring initialized',\n          timestamp: new Date().toISOString(),\n        },\n      });\n\n      console.log('🔒 Security monitoring initialized successfully');\n    } catch (error) {\n      console.error('Security initialization failed:', error);\n    }\n  }\n}\n\n// Export singleton instance\nexport const securityManager = SecurityManager.getInstance();\n\n// Utility functions\nexport const validatePassword = (password: string) => securityManager.validatePassword(password);\nexport const logSecurityEvent = (event: SecurityEvent) => securityManager.logSecurityEvent(event);\nexport const encryptData = (data: string) => securityManager.encryptData(data);\nexport const secureDataExport = (data: any, filename: string) => securityManager.secureDataExport(data, filename);\n\n// Auto-initialize security when module is imported\nif (typeof window !== 'undefined') {\n  securityManager.initializeSecurity();\n} ","usedDeprecatedRules":[]},{"filePath":"/home/vonj/Github/Nexus/src/lib/security/logger.ts","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'pinoLogger' is assigned a value but never used.","line":37,"column":7,"nodeType":null,"messageId":"unusedVar","endLine":37,"endColumn":17},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":63,"column":40,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":63,"endColumn":43,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1981,1984],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1981,1984],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":63,"column":46,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":63,"endColumn":49,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1987,1990],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1987,1990],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":91,"column":23,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":91,"endColumn":26,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2709,2712],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2709,2712],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":103,"column":24,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":103,"endColumn":27,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3032,3035],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3032,3035],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":111,"column":25,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":111,"endColumn":28,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3232,3235],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3232,3235],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":119,"column":25,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":119,"endColumn":28,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3438,3441],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3438,3441],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":129,"column":24,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":129,"endColumn":27,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3684,3687],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3684,3687],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":139,"column":27,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":139,"endColumn":30,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3978,3981],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3978,3981],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":149,"column":46,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":149,"endColumn":49,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[4291,4294],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[4291,4294],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":171,"column":39,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":171,"endColumn":42,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[4917,4920],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[4917,4920],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":231,"column":30,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":231,"endColumn":33,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[6690,6693],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[6690,6693],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":232,"column":31,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":232,"endColumn":34,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[6751,6754],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[6751,6754],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":233,"column":32,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":233,"endColumn":35,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[6814,6817],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[6814,6817],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":234,"column":32,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":234,"endColumn":35,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[6878,6881],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[6878,6881],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":235,"column":31,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":235,"endColumn":34,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[6941,6944],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[6941,6944],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":236,"column":34,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":236,"endColumn":37,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[7006,7009],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[7006,7009],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":237,"column":56,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":237,"endColumn":59,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[7096,7099],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[7096,7099],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":18,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\n * Secure Logger\n * @description Production-safe logging with sensitive data filtering\n */\n\nimport { SECURITY_CHECKS } from '@/lib/constants/security';\nimport pino from 'pino';\n\n// Sensitive patterns to filter from logs\nconst SENSITIVE_PATTERNS = [\n  /\\b[A-Za-z0-9._%+-]+@[A-Za-z0-9.-]+\\.[A-Z|a-z]{2,}\\b/g, // Email addresses\n  /\\b(?:sk_live_|sk_test_|pk_live_|pk_test_)[A-Za-z0-9]{24,}\\b/g, // Stripe keys\n  /\\b(?:pat-|ghp_|gho_|ghu_|ghs_)[A-Za-z0-9_-]{20,}\\b/g, // GitHub/HubSpot tokens\n  /\\b[A-Za-z0-9+/]{40,}={0,2}\\b/g, // Base64 encoded tokens (40+ chars)\n  /\\b\\d{4}[-\\s]?\\d{4}[-\\s]?\\d{4}[-\\s]?\\d{4}\\b/g, // Credit card numbers\n  /\\b\\d{3}-\\d{2}-\\d{4}\\b/g, // SSN\n  /\\bpassword[\"\\s]*[:=][\"\\s]*[^\"\\s,}]+/gi, // Password fields\n  /\\btoken[\"\\s]*[:=][\"\\s]*[^\"\\s,}]+/gi, // Token fields\n  /\\bkey[\"\\s]*[:=][\"\\s]*[^\"\\s,}]+/gi, // Key fields\n];\n\nconst isProduction = process.env.NODE_ENV === 'production';\n\n// Basic configuration for the logger\nconst loggerConfig = {\n  level: isProduction ? 'info' : 'debug',\n  formatters: {\n    level: (label: string) => {\n      return { level: label.toUpperCase() };\n    },\n  },\n  // Redact sensitive information\n  redact: ['err.stack', 'req.headers.authorization', 'req.headers.cookie'],\n};\n\n// The main logger instance\nconst pinoLogger = pino(loggerConfig);\n\n/**\n * A secure logger class that wraps pino.\n * It provides methods for different log levels and ensures consistent logging structure.\n */\nexport class SecureLogger {\n  private component: string;\n  private static instance: SecureLogger;\n  private isProduction: boolean;\n\n  constructor(component: string) {\n    this.component = component;\n    this.isProduction = process.env.NODE_ENV === 'production';\n  }\n\n  public static getInstance(): SecureLogger {\n    if (!SecureLogger.instance) {\n      SecureLogger.instance = new SecureLogger('main');\n    }\n    return SecureLogger.instance;\n  }\n\n  /**\n   * Filter sensitive data from log messages\n   */\n  private filterSensitiveData(message: any): any {\n    if (typeof message === 'string') {\n      let filtered = message;\n      SENSITIVE_PATTERNS.forEach(pattern => {\n        filtered = filtered.replace(pattern, '[REDACTED]');\n      });\n      return filtered;\n    }\n\n    if (typeof message === 'object' && message !== null) {\n      try {\n        const stringified = JSON.stringify(message, null, 2);\n        let filtered = stringified;\n        SENSITIVE_PATTERNS.forEach(pattern => {\n          filtered = filtered.replace(pattern, '[REDACTED]');\n        });\n        return JSON.parse(filtered);\n      } catch {\n        return '[OBJECT - COULD NOT SERIALIZE]';\n      }\n    }\n\n    return message;\n  }\n\n  /**\n   * Safe console.log replacement\n   */\n  public log(...args: any[]): void {\n    if (this.isProduction && SECURITY_CHECKS.DISABLE_CONSOLE_IN_PROD) {\n      return; // Disable logging in production\n    }\n\n    const filteredArgs = args.map(arg => this.filterSensitiveData(arg));\n    console.log(...filteredArgs);\n  }\n\n  /**\n   * Safe console.warn replacement\n   */\n  public warn(...args: any[]): void {\n    const filteredArgs = args.map(arg => this.filterSensitiveData(arg));\n    console.warn(...filteredArgs);\n  }\n\n  /**\n   * Safe console.error replacement\n   */\n  public error(...args: any[]): void {\n    const filteredArgs = args.map(arg => this.filterSensitiveData(arg));\n    console.error(...filteredArgs);\n  }\n\n  /**\n   * Debug logging (only in development)\n   */\n  public debug(...args: any[]): void {\n    if (!this.isProduction) {\n      const filteredArgs = args.map(arg => this.filterSensitiveData(arg));\n      console.debug('🐛 DEBUG:', ...filteredArgs);\n    }\n  }\n\n  /**\n   * Info logging with emoji\n   */\n  public info(...args: any[]): void {\n    if (!this.isProduction || !SECURITY_CHECKS.DISABLE_CONSOLE_IN_PROD) {\n      const filteredArgs = args.map(arg => this.filterSensitiveData(arg));\n      console.info('ℹ️ INFO:', ...filteredArgs);\n    }\n  }\n\n  /**\n   * Success logging with emoji\n   */\n  public success(...args: any[]): void {\n    if (!this.isProduction || !SECURITY_CHECKS.DISABLE_CONSOLE_IN_PROD) {\n      const filteredArgs = args.map(arg => this.filterSensitiveData(arg));\n      console.log('✅ SUCCESS:', ...filteredArgs);\n    }\n  }\n\n  /**\n   * Security-specific logging\n   */\n  public security(message: string, details?: any): void {\n    const timestamp = new Date().toISOString();\n    const logEntry = {\n      timestamp,\n      type: 'SECURITY',\n      message,\n      details: details ? this.filterSensitiveData(details) : undefined,\n    };\n\n    // Always log security events, even in production\n    console.warn('🔒 SECURITY:', logEntry);\n\n    // In production, send to structured log pipeline\n    if (this.isProduction) {\n      this.sendToLogPipeline(logEntry);\n    }\n  }\n\n  /**\n   * Send structured logs to monitoring pipeline\n   * Supports Vector, OpenTelemetry Collector, or direct SIEM integration\n   */\n  private sendToLogPipeline(logEntry: any): void {\n    // Try Vector/OpenTelemetry HTTP endpoint first\n    const vectorEndpoint = process.env.VECTOR_HTTP_ENDPOINT || process.env.OTEL_EXPORTER_OTLP_ENDPOINT;\n    if (vectorEndpoint) {\n      try {\n        void fetch(`${vectorEndpoint}/logs`, {\n          method: 'POST',\n          headers: { \n            'Content-Type': 'application/json',\n            'User-Agent': 'nexus-security-logger/1.0'\n          },\n          body: JSON.stringify({\n            ...logEntry,\n            service: 'nexus-web',\n            environment: process.env.NODE_ENV || 'production',\n            version: process.env.npm_package_version || '1.0.0'\n          }),\n        });\n      } catch {\n        /* silent - fallback to webhook */\n      }\n    }\n\n    // Fallback to security webhook\n    const webhook = process.env.SECURITY_WEBHOOK_URL;\n    if (webhook && typeof fetch === 'function') {\n      try {\n        void fetch(webhook, {\n          method: 'POST',\n          headers: { 'Content-Type': 'application/json' },\n          body: JSON.stringify(logEntry),\n        });\n      } catch {\n        /* silent */\n      }\n    }\n\n    // Fallback to Supabase edge function for security events\n    const supabaseUrl = process.env.NEXT_PUBLIC_SUPABASE_URL;\n    if (supabaseUrl) {\n      try {\n        void fetch(`${supabaseUrl}/functions/v1/security_log`, {\n          method: 'POST',\n          headers: { \n            'Content-Type': 'application/json',\n            'Authorization': `Bearer ${process.env.SUPABASE_SERVICE_ROLE_KEY || ''}`\n          },\n          body: JSON.stringify(logEntry),\n        });\n      } catch {\n        /* silent */\n      }\n    }\n  }\n}\n\n// Export singleton instance\nexport const logger = SecureLogger.getInstance();\n\n// Convenience functions\nexport const log = (...args: any[]) => logger.log(...args);\nexport const warn = (...args: any[]) => logger.warn(...args);\nexport const error = (...args: any[]) => logger.error(...args);\nexport const debug = (...args: any[]) => logger.debug(...args);\nexport const info = (...args: any[]) => logger.info(...args);\nexport const success = (...args: any[]) => logger.success(...args);\nexport const securityLog = (message: string, details?: any) => logger.security(message, details); ","usedDeprecatedRules":[]},{"filePath":"/home/vonj/Github/Nexus/src/lib/security/secureStorage.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":135,"column":44,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":135,"endColumn":47,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3305,3308],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3305,3308],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":158,"column":75,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":158,"endColumn":78,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[4084,4087],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[4084,4087],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":183,"column":75,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":183,"endColumn":78,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[4841,4844],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[4841,4844],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":251,"column":74,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":251,"endColumn":77,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[7058,7061],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[7058,7061],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":262,"column":87,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":262,"endColumn":90,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[7416,7419],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[7416,7419],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":315,"column":51,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":315,"endColumn":54,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[8853,8856],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[8853,8856],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\n * Secure Storage Utilities\n * @description Encrypted localStorage wrapper for sensitive data\n */\n\nimport { STORAGE_CONFIG } from '@/lib/constants/security';\n\n// Simple encryption/decryption using Web Crypto API\nclass SecureStorage {\n  private static instance: SecureStorage;\n  private key: CryptoKey | null = null;\n\n  private constructor() {}\n\n  public static getInstance(): SecureStorage {\n    if (!SecureStorage.instance) {\n      SecureStorage.instance = new SecureStorage();\n    }\n    return SecureStorage.instance;\n  }\n\n  /**\n   * Initialize encryption key\n   */\n  private async initializeKey(): Promise<void> {\n    if (this.key) return;\n\n    try {\n      // Generate a key based on user session or use a default\n      const keyMaterial = await window.crypto.subtle.importKey(\n        'raw',\n        new TextEncoder().encode('nexus-secure-storage-key-v1'),\n        { name: 'PBKDF2' },\n        false,\n        ['deriveBits', 'deriveKey']\n      );\n\n      this.key = await window.crypto.subtle.deriveKey(\n        {\n          name: 'PBKDF2',\n          salt: new TextEncoder().encode('nexus-salt'),\n          iterations: 100000,\n          hash: 'SHA-256',\n        },\n        keyMaterial,\n        { name: 'AES-GCM', length: 256 },\n        true,\n        ['encrypt', 'decrypt']\n      );\n    } catch (error) {\n      console.warn('Failed to initialize encryption key:', error);\n      this.key = null;\n    }\n  }\n\n  /**\n   * Encrypt data\n   */\n  private async encrypt(data: string): Promise<string> {\n    if (!this.key) {\n      await this.initializeKey();\n    }\n\n    if (!this.key) {\n      // Fallback to base64 encoding if encryption fails\n      return btoa(data);\n    }\n\n    try {\n      const iv = window.crypto.getRandomValues(new Uint8Array(12));\n      const encodedData = new TextEncoder().encode(data);\n      \n      const encryptedData = await window.crypto.subtle.encrypt(\n        { name: 'AES-GCM', iv },\n        this.key,\n        encodedData\n      );\n\n      const combined = new Uint8Array(iv.length + encryptedData.byteLength);\n      combined.set(iv);\n      combined.set(new Uint8Array(encryptedData), iv.length);\n\n      return btoa(String.fromCharCode(...combined));\n    } catch (error) {\n      console.warn('Encryption failed, using base64:', error);\n      return btoa(data);\n    }\n  }\n\n  /**\n   * Decrypt data\n   */\n  private async decrypt(encryptedData: string): Promise<string> {\n    if (!this.key) {\n      await this.initializeKey();\n    }\n\n    if (!this.key) {\n      // Fallback to base64 decoding\n      try {\n        return atob(encryptedData);\n      } catch {\n        return encryptedData;\n      }\n    }\n\n    try {\n      const combined = new Uint8Array(\n        atob(encryptedData).split('').map(char => char.charCodeAt(0))\n      );\n      \n      const iv = combined.slice(0, 12);\n      const data = combined.slice(12);\n\n      const decryptedData = await window.crypto.subtle.decrypt(\n        { name: 'AES-GCM', iv },\n        this.key,\n        data\n      );\n\n      return new TextDecoder().decode(decryptedData);\n    } catch (error) {\n      console.warn('Decryption failed, trying base64:', error);\n      try {\n        return atob(encryptedData);\n      } catch {\n        return encryptedData;\n      }\n    }\n  }\n\n  /**\n   * Securely store data\n   */\n  public async setItem(key: string, value: any): Promise<void> {\n    try {\n      // Validate input value\n      if (value === undefined) {\n        console.warn(`Attempting to store undefined value for key: ${key}`);\n        return;\n      }\n\n      // Ensure we don't store functions or other non-serializable values\n      let serializableValue;\n      try {\n        serializableValue = JSON.parse(JSON.stringify(value));\n      } catch (error) {\n        console.error(`Value for ${key} is not serializable:`, error);\n        throw new Error(`Cannot store non-serializable value for key: ${key}`);\n      }\n\n      const serializedValue = JSON.stringify({\n        data: serializableValue,\n        timestamp: Date.now(),\n        version: '1.0',\n      });\n\n      const shouldEncrypt = STORAGE_CONFIG.SENSITIVE_KEYS.includes(key as any);\n      const finalValue = shouldEncrypt \n        ? await this.encrypt(serializedValue)\n        : serializedValue;\n\n      // Validate final value before storing\n      if (typeof finalValue !== 'string') {\n        throw new Error(`Final value for ${key} is not a string: ${typeof finalValue}`);\n      }\n\n      localStorage.setItem(\n        shouldEncrypt ? `secure_${key}` : key,\n        finalValue\n      );\n    } catch (error) {\n      console.error(`Failed to store ${key}:`, error);\n      throw new Error(`Storage failed for key: ${key}`);\n    }\n  }\n\n  /**\n   * Securely retrieve data\n   */\n  public async getItem<T>(key: string, defaultValue?: T): Promise<T | null> {\n    try {\n      const shouldEncrypt = STORAGE_CONFIG.SENSITIVE_KEYS.includes(key as any);\n      const storageKey = shouldEncrypt ? `secure_${key}` : key;\n      const storedValue = localStorage.getItem(storageKey);\n\n      if (!storedValue) {\n        return defaultValue ?? null;\n      }\n\n      // Handle cases where the stored value is not a string or is corrupted\n      if (typeof storedValue !== 'string') {\n        console.warn(`Invalid stored value type for ${key}:`, typeof storedValue);\n        this.removeItem(key);\n        return defaultValue ?? null;\n      }\n\n      // Check for obvious corruption (e.g., \"[object Object]\")\n      if (storedValue === '[object Object]' || storedValue.startsWith('[object ')) {\n        console.warn(`Corrupted stored value detected for ${key}:`, storedValue);\n        this.removeItem(key);\n        return defaultValue ?? null;\n      }\n\n      const rawValue = shouldEncrypt \n        ? await this.decrypt(storedValue)\n        : storedValue;\n\n      // Validate that rawValue is a string before parsing\n      if (typeof rawValue !== 'string') {\n        console.warn(`Decrypted value is not a string for ${key}:`, typeof rawValue);\n        this.removeItem(key);\n        return defaultValue ?? null;\n      }\n\n      let parsed;\n      try {\n        parsed = JSON.parse(rawValue);\n      } catch (parseError) {\n        console.warn(`JSON parse error for ${key}:`, parseError, 'Raw value:', rawValue);\n        this.removeItem(key);\n        return defaultValue ?? null;\n      }\n\n      // Validate parsed structure\n      if (!parsed || typeof parsed !== 'object') {\n        console.warn(`Invalid parsed structure for ${key}:`, parsed);\n        this.removeItem(key);\n        return defaultValue ?? null;\n      }\n\n      // Check if data is expired\n      if (parsed.timestamp && Date.now() - parsed.timestamp > STORAGE_CONFIG.MAX_AGE) {\n        this.removeItem(key);\n        return defaultValue ?? null;\n      }\n\n      return parsed.data;\n    } catch (error) {\n      console.warn(`Failed to retrieve ${key}:`, error);\n      // Clean up corrupted data\n      this.removeItem(key);\n      return defaultValue ?? null;\n    }\n  }\n\n  /**\n   * Remove stored data\n   */\n     public removeItem(key: string): void {\n     const shouldEncrypt = STORAGE_CONFIG.SENSITIVE_KEYS.includes(key as any);\n     const storageKey = shouldEncrypt ? `secure_${key}` : key;\n     localStorage.removeItem(storageKey);\n   }\n\n  /**\n   * Clear all secure storage\n   */\n  public clearSecureStorage(): void {\n    const keys = Object.keys(localStorage);\n         keys.forEach(key => {\n       if (key.startsWith('secure_') || STORAGE_CONFIG.SENSITIVE_KEYS.includes(key as any)) {\n         localStorage.removeItem(key);\n       }\n     });\n  }\n\n  /**\n   * Check if Web Crypto API is available\n   */\n  public static isSecureStorageAvailable(): boolean {\n    return typeof window !== 'undefined' && \n           window.crypto && \n           window.crypto.subtle &&\n           typeof localStorage !== 'undefined';\n  }\n\n  /**\n   * Clean up corrupted localStorage entries\n   */\n  public cleanupCorruptedEntries(): void {\n    const keysToRemove: string[] = [];\n    \n    for (let i = 0; i < localStorage.length; i++) {\n      const key = localStorage.key(i);\n      if (!key) continue;\n      \n      try {\n        const value = localStorage.getItem(key);\n        if (value === '[object Object]' || (value && value.startsWith('[object '))) {\n          console.warn(`Found corrupted entry: ${key} = ${value}`);\n          keysToRemove.push(key);\n        }\n      } catch (error) {\n        console.warn(`Error checking key ${key}:`, error);\n        keysToRemove.push(key);\n      }\n    }\n    \n    keysToRemove.forEach(key => {\n      console.log(`Removing corrupted entry: ${key}`);\n      localStorage.removeItem(key);\n    });\n    \n    if (keysToRemove.length > 0) {\n      console.log(`Cleaned up ${keysToRemove.length} corrupted localStorage entries`);\n    }\n  }\n}\n\n// Export singleton instance\nexport const secureStorage = SecureStorage.getInstance();\n\n// Convenience functions\nexport const setSecureItem = (key: string, value: any) => secureStorage.setItem(key, value);\nexport const getSecureItem = <T>(key: string, defaultValue?: T) => secureStorage.getItem<T>(key, defaultValue);\nexport const removeSecureItem = (key: string) => secureStorage.removeItem(key);\nexport const clearAllSecureData = () => secureStorage.clearSecureStorage();\nexport const cleanupCorruptedStorage = () => secureStorage.cleanupCorruptedEntries(); ","usedDeprecatedRules":[]},{"filePath":"/home/vonj/Github/Nexus/src/lib/security/security.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/vonj/Github/Nexus/src/lib/services/ai.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":48,"column":65,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":48,"endColumn":68,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1560,1563],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1560,1563],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":58,"column":43,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":58,"endColumn":46,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1814,1817],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1814,1817],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { supabase } from '@/lib/core/supabase';\nimport { type DepartmentState } from '@/lib/types';\n\ninterface AdvisorParams {\n  prompt: string;\n  snapshot: DepartmentState;\n  orgId?: string | null;\n}\n\n/**\n * callNexusAdvisor (v2)\n * --------------------\n * Implements a lightweight RAG loop entirely on the client:\n *   1. Embed the user prompt\n *   2. Retrieve top-k matching runbook chunks via `match_ops_docs` RPC\n *   3. Send context + KPI snapshot to the `ai_chat` edge function for the final answer\n *\n * Falls back to mocked output during `npm run dev` to avoid burning tokens.\n */\nexport async function callNexusAdvisor({ prompt, snapshot, orgId }: AdvisorParams): Promise<string> {\n  if (import.meta.env.DEV) {\n    return Promise.resolve('Automate deployment rollbacks to cut MTTR by 30 %.');\n  }\n\n  // 1. Embed the prompt using OpenAI (browser-safe fetch)\n  let vector: number[];\n  try {\n    const resp = await fetch('https://api.openai.com/v1/embeddings', {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n        Authorization: `Bearer ${import.meta.env.VITE_OPENAI_KEY}`,\n      },\n      body: JSON.stringify({\n        model: 'text-embedding-3-small',\n        input: prompt,\n        dimensions: 1536,\n      }),\n    });\n    const json = await resp.json();\n    vector = json.data?.[0]?.embedding;\n  } catch (err) {\n    console.error('Embedding failed', err);\n    return 'Could not generate advice at this time.';\n  }\n\n  // 2. Retrieve context chunks\n  const { data: matches, error: matchErr } = await (supabase as any).rpc('match_ops_docs', {\n    query_embedding: vector,\n    match_threshold: 0.8,\n    match_count: 8,\n    p_org: orgId ?? null,\n  });\n  if (matchErr) {\n    console.error('match_ops_docs error', matchErr);\n  }\n\n  const context = (matches ?? []).map((m: any) => m.chunk).join('\\n\\n');\n\n  // 3. Call edge function for final completion\n  const { data, error } = await supabase.functions.invoke('ai_chat', {\n    body: {\n      messages: [\n        {\n          role: 'system',\n          content: `You are the Nexus Operations Advisor. Use the following runbook snippets and KPI snapshot to propose ONE actionable recommendation (≤2 sentences) to improve the Ops score.\\n\\nRunbook context:\\n${context}`,\n        },\n        {\n          role: 'user',\n          content: `Latest KPIs:\\n${JSON.stringify(snapshot, null, 2)}\\n\\n${prompt}`,\n        },\n      ],\n    },\n  });\n\n  if (error) {\n    console.error('ai_chat error', error);\n    return 'N/A';\n  }\n\n  return data.choices?.[0]?.message?.content?.trim() ?? 'N/A';\n} ","usedDeprecatedRules":[]},{"filePath":"/home/vonj/Github/Nexus/src/lib/services/aiInsightsService.ts","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'useAuth' is defined but never used.","line":7,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":7,"endColumn":17},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":19,"column":45,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":19,"endColumn":48,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[597,600],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[597,600],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\n * @file aiInsightsService.ts\n * @description Service for fetching AI-driven insights and suggestions.\n */\n\nimport { supabase } from '../core/supabase';\nimport { useAuth } from '@/contexts/AuthContext'; // We might need this for the session token\n\nexport interface AIInsight {\n  id: string;\n  type: 'suggestion' | 'alert' | 'success'; // This can be expanded\n  icon: React.ReactNode;\n  message: string;\n  action: string | null;\n  severity?: 'critical' | 'warning' | 'info';\n}\n\n// This is a placeholder for a more sophisticated mapping in the future\nconst mapSuggestionToInsight = (suggestion: any, index: number): AIInsight => {\n    // Mock severity for now. In a real system, the API would provide this.\n    const severities: AIInsight['severity'][] = ['critical', 'warning', 'info'];\n    const randomSeverity = severities[Math.floor(Math.random() * severities.length)];\n\n    return {\n        id: `suggestion-${index}`,\n        type: suggestion.type || 'suggestion', // Assume the function might return a type\n        // A real implementation would have more dynamic icons\n        icon: '💡', // Placeholder\n        message: suggestion.description,\n        action: suggestion.actionLabel,\n        severity: suggestion.type === 'alert' ? randomSeverity : undefined,\n    }\n};\n\nclass AIInsightsService {\n  /**\n   * Fetches AI-generated suggestions for a given context (e.g., department).\n   * \n   * @param {string} departmentId - The context for which to fetch suggestions.\n   * @returns {Promise<AIInsight[]>} A promise that resolves to an array of AI insights.\n   */\n  async getInsights(departmentId: string = 'general'): Promise<AIInsight[]> {\n    const { data: { session } } = await supabase.auth.getSession();\n    \n    if (!session) {\n      throw new Error('Authentication is required to get AI suggestions.');\n    }\n\n    const response = await fetch(`${import.meta.env.VITE_SUPABASE_URL}/functions/v1/ai_generate_suggestions`, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n        'Authorization': `Bearer ${session.access_token}`,\n      },\n      body: JSON.stringify({ departmentId }),\n    });\n\n    if (!response.ok) {\n      const errorData = await response.json();\n      throw new Error(errorData.error || 'Failed to fetch AI insights.');\n    }\n\n    const suggestions = await response.json();\n    // The function seems to return the array directly or under a 'suggestions' key.\n    const suggestionsArray = suggestions.suggestions || suggestions;\n    \n    return suggestionsArray.map(mapSuggestionToInsight);\n  }\n}\n\nexport const aiInsightsService = new AIInsightsService(); ","usedDeprecatedRules":[]},{"filePath":"/home/vonj/Github/Nexus/src/lib/services/analyticsService.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":17,"column":55,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":17,"endColumn":58,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[626,629],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[626,629],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":34,"column":55,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":34,"endColumn":58,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1194,1197],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1194,1197],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\n * @name analyticsService\n * @description Mock analytics service for event tracking.\n * In a real application, this would be replaced with a proper analytics provider\n * like Segment, PostHog, or a custom analytics solution.\n */\n\nclass AnalyticsService {\n  private isInitialized = false;\n\n  /**\n   * Initializes the analytics service. In a real scenario, this would\n   * load an analytics SDK and identify the user.\n   * @param {string} userId - The ID of the current user.\n   * @param {Record<string, any>} userProperties - Properties associated with the user.\n   */\n  init(userId: string, userProperties: Record<string, any> = {}) {\n    if (this.isInitialized) {\n      console.warn('Analytics service already initialized.');\n      return;\n    }\n    \n    if (process.env.NODE_ENV === 'development') {\n      console.log(`[Analytics] Initialized for user ${userId}`, userProperties);\n    }\n    this.isInitialized = true;\n  }\n\n  /**\n   * Tracks an event with optional properties.\n   * @param {string} eventName - The name of the event to track.\n   * @param {Record<string, any>} properties - Additional data to send with the event.\n   */\n  track(eventName: string, properties: Record<string, any> = {}) {\n    if (!this.isInitialized) {\n      console.warn('Analytics service not initialized. Call init() first.');\n      return;\n    }\n    \n    if (process.env.NODE_ENV === 'development') {\n      console.log(`[Analytics] Event: ${eventName}`, properties);\n    }\n\n    // In a real implementation, you would send this to your analytics backend.\n    // Example:\n    // window.analytics.track(eventName, properties);\n  }\n\n  /**\n   * Resets the analytics service state, typically on user logout.\n   */\n  reset() {\n    if (process.env.NODE_ENV === 'development') {\n      console.log('[Analytics] Service reset.');\n    }\n    this.isInitialized = false;\n  }\n}\n\nexport const analyticsService = new AnalyticsService(); ","usedDeprecatedRules":[]},{"filePath":"/home/vonj/Github/Nexus/src/lib/services/apiIntegrationService.ts","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'APIDocAnalyzer' is defined but never used.","line":2,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":2,"endColumn":24},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'GeneratedConnector' is defined but never used.","line":2,"column":31,"nodeType":null,"messageId":"unusedVar","endLine":2,"endColumn":49}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { supabase } from '@/lib/core/supabase';\nimport { APIDocAnalyzer, type GeneratedConnector } from '../integrations/apiDocAnalyzer';\n\nexport interface ApiIntegrationData {\n  name: string;\n  description: string;\n  apiDoc: string;\n  analysisResult: {\n    title: string;\n    version: string;\n    serverUrl: string;\n    authMethods: string[];\n    endpointCount: number;\n    patterns: Array<{\n      name: string;\n      description: string;\n      endpoints: Array<{\n        name: string;\n        path: string;\n        method: string;\n        description: string;\n      }>;\n    }>;\n  };\n  config: {\n    baseUrl?: string;\n    apiKey?: string;\n    clientId?: string;\n    clientSecret?: string;\n    redirectUri?: string;\n  };\n  generatedCode?: string;\n}\n\nexport type UpdateApiIntegrationData = Partial<{\n  name: string;\n  description: string;\n  api_url: string;\n  is_active: boolean;\n  config: Partial<ApiIntegrationData['config']>;\n}>;\n\nexport class ApiIntegrationService {\n  /**\n   * Save a new API integration created through the API Learning System\n   */\n  static async saveApiIntegration(userId: string, integrationData: ApiIntegrationData) {\n    try {\n      // First, create or update the integration in the integrations table\n      const { data: integration, error: integrationError } = await supabase\n        .from('integrations')\n        .upsert({\n          name: integrationData.name,\n          slug: integrationData.name.toLowerCase().replace(/[^a-z0-9]/g, '-'),\n          category: 'api-learning',\n          description: integrationData.description || `Custom API integration for ${integrationData.name}`,\n          difficulty: 'medium',\n          estimated_setup_time: '15 min',\n          features: integrationData.analysisResult.patterns.map(p => p.name),\n          metadata: {\n            source: 'api-learning',\n            analysisResult: integrationData.analysisResult,\n            apiDoc: integrationData.apiDoc,\n            generatedCode: integrationData.generatedCode,\n            createdAt: new Date().toISOString()\n          }\n        }, { onConflict: 'slug' })\n        .select()\n        .single();\n\n      if (integrationError) {\n        throw new Error(`Failed to create integration: ${integrationError.message}`);\n      }\n\n      // Then, create the user connection\n      const { data: userIntegration, error: userIntegrationError } = await supabase\n        .from('user_integrations')\n        .insert({\n          user_id: userId,\n          integration_id: integration.id,\n          name: integrationData.name,\n          status: 'pending', // User still needs to configure auth\n          config: {\n            ...integrationData.config,\n            api_learning_generated: true,\n            patterns: integrationData.analysisResult.patterns,\n            auth_methods: integrationData.analysisResult.authMethods\n          },\n          metadata: {\n            source: 'api-learning',\n            created_via: 'api-learning-wizard',\n            endpoint_count: integrationData.analysisResult.endpointCount,\n            api_version: integrationData.analysisResult.version\n          }\n        })\n        .select()\n        .single();\n\n      if (userIntegrationError) {\n        // Cleanup the integration if user connection fails\n        await supabase.from('integrations').delete().eq('id', integration.id);\n        throw new Error(`Failed to create user integration: ${userIntegrationError.message}`);\n      }\n\n      return {\n        integration,\n        userIntegration,\n        success: true\n      };\n    } catch (error) {\n      console.error('Error saving API integration:', error);\n      throw error;\n    }\n  }\n\n  /**\n   * Get all API Learning integrations for a user\n   */\n  static async getUserApiIntegrations(userId: string) {\n    try {\n      const { data, error } = await supabase\n        .from('user_integrations')\n        .select(`\n          *,\n          integrations!inner(*)\n        `)\n        .eq('user_id', userId)\n        .eq('integrations.category', 'api-learning');\n\n      if (error) throw error;\n\n      return data || [];\n    } catch (error) {\n      console.error('Error fetching API integrations:', error);\n      throw error;\n    }\n  }\n\n  /**\n   * Update an API integration's configuration\n   */\n  static async updateApiIntegration(userIntegrationId: string, updates: UpdateApiIntegrationData) {\n    try {\n      const { data, error } = await supabase\n        .from('user_integrations')\n        .update({\n          ...updates,\n          updated_at: new Date().toISOString()\n        })\n        .eq('id', userIntegrationId)\n        .select()\n        .single();\n\n      if (error) throw error;\n      return data;\n    } catch (error) {\n      console.error('Error updating API integration:', error);\n      throw error;\n    }\n  }\n\n  /**\n   * Delete an API integration\n   */\n  static async deleteApiIntegration(userIntegrationId: string) {\n    try {\n      const { error } = await supabase\n        .from('user_integrations')\n        .delete()\n        .eq('id', userIntegrationId);\n\n      if (error) throw error;\n      return true;\n    } catch (error) {\n      console.error('Error deleting API integration:', error);\n      throw error;\n    }\n  }\n\n  /**\n   * Test an API integration connection\n   */\n  static async testApiIntegration(userIntegrationId: string) {\n    try {\n      // This would typically make a test API call\n      // For now, we'll just mark it as tested\n      const { data, error } = await supabase\n        .from('user_integrations')\n        .update({\n          metadata: {\n            last_tested: new Date().toISOString(),\n            test_status: 'success'\n          }\n        })\n        .eq('id', userIntegrationId)\n        .select()\n        .single();\n\n      if (error) throw error;\n      return { success: true, data };\n    } catch (error) {\n      console.error('Error testing API integration:', error);\n      return { success: false, error: error instanceof Error ? error.message : 'Unknown error' };\n    }\n  }\n} ","usedDeprecatedRules":[]},{"filePath":"/home/vonj/Github/Nexus/src/lib/services/apolloService.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":140,"column":82,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":140,"endColumn":85,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3183,3186],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3183,3186],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":213,"column":51,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":213,"endColumn":54,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[5376,5379],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[5376,5379],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":242,"column":54,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":242,"endColumn":57,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[6318,6321],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[6318,6321],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":272,"column":64,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":272,"endColumn":67,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[7348,7351],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[7348,7351],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":276,"column":51,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":276,"endColumn":54,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[7518,7521],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[7518,7521],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":305,"column":54,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":305,"endColumn":57,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[8394,8397],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[8394,8397],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'accounts' is assigned a value but never used.","line":331,"column":35,"nodeType":null,"messageId":"unusedVar","endLine":331,"endColumn":43}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\n * Apollo Integration Service\n * Integrates with Apollo.io for sales prospecting, outreach, and lead generation\n * Pillar: 1,2 - Automated prospecting and business development\n */\n\nimport { supabase } from '../core/supabase';\nimport { logger } from '../security/logger';\n\nexport interface ApolloConfig {\n  apiKey: string;\n  baseUrl: string;\n}\n\nexport interface ApolloContact {\n  id: string;\n  firstName: string;\n  lastName: string;\n  email: string;\n  title: string;\n  company: string;\n  industry: string;\n  location: string;\n  linkedinUrl?: string;\n  phone?: string;\n  score: number;\n  lastContactedAt?: string;\n  status: 'new' | 'contacted' | 'replied' | 'interested' | 'not_interested';\n  tags: string[];\n  createdAt: string;\n  updatedAt: string;\n}\n\nexport interface ApolloSequence {\n  id: string;\n  name: string;\n  status: 'active' | 'paused' | 'archived';\n  steps: Array<{\n    id: string;\n    type: 'email' | 'linkedin' | 'call' | 'manual';\n    waitTime: number;\n    template: string;\n  }>;\n  performance: {\n    sent: number;\n    delivered: number;\n    opened: number;\n    replied: number;\n    clicked: number;\n    bounced: number;\n  };\n  createdAt: string;\n  updatedAt: string;\n}\n\nexport interface ApolloAccount {\n  id: string;\n  name: string;\n  domain: string;\n  industry: string;\n  size: string;\n  location: string;\n  revenue?: number;\n  employees?: number;\n  technologies: string[];\n  score: number;\n  contacts: ApolloContact[];\n  createdAt: string;\n  updatedAt: string;\n}\n\nexport interface ApolloMetrics {\n  prospecting: {\n    totalContacts: number;\n    newContactsThisMonth: number;\n    qualifiedLeads: number;\n    contactsInSequences: number;\n    averageScore: number;\n  };\n  outreach: {\n    totalSequences: number;\n    activeSequences: number;\n    emailsSent: number;\n    emailsOpened: number;\n    emailsReplied: number;\n    openRate: number;\n    replyRate: number;\n    clickRate: number;\n  };\n  conversion: {\n    leadsGenerated: number;\n    meetingsBooked: number;\n    dealsCreated: number;\n    conversionRate: number;\n    avgTimeToReply: number;\n  };\n  performance: {\n    topPerformingSequences: Array<{\n      id: string;\n      name: string;\n      replyRate: number;\n    }>;\n    industryBreakdown: Array<{\n      industry: string;\n      contacts: number;\n      replyRate: number;\n    }>;\n  };\n}\n\nexport class ApolloService {\n  private config: ApolloConfig | null = null;\n\n  async initialize(): Promise<boolean> {\n    try {\n      const { data: integration, error } = await supabase\n        .from('user_integrations')\n        .select('config, credentials')\n        .eq('integration_slug', 'apollo')\n        .eq('status', 'active')\n        .maybeSingle();\n\n      if (error || !integration) {\n        logger.warn('Apollo integration not found or inactive');\n        return false;\n      }\n\n      this.config = {\n        apiKey: integration.credentials?.api_key,\n        baseUrl: integration.config?.base_url || 'https://api.apollo.io/v1'\n      };\n\n      return true;\n    } catch (error) {\n      logger.error({ error }, 'Failed to initialize Apollo service');\n      return false;\n    }\n  }\n\n  private async apiRequest(endpoint: string, options: RequestInit = {}): Promise<any> {\n    if (!this.config?.apiKey) {\n      throw new Error('Apollo not properly configured');\n    }\n\n    const url = `${this.config.baseUrl}${endpoint}`;\n    const response = await fetch(url, {\n      ...options,\n      headers: {\n        'Cache-Control': 'no-cache',\n        'Content-Type': 'application/json',\n        'X-Api-Key': this.config.apiKey,\n        ...options.headers\n      }\n    });\n\n    if (!response.ok) {\n      throw new Error(`Apollo API error: ${response.status} ${response.statusText}`);\n    }\n\n    return response.json();\n  }\n\n  /**\n   * Test connection to Apollo API\n   */\n  async testConnection(): Promise<{ success: boolean; message: string }> {\n    try {\n      await this.apiRequest('/auth/health');\n      return { success: true, message: 'Connected to Apollo successfully' };\n    } catch (error) {\n      logger.error({ error }, 'Failed to test Apollo connection');\n      return { \n        success: false, \n        message: error instanceof Error ? error.message : 'Connection failed' \n      };\n    }\n  }\n\n  /**\n   * Search for contacts based on criteria\n   */\n  async searchContacts(criteria: {\n    companyNames?: string[];\n    titles?: string[];\n    industries?: string[];\n    locations?: string[];\n    companySize?: string[];\n    limit?: number;\n  }): Promise<ApolloContact[]> {\n    try {\n      const params = new URLSearchParams();\n      \n      if (criteria.companyNames) {\n        params.append('organization_names', criteria.companyNames.join(','));\n      }\n      if (criteria.titles) {\n        params.append('person_titles', criteria.titles.join(','));\n      }\n      if (criteria.industries) {\n        params.append('organization_industry_tag_names', criteria.industries.join(','));\n      }\n      if (criteria.locations) {\n        params.append('person_locations', criteria.locations.join(','));\n      }\n      if (criteria.companySize) {\n        params.append('organization_num_employees_ranges', criteria.companySize.join(','));\n      }\n      \n      params.append('per_page', (criteria.limit || 25).toString());\n\n      const response = await this.apiRequest(`/mixed_people/search?${params.toString()}`);\n      \n      return (response.people || []).map((person: any) => ({\n        id: person.id,\n        firstName: person.first_name,\n        lastName: person.last_name,\n        email: person.email,\n        title: person.title,\n        company: person.organization?.name || '',\n        industry: person.organization?.industry || '',\n        location: person.city ? `${person.city}, ${person.state}` : '',\n        linkedinUrl: person.linkedin_url,\n        phone: person.phone,\n        score: person.contact_score || 0,\n        status: 'new',\n        tags: [],\n        createdAt: new Date().toISOString(),\n        updatedAt: new Date().toISOString()\n      }));\n    } catch (error) {\n      logger.error({ error, criteria }, 'Failed to search Apollo contacts');\n      return [];\n    }\n  }\n\n  /**\n   * Get all contacts from Apollo\n   */\n  async getContacts(): Promise<ApolloContact[]> {\n    try {\n      const response = await this.apiRequest('/contacts');\n      return (response.contacts || []).map((contact: any) => ({\n        id: contact.id,\n        firstName: contact.first_name,\n        lastName: contact.last_name,\n        email: contact.email,\n        title: contact.title,\n        company: contact.account?.name || '',\n        industry: contact.account?.industry || '',\n        location: contact.city ? `${contact.city}, ${contact.state}` : '',\n        linkedinUrl: contact.linkedin_url,\n        phone: contact.phone,\n        score: contact.contact_score || 0,\n        lastContactedAt: contact.last_contacted_at,\n        status: contact.status || 'new',\n        tags: contact.tags || [],\n        createdAt: contact.created_at,\n        updatedAt: contact.updated_at\n      }));\n    } catch (error) {\n      logger.error({ error }, 'Failed to fetch Apollo contacts');\n      return [];\n    }\n  }\n\n  /**\n   * Get all sequences from Apollo\n   */\n  async getSequences(): Promise<ApolloSequence[]> {\n    try {\n      const response = await this.apiRequest('/emailer_campaigns');\n      return (response.emailer_campaigns || []).map((sequence: any) => ({\n        id: sequence.id,\n        name: sequence.name,\n        status: sequence.active ? 'active' : 'paused',\n        steps: sequence.emailer_steps?.map((step: any) => ({\n          id: step.id,\n          type: step.type,\n          waitTime: step.wait_time,\n          template: step.template\n        })) || [],\n        performance: {\n          sent: sequence.num_sent || 0,\n          delivered: sequence.num_delivered || 0,\n          opened: sequence.num_opened || 0,\n          replied: sequence.num_replied || 0,\n          clicked: sequence.num_clicked || 0,\n          bounced: sequence.num_bounced || 0\n        },\n        createdAt: sequence.created_at,\n        updatedAt: sequence.updated_at\n      }));\n    } catch (error) {\n      logger.error({ error }, 'Failed to fetch Apollo sequences');\n      return [];\n    }\n  }\n\n  /**\n   * Get accounts from Apollo\n   */\n  async getAccounts(): Promise<ApolloAccount[]> {\n    try {\n      const response = await this.apiRequest('/accounts');\n      return (response.accounts || []).map((account: any) => ({\n        id: account.id,\n        name: account.name,\n        domain: account.website_url,\n        industry: account.industry,\n        size: account.organization_num_employees_ranges,\n        location: account.city ? `${account.city}, ${account.state}` : '',\n        revenue: account.estimated_num_employees,\n        employees: account.num_employees,\n        technologies: account.technologies || [],\n        score: account.account_score || 0,\n        contacts: [],\n        createdAt: account.created_at,\n        updatedAt: account.updated_at\n      }));\n    } catch (error) {\n      logger.error({ error }, 'Failed to fetch Apollo accounts');\n      return [];\n    }\n  }\n\n  /**\n   * Get comprehensive metrics from Apollo\n   */\n  async getMetrics(): Promise<ApolloMetrics> {\n    try {\n      const [contacts, sequences, accounts] = await Promise.all([\n        this.getContacts(),\n        this.getSequences(),\n        this.getAccounts()\n      ]);\n\n      // Calculate prospecting metrics\n      const currentMonth = new Date();\n      currentMonth.setDate(1);\n      \n      const newContactsThisMonth = contacts.filter(c => \n        new Date(c.createdAt) >= currentMonth\n      ).length;\n\n      const qualifiedLeads = contacts.filter(c => \n        c.score > 70 || ['interested', 'replied'].includes(c.status)\n      ).length;\n\n      const contactsInSequences = contacts.filter(c => \n        c.lastContactedAt\n      ).length;\n\n      const averageScore = contacts.length > 0\n        ? contacts.reduce((sum, c) => sum + c.score, 0) / contacts.length\n        : 0;\n\n      // Calculate outreach metrics\n      const activeSequences = sequences.filter(s => s.status === 'active');\n      const totalSent = sequences.reduce((sum, s) => sum + s.performance.sent, 0);\n      const totalOpened = sequences.reduce((sum, s) => sum + s.performance.opened, 0);\n      const totalReplied = sequences.reduce((sum, s) => sum + s.performance.replied, 0);\n      const totalClicked = sequences.reduce((sum, s) => sum + s.performance.clicked, 0);\n\n      const openRate = totalSent > 0 ? (totalOpened / totalSent) * 100 : 0;\n      const replyRate = totalSent > 0 ? (totalReplied / totalSent) * 100 : 0;\n      const clickRate = totalSent > 0 ? (totalClicked / totalSent) * 100 : 0;\n\n      // Calculate conversion metrics\n      const leadsGenerated = qualifiedLeads;\n      const conversionRate = contacts.length > 0 ? (leadsGenerated / contacts.length) * 100 : 0;\n\n      // Top performing sequences\n      const topPerformingSequences = sequences\n        .map(s => ({\n          id: s.id,\n          name: s.name,\n          replyRate: s.performance.sent > 0 \n            ? (s.performance.replied / s.performance.sent) * 100 \n            : 0\n        }))\n        .sort((a, b) => b.replyRate - a.replyRate)\n        .slice(0, 5);\n\n      // Industry breakdown\n      const industryMap = new Map<string, { contacts: number; replies: number }>();\n      contacts.forEach(contact => {\n        const industry = contact.industry || 'Unknown';\n        const current = industryMap.get(industry) || { contacts: 0, replies: 0 };\n        current.contacts++;\n        if (contact.status === 'replied') current.replies++;\n        industryMap.set(industry, current);\n      });\n\n      const industryBreakdown = Array.from(industryMap.entries()).map(([industry, data]) => ({\n        industry,\n        contacts: data.contacts,\n        replyRate: data.contacts > 0 ? (data.replies / data.contacts) * 100 : 0\n      }));\n\n      return {\n        prospecting: {\n          totalContacts: contacts.length,\n          newContactsThisMonth,\n          qualifiedLeads,\n          contactsInSequences,\n          averageScore: Math.round(averageScore)\n        },\n        outreach: {\n          totalSequences: sequences.length,\n          activeSequences: activeSequences.length,\n          emailsSent: totalSent,\n          emailsOpened: totalOpened,\n          emailsReplied: totalReplied,\n          openRate: Math.round(openRate * 100) / 100,\n          replyRate: Math.round(replyRate * 100) / 100,\n          clickRate: Math.round(clickRate * 100) / 100\n        },\n        conversion: {\n          leadsGenerated,\n          meetingsBooked: 0, // Would need calendar integration\n          dealsCreated: 0, // Would need CRM integration\n          conversionRate: Math.round(conversionRate * 100) / 100,\n          avgTimeToReply: 0 // Would need detailed tracking\n        },\n        performance: {\n          topPerformingSequences,\n          industryBreakdown\n        }\n      };\n\n    } catch (error) {\n      logger.error({ error }, 'Failed to calculate Apollo metrics');\n      throw error;\n    }\n  }\n\n  /**\n   * Create a new contact in Apollo\n   */\n  async createContact(contactData: Partial<ApolloContact>): Promise<ApolloContact> {\n    try {\n      const response = await this.apiRequest('/contacts', {\n        method: 'POST',\n        body: JSON.stringify({\n          first_name: contactData.firstName,\n          last_name: contactData.lastName,\n          email: contactData.email,\n          title: contactData.title,\n          organization_name: contactData.company\n        })\n      });\n      \n      return {\n        id: response.contact.id,\n        firstName: response.contact.first_name,\n        lastName: response.contact.last_name,\n        email: response.contact.email,\n        title: response.contact.title,\n        company: response.contact.organization?.name || '',\n        industry: response.contact.organization?.industry || '',\n        location: '',\n        score: 0,\n        status: 'new',\n        tags: [],\n        createdAt: response.contact.created_at,\n        updatedAt: response.contact.updated_at\n      };\n    } catch (error) {\n      logger.error({ error, contactData }, 'Failed to create Apollo contact');\n      throw error;\n    }\n  }\n\n  /**\n   * Add contacts to a sequence\n   */\n  async addContactsToSequence(sequenceId: string, contactIds: string[]): Promise<boolean> {\n    try {\n      await this.apiRequest(`/emailer_campaigns/${sequenceId}/add_contact_ids`, {\n        method: 'POST',\n        body: JSON.stringify({\n          contact_ids: contactIds,\n          send_email_from_email_account_id: null // Use default\n        })\n      });\n      \n      return true;\n    } catch (error) {\n      logger.error({ error, sequenceId, contactIds }, 'Failed to add contacts to Apollo sequence');\n      return false;\n    }\n  }\n\n  /**\n   * Update business health KPIs with Apollo data\n   */\n  async updateBusinessHealthKPIs(): Promise<void> {\n    try {\n      const metrics = await this.getMetrics();\n      \n      const snapshots = [\n        // Lead Generation KPI\n        {\n          department_id: 'sales',\n          kpi_id: 'lead_generation',\n          value: metrics.prospecting.newContactsThisMonth,\n          source: 'apollo_api',\n          captured_at: new Date().toISOString(),\n          metadata: {\n            total_contacts: metrics.prospecting.totalContacts,\n            qualified_leads: metrics.prospecting.qualifiedLeads,\n            average_score: metrics.prospecting.averageScore,\n            contacts_in_sequences: metrics.prospecting.contactsInSequences\n          }\n        },\n        // Outreach Performance KPI\n        {\n          department_id: 'sales',\n          kpi_id: 'outreach_performance',\n          value: metrics.outreach.replyRate,\n          source: 'apollo_api',\n          captured_at: new Date().toISOString(),\n          metadata: {\n            emails_sent: metrics.outreach.emailsSent,\n            open_rate: metrics.outreach.openRate,\n            click_rate: metrics.outreach.clickRate,\n            active_sequences: metrics.outreach.activeSequences\n          }\n        },\n        // Sales Conversion KPI\n        {\n          department_id: 'sales',\n          kpi_id: 'sales_conversion',\n          value: metrics.conversion.conversionRate,\n          source: 'apollo_api',\n          captured_at: new Date().toISOString(),\n          metadata: {\n            leads_generated: metrics.conversion.leadsGenerated,\n            meetings_booked: metrics.conversion.meetingsBooked,\n            deals_created: metrics.conversion.dealsCreated\n          }\n        }\n      ];\n\n      // Update using the secure edge function\n      const { error } = await supabase.functions.invoke('upsert_kpis', {\n        body: { snapshots }\n      });\n\n      if (error) {\n        logger.error({ error }, 'Failed to update Apollo KPIs');\n        throw error;\n      }\n\n      logger.info('Successfully updated business health KPIs with Apollo data');\n\n    } catch (error) {\n      logger.error({ error }, 'Error updating Apollo business health KPIs');\n      throw error;\n    }\n  }\n\n  /**\n   * Get key metrics for dashboard display\n   */\n  async getKeyMetrics(): Promise<Array<{\n    name: string;\n    value: string | number;\n    trend: 'up' | 'down' | 'stable';\n    unit?: string;\n  }>> {\n    const metrics = await this.getMetrics();\n\n    return [\n      {\n        name: 'Total Prospects',\n        value: metrics.prospecting.totalContacts,\n        trend: metrics.prospecting.newContactsThisMonth > 0 ? 'up' : 'stable',\n        unit: 'contacts'\n      },\n      {\n        name: 'Qualified Leads',\n        value: metrics.prospecting.qualifiedLeads,\n        trend: 'up',\n        unit: 'leads'\n      },\n      {\n        name: 'Email Open Rate',\n        value: `${metrics.outreach.openRate}%`,\n        trend: metrics.outreach.openRate > 25 ? 'up' : 'down',\n        unit: '%'\n      },\n      {\n        name: 'Reply Rate',\n        value: `${metrics.outreach.replyRate}%`,\n        trend: metrics.outreach.replyRate > 5 ? 'up' : 'down',\n        unit: '%'\n      },\n      {\n        name: 'Active Sequences',\n        value: metrics.outreach.activeSequences,\n        trend: 'stable',\n        unit: 'sequences'\n      }\n    ];\n  }\n}\n\nexport const apolloService = new ApolloService(); ","usedDeprecatedRules":[]},{"filePath":"/home/vonj/Github/Nexus/src/lib/services/auditLogService.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":4,"column":76,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":4,"endColumn":79,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[172,175],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[172,175],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { supabase } from '@/lib/core/supabase';\nimport { logger } from '@/lib/security/logger';\n\nexport async function sendAuditLog(action: string, details: Record<string, any> = {}) {\n  try {\n    const {\n      data: { session },\n    } = await supabase.auth.getSession();\n    const userId = session?.user?.id ?? null;\n\n    await supabase.from('ai_audit_logs').insert({\n      user_id: userId,\n      action,\n      table_name: 'client_event',\n      record_id: null,\n      details,\n    });\n  } catch (err) {\n    logger.error({ err, action }, 'Failed to insert audit log');\n  }\n} ","usedDeprecatedRules":[]},{"filePath":"/home/vonj/Github/Nexus/src/lib/services/billingService.ts","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'error' is defined but never used.","line":117,"column":18,"nodeType":null,"messageId":"unusedVar","endLine":117,"endColumn":23},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":314,"column":62,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":314,"endColumn":65,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[9793,9796],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[9793,9796],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":314,"column":76,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":314,"endColumn":79,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[9807,9810],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[9807,9810],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { supabase } from '../core/supabase';\nimport type { \n  BillingStatus, \n  StripeCustomer, \n  StripeSubscription,\n  UsageBilling,\n  BillingConfig \n} from '../types/billing';\nimport type { UserLicense } from '../types/licensing';\n\nclass BillingService {\n  private config: BillingConfig = {\n    stripePublishableKey: import.meta.env.VITE_STRIPE_PUBLISHABLE_KEY || '',\n    webhookSecret: import.meta.env.VITE_STRIPE_WEBHOOK_SECRET || '',\n    products: {\n      free: 'prod_SSpWGQ9Asuv8JL',\n      pro: 'prod_SSpWPE3A7NWmd9',\n      enterprise: 'prod_SSpW2AOu6axxoY'\n    },\n    prices: {\n      free: 'price_1RY7qtRsVFqVQ7BisNs7B2vJ',        // $0/month recurring\n      pro: 'price_1RcuKcRsVFqVQ7Bi562UMbw6',         // $29/month recurring (NEWLY CREATED)\n      enterprise: 'price_1RY7qFRsVFqVQ7Bicy9ySWyJ'   // $99/month recurring\n    },\n    paymentLinks: {\n      pro: 'https://buy.stripe.com/7sY7sNeAy0XrbIFd9e9R605',\n      enterprise: 'https://buy.stripe.com/14A3cxbomcG93c94CI9R606'\n    }\n  };\n\n  /**\n   * Get billing status for a user\n   */\n  async getBillingStatus(userId: string): Promise<BillingStatus> {\n    try {\n      // First, get user's license info from Supabase with proper NULL handling\n      const { data: userLicense, error } = await supabase\n        .from('user_licenses')\n        .select('*')\n        .eq('user_id', userId)\n        .is('org_id', null)\n        .single();\n\n      if (error && error.code !== 'PGRST116') {\n        throw error;\n      }\n\n      // Default to free tier if no license found\n      if (!userLicense) {\n        return {\n          hasActiveSubscription: false,\n          currentPlan: 'free',\n          subscriptionStatus: undefined,\n          billingPeriodEnd: undefined,\n          cancelAtPeriodEnd: false\n        };\n      }\n\n      const currentPlan = userLicense.tier as 'free' | 'pro' | 'enterprise';\n      \n      // If it's a paid plan, get Stripe subscription details\n      if (currentPlan !== 'free' && userLicense.stripe_subscription_id) {\n        try {\n          const subscription = await this.getSubscription(userLicense.stripe_subscription_id);\n          \n          return {\n            hasActiveSubscription: subscription.status === 'active',\n            subscriptionStatus: subscription.status,\n            currentPlan,\n            billingPeriodEnd: new Date(subscription.current_period_end * 1000),\n            cancelAtPeriodEnd: subscription.cancel_at_period_end\n          };\n        } catch (error) {\n          console.error('Error fetching Stripe subscription:', error);\n          // Fallback to database info if Stripe call fails\n        }\n      }\n\n      return {\n        hasActiveSubscription: currentPlan !== 'free',\n        currentPlan,\n        subscriptionStatus: currentPlan !== 'free' ? 'active' : undefined,\n        billingPeriodEnd: userLicense.expires_at ? new Date(userLicense.expires_at) : undefined,\n        cancelAtPeriodEnd: false\n      };\n    } catch (error) {\n      console.error('Error getting billing status:', error);\n      // Return safe default\n      return {\n        hasActiveSubscription: false,\n        currentPlan: 'free',\n        subscriptionStatus: undefined,\n        billingPeriodEnd: undefined,\n        cancelAtPeriodEnd: false\n      };\n    }\n  }\n\n  /**\n   * Get or create Stripe customer for a user\n   */\n  async getOrCreateCustomer(userId: string, email: string, name?: string): Promise<StripeCustomer> {\n    try {\n      // Check if customer already exists in our database with proper NULL handling\n      const { data: existingCustomer } = await supabase\n        .from('user_licenses')\n        .select('stripe_customer_id')\n        .eq('user_id', userId)\n        .is('org_id', null)\n        .single();\n\n      if (existingCustomer?.stripe_customer_id) {\n        // Fetch from Stripe to ensure it still exists\n        try {\n          const customer = await this.getCustomer(existingCustomer.stripe_customer_id);\n          return customer;\n        } catch (error) {\n          console.warn('Stripe customer not found, creating new one');\n        }\n      }\n\n      // Create new customer via Supabase Edge Function\n      const customer = await this.createCustomer(email, name);\n      \n      // Store customer ID in our database\n      await supabase\n        .from('user_licenses')\n        .upsert({\n          user_id: userId,\n          org_id: null,\n          stripe_customer_id: customer.id,\n          tier: 'free',\n          updated_at: new Date().toISOString()\n        });\n\n      return customer;\n    } catch (error) {\n      console.error('Error getting or creating customer:', error);\n      throw error;\n    }\n  }\n\n  /**\n   * Get payment links for upgrading plans\n   */\n  getPaymentLinks() {\n    return {\n      pro: this.config.paymentLinks.pro,\n      enterprise: this.config.paymentLinks.enterprise\n    };\n  }\n\n  /**\n   * Get usage billing information\n   */\n  async getUsageBilling(userId: string, period?: string): Promise<UsageBilling> {\n    try {\n      const startDate = period || new Date().toISOString().slice(0, 7); // YYYY-MM format\n      \n      // Query with proper NULL handling for org_id\n      const { data: usage } = await supabase\n        .from('chat_usage_tracking')\n        .select('*')\n        .eq('user_id', userId)\n        .is('org_id', null)\n        .gte('date', `${startDate}-01`)\n        .lt('date', this.getNextMonth(startDate));\n\n      const totalMessages = usage?.reduce((sum, day) => sum + day.message_count, 0) || 0;\n      \n      // Get user's current plan to calculate overage\n      const billingStatus = await this.getBillingStatus(userId);\n      const tier = billingStatus.currentPlan;\n      \n      const limits = {\n        free: 20,\n        pro: 500,\n        enterprise: 2000\n      };\n\n      const dailyLimit = limits[tier];\n      const monthlyLimit = dailyLimit * 30; // Approximate\n      \n      const overageMessages = Math.max(0, totalMessages - monthlyLimit);\n      const overageCost = overageMessages * 0.01; // $0.01 per overage message\n\n      return {\n        period: startDate,\n        totalMessages,\n        totalCost: overageCost,\n        breakdown: {\n          free: Math.min(totalMessages, monthlyLimit),\n          overageMessages,\n          overageCost\n        }\n      };\n    } catch (error) {\n      console.error('Error getting usage billing:', error);\n      return {\n        period: period || new Date().toISOString().slice(0, 7),\n        totalMessages: 0,\n        totalCost: 0,\n        breakdown: {\n          free: 0,\n          overageMessages: 0,\n          overageCost: 0\n        }\n      };\n    }\n  }\n\n  /**\n   * Handle subscription status change from webhook\n   */\n  async handleSubscriptionChange(subscriptionId: string): Promise<void> {\n    try {\n      const subscription = await this.getSubscription(subscriptionId);\n      \n      // Determine tier based on price ID\n      let tier: UserLicense['tier'] = 'free';\n      if (subscription.items.data[0]?.price.id === this.config.prices.pro) {\n        tier = 'pro';\n      } else if (subscription.items.data[0]?.price.id === this.config.prices.enterprise) {\n        tier = 'enterprise';\n      }\n\n      // Update user license in database\n      const { error } = await supabase\n        .from('user_licenses')\n        .update({\n          tier,\n          stripe_subscription_id: subscriptionId,\n          subscription_status: subscription.status,\n          current_period_end: new Date(subscription.current_period_end * 1000).toISOString(),\n          updated_at: new Date().toISOString()\n        })\n        .eq('stripe_customer_id', subscription.customer);\n\n      if (error) {\n        console.error('Error updating user license:', error);\n      }\n    } catch (error) {\n      console.error('Error handling subscription change:', error);\n    }\n  }\n\n  /**\n   * Cancel subscription at period end\n   */\n  async cancelSubscription(subscriptionId: string): Promise<void> {\n    try {\n      await this.callStripeEdgeFunction('cancel_subscription', {\n        subscription: subscriptionId\n      });\n    } catch (error) {\n      console.error('Error canceling subscription:', error);\n      throw error;\n    }\n  }\n\n  /**\n   * Reactivate canceled subscription\n   */\n  async reactivateSubscription(subscriptionId: string): Promise<void> {\n    try {\n      await this.callStripeEdgeFunction('update_subscription', {\n        subscription: subscriptionId,\n        cancel_at_period_end: false\n      });\n    } catch (error) {\n      console.error('Error reactivating subscription:', error);\n      throw error;\n    }\n  }\n\n  /**\n   * Create Stripe customer portal session for self-service billing\n   */\n  async createCustomerPortalSession(userId: string, returnUrl?: string): Promise<{ portalUrl: string }> {\n    try {\n      const { data, error } = await supabase.functions.invoke('stripe-customer-portal', {\n        body: {\n          userId,\n          returnUrl: returnUrl || `${window.location.origin}/settings/billing`\n        }\n      });\n\n      if (error) {\n        throw new Error(`Customer portal creation failed: ${error.message}`);\n      }\n\n      return {\n        portalUrl: data.data.portalUrl\n      };\n    } catch (error) {\n      console.error('Error creating customer portal session:', error);\n      throw error;\n    }\n  }\n\n  // Private helper methods\n  private async createCustomer(email: string, name?: string): Promise<StripeCustomer> {\n    return this.callStripeEdgeFunction('create_customer', { email, name });\n  }\n\n  private async getCustomer(customerId: string): Promise<StripeCustomer> {\n    return this.callStripeEdgeFunction('get_customer', { customer: customerId });\n  }\n\n  private async getSubscription(subscriptionId: string): Promise<StripeSubscription> {\n    return this.callStripeEdgeFunction('get_subscription', { subscription: subscriptionId });\n  }\n\n  private async callStripeEdgeFunction(action: string, data: any): Promise<any> {\n    const { data: result, error } = await supabase.functions.invoke('stripe-billing', {\n      body: { action, ...data }\n    });\n\n    if (error) {\n      throw new Error(`Stripe ${action} failed: ${error.message}`);\n    }\n\n    return result;\n  }\n\n  private getNextMonth(yearMonth: string): string {\n    const [year, month] = yearMonth.split('-').map(Number);\n    const nextMonth = month === 12 ? 1 : month + 1;\n    const nextYear = month === 12 ? year + 1 : year;\n    return `${nextYear}-${nextMonth.toString().padStart(2, '0')}-01`;\n  }\n}\n\nexport const billingService = new BillingService(); ","usedDeprecatedRules":[]},{"filePath":"/home/vonj/Github/Nexus/src/lib/services/businessHealthService.ts","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'calculateCategoryScore' is defined but never used.","line":6,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":6,"endColumn":25},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":40,"column":80,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":40,"endColumn":83,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1219,1222],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1219,1222],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":92,"column":31,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":92,"endColumn":34,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3179,3182],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3179,3182],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":92,"column":56,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":92,"endColumn":59,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3204,3207],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3204,3207],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":242,"column":27,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":242,"endColumn":30,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[7498,7501],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[7498,7501],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":242,"column":55,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":242,"endColumn":58,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[7526,7529],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[7526,7529],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { supabase } from '../core/supabase';\nimport { \n  businessHealthKPIs, \n  healthCategories, \n  calculateOverallHealthScore,\n  calculateCategoryScore,\n  type KPI \n} from '../businessHealthKPIs';\nimport { logger } from '../security/logger';\n\nexport interface BusinessHealthData {\n  kpiValues: Record<string, number | string | boolean>;\n  categoryScores: Record<string, number>;\n  overallScore: number;\n  lastUpdated: string;\n  completionPercentage: number;\n  missingKPIs: string[];\n}\n\nexport interface KPIDataPoint {\n  kpi_key: string;\n  value: unknown;\n  captured_at: string;\n  source: string;\n}\n\n/**\n * Business Health Service\n * Manages fetching, calculating, and updating business health metrics\n */\nexport class BusinessHealthService {\n  /**\n   * Fetch current business health data for the organization\n   */\n  async fetchBusinessHealthData(orgId: string): Promise<BusinessHealthData> {\n    // 1. Attempt to fetch via Supabase RPC `get_business_health_score` (preferred)\n    try {\n      const { data: rpcData, error: rpcErr } = await supabase.rpc('get_business_health_score');\n      if (!rpcErr && rpcData && rpcData.length > 0) {\n        const { score, breakdown } = rpcData[0] as { score: number; breakdown: any };\n\n        // breakdown expected shape: { [categoryId]: number }\n        const categoryScores: Record<string, number> = breakdown ?? {};\n\n        const result: BusinessHealthData = {\n          kpiValues: {},\n          categoryScores,\n          overallScore: score,\n          lastUpdated: new Date().toISOString(),\n          completionPercentage: 0,\n          missingKPIs: [],\n        };\n        logger.info({ orgId, score }, 'Fetched business health via RPC');\n        return result;\n      }\n    } catch (rpcCatch) {\n      logger.error({ err: rpcCatch, orgId }, 'RPC get_business_health_score failed');\n    }\n\n    // 2. Fallback to snapshot-based calculation --------------------------------\n    try {\n      logger.info({ orgId }, 'Fetching business health data');\n      \n      // Fetch KPI snapshots from the last 30 days\n      const thirtyDaysAgo = new Date();\n      thirtyDaysAgo.setDate(thirtyDaysAgo.getDate() - 30);\n      \n      const { data: snapshots, error } = await supabase\n        .from('ai_kpi_snapshots')\n        .select('kpi_key, kpi_id, value, captured_at, source')\n        .eq('org_id', orgId)\n        .gte('captured_at', thirtyDaysAgo.toISOString())\n        .order('captured_at', { ascending: false });\n      \n      if (error) {\n        logger.error({ error, orgId }, 'Failed to fetch KPI snapshots');\n        throw error;\n      }\n      \n      // Process snapshots into KPI values (latest value per KPI)\n      const kpiValues: Record<string, number | string | boolean> = {};\n      const processedKPIs = new Set<string>();\n      \n      for (const snapshot of snapshots || []) {\n        const kpiKey = snapshot.kpi_id || snapshot.kpi_key;\n        \n        if (!processedKPIs.has(kpiKey)) {\n          // Extract value from JSONB\n          let value = snapshot.value;\n          if (typeof value === 'object' && value !== null) {\n            // Handle structured values (e.g., { amount: 1000, currency: 'USD' })\n            value = (value as any).amount || (value as any).value || value;\n          }\n          \n          kpiValues[kpiKey] = value as number | string | boolean;\n          processedKPIs.add(kpiKey);\n        }\n      }\n      \n      // Calculate scores\n      const { overallScore, categoryScores } = calculateOverallHealthScore(kpiValues);\n      \n      // Calculate completion percentage\n      const totalKPIs = businessHealthKPIs.length;\n      const completedKPIs = Object.keys(kpiValues).length;\n      const completionPercentage = Math.round((completedKPIs / totalKPIs) * 100);\n      \n      // Identify missing KPIs\n      const missingKPIs = businessHealthKPIs\n        .filter(kpi => !(kpi.id in kpiValues))\n        .map(kpi => kpi.id);\n      \n      const result: BusinessHealthData = {\n        kpiValues,\n        categoryScores,\n        overallScore,\n        lastUpdated: new Date().toISOString(),\n        completionPercentage,\n        missingKPIs\n      };\n      \n      logger.info({ \n        orgId, \n        overallScore, \n        completionPercentage,\n        missingKPICount: missingKPIs.length \n      }, 'Business health data calculated');\n      \n      return result;\n      \n    } catch (error) {\n      logger.error({ error, orgId }, 'Error fetching business health data');\n      throw error;\n    }\n  }\n  \n  /**\n   * Update a single KPI value\n   */\n  async updateKPIValue(\n    orgId: string,\n    departmentId: string,\n    kpiId: string,\n    value: number | string | boolean,\n    source: string = 'manual'\n  ): Promise<void> {\n    try {\n      logger.info({ orgId, departmentId, kpiId, source }, 'Updating KPI value');\n      \n      const { error } = await supabase\n        .from('ai_kpi_snapshots')\n        .insert({\n          org_id: orgId,\n          department_id: departmentId,\n          kpi_id: kpiId,\n          kpi_key: kpiId,\n          value: typeof value === 'object' ? value : { value },\n          source,\n          captured_at: new Date().toISOString()\n        });\n      \n      if (error) {\n        logger.error({ error, orgId, kpiId }, 'Failed to update KPI value');\n        throw error;\n      }\n      \n      logger.info({ orgId, kpiId }, 'KPI value updated successfully');\n      \n    } catch (error) {\n      logger.error({ error, orgId, kpiId }, 'Error updating KPI value');\n      throw error;\n    }\n  }\n  \n  /**\n   * Bulk update multiple KPI values\n   */\n  async bulkUpdateKPIs(\n    orgId: string,\n    departmentId: string,\n    kpiUpdates: Array<{\n      kpiId: string;\n      value: number | string | boolean;\n      source?: string;\n    }>\n  ): Promise<void> {\n    try {\n      logger.info({ orgId, departmentId, updateCount: kpiUpdates.length }, 'Bulk updating KPIs');\n      \n      const rows = kpiUpdates.map(update => ({\n        org_id: orgId,\n        department_id: departmentId,\n        kpi_id: update.kpiId,\n        kpi_key: update.kpiId,\n        value: typeof update.value === 'object' ? update.value : { value: update.value },\n        source: update.source || 'bulk_update',\n        captured_at: new Date().toISOString()\n      }));\n      \n      const { error } = await supabase\n        .from('ai_kpi_snapshots')\n        .insert(rows);\n      \n      if (error) {\n        logger.error({ error, orgId, updateCount: kpiUpdates.length }, 'Failed to bulk update KPIs');\n        throw error;\n      }\n      \n      logger.info({ orgId, updateCount: kpiUpdates.length }, 'KPIs bulk updated successfully');\n      \n    } catch (error) {\n      logger.error({ error, orgId }, 'Error bulk updating KPIs');\n      throw error;\n    }\n  }\n  \n  /**\n   * Get KPI history for trend analysis\n   */\n  async getKPIHistory(\n    orgId: string,\n    kpiId: string,\n    days: number = 90\n  ): Promise<Array<{ date: string; value: number | string | boolean }>> {\n    try {\n      const startDate = new Date();\n      startDate.setDate(startDate.getDate() - days);\n      \n      const { data, error } = await supabase\n        .from('ai_kpi_snapshots')\n        .select('value, captured_at')\n        .eq('org_id', orgId)\n        .eq('kpi_id', kpiId)\n        .gte('captured_at', startDate.toISOString())\n        .order('captured_at', { ascending: true });\n      \n      if (error) throw error;\n      \n      return (data || []).map(row => ({\n        date: row.captured_at,\n        value: typeof row.value === 'object' && row.value !== null \n          ? (row.value as any).value || (row.value as any).amount || row.value\n          : row.value\n      }));\n      \n    } catch (error) {\n      logger.error({ error, orgId, kpiId }, 'Error fetching KPI history');\n      throw error;\n    }\n  }\n  \n  /**\n   * Get improvement recommendations based on current scores\n   */\n  getImprovementRecommendations(healthData: BusinessHealthData): Array<{\n    category: string;\n    priority: 'high' | 'medium' | 'low';\n    title: string;\n    description: string;\n    actionItems: string[];\n  }> {\n    const recommendations: Array<{\n      category: string;\n      priority: 'high' | 'medium' | 'low';\n      title: string;\n      description: string;\n      actionItems: string[];\n    }> = [];\n    \n    // Analyze each category for improvement opportunities\n    healthCategories.forEach(category => {\n      const score = healthData.categoryScores[category.id] || 0;\n      \n      if (score < 60) {\n        recommendations.push({\n          category: category.id,\n          priority: 'high',\n          title: `Improve ${category.name} Performance`,\n          description: `Your ${category.name.toLowerCase()} score of ${score}% needs immediate attention.`,\n          actionItems: this.getCategoryActionItems(category.id, healthData.kpiValues)\n        });\n      } else if (score < 80) {\n        recommendations.push({\n          category: category.id,\n          priority: 'medium',\n          title: `Optimize ${category.name} Metrics`,\n          description: `Your ${category.name.toLowerCase()} score of ${score}% has room for improvement.`,\n          actionItems: this.getCategoryActionItems(category.id, healthData.kpiValues)\n        });\n      }\n    });\n    \n    // Add data completion recommendations\n    if (healthData.completionPercentage < 80) {\n      recommendations.push({\n        category: 'data',\n        priority: 'high',\n        title: 'Complete Your Business Health Assessment',\n        description: `Only ${healthData.completionPercentage}% of your KPIs have data. Complete the assessment for accurate insights.`,\n        actionItems: [\n          'Connect missing data sources',\n          'Manually input key metrics',\n          'Set up automated data collection',\n          'Review and update existing KPI values'\n        ]\n      });\n    }\n    \n    return recommendations.sort((a, b) => {\n      const priorityOrder = { high: 3, medium: 2, low: 1 };\n      return priorityOrder[b.priority] - priorityOrder[a.priority];\n    });\n  }\n  \n  /**\n   * Get specific action items for a category based on low-performing KPIs\n   */\n  private getCategoryActionItems(categoryId: string, kpiValues: Record<string, number | string | boolean>): string[] {\n    const categoryKPIs = businessHealthKPIs.filter(kpi => kpi.category === categoryId);\n    const actionItems: string[] = [];\n    \n    categoryKPIs.forEach(kpi => {\n      if (kpi.actionTask && kpiValues[kpi.id] !== undefined) {\n        // Check if KPI is underperforming\n        const score = this.calculateKPIScore(kpi, kpiValues[kpi.id]);\n        if (score < 60) {\n          actionItems.push(kpi.actionTask);\n        }\n      }\n    });\n    \n    // Add generic action items if no specific ones available\n    if (actionItems.length === 0) {\n      switch (categoryId) {\n        case 'sales':\n          actionItems.push(\n            'Review and optimize your sales funnel',\n            'Improve lead qualification process',\n            'Analyze customer acquisition costs'\n          );\n          break;\n        case 'finance':\n          actionItems.push(\n            'Review monthly financial statements',\n            'Optimize cash flow management',\n            'Reduce operational expenses'\n          );\n          break;\n        case 'support':\n          actionItems.push(\n            'Implement customer feedback system',\n            'Optimize support ticket workflow',\n            'Train support team on best practices'\n          );\n          break;\n        case 'marketing':\n          actionItems.push(\n            'Analyze marketing campaign performance',\n            'Optimize content strategy',\n            'Improve lead generation tactics'\n          );\n          break;\n        case 'operations':\n          actionItems.push(\n            'Identify automation opportunities',\n            'Review operational processes',\n            'Optimize resource utilization'\n          );\n          break;\n        case 'maturity':\n          actionItems.push(\n            'Document standard operating procedures',\n            'Implement strategic planning process',\n            'Review organizational structure'\n          );\n          break;\n      }\n    }\n    \n    return actionItems;\n  }\n  \n  /**\n   * Calculate KPI score (duplicated from businessHealthKPIs.ts for internal use)\n   */\n  private calculateKPIScore(kpi: KPI, value: number | string | boolean): number {\n    if (kpi.dataType === 'boolean') {\n      return value ? 100 : 0;\n    }\n    \n    if (kpi.dataType === 'selection') {\n      const options = kpi.options || [];\n      const index = options.indexOf(value as string);\n      return index >= 0 ? (index / (options.length - 1)) * 100 : 0;\n    }\n    \n    if (kpi.thresholds) {\n      const numValue = typeof value === 'number' ? value : parseFloat(value as string);\n      if (isNaN(numValue)) return 0;\n      \n      const { poor, fair, good, excellent } = kpi.thresholds;\n      const isInverse = poor > excellent;\n      \n      if (isInverse) {\n        if (numValue <= excellent) return 100;\n        if (numValue <= good) return 80;\n        if (numValue <= fair) return 60;\n        if (numValue <= poor) return 40;\n        return 20;\n      } else {\n        if (numValue >= excellent) return 100;\n        if (numValue >= good) return 80;\n        if (numValue >= fair) return 60;\n        if (numValue >= poor) return 40;\n        return 20;\n      }\n    }\n    \n    return 0;\n  }\n}\n\n// Export singleton instance\nexport const businessHealthService = new BusinessHealthService();","usedDeprecatedRules":[]},{"filePath":"/home/vonj/Github/Nexus/src/lib/services/businessObservationService.ts","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'companyId' is defined but never used.","line":80,"column":65,"nodeType":null,"messageId":"unusedVar","endLine":80,"endColumn":74},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'companyId' is defined but never used.","line":231,"column":65,"nodeType":null,"messageId":"unusedVar","endLine":231,"endColumn":74},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'companyId' is defined but never used.","line":281,"column":62,"nodeType":null,"messageId":"unusedVar","endLine":281,"endColumn":71},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":339,"column":48,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":339,"endColumn":51,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[12720,12723],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[12720,12723],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { supabase } from '../core/supabase';\nimport { logger } from '../security/logger';\nimport { domainAnalysisService } from './domainAnalysisService';\nimport type { BusinessInsight } from '../types/learning-system';\n\nexport interface EABusinessObservation {\n  id: string;\n  type: 'opportunity' | 'risk' | 'achievement' | 'recommendation';\n  priority: 'low' | 'medium' | 'high' | 'critical';\n  category: string;\n  title: string;\n  description: string;\n  insights: string[];\n  actionItems: string[];\n  estimatedImpact: {\n    timeToValue: number; // minutes\n    businessValue: number; // dollars\n    effort: 'low' | 'medium' | 'high';\n  };\n  dataSource: string[];\n  confidence: number; // 0-1\n  createdAt: string;\n  relevantPages: string[];\n  automationPotential?: {\n    canAutomate: boolean;\n    complexity: 'simple' | 'moderate' | 'complex';\n    description: string;\n  };\n}\n\nclass BusinessObservationService {\n  constructor() {\n    // Using the singleton instance from domainAnalysisService\n  }\n\n  /**\n   * Generate comprehensive business observations for the EA\n   */\n  async generateBusinessObservations(userId: string, companyId: string): Promise<EABusinessObservation[]> {\n    try {\n      const observations: EABusinessObservation[] = [];\n\n      // Run all observation generators in parallel\n      const [\n        emailObservations,\n        integrationObservations,\n        performanceObservations,\n        securityObservations\n      ] = await Promise.all([\n        this.generateEmailDomainObservations(userId, companyId),\n        this.generateIntegrationObservations(userId, companyId),\n        this.generatePerformanceObservations(userId, companyId),\n        this.generateSecurityObservations(userId, companyId)\n      ]);\n\n      observations.push(\n        ...emailObservations,\n        ...integrationObservations,\n        ...performanceObservations,\n        ...securityObservations\n      );\n\n      // Sort by priority and confidence\n      return observations.sort((a, b) => {\n        const priorityOrder = { critical: 4, high: 3, medium: 2, low: 1 };\n        const priorityDiff = priorityOrder[b.priority] - priorityOrder[a.priority];\n        if (priorityDiff !== 0) return priorityDiff;\n        return b.confidence - a.confidence;\n      });\n\n    } catch (error) {\n      logger.error({ error, userId, companyId }, 'Error generating business observations');\n      return [];\n    }\n  }\n\n  /**\n   * Generate professional email domain observations\n   */\n  private async generateEmailDomainObservations(userId: string, companyId: string): Promise<EABusinessObservation[]> {\n    try {\n      const analysis = await domainAnalysisService.analyzeUserEmailDomains(userId);\n      const observations: EABusinessObservation[] = [];\n\n      // Professional email opportunity\n      if (analysis.customDomainCount === 0 && analysis.overallProfessionalScore < 70) {\n        const businessValue = this.calculateEmailUpgradeValue(analysis);\n        \n        observations.push({\n          id: `email-professional-${Date.now()}`,\n          type: 'opportunity',\n          priority: analysis.totalEmails > 50 ? 'high' : 'medium',\n          category: 'Business Credibility',\n          title: 'Professional Email Domain Opportunity',\n          description: `Your business is using generic email providers (${analysis.genericDomainCount} accounts). Upgrading to a professional domain email would significantly boost credibility and brand recognition.`,\n          insights: [\n            `42% of customers are more likely to trust businesses with professional email addresses`,\n            `Generic email domains can reduce perceived professionalism by up to 60%`,\n            `Professional email increases email deliverability rates by 23%`,\n            `Custom domain email provides better brand consistency across communications`\n          ],\n          actionItems: [\n            'Set up Microsoft 365 Business with custom domain',\n            'Migrate existing email communications to professional addresses',\n            'Update business cards and marketing materials with new email',\n            'Configure email signatures with professional branding',\n            'Set up email forwarding during transition period'\n          ],\n          estimatedImpact: {\n            timeToValue: 120, // 2 hours setup\n            businessValue: businessValue,\n            effort: 'medium'\n          },\n          dataSource: ['user_profile', 'email_analysis', 'business_health'],\n          confidence: 0.92,\n          createdAt: new Date().toISOString(),\n          relevantPages: ['dashboard', 'settings', 'business-health'],\n          automationPotential: {\n            canAutomate: true,\n            complexity: 'moderate',\n            description: 'Can automate domain setup and email migration with Microsoft 365 API integration'\n          }\n        });\n      }\n\n      // Email security observation\n      if (analysis.customDomainCount > 0) {\n        observations.push({\n          id: `email-security-${Date.now()}`,\n          type: 'recommendation',\n          priority: 'medium',\n          category: 'Email Security',\n          title: 'Email Security Enhancement Opportunity',\n          description: 'Your professional email setup is excellent! Consider adding advanced security features to protect against phishing and spoofing.',\n          insights: [\n            'DMARC, SPF, and DKIM records prevent email spoofing',\n            'Advanced Threat Protection blocks 99.9% of phishing attempts',\n            'Email encryption ensures sensitive communications remain secure'\n          ],\n          actionItems: [\n            'Configure DMARC, SPF, and DKIM DNS records',\n            'Enable Microsoft Defender for Office 365',\n            'Set up email encryption for sensitive communications',\n            'Implement multi-factor authentication for all email accounts'\n          ],\n          estimatedImpact: {\n            timeToValue: 60,\n            businessValue: 5000, // Cost of potential security breach\n            effort: 'low'\n          },\n          dataSource: ['email_analysis', 'security_assessment'],\n          confidence: 0.85,\n          createdAt: new Date().toISOString(),\n          relevantPages: ['settings', 'security'],\n          automationPotential: {\n            canAutomate: true,\n            complexity: 'simple',\n            description: 'DNS records can be automatically configured through domain registrar APIs'\n          }\n        });\n      }\n\n      return observations;\n\n    } catch (error) {\n      logger.error({ error, userId }, 'Error generating email domain observations');\n      return [];\n    }\n  }\n\n  /**\n   * Generate integration-related observations\n   */\n  private async generateIntegrationObservations(userId: string, companyId: string): Promise<EABusinessObservation[]> {\n    try {\n      const { data: integrations } = await supabase\n        .from('ai_integrations')\n        .select('*')\n        .eq('company_id', companyId)\n        .eq('status', 'active');\n\n      const observations: EABusinessObservation[] = [];\n\n      if (!integrations || integrations.length < 3) {\n        observations.push({\n          id: `integration-opportunity-${Date.now()}`,\n          type: 'opportunity',\n          priority: 'medium',\n          category: 'Business Automation',\n          title: 'Integration Opportunities Detected',\n          description: `Your business has ${integrations?.length || 0} active integrations. Adding key integrations could save significant time and reduce manual work.`,\n          insights: [\n            'Businesses with 5+ integrations report 40% time savings',\n            'Automated data sync reduces errors by 78%',\n            'Integration ROI typically achieved within 30 days'\n          ],\n          actionItems: [\n            'Connect your CRM for automated lead tracking',\n            'Integrate accounting software for financial insights',\n            'Set up email marketing automation',\n            'Connect project management tools for workflow optimization'\n          ],\n          estimatedImpact: {\n            timeToValue: 30,\n            businessValue: 15000, // Annual time savings\n            effort: 'low'\n          },\n          dataSource: ['integrations', 'usage_patterns'],\n          confidence: 0.88,\n          createdAt: new Date().toISOString(),\n          relevantPages: ['integrations', 'dashboard'],\n          automationPotential: {\n            canAutomate: true,\n            complexity: 'simple',\n            description: 'Can suggest and auto-configure popular integrations based on business type'\n          }\n        });\n      }\n\n      return observations;\n\n    } catch (error) {\n      logger.error({ error, userId }, 'Error generating integration observations');\n      return [];\n    }\n  }\n\n  /**\n   * Generate performance-related observations\n   */\n  private async generatePerformanceObservations(userId: string, companyId: string): Promise<EABusinessObservation[]> {\n    try {\n      // This would analyze usage patterns, load times, etc.\n      const observations: EABusinessObservation[] = [];\n\n      // Mock observation for now - replace with actual analytics\n      observations.push({\n        id: `performance-insight-${Date.now()}`,\n        type: 'achievement',\n        priority: 'low',\n        category: 'System Performance',\n        title: 'Excellent System Usage Patterns',\n        description: 'Your team is effectively using the platform with consistent daily engagement and optimal feature adoption.',\n        insights: [\n          'Daily active usage is 23% above average',\n          'Feature adoption rate is in the top 15% of similar businesses',\n          'User engagement patterns indicate high productivity'\n        ],\n        actionItems: [\n          'Continue current usage patterns',\n          'Consider expanding to additional team members',\n          'Explore advanced features for power users'\n        ],\n        estimatedImpact: {\n          timeToValue: 0,\n          businessValue: 0,\n          effort: 'low'\n        },\n        dataSource: ['usage_analytics', 'engagement_metrics'],\n        confidence: 0.75,\n        createdAt: new Date().toISOString(),\n        relevantPages: ['dashboard'],\n        automationPotential: {\n          canAutomate: false,\n          complexity: 'simple',\n          description: 'Performance monitoring is already automated'\n        }\n      });\n\n      return observations;\n\n    } catch (error) {\n      logger.error({ error, userId }, 'Error generating performance observations');\n      return [];\n    }\n  }\n\n  /**\n   * Generate security-related observations\n   */\n  private async generateSecurityObservations(userId: string, companyId: string): Promise<EABusinessObservation[]> {\n    try {\n      const observations: EABusinessObservation[] = [];\n\n      // Check for security best practices\n      const { data: userProfile } = await supabase\n        .from('ai_user_profiles')\n        .select('security_settings')\n        .eq('user_id', userId)\n        .single();\n\n      if (!userProfile?.security_settings?.mfa_enabled) {\n        observations.push({\n          id: `security-mfa-${Date.now()}`,\n          type: 'risk',\n          priority: 'high',\n          category: 'Account Security',\n          title: 'Multi-Factor Authentication Not Enabled',\n          description: 'Your account is not protected with multi-factor authentication, which significantly increases security risk.',\n          insights: [\n            'MFA prevents 99.9% of automated cyber attacks',\n            'Business accounts are 300% more likely to be targeted',\n            'Data breaches cost small businesses an average of $120,000'\n          ],\n          actionItems: [\n            'Enable multi-factor authentication on your account',\n            'Set up backup authentication methods',\n            'Review and update password strength',\n            'Enable security alerts for suspicious activity'\n          ],\n          estimatedImpact: {\n            timeToValue: 10,\n            businessValue: 120000, // Cost of potential breach\n            effort: 'low'\n          },\n          dataSource: ['security_settings', 'user_profile'],\n          confidence: 0.95,\n          createdAt: new Date().toISOString(),\n          relevantPages: ['settings', 'security'],\n          automationPotential: {\n            canAutomate: true,\n            complexity: 'simple',\n            description: 'Can guide user through MFA setup automatically'\n          }\n        });\n      }\n\n      return observations;\n\n    } catch (error) {\n      logger.error({ error, userId }, 'Error generating security observations');\n      return [];\n    }\n  }\n\n  /**\n   * Calculate business value of email upgrade\n   */\n  private calculateEmailUpgradeValue(analysis: any): number {\n    let baseValue = 2000; // Base credibility improvement value\n    \n    // Scale with business size\n    if (analysis.totalEmails > 50) baseValue *= 2;\n    if (analysis.totalEmails > 100) baseValue *= 1.5;\n    \n    // Add marketing value\n    const marketingValue = analysis.totalEmails * 50; // $50 per professional email per year\n    \n    return baseValue + marketingValue;\n  }\n\n  /**\n   * Convert observations to BusinessInsight format for Progressive Intelligence\n   */\n  async getBusinessInsights(userId: string, companyId: string, pageId?: string): Promise<BusinessInsight[]> {\n    const observations = await this.generateBusinessObservations(userId, companyId);\n    \n    return observations\n      .filter(obs => !pageId || obs.relevantPages.includes(pageId))\n      .map(obs => ({\n        id: obs.id,\n        type: obs.type as BusinessInsight['type'],\n        priority: obs.priority as BusinessInsight['priority'],\n        category: obs.category,\n        title: obs.title,\n        description: obs.description,\n        dataSource: obs.dataSource,\n        metrics: {\n          impact: Math.min(10, Math.floor(obs.estimatedImpact.businessValue / 1000)),\n          confidence: obs.confidence,\n          timeToValue: obs.estimatedImpact.timeToValue,\n          effort: obs.estimatedImpact.effort === 'low' ? 1 : obs.estimatedImpact.effort === 'medium' ? 3 : 5\n        },\n        suggestedActions: obs.actionItems.map((item, index) => ({\n          id: `${obs.id}-action-${index}`,\n          title: item,\n          description: item,\n          type: 'manual',\n          estimatedTime: Math.floor(obs.estimatedImpact.timeToValue / obs.actionItems.length),\n          difficulty: obs.estimatedImpact.effort,\n          prerequisites: [],\n          steps: [item],\n          expectedOutcome: `Complete: ${item}`,\n          trackingMetrics: []\n        })),\n        automationPotential: obs.automationPotential ? {\n          id: `${obs.id}-automation`,\n          title: `Automate ${obs.title}`,\n          description: obs.automationPotential.description,\n          type: 'n8n_workflow',\n          complexity: obs.automationPotential.complexity,\n          estimatedSetupTime: obs.estimatedImpact.timeToValue,\n          estimatedTimeSavings: obs.estimatedImpact.timeToValue * 4,\n          requiredIntegrations: obs.dataSource,\n          workflow: {\n            trigger: { type: 'manual', config: {}, description: 'Manual trigger' },\n            actions: obs.actionItems.map(item => ({\n              id: `action-${Date.now()}`,\n              type: 'task',\n              config: { task: item },\n              description: item\n            }))\n          },\n          riskLevel: 'low',\n          testingRequired: true\n        } : null,\n        context: {\n          pageRelevance: obs.relevantPages,\n          triggerConditions: { userId, companyId },\n          historicalData: []\n        },\n        createdAt: obs.createdAt,\n        status: 'active'\n      }));\n  }\n}\n\nexport const businessObservationService = new BusinessObservationService();","usedDeprecatedRules":[]},{"filePath":"/home/vonj/Github/Nexus/src/lib/services/clientIntelligenceService.ts","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'createClient' is defined but never used.","line":7,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":7,"endColumn":22},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'n8nWorkflowService' is defined but never used.","line":10,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":10,"endColumn":28},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":42,"column":13,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":42,"endColumn":16,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1103,1106],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1103,1106],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":55,"column":13,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":55,"endColumn":16,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1450,1453],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1450,1453],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\n * Client Intelligence Service\n * Connects UI to the n8n client intelligence workflows and provides data operations\n * Pillar: 1,2 - Customer Success Automation + Business Workflow Intelligence\n */\n\nimport { createClient } from '@supabase/supabase-js';\nimport { supabase } from '@/lib/core/supabase';\nimport { logger } from '@/lib/security/logger';\nimport { n8nWorkflowService } from './n8nWorkflowService';\n\nexport interface UnifiedClientProfile {\n  id: string;\n  client_id: string;\n  user_id: string;\n  company_id: string;\n  profile_data: {\n    name?: string;\n    email?: string;\n    phone?: string;\n    company?: string;\n    location?: string;\n    industry?: string;\n    website?: string;\n    social_profiles?: {\n      linkedin?: string;\n      twitter?: string;\n    };\n    demographics?: {\n      company_size?: string;\n      revenue_range?: string;\n      role?: string;\n    };\n  };\n  source_integrations: string[];\n  primary_source: string;\n  completeness_score: number;\n  engagement_score: number;\n  estimated_value: number;\n  last_interaction: string;\n  last_enrichment_at: string;\n  insights: any[];\n  created_at: string;\n  updated_at: string;\n}\n\nexport interface ClientInteraction {\n  id: string;\n  client_profile_id: string;\n  interaction_type: 'email' | 'call' | 'meeting' | 'transaction' | 'support' | 'website_visit';\n  channel: string;\n  summary: string;\n  sentiment: 'positive' | 'neutral' | 'negative';\n  value: number;\n  metadata: any;\n  occurred_at: string;\n}\n\nexport interface ClientIntelligenceAlert {\n  id: string;\n  client_profile_id: string;\n  alert_type: 'opportunity' | 'risk' | 'milestone' | 'anomaly';\n  title: string;\n  description: string;\n  priority: 'low' | 'medium' | 'high' | 'critical';\n  is_resolved: boolean;\n  created_at: string;\n}\n\nclass ClientIntelligenceService {\n  private readonly n8nWebhookBase = 'https://automate.marcoby.net/webhook';\n\n  /**\n   * Fetch unified client profiles with filtering and sorting\n   */\n  async getClientProfiles(\n    userId: string,\n    options: {\n      filter?: 'all' | 'high_value' | 'recent' | 'at_risk';\n      sortBy?: 'engagement' | 'value' | 'recent' | 'completeness';\n      search?: string;\n      limit?: number;\n    } = {}\n  ): Promise<UnifiedClientProfile[]> {\n    try {\n      const { filter = 'all', sortBy = 'engagement', search, limit = 50 } = options;\n\n      let query = supabase\n        .from('ai_unified_client_profiles')\n        .select('*')\n        .eq('user_id', userId);\n\n      // Apply filters\n      switch (filter) {\n        case 'high_value':\n          query = query.gte('estimated_value', 10000);\n          break;\n        case 'recent':\n          query = query.gte('last_interaction', new Date(Date.now() - 7 * 24 * 60 * 60 * 1000).toISOString());\n          break;\n        case 'at_risk':\n          query = query.lt('engagement_score', 30);\n          break;\n      }\n\n      // Apply search\n      if (search) {\n        query = query.or(`profile_data->>name.ilike.%${search}%,profile_data->>email.ilike.%${search}%,profile_data->>company.ilike.%${search}%`);\n      }\n\n      // Apply sorting\n      switch (sortBy) {\n        case 'engagement':\n          query = query.order('engagement_score', { ascending: false });\n          break;\n        case 'value':\n          query = query.order('estimated_value', { ascending: false });\n          break;\n        case 'recent':\n          query = query.order('last_interaction', { ascending: false });\n          break;\n        case 'completeness':\n          query = query.order('completeness_score', { ascending: false });\n          break;\n      }\n\n      const { data, error } = await query.limit(limit);\n\n      if (error) {\n        logger.error({ error }, 'Error fetching client profiles');\n        throw error;\n      }\n\n      return data || [];\n    } catch (error) {\n      logger.error({ error, userId }, 'Failed to get client profiles');\n      throw error;\n    }\n  }\n\n  /**\n   * Trigger client data unification workflow\n   */\n  async triggerClientUnification(\n    clientId: string,\n    userId: string,\n    companyId: string,\n    type: 'full_profile' | 'profile_refresh' | 'interaction_update' = 'profile_refresh'\n  ): Promise<{ success: boolean; workflowId?: string; error?: string }> {\n    try {\n      const response = await fetch(`${this.n8nWebhookBase}/client-data-unification`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify({\n          client_id: clientId,\n          user_id: userId,\n          company_id: companyId,\n          type,\n          timestamp: new Date().toISOString()\n        })\n      });\n\n      if (!response.ok) {\n        throw new Error(`N8N workflow failed: ${response.status}`);\n      }\n\n      const result = await response.json();\n      \n      logger.info({ clientId, userId, type }, 'Client unification workflow triggered');\n      \n      return {\n        success: true,\n        workflowId: result.workflowId\n      };\n    } catch (error) {\n      logger.error({ error, clientId, userId }, 'Failed to trigger client unification');\n      return {\n        success: false,\n        error: error instanceof Error ? error.message : 'Unknown error'\n      };\n    }\n  }\n\n  /**\n   * Trigger real-time client intelligence monitoring\n   */\n  async triggerIntelligenceMonitoring(\n    userId: string,\n    companyId: string\n  ): Promise<{ success: boolean; error?: string }> {\n    try {\n      const response = await fetch(`${this.n8nWebhookBase}/client-intelligence-monitor`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify({\n          user_id: userId,\n          company_id: companyId,\n          trigger_type: 'manual',\n          timestamp: new Date().toISOString()\n        })\n      });\n\n      if (!response.ok) {\n        throw new Error(`N8N workflow failed: ${response.status}`);\n      }\n\n      logger.info({ userId }, 'Intelligence monitoring triggered');\n      \n      return { success: true };\n    } catch (error) {\n      logger.error({ error, userId }, 'Failed to trigger intelligence monitoring');\n      return {\n        success: false,\n        error: error instanceof Error ? error.message : 'Unknown error'\n      };\n    }\n  }\n}\n\nexport const clientIntelligenceService = new ClientIntelligenceService(); ","usedDeprecatedRules":[]},{"filePath":"/home/vonj/Github/Nexus/src/lib/services/cloudStorageRAG.ts","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'GoogleDriveService' is defined but never used.","line":6,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":6,"endColumn":28},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'OneDriveService' is defined but never used.","line":7,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":7,"endColumn":25},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":23,"column":20,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":23,"endColumn":23,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[587,590],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[587,590],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":156,"column":67,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":156,"endColumn":70,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[4558,4561],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[4558,4561],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":178,"column":56,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":178,"endColumn":59,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[5160,5163],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[5160,5163],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":210,"column":47,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":210,"endColumn":50,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[6179,6182],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[6179,6182],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":231,"column":104,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":231,"endColumn":107,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[6710,6713],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[6710,6713],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\n * Cloud Storage RAG Service\n * Orchestrates document syncing from Google Drive and OneDrive for intelligent retrieval\n */\n\nimport { GoogleDriveService } from './googleDriveService';\nimport { OneDriveService } from './oneDriveService';\nimport { supabase } from '@/lib/core/supabase';\n\ninterface CloudDocument {\n  id: string;\n  name: string;\n  content: string;\n  source: 'google-drive' | 'onedrive';\n  mimeType: string;\n  lastModified: string;\n  webUrl: string;\n  metadata: {\n    folder: string;\n    size: number;\n    createdBy: string;\n    lastModifiedBy: string;\n    [key: string]: any;\n  };\n}\n\ninterface SyncResult {\n  success: boolean;\n  processed: number;\n  errors: string[];\n  newDocuments: CloudDocument[];\n}\n\nexport class CloudStorageRAGService {\n  /**\n   * Sync documents from all connected cloud storage providers\n   */\n  async syncAllProviders(): Promise<{\n    googleDrive: SyncResult | null;\n    oneDrive: SyncResult | null;\n    totalProcessed: number;\n    totalErrors: string[];\n  }> {\n    const results = {\n      googleDrive: null as SyncResult | null,\n      oneDrive: null as SyncResult | null,\n      totalProcessed: 0,\n      totalErrors: [] as string[]\n    };\n\n    // Check which providers are connected\n    const connectedProviders = await this.getConnectedProviders();\n\n    // Sync Google Drive if connected\n    if (connectedProviders.includes('google-workspace')) {\n      try {\n        results.googleDrive = await this.syncGoogleDrive();\n        results.totalProcessed += results.googleDrive.processed;\n        results.totalErrors.push(...results.googleDrive.errors);\n      } catch (error) {\n        results.totalErrors.push(`Google Drive sync failed: ${error instanceof Error ? error.message : 'Unknown error'}`);\n      }\n    }\n\n    // Sync OneDrive if connected\n    if (connectedProviders.includes('microsoft-365')) {\n      try {\n        results.oneDrive = await this.syncOneDrive();\n        results.totalProcessed += results.oneDrive.processed;\n        results.totalErrors.push(...results.oneDrive.errors);\n      } catch (error) {\n        results.totalErrors.push(`OneDrive sync failed: ${error instanceof Error ? error.message : 'Unknown error'}`);\n      }\n    }\n\n    return results;\n  }\n\n  /**\n   * Get list of connected cloud storage providers\n   */\n  private async getConnectedProviders(): Promise<string[]> {\n    try {\n      const { data: { user } } = await supabase.auth.getUser();\n      if (!user) return [];\n\n      const { data: integrations } = await supabase\n        .from('user_integrations')\n        .select('integration_name')\n        .eq('user_id', user.id)\n        .in('integration_name', ['google-workspace', 'microsoft-365']);\n\n      return integrations?.map(i => i.integration_name) || [];\n    } catch (error) {\n      console.error('Failed to get connected providers:', error);\n      return [];\n    }\n  }\n\n  /**\n   * Sync documents from Google Drive\n   */\n  private async syncGoogleDrive(): Promise<SyncResult> {\n    const result: SyncResult = {\n      success: false,\n      processed: 0,\n      errors: [],\n      newDocuments: []\n    };\n\n    try {\n      // Get Google Drive credentials\n      const credentials = await this.getProviderCredentials('google-workspace');\n      if (!credentials) {\n        throw new Error('Google Drive not connected');\n      }\n\n      // Get documents from Google Drive API\n      const documents = await this.fetchGoogleDriveDocuments(credentials);\n      \n      // Process each document\n      for (const doc of documents) {\n        try {\n          const isNew = await this.isDocumentNew(`google-drive-${doc.id}`, doc.lastModified);\n          \n          if (isNew) {\n            const content = await this.extractGoogleDriveContent(doc, credentials);\n            \n            if (content.trim()) {\n              await this.storeDocumentInRAG({\n                ...doc,\n                content,\n                source: 'google-drive'\n              });\n              \n              result.newDocuments.push({ ...doc, content, source: 'google-drive' });\n              result.processed++;\n            }\n          }\n        } catch (error) {\n          result.errors.push(`Failed to process ${doc.name}: ${error instanceof Error ? error.message : 'Unknown error'}`);\n        }\n      }\n\n      result.success = true;\n      return result;\n    } catch (error) {\n      result.errors.push(error instanceof Error ? error.message : 'Unknown error');\n      return result;\n    }\n  }\n\n  /**\n   * Get provider credentials from database\n   */\n  private async getProviderCredentials(provider: string): Promise<any> {\n    try {\n      const { data: { user } } = await supabase.auth.getUser();\n      if (!user) return null;\n\n      const { data: integration } = await supabase\n        .from('user_integrations')\n        .select('credentials')\n        .eq('user_id', user.id)\n        .eq('integration_name', provider)\n        .single();\n\n      return integration?.credentials || null;\n    } catch (error) {\n      console.error(`Failed to get ${provider} credentials:`, error);\n      return null;\n    }\n  }\n\n  /**\n   * Fetch documents from Google Drive API\n   */\n  private async fetchGoogleDriveDocuments(credentials: any): Promise<Omit<CloudDocument, 'content' | 'source'>[]> {\n    const documents = [];\n    const supportedTypes = [\n      'application/vnd.google-apps.document',\n      'application/vnd.google-apps.spreadsheet',\n      'application/vnd.google-apps.presentation',\n      'application/pdf',\n      'text/plain'\n    ];\n\n    const query = `trashed=false and (${supportedTypes.map(type => `mimeType='${type}'`).join(' or ')})`;\n    \n    const url = `https://www.googleapis.com/drive/v3/files?${new URLSearchParams({\n      q: query,\n      fields: 'files(id,name,mimeType,modifiedTime,webViewLink,size)',\n      pageSize: '50'\n    })}`;\n\n    const response = await fetch(url, {\n      headers: {\n        'Authorization': `Bearer ${credentials.access_token}`,\n        'Content-Type': 'application/json'\n      }\n    });\n\n    if (!response.ok) {\n      throw new Error(`Google Drive API error: ${response.status}`);\n    }\n\n    const data = await response.json();\n    \n    if (data.files) {\n      documents.push(...data.files.map((file: any) => ({\n        id: file.id,\n        name: file.name,\n        mimeType: file.mimeType,\n        lastModified: file.modifiedTime,\n        webUrl: file.webViewLink,\n        metadata: {\n          folder: 'Drive',\n          size: file.size || 0,\n          createdBy: 'Unknown',\n          lastModifiedBy: 'Unknown'\n        }\n      })));\n    }\n\n    return documents;\n  }\n\n  /**\n   * Extract content from Google Drive document\n   */\n  private async extractGoogleDriveContent(doc: Omit<CloudDocument, 'content' | 'source'>, credentials: any): Promise<string> {\n    try {\n      let content = '';\n      \n      if (doc.mimeType === 'application/vnd.google-apps.document') {\n        // Google Docs - export as plain text\n        const url = `https://www.googleapis.com/drive/v3/files/${doc.id}/export?mimeType=text/plain`;\n        const response = await fetch(url, {\n          headers: { 'Authorization': `Bearer ${credentials.access_token}` }\n        });\n        content = await response.text();\n      } else {\n        // Other file types - just metadata\n        content = `Document: ${doc.name}\\nType: ${doc.mimeType}\\nLocation: ${doc.webUrl}`;\n      }\n\n      return this.buildDocumentContext(doc) + '\\n\\n' + content;\n    } catch (error) {\n      console.error(`Failed to extract content from ${doc.name}:`, error);\n      return `Document: ${doc.name}\\nContent extraction failed: ${error instanceof Error ? error.message : 'Unknown error'}`;\n    }\n  }\n\n  /**\n   * Build document context for RAG\n   */\n  private buildDocumentContext(doc: Omit<CloudDocument, 'content' | 'source'>): string {\n    return `[DOCUMENT METADATA]\nTitle: ${doc.name}\nLast Modified: ${new Date(doc.lastModified).toLocaleDateString()}\nLink: ${doc.webUrl}\n[END METADATA]`;\n  }\n\n  /**\n   * Check if document is new or updated since last sync\n   */\n  private async isDocumentNew(documentId: string, lastModified: string): Promise<boolean> {\n    try {\n      const { data } = await supabase\n        .from('ai_vector_documents')\n        .select('metadata')\n        .eq('document_id', documentId)\n        .single();\n\n      if (!data) return true; // New document\n\n      const lastSync = data.metadata?.lastModified;\n      return !lastSync || new Date(lastModified) > new Date(lastSync);\n    } catch {\n      return true; // Assume new if check fails\n    }\n  }\n\n  /**\n   * Store document in RAG system\n   */\n  private async storeDocumentInRAG(document: CloudDocument): Promise<void> {\n    try {\n      // Call the embed document edge function\n      const response = await fetch('/api/ai/embed-document', {\n        method: 'POST',\n        headers: { 'Content-Type': 'application/json' },\n        body: JSON.stringify({\n          documentId: `${document.source}-${document.id}`,\n          content: document.content,\n          metadata: {\n            source: document.source,\n            fileName: document.name,\n            fileType: document.mimeType,\n            lastModified: document.lastModified,\n            webUrl: document.webUrl,\n            processedAt: new Date().toISOString()\n          }\n        })\n      });\n\n      if (!response.ok) {\n        throw new Error(`Failed to store document: ${response.statusText}`);\n      }\n    } catch (error) {\n      console.error(`Failed to store document ${document.name} in RAG:`, error);\n      throw error;\n    }\n  }\n\n  /**\n   * Sync documents from OneDrive (placeholder)\n   */\n  private async syncOneDrive(): Promise<SyncResult> {\n    // Implementation similar to Google Drive\n    return {\n      success: true,\n      processed: 0,\n      errors: [],\n      newDocuments: []\n    };\n  }\n}\n\nexport const cloudStorageRAGService = new CloudStorageRAGService(); ","usedDeprecatedRules":[]},{"filePath":"/home/vonj/Github/Nexus/src/lib/services/cloudflareService.ts","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'error' is defined but never used.","line":127,"column":14,"nodeType":null,"messageId":"unusedVar","endLine":127,"endColumn":19},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'startDate' is defined but never used.","line":202,"column":41,"nodeType":null,"messageId":"unusedVar","endLine":202,"endColumn":50},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'endDate' is defined but never used.","line":202,"column":58,"nodeType":null,"messageId":"unusedVar","endLine":202,"endColumn":65},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'startDate' is defined but never used.","line":215,"column":38,"nodeType":null,"messageId":"unusedVar","endLine":215,"endColumn":47},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'endDate' is defined but never used.","line":215,"column":55,"nodeType":null,"messageId":"unusedVar","endLine":215,"endColumn":62},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'startDate' is defined but never used.","line":225,"column":37,"nodeType":null,"messageId":"unusedVar","endLine":225,"endColumn":46},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'endDate' is defined but never used.","line":225,"column":54,"nodeType":null,"messageId":"unusedVar","endLine":225,"endColumn":61},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'startDate' is defined but never used.","line":246,"column":33,"nodeType":null,"messageId":"unusedVar","endLine":246,"endColumn":42},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'endDate' is defined but never used.","line":246,"column":50,"nodeType":null,"messageId":"unusedVar","endLine":246,"endColumn":57}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\n * Cloudflare Service\n * Integrates with Cloudflare API for domain management, analytics, and security insights\n * Pillar: 1,2 - Automated infrastructure monitoring and business health assessment\n */\n\nimport { supabase } from '../core/supabase';\nimport { logger } from '../security/logger';\n\nexport interface CloudflareConfig {\n  apiToken: string;\n  zoneId: string;\n  email: string;\n  accountId: string;\n}\n\nexport interface CloudflareAnalytics {\n  zone: {\n    name: string;\n    status: string;\n    type: string;\n  };\n  performance: {\n    requests: number;\n    bandwidth: number;\n    cachedRequests: number;\n    cacheHitRatio: number;\n    pageLoadTime: number;\n    ttfb: number; // Time to First Byte\n  };\n  security: {\n    threats: number;\n    challengesSolved: number;\n    challengesPassed: number;\n    botScore: number;\n    ddosAttacks: number;\n  };\n  traffic: {\n    uniqueVisitors: number;\n    pageViews: number;\n    countries: Array<{\n      country: string;\n      requests: number;\n      percentage: number;\n    }>;\n    topPaths: Array<{\n      path: string;\n      requests: number;\n      bandwidth: number;\n    }>;\n  };\n  uptime: {\n    status: 'up' | 'down' | 'degraded';\n    uptime: number; // percentage\n    incidents: Array<{\n      type: string;\n      start: string;\n      end?: string;\n      duration: number;\n    }>;\n  };\n  dns: {\n    queries: number;\n    responseTime: number;\n    errorRate: number;\n  };\n}\n\nexport interface CloudflareMetric {\n  name: string;\n  value: string | number;\n  trend: 'up' | 'down' | 'stable';\n  unit?: string;\n}\n\nexport class CloudflareService {\n  private config: CloudflareConfig | null = null;\n\n  async initialize(): Promise<boolean> {\n    try {\n      const { data: integration, error } = await supabase\n        .from('user_integrations')\n        .select('config, credentials')\n        .eq('integration_slug', 'cloudflare')\n        .eq('status', 'active')\n        .maybeSingle();\n\n      if (error || !integration) {\n        logger.warn('Cloudflare integration not found or inactive');\n        return false;\n      }\n\n      this.config = {\n        apiToken: integration.credentials?.api_token,\n        zoneId: integration.config?.zone_id,\n        email: integration.credentials?.email,\n        accountId: integration.config?.account_id\n      };\n\n      return true;\n    } catch (error) {\n      logger.error({ error }, 'Failed to initialize Cloudflare service');\n      return false;\n    }\n  }\n\n  async testConnection(): Promise<{ success: boolean; message: string }> {\n    if (!this.config?.apiToken) {\n      return { success: false, message: 'API token not configured' };\n    }\n\n    try {\n      const response = await fetch('https://api.cloudflare.com/client/v4/user/tokens/verify', {\n        headers: {\n          'Authorization': `Bearer ${this.config.apiToken}`,\n          'Content-Type': 'application/json'\n        }\n      });\n\n      const data = await response.json();\n\n      if (data.success) {\n        return { success: true, message: 'Connection successful' };\n      } else {\n        return { success: false, message: data.errors?.[0]?.message || 'Authentication failed' };\n      }\n    } catch (error) {\n      return { success: false, message: 'Network error connecting to Cloudflare' };\n    }\n  }\n\n  /**\n   * Get comprehensive analytics data\n   */\n  async getAnalytics(dateRange: 'last7Days' | 'last30Days' | 'last90Days' = 'last30Days'): Promise<CloudflareAnalytics> {\n    if (!this.config?.apiToken || !this.config?.zoneId) {\n      throw new Error('Cloudflare not properly configured');\n    }\n\n    try {\n      // Calculate date range\n      const endDate = new Date();\n      const startDate = new Date();\n      const days = dateRange === 'last7Days' ? 7 : dateRange === 'last30Days' ? 30 : 90;\n      startDate.setDate(startDate.getDate() - days);\n\n      // Fetch zone information\n      const zoneInfo = await this.fetchZoneInfo();\n      \n      // Fetch analytics data in parallel\n      const [\n        performanceData,\n        securityData,\n        trafficData,\n        dnsData\n      ] = await Promise.all([\n        this.fetchPerformanceMetrics(startDate, endDate),\n        this.fetchSecurityMetrics(startDate, endDate),\n        this.fetchTrafficMetrics(startDate, endDate),\n        this.fetchDnsMetrics(startDate, endDate)\n      ]);\n\n      // Get uptime status\n      const uptimeData = await this.fetchUptimeStatus();\n\n      return {\n        zone: zoneInfo,\n        performance: performanceData,\n        security: securityData,\n        traffic: trafficData,\n        uptime: uptimeData,\n        dns: dnsData\n      };\n\n    } catch (error) {\n      logger.error({ error }, 'Failed to fetch Cloudflare analytics');\n      throw error;\n    }\n  }\n\n  private async fetchZoneInfo() {\n    const response = await fetch(`https://api.cloudflare.com/client/v4/zones/${this.config!.zoneId}`, {\n      headers: {\n        'Authorization': `Bearer ${this.config!.apiToken}`,\n        'Content-Type': 'application/json'\n      }\n    });\n\n    const data = await response.json();\n    \n    if (!data.success) {\n      throw new Error(data.errors?.[0]?.message || 'Failed to fetch zone info');\n    }\n\n    return {\n      name: data.result.name,\n      status: data.result.status,\n      type: data.result.type\n    };\n  }\n\n  private async fetchPerformanceMetrics(startDate: Date, endDate: Date) {\n    // For demo purposes, return mock data\n    // In production, this would make actual Cloudflare Analytics API calls\n    return {\n      requests: Math.floor(Math.random() * 1000000) + 500000,\n      bandwidth: Math.floor(Math.random() * 1000) + 500, // GB\n      cachedRequests: Math.floor(Math.random() * 800000) + 400000,\n      cacheHitRatio: Math.round((Math.random() * 20 + 80) * 100) / 100, // 80-100%\n      pageLoadTime: Math.round((Math.random() * 1000 + 500) * 100) / 100, // 500-1500ms\n      ttfb: Math.round((Math.random() * 200 + 100) * 100) / 100 // 100-300ms\n    };\n  }\n\n  private async fetchSecurityMetrics(startDate: Date, endDate: Date) {\n    return {\n      threats: Math.floor(Math.random() * 1000),\n      challengesSolved: Math.floor(Math.random() * 5000),\n      challengesPassed: Math.floor(Math.random() * 4000),\n      botScore: Math.round((Math.random() * 30 + 70) * 100) / 100, // 70-100%\n      ddosAttacks: Math.floor(Math.random() * 10)\n    };\n  }\n\n  private async fetchTrafficMetrics(startDate: Date, endDate: Date) {\n    return {\n      uniqueVisitors: Math.floor(Math.random() * 50000) + 10000,\n      pageViews: Math.floor(Math.random() * 200000) + 50000,\n      countries: [\n        { country: 'United States', requests: 45000, percentage: 45 },\n        { country: 'Canada', requests: 15000, percentage: 15 },\n        { country: 'United Kingdom', requests: 12000, percentage: 12 },\n        { country: 'Germany', requests: 8000, percentage: 8 },\n        { country: 'Australia', requests: 6000, percentage: 6 }\n      ],\n      topPaths: [\n        { path: '/', requests: 25000, bandwidth: 150 },\n        { path: '/dashboard', requests: 18000, bandwidth: 120 },\n        { path: '/integrations', requests: 12000, bandwidth: 80 },\n        { path: '/pricing', requests: 8000, bandwidth: 50 },\n        { path: '/about', requests: 5000, bandwidth: 30 }\n      ]\n    };\n  }\n\n  private async fetchDnsMetrics(startDate: Date, endDate: Date) {\n    return {\n      queries: Math.floor(Math.random() * 100000) + 50000,\n      responseTime: Math.round((Math.random() * 50 + 10) * 100) / 100, // 10-60ms\n      errorRate: Math.round((Math.random() * 2) * 100) / 100 // 0-2%\n    };\n  }\n\n  private async fetchUptimeStatus() {\n    const uptime = Math.round((Math.random() * 5 + 95) * 100) / 100; // 95-100%\n    \n    return {\n      status: uptime > 99.5 ? 'up' as const : uptime > 98 ? 'degraded' as const : 'down' as const,\n      uptime,\n      incidents: uptime < 100 ? [\n        {\n          type: 'network',\n          start: new Date(Date.now() - 2 * 60 * 60 * 1000).toISOString(),\n          end: new Date(Date.now() - 1.5 * 60 * 60 * 1000).toISOString(),\n          duration: 30 // minutes\n        }\n      ] : []\n    };\n  }\n\n  /**\n   * Get key metrics for business health dashboard\n   */\n  async getKeyMetrics(): Promise<CloudflareMetric[]> {\n    const analytics = await this.getAnalytics('last30Days');\n\n    return [\n      {\n        name: 'Uptime',\n        value: `${analytics.uptime.uptime}%`,\n        trend: analytics.uptime.uptime > 99.5 ? 'up' : 'down',\n        unit: '%'\n      },\n      {\n        name: 'Cache Hit Ratio',\n        value: `${analytics.performance.cacheHitRatio}%`,\n        trend: analytics.performance.cacheHitRatio > 85 ? 'up' : 'down',\n        unit: '%'\n      },\n      {\n        name: 'Page Load Time',\n        value: analytics.performance.pageLoadTime,\n        trend: analytics.performance.pageLoadTime < 1000 ? 'up' : 'down',\n        unit: 'ms'\n      },\n      {\n        name: 'Threats Blocked',\n        value: analytics.security.threats,\n        trend: 'stable',\n        unit: 'threats'\n      },\n      {\n        name: 'Monthly Visitors',\n        value: analytics.traffic.uniqueVisitors,\n        trend: 'up',\n        unit: 'visitors'\n      }\n    ];\n  }\n\n  /**\n   * Update business health KPIs with Cloudflare data\n   */\n  async updateBusinessHealthKPIs(): Promise<void> {\n    try {\n      const analytics = await this.getAnalytics('last30Days');\n      \n      // Update Service Uptime KPI\n      const serviceUptimeSnapshot = {\n        department_id: 'operations',\n        kpi_id: 'service_uptime',\n        value: analytics.uptime.uptime,\n        source: 'cloudflare_api',\n        captured_at: new Date().toISOString(),\n        metadata: {\n          incidents: analytics.uptime.incidents.length,\n          status: analytics.uptime.status,\n          zone: analytics.zone.name\n        }\n      };\n\n      // Update website performance metrics (can feed into marketing KPIs)\n      const websitePerformanceSnapshot = {\n        department_id: 'marketing',\n        kpi_id: 'website_performance',\n        value: analytics.performance.pageLoadTime,\n        source: 'cloudflare_api', \n        captured_at: new Date().toISOString(),\n        metadata: {\n          ttfb: analytics.performance.ttfb,\n          cacheHitRatio: analytics.performance.cacheHitRatio,\n          bandwidth: analytics.performance.bandwidth\n        }\n      };\n\n      // Update using the secure edge function\n      const { error } = await supabase.functions.invoke('upsert_kpis', {\n        body: { \n          snapshots: [serviceUptimeSnapshot, websitePerformanceSnapshot] \n        }\n      });\n\n      if (error) {\n        logger.error({ error }, 'Failed to update Cloudflare KPIs');\n        throw error;\n      }\n\n      logger.info('Successfully updated business health KPIs with Cloudflare data');\n\n    } catch (error) {\n      logger.error({ error }, 'Error updating Cloudflare business health KPIs');\n      throw error;\n    }\n  }\n\n  /**\n   * Get security insights for security dashboard\n   */\n  async getSecurityInsights(): Promise<{\n    threatLevel: 'low' | 'medium' | 'high';\n    totalThreats: number;\n    botTraffic: number;\n    ddosAttacks: number;\n    recommendations: string[];\n  }> {\n    const analytics = await this.getAnalytics('last30Days');\n    \n    const threatLevel = analytics.security.threats > 1000 ? 'high' : \n                       analytics.security.threats > 100 ? 'medium' : 'low';\n\n    const recommendations = [];\n    \n    if (analytics.security.threats > 500) {\n      recommendations.push('Consider enabling additional security rules');\n    }\n    \n    if (analytics.performance.cacheHitRatio < 80) {\n      recommendations.push('Optimize caching rules to improve performance');\n    }\n    \n    if (analytics.uptime.uptime < 99.5) {\n      recommendations.push('Review infrastructure for reliability improvements');\n    }\n\n    return {\n      threatLevel,\n      totalThreats: analytics.security.threats,\n      botTraffic: Math.round((1 - analytics.security.botScore / 100) * 100),\n      ddosAttacks: analytics.security.ddosAttacks,\n      recommendations\n    };\n  }\n}\n\nexport const cloudflareService = new CloudflareService(); ","usedDeprecatedRules":[]},{"filePath":"/home/vonj/Github/Nexus/src/lib/services/communicationAnalyticsService.ts","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'totalMessages' is assigned a value but never used.","line":395,"column":11,"nodeType":null,"messageId":"unusedVar","endLine":395,"endColumn":24}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\n * Unified Communication Analytics Service\n * Combines insights from Slack and Microsoft Teams for comprehensive communication intelligence\n * Powers the learning system with cross-platform pattern recognition\n */\n\nimport type { TeamsAnalytics } from './microsoftTeamsService';\n\n// Slack types (simplified for this service)\ninterface SlackAnalytics {\n  overview: {\n    totalChannels: number;\n    totalMessages: number;\n    activeUsers: number;\n    averageResponseTime: number;\n    lastUpdated: string;\n  };\n  messageActivity: {\n    totalMessages: number;\n    messagesThisWeek: number;\n    messagesLastWeek: number;\n    averageMessagesPerDay: number;\n    peakActivityHours: string[];\n  };\n  channelActivity: {\n    mostActiveChannels: Array<{ name: string; messageCount: number }>;\n    quietChannels: Array<{ name: string; messageCount: number }>;\n  };\n}\n\ninterface UnifiedCommunicationInsights {\n  platformComparison: {\n    slack: {\n      connected: boolean;\n      messageVolume: number;\n      activeUsers: number;\n      responseTime: number;\n      preferredFor: string[];\n    };\n    teams: {\n      connected: boolean;\n      messageVolume: number;\n      meetingVolume: number;\n      activeUsers: number;\n      responseTime: number;\n      preferredFor: string[];\n    };\n    recommendation: {\n      primaryPlatform: 'slack' | 'teams' | 'balanced';\n      reasoning: string;\n      optimizations: string[];\n    };\n  };\n  crossPlatformPatterns: {\n    communicationFlow: {\n      quickDecisions: 'slack' | 'teams' | 'both';\n      formalCommunications: 'slack' | 'teams' | 'both';\n      teamMeetings: 'slack' | 'teams' | 'both';\n      projectDiscussions: 'slack' | 'teams' | 'both';\n    };\n    userBehavior: {\n      platformSwitchers: number;\n      slackOnlyUsers: number;\n      teamsOnlyUsers: number;\n      averagePlatformsPerUser: number;\n    };\n    timePatterns: {\n      slackPeakHours: string[];\n      teamsPeakHours: string[];\n      overlapHours: string[];\n      platformByTimeOfDay: Record<string, 'slack' | 'teams' | 'equal'>;\n    };\n  };\n  efficiencyMetrics: {\n    overallResponseTime: number;\n    communicationEfficiency: number; // 0-100 score\n    collaborationScore: number; // 0-100 score\n    toolUtilizationScore: number; // 0-100 score\n    recommendations: Array<{\n      type: 'optimization' | 'consolidation' | 'workflow';\n      priority: 'high' | 'medium' | 'low';\n      title: string;\n      description: string;\n      expectedImpact: string;\n      estimatedEffort: number; // minutes\n    }>;\n  };\n  teamInsights: {\n    mostCollaborativeTeams: Array<{\n      teamName: string;\n      crossPlatformActivity: number;\n      communicationHealth: number;\n    }>;\n    communicationGaps: Array<{\n      department: string;\n      issue: string;\n      suggestedSolution: string;\n      platforms: string[];\n    }>;\n    bestPractices: Array<{\n      practice: string;\n      adoptionRate: number;\n      impact: string;\n      howToScale: string;\n    }>;\n  };\n}\n\ninterface CommunicationHealthScore {\n  overall: number; // 0-100\n  breakdown: {\n    responseTime: number;\n    platformUtilization: number;\n    crossTeamCollaboration: number;\n    meetingEfficiency: number;\n    messageQuality: number;\n  };\n  trends: {\n    direction: 'improving' | 'declining' | 'stable';\n    changePercent: number;\n    keyFactors: string[];\n  };\n  benchmarks: {\n    industry: number;\n    teamSize: number;\n    recommended: number;\n  };\n}\n\nclass CommunicationAnalyticsService {\n  \n  /**\n   * Get unified insights from both Slack and Teams\n   */\n  async getUnifiedInsights(): Promise<UnifiedCommunicationInsights> {\n    try {\n      const [slackData, teamsData] = await Promise.all([\n        this.getSlackAnalytics(),\n        this.getTeamsAnalytics()\n      ]);\n\n      return this.generateUnifiedInsights(slackData, teamsData);\n    } catch (error) {\n      console.error('Failed to get unified communication insights:', error);\n      throw error;\n    }\n  }\n\n  /**\n   * Calculate overall communication health score\n   */\n  async getCommunicationHealthScore(): Promise<CommunicationHealthScore> {\n    const insights = await this.getUnifiedInsights();\n    \n    return {\n      overall: insights.efficiencyMetrics.collaborationScore,\n      breakdown: {\n        responseTime: this.scoreResponseTime(insights.efficiencyMetrics.overallResponseTime),\n        platformUtilization: insights.efficiencyMetrics.toolUtilizationScore,\n        crossTeamCollaboration: insights.efficiencyMetrics.collaborationScore,\n        meetingEfficiency: this.calculateMeetingEfficiency(insights),\n        messageQuality: this.calculateMessageQuality(insights)\n      },\n      trends: {\n        direction: 'stable', // Would be calculated from historical data\n        changePercent: 0,\n        keyFactors: ['Recent platform consolidation', 'Improved response times']\n      },\n      benchmarks: {\n        industry: 72,\n        teamSize: 68,\n        recommended: 85\n      }\n    };\n  }\n\n  /**\n   * Generate actionable recommendations based on communication patterns\n   */\n  async getActionableRecommendations(): Promise<Array<{\n    id: string;\n    priority: 'high' | 'medium' | 'low';\n    category: 'optimization' | 'workflow' | 'training' | 'tools';\n    title: string;\n    description: string;\n    expectedOutcome: string;\n    estimatedTime: number;\n    difficulty: 'easy' | 'medium' | 'hard';\n    steps: string[];\n    automationPotential: boolean;\n  }>> {\n    const insights = await this.getUnifiedInsights();\n    const recommendations = [];\n\n    // Platform consolidation recommendations\n    if (insights.platformComparison.recommendation.primaryPlatform !== 'balanced') {\n      recommendations.push({\n        id: 'platform-consolidation',\n        priority: 'high' as const,\n        category: 'optimization' as const,\n        title: 'Optimize Communication Platform Usage',\n        description: `Your team primarily uses ${insights.platformComparison.recommendation.primaryPlatform} but has scattered activity across platforms.`,\n        expectedOutcome: 'Reduce context switching and improve team coordination by 25%',\n        estimatedTime: 45,\n        difficulty: 'medium' as const,\n        steps: [\n          'Analyze current platform usage patterns',\n          'Define clear use cases for each platform',\n          'Create team guidelines for platform selection',\n          'Set up automated cross-platform notifications',\n          'Train team on optimized workflows'\n        ],\n        automationPotential: true\n      });\n    }\n\n    // Response time optimization\n    if (insights.efficiencyMetrics.overallResponseTime > 60) {\n      recommendations.push({\n        id: 'response-time-optimization',\n        priority: 'high' as const,\n        category: 'workflow' as const,\n        title: 'Improve Team Response Times',\n        description: `Average response time of ${insights.efficiencyMetrics.overallResponseTime} minutes is above optimal range.`,\n        expectedOutcome: 'Reduce response times by 40% and improve customer satisfaction',\n        estimatedTime: 30,\n        difficulty: 'easy' as const,\n        steps: [\n          'Set up response time alerts',\n          'Create escalation workflows',\n          'Implement status indicators',\n          'Establish response time SLAs'\n        ],\n        automationPotential: true\n      });\n    }\n\n    // Cross-platform workflow automation\n    if (insights.platformComparison.slack.connected && insights.platformComparison.teams.connected) {\n      recommendations.push({\n        id: 'cross-platform-automation',\n        priority: 'medium' as const,\n        category: 'tools' as const,\n        title: 'Set Up Cross-Platform Automation',\n        description: 'Automate information flow between Slack and Teams to reduce duplicate communication.',\n        expectedOutcome: 'Save 3+ hours per week and eliminate information silos',\n        estimatedTime: 60,\n        difficulty: 'medium' as const,\n        steps: [\n          'Identify key information flows',\n          'Set up bidirectional sync for critical channels',\n          'Create automated meeting summaries',\n          'Implement unified notification system'\n        ],\n        automationPotential: true\n      });\n    }\n\n    // Meeting efficiency improvements\n    const meetingEfficiency = this.calculateMeetingEfficiency(insights);\n    if (meetingEfficiency < 70) {\n      recommendations.push({\n        id: 'meeting-efficiency',\n        priority: 'medium' as const,\n        category: 'workflow' as const,\n        title: 'Optimize Meeting Effectiveness',\n        description: 'Your team meetings could be more efficient based on duration and follow-up patterns.',\n        expectedOutcome: 'Reduce meeting time by 20% while improving outcomes',\n        estimatedTime: 25,\n        difficulty: 'easy' as const,\n        steps: [\n          'Implement meeting agenda templates',\n          'Set up automated meeting summaries',\n          'Create follow-up task automation',\n          'Establish meeting-free focus blocks'\n        ],\n        automationPotential: true\n      });\n    }\n\n    return recommendations;\n  }\n\n  /**\n   * Get Slack analytics (mock implementation)\n   */\n  private async getSlackAnalytics(): Promise<SlackAnalytics | null> {\n    try {\n      // In real implementation, this would call the Slack service\n      return {\n        overview: {\n          totalChannels: 45,\n          totalMessages: 2847,\n          activeUsers: 18,\n          averageResponseTime: 25,\n          lastUpdated: new Date().toISOString()\n        },\n        messageActivity: {\n          totalMessages: 2847,\n          messagesThisWeek: 456,\n          messagesLastWeek: 398,\n          averageMessagesPerDay: 65,\n          peakActivityHours: ['10:00', '14:00', '16:00']\n        },\n        channelActivity: {\n          mostActiveChannels: [\n            { name: 'general', messageCount: 234 },\n            { name: 'development', messageCount: 189 },\n            { name: 'sales-team', messageCount: 156 }\n          ],\n          quietChannels: [\n            { name: 'archive-old', messageCount: 2 },\n            { name: 'temp-project', messageCount: 8 }\n          ]\n        }\n      };\n    } catch (error) {\n      console.warn('Slack analytics not available:', error);\n      return null;\n    }\n  }\n\n  /**\n   * Get Teams analytics (mock implementation)\n   */\n  private async getTeamsAnalytics(): Promise<TeamsAnalytics | null> {\n    try {\n      // In real implementation, this would call the Teams service\n      return {\n        overview: {\n          totalTeams: 8,\n          totalChannels: 24,\n          totalMessages: 1456,\n          totalMeetings: 67,\n          activeUsers: 15,\n          averageResponseTime: 35,\n          lastUpdated: new Date().toISOString()\n        },\n        messageActivity: {\n          totalMessages: 1456,\n          messagesThisWeek: 234,\n          messagesLastWeek: 198,\n          averageMessagesPerDay: 33,\n          peakActivityHours: ['09:00', '11:00', '15:00'],\n          topActiveUsers: []\n        },\n        channelActivity: {\n          channels: [],\n          mostActiveChannels: [],\n          quietChannels: []\n        },\n        meetingInsights: {\n          totalMeetings: 67,\n          meetingsThisWeek: 12,\n          averageMeetingDuration: 45,\n          attendanceRate: 0.87,\n          recordedMeetings: 23,\n          topMeetingOrganizers: []\n        },\n        collaborationPatterns: {\n          crossTeamCollaboration: [],\n          communicationPreferences: {\n            chatVsMeeting: {\n              chatMessages: 1456,\n              meetings: 67,\n              preferredMedium: 'chat'\n            },\n            formalVsInformal: {\n              formalChannels: 8,\n              informalChannels: 16,\n              communicationStyle: 'mixed'\n            }\n          }\n        }\n      };\n    } catch (error) {\n      console.warn('Teams analytics not available:', error);\n      return null;\n    }\n  }\n\n  /**\n   * Generate unified insights from platform data\n   */\n  private generateUnifiedInsights(\n    slackData: SlackAnalytics | null, \n    teamsData: TeamsAnalytics | null\n  ): UnifiedCommunicationInsights {\n    const slackConnected = slackData !== null;\n    const teamsConnected = teamsData !== null;\n\n    // Calculate platform comparison\n    const slackMessages = slackData?.messageActivity.totalMessages || 0;\n    const teamsMessages = teamsData?.messageActivity.totalMessages || 0;\n    const totalMessages = slackMessages + teamsMessages;\n\n    let primaryPlatform: 'slack' | 'teams' | 'balanced' = 'balanced';\n    let reasoning = 'Both platforms are used equally';\n\n    if (slackMessages > teamsMessages * 1.5) {\n      primaryPlatform = 'slack';\n      reasoning = 'Slack dominates with 60%+ of team communications';\n    } else if (teamsMessages > slackMessages * 1.5) {\n      primaryPlatform = 'teams';\n      reasoning = 'Teams dominates with 60%+ of team communications';\n    }\n\n    // Calculate efficiency metrics\n    const avgResponseTime = slackConnected && teamsConnected\n      ? ((slackData!.overview.averageResponseTime + teamsData!.overview.averageResponseTime) / 2)\n      : slackConnected \n        ? slackData!.overview.averageResponseTime\n        : teamsData?.overview.averageResponseTime || 0;\n\n    const collaborationScore = this.calculateCollaborationScore(slackData, teamsData);\n    const toolUtilizationScore = this.calculateToolUtilizationScore(slackConnected, teamsConnected);\n\n    return {\n      platformComparison: {\n        slack: {\n          connected: slackConnected,\n          messageVolume: slackMessages,\n          activeUsers: slackData?.overview.activeUsers || 0,\n          responseTime: slackData?.overview.averageResponseTime || 0,\n          preferredFor: ['Quick decisions', 'Informal chat', 'Development coordination']\n        },\n        teams: {\n          connected: teamsConnected,\n          messageVolume: teamsMessages,\n          meetingVolume: teamsData?.meetingInsights.totalMeetings || 0,\n          activeUsers: teamsData?.overview.activeUsers || 0,\n          responseTime: teamsData?.overview.averageResponseTime || 0,\n          preferredFor: ['Formal meetings', 'Document collaboration', 'Executive communication']\n        },\n        recommendation: {\n          primaryPlatform,\n          reasoning,\n          optimizations: this.generateOptimizations(slackData, teamsData)\n        }\n      },\n      crossPlatformPatterns: {\n        communicationFlow: {\n          quickDecisions: slackMessages > teamsMessages ? 'slack' : 'teams',\n          formalCommunications: teamsData?.meetingInsights.totalMeetings ? 'teams' : 'slack',\n          teamMeetings: 'teams',\n          projectDiscussions: primaryPlatform\n        },\n        userBehavior: {\n          platformSwitchers: Math.min(slackData?.overview.activeUsers || 0, teamsData?.overview.activeUsers || 0),\n          slackOnlyUsers: Math.max(0, (slackData?.overview.activeUsers || 0) - (teamsData?.overview.activeUsers || 0)),\n          teamsOnlyUsers: Math.max(0, (teamsData?.overview.activeUsers || 0) - (slackData?.overview.activeUsers || 0)),\n          averagePlatformsPerUser: slackConnected && teamsConnected ? 1.8 : 1.0\n        },\n        timePatterns: {\n          slackPeakHours: slackData?.messageActivity.peakActivityHours || [],\n          teamsPeakHours: teamsData?.messageActivity.peakActivityHours || [],\n          overlapHours: this.findOverlapHours(\n            slackData?.messageActivity.peakActivityHours || [],\n            teamsData?.messageActivity.peakActivityHours || []\n          ),\n          platformByTimeOfDay: {\n            'morning': 'teams',\n            'afternoon': 'slack',\n            'evening': 'slack'\n          }\n        }\n      },\n      efficiencyMetrics: {\n        overallResponseTime: avgResponseTime,\n        communicationEfficiency: Math.min(100, Math.max(0, 100 - (avgResponseTime / 2))),\n        collaborationScore,\n        toolUtilizationScore,\n        recommendations: []\n      },\n      teamInsights: {\n        mostCollaborativeTeams: [],\n        communicationGaps: [],\n        bestPractices: [\n          {\n            practice: 'Cross-platform status sync',\n            adoptionRate: 0.65,\n            impact: 'Reduced duplicate status updates by 40%',\n            howToScale: 'Implement automated status synchronization'\n          }\n        ]\n      }\n    };\n  }\n\n  private calculateCollaborationScore(\n    slackData: SlackAnalytics | null, \n    teamsData: TeamsAnalytics | null\n  ): number {\n    let score = 50; // Base score\n\n    // Boost for having both platforms\n    if (slackData && teamsData) score += 20;\n\n    // Boost for balanced usage\n    if (slackData && teamsData) {\n      const slackMsg = slackData.messageActivity.totalMessages;\n      const teamsMsg = teamsData.messageActivity.totalMessages;\n      const ratio = Math.min(slackMsg, teamsMsg) / Math.max(slackMsg, teamsMsg);\n      score += ratio * 20;\n    }\n\n    // Response time factor\n    const avgResponseTime = slackData && teamsData\n      ? (slackData.overview.averageResponseTime + teamsData.overview.averageResponseTime) / 2\n      : slackData?.overview.averageResponseTime || teamsData?.overview.averageResponseTime || 60;\n\n    if (avgResponseTime < 30) score += 10;\n    else if (avgResponseTime > 60) score -= 10;\n\n    return Math.min(100, Math.max(0, score));\n  }\n\n  private calculateToolUtilizationScore(slackConnected: boolean, teamsConnected: boolean): number {\n    if (slackConnected && teamsConnected) return 95;\n    if (slackConnected || teamsConnected) return 65;\n    return 0;\n  }\n\n  private calculateMeetingEfficiency(insights: UnifiedCommunicationInsights): number {\n    // Simplified calculation based on meeting patterns\n    const teamsData = insights.platformComparison.teams;\n    if (!teamsData.connected || teamsData.meetingVolume === 0) return 50;\n\n    // Base efficiency score\n    let efficiency = 70;\n\n    // Adjust based on meeting volume vs message volume ratio\n    const meetingToMessageRatio = teamsData.meetingVolume / Math.max(1, teamsData.messageVolume);\n    if (meetingToMessageRatio > 0.1) efficiency -= 20; // Too many meetings\n    if (meetingToMessageRatio < 0.02) efficiency += 10; // Good balance\n\n    return Math.min(100, Math.max(0, efficiency));\n  }\n\n  private calculateMessageQuality(insights: UnifiedCommunicationInsights): number {\n    // Simplified quality score based on response times and activity patterns\n    const responseTime = insights.efficiencyMetrics.overallResponseTime;\n    \n    let quality = 80;\n    if (responseTime < 20) quality += 15;\n    else if (responseTime > 60) quality -= 25;\n\n    return Math.min(100, Math.max(0, quality));\n  }\n\n  private scoreResponseTime(responseTime: number): number {\n    if (responseTime < 15) return 100;\n    if (responseTime < 30) return 85;\n    if (responseTime < 60) return 70;\n    if (responseTime < 120) return 50;\n    return 25;\n  }\n\n  private generateOptimizations(\n    slackData: SlackAnalytics | null, \n    teamsData: TeamsAnalytics | null\n  ): string[] {\n    const optimizations = [];\n\n    if (slackData && teamsData) {\n      optimizations.push('Set up cross-platform notifications');\n      optimizations.push('Create unified communication guidelines');\n      optimizations.push('Implement automated status synchronization');\n    }\n\n    if (slackData && slackData.overview.averageResponseTime > 45) {\n      optimizations.push('Improve Slack response time monitoring');\n    }\n\n    if (teamsData && teamsData.meetingInsights.averageMeetingDuration > 60) {\n      optimizations.push('Optimize meeting durations and agendas');\n    }\n\n    return optimizations;\n  }\n\n  private findOverlapHours(slackHours: string[], teamsHours: string[]): string[] {\n    return slackHours.filter(hour => teamsHours.includes(hour));\n  }\n}\n\nexport const communicationAnalyticsService = new CommunicationAnalyticsService();\nexport type { UnifiedCommunicationInsights, CommunicationHealthScore }; ","usedDeprecatedRules":[]},{"filePath":"/home/vonj/Github/Nexus/src/lib/services/companyStatusService.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":55,"column":9,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":55,"endColumn":12,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1542,1545],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1542,1545],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":143,"column":60,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":143,"endColumn":63,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[4445,4448],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[4445,4448],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":188,"column":63,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":188,"endColumn":66,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[5901,5904],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[5901,5904],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":188,"column":85,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":188,"endColumn":88,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[5923,5926],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[5923,5926],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":226,"column":62,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":226,"endColumn":65,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[7055,7058],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[7055,7058],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":283,"column":54,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":283,"endColumn":57,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[8877,8880],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[8877,8880],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":358,"column":44,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":358,"endColumn":47,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[11253,11256],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[11253,11256],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":361,"column":69,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":361,"endColumn":72,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[11393,11396],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[11393,11396],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":381,"column":49,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":381,"endColumn":52,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[12062,12065],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[12062,12065],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":381,"column":70,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":381,"endColumn":73,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[12083,12086],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[12083,12086],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":10,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { supabase } from '../core/supabase';\nimport { logger } from '../security/logger';\nimport { dashboardMetricsService } from './dashboardMetrics';\nimport { dashboardService } from './dashboardService';\n\nexport interface CompanyStatusOverview {\n  overallHealth: {\n    score: number;\n    status: 'excellent' | 'good' | 'warning' | 'critical';\n    trend: 'improving' | 'stable' | 'declining';\n  };\n  dimensions: {\n    financial: DimensionStatus;\n    operational: DimensionStatus;\n    innovation: DimensionStatus;\n    customer: DimensionStatus;\n    team: DimensionStatus;\n  };\n  keyMetrics: {\n    revenue: { value: number; trend: number; period: string };\n    users: { value: number; trend: number; period: string };\n    uptime: { value: number; trend: number; period: string };\n    satisfaction: { value: number; trend: number; period: string };\n  };\n  alerts: CompanyAlert[];\n  insights: CompanyInsight[];\n  lastUpdated: string;\n}\n\nexport interface DimensionStatus {\n  score: number;\n  status: 'excellent' | 'good' | 'warning' | 'critical';\n  trend: 'improving' | 'stable' | 'declining';\n  keyIndicators: string[];\n  actionItems: string[];\n}\n\nexport interface CompanyAlert {\n  id: string;\n  type: 'critical' | 'warning' | 'info';\n  dimension: string;\n  title: string;\n  description: string;\n  actionRequired: boolean;\n  createdAt: string;\n}\n\nexport interface CompanyInsight {\n  id: string;\n  type: 'opportunity' | 'risk' | 'trend';\n  title: string;\n  description: string;\n  impact: 'high' | 'medium' | 'low';\n  confidence: number;\n  data: any;\n}\n\nexport class CompanyStatusService {\n  /**\n   * Get comprehensive company status overview\n   */\n  async getCompanyStatusOverview(): Promise<CompanyStatusOverview> {\n    try {\n      const { data: { user } } = await supabase.auth.getUser();\n      if (!user) throw new Error('User not authenticated');\n\n      // Fetch data from all sources in parallel\n      const [dashboardData, dashboardWidgetData, integrationData, activityData] = await Promise.all([\n        dashboardMetricsService.getDashboardMetrics(),\n        dashboardService.getDashboardData(),\n        this.getIntegrationStatus(),\n        this.getRecentActivity()\n      ]);\n\n      // Calculate dimensional scores\n      const financial = await this.calculateFinancialDimension(dashboardData);\n      const operational = await this.calculateOperationalDimension(dashboardWidgetData.metrics, integrationData);\n      const innovation = await this.calculateInnovationDimension(dashboardWidgetData.metrics);\n      const customer = await this.calculateCustomerDimension();\n      const team = await this.calculateTeamDimension(activityData);\n\n      // Calculate overall health score\n      const overallScore = Math.round(\n        (financial.score * 0.25) +\n        (operational.score * 0.25) +\n        (innovation.score * 0.2) +\n        (customer.score * 0.15) +\n        (team.score * 0.15)\n      );\n\n      // Generate alerts and insights\n      const alerts = await this.generateAlerts({ financial, operational, innovation, customer, team });\n      const insights = await this.generateInsights(dashboardData, dashboardWidgetData.metrics);\n\n      return {\n        overallHealth: {\n          score: overallScore,\n          status: this.getHealthStatus(overallScore),\n          trend: await this.calculateOverallTrend()\n        },\n        dimensions: {\n          financial,\n          operational,\n          innovation,\n          customer,\n          team\n        },\n        keyMetrics: {\n          revenue: {\n            value: dashboardData.totalRevenue.value,\n            trend: dashboardData.totalRevenue.change,\n            period: 'monthly'\n          },\n          users: {\n            value: dashboardData.activeUsers.value,\n            trend: dashboardData.activeUsers.change,\n            period: 'monthly'\n          },\n          uptime: {\n            value: 99.5, // From operational dimension\n            trend: 0.1,\n            period: 'monthly'\n          },\n          satisfaction: {\n            value: 8.5, // From customer dimension\n            trend: 2.5,\n            period: 'monthly'\n          }\n        },\n        alerts,\n        insights,\n        lastUpdated: new Date().toISOString()\n      };\n    } catch (error) {\n      logger.error({ err: error }, 'Failed to get company status overview');\n      throw error;\n    }\n  }\n\n  /**\n   * Calculate Financial Dimension Score\n   */\n  private async calculateFinancialDimension(dashboardData: any): Promise<DimensionStatus> {\n    const revenue = dashboardData.totalRevenue.value;\n    const revenueGrowth = dashboardData.totalRevenue.change;\n    const salesValue = dashboardData.sales.value;\n\n    // Simple scoring based on revenue and growth\n    let score = 50; // Base score\n    \n    // Revenue scoring\n    if (revenue > 50000) score += 20;\n    else if (revenue > 25000) score += 15;\n    else if (revenue > 10000) score += 10;\n    \n    // Growth scoring\n    if (revenueGrowth > 20) score += 20;\n    else if (revenueGrowth > 10) score += 15;\n    else if (revenueGrowth > 0) score += 10;\n    else score -= 10;\n\n    // Sales pipeline scoring\n    if (salesValue > 100000) score += 10;\n    else if (salesValue > 50000) score += 5;\n\n    score = Math.min(100, Math.max(0, score));\n\n    return {\n      score,\n      status: this.getHealthStatus(score),\n      trend: revenueGrowth > 5 ? 'improving' : revenueGrowth > -5 ? 'stable' : 'declining',\n      keyIndicators: [\n        `$${revenue.toLocaleString()} monthly revenue`,\n        `${revenueGrowth > 0 ? '+' : ''}${revenueGrowth.toFixed(1)}% growth`,\n        `$${salesValue.toLocaleString()} pipeline value`\n      ],\n      actionItems: score < 70 ? [\n        'Review pricing strategy',\n        'Optimize sales funnel',\n        'Analyze customer acquisition costs'\n      ] : []\n    };\n  }\n\n  /**\n   * Calculate Operational Dimension Score\n   */\n  private async calculateOperationalDimension(trinityMetrics: any, integrationData: any): Promise<DimensionStatus> {\n    const automations = trinityMetrics.act.automationsRunning;\n    const efficiency = trinityMetrics.act.processEfficiency;\n    const integrations = integrationData.connected;\n\n    let score = 40; // Base score\n    \n    // Automation scoring\n    score += Math.min(30, automations * 3);\n    \n    // Efficiency scoring\n    score += Math.min(20, efficiency * 0.2);\n    \n    // Integration scoring\n    score += Math.min(10, integrations * 2);\n\n    score = Math.min(100, score);\n\n    return {\n      score,\n      status: this.getHealthStatus(score),\n      trend: efficiency > 85 ? 'improving' : efficiency > 70 ? 'stable' : 'declining',\n      keyIndicators: [\n        `${automations} active automations`,\n        `${efficiency}% process efficiency`,\n        `${integrations} connected systems`\n      ],\n      actionItems: score < 70 ? [\n        'Identify automation opportunities',\n        'Optimize manual processes',\n        'Connect additional business systems'\n      ] : []\n    };\n  }\n\n  /**\n   * Calculate Innovation Dimension Score\n   */\n  private async calculateInnovationDimension(trinityMetrics: any): Promise<DimensionStatus> {\n    const ideas = trinityMetrics.think.ideasCaptured;\n    const collaborations = trinityMetrics.think.collaborationSessions;\n    const innovationScore = trinityMetrics.think.innovationScore;\n\n    const score = Math.min(100, innovationScore);\n\n    return {\n      score,\n      status: this.getHealthStatus(score),\n      trend: ideas > 10 ? 'improving' : ideas > 5 ? 'stable' : 'declining',\n      keyIndicators: [\n        `${ideas} ideas captured`,\n        `${collaborations} collaboration sessions`,\n        `${innovationScore}% innovation score`\n      ],\n      actionItems: score < 70 ? [\n        'Increase ideation sessions',\n        'Improve cross-team collaboration',\n        'Implement innovation tracking'\n      ] : []\n    };\n  }\n\n  /**\n   * Calculate Customer Dimension Score\n   */\n  private async calculateCustomerDimension(): Promise<DimensionStatus> {\n    // For now, use estimated values based on available data\n    // In a real implementation, this would connect to support/CRM systems\n    \n    const estimatedSatisfaction = 8.5;\n    const estimatedSupport = 85;\n    const estimatedRetention = 92;\n\n    const score = Math.round((estimatedSatisfaction * 10 + estimatedSupport + estimatedRetention) / 3);\n\n    return {\n      score,\n      status: this.getHealthStatus(score),\n      trend: 'stable',\n      keyIndicators: [\n        `${estimatedSatisfaction}/10 satisfaction score`,\n        `${estimatedSupport}% support efficiency`,\n        `${estimatedRetention}% customer retention`\n      ],\n      actionItems: score < 70 ? [\n        'Implement customer feedback system',\n        'Improve support response times',\n        'Analyze customer churn patterns'\n      ] : []\n    };\n  }\n\n  /**\n   * Calculate Team Dimension Score\n   */\n  private async calculateTeamDimension(activityData: any): Promise<DimensionStatus> {\n    // Estimate team health based on activity and engagement\n    const activityLevel = activityData.totalActivities || 0;\n    const engagement = Math.min(100, activityLevel * 5);\n    \n    let score = 60; // Base score\n    score += Math.min(40, engagement * 0.4);\n\n    return {\n      score,\n      status: this.getHealthStatus(score),\n      trend: activityLevel > 20 ? 'improving' : activityLevel > 10 ? 'stable' : 'declining',\n      keyIndicators: [\n        `${activityLevel} recent activities`,\n        `${Math.round(engagement)}% engagement level`,\n        'Team collaboration active'\n      ],\n      actionItems: score < 70 ? [\n        'Increase team communication',\n        'Implement regular check-ins',\n        'Improve collaboration tools'\n      ] : []\n    };\n  }\n\n  /**\n   * Get integration status\n   */\n  private async getIntegrationStatus() {\n    try {\n      const { data: { user } } = await supabase.auth.getUser();\n      if (!user) throw new Error('User not authenticated');\n\n      const { data: integrations } = await supabase\n        .from('user_integrations')\n        .select('integration_type, status')\n        .eq('user_id', user.id);\n\n      const connected = integrations?.filter(i => i.status === 'connected').length || 0;\n      const total = integrations?.length || 0;\n\n      return { connected, total, integrations: integrations || [] };\n    } catch (error) {\n      logger.error({ err: error }, 'Failed to get integration status');\n      return { connected: 0, total: 0, integrations: [] };\n    }\n  }\n\n  /**\n   * Get recent activity summary\n   */\n  private async getRecentActivity() {\n    try {\n      const { data: { user } } = await supabase.auth.getUser();\n      if (!user) throw new Error('User not authenticated');\n\n      const sevenDaysAgo = new Date();\n      sevenDaysAgo.setDate(sevenDaysAgo.getDate() - 7);\n\n      const { data: activities } = await supabase\n        .from('ai_user_activity')\n        .select('activity_type')\n        .eq('user_id', user.id)\n        .gte('created_at', sevenDaysAgo.toISOString());\n\n      return { totalActivities: activities?.length || 0 };\n    } catch (error) {\n      logger.error({ err: error }, 'Failed to get recent activity');\n      return { totalActivities: 0 };\n    }\n  }\n\n  /**\n   * Generate alerts based on dimensional health\n   */\n  private async generateAlerts(dimensions: any): Promise<CompanyAlert[]> {\n    const alerts: CompanyAlert[] = [];\n\n    Object.entries(dimensions).forEach(([dimension, data]: [string, any]) => {\n      if (data.score < 60) {\n        alerts.push({\n          id: `${dimension}-low-score`,\n          type: data.score < 40 ? 'critical' : 'warning',\n          dimension,\n          title: `${dimension.charAt(0).toUpperCase() + dimension.slice(1)} Performance Alert`,\n          description: `Your ${dimension} score of ${data.score}% needs attention. ${data.actionItems[0] || 'Review and optimize this area.'}`,\n          actionRequired: data.score < 40,\n          createdAt: new Date().toISOString()\n        });\n      }\n    });\n\n    return alerts;\n  }\n\n  /**\n   * Generate insights based on data patterns\n   */\n  private async generateInsights(dashboardData: any, trinityMetrics: any): Promise<CompanyInsight[]> {\n    const insights: CompanyInsight[] = [];\n\n    // Revenue growth insight\n    if (dashboardData.totalRevenue.change > 15) {\n      insights.push({\n        id: 'revenue-growth',\n        type: 'opportunity',\n        title: 'Strong Revenue Growth Detected',\n        description: `Revenue has grown ${dashboardData.totalRevenue.change.toFixed(1)}% this month. Consider scaling successful strategies.`,\n        impact: 'high',\n        confidence: 85,\n        data: { growth: dashboardData.totalRevenue.change }\n      });\n    }\n\n    // Automation opportunity\n    if (trinityMetrics.act.automationsRunning < 10 && dashboardData.totalRevenue.value > 20000) {\n      insights.push({\n        id: 'automation-opportunity',\n        type: 'opportunity',\n        title: 'Automation Opportunity Identified',\n        description: 'Your revenue suggests readiness for more automation. Current automation coverage could be expanded.',\n        impact: 'medium',\n        confidence: 70,\n        data: { automations: trinityMetrics.act.automationsRunning }\n      });\n    }\n\n    return insights;\n  }\n\n  /**\n   * Calculate overall trend\n   */\n  private async calculateOverallTrend(): Promise<'improving' | 'stable' | 'declining'> {\n    // Simple implementation - could be enhanced with historical data\n    return 'stable';\n  }\n\n  /**\n   * Get health status based on score\n   */\n  private getHealthStatus(score: number): 'excellent' | 'good' | 'warning' | 'critical' {\n    if (score >= 85) return 'excellent';\n    if (score >= 70) return 'good';\n    if (score >= 50) return 'warning';\n    return 'critical';\n  }\n}\n\nexport const companyStatusService = new CompanyStatusService(); ","usedDeprecatedRules":[]},{"filePath":"/home/vonj/Github/Nexus/src/lib/services/credentialManager.ts","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'StoredCredential' is defined but never used.","line":16,"column":11,"nodeType":null,"messageId":"unusedVar","endLine":16,"endColumn":27},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":40,"column":18,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":40,"endColumn":21,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[981,984],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[981,984],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":86,"column":55,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":86,"endColumn":58,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2313,2316],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2313,2316],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":142,"column":65,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":142,"endColumn":68,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3921,3924],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3921,3924],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":206,"column":14,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":206,"endColumn":17,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[5630,5633],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[5630,5633],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { encrypt, decrypt } from '../security';\nimport { supabase } from '@/lib/core/supabase';\n\ninterface CredentialMetadata {\n  id: string;\n  integrationId: string;\n  userId: string;\n  type: 'oauth' | 'api_key' | 'basic';\n  createdAt: Date;\n  lastUsed: Date;\n  expiresAt?: Date;\n  status: 'active' | 'expired' | 'revoked';\n  scopes?: string[];\n}\n\ninterface StoredCredential {\n  metadata: CredentialMetadata;\n  encryptedData: string;\n}\n\nexport class CredentialManager {\n  private static instance: CredentialManager;\n  private readonly CREDENTIALS_TABLE = 'secure_integrations';\n  private readonly AUDIT_TABLE = 'security_audit_log';\n\n  private constructor() {}\n\n  public static getInstance(): CredentialManager {\n    if (!CredentialManager.instance) {\n      CredentialManager.instance = new CredentialManager();\n    }\n    return CredentialManager.instance;\n  }\n\n  /**\n   * Store new credentials securely\n   */\n  async storeCredentials(\n    integrationId: string,\n    credentials: any,\n    metadata: Partial<CredentialMetadata>\n  ): Promise<string> {\n    try {\n      // Encrypt credentials\n      const encryptedData = await encrypt(JSON.stringify(credentials));\n\n      // Create metadata\n      const credentialMetadata: CredentialMetadata = {\n        id: crypto.randomUUID(),\n        integrationId,\n        userId: (await supabase.auth.getUser()).data.user?.id || '',\n        type: metadata.type || 'api_key',\n        createdAt: new Date(),\n        lastUsed: new Date(),\n        status: 'active',\n        ...metadata\n      };\n\n      // Store in database\n      const { error } = await supabase\n        .from(this.CREDENTIALS_TABLE)\n        .insert({\n          id: credentialMetadata.id,\n          user_id: credentialMetadata.userId,\n          integration_id: integrationId,\n          metadata: credentialMetadata,\n          encrypted_data: encryptedData,\n          is_active: true\n        });\n\n      if (error) throw error;\n\n      // Log security event\n      await this.logCredentialEvent('credential_stored', credentialMetadata);\n\n      return credentialMetadata.id;\n    } catch (error) {\n      console.error('Failed to store credentials:', error);\n      throw new Error('Credential storage failed');\n    }\n  }\n\n  /**\n   * Retrieve credentials securely\n   */\n  async getCredentials(credentialId: string): Promise<any> {\n    try {\n      const { data, error } = await supabase\n        .from(this.CREDENTIALS_TABLE)\n        .select('*')\n        .eq('id', credentialId)\n        .single();\n\n      if (error || !data) throw error || new Error('Credential not found');\n\n      // Verify access permissions\n      const user = await supabase.auth.getUser();\n      if (data.user_id !== user.data.user?.id) {\n        throw new Error('Unauthorized access');\n      }\n\n      // Decrypt credentials\n      const decryptedData = await decrypt(data.encrypted_data);\n      const credentials = JSON.parse(decryptedData);\n\n      // Update last used timestamp\n      await this.updateLastUsed(credentialId);\n\n      // Log access\n      await this.logCredentialEvent('credential_accessed', data.metadata);\n\n      return credentials;\n    } catch (error) {\n      console.error('Failed to retrieve credentials:', error);\n      throw new Error('Credential retrieval failed');\n    }\n  }\n\n  /**\n   * Revoke credentials\n   */\n  async revokeCredentials(credentialId: string): Promise<void> {\n    try {\n      const { error } = await supabase\n        .from(this.CREDENTIALS_TABLE)\n        .update({ is_active: false, status: 'revoked' })\n        .eq('id', credentialId);\n\n      if (error) throw error;\n\n      // Log revocation\n      await this.logCredentialEvent('credential_revoked', { id: credentialId });\n    } catch (error) {\n      console.error('Failed to revoke credentials:', error);\n      throw new Error('Credential revocation failed');\n    }\n  }\n\n  /**\n   * Rotate credentials\n   */\n  async rotateCredentials(credentialId: string, newCredentials: any): Promise<string> {\n    try {\n      // Store new credentials\n      const newCredentialId = await this.storeCredentials(\n        credentialId,\n        newCredentials,\n        { type: 'api_key' }\n      );\n\n      // Revoke old credentials\n      await this.revokeCredentials(credentialId);\n\n      // Log rotation\n      await this.logCredentialEvent('credential_rotated', {\n        oldId: credentialId,\n        newId: newCredentialId\n      });\n\n      return newCredentialId;\n    } catch (error) {\n      console.error('Failed to rotate credentials:', error);\n      throw new Error('Credential rotation failed');\n    }\n  }\n\n  /**\n   * List all credentials for an integration\n   */\n  async listCredentials(integrationId: string): Promise<CredentialMetadata[]> {\n    try {\n      const { data, error } = await supabase\n        .from(this.CREDENTIALS_TABLE)\n        .select('metadata')\n        .eq('integration_id', integrationId)\n        .eq('is_active', true);\n\n      if (error) throw error;\n\n      return data.map((item: { metadata: CredentialMetadata }) => item.metadata);\n    } catch (error) {\n      console.error('Failed to list credentials:', error);\n      throw new Error('Failed to list credentials');\n    }\n  }\n\n  /**\n   * Update last used timestamp\n   */\n  private async updateLastUsed(credentialId: string): Promise<void> {\n    try {\n      await supabase\n        .from(this.CREDENTIALS_TABLE)\n        .update({ last_used: new Date().toISOString() })\n        .eq('id', credentialId);\n    } catch (error) {\n      console.error('Failed to update last used timestamp:', error);\n    }\n  }\n\n  /**\n   * Log credential-related events\n   */\n  private async logCredentialEvent(\n    eventType: string,\n    details: any\n  ): Promise<void> {\n    try {\n      await supabase\n        .from(this.AUDIT_TABLE)\n        .insert({\n          event_type: eventType,\n          event_details: details,\n          ip_address: await this.getClientIP(),\n          user_agent: navigator.userAgent\n        });\n    } catch (error) {\n      console.error('Failed to log credential event:', error);\n    }\n  }\n\n  /**\n   * Get client IP address\n   */\n  private async getClientIP(): Promise<string> {\n    try {\n      const response = await fetch('https://api.ipify.org?format=json');\n      const data = await response.json();\n      return data.ip;\n    } catch {\n      return 'unknown';\n    }\n  }\n}\n\n// Export singleton instance\nexport const credentialManager = CredentialManager.getInstance(); ","usedDeprecatedRules":[]},{"filePath":"/home/vonj/Github/Nexus/src/lib/services/dashboardMetrics.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/vonj/Github/Nexus/src/lib/services/dashboardService.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/vonj/Github/Nexus/src/lib/services/domainAnalysisService.ts","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'companyId' is defined but never used.","line":203,"column":52,"nodeType":null,"messageId":"unusedVar","endLine":203,"endColumn":61}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\n * Domain Analysis Service\n * Analyzes email domains to detect business professionalism indicators\n * Pillar: 1,2 - Automated business health assessment and upsell opportunities\n */\n\nimport { supabase } from '../core/supabase';\nimport { logger } from '../security/logger';\n\nexport interface DomainAnalysis {\n  domain: string;\n  isProfessional: boolean;\n  isCustomDomain: boolean;\n  provider: 'microsoft365' | 'google_workspace' | 'custom' | 'generic';\n  confidence: number; // 0-100\n  recommendations: string[];\n  upsellOpportunity?: {\n    type: 'microsoft365' | 'google_workspace';\n    description: string;\n    benefits: string[];\n    estimatedCost: string;\n  };\n}\n\nexport interface EmailDomainSummary {\n  totalEmails: number;\n  uniqueDomains: string[];\n  professionalDomainCount: number;\n  genericDomainCount: number;\n  customDomainCount: number;\n  primaryDomain?: string;\n  overallProfessionalScore: number; // 0-100\n  recommendations: string[];\n  upsellOpportunities: DomainAnalysis['upsellOpportunity'][];\n}\n\n// Common generic email providers\nconst GENERIC_PROVIDERS = [\n  'gmail.com',\n  'yahoo.com',\n  'hotmail.com',\n  'aol.com',\n  'icloud.com',\n  'live.com',\n  'msn.com',\n  'ymail.com',\n  'protonmail.com',\n  'mail.com',\n  'zoho.com'\n];\n\n// Business email providers\nconst BUSINESS_PROVIDERS = {\n  'outlook.com': 'microsoft365',\n  'office365.com': 'microsoft365',\n  'gmail.com': 'google_workspace', // Could be either, need more analysis\n  'googlemail.com': 'google_workspace'\n} as const;\n\nclass DomainAnalysisService {\n  /**\n   * Analyze a single email domain\n   */\n  async analyzeDomain(domain: string): Promise<DomainAnalysis> {\n    const normalizedDomain = domain.toLowerCase().trim();\n    \n    // Check if it's a generic provider\n    const isGeneric = GENERIC_PROVIDERS.includes(normalizedDomain);\n    \n    // Determine provider type\n    let provider: DomainAnalysis['provider'] = 'custom';\n    if (isGeneric) {\n      provider = 'generic';\n    } else if (normalizedDomain in BUSINESS_PROVIDERS) {\n      provider = BUSINESS_PROVIDERS[normalizedDomain as keyof typeof BUSINESS_PROVIDERS];\n    }\n    \n    // Custom domains are professional by default\n    const isCustomDomain = !isGeneric && provider === 'custom';\n    const isProfessional = isCustomDomain || provider === 'microsoft365' || provider === 'google_workspace';\n    \n    // Calculate confidence score\n    let confidence = 50;\n    if (isCustomDomain) {\n      confidence = 95; // High confidence for custom domains\n    } else if (provider === 'microsoft365' || provider === 'google_workspace') {\n      confidence = 80; // Good confidence for business providers\n    } else if (isGeneric) {\n      confidence = 90; // High confidence it's not professional\n    }\n    \n    // Generate recommendations\n    const recommendations: string[] = [];\n    let upsellOpportunity: DomainAnalysis['upsellOpportunity'];\n    \n    if (!isProfessional) {\n      recommendations.push('Consider upgrading to a professional email with your own domain');\n      recommendations.push('Professional email increases customer trust and brand recognition');\n      \n      upsellOpportunity = {\n        type: 'microsoft365',\n        description: 'Upgrade to Microsoft 365 Business for professional email',\n        benefits: [\n          'Custom domain email (you@yourcompany.com)',\n          '50GB mailbox per user',\n          'Advanced security and compliance',\n          'Integrated Office apps',\n          'Professional appearance and credibility'\n        ],\n        estimatedCost: '$6-22/user/month'\n      };\n    } else if (isCustomDomain) {\n      recommendations.push('Excellent! You\\'re using a professional custom domain');\n      recommendations.push('Consider adding email security features like DMARC/SPF');\n    }\n    \n    return {\n      domain: normalizedDomain,\n      isProfessional,\n      isCustomDomain,\n      provider,\n      confidence,\n      recommendations,\n      upsellOpportunity\n    };\n  }\n  \n  /**\n   * Analyze all email domains for a user/organization\n   */\n  async analyzeUserEmailDomains(userId: string): Promise<EmailDomainSummary> {\n    try {\n      // Get all email addresses from various sources\n      const emailSources = await Promise.all([\n        this.getEmailsFromInbox(userId),\n        this.getEmailsFromAccounts(userId),\n        this.getEmailsFromProfile(userId)\n      ]);\n      \n      const allEmails = emailSources.flat();\n      const uniqueDomains = [...new Set(allEmails.map(email => email.split('@')[1]).filter(Boolean))];\n      \n      // Analyze each domain\n      const domainAnalyses = await Promise.all(\n        uniqueDomains.map(domain => this.analyzeDomain(domain))\n      );\n      \n      // Calculate summary statistics\n      const professionalDomains = domainAnalyses.filter(d => d.isProfessional);\n      const customDomains = domainAnalyses.filter(d => d.isCustomDomain);\n      const genericDomains = domainAnalyses.filter(d => d.provider === 'generic');\n      \n      // Determine primary domain (most common custom domain or first professional)\n      const domainCounts = new Map<string, number>();\n      allEmails.forEach(email => {\n        const domain = email.split('@')[1];\n        if (domain) {\n          domainCounts.set(domain, (domainCounts.get(domain) || 0) + 1);\n        }\n      });\n      \n      const primaryDomain = customDomains.length > 0 \n        ? customDomains[0].domain \n        : professionalDomains.length > 0 \n          ? professionalDomains[0].domain \n          : uniqueDomains[0];\n      \n      // Calculate overall professional score\n      const totalDomains = uniqueDomains.length;\n      const professionalScore = totalDomains > 0 \n        ? Math.round((professionalDomains.length / totalDomains) * 100)\n        : 0;\n      \n      // Aggregate recommendations and upsell opportunities\n      const allRecommendations = domainAnalyses.flatMap(d => d.recommendations);\n      const uniqueRecommendations = [...new Set(allRecommendations)];\n      \n      const upsellOpportunities = domainAnalyses\n        .map(d => d.upsellOpportunity)\n        .filter(Boolean) as DomainAnalysis['upsellOpportunity'][];\n      \n      return {\n        totalEmails: allEmails.length,\n        uniqueDomains,\n        professionalDomainCount: professionalDomains.length,\n        genericDomainCount: genericDomains.length,\n        customDomainCount: customDomains.length,\n        primaryDomain,\n        overallProfessionalScore: professionalScore,\n        recommendations: uniqueRecommendations,\n        upsellOpportunities\n      };\n      \n    } catch (error) {\n      logger.error({ error, userId }, 'Error analyzing user email domains');\n      throw error;\n    }\n  }\n  \n  /**\n   * Update business health KPI based on domain analysis\n   */\n  async updateProfessionalEmailKPI(userId: string, companyId?: string): Promise<boolean> {\n    try {\n      const analysis = await this.analyzeUserEmailDomains(userId);\n      \n      // Determine if user has professional email\n      const hasProfessionalEmail = analysis.customDomainCount > 0 || \n                                   analysis.overallProfessionalScore >= 70;\n      \n      const snapshot = {\n        // org_id will be injected by the edge function from the JWT\n        department_id: 'maturity', // This KPI is in the 'maturity' category\n        kpi_id: 'professional_email_domain',\n        value: hasProfessionalEmail,\n        source: 'automated_domain_analysis',\n        captured_at: new Date().toISOString(),\n      };\n\n      // Update the KPI using the secure edge function\n      const { error } = await supabase.functions.invoke('upsert_kpis', {\n        body: { snapshots: [snapshot] },\n      });\n      \n      if (error) {\n        logger.error({ error, userId }, 'Failed to update professional email KPI via function');\n        throw error;\n      }\n      \n      logger.info({ \n        userId, \n        hasProfessionalEmail, \n        customDomains: analysis.customDomainCount,\n        professionalScore: analysis.overallProfessionalScore \n      }, 'Updated professional email KPI');\n      \n      return hasProfessionalEmail;\n      \n    } catch (error) {\n      logger.error({ error, userId }, 'Error updating professional email KPI');\n      throw error;\n    }\n  }\n  \n  /**\n   * Get email addresses from inbox items\n   */\n  private async getEmailsFromInbox(userId: string): Promise<string[]> {\n    try {\n      const { data, error } = await supabase\n        .from('ai_inbox_items')\n        .select('sender_email, recipient_email')\n        .eq('user_id', userId)\n        .limit(1000);\n      \n      if (error) throw error;\n      \n      const emails: string[] = [];\n      data?.forEach(item => {\n        if (item.sender_email) emails.push(item.sender_email);\n        if (item.recipient_email) emails.push(item.recipient_email);\n      });\n      \n      return emails.filter(Boolean);\n    } catch (error) {\n      logger.error({ error, userId }, 'Error fetching emails from inbox');\n      return [];\n    }\n  }\n  \n  /**\n   * Get email addresses from email accounts\n   */\n  private async getEmailsFromAccounts(userId: string): Promise<string[]> {\n    try {\n      const { data, error } = await supabase\n        .from('ai_email_accounts')\n        .select('email_address')\n        .eq('user_id', userId);\n      \n      if (error) throw error;\n      \n      return data?.map(account => account.email_address).filter(Boolean) || [];\n    } catch (error) {\n      logger.error({ error, userId }, 'Error fetching emails from accounts');\n      return [];\n    }\n  }\n  \n  /**\n   * Get email addresses from user profile\n   */\n  private async getEmailsFromProfile(userId: string): Promise<string[]> {\n    try {\n      const { data, error } = await supabase\n        .from('user_profiles')\n        .select('email, business_email')\n        .eq('user_id', userId)\n        .single();\n      \n      if (error) throw error;\n      \n      const emails: string[] = [];\n      if (data?.email) emails.push(data.email);\n      if (data?.business_email) emails.push(data.business_email);\n      \n      return emails.filter(Boolean);\n    } catch (error) {\n      logger.error({ error, userId }, 'Error fetching emails from profile');\n      return [];\n    }\n  }\n  \n  /**\n   * Get Microsoft 365 upsell recommendations\n   */\n  async getMicrosoft365UpsellRecommendation(userId: string): Promise<{\n    shouldShowUpsell: boolean;\n    recommendation: {\n      title: string;\n      description: string;\n      benefits: string[];\n      pricing: string;\n      ctaText: string;\n      urgency: 'low' | 'medium' | 'high';\n    } | null;\n  }> {\n    try {\n      const analysis = await this.analyzeUserEmailDomains(userId);\n      \n      // Show upsell if user doesn't have professional email\n      const shouldShowUpsell = analysis.customDomainCount === 0 && \n                               analysis.overallProfessionalScore < 70;\n      \n      if (!shouldShowUpsell) {\n        return { shouldShowUpsell: false, recommendation: null };\n      }\n      \n      // Determine urgency based on business size/activity\n      let urgency: 'low' | 'medium' | 'high' = 'medium';\n      if (analysis.totalEmails > 100) urgency = 'high';\n      if (analysis.totalEmails < 20) urgency = 'low';\n      \n      return {\n        shouldShowUpsell: true,\n        recommendation: {\n          title: 'Upgrade to Professional Email',\n          description: 'Boost your business credibility with a custom domain email address powered by Microsoft 365.',\n          benefits: [\n            'Custom domain email (you@yourcompany.com)',\n            'Enhanced security and compliance features',\n            '50GB mailbox with advanced filtering',\n            'Integrated Office apps (Word, Excel, PowerPoint)',\n            'Professional appearance increases customer trust',\n            '99.9% uptime guarantee'\n          ],\n          pricing: 'Starting at $6/user/month',\n          ctaText: 'Set Up Professional Email',\n          urgency\n        }\n      };\n      \n    } catch (error) {\n      logger.error({ error, userId }, 'Error generating Microsoft 365 upsell recommendation');\n      return { shouldShowUpsell: false, recommendation: null };\n    }\n  }\n}\n\nexport const domainAnalysisService = new DomainAnalysisService(); ","usedDeprecatedRules":[]},{"filePath":"/home/vonj/Github/Nexus/src/lib/services/domainAnalysis_service.ts","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'supabase' is defined but never used.","line":7,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":7,"endColumn":18},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'logger' is defined but never used.","line":8,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":8,"endColumn":16}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\n * Domain Analysis Service\n * Analyzes email domains to detect business professionalism indicators\n * Pillar: 1,2 - Automated business health assessment and upsell opportunities\n */\n\nimport { supabase } from '../core/supabase';\nimport { logger } from '../security/logger';\n\nexport interface DomainAnalysis {\n// ... existing code ...\n} ","usedDeprecatedRules":[]},{"filePath":"/home/vonj/Github/Nexus/src/lib/services/googleAnalyticsService.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":150,"column":40,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":150,"endColumn":43,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[4027,4030],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[4027,4030],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'dateRange' is assigned a value but never used.","line":202,"column":26,"nodeType":null,"messageId":"unusedVar","endLine":202,"endColumn":35}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\n * Google Analytics 4 Integration Service\n * Real data connection implementation using GA4 Reporting API\n */\n\ninterface GoogleAnalyticsConfig {\n  propertyId: string;\n  clientId: string;\n  clientSecret: string;\n  accessToken: string;\n  refreshToken: string;\n}\n\ninterface AnalyticsMetric {\n  name: string;\n  value: string;\n  change?: number;\n  trend: 'up' | 'down' | 'stable';\n}\n\ninterface AnalyticsData {\n  overview: {\n    totalUsers: AnalyticsMetric;\n    sessions: AnalyticsMetric;\n    pageViews: AnalyticsMetric;\n    bounceRate: AnalyticsMetric;\n    avgSessionDuration: AnalyticsMetric;\n  };\n  topPages: Array<{\n    path: string;\n    title: string;\n    views: number;\n    uniqueViews: number;\n  }>;\n  topSources: Array<{\n    source: string;\n    medium: string;\n    sessions: number;\n    users: number;\n  }>;\n  realTimeUsers: number;\n  conversionEvents: Array<{\n    eventName: string;\n    count: number;\n    conversionRate: number;\n  }>;\n}\n\nexport class GoogleAnalyticsService {\n  private config: GoogleAnalyticsConfig | null = null;\n  private baseUrl = 'https://analyticsreporting.googleapis.com/v4';\n  private realTimeUrl = 'https://analyticsdata.googleapis.com/v1beta';\n\n  constructor() {\n    this.loadConfig();\n  }\n\n  /**\n   * Load configuration from environment or stored credentials\n   */\n  private loadConfig(): void {\n    const storedConfig = localStorage.getItem('ga4_config');\n    if (storedConfig) {\n      this.config = JSON.parse(storedConfig);\n    }\n  }\n\n  /**\n   * Initialize OAuth 2.0 flow for Google Analytics\n   */\n  async initializeOAuth(): Promise<string> {\n    const clientId = import.meta.env.VITE_GOOGLE_CLIENT_ID;\n    const redirectUri = `${window.location.origin}/integrations/google-analytics/callback`;\n    \n    const params = new URLSearchParams({\n      client_id: clientId,\n      redirect_uri: redirectUri,\n      response_type: 'code',\n      scope: 'https://www.googleapis.com/auth/analytics.readonly',\n      access_type: 'offline',\n      prompt: 'consent'\n    });\n\n    return `https://accounts.google.com/o/oauth2/v2/auth?${params.toString()}`;\n  }\n\n  /**\n   * Exchange authorization code for access tokens\n   */\n  async exchangeCodeForTokens(code: string): Promise<void> {\n    const clientId = import.meta.env.VITE_GOOGLE_CLIENT_ID;\n    const clientSecret = import.meta.env.VITE_GOOGLE_CLIENT_SECRET;\n    const redirectUri = `${window.location.origin}/integrations/google-analytics/callback`;\n\n    const response = await fetch('https://oauth2.googleapis.com/token', {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/x-www-form-urlencoded',\n      },\n      body: new URLSearchParams({\n        client_id: clientId,\n        client_secret: clientSecret,\n        code,\n        grant_type: 'authorization_code',\n        redirect_uri: redirectUri,\n      }),\n    });\n\n    if (!response.ok) {\n      throw new Error('Failed to exchange code for tokens');\n    }\n\n    const tokens = await response.json();\n    \n    // Store tokens securely\n    this.config = {\n      propertyId: '', // Will be set after fetching accounts\n      clientId,\n      clientSecret,\n      accessToken: tokens.access_token,\n      refreshToken: tokens.refresh_token,\n    };\n\n    localStorage.setItem('ga4_config', JSON.stringify(this.config));\n  }\n\n  /**\n   * Get available GA4 properties for the authenticated user\n   */\n  async getAvailableProperties(): Promise<Array<{ id: string; name: string; websiteUrl: string }>> {\n    if (!this.config?.accessToken) {\n      throw new Error('Not authenticated');\n    }\n\n    const response = await fetch('https://analyticsadmin.googleapis.com/v1beta/accounts/-/properties', {\n      headers: {\n        Authorization: `Bearer ${this.config.accessToken}`,\n      },\n    });\n\n    if (!response.ok) {\n      if (response.status === 401) {\n        await this.refreshAccessToken();\n        return this.getAvailableProperties();\n      }\n      throw new Error('Failed to fetch properties');\n    }\n\n    const data = await response.json();\n    return data.properties?.map((prop: any) => ({\n      id: prop.name.split('/').pop(),\n      name: prop.displayName,\n      websiteUrl: prop.websiteUrl || '',\n    })) || [];\n  }\n\n  /**\n   * Set the active GA4 property\n   */\n  async setActiveProperty(propertyId: string): Promise<void> {\n    if (!this.config) {\n      throw new Error('Not authenticated');\n    }\n\n    this.config.propertyId = propertyId;\n    localStorage.setItem('ga4_config', JSON.stringify(this.config));\n  }\n\n  /**\n   * Refresh access token using refresh token\n   */\n  private async refreshAccessToken(): Promise<void> {\n    if (!this.config?.refreshToken) {\n      throw new Error('No refresh token available');\n    }\n\n    const response = await fetch('https://oauth2.googleapis.com/token', {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/x-www-form-urlencoded',\n      },\n      body: new URLSearchParams({\n        client_id: this.config.clientId,\n        client_secret: this.config.clientSecret,\n        refresh_token: this.config.refreshToken,\n        grant_type: 'refresh_token',\n      }),\n    });\n\n    if (!response.ok) {\n      throw new Error('Failed to refresh access token');\n    }\n\n    const tokens = await response.json();\n    this.config.accessToken = tokens.access_token;\n    localStorage.setItem('ga4_config', JSON.stringify(this.config));\n  }\n\n  /**\n   * Fetch comprehensive analytics data\n   */\n  async getAnalyticsData(dateRange: 'last7Days' | 'last30Days' | 'last90Days' = 'last30Days'): Promise<AnalyticsData> {\n    if (!this.config?.propertyId || !this.config?.accessToken) {\n      throw new Error('Not properly configured');\n    }\n\n    // For demo purposes, return mock data\n    // In production, this would make actual API calls\n    return {\n      overview: {\n        totalUsers: { name: 'Total Users', value: '12.4K', trend: 'up' },\n        sessions: { name: 'Sessions', value: '18.2K', trend: 'up' },\n        pageViews: { name: 'Page Views', value: '45.7K', trend: 'stable' },\n        bounceRate: { name: 'Bounce Rate', value: '42.3%', trend: 'down' },\n        avgSessionDuration: { name: 'Avg Session Duration', value: '2:45', trend: 'up' }\n      },\n      topPages: [\n        { path: '/', title: 'Home Page', views: 15420, uniqueViews: 12340 },\n        { path: '/dashboard', title: 'Dashboard', views: 8750, uniqueViews: 6890 },\n        { path: '/integrations', title: 'Integrations', views: 5430, uniqueViews: 4320 }\n      ],\n      topSources: [\n        { source: 'google', medium: 'organic', sessions: 8420, users: 6730 },\n        { source: 'direct', medium: '(none)', sessions: 4560, users: 3890 },\n        { source: 'linkedin', medium: 'social', sessions: 2340, users: 1980 }\n      ],\n      realTimeUsers: 23,\n      conversionEvents: [\n        { eventName: 'sign_up', count: 145, conversionRate: 3.2 },\n        { eventName: 'purchase', count: 89, conversionRate: 1.9 }\n      ]\n    };\n  }\n\n  /**\n   * Test the connection\n   */\n  async testConnection(): Promise<{ success: boolean; message: string }> {\n    try {\n      await this.getAnalyticsData('last7Days');\n      return { success: true, message: 'Successfully connected to Google Analytics' };\n    } catch (error) {\n      return { \n        success: false, \n        message: error instanceof Error ? error.message : 'Connection test failed' \n      };\n    }\n  }\n\n  /**\n   * Check if user is authenticated\n   */\n  isAuthenticated(): boolean {\n    return !!(this.config?.accessToken && this.config?.propertyId);\n  }\n\n  /**\n   * Clear stored authentication\n   */\n  disconnect(): void {\n    this.config = null;\n    localStorage.removeItem('ga4_config');\n  }\n\n  // Utility methods\n  private formatNumber(num: number): string {\n    if (num >= 1000000) {\n      return `${(num / 1000000).toFixed(1)}M`;\n    } else if (num >= 1000) {\n      return `${(num / 1000).toFixed(1)}K`;\n    }\n    return num.toString();\n  }\n\n  private formatDuration(seconds: number): string {\n    const minutes = Math.floor(seconds / 60);\n    const remainingSeconds = Math.floor(seconds % 60);\n    return `${minutes}:${remainingSeconds.toString().padStart(2, '0')}`;\n  }\n}\n\nexport const googleAnalyticsService = new GoogleAnalyticsService(); ","usedDeprecatedRules":[]},{"filePath":"/home/vonj/Github/Nexus/src/lib/services/googleDriveService.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":20,"column":52,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":20,"endColumn":55,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[503,506],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[503,506],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\n * Google Drive Service for Document RAG Integration\n * Syncs documents from Google Drive for intelligent retrieval and business context\n */\n\nimport { logger } from '@/lib/security/logger';\n\ninterface GoogleDriveConfig {\n  accessToken: string;\n  refreshToken: string;\n  folderId?: string; // Optional: specific folder to sync\n}\n\ninterface GoogleWorkspaceCredentials {\n  access_token: string;\n  refresh_token: string;\n  drive_folder_id?: string;\n}\n\nfunction isGoogleWorkspaceCredentials(credentials: any): credentials is GoogleWorkspaceCredentials {\n  return credentials && typeof credentials.access_token === 'string' && typeof credentials.refresh_token === 'string';\n}\n\ninterface DriveFile {\n  id: string;\n  name: string;\n  mimeType: string;\n  modifiedTime: string;\n  webViewLink: string;\n  size?: number;\n  parents?: string[];\n  createdBy?: { displayName: string };\n  lastModifyingUser?: { displayName: string };\n  permissions?: { role: string; id: string; type: string }[];\n}\n\ninterface DriveDocument {\n  id: string;\n  name: string;\n  mimeType: string;\n  content: string;\n  modifiedTime: string;\n  webViewLink: string;\n  size: number;\n  parents: string[];\n  metadata: {\n    createdBy: string;\n    lastModifiedBy: string;\n    permissions: string[];\n    folder: string;\n  };\n}\n\nexport class GoogleDriveService {\n  private config: GoogleDriveConfig | null = null;\n  private baseUrl = 'https://www.googleapis.com/drive/v3';\n  private isAuthenticated = false;\n\n  /**\n   * Initialize service with stored credentials\n   */\n  async initialize(): Promise<boolean> {\n    try {\n      const { data: { user } } = await import('@/lib/supabase').then(m => m.supabase.auth.getUser());\n      if (!user) return false;\n\n      const { data: integration } = await import('@/lib/supabase').then(m => m.supabase\n        .from('user_integrations')\n        .select('credentials')\n        .eq('user_id', user.id)\n        .eq('integration_name', 'google-workspace')\n        .single()\n      );\n\n      if (integration?.credentials && isGoogleWorkspaceCredentials(integration.credentials)) {\n        this.config = {\n          accessToken: integration.credentials.access_token,\n          refreshToken: integration.credentials.refresh_token,\n          folderId: integration.credentials.drive_folder_id\n        };\n        this.isAuthenticated = true;\n        return true;\n      }\n      return false;\n    } catch (error) {\n      logger.error({ err: error }, 'Failed to initialize Google Drive service');\n      return false;\n    }\n  }\n\n  /**\n   * Sync documents from Google Drive for RAG processing\n   */\n  async syncDocumentsForRAG(): Promise<{\n    processed: number;\n    errors: string[];\n    newDocuments: DriveDocument[];\n  }> {\n    if (!this.isAuthenticated || !this.config) {\n      throw new Error('Google Drive service not authenticated');\n    }\n\n    const results = {\n      processed: 0,\n      errors: [] as string[],\n      newDocuments: [] as DriveDocument[]\n    };\n\n    try {\n      // Get all documents from Drive\n      const documents = await this.getAllDocuments();\n      \n      for (const doc of documents) {\n        try {\n          // Check if document already processed\n          const isNew = await this.isNewDocument(doc.id, doc.modifiedTime);\n          \n          if (isNew) {\n            // Download and process document content\n            const content = await this.extractDocumentContent(doc);\n            \n            if (content.trim()) {\n              // Prepare document for RAG storage\n              const ragDocument = {\n                ...doc,\n                content,\n                source: 'google-drive',\n                processedAt: new Date().toISOString()\n              };\n\n              // Store in RAG system\n              await this.storeDocumentForRAG(ragDocument);\n              results.newDocuments.push(ragDocument);\n              results.processed++;\n            }\n          }\n        } catch (error) {\n          const errorMessage = error instanceof Error ? error.message : String(error);\n          results.errors.push(`Failed to process ${doc.name}: ${errorMessage}`);\n        }\n      }\n\n      return results;\n    } catch (error) {\n      const errorMessage = error instanceof Error ? error.message : String(error);\n      throw new Error(`Document sync failed: ${errorMessage}`);\n    }\n  }\n\n  /**\n   * Get all documents from Google Drive\n   */\n  private async getAllDocuments(): Promise<Omit<DriveDocument, 'content'>[]> {\n    const documents: Omit<DriveDocument, 'content'>[] = [];\n    let pageToken = '';\n\n    do {\n      const query = this.buildDriveQuery();\n      const url = `${this.baseUrl}/files?${new URLSearchParams({\n        q: query,\n        fields: 'nextPageToken,files(id,name,mimeType,modifiedTime,webViewLink,size,parents,createdBy,lastModifyingUser,permissions)',\n        pageSize: '100',\n        ...(pageToken && { pageToken })\n      })}`;\n\n      const response = await this.authenticatedRequest(url);\n      const data = await response.json();\n\n      if (data.files) {\n        documents.push(...data.files.map((file: DriveFile) => ({\n          id: file.id,\n          name: file.name,\n          mimeType: file.mimeType,\n          modifiedTime: file.modifiedTime,\n          webViewLink: file.webViewLink,\n          size: file.size || 0,\n          parents: file.parents || [],\n          metadata: {\n            createdBy: file.createdBy?.displayName || 'Unknown',\n            lastModifiedBy: file.lastModifyingUser?.displayName || 'Unknown',\n            permissions: file.permissions?.map(p => p.role) || [],\n            folder: this.getFolderName(file.parents?.[0])\n          }\n        })));\n      }\n\n      pageToken = data.nextPageToken || '';\n    } while (pageToken);\n\n    return documents;\n  }\n\n  /**\n   * Build query for Drive API to get relevant documents\n   */\n  private buildDriveQuery(): string {\n    const supportedTypes = [\n      'application/vnd.google-apps.document',      // Google Docs\n      'application/vnd.google-apps.spreadsheet',  // Google Sheets\n      'application/vnd.google-apps.presentation', // Google Slides\n      'application/pdf',                          // PDF files\n      'text/plain',                              // Text files\n      'application/vnd.openxmlformats-officedocument.wordprocessingml.document', // Word docs\n      'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet',       // Excel\n      'application/vnd.openxmlformats-officedocument.presentationml.presentation' // PowerPoint\n    ];\n\n    let query = `trashed=false and (${supportedTypes.map(type => `mimeType='${type}'`).join(' or ')})`;\n    \n    // Limit to specific folder if configured\n    if (this.config?.folderId) {\n      query += ` and '${this.config.folderId}' in parents`;\n    }\n\n    return query;\n  }\n\n  /**\n   * Extract text content from various document types\n   */\n  private async extractDocumentContent(doc: Omit<DriveDocument, 'content'>): Promise<string> {\n    try {\n      let content = '';\n\n      if (doc.mimeType === 'application/vnd.google-apps.document') {\n        // Google Docs - export as plain text\n        const url = `${this.baseUrl}/files/${doc.id}/export?mimeType=text/plain`;\n        const response = await this.authenticatedRequest(url);\n        content = await response.text();\n      } \n      else if (doc.mimeType === 'application/vnd.google-apps.spreadsheet') {\n        // Google Sheets - export as CSV and convert to readable format\n        const url = `${this.baseUrl}/files/${doc.id}/export?mimeType=text/csv`;\n        const response = await this.authenticatedRequest(url);\n        const csv = await response.text();\n        content = this.formatSpreadsheetContent(csv, doc.name);\n      }\n      else if (doc.mimeType === 'application/vnd.google-apps.presentation') {\n        // Google Slides - export as plain text\n        const url = `${this.baseUrl}/files/${doc.id}/export?mimeType=text/plain`;\n        const response = await this.authenticatedRequest(url);\n        content = await response.text();\n      }\n      else if (doc.mimeType === 'application/pdf' || doc.mimeType === 'text/plain') {\n        // Direct download for PDFs and text files\n        const url = `${this.baseUrl}/files/${doc.id}?alt=media`;\n        const response = await this.authenticatedRequest(url);\n        \n        if (doc.mimeType === 'text/plain') {\n          content = await response.text();\n        } else {\n          // For PDFs, we'd need a PDF parser - for now, just store metadata\n          content = `PDF Document: ${doc.name}\\nSize: ${doc.size} bytes\\nLocation: ${doc.webViewLink}`;\n        }\n      }\n\n      // Add document metadata to content for better context\n      const documentContext = this.buildDocumentContext(doc);\n      return `${documentContext}\\n\\n${content}`.trim();\n\n    } catch (error) {\n      logger.error({ err: error, docName: doc.name }, `Failed to extract content from ${doc.name}`);\n      return `Document: ${doc.name}\\nType: ${doc.mimeType}\\nLocation: ${doc.webViewLink}\\nNote: Content extraction failed`;\n    }\n  }\n\n  /**\n   * Format spreadsheet content for better RAG retrieval\n   */\n  private formatSpreadsheetContent(csv: string, fileName: string): string {\n    const lines = csv.split('\\n').filter(line => line.trim());\n    if (lines.length === 0) return '';\n\n    const headers = lines[0].split(',');\n    const dataRows = lines.slice(1, Math.min(21, lines.length)); // Limit to first 20 rows\n\n    let formatted = `Spreadsheet: ${fileName}\\n\\n`;\n    \n    if (headers.length > 1) {\n      formatted += `Columns: ${headers.join(', ')}\\n\\n`;\n      \n      // Add sample data\n      formatted += 'Sample Data:\\n';\n      dataRows.forEach((row, index) => {\n        const values = row.split(',');\n        if (values.length === headers.length) {\n          formatted += `Row ${index + 1}: `;\n          headers.forEach((header, i) => {\n            if (values[i]?.trim()) {\n              formatted += `${header}=${values[i].trim()} `;\n            }\n          });\n          formatted += '\\n';\n        }\n      });\n    } else {\n      formatted += csv;\n    }\n\n    return formatted;\n  }\n\n  /**\n   * Build document context for RAG\n   */\n  private buildDocumentContext(doc: Omit<DriveDocument, 'content'>): string {\n    return `[DOCUMENT METADATA]\nTitle: ${doc.name}\nType: ${this.getDocumentTypeLabel(doc.mimeType)}\nLast Modified: ${new Date(doc.modifiedTime).toLocaleDateString()}\nModified By: ${doc.metadata.lastModifiedBy}\nFolder: ${doc.metadata.folder}\nLink: ${doc.webViewLink}\n[END METADATA]`;\n  }\n\n  /**\n   * Get human-readable document type label\n   */\n  private getDocumentTypeLabel(mimeType: string): string {\n    const typeMap: { [key: string]: string } = {\n      'application/vnd.google-apps.document': 'Google Doc',\n      'application/vnd.google-apps.spreadsheet': 'Google Sheet',\n      'application/vnd.google-apps.presentation': 'Google Slides',\n      'application/pdf': 'PDF Document',\n      'text/plain': 'Text File',\n      'application/vnd.openxmlformats-officedocument.wordprocessingml.document': 'Word Document',\n      'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet': 'Excel Spreadsheet',\n      'application/vnd.openxmlformats-officedocument.presentationml.presentation': 'PowerPoint Presentation'\n    };\n    return typeMap[mimeType] || 'Document';\n  }\n\n  /**\n   * Check if document is new or updated since last sync\n   */\n  private async isNewDocument(documentId: string, modifiedTime: string): Promise<boolean> {\n    try {\n      const { data } = await import('@/lib/supabase').then(m => m.supabase\n        .from('ai_vector_documents')\n        .select('metadata')\n        .eq('document_id', `google-drive-${documentId}`)\n        .single()\n      );\n\n      if (!data) return true; // New document\n\n      const lastSync = data.metadata?.lastModified;\n      return !lastSync || new Date(modifiedTime) > new Date(lastSync);\n    } catch {\n      return true; // Assume new if check fails\n    }\n  }\n\n  /**\n   * Store document in RAG system\n   */\n  private async storeDocumentForRAG(document: DriveDocument): Promise<void> {\n    try {\n      // Call the embed document edge function\n      const response = await fetch('/api/ai/embed-document', {\n        method: 'POST',\n        headers: { 'Content-Type': 'application/json' },\n        body: JSON.stringify({\n          documentId: `google-drive-${document.id}`,\n          content: document.content,\n          metadata: {\n            source: 'google-drive',\n            fileName: document.name,\n            fileType: document.mimeType,\n            lastModified: document.modifiedTime,\n            webViewLink: document.webViewLink,\n            folder: document.metadata.folder,\n            size: document.size,\n            processedAt: new Date().toISOString()\n          }\n        })\n      });\n\n      if (!response.ok) {\n        throw new Error(`Failed to store document: ${response.statusText}`);\n      }\n    } catch (error) {\n      const errorMessage = error instanceof Error ? error.message : String(error);\n      logger.error({ err: error, documentId: document.id }, 'Error storing document for RAG in Supabase');\n      throw new Error(`Failed to store document ${document.id} for RAG: ${errorMessage}`);\n    }\n  }\n\n  /**\n   * Get folder name by ID\n   */\n  private getFolderName(folderId?: string): string {\n    if (!folderId) return 'Root';\n    // In a real implementation, you'd cache folder names\n    // For now, just return the ID\n    return folderId;\n  }\n\n  /**\n   * Make authenticated request to Google Drive API\n   */\n  private async authenticatedRequest(url: string, options: RequestInit = {}): Promise<Response> {\n    if (!this.config?.accessToken) {\n      throw new Error('No access token available');\n    }\n\n    const response = await fetch(url, {\n      ...options,\n      headers: {\n        'Authorization': `Bearer ${this.config.accessToken}`,\n        'Content-Type': 'application/json',\n        ...options.headers\n      }\n    });\n\n    if (response.status === 401) {\n      // Token expired, try to refresh\n      await this.refreshAccessToken();\n      \n      // Retry request with new token\n      return fetch(url, {\n        ...options,\n        headers: {\n          'Authorization': `Bearer ${this.config.accessToken}`,\n          'Content-Type': 'application/json',\n          ...options.headers\n        }\n      });\n    }\n\n    if (!response.ok) {\n      throw new Error(`Google Drive API error: ${response.status} ${response.statusText}`);\n    }\n\n    return response;\n  }\n\n  /**\n   * Refresh access token using refresh token\n   */\n  private async refreshAccessToken(): Promise<void> {\n    if (!this.config?.refreshToken) {\n      throw new Error('No refresh token available');\n    }\n\n    try {\n      const response = await fetch('https://oauth2.googleapis.com/token', {\n        method: 'POST',\n        headers: { 'Content-Type': 'application/x-www-form-urlencoded' },\n        body: new URLSearchParams({\n          client_id: process.env.VITE_GOOGLE_CLIENT_ID || '',\n          client_secret: process.env.GOOGLE_CLIENT_SECRET || '',\n          refresh_token: this.config.refreshToken,\n          grant_type: 'refresh_token'\n        })\n      });\n\n      if (!response.ok) {\n        throw new Error('Failed to refresh token');\n      }\n\n      const data = await response.json();\n      this.config.accessToken = data.access_token;\n\n      // Update stored credentials\n      const { data: { user } } = await import('@/lib/supabase').then(m => m.supabase.auth.getUser());\n      if (user) {\n        await import('@/lib/supabase').then(m => m.supabase\n          .from('user_integrations')\n          .update({\n            credentials: {\n              ...this.config,\n              access_token: data.access_token\n            }\n          })\n          .eq('user_id', user.id)\n          .eq('integration_name', 'google-workspace')\n        );\n      }\n    } catch (error) {\n      const errorMessage = error instanceof Error ? error.message : String(error);\n      logger.error({ err: error }, 'Google Drive token refresh failed');\n      this.isAuthenticated = false;\n      throw new Error(`Token refresh failed: ${errorMessage}`);\n    }\n  }\n\n  /**\n   * Get sync status and statistics\n   */\n  async getSyncStatus(): Promise<{\n    lastSync: string | null;\n    totalDocuments: number;\n    pendingSync: number;\n    errors: string[];\n  }> {\n    try {\n      // Get last sync time from user_integrations\n      const { data: { user } } = await import('@/lib/supabase').then(m => m.supabase.auth.getUser());\n      if (!user) throw new Error('User not authenticated');\n\n      const { data: integration } = await import('@/lib/supabase').then(m => m.supabase\n        .from('user_integrations')\n        .select('metadata')\n        .eq('user_id', user.id)\n        .eq('integration_name', 'google-workspace')\n        .single()\n      );\n\n      const lastSync = integration?.metadata?.lastDriveSync || null;\n\n      // Count documents in RAG system\n      const { count: totalDocuments } = await import('@/lib/supabase').then(m => m.supabase\n        .from('ai_vector_documents')\n        .select('*', { count: 'exact', head: true })\n        .like('document_id', 'google-drive-%')\n      );\n\n      return {\n        lastSync,\n        totalDocuments: totalDocuments || 0,\n        pendingSync: 0, // Would need to calculate based on Drive API\n        errors: []\n      };\n    } catch (error) {\n      const errorMessage = error instanceof Error ? error.message : String(error);\n      logger.error({ err: error }, 'Failed to get sync status');\n      return {\n        lastSync: null,\n        totalDocuments: 0,\n        pendingSync: 0,\n        errors: [errorMessage]\n      };\n    }\n  }\n\n  /**\n   * Trigger a manual sync process\n   */\n  async triggerSync(): Promise<{\n    success: boolean;\n    processed: number;\n    errors: string[];\n    newDocuments: DriveDocument[];\n  }> {\n    try {\n      const syncResult = await this.syncDocumentsForRAG();\n      \n      // Update last sync time\n      const { data: { user } } = await import('@/lib/supabase').then(m => m.supabase.auth.getUser());\n      if (user) {\n        await import('@/lib/supabase').then(m => m.supabase\n          .from('user_integrations')\n          .update({\n            metadata: {\n              lastDriveSync: new Date().toISOString(),\n              lastSyncResult: {\n                processed: syncResult.processed,\n                errors: syncResult.errors.length\n              }\n            }\n          })\n          .eq('user_id', user.id)\n          .eq('integration_name', 'google-workspace')\n        );\n      }\n      return {\n        success: true,\n        ...syncResult,\n      };\n    } catch (error) {\n      const errorMessage = error instanceof Error ? error.message : String(error);\n      logger.error({ err: error }, 'Manual sync trigger failed');\n      return {\n        success: false,\n        processed: 0,\n        errors: [errorMessage],\n        newDocuments: []\n      };\n    }\n  }\n}\n\nexport const googleDriveService = new GoogleDriveService(); ","usedDeprecatedRules":[]},{"filePath":"/home/vonj/Github/Nexus/src/lib/services/googleWorkspaceService.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":197,"column":51,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":197,"endColumn":54,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[5349,5352],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[5349,5352],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":242,"column":69,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":242,"endColumn":72,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[6672,6675],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[6672,6675],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":248,"column":68,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":248,"endColumn":71,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[6986,6989],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[6986,6989],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":262,"column":66,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":262,"endColumn":69,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[7305,7308],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[7305,7308],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":374,"column":72,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":374,"endColumn":75,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[10569,10572],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[10569,10572],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":375,"column":77,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":375,"endColumn":80,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[10680,10683],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[10680,10683],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":376,"column":71,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":376,"endColumn":74,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[10790,10793],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[10790,10793],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":377,"column":76,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":377,"endColumn":79,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[10937,10940],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[10937,10940],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":388,"column":82,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":388,"endColumn":85,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[11283,11286],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[11283,11286],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":426,"column":91,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":426,"endColumn":94,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[12436,12439],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[12436,12439],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":509,"column":40,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":509,"endColumn":43,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[15009,15012],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[15009,15012],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":11,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\n * Google Workspace Integration Service\n * Comprehensive Google business tools integration\n * Pillar: 1,2,3 - Automates Google workspace data collection and insights\n */\n\nimport { logger } from '../security/logger';\n\ninterface GoogleWorkspaceConfig {\n  clientId: string;\n  clientSecret: string;\n  accessToken: string;\n  refreshToken: string;\n  scope: string[];\n}\n\ninterface GoogleWorkspaceMetrics {\n  // Gmail metrics\n  emailVolume: {\n    sent: number;\n    received: number;\n    unread: number;\n  };\n  \n  // Drive metrics\n  storage: {\n    used: number;\n    total: number;\n    fileCount: number;\n  };\n  \n  // Calendar metrics\n  meetings: {\n    total: number;\n    duration: number;\n    participants: number;\n  };\n  \n  // Business insights\n  productivity: {\n    activeUsers: number;\n    collaborationScore: number;\n    documentSharing: number;\n  };\n}\n\nexport class GoogleWorkspaceService {\n  private config: GoogleWorkspaceConfig | null = null;\n\n  constructor() {\n    this.loadConfig();\n  }\n\n  private loadConfig(): void {\n    const stored = localStorage.getItem('google_workspace_config');\n    if (stored) {\n      this.config = JSON.parse(stored);\n    }\n  }\n\n  isAuthenticated(): boolean {\n    return this.config !== null && !!this.config.accessToken;\n  }\n\n  /**\n   * Initialize OAuth 2.0 flow for Google Workspace\n   */\n  async initializeOAuth(): Promise<string> {\n    const clientId = import.meta.env.VITE_GOOGLE_CLIENT_ID;\n    const redirectUri = `${window.location.origin}/integrations/google-workspace/callback`;\n    \n    // Comprehensive scopes for all Google business tools\n    const scopes = [\n      // Gmail\n      'https://www.googleapis.com/auth/gmail.readonly',\n      'https://www.googleapis.com/auth/gmail.metadata',\n      \n      // Drive\n      'https://www.googleapis.com/auth/drive.readonly',\n      'https://www.googleapis.com/auth/drive.metadata.readonly',\n      \n      // Calendar\n      'https://www.googleapis.com/auth/calendar.readonly',\n      'https://www.googleapis.com/auth/calendar.events.readonly',\n      \n      // Contacts\n      'https://www.googleapis.com/auth/contacts.readonly',\n      \n      // Business Profile (Google My Business)\n      'https://www.googleapis.com/auth/business.manage',\n      \n      // Analytics (for comprehensive data)\n      'https://www.googleapis.com/auth/analytics.readonly',\n      \n      // Search Console\n      'https://www.googleapis.com/auth/webmasters.readonly',\n      \n      // Admin SDK (if admin)\n      'https://www.googleapis.com/auth/admin.directory.user.readonly',\n      'https://www.googleapis.com/auth/admin.reports.audit.readonly'\n    ];\n\n    const params = new URLSearchParams({\n      client_id: clientId,\n      redirect_uri: redirectUri,\n      response_type: 'code',\n      scope: scopes.join(' '),\n      access_type: 'offline',\n      prompt: 'consent'\n    });\n\n    return `https://accounts.google.com/o/oauth2/v2/auth?${params.toString()}`;\n  }\n\n  /**\n   * Exchange authorization code for access tokens\n   */\n  async exchangeCodeForTokens(code: string): Promise<void> {\n    const clientId = import.meta.env.VITE_GOOGLE_CLIENT_ID;\n    const clientSecret = import.meta.env.VITE_GOOGLE_CLIENT_SECRET;\n    const redirectUri = `${window.location.origin}/integrations/google-workspace/callback`;\n\n    const response = await fetch('https://oauth2.googleapis.com/token', {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/x-www-form-urlencoded',\n      },\n      body: new URLSearchParams({\n        client_id: clientId,\n        client_secret: clientSecret,\n        code,\n        grant_type: 'authorization_code',\n        redirect_uri: redirectUri,\n      }),\n    });\n\n    if (!response.ok) {\n      throw new Error('Failed to exchange code for tokens');\n    }\n\n    const tokens = await response.json();\n    \n    this.config = {\n      clientId,\n      clientSecret,\n      accessToken: tokens.access_token,\n      refreshToken: tokens.refresh_token,\n      scope: tokens.scope?.split(' ') || []\n    };\n\n    localStorage.setItem('google_workspace_config', JSON.stringify(this.config));\n  }\n\n  /**\n   * Get comprehensive Google Workspace metrics\n   */\n  async getWorkspaceMetrics(): Promise<GoogleWorkspaceMetrics> {\n    if (!this.isAuthenticated()) {\n      throw new Error('Not authenticated with Google Workspace');\n    }\n\n    try {\n      const [emailMetrics, driveMetrics, calendarMetrics, businessMetrics] = await Promise.all([\n        this.getGmailMetrics(),\n        this.getDriveMetrics(),\n        this.getCalendarMetrics(),\n        this.getBusinessMetrics()\n      ]);\n\n      return {\n        emailVolume: emailMetrics,\n        storage: driveMetrics,\n        meetings: calendarMetrics,\n        productivity: businessMetrics\n      };\n    } catch (error) {\n      logger.error({ err: error }, 'Failed to fetch Google Workspace metrics');\n      throw error;\n    }\n  }\n\n  /**\n   * Get Gmail metrics\n   */\n  private async getGmailMetrics() {\n    const response = await this.makeAuthenticatedRequest(\n      'https://gmail.googleapis.com/gmail/v1/users/me/profile'\n    );\n\n    const threadsResponse = await this.makeAuthenticatedRequest(\n      'https://gmail.googleapis.com/gmail/v1/users/me/threads?maxResults=100'\n    );\n\n    return {\n      sent: response.messagesTotal || 0,\n      received: response.messagesTotal || 0,\n      unread: threadsResponse.threads?.filter((t: any) => t.snippet?.includes('UNREAD')).length || 0\n    };\n  }\n\n  /**\n   * Get Google Drive metrics\n   */\n  private async getDriveMetrics() {\n    const aboutResponse = await this.makeAuthenticatedRequest(\n      'https://www.googleapis.com/drive/v3/about?fields=storageQuota,user'\n    );\n\n    const filesResponse = await this.makeAuthenticatedRequest(\n      'https://www.googleapis.com/drive/v3/files?pageSize=1000&fields=files(id,name,size,mimeType)'\n    );\n\n    const quota = aboutResponse.storageQuota;\n    \n    return {\n      used: parseInt(quota?.usage || '0'),\n      total: parseInt(quota?.limit || '0'),\n      fileCount: filesResponse.files?.length || 0\n    };\n  }\n\n  /**\n   * Get Google Calendar metrics\n   */\n  private async getCalendarMetrics() {\n    const today = new Date();\n    const nextWeek = new Date();\n    nextWeek.setDate(today.getDate() + 7);\n\n    const params = new URLSearchParams({\n      timeMin: today.toISOString(),\n      timeMax: nextWeek.toISOString(),\n      singleEvents: 'true',\n      orderBy: 'startTime'\n    });\n\n    const response = await this.makeAuthenticatedRequest(\n      `https://www.googleapis.com/auth/calendar/v3/calendars/primary/events?${params.toString()}`\n    );\n\n    const totalMeetings = response.items.length;\n    const totalDuration = response.items.reduce((acc: number, item: any) => {\n      const start = new Date(item.start.dateTime || item.start.date);\n      const end = new Date(item.end.dateTime || item.end.date);\n      return acc + (end.getTime() - start.getTime());\n    }, 0) / (1000 * 60); // duration in minutes\n\n    const participants = response.items.reduce((acc: number, item: any) => {\n      return acc + (item.attendees?.length || 0);\n    }, 0);\n\n    return {\n      total: totalMeetings,\n      duration: Math.round(totalDuration),\n      participants\n    };\n  }\n\n  /**\n   * Get Google Calendar events for a given time range\n   */\n  async getCalendarEvents(timeMin: Date, timeMax: Date): Promise<any[]> {\n    if (!this.isAuthenticated()) {\n      throw new Error('Not authenticated with Google Workspace');\n    }\n\n    const params = new URLSearchParams({\n      timeMin: timeMin.toISOString(),\n      timeMax: timeMax.toISOString(),\n      singleEvents: 'true',\n      orderBy: 'startTime',\n      maxResults: '20'\n    });\n    \n    const response = await this.makeAuthenticatedRequest(\n      `https://www.googleapis.com/calendar/v3/calendars/primary/events?${params.toString()}`\n    );\n\n    return response.items || [];\n  }\n\n  /**\n   * Get business productivity metrics\n   */\n  private async getBusinessMetrics() {\n    // This would typically require admin access\n    // For now, return calculated metrics based on available data\n    \n    return {\n      activeUsers: 1, // Current user\n      collaborationScore: 85, // Based on sharing activity\n      documentSharing: 45 // Based on Drive sharing\n    };\n  }\n\n  /**\n   * Get Google My Business insights\n   */\n  async getBusinessProfileMetrics() {\n    if (!this.isAuthenticated()) {\n      throw new Error('Not authenticated with Google');\n    }\n\n    try {\n      // Get business accounts\n      const accountsResponse = await this.makeAuthenticatedRequest(\n        'https://mybusinessbusinessinformation.googleapis.com/v1/accounts'\n      );\n\n      const accounts = accountsResponse.accounts || [];\n      if (accounts.length === 0) {\n        return null;\n      }\n\n      // Get locations for first account\n      const account = accounts[0];\n      const locationsResponse = await this.makeAuthenticatedRequest(\n        `https://mybusinessbusinessinformation.googleapis.com/v1/${account.name}/locations`\n      );\n\n      return {\n        accounts: accounts.length,\n        locations: locationsResponse.locations?.length || 0,\n        businessInfo: locationsResponse.locations?.[0] || null\n      };\n    } catch (error) {\n      logger.error({ err: error }, 'Failed to fetch Google Business Profile data');\n      return null;\n    }\n  }\n\n  /**\n   * Get Google Search Console data\n   */\n  async getSearchConsoleMetrics() {\n    if (!this.isAuthenticated()) {\n      throw new Error('Not authenticated with Google');\n    }\n\n    try {\n      // Get list of sites\n      const sitesResponse = await this.makeAuthenticatedRequest(\n        'https://www.googleapis.com/webmasters/v3/sites'\n      );\n\n      const sites = sitesResponse.siteEntry || [];\n      if (sites.length === 0) {\n        return null;\n      }\n\n      // Get search analytics for first site\n      const site = sites[0];\n      const endDate = new Date().toISOString().split('T')[0];\n      const startDate = new Date(Date.now() - 30 * 24 * 60 * 60 * 1000).toISOString().split('T')[0];\n\n      const analyticsResponse = await this.makeAuthenticatedRequest(\n        `https://www.googleapis.com/webmasters/v3/sites/${encodeURIComponent(site.siteUrl)}/searchAnalytics/query`,\n        {\n          method: 'POST',\n          headers: {\n            'Content-Type': 'application/json',\n          },\n          body: JSON.stringify({\n            startDate,\n            endDate,\n            dimensions: ['query'],\n            rowLimit: 100\n          })\n        }\n      );\n\n      return {\n        sites: sites.length,\n        totalClicks: analyticsResponse.rows?.reduce((sum: number, row: any) => sum + row.clicks, 0) || 0,\n        totalImpressions: analyticsResponse.rows?.reduce((sum: number, row: any) => sum + row.impressions, 0) || 0,\n        averageCTR: analyticsResponse.rows?.reduce((sum: number, row: any) => sum + row.ctr, 0) / (analyticsResponse.rows?.length || 1) || 0,\n        averagePosition: analyticsResponse.rows?.reduce((sum: number, row: any) => sum + row.position, 0) / (analyticsResponse.rows?.length || 1) || 0\n      };\n    } catch (error) {\n      logger.error({ err: error }, 'Failed to fetch Search Console data');\n      return null;\n    }\n  }\n\n  /**\n   * Test connection to Google Workspace\n   */\n  async testConnection(): Promise<{ success: boolean; message: string; details?: any }> {\n    if (!this.isAuthenticated()) {\n      return { success: false, message: 'Not authenticated' };\n    }\n\n    try {\n      // Test basic profile access\n      const profile = await this.makeAuthenticatedRequest(\n        'https://www.googleapis.com/oauth2/v2/userinfo'\n      );\n\n      // Test Gmail access\n      const gmailProfile = await this.makeAuthenticatedRequest(\n        'https://gmail.googleapis.com/gmail/v1/users/me/profile'\n      );\n\n      return {\n        success: true,\n        message: 'Successfully connected to Google Workspace',\n        details: {\n          user: profile.name || profile.email,\n          email: profile.email,\n          emailsTotal: gmailProfile.messagesTotal,\n          scopes: this.config?.scope || []\n        }\n      };\n    } catch (error) {\n      logger.error({ err: error }, 'Google Workspace connection test failed');\n      return {\n        success: false,\n        message: error instanceof Error ? error.message : 'Connection test failed'\n      };\n    }\n  }\n\n  /**\n   * Make authenticated request to Google API\n   */\n  private async makeAuthenticatedRequest(url: string, options: RequestInit = {}): Promise<any> {\n    if (!this.config?.accessToken) {\n      throw new Error('No access token available');\n    }\n\n    const response = await fetch(url, {\n      ...options,\n      headers: {\n        'Authorization': `Bearer ${this.config.accessToken}`,\n        'Content-Type': 'application/json',\n        ...options.headers,\n      },\n    });\n\n    if (response.status === 401) {\n      // Token expired, try to refresh\n      await this.refreshAccessToken();\n      \n      // Retry the request with new token\n      return this.makeAuthenticatedRequest(url, options);\n    }\n\n    if (!response.ok) {\n      throw new Error(`Google API request failed: ${response.status} ${response.statusText}`);\n    }\n\n    return response.json();\n  }\n\n  /**\n   * Refresh access token using refresh token\n   */\n  private async refreshAccessToken(): Promise<void> {\n    if (!this.config?.refreshToken) {\n      throw new Error('No refresh token available');\n    }\n\n    const response = await fetch('https://oauth2.googleapis.com/token', {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/x-www-form-urlencoded',\n      },\n      body: new URLSearchParams({\n        client_id: this.config.clientId,\n        client_secret: this.config.clientSecret,\n        refresh_token: this.config.refreshToken,\n        grant_type: 'refresh_token',\n      }),\n    });\n\n    if (!response.ok) {\n      throw new Error('Failed to refresh access token');\n    }\n\n    const tokens = await response.json();\n    this.config.accessToken = tokens.access_token;\n    localStorage.setItem('google_workspace_config', JSON.stringify(this.config));\n  }\n\n  /**\n   * Get available Google services based on scopes\n   */\n  getAvailableServices(): string[] {\n    if (!this.config?.scope) return [];\n\n    const services = [];\n    const scopes = this.config.scope;\n\n    if (scopes.some(s => s.includes('gmail'))) services.push('Gmail');\n    if (scopes.some(s => s.includes('drive'))) services.push('Google Drive');\n    if (scopes.some(s => s.includes('calendar'))) services.push('Google Calendar');\n    if (scopes.some(s => s.includes('contacts'))) services.push('Google Contacts');\n    if (scopes.some(s => s.includes('business'))) services.push('Google My Business');\n    if (scopes.some(s => s.includes('analytics'))) services.push('Google Analytics');\n    if (scopes.some(s => s.includes('webmasters'))) services.push('Search Console');\n    if (scopes.some(s => s.includes('admin'))) services.push('Admin SDK');\n\n    return services;\n  }\n\n  /**\n   * Get recent emails from Gmail\n   */\n  async getEmails(limit = 10): Promise<any[]> {\n    if (!this.isAuthenticated()) {\n      throw new Error('Not authenticated with Google Workspace');\n    }\n\n    const params = new URLSearchParams({\n      maxResults: String(limit),\n      q: 'is:unread',\n    });\n\n    const response = await this.makeAuthenticatedRequest(\n      `https://www.googleapis.com/gmail/v1/users/me/messages?${params.toString()}`\n    );\n\n    if (!response.messages) {\n      return [];\n    }\n\n    const emailPromises = response.messages.map((message: { id: string }) =>\n      this.makeAuthenticatedRequest(\n        `https://www.googleapis.com/gmail/v1/users/me/messages/${message.id}?format=metadata&metadataHeaders=subject,from,date`\n      )\n    );\n\n    return Promise.all(emailPromises);\n  }\n}\n\nexport const googleWorkspaceService = new GoogleWorkspaceService(); ","usedDeprecatedRules":[]},{"filePath":"/home/vonj/Github/Nexus/src/lib/services/hubspotService.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":299,"column":82,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":299,"endColumn":85,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[8093,8096],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[8093,8096],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":354,"column":62,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":354,"endColumn":65,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[9879,9882],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[9879,9882],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":358,"column":56,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":358,"endColumn":59,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[10024,10027],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[10024,10027],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":362,"column":51,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":362,"endColumn":54,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[10209,10212],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[10209,10212],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":368,"column":45,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":368,"endColumn":48,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[10412,10415],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[10412,10415],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":372,"column":50,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":372,"endColumn":53,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[10559,10562],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[10559,10562],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":376,"column":51,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":376,"endColumn":54,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[10678,10681],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[10678,10681],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":380,"column":72,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":380,"endColumn":75,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[10819,10822],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[10819,10822],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":388,"column":64,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":388,"endColumn":67,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[11151,11154],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[11151,11154],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\n * HubSpot Integration Service\n * Integrates with HubSpot CRM for sales, marketing, and customer data\n * Pillar: 1,2 - Automated CRM data and business health assessment\n */\n\nimport { supabase } from '../core/supabase';\nimport { logger } from '../security/logger';\n\nexport interface HubSpotConfig {\n  clientId: string;\n  clientSecret: string;\n  redirectUri: string;\n  accessToken?: string;\n  refreshToken?: string;\n  expiresAt?: number;\n  portalId?: string;\n}\n\nexport interface HubSpotMetrics {\n  contacts: {\n    total: number;\n    newThisMonth: number;\n    qualifiedLeads: number;\n    customers: number;\n    conversionRate: number;\n  };\n  deals: {\n    total: number;\n    openDeals: number;\n    closedWon: number;\n    closedLost: number;\n    totalValue: number;\n    averageDealSize: number;\n    salesCycleLength: number;\n  };\n  companies: {\n    total: number;\n    newThisMonth: number;\n    activeCustomers: number;\n  };\n  marketing: {\n    emailCampaigns: number;\n    emailOpens: number;\n    emailClicks: number;\n    emailOpenRate: number;\n    emailClickRate: number;\n    leadSources: Array<{\n      source: string;\n      count: number;\n      percentage: number;\n    }>;\n  };\n  sales: {\n    revenue: number;\n    monthlyRecurringRevenue: number;\n    customerLifetimeValue: number;\n    churnRate: number;\n    salesVelocity: number;\n  };\n}\n\nexport interface HubSpotContact {\n  id: string;\n  properties: {\n    email: string;\n    firstname?: string;\n    lastname?: string;\n    company?: string;\n    phone?: string;\n    lifecyclestage?: string;\n    hubspot_owner_id?: string;\n    createdate?: string;\n    lastmodifieddate?: string;\n  };\n}\n\nexport interface HubSpotDeal {\n  id: string;\n  properties: {\n    dealname?: string;\n    amount?: string;\n    dealstage?: string;\n    closedate?: string;\n    pipeline?: string;\n    createdate?: string;\n    hubspot_owner_id?: string;\n  };\n}\n\nexport class HubSpotService {\n  private config: HubSpotConfig | null = null;\n\n  async initialize(): Promise<boolean> {\n    try {\n      const { data: integration, error } = await supabase\n        .from('user_integrations')\n        .select('config, credentials')\n        .eq('integration_slug', 'hubspot')\n        .eq('status', 'active')\n        .maybeSingle();\n\n      if (error || !integration) {\n        logger.warn('HubSpot integration not found or inactive');\n        return false;\n      }\n\n      this.config = {\n        clientId: integration.credentials?.client_id,\n        clientSecret: integration.credentials?.client_secret,\n        redirectUri: integration.config?.redirect_uri,\n        accessToken: integration.credentials?.access_token,\n        refreshToken: integration.credentials?.refresh_token,\n        expiresAt: integration.credentials?.expires_at,\n        portalId: integration.config?.portal_id\n      };\n\n      return true;\n    } catch (error) {\n      logger.error({ error }, 'Failed to initialize HubSpot service');\n      return false;\n    }\n  }\n\n  async testConnection(): Promise<{ success: boolean; message: string }> {\n    if (!this.config?.accessToken) {\n      return { success: false, message: 'HubSpot access token not configured' };\n    }\n\n    try {\n      const response = await fetch('https://api.hubapi.com/crm/v3/objects/contacts?limit=1', {\n        headers: {\n          'Authorization': `Bearer ${this.config.accessToken}`,\n          'Content-Type': 'application/json'\n        }\n      });\n\n      if (response.ok) {\n        const data = await response.json();\n        return { \n          success: true, \n          message: `Connected to HubSpot - ${data.total || 0} contacts found` \n        };\n      } else if (response.status === 401) {\n        // Try to refresh token\n        const refreshed = await this.refreshAccessToken();\n        if (refreshed) {\n          return { success: true, message: 'Connected to HubSpot (token refreshed)' };\n        } else {\n          return { success: false, message: 'Authentication failed - please reconnect' };\n        }\n      } else {\n        return { success: false, message: `API error: ${response.statusText}` };\n      }\n    } catch (error) {\n      logger.error({ error }, 'Failed to test HubSpot connection');\n      return { \n        success: false, \n        message: 'Network error connecting to HubSpot API' \n      };\n    }\n  }\n\n  /**\n   * Get OAuth authorization URL\n   */\n  getAuthorizationUrl(): string {\n    if (!this.config?.clientId || !this.config?.redirectUri) {\n      throw new Error('Client ID and redirect URI are required for OAuth2 authorization');\n    }\n    \n    const scopes = [\n      'crm.objects.contacts.read',\n      'crm.objects.contacts.write',\n      'crm.objects.companies.read',\n      'crm.objects.companies.write',\n      'crm.objects.deals.read',\n      'crm.objects.deals.write',\n      'crm.lists.read',\n      'crm.lists.write'\n    ];\n    \n    const state = btoa(JSON.stringify({ \n      timestamp: Date.now(),\n      service: 'hubspot'\n    }));\n    \n    const params = new URLSearchParams({\n      client_id: this.config.clientId,\n      redirect_uri: this.config.redirectUri,\n      scope: scopes.join(' '),\n      response_type: 'code',\n      state\n    });\n    \n    return `https://app.hubspot.com/oauth/authorize?${params.toString()}`;\n  }\n\n  /**\n   * Exchange authorization code for access token\n   */\n  async exchangeCodeForTokens(code: string): Promise<{\n    accessToken: string;\n    refreshToken: string;\n    expiresAt: number;\n  }> {\n    if (!this.config?.clientId || !this.config?.clientSecret || !this.config?.redirectUri) {\n      throw new Error('Client credentials not configured');\n    }\n\n    try {\n      const response = await fetch('https://api.hubapi.com/oauth/v1/token', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/x-www-form-urlencoded'\n        },\n        body: new URLSearchParams({\n          grant_type: 'authorization_code',\n          client_id: this.config.clientId,\n          client_secret: this.config.clientSecret,\n          redirect_uri: this.config.redirectUri,\n          code\n        })\n      });\n\n      if (!response.ok) {\n        throw new Error(`Token exchange failed: ${response.statusText}`);\n      }\n\n      const data = await response.json();\n      \n      return {\n        accessToken: data.access_token,\n        refreshToken: data.refresh_token,\n        expiresAt: Date.now() + (data.expires_in * 1000)\n      };\n    } catch (error) {\n      logger.error({ error }, 'Failed to exchange HubSpot authorization code');\n      throw error;\n    }\n  }\n\n  /**\n   * Refresh access token using refresh token\n   */\n  private async refreshAccessToken(): Promise<boolean> {\n    if (!this.config?.clientId || !this.config?.clientSecret || !this.config?.refreshToken) {\n      return false;\n    }\n\n    try {\n      const response = await fetch('https://api.hubapi.com/oauth/v1/token', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/x-www-form-urlencoded'\n        },\n        body: new URLSearchParams({\n          grant_type: 'refresh_token',\n          client_id: this.config.clientId,\n          client_secret: this.config.clientSecret,\n          refresh_token: this.config.refreshToken\n        })\n      });\n\n      if (!response.ok) {\n        return false;\n      }\n\n      const data = await response.json();\n      \n      // Update config\n      this.config.accessToken = data.access_token;\n      this.config.refreshToken = data.refresh_token;\n      this.config.expiresAt = Date.now() + (data.expires_in * 1000);\n\n      // Update database\n      await supabase\n        .from('user_integrations')\n        .update({\n          credentials: {\n            ...this.config,\n            access_token: data.access_token,\n            refresh_token: data.refresh_token,\n            expires_at: this.config.expiresAt\n          }\n        })\n        .eq('integration_slug', 'hubspot');\n\n      return true;\n    } catch (error) {\n      logger.error({ error }, 'Failed to refresh HubSpot token');\n      return false;\n    }\n  }\n\n  /**\n   * Make authenticated API request\n   */\n  private async apiRequest(endpoint: string, options: RequestInit = {}): Promise<any> {\n    if (!this.config?.accessToken) {\n      throw new Error('HubSpot not authenticated');\n    }\n\n    const url = `https://api.hubapi.com${endpoint}`;\n    const response = await fetch(url, {\n      ...options,\n      headers: {\n        'Authorization': `Bearer ${this.config.accessToken}`,\n        'Content-Type': 'application/json',\n        ...options.headers\n      }\n    });\n\n    if (response.status === 401) {\n      // Try to refresh token and retry\n      const refreshed = await this.refreshAccessToken();\n      if (refreshed) {\n        return this.apiRequest(endpoint, options);\n      } else {\n        throw new Error('Authentication failed - please reconnect HubSpot');\n      }\n    }\n\n    if (!response.ok) {\n      throw new Error(`HubSpot API error: ${response.status} ${response.statusText}`);\n    }\n\n    return response.json();\n  }\n\n  /**\n   * Get comprehensive CRM metrics\n   */\n  async getCRMMetrics(): Promise<HubSpotMetrics> {\n    if (!this.config?.accessToken) {\n      throw new Error('HubSpot not properly configured');\n    }\n\n    try {\n      // Get contacts data\n      const contactsData = await this.apiRequest('/crm/v3/objects/contacts?limit=100&properties=email,firstname,lastname,lifecyclestage,createdate');\n      \n      // Get deals data\n      const dealsData = await this.apiRequest('/crm/v3/objects/deals?limit=100&properties=dealname,amount,dealstage,closedate,createdate');\n      \n      // Get companies data\n      const companiesData = await this.apiRequest('/crm/v3/objects/companies?limit=100&properties=name,domain,createdate');\n\n      // Process contacts metrics\n      const contacts = contactsData.results || [];\n      const currentMonth = new Date();\n      currentMonth.setDate(1);\n      \n      const newContactsThisMonth = contacts.filter((contact: any) => \n        new Date(contact.properties.createdate) >= currentMonth\n      ).length;\n\n      const qualifiedLeads = contacts.filter((contact: any) => \n        ['lead', 'marketingqualifiedlead', 'salesqualifiedlead'].includes(contact.properties.lifecyclestage)\n      ).length;\n\n      const customers = contacts.filter((contact: any) => \n        contact.properties.lifecyclestage === 'customer'\n      ).length;\n\n      // Process deals metrics\n      const deals = dealsData.results || [];\n      const openDeals = deals.filter((deal: any) => \n        !['closedwon', 'closedlost'].includes(deal.properties.dealstage)\n      );\n      \n      const closedWonDeals = deals.filter((deal: any) => \n        deal.properties.dealstage === 'closedwon'\n      );\n\n      const closedLostDeals = deals.filter((deal: any) => \n        deal.properties.dealstage === 'closedlost'\n      );\n\n      const totalDealValue = closedWonDeals.reduce((sum: number, deal: any) => \n        sum + (parseFloat(deal.properties.amount) || 0), 0\n      );\n\n      const averageDealSize = closedWonDeals.length > 0 ? totalDealValue / closedWonDeals.length : 0;\n\n      // Process companies metrics\n      const companies = companiesData.results || [];\n      const newCompaniesThisMonth = companies.filter((company: any) => \n        new Date(company.properties.createdate) >= currentMonth\n      ).length;\n\n      // Calculate conversion rate\n      const conversionRate = contacts.length > 0 ? (customers / contacts.length) * 100 : 0;\n\n      // Mock marketing data (would need additional API calls for real data)\n      const marketingMetrics = {\n        emailCampaigns: 12,\n        emailOpens: 1847,\n        emailClicks: 234,\n        emailOpenRate: 24.5,\n        emailClickRate: 3.2,\n        leadSources: [\n          { source: 'Organic Search', count: 45, percentage: 35.2 },\n          { source: 'Direct Traffic', count: 32, percentage: 25.0 },\n          { source: 'Social Media', count: 28, percentage: 21.9 },\n          { source: 'Email Marketing', count: 23, percentage: 18.0 }\n        ]\n      };\n\n      return {\n        contacts: {\n          total: contacts.length,\n          newThisMonth: newContactsThisMonth,\n          qualifiedLeads,\n          customers,\n          conversionRate: Math.round(conversionRate * 100) / 100\n        },\n        deals: {\n          total: deals.length,\n          openDeals: openDeals.length,\n          closedWon: closedWonDeals.length,\n          closedLost: closedLostDeals.length,\n          totalValue: Math.round(totalDealValue),\n          averageDealSize: Math.round(averageDealSize),\n          salesCycleLength: 45 // Mock data - would need calculation\n        },\n        companies: {\n          total: companies.length,\n          newThisMonth: newCompaniesThisMonth,\n          activeCustomers: customers\n        },\n        marketing: marketingMetrics,\n        sales: {\n          revenue: totalDealValue,\n          monthlyRecurringRevenue: totalDealValue * 0.1, // Mock calculation\n          customerLifetimeValue: averageDealSize * 3, // Mock calculation\n          churnRate: 5.2, // Mock data\n          salesVelocity: averageDealSize / 45 // Mock calculation\n        }\n      };\n\n    } catch (error) {\n      logger.error({ error }, 'Failed to fetch HubSpot CRM metrics');\n      throw error;\n    }\n  }\n\n  /**\n   * Get key metrics for business health dashboard\n   */\n  async getKeyMetrics(): Promise<Array<{\n    name: string;\n    value: string | number;\n    trend: 'up' | 'down' | 'stable';\n    unit?: string;\n  }>> {\n    const metrics = await this.getCRMMetrics();\n\n    return [\n      {\n        name: 'Total Contacts',\n        value: metrics.contacts.total.toLocaleString(),\n        trend: metrics.contacts.newThisMonth > 0 ? 'up' : 'stable',\n        unit: 'contacts'\n      },\n      {\n        name: 'Qualified Leads',\n        value: metrics.contacts.qualifiedLeads.toLocaleString(),\n        trend: 'up',\n        unit: 'leads'\n      },\n      {\n        name: 'Conversion Rate',\n        value: `${metrics.contacts.conversionRate}%`,\n        trend: metrics.contacts.conversionRate > 5 ? 'up' : 'down',\n        unit: '%'\n      },\n      {\n        name: 'Open Deals',\n        value: metrics.deals.openDeals.toLocaleString(),\n        trend: 'stable',\n        unit: 'deals'\n      },\n      {\n        name: 'Total Revenue',\n        value: `$${metrics.sales.revenue.toLocaleString()}`,\n        trend: 'up',\n        unit: 'USD'\n      },\n      {\n        name: 'Average Deal Size',\n        value: `$${metrics.deals.averageDealSize.toLocaleString()}`,\n        trend: 'stable',\n        unit: 'USD'\n      }\n    ];\n  }\n\n  /**\n   * Update business health KPIs\n   */\n  async updateBusinessHealthKPIs(): Promise<void> {\n    try {\n      const metrics = await this.getCRMMetrics();\n\n      const kpiMappings = {\n        'customer_acquisition_cost': metrics.sales.customerLifetimeValue * 0.3, // Mock calculation\n        'conversion_rate': metrics.contacts.conversionRate,\n        'customer_lifetime_value': metrics.sales.customerLifetimeValue,\n        'monthly_recurring_revenue': metrics.sales.monthlyRecurringRevenue,\n        'sales_cycle_length': metrics.deals.salesCycleLength,\n        'lead_velocity': metrics.contacts.newThisMonth\n      };\n\n      await supabase.functions.invoke('upsert_kpis', {\n        body: { kpis: kpiMappings }\n      });\n\n      logger.info('Updated business health KPIs from HubSpot data');\n    } catch (error) {\n      logger.error({ error }, 'Failed to update business health KPIs from HubSpot');\n      throw error;\n    }\n  }\n\n  /**\n   * Get contacts\n   */\n  async getContacts(limit = 100): Promise<HubSpotContact[]> {\n    const data = await this.apiRequest(`/crm/v3/objects/contacts?limit=${limit}&properties=email,firstname,lastname,company,phone,lifecyclestage,createdate,lastmodifieddate,hubspot_owner_id`);\n    return data.results || [];\n  }\n\n  /**\n   * Get deals\n   */\n  async getDeals(limit = 100): Promise<HubSpotDeal[]> {\n    const data = await this.apiRequest(`/crm/v3/objects/deals?limit=${limit}&properties=dealname,amount,dealstage,closedate,pipeline,createdate,hubspot_owner_id`);\n    return data.results || [];\n  }\n\n  /**\n   * Create a contact\n   */\n  async createContact(properties: Record<string, string>): Promise<HubSpotContact> {\n    const data = await this.apiRequest('/crm/v3/objects/contacts', {\n      method: 'POST',\n      body: JSON.stringify({ properties })\n    });\n    return data;\n  }\n\n  /**\n   * Create a deal\n   */\n  async createDeal(properties: Record<string, string>): Promise<HubSpotDeal> {\n    const response = await this.apiRequest('/crm/v3/objects/deals', {\n      method: 'POST',\n      body: JSON.stringify({ properties })\n    });\n    \n    return response;\n  }\n\n  /**\n   * Sync waitlist signup to HubSpot as a contact\n   */\n  async syncWaitlistSignup(waitlistData: {\n    email: string;\n    firstName: string;\n    company?: string;\n    tier?: string;\n    referralCode?: string;\n  }): Promise<{ success: boolean; contactId?: string; error?: string }> {\n    try {\n      const contactProperties = {\n        email: waitlistData.email,\n        firstname: waitlistData.firstName,\n        company: waitlistData.company || '',\n        lifecyclestage: 'lead',\n        lead_status: 'waitlist',\n        waitlist_tier: waitlistData.tier || 'early-bird',\n        referral_code: waitlistData.referralCode || '',\n        source: 'Nexus Waitlist'\n      };\n\n      const contact = await this.createContact(contactProperties);\n      \n      return {\n        success: true,\n        contactId: contact.id\n      };\n    } catch (error) {\n      logger.error({ error }, 'Failed to sync waitlist signup to HubSpot');\n      return {\n        success: false,\n        error: error instanceof Error ? error.message : 'Unknown error'\n      };\n    }\n  }\n}\n\n// Export singleton instance\nexport const hubspotService = new HubSpotService(); ","usedDeprecatedRules":[]},{"filePath":"/home/vonj/Github/Nexus/src/lib/services/ideasService.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/vonj/Github/Nexus/src/lib/services/learningFeedService.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/vonj/Github/Nexus/src/lib/services/linkedinService.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":178,"column":69,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":178,"endColumn":72,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[5004,5007],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[5004,5007],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\n * LinkedIn Integration Service\n * Provides company data enrichment and professional network insights\n */\n\ninterface LinkedInConfig {\n  clientId: string;\n  clientSecret: string;\n  redirectUri: string;\n  scopes: string[];\n}\n\ninterface LinkedInTokens {\n  access_token: string;\n  refresh_token: string;\n  expires_in: number;\n}\n\ninterface CompanyEnrichmentData {\n  name: string;\n  description: string;\n  industry: string;\n  size: string;\n  founded: string;\n  headquarters: string;\n  website: string;\n  specialties: string[];\n  employee_count: number;\n  followers_count: number;\n  logo_url: string;\n  social_profiles: {\n    linkedin: string;\n    twitter?: string;\n    facebook?: string;\n    instagram?: string;\n  };\n}\n\nclass LinkedInService {\n  private config: LinkedInConfig;\n  private baseUrl = 'https://api.linkedin.com/v2';\n  private authUrl = 'https://www.linkedin.com/oauth/v2';\n\n  constructor() {\n    this.config = {\n      clientId: import.meta.env.VITE_LINKEDIN_CLIENT_ID || '',\n      clientSecret: import.meta.env.VITE_LINKEDIN_CLIENT_SECRET || '',\n      redirectUri: import.meta.env.VITE_LINKEDIN_REDIRECT_URI || `${window.location.origin}/integrations/linkedin/callback`,\n      scopes: [\n        'r_liteprofile',\n        'r_emailaddress',\n        'r_organization_social',\n        'r_organization_admin',\n        'w_organization_social'\n      ]\n    };\n  }\n\n  /**\n   * Initiate OAuth 2.0 authorization flow\n   */\n  initiateAuth(): string {\n    const params = new URLSearchParams({\n      client_id: this.config.clientId,\n      response_type: 'code',\n      redirect_uri: this.config.redirectUri,\n      scope: this.config.scopes.join(' '),\n      state: this.generateState()\n    });\n\n    const authUrl = `${this.authUrl}/authorization?${params}`;\n    \n    // Store state for validation\n    sessionStorage.setItem('linkedin_oauth_state', params.get('state')!);\n    \n    return authUrl;\n  }\n\n  /**\n   * Handle OAuth callback and exchange code for tokens\n   */\n  async handleCallback(code: string, state: string): Promise<LinkedInTokens> {\n    // Validate state\n    const storedState = sessionStorage.getItem('linkedin_oauth_state');\n    if (state !== storedState) {\n      throw new Error('Invalid state parameter');\n    }\n\n    const tokenEndpoint = `${this.authUrl}/accessToken`;\n    \n    const params = new URLSearchParams({\n      client_id: this.config.clientId,\n      client_secret: this.config.clientSecret,\n      code,\n      redirect_uri: this.config.redirectUri,\n      grant_type: 'authorization_code'\n    });\n\n    const response = await fetch(tokenEndpoint, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/x-www-form-urlencoded'\n      },\n      body: params\n    });\n\n    if (!response.ok) {\n      const error = await response.json();\n      throw new Error(`Token exchange failed: ${error.error_description}`);\n    }\n\n    const tokens = await response.json() as LinkedInTokens;\n    \n    // Store tokens securely\n    this.storeTokens(tokens);\n    \n    // Clean up state\n    sessionStorage.removeItem('linkedin_oauth_state');\n    \n    return tokens;\n  }\n\n  /**\n   * Enrich company data using LinkedIn\n   */\n  async enrichCompanyData(domain: string): Promise<CompanyEnrichmentData> {\n    try {\n      // First try to find company by domain\n      const searchResponse = await this.makeAuthenticatedRequest(\n        `/organizationSearch?q=domain&domain=${domain}`\n      );\n\n      if (!searchResponse.elements?.length) {\n        throw new Error('Company not found on LinkedIn');\n      }\n\n      const companyId = searchResponse.elements[0].id;\n\n      // Get detailed company information\n      const companyData = await this.makeAuthenticatedRequest(\n        `/organizations/${companyId}?projection=(id,name,description,industry,specialties,staffCount,websiteUrl,logoUrl)`\n      );\n\n      // Get company social profiles\n      const socialData = await this.makeAuthenticatedRequest(\n        `/organizations/${companyId}/socialProfiles`\n      );\n\n      // Format the enriched data\n      return {\n        name: companyData.name,\n        description: companyData.description,\n        industry: companyData.industry,\n        size: this.mapEmployeeCount(companyData.staffCount),\n        founded: companyData.founded,\n        headquarters: companyData.headquarters,\n        website: companyData.websiteUrl,\n        specialties: companyData.specialties || [],\n        employee_count: companyData.staffCount,\n        followers_count: companyData.followersCount,\n        logo_url: companyData.logoUrl,\n        social_profiles: {\n          linkedin: `https://www.linkedin.com/company/${companyId}`,\n          twitter: socialData.twitter,\n          facebook: socialData.facebook,\n          instagram: socialData.instagram\n        }\n      };\n    } catch (error) {\n      console.error('LinkedIn company enrichment failed:', error);\n      throw error;\n    }\n  }\n\n  /**\n   * Make authenticated request to LinkedIn API\n   */\n  private async makeAuthenticatedRequest(endpoint: string): Promise<any> {\n    const tokens = this.getStoredTokens();\n    if (!tokens) {\n      throw new Error('No authentication tokens available');\n    }\n\n    // Check if token is expired and refresh if needed\n    const tokenData = JSON.parse(tokens);\n    if (this.isTokenExpired(tokenData)) {\n      await this.refreshTokens();\n    }\n\n    const response = await fetch(`${this.baseUrl}${endpoint}`, {\n      headers: {\n        'Authorization': `Bearer ${JSON.parse(this.getStoredTokens()!).access_token}`,\n        'Content-Type': 'application/json'\n      }\n    });\n\n    if (!response.ok) {\n      const error = await response.json();\n      throw new Error(`LinkedIn API error: ${error.error?.message || response.statusText}`);\n    }\n\n    return response.json();\n  }\n\n  /**\n   * Refresh expired tokens\n   */\n  private async refreshTokens(): Promise<void> {\n    const tokens = this.getStoredTokens();\n    if (!tokens) {\n      throw new Error('No refresh token available');\n    }\n\n    const tokenData = JSON.parse(tokens);\n    const tokenEndpoint = `${this.authUrl}/accessToken`;\n    \n    const params = new URLSearchParams({\n      client_id: this.config.clientId,\n      client_secret: this.config.clientSecret,\n      refresh_token: tokenData.refresh_token,\n      grant_type: 'refresh_token'\n    });\n\n    const response = await fetch(tokenEndpoint, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/x-www-form-urlencoded'\n      },\n      body: params\n    });\n\n    if (!response.ok) {\n      const error = await response.json();\n      throw new Error(`Token refresh failed: ${error.error_description}`);\n    }\n\n    const newTokens = await response.json();\n    this.storeTokens(newTokens);\n  }\n\n  /**\n   * Store tokens securely\n   */\n  private storeTokens(tokens: LinkedInTokens): void {\n    localStorage.setItem('linkedin_tokens', JSON.stringify(tokens));\n  }\n\n  /**\n   * Get stored tokens\n   */\n  private getStoredTokens(): string | null {\n    return localStorage.getItem('linkedin_tokens');\n  }\n\n  /**\n   * Check if token is expired\n   */\n  private isTokenExpired(tokenData: LinkedInTokens): boolean {\n    return Date.now() >= tokenData.expires_in * 1000;\n  }\n\n  /**\n   * Generate random state for OAuth\n   */\n  private generateState(): string {\n    return Math.random().toString(36).substring(2);\n  }\n\n  /**\n   * Map LinkedIn employee count to size category\n   */\n  private mapEmployeeCount(count: number): string {\n    if (count <= 10) return '1-10';\n    if (count <= 50) return '11-50';\n    if (count <= 200) return '51-200';\n    if (count <= 500) return '201-500';\n    if (count <= 1000) return '501-1000';\n    if (count <= 5000) return '1001-5000';\n    if (count <= 10000) return '5001-10000';\n    return '10000+';\n  }\n\n  /**\n   * Disconnect integration\n   */\n  async disconnect(): Promise<void> {\n    localStorage.removeItem('linkedin_tokens');\n    sessionStorage.removeItem('linkedin_oauth_state');\n  }\n}\n\nexport const linkedinService = new LinkedInService(); ","usedDeprecatedRules":[]},{"filePath":"/home/vonj/Github/Nexus/src/lib/services/marcobyCloudService.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":152,"column":116,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":152,"endColumn":119,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[4505,4508],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[4505,4508],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":193,"column":12,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":193,"endColumn":15,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[5820,5823],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[5820,5823],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":194,"column":18,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":194,"endColumn":21,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[5844,5847],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[5844,5847],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":195,"column":14,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":195,"endColumn":17,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[5864,5867],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[5864,5867],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'plansXml' is assigned a value but never used.","line":198,"column":14,"nodeType":null,"messageId":"unusedVar","endLine":198,"endColumn":22},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'datacentersXml' is assigned a value but never used.","line":198,"column":24,"nodeType":null,"messageId":"unusedVar","endLine":198,"endColumn":38},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'domainsXml' is assigned a value but never used.","line":198,"column":40,"nodeType":null,"messageId":"unusedVar","endLine":198,"endColumn":50},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'hostingData' is assigned a value but never used.","line":226,"column":13,"nodeType":null,"messageId":"unusedVar","endLine":226,"endColumn":24},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'metrics' is assigned a value but never used.","line":483,"column":11,"nodeType":null,"messageId":"unusedVar","endLine":483,"endColumn":18}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\n * Marcoby Cloud Service\n * Integrates with Marcoby Cloud infrastructure for monitoring, analytics, and optimization\n * Pillar: 1,2 - Automated infrastructure monitoring and business health assessment\n */\n\nimport { supabase } from '../core/supabase';\nimport { logger } from '../security/logger';\n\nexport interface MarcobyCloudConfig {\n  apiKey: string;\n  orgId: string;\n  endpoint: string;\n  // ResellersPanel API credentials for backend integration\n  rspUsername: string;\n  rspPassword: string;\n  rspApiUrl: string;\n}\n\nexport interface MarcobyCloudMetrics {\n  infrastructure: {\n    totalServers: number;\n    activeServers: number;\n    cpuUtilization: number;\n    memoryUtilization: number;\n    diskUtilization: number;\n    networkTraffic: number;\n    uptime: number;\n  };\n  costs: {\n    monthlySpend: number;\n    dailySpend: number;\n    costTrend: 'up' | 'down' | 'stable';\n    topCostDrivers: Array<{\n      service: string;\n      cost: number;\n      percentage: number;\n    }>;\n    optimizationSavings: number;\n  };\n  performance: {\n    responseTime: number;\n    throughput: number;\n    errorRate: number;\n    availability: number;\n    loadBalancerHealth: number;\n  };\n  security: {\n    vulnerabilities: number;\n    patchLevel: number;\n    securityScore: number;\n    lastSecurityScan: string;\n    criticalAlerts: number;\n  };\n  automation: {\n    automatedTasks: number;\n    totalTasks: number;\n    automationCoverage: number;\n    deploymentFrequency: number;\n    failureRate: number;\n  };\n  storage: {\n    totalStorage: number;\n    usedStorage: number;\n    storageUtilization: number;\n    backupStatus: string;\n    dataGrowthRate: number;\n  };\n}\n\nexport interface MarcobyCloudAlert {\n  id: string;\n  type: 'performance' | 'cost' | 'security' | 'infrastructure';\n  severity: 'low' | 'medium' | 'high' | 'critical';\n  title: string;\n  description: string;\n  timestamp: string;\n  resolved: boolean;\n  recommendations: string[];\n}\n\nexport class MarcobyCloudService {\n  private config: MarcobyCloudConfig | null = null;\n\n  async initialize(): Promise<boolean> {\n    try {\n      const { data: integration, error } = await supabase\n        .from('user_integrations')\n        .select('config, credentials')\n        .eq('integration_slug', 'marcoby-cloud')\n        .eq('status', 'active')\n        .maybeSingle();\n\n      if (error || !integration) {\n        logger.warn('Marcoby Cloud integration not found or inactive');\n        return false;\n      }\n\n      this.config = {\n        apiKey: integration.credentials?.api_key,\n        orgId: integration.config?.org_id,\n        endpoint: integration.config?.endpoint || 'https://api.marcoby.cloud',\n        rspUsername: integration.credentials?.rsp_username || '',\n        rspPassword: integration.credentials?.rsp_password || '',\n        rspApiUrl: integration.config?.rsp_api_url || 'https://cp.resellerspanel.com/api'\n      };\n\n      return true;\n    } catch (error) {\n      logger.error({ error }, 'Failed to initialize Marcoby Cloud service');\n      return false;\n    }\n  }\n\n  async testConnection(): Promise<{ success: boolean; message: string }> {\n    if (!this.config?.rspUsername || !this.config?.rspPassword) {\n      return { success: false, message: 'ResellersPanel credentials not configured' };\n    }\n\n    try {\n      // Test ResellersPanel API connection\n      const testUrl = `${this.config.rspApiUrl}/?auth_username=${encodeURIComponent(this.config.rspUsername)}&auth_password=${encodeURIComponent(this.config.rspPassword)}&section=datacenters&command=get_datacenters&return_type=xml`;\n      \n      const response = await fetch(testUrl);\n      \n      if (response.ok) {\n        const text = await response.text();\n        // Parse XML response to check for errors\n        if (text.includes('<error_code>0</error_code>')) {\n          return { \n            success: true, \n            message: 'Connected to Marcoby Cloud via ResellersPanel API' \n          };\n        } else {\n          return { success: false, message: 'Authentication failed' };\n        }\n      } else {\n        return { success: false, message: 'Connection failed' };\n      }\n    } catch (error) {\n      logger.error({ error }, 'Failed to test ResellersPanel connection');\n      return { \n        success: false, \n        message: 'Network error connecting to ResellersPanel API' \n      };\n    }\n  }\n\n  /**\n   * Call ResellersPanel API with authentication\n   */\n  private async callResellersPanel(section: string, command: string, params: Record<string, string> = {}): Promise<any> {\n    if (!this.config?.rspUsername || !this.config?.rspPassword) {\n      throw new Error('ResellersPanel credentials not configured');\n    }\n\n    const baseParams = {\n      auth_username: this.config.rspUsername,\n      auth_password: this.config.rspPassword,\n      section,\n      command,\n      return_type: 'xml'\n    };\n\n    const allParams = { ...baseParams, ...params };\n    const queryString = Object.entries(allParams)\n      .map(([key, value]) => `${encodeURIComponent(key)}=${encodeURIComponent(value)}`)\n      .join('&');\n\n    const response = await fetch(`${this.config.rspApiUrl}/?${queryString}`);\n    \n    if (!response.ok) {\n      throw new Error(`ResellersPanel API error: ${response.status}`);\n    }\n\n    const xmlText = await response.text();\n    \n    // Basic XML parsing - in production, use a proper XML parser\n    if (xmlText.includes('<error_code>0</error_code>')) {\n      return xmlText;\n    } else {\n      // Extract error message\n      const errorMatch = xmlText.match(/<error_msg>(.*?)<\\/error_msg>/);\n      const errorMessage = errorMatch ? errorMatch[1] : 'Unknown API error';\n      throw new Error(`ResellersPanel API error: ${errorMessage}`);\n    }\n  }\n\n  /**\n   * Get hosting plans and infrastructure data from ResellersPanel\n   */\n  async getHostingData(): Promise<{\n    plans: any[];\n    datacenters: any[];\n    domains: any[];\n  }> {\n    try {\n      const [plansXml, datacentersXml, domainsXml] = await Promise.all([\n        this.callResellersPanel('products', 'get_offered_plans'),\n        this.callResellersPanel('datacenters', 'get_datacenters'),\n        this.callResellersPanel('domains', 'info')\n      ]);\n\n      // In production, properly parse XML responses\n      return {\n        plans: [], // Parsed from plansXml\n        datacenters: [], // Parsed from datacentersXml  \n        domains: [] // Parsed from domainsXml\n      };\n    } catch (error) {\n      logger.error({ error }, 'Failed to fetch hosting data from ResellersPanel');\n      return { plans: [], datacenters: [], domains: [] };\n    }\n  }\n\n  /**\n   * Get comprehensive infrastructure metrics\n   */\n  async getInfrastructureMetrics(): Promise<MarcobyCloudMetrics> {\n    if (!this.config?.rspUsername) {\n      throw new Error('Marcoby Cloud not properly configured');\n    }\n\n    try {\n      // Fetch real hosting data from ResellersPanel\n      const hostingData = await this.getHostingData();\n      \n      // Combine real data with calculated metrics\n      // For demo purposes, return realistic mock data based on actual hosting data\n      return {\n        infrastructure: {\n          totalServers: 12,\n          activeServers: 11,\n          cpuUtilization: Math.round((Math.random() * 30 + 45) * 100) / 100, // 45-75%\n          memoryUtilization: Math.round((Math.random() * 25 + 60) * 100) / 100, // 60-85%\n          diskUtilization: Math.round((Math.random() * 20 + 40) * 100) / 100, // 40-60%\n          networkTraffic: Math.round((Math.random() * 500 + 200) * 100) / 100, // 200-700 Mbps\n          uptime: Math.round((Math.random() * 2 + 98) * 100) / 100 // 98-100%\n        },\n        costs: {\n          monthlySpend: 2847.50,\n          dailySpend: 94.92,\n          costTrend: 'stable',\n          topCostDrivers: [\n            { service: 'Compute Instances', cost: 1250.00, percentage: 43.9 },\n            { service: 'Storage', cost: 687.50, percentage: 24.1 },\n            { service: 'Network', cost: 425.00, percentage: 14.9 },\n            { service: 'Database', cost: 285.00, percentage: 10.0 },\n            { service: 'Load Balancers', cost: 200.00, percentage: 7.0 }\n          ],\n          optimizationSavings: 342.75\n        },\n        performance: {\n          responseTime: Math.round((Math.random() * 100 + 50) * 100) / 100, // 50-150ms\n          throughput: Math.round((Math.random() * 2000 + 1000) * 100) / 100, // 1000-3000 req/s\n          errorRate: Math.round((Math.random() * 2) * 100) / 100, // 0-2%\n          availability: Math.round((Math.random() * 2 + 98) * 100) / 100, // 98-100%\n          loadBalancerHealth: Math.round((Math.random() * 10 + 90) * 100) / 100 // 90-100%\n        },\n        security: {\n          vulnerabilities: Math.floor(Math.random() * 5), // 0-5\n          patchLevel: Math.round((Math.random() * 10 + 90) * 100) / 100, // 90-100%\n          securityScore: Math.round((Math.random() * 15 + 85) * 100) / 100, // 85-100%\n          lastSecurityScan: new Date(Date.now() - Math.random() * 24 * 60 * 60 * 1000).toISOString(),\n          criticalAlerts: Math.floor(Math.random() * 3) // 0-2\n        },\n        automation: {\n          automatedTasks: 28,\n          totalTasks: 35,\n          automationCoverage: Math.round((28/35) * 100 * 100) / 100, // 80%\n          deploymentFrequency: Math.round((Math.random() * 10 + 15) * 100) / 100, // 15-25 per week\n          failureRate: Math.round((Math.random() * 3) * 100) / 100 // 0-3%\n        },\n        storage: {\n          totalStorage: 5120, // GB\n          usedStorage: Math.round((Math.random() * 2000 + 2500) * 100) / 100, // 2500-4500 GB\n          storageUtilization: Math.round((3200/5120) * 100 * 100) / 100, // ~62.5%\n          backupStatus: 'healthy',\n          dataGrowthRate: Math.round((Math.random() * 5 + 10) * 100) / 100 // 10-15% monthly\n        }\n      };\n\n    } catch (error) {\n      logger.error({ error }, 'Failed to fetch Marcoby Cloud metrics');\n      throw error;\n    }\n  }\n\n  /**\n   * Get active alerts and recommendations\n   */\n  async getAlerts(): Promise<MarcobyCloudAlert[]> {\n    const metrics = await this.getInfrastructureMetrics();\n    const alerts: MarcobyCloudAlert[] = [];\n\n    // Generate alerts based on metrics\n    if (metrics.costs.costTrend === 'up') {\n      alerts.push({\n        id: `cost-alert-${Date.now()}`,\n        type: 'cost',\n        severity: 'medium',\n        title: 'Cost Optimization Opportunity',\n        description: `Monthly spend has increased. ${metrics.costs.optimizationSavings} in potential savings identified.`,\n        timestamp: new Date().toISOString(),\n        resolved: false,\n        recommendations: [\n          'Right-size underutilized instances',\n          'Implement auto-scaling policies',\n          'Consider reserved instances for stable workloads'\n        ]\n      });\n    }\n\n    if (metrics.infrastructure.cpuUtilization > 80) {\n      alerts.push({\n        id: `performance-alert-${Date.now()}`,\n        type: 'performance',\n        severity: 'high',\n        title: 'High CPU Utilization',\n        description: `CPU utilization at ${metrics.infrastructure.cpuUtilization}% - consider scaling.`,\n        timestamp: new Date().toISOString(),\n        resolved: false,\n        recommendations: [\n          'Scale out compute instances',\n          'Optimize application performance',\n          'Implement load balancing'\n        ]\n      });\n    }\n\n    if (metrics.security.vulnerabilities > 2) {\n      alerts.push({\n        id: `security-alert-${Date.now()}`,\n        type: 'security',\n        severity: 'high',\n        title: 'Security Vulnerabilities Detected',\n        description: `${metrics.security.vulnerabilities} vulnerabilities require attention.`,\n        timestamp: new Date().toISOString(),\n        resolved: false,\n        recommendations: [\n          'Apply security patches immediately',\n          'Review access controls',\n          'Update security policies'\n        ]\n      });\n    }\n\n    return alerts;\n  }\n\n  /**\n   * Get key metrics for business health dashboard\n   */\n  async getKeyMetrics(): Promise<Array<{\n    name: string;\n    value: string | number;\n    trend: 'up' | 'down' | 'stable';\n    unit?: string;\n  }>> {\n    const metrics = await this.getInfrastructureMetrics();\n\n    return [\n      {\n        name: 'Infrastructure Uptime',\n        value: `${metrics.infrastructure.uptime}%`,\n        trend: metrics.infrastructure.uptime > 99.5 ? 'up' : 'down',\n        unit: '%'\n      },\n      {\n        name: 'Asset Utilization',\n        value: `${Math.round((metrics.infrastructure.cpuUtilization + metrics.infrastructure.memoryUtilization) / 2)}%`,\n        trend: 'stable',\n        unit: '%'\n      },\n      {\n        name: 'Automation Coverage',\n        value: `${metrics.automation.automationCoverage}%`,\n        trend: 'up',\n        unit: '%'\n      },\n      {\n        name: 'Monthly Cloud Cost',\n        value: `$${metrics.costs.monthlySpend.toLocaleString()}`,\n        trend: metrics.costs.costTrend,\n        unit: 'USD'\n      },\n      {\n        name: 'Security Score',\n        value: `${metrics.security.securityScore}%`,\n        trend: metrics.security.vulnerabilities === 0 ? 'up' : 'down',\n        unit: '%'\n      }\n    ];\n  }\n\n  /**\n   * Update business health KPIs with Marcoby Cloud data\n   */\n  async updateBusinessHealthKPIs(): Promise<void> {\n    try {\n      const metrics = await this.getInfrastructureMetrics();\n      \n      // Calculate asset utilization (average of CPU, memory, disk)\n      const assetUtilization = Math.round(\n        (metrics.infrastructure.cpuUtilization + \n         metrics.infrastructure.memoryUtilization + \n         metrics.infrastructure.diskUtilization) / 3\n      );\n\n      const snapshots = [\n        // Asset Utilization KPI\n        {\n          department_id: 'operations',\n          kpi_id: 'asset_utilization',\n          value: assetUtilization,\n          source: 'marcoby_cloud_api',\n          captured_at: new Date().toISOString(),\n          metadata: {\n            cpu: metrics.infrastructure.cpuUtilization,\n            memory: metrics.infrastructure.memoryUtilization,\n            disk: metrics.infrastructure.diskUtilization,\n            active_servers: metrics.infrastructure.activeServers,\n            total_servers: metrics.infrastructure.totalServers\n          }\n        },\n        // Service Uptime KPI (infrastructure perspective)\n        {\n          department_id: 'operations',\n          kpi_id: 'service_uptime',\n          value: metrics.infrastructure.uptime,\n          source: 'marcoby_cloud_api',\n          captured_at: new Date().toISOString(),\n          metadata: {\n            availability: metrics.performance.availability,\n            error_rate: metrics.performance.errorRate,\n            response_time: metrics.performance.responseTime\n          }\n        },\n        // Automation Coverage KPI\n        {\n          department_id: 'operations',\n          kpi_id: 'automation_coverage',\n          value: metrics.automation.automationCoverage,\n          source: 'marcoby_cloud_api',\n          captured_at: new Date().toISOString(),\n          metadata: {\n            automated_tasks: metrics.automation.automatedTasks,\n            total_tasks: metrics.automation.totalTasks,\n            deployment_frequency: metrics.automation.deploymentFrequency,\n            failure_rate: metrics.automation.failureRate\n          }\n        }\n      ];\n\n      // Update using the secure edge function\n      const { error } = await supabase.functions.invoke('upsert_kpis', {\n        body: { snapshots }\n      });\n\n      if (error) {\n        logger.error({ error }, 'Failed to update Marcoby Cloud KPIs');\n        throw error;\n      }\n\n      logger.info('Successfully updated business health KPIs with Marcoby Cloud data');\n\n    } catch (error) {\n      logger.error({ error }, 'Error updating Marcoby Cloud business health KPIs');\n      throw error;\n    }\n  }\n\n  /**\n   * Get cost optimization recommendations\n   */\n  async getCostOptimizations(): Promise<Array<{\n    title: string;\n    description: string;\n    potentialSavings: number;\n    effort: 'low' | 'medium' | 'high';\n    priority: 'low' | 'medium' | 'high';\n  }>> {\n    const metrics = await this.getInfrastructureMetrics();\n\n    return [\n      {\n        title: 'Right-size Compute Instances',\n        description: 'Several instances are running below 40% CPU utilization and can be downsized.',\n        potentialSavings: 187.50,\n        effort: 'low',\n        priority: 'high'\n      },\n      {\n        title: 'Implement Auto-scaling',\n        description: 'Enable auto-scaling to automatically adjust resources based on demand.',\n        potentialSavings: 95.25,\n        effort: 'medium',\n        priority: 'medium'\n      },\n      {\n        title: 'Storage Optimization',\n        description: 'Archive old data and compress storage to reduce costs.',\n        potentialSavings: 60.00,\n        effort: 'low',\n        priority: 'medium'\n      }\n    ];\n  }\n\n  /**\n   * Get infrastructure health summary\n   */\n  async getHealthSummary(): Promise<{\n    overall: 'excellent' | 'good' | 'fair' | 'poor';\n    score: number;\n    factors: Array<{\n      category: string;\n      score: number;\n      status: 'excellent' | 'good' | 'fair' | 'poor';\n    }>;\n  }> {\n    const metrics = await this.getInfrastructureMetrics();\n\n    const factors: Array<{\n      category: string;\n      score: number;\n      status: 'excellent' | 'good' | 'fair' | 'poor';\n    }> = [\n      {\n        category: 'Performance',\n        score: Math.round((100 - metrics.performance.errorRate * 10) * 100) / 100,\n        status: (metrics.performance.errorRate < 1 ? 'excellent' : \n                metrics.performance.errorRate < 2 ? 'good' : \n                metrics.performance.errorRate < 5 ? 'fair' : 'poor') as 'excellent' | 'good' | 'fair' | 'poor'\n      },\n      {\n        category: 'Security',\n        score: metrics.security.securityScore,\n        status: (metrics.security.securityScore > 95 ? 'excellent' :\n                metrics.security.securityScore > 85 ? 'good' :\n                metrics.security.securityScore > 70 ? 'fair' : 'poor') as 'excellent' | 'good' | 'fair' | 'poor'\n      },\n      {\n        category: 'Automation',\n        score: metrics.automation.automationCoverage,\n        status: (metrics.automation.automationCoverage > 90 ? 'excellent' :\n                metrics.automation.automationCoverage > 75 ? 'good' :\n                metrics.automation.automationCoverage > 60 ? 'fair' : 'poor') as 'excellent' | 'good' | 'fair' | 'poor'\n      },\n      {\n        category: 'Availability',\n        score: metrics.infrastructure.uptime,\n        status: (metrics.infrastructure.uptime > 99.9 ? 'excellent' :\n                metrics.infrastructure.uptime > 99.5 ? 'good' :\n                metrics.infrastructure.uptime > 99 ? 'fair' : 'poor') as 'excellent' | 'good' | 'fair' | 'poor'\n      }\n    ];\n\n    const overallScore = Math.round(factors.reduce((sum, f) => sum + f.score, 0) / factors.length);\n    const overall = overallScore > 95 ? 'excellent' :\n                   overallScore > 85 ? 'good' :\n                   overallScore > 70 ? 'fair' : 'poor' as const;\n\n    return {\n      overall,\n      score: overallScore,\n      factors\n    };\n  }\n}\n\nexport const marcobyCloudService = new MarcobyCloudService(); ","usedDeprecatedRules":[]},{"filePath":"/home/vonj/Github/Nexus/src/lib/services/microsoftGraphService.ts","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'IProvider' is defined but never used.","line":13,"column":15,"nodeType":null,"messageId":"unusedVar","endLine":13,"endColumn":24},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'IProviderAccount' is defined but never used.","line":13,"column":26,"nodeType":null,"messageId":"unusedVar","endLine":13,"endColumn":42}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\n * Microsoft Graph Service\n * Pillar: 2 - Minimum Lovable Feature Set\n * \n * Provides a unified interface for Microsoft Graph API operations\n * Handles authentication, token management, and API requests\n */\n\nimport { Providers, ProviderState, LoginType } from '@microsoft/mgt-element';\nimport { Msal2Provider } from '@microsoft/mgt-msal2-provider';\nimport { logger } from '@/lib/security/logger';\nimport { supabase } from '@/lib/core/supabase';\nimport type { IProvider, IProviderAccount } from '@microsoft/mgt-element';\nimport type { AccountInfo } from '@azure/msal-browser';\n\n// Types\nexport interface GraphEmail {\n  id: string;\n  subject: string;\n  bodyPreview: string;\n  from: {\n    emailAddress: {\n      name: string;\n      address: string;\n    }\n  };\n  receivedDateTime: string;\n  isRead: boolean;\n}\n\nexport interface GraphUser {\n  id: string;\n  displayName: string;\n  mail: string;\n  userPrincipalName: string;\n  jobTitle?: string;\n  businessPhones?: string[];\n  officeLocation?: string;\n}\n\nexport interface GraphCalendarEvent {\n    id: string;\n    subject: string;\n    webLink: string;\n    start: {\n        dateTime: string;\n        timeZone: string;\n    };\n    end: {\n        dateTime: string;\n        timeZone: string;\n    };\n    onlineMeeting?: {\n        joinUrl: string;\n    };\n}\n\nclass MicrosoftGraphService {\n  private initialized = false;\n  private providerStateChangeHandlers: Set<() => void> = new Set();\n\n  /**\n   * Initialize Microsoft Graph provider\n   */\n  public initialize(): boolean {\n    if (this.initialized) return true;\n    \n    try {\n      const clientId = import.meta.env.VITE_MICROSOFT_CLIENT_ID;\n      \n      if (!clientId) {\n        logger.error({}, 'Microsoft Graph initialization failed: VITE_MICROSOFT_CLIENT_ID not found');\n        return false;\n      }\n      \n      if (!Providers.globalProvider) {\n        Providers.globalProvider = new Msal2Provider({\n          clientId,\n          scopes: [\n            'User.Read',\n            'Mail.Read',\n            'Mail.ReadWrite',\n            'Mail.Send',\n            'Calendars.Read',\n            'Calendars.ReadWrite',\n            'People.Read',\n            'Files.Read.All',\n            'Sites.Read.All',\n            'offline_access'\n          ],\n          authority: 'https://login.microsoftonline.com/common',\n          redirectUri: `${window.location.origin.replace('127.0.0.1', 'localhost')}/microsoft365/callback`,\n          loginType: LoginType.Redirect\n        });\n\n        Providers.globalProvider.onStateChanged(() => {\n          this.providerStateChangeHandlers.forEach(handler => handler());\n        });\n        \n        logger.info({}, 'Microsoft Graph provider initialized successfully');\n      }\n      \n      this.initialized = true;\n      return true;\n    } catch (error) {\n      logger.error({ err: error }, 'Failed to initialize Microsoft Graph provider');\n      return false;\n    }\n  }\n\n  /**\n   * Check if user is connected to Microsoft Graph\n   */\n  public isConnected(): boolean {\n    this.initialize();\n    return Providers.globalProvider?.state === ProviderState.SignedIn;\n  }\n\n  /**\n   * Get the current provider state.\n   */\n  public getProviderState(): ProviderState {\n    this.initialize();\n    return Providers.globalProvider?.state || ProviderState.Loading;\n  }\n\n  /**\n   * Register a handler for provider state changes.\n   */\n  public onStateChange(handler: () => void): void {\n    this.providerStateChangeHandlers.add(handler);\n  }\n\n  /**\n   * Unregister a handler for provider state changes.\n   */\n  public removeStateChange(handler: () => void): void {\n    this.providerStateChangeHandlers.delete(handler);\n  }\n\n  /**\n   * Sign in to Microsoft Graph. MGT handles the redirect.\n   */\n  public async signIn(): Promise<void> {\n    try {\n      if (!this.initialize() || !Providers.globalProvider) {\n        throw new Error('Microsoft Graph provider not initialized.');\n      }\n      // Store current location to return after auth\n      sessionStorage.setItem('microsoft_auth_return_url', window.location.href);\n      if (Providers.globalProvider.login) {\n        await Providers.globalProvider.login();\n      }\n    } catch (error) {\n      logger.error({ err: error }, 'Microsoft Graph sign-in failed');\n      throw error;\n    }\n  }\n\n  /**\n   * Sign out from Microsoft Graph\n   */\n  public async signOut(): Promise<boolean> {\n    try {\n      if (!this.initialize() || !this.isConnected()) {\n        return true;\n      }\n      \n      const provider = Providers.globalProvider;\n      if (provider && provider.logout) {\n        await provider.logout();\n      }\n      \n      return true;\n    } catch (error) {\n      logger.error({ err: error }, 'Microsoft Graph sign-out failed');\n      throw error;\n    }\n  }\n\n  /**\n   * Get current user profile\n   */\n  public async getCurrentUser(): Promise<GraphUser | null> {\n    try {\n      if (!this.initialize() || !this.isConnected()) {\n        throw new Error('Not connected to Microsoft Graph');\n      }\n      \n      const response = await Providers.globalProvider?.graph.client.api('/me')\n        .select('id,displayName,mail,userPrincipalName,jobTitle,businessPhones,officeLocation')\n        .get();\n      \n      return response as GraphUser;\n    } catch (error) {\n      logger.error({ err: error }, 'Failed to get Microsoft Graph user profile');\n      throw error;\n    }\n  }\n\n  /**\n   * Get emails from inbox\n   */\n  public async getEmails(top = 10, skip = 0): Promise<GraphEmail[]> {\n    try {\n      if (!this.initialize() || !this.isConnected()) {\n        throw new Error('Not connected to Microsoft Graph');\n      }\n      \n      const response = await Providers.globalProvider?.graph.client.api('/me/messages')\n        .select('id,subject,bodyPreview,from,receivedDateTime,isRead')\n        .top(top)\n        .skip(skip)\n        .orderby('receivedDateTime desc')\n        .get();\n      \n      return response?.value || [];\n    } catch (error) {\n      logger.error({ err: error }, 'Failed to get Microsoft Graph emails');\n      throw error;\n    }\n  }\n\n  /**\n   * Get calendar events from a date range\n   */\n  public async getCalendarEvents(startDateTime: string, endDateTime: string): Promise<GraphCalendarEvent[]> {\n    try {\n      if (!this.initialize() || !this.isConnected()) {\n        throw new Error('Not connected to Microsoft Graph');\n      }\n\n      const response = await Providers.globalProvider?.graph.client\n        .api(`/me/calendarview?startdatetime=${startDateTime}&enddatetime=${endDateTime}`)\n        .select('id,subject,start,end,webLink,onlineMeeting')\n        .orderby('start/dateTime')\n        .get();\n\n      return response?.value || [];\n    } catch (error) {\n      logger.error({ err: error }, 'Failed to get Microsoft Graph calendar events');\n      throw error;\n    }\n  }\n\n  /**\n   * Save access token to Supabase for server-side operations\n   */\n  public async saveIntegrationToken(orgId: string): Promise<void> {\n    try {\n      if (!this.initialize() || !this.isConnected() || !Providers.globalProvider) {\n        throw new Error('Not connected to Microsoft Graph');\n      }\n\n      const { data: { user } } = await supabase.auth.getUser();\n      if (!user) {\n        throw new Error('User not authenticated');\n      }\n\n      const provider = Providers.globalProvider as Msal2Provider;\n      const account = provider.getActiveAccount() as unknown as AccountInfo;\n      if (!account) {\n        throw new Error('No active Microsoft account found.');\n      }\n\n      // This is a simplified way to get the token.\n      // In a real scenario, you would use MSAL's acquireTokenSilent.\n      // MGT's provider doesn't expose the raw tokens easily.\n      // For this reason, we will just store a marker that the user has connected.\n      const credentials = {\n        // Storing the account identifier is enough for our use case\n        homeAccountId: account.homeAccountId,\n        environment: account.environment,\n        tenantId: account.tenantId,\n        username: account.username,\n        localAccountId: account.localAccountId,\n      };\n\n      const { data: integration } = await supabase\n        .from('integrations')\n        .select('id')\n        .eq('slug', 'office-365')\n        .single();\n      \n      if (!integration) {\n        throw new Error('Microsoft 365 integration not found in integrations table.');\n      }\n\n      const integrationData = {\n        user_id: user.id,\n        company_id: orgId,\n        integration_id: integration.id,\n        credentials,\n        config: { graph_enabled: true },\n        status: 'active',\n        updated_at: new Date().toISOString(),\n      };\n\n      const { error } = await supabase\n        .from('user_integrations')\n        .upsert(integrationData);\n\n      if (error) {\n        logger.error({ err: error }, 'Failed to save Microsoft Graph integration token');\n        throw error;\n      }\n\n      logger.info({ orgId }, 'Successfully saved Microsoft Graph integration token');\n    } catch (error) {\n      logger.error({ err: error }, 'Error in saveIntegrationToken');\n      throw error;\n    }\n  }\n\n  /**\n   * Triggers the setup and initial sync of an Office 365 account.\n   */\n  public async setupAndSyncAccount(orgId: string): Promise<void> {\n    if (!this.isConnected()) {\n      throw new Error('Microsoft Graph service is not connected.');\n    }\n    if (!orgId) {\n      throw new Error('Organization ID is required to set up and sync account.');\n    }\n    try {\n      const { unifiedInboxService } = await import('./unifiedInboxService');\n      await unifiedInboxService.autoSetupOffice365Account(orgId);\n    } catch (error) {\n      logger.error({ err: error, orgId }, 'Failed to set up and sync Office 365 account');\n      throw error;\n    }\n  }\n}\n\nexport const microsoftGraphService = new MicrosoftGraphService();\nexport default microsoftGraphService; ","usedDeprecatedRules":[]},{"filePath":"/home/vonj/Github/Nexus/src/lib/services/microsoftTeamsService.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":379,"column":79,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":379,"endColumn":82,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[10524,10527],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[10524,10527],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'messages' is defined but never used.","line":523,"column":40,"nodeType":null,"messageId":"unusedVar","endLine":523,"endColumn":48},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":590,"column":69,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":590,"endColumn":72,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[17729,17732],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[17729,17732],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":674,"column":37,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":674,"endColumn":40,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[19944,19947],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[19944,19947],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":694,"column":86,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":694,"endColumn":89,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[20525,20528],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[20525,20528],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":702,"column":10,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":702,"endColumn":13,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[20885,20888],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[20885,20888],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\n * Microsoft Teams Integration Service\n * Provides comprehensive Teams analytics including messages, meetings, channels, and team activity\n * Complements Slack integration for complete communication intelligence\n */\n\ninterface TeamsConfig {\n  clientId: string;\n  clientSecret: string;\n  tenantId: string;\n  redirectUri: string;\n  scopes: string[];\n}\n\ninterface TeamsTokens {\n  access_token: string;\n  refresh_token: string;\n  expires_in: number;\n  token_type: string;\n  scope: string;\n}\n\ninterface TeamsUser {\n  id: string;\n  displayName: string;\n  mail: string;\n  jobTitle?: string;\n  officeLocation?: string;\n  mobilePhone?: string;\n  businessPhones: string[];\n}\n\ninterface TeamsChannel {\n  id: string;\n  displayName: string;\n  description?: string;\n  membershipType: 'standard' | 'private' | 'shared';\n  createdDateTime: string;\n  webUrl: string;\n}\n\ninterface TeamsMessage {\n  id: string;\n  messageType: 'message' | 'chatMessage' | 'systemEventMessage';\n  createdDateTime: string;\n  lastModifiedDateTime: string;\n  body: {\n    contentType: 'text' | 'html';\n    content: string;\n  };\n  from: {\n    user: TeamsUser;\n  };\n  reactions: Array<{\n    reactionType: string;\n    user: TeamsUser;\n    createdDateTime: string;\n  }>;\n  attachments: Array<{\n    id: string;\n    contentType: string;\n    name: string;\n    contentUrl: string;\n  }>;\n}\n\ninterface TeamsMeeting {\n  id: string;\n  subject: string;\n  startDateTime: string;\n  endDateTime: string;\n  organizer: TeamsUser;\n  attendees: Array<{\n    user: TeamsUser;\n    status: 'accepted' | 'declined' | 'tentative' | 'notResponded';\n  }>;\n  isOnlineMeeting: boolean;\n  onlineMeetingUrl?: string;\n  recordingStatus?: 'recorded' | 'notRecorded';\n}\n\ninterface TeamsAnalytics {\n  overview: {\n    totalTeams: number;\n    totalChannels: number;\n    totalMessages: number;\n    totalMeetings: number;\n    activeUsers: number;\n    averageResponseTime: number; // minutes\n    lastUpdated: string;\n  };\n  messageActivity: {\n    totalMessages: number;\n    messagesThisWeek: number;\n    messagesLastWeek: number;\n    averageMessagesPerDay: number;\n    peakActivityHours: string[];\n    topActiveUsers: Array<{\n      user: TeamsUser;\n      messageCount: number;\n      avgResponseTime: number;\n    }>;\n  };\n  channelActivity: {\n    channels: Array<{\n      channel: TeamsChannel;\n      messageCount: number;\n      uniqueUsers: number;\n      lastActivityDate: string;\n      activityLevel: 'high' | 'medium' | 'low';\n    }>;\n    mostActiveChannels: TeamsChannel[];\n    quietChannels: TeamsChannel[];\n  };\n  meetingInsights: {\n    totalMeetings: number;\n    meetingsThisWeek: number;\n    averageMeetingDuration: number; // minutes\n    attendanceRate: number; // percentage\n    recordedMeetings: number;\n    topMeetingOrganizers: Array<{\n      user: TeamsUser;\n      meetingCount: number;\n      averageDuration: number;\n    }>;\n  };\n  collaborationPatterns: {\n    crossTeamCollaboration: Array<{\n      teamA: string;\n      teamB: string;\n      interactionCount: number;\n      commonChannels: string[];\n    }>;\n    communicationPreferences: {\n      chatVsMeeting: {\n        chatMessages: number;\n        meetings: number;\n        preferredMedium: 'chat' | 'meetings' | 'balanced';\n      };\n      formalVsInformal: {\n        formalChannels: number;\n        informalChannels: number;\n        communicationStyle: 'formal' | 'informal' | 'mixed';\n      };\n    };\n  };\n}\n\ninterface TeamsIntegrationStatus {\n  connected: boolean;\n  lastSync: string | null;\n  syncStatus: 'idle' | 'syncing' | 'error';\n  errorMessage?: string;\n  dataPoints: {\n    teams: number;\n    channels: number;\n    messages: number;\n    meetings: number;\n  };\n}\n\nclass MicrosoftTeamsService {\n  private config: TeamsConfig;\n  private baseUrl = 'https://graph.microsoft.com/v1.0';\n  private authUrl = 'https://login.microsoftonline.com';\n\n  constructor() {\n    this.config = {\n      clientId: import.meta.env.VITE_MS_TEAMS_CLIENT_ID || '',\n      clientSecret: import.meta.env.VITE_MS_TEAMS_CLIENT_SECRET || '',\n      tenantId: import.meta.env.VITE_MS_TEAMS_TENANT_ID || '',\n      redirectUri: import.meta.env.VITE_MS_TEAMS_REDIRECT_URI || `${window.location.origin}/integrations/teams/callback`,\n      scopes: [\n        'https://graph.microsoft.com/Team.ReadBasic.All',\n        'https://graph.microsoft.com/Channel.ReadBasic.All',\n        'https://graph.microsoft.com/ChannelMessage.Read.All',\n        'https://graph.microsoft.com/Chat.Read',\n        'https://graph.microsoft.com/Calendars.Read',\n        'https://graph.microsoft.com/User.Read.All',\n        'https://graph.microsoft.com/Directory.Read.All'\n      ]\n    };\n  }\n\n  /**\n   * Initiate OAuth 2.0 authorization flow\n   */\n  initiateAuth(): string {\n    // Guard-rail: surface mis-configuration immediately in dev\n    if (!this.config.clientId || !this.config.tenantId) {\n      throw new Error(\n        'Microsoft Teams OAuth not configured – please set VITE_MS_TEAMS_CLIENT_ID and VITE_MS_TEAMS_TENANT_ID in your environment.'\n      );\n    }\n\n    const params = new URLSearchParams({\n      client_id: this.config.clientId,\n      response_type: 'code',\n      redirect_uri: this.config.redirectUri,\n      scope: this.config.scopes.join(' '),\n      response_mode: 'query',\n      state: this.generateState()\n    });\n\n    const authUrl = `${this.authUrl}/${this.config.tenantId}/oauth2/v2.0/authorize?${params}`;\n    \n    // Store state for validation\n    sessionStorage.setItem('teams_oauth_state', params.get('state')!);\n    \n    return authUrl;\n  }\n\n  /**\n   * Handle OAuth callback and exchange code for tokens\n   */\n  async handleCallback(code: string, state: string): Promise<TeamsTokens> {\n    // Validate state\n    const storedState = sessionStorage.getItem('teams_oauth_state');\n    if (state !== storedState) {\n      throw new Error('Invalid state parameter');\n    }\n\n    const tokenEndpoint = `${this.authUrl}/${this.config.tenantId}/oauth2/v2.0/token`;\n    \n    const params = new URLSearchParams({\n      client_id: this.config.clientId,\n      client_secret: this.config.clientSecret,\n      code,\n      redirect_uri: this.config.redirectUri,\n      grant_type: 'authorization_code'\n    });\n\n    const response = await fetch(tokenEndpoint, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/x-www-form-urlencoded'\n      },\n      body: params\n    });\n\n    if (!response.ok) {\n      const error = await response.json();\n      throw new Error(`Token exchange failed: ${error.error_description}`);\n    }\n\n    const tokens = await response.json() as TeamsTokens;\n    \n    // Store tokens securely (in production, use secure storage)\n    this.storeTokens(tokens);\n    \n    // Clean up state\n    sessionStorage.removeItem('teams_oauth_state');\n    \n    return tokens;\n  }\n\n  /**\n   * Get comprehensive Teams analytics\n   */\n  async getAnalytics(): Promise<TeamsAnalytics> {\n    try {\n      const [teams, users, messages, meetings] = await Promise.all([\n        this.getTeams(),\n        this.getUsers(),\n        this.getRecentMessages(),\n        this.getRecentMeetings()\n      ]);\n\n      return this.aggregateAnalytics(teams, users, messages, meetings);\n    } catch (error) {\n      console.error('Failed to get Teams analytics:', error);\n      throw error;\n    }\n  }\n\n  /**\n   * Get all teams in the organization\n   */\n  async getTeams(): Promise<TeamsChannel[]> {\n    const response = await this.makeAuthenticatedRequest('/teams');\n    return response.value || [];\n  }\n\n  /**\n   * Get team channels\n   */\n  async getTeamChannels(teamId: string): Promise<TeamsChannel[]> {\n    const response = await this.makeAuthenticatedRequest(`/teams/${teamId}/channels`);\n    return response.value || [];\n  }\n\n  /**\n   * Get recent messages from a channel\n   */\n  async getChannelMessages(teamId: string, channelId: string, limit = 50): Promise<TeamsMessage[]> {\n    const response = await this.makeAuthenticatedRequest(\n      `/teams/${teamId}/channels/${channelId}/messages?$top=${limit}&$orderby=createdDateTime desc`\n    );\n    return response.value || [];\n  }\n\n  /**\n   * Get recent messages across all accessible channels\n   */\n  private async getRecentMessages(): Promise<TeamsMessage[]> {\n    const teams = await this.getTeams();\n    const messages: TeamsMessage[] = [];\n    \n    for (const team of teams.slice(0, 5)) { // Limit to prevent rate limiting\n      try {\n        const channels = await this.getTeamChannels(team.id);\n        for (const channel of channels.slice(0, 3)) { // Top 3 channels per team\n          const channelMessages = await this.getChannelMessages(team.id, channel.id, 20);\n          messages.push(...channelMessages);\n        }\n      } catch (error) {\n        console.warn(`Failed to get messages for team ${team.id}:`, error);\n      }\n    }\n    \n    return messages.sort((a, b) => \n      new Date(b.createdDateTime).getTime() - new Date(a.createdDateTime).getTime()\n    );\n  }\n\n  /**\n   * Get organization users\n   */\n  async getUsers(): Promise<TeamsUser[]> {\n    const response = await this.makeAuthenticatedRequest('/users?$top=100');\n    return response.value || [];\n  }\n\n  /**\n   * Get recent meetings\n   */\n  private async getRecentMeetings(): Promise<TeamsMeeting[]> {\n    const users = await this.getUsers();\n    const meetings: TeamsMeeting[] = [];\n    \n    // Get meetings for a sample of users to avoid rate limits\n    for (const user of users.slice(0, 10)) {\n      try {\n        const userMeetings = await this.getUserMeetings(user.id);\n        meetings.push(...userMeetings);\n      } catch (error) {\n        console.warn(`Failed to get meetings for user ${user.id}:`, error);\n      }\n    }\n    \n    // Remove duplicates and sort by date\n    const uniqueMeetings = Array.from(\n      new Map(meetings.map(m => [m.id, m])).values()\n    ).sort((a, b) => \n      new Date(b.startDateTime).getTime() - new Date(a.startDateTime).getTime()\n    );\n    \n    return uniqueMeetings.slice(0, 100);\n  }\n\n  /**\n   * Get meetings for a specific user\n   */\n  async getUserMeetings(userId: string): Promise<TeamsMeeting[]> {\n    const endDate = new Date();\n    const startDate = new Date();\n    startDate.setDate(startDate.getDate() - 7); // Last 7 days\n    \n    const response = await this.makeAuthenticatedRequest(\n      `/users/${userId}/events?$filter=start/dateTime ge '${startDate.toISOString()}' and end/dateTime le '${endDate.toISOString()}'&$top=50`\n    );\n    \n    return response.value || [];\n  }\n\n  /**\n   * Test connection to Teams\n   */\n  async testConnection(): Promise<{ success: boolean; message: string; data?: any }> {\n    try {\n      const response = await this.makeAuthenticatedRequest('/me');\n      return {\n        success: true,\n        message: 'Successfully connected to Microsoft Teams',\n        data: {\n          user: response.displayName,\n          email: response.mail,\n          organization: response.companyName\n        }\n      };\n    } catch (error) {\n      return {\n        success: false,\n        message: `Connection failed: ${error instanceof Error ? error.message : 'Unknown error'}`\n      };\n    }\n  }\n\n  /**\n   * Get integration status\n   */\n  async getIntegrationStatus(): Promise<TeamsIntegrationStatus> {\n    const tokens = this.getStoredTokens();\n    \n    if (!tokens) {\n      return {\n        connected: false,\n        lastSync: null,\n        syncStatus: 'idle',\n        dataPoints: { teams: 0, channels: 0, messages: 0, meetings: 0 }\n      };\n    }\n\n    try {\n      const analytics = await this.getAnalytics();\n      return {\n        connected: true,\n        lastSync: new Date().toISOString(),\n        syncStatus: 'idle',\n        dataPoints: {\n          teams: analytics.overview.totalTeams,\n          channels: analytics.overview.totalChannels,\n          messages: analytics.overview.totalMessages,\n          meetings: analytics.overview.totalMeetings\n        }\n      };\n    } catch (error) {\n      return {\n        connected: false,\n        lastSync: null,\n        syncStatus: 'error',\n        errorMessage: error instanceof Error ? error.message : 'Unknown error',\n        dataPoints: { teams: 0, channels: 0, messages: 0, meetings: 0 }\n      };\n    }\n  }\n\n  /**\n   * Aggregate analytics from raw data\n   */\n  private aggregateAnalytics(\n    teams: TeamsChannel[], \n    users: TeamsUser[], \n    messages: TeamsMessage[], \n    meetings: TeamsMeeting[]\n  ): TeamsAnalytics {\n    const now = new Date();\n    const weekAgo = new Date(now.getTime() - 7 * 24 * 60 * 60 * 1000);\n    const twoWeeksAgo = new Date(now.getTime() - 14 * 24 * 60 * 60 * 1000);\n\n    const recentMessages = messages.filter(m => new Date(m.createdDateTime) > weekAgo);\n    const lastWeekMessages = messages.filter(m => {\n      const date = new Date(m.createdDateTime);\n      return date > twoWeeksAgo && date <= weekAgo;\n    });\n\n    const recentMeetings = meetings.filter(m => new Date(m.startDateTime) > weekAgo);\n\n    // Calculate response times (simplified)\n    const avgResponseTime = this.calculateAverageResponseTime(messages);\n\n    // Peak activity hours\n    const hourlyActivity = new Array(24).fill(0);\n    messages.forEach(m => {\n      const hour = new Date(m.createdDateTime).getHours();\n      hourlyActivity[hour]++;\n    });\n    const peakHours = hourlyActivity\n      .map((count, hour) => ({ hour, count }))\n      .sort((a, b) => b.count - a.count)\n      .slice(0, 3)\n      .map(h => `${h.hour}:00`);\n\n    return {\n      overview: {\n        totalTeams: teams.length,\n        totalChannels: teams.length * 3, // Estimated\n        totalMessages: messages.length,\n        totalMeetings: meetings.length,\n        activeUsers: users.length,\n        averageResponseTime: avgResponseTime,\n        lastUpdated: now.toISOString()\n      },\n      messageActivity: {\n        totalMessages: messages.length,\n        messagesThisWeek: recentMessages.length,\n        messagesLastWeek: lastWeekMessages.length,\n        averageMessagesPerDay: recentMessages.length / 7,\n        peakActivityHours: peakHours,\n        topActiveUsers: this.getTopActiveUsers(messages, users)\n      },\n      channelActivity: {\n        channels: [],\n        mostActiveChannels: teams.slice(0, 5),\n        quietChannels: []\n      },\n      meetingInsights: {\n        totalMeetings: meetings.length,\n        meetingsThisWeek: recentMeetings.length,\n        averageMeetingDuration: this.calculateAverageMeetingDuration(meetings),\n        attendanceRate: 0.85, // Placeholder\n        recordedMeetings: meetings.filter(m => m.recordingStatus === 'recorded').length,\n        topMeetingOrganizers: this.getTopMeetingOrganizers(meetings)\n      },\n      collaborationPatterns: {\n        crossTeamCollaboration: [],\n        communicationPreferences: {\n          chatVsMeeting: {\n            chatMessages: messages.length,\n            meetings: meetings.length,\n            preferredMedium: messages.length > meetings.length * 10 ? 'chat' : 'balanced'\n          },\n          formalVsInformal: {\n            formalChannels: Math.floor(teams.length * 0.3),\n            informalChannels: Math.floor(teams.length * 0.7),\n            communicationStyle: 'mixed'\n          }\n        }\n      }\n    };\n  }\n\n  private calculateAverageResponseTime(messages: TeamsMessage[]): number {\n    // Simplified calculation - in real implementation, would analyze conversation threads\n    return Math.floor(Math.random() * 30) + 15; // 15-45 minutes placeholder\n  }\n\n  private getTopActiveUsers(messages: TeamsMessage[], users: TeamsUser[]) {\n    const userActivity = new Map<string, number>();\n    messages.forEach(m => {\n      const userId = m.from.user.id;\n      userActivity.set(userId, (userActivity.get(userId) || 0) + 1);\n    });\n\n    return Array.from(userActivity.entries())\n      .sort((a, b) => b[1] - a[1])\n      .slice(0, 5)\n      .map(([userId, count]) => {\n        const user = users.find(u => u.id === userId);\n        return {\n          user: user || { id: userId, displayName: 'Unknown User', mail: '', businessPhones: [] },\n          messageCount: count,\n          avgResponseTime: Math.floor(Math.random() * 20) + 10\n        };\n      });\n  }\n\n  private calculateAverageMeetingDuration(meetings: TeamsMeeting[]): number {\n    if (meetings.length === 0) return 0;\n    \n    const totalDuration = meetings.reduce((sum, meeting) => {\n      const start = new Date(meeting.startDateTime);\n      const end = new Date(meeting.endDateTime);\n      return sum + (end.getTime() - start.getTime());\n    }, 0);\n    \n    return totalDuration / meetings.length / (1000 * 60); // Convert to minutes\n  }\n\n  private getTopMeetingOrganizers(meetings: TeamsMeeting[]) {\n    const organizerActivity = new Map<string, { count: number; totalDuration: number }>();\n    \n    meetings.forEach(meeting => {\n      const organizerId = meeting.organizer.id;\n      const duration = new Date(meeting.endDateTime).getTime() - new Date(meeting.startDateTime).getTime();\n      \n      const current = organizerActivity.get(organizerId) || { count: 0, totalDuration: 0 };\n      organizerActivity.set(organizerId, {\n        count: current.count + 1,\n        totalDuration: current.totalDuration + duration\n      });\n    });\n\n    return Array.from(organizerActivity.entries())\n      .sort((a, b) => b[1].count - a[1].count)\n      .slice(0, 5)\n      .map(([organizerId, stats]) => {\n        const organizer = meetings.find(m => m.organizer.id === organizerId)?.organizer;\n        return {\n          user: organizer || { id: organizerId, displayName: 'Unknown User', mail: '', businessPhones: [] },\n          meetingCount: stats.count,\n          averageDuration: stats.totalDuration / stats.count / (1000 * 60) // Convert to minutes\n        };\n      });\n  }\n\n  /**\n   * Make authenticated request to Microsoft Graph API\n   */\n  private async makeAuthenticatedRequest(endpoint: string): Promise<any> {\n    const tokens = this.getStoredTokens();\n    if (!tokens) {\n      throw new Error('No authentication tokens available');\n    }\n\n    // Check if token is expired and refresh if needed\n    const tokenData = JSON.parse(tokens);\n    if (this.isTokenExpired(tokenData)) {\n      await this.refreshTokens();\n    }\n\n    const response = await fetch(`${this.baseUrl}${endpoint}`, {\n      headers: {\n        'Authorization': `Bearer ${JSON.parse(this.getStoredTokens()!).access_token}`,\n        'Content-Type': 'application/json'\n      }\n    });\n\n    if (!response.ok) {\n      const error = await response.json();\n      throw new Error(`Microsoft Graph API error: ${error.error?.message || response.statusText}`);\n    }\n\n    return response.json();\n  }\n\n  /**\n   * Refresh expired tokens\n   */\n  private async refreshTokens(): Promise<void> {\n    const tokens = this.getStoredTokens();\n    if (!tokens) {\n      throw new Error('No refresh token available');\n    }\n\n    const tokenData = JSON.parse(tokens);\n    const tokenEndpoint = `${this.authUrl}/${this.config.tenantId}/oauth2/v2.0/token`;\n    \n    const params = new URLSearchParams({\n      client_id: this.config.clientId,\n      client_secret: this.config.clientSecret,\n      refresh_token: tokenData.refresh_token,\n      grant_type: 'refresh_token'\n    });\n\n    const response = await fetch(tokenEndpoint, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/x-www-form-urlencoded'\n      },\n      body: params\n    });\n\n    if (!response.ok) {\n      const error = await response.json();\n      throw new Error(`Token refresh failed: ${error.error_description}`);\n    }\n\n    const newTokens = await response.json();\n    this.storeTokens(newTokens);\n  }\n\n  /**\n   * Store tokens securely\n   */\n  private storeTokens(tokens: TeamsTokens): void {\n    const tokenData = {\n      ...tokens,\n      expires_at: Date.now() + (tokens.expires_in * 1000)\n    };\n    localStorage.setItem('teams_tokens', JSON.stringify(tokenData));\n  }\n\n  /**\n   * Get stored tokens\n   */\n  private getStoredTokens(): string | null {\n    return localStorage.getItem('teams_tokens');\n  }\n\n  /**\n   * Check if token is expired\n   */\n  private isTokenExpired(tokenData: any): boolean {\n    return Date.now() >= (tokenData.expires_at - 60000); // Refresh 1 minute before expiry\n  }\n\n  /**\n   * Generate secure state parameter\n   */\n  private generateState(): string {\n    return Math.random().toString(36).substring(2, 15) + \n           Math.random().toString(36).substring(2, 15);\n  }\n\n  /**\n   * Disconnect integration\n   */\n  async disconnect(): Promise<void> {\n    localStorage.removeItem('teams_tokens');\n    sessionStorage.removeItem('teams_oauth_state');\n  }\n\n  async getUpcomingEvents(start: Date = new Date(), daysAhead: number = 14): Promise<any[]> {\n    const end = new Date(start.getTime() + daysAhead * 24 * 60 * 60 * 1000);\n    const params = new URLSearchParams({\n      startDateTime: start.toISOString(),\n      endDateTime: end.toISOString(),\n      $select: 'subject,start,end,location,organizer,isOnlineMeeting,onlineMeetingUrl',\n      $orderby: 'start/DateTime asc',\n      $top: '50',\n    } as any);\n    try {\n      const res = await this.makeAuthenticatedRequest(`/me/calendarView?${params.toString()}`);\n      return res.value || [];\n    } catch (err) {\n      console.error('Failed to fetch calendar events:', err);\n      return [];\n    }\n  }\n\n  /** Check whether Teams OAuth tokens are present */\n  public isConnected(): boolean {\n    return !!this.getStoredTokens();\n  }\n}\n\nexport const microsoftTeamsService = new MicrosoftTeamsService();\nexport type { TeamsAnalytics, TeamsIntegrationStatus, TeamsMessage, TeamsMeeting, TeamsUser, TeamsChannel }; ","usedDeprecatedRules":[]},{"filePath":"/home/vonj/Github/Nexus/src/lib/services/modelService.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/vonj/Github/Nexus/src/lib/services/ninjaRmmService.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":76,"column":14,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":76,"endColumn":17,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2204,2207],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2204,2207],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":114,"column":12,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":114,"endColumn":15,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3161,3164],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3161,3164],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":166,"column":15,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":166,"endColumn":18,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[4526,4529],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[4526,4529],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { supabase } from '@/lib/core/supabase';\nimport { env } from '@/lib/core/environment';\n\nexport interface NinjaRmmConfig {\n  clientId: string;\n  clientSecret: string;\n  redirectUri: string;\n  scopes: string[];\n  region?: string;\n}\n\nexport interface NinjaRmmTokens {\n  access_token: string;\n  refresh_token?: string;\n  expires_in: number;\n  token_type: string;\n  scope: string;\n}\n\n// NinjaRMM region-specific base URLs\nconst REGION_URLS = {\n  'us': 'https://app.ninjarmm.com',\n  'eu': 'https://eu.ninjarmm.com',\n  'oc': 'https://oc.ninjarmm.com',\n  'ca': 'https://ca.ninjarmm.com'\n};\n\nexport class NinjaRmmService {\n  private config: NinjaRmmConfig;\n  private baseUrl: string;\n\n  constructor(region: string = 'us') {\n    this.baseUrl = REGION_URLS[region as keyof typeof REGION_URLS] || REGION_URLS.us;\n    \n    this.config = {\n      clientId: import.meta.env.VITE_NINJARMM_CLIENT_ID || '',\n      clientSecret: '', // Not needed on frontend\n      redirectUri: `${window.location.origin}/integrations/ninjarmm/callback`,\n      scopes: ['monitoring', 'management'],\n      region\n    };\n  }\n\n  getRedirectUri(): string {\n    return this.config.redirectUri;\n  }\n\n  /**\n   * Initiate OAuth flow - redirects user to NinjaRMM OAuth page\n   */\n  async initiateAuth(userId: string): Promise<string> {\n    if (!this.config.clientId) {\n      throw new Error('NinjaRMM Client ID not configured');\n    }\n\n    // Include region in state parameter for consistency with callback parsing\n    // Use pipe separator to avoid conflicts with UUID hyphens\n    const region = this.config.region || 'us';\n    const state = `${userId}|${Date.now()}|${region}`;\n    \n    const authUrl = new URL(`${this.baseUrl}/oauth/authorize`);\n    authUrl.searchParams.set('client_id', this.config.clientId);\n    authUrl.searchParams.set('response_type', 'code');\n    authUrl.searchParams.set('redirect_uri', this.config.redirectUri);\n    authUrl.searchParams.set('scope', this.config.scopes.join(' '));\n    authUrl.searchParams.set('state', state);\n\n    return authUrl.toString();\n  }\n\n  /**\n   * Get user's NinjaRMM integration status\n   */\n  async getIntegrationStatus(userId: string): Promise<{\n    isConnected: boolean;\n    config?: any;\n    lastSync?: string;\n  }> {\n    try {\n      const { data, error } = await supabase\n        .from('user_integrations')\n        .select(`\n          status,\n          config,\n          updated_at,\n          integrations!inner(slug)\n        `)\n        .eq('user_id', userId)\n        .eq('integrations.slug', 'ninjarmm')\n        .eq('status', 'active')\n        .maybeSingle(); // Use maybeSingle to avoid error when no record exists\n\n      if (error) {\n        console.error('Error checking integration status:', error);\n        return { isConnected: false };\n      }\n\n      return {\n        isConnected: !!data,\n        config: data?.config,\n        lastSync: data?.updated_at\n      };\n    } catch (error) {\n      console.error('Error in getIntegrationStatus:', error);\n      return { isConnected: false };\n    }\n  }\n\n  /**\n   * Test connection using stored tokens\n   */\n  async testConnection(userId: string): Promise<{\n    success: boolean;\n    data?: any;\n    error?: string;\n  }> {\n    try {\n      const status = await this.getIntegrationStatus(userId);\n      \n      if (!status.isConnected || !status.config?.access_token) {\n        return {\n          success: false,\n          error: 'No active NinjaRMM connection found'\n        };\n      }\n\n      // Test connection via Edge Function to avoid CORS\n      const response = await fetch(`${env.supabase.url}/functions/v1/ninjarmm-test-connection`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n          'Authorization': `Bearer ${(await supabase.auth.getSession()).data.session?.access_token}`\n        },\n        body: JSON.stringify({\n          userId,\n          accessToken: status.config.access_token\n        })\n      });\n\n      if (!response.ok) {\n        const errorData = await response.json();\n        return {\n          success: false,\n          error: errorData.error || 'Connection test failed'\n        };\n      }\n\n      const result = await response.json();\n      return {\n        success: true,\n        data: result.data\n      };\n    } catch (error) {\n      return {\n        success: false,\n        error: error instanceof Error ? error.message : 'Unknown error'\n      };\n    }\n  }\n\n  /**\n   * Get devices from NinjaRMM\n   */\n  async getDevices(userId: string): Promise<{\n    success: boolean;\n    devices?: any[];\n    error?: string;\n  }> {\n    try {\n      const status = await this.getIntegrationStatus(userId);\n      \n      if (!status.isConnected || !status.config?.access_token) {\n        return {\n          success: false,\n          error: 'No active NinjaRMM connection found'\n        };\n      }\n\n      // Get devices via Edge Function to avoid CORS\n      const response = await fetch(`${env.supabase.url}/functions/v1/ninjarmm-get-devices`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n          'Authorization': `Bearer ${(await supabase.auth.getSession()).data.session?.access_token}`\n        },\n        body: JSON.stringify({\n          userId,\n          accessToken: status.config.access_token\n        })\n      });\n\n      if (!response.ok) {\n        const errorData = await response.json();\n        return {\n          success: false,\n          error: errorData.error || 'Failed to fetch devices'\n        };\n      }\n\n      const result = await response.json();\n      return {\n        success: true,\n        devices: result.devices\n      };\n    } catch (error) {\n      return {\n        success: false,\n        error: error instanceof Error ? error.message : 'Unknown error'\n      };\n    }\n  }\n\n  /**\n   * Disconnect NinjaRMM integration\n   */\n  async disconnect(userId: string): Promise<{\n    success: boolean;\n    error?: string;\n  }> {\n    try {\n      // Get integration record\n      const { data: integrationData, error: fetchError } = await supabase\n        .from('user_integrations')\n        .select(`\n          id,\n          integrations!inner(slug)\n        `)\n        .eq('user_id', userId)\n        .eq('integrations.slug', 'ninjarmm')\n        .single();\n\n      if (fetchError || !integrationData) {\n        return {\n          success: false,\n          error: 'Integration not found'\n        };\n      }\n\n      // Delete the user integration\n      const { error: deleteError } = await supabase\n        .from('user_integrations')\n        .delete()\n        .eq('id', integrationData.id);\n\n      if (deleteError) {\n        return {\n          success: false,\n          error: 'Failed to disconnect integration'\n        };\n      }\n\n      return { success: true };\n    } catch (error) {\n      return {\n        success: false,\n        error: error instanceof Error ? error.message : 'Unknown error'\n      };\n    }\n  }\n}\n\nexport const ninjaRmmService = new NinjaRmmService(); ","usedDeprecatedRules":[]},{"filePath":"/home/vonj/Github/Nexus/src/lib/services/notificationsService.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":12,"column":29,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":12,"endColumn":32,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[348,351],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[348,351],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":94,"column":48,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":94,"endColumn":51,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2408,2411],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2408,2411],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { supabase } from '@/lib/core/supabase';\nimport { logger } from '@/lib/security/logger';\nimport type { RealtimeChannel } from '@supabase/supabase-js';\n\nexport interface Notification {\n  id: string;\n  user_id: string;\n  type: 'info' | 'warning' | 'alert';\n  message: string;\n  read: boolean;\n  created_at: string;\n  metadata?: Record<string, any>;\n}\n\nclass NotificationsService {\n  async getNotifications(limit: number = 10): Promise<Notification[]> {\n    try {\n      const { data: { user } } = await supabase.auth.getUser();\n      if (!user) {\n        throw new Error('User not authenticated');\n      }\n\n      const { data, error } = await supabase\n        .from('notifications')\n        .select('*')\n        .eq('user_id', user.id)\n        .order('created_at', { ascending: false })\n        .limit(limit);\n\n      if (error) {\n        throw error;\n      }\n\n      return data as Notification[];\n    } catch (error) {\n      logger.error({ err: error }, 'Failed to fetch notifications');\n      return [];\n    }\n  }\n\n  async markAsRead(notificationId: string): Promise<void> {\n    try {\n      const { error } = await supabase\n        .from('notifications')\n        .update({ read: true })\n        .eq('id', notificationId);\n\n      if (error) {\n        throw error;\n      }\n    } catch (error) {\n      logger.error({ err: error, notificationId }, 'Failed to mark notification as read');\n      throw error;\n    }\n  }\n\n  async markAllAsRead(): Promise<void> {\n    try {\n      const { data: { user } } = await supabase.auth.getUser();\n      if (!user) {\n        throw new Error('User not authenticated');\n      }\n\n      const { error } = await supabase\n        .from('notifications')\n        .update({ read: true })\n        .eq('user_id', user.id)\n        .eq('read', false);\n\n      if (error) {\n        throw error;\n      }\n    } catch (error) {\n      logger.error({ err: error }, 'Failed to mark all notifications as read');\n      throw error;\n    }\n  }\n\n  async createNotification(notification: Omit<Notification, 'id' | 'created_at' | 'read'>): Promise<void> {\n    try {\n      const { error } = await supabase\n        .from('notifications')\n        .insert([notification]);\n\n      if (error) {\n        throw error;\n      }\n    } catch (error) {\n      logger.error({ err: error, notification }, 'Failed to create notification');\n      throw error;\n    }\n  }\n\n  subscribeToNotifications(callback: (payload: any) => void): RealtimeChannel {\n    const channel = supabase.channel('notifications');\n    channel\n      .on('postgres_changes', { event: 'INSERT', schema: 'public', table: 'notifications' }, callback)\n      .subscribe();\n    return channel;\n  }\n\n  unsubscribeFromNotifications(channel: RealtimeChannel) {\n    supabase.removeChannel(channel);\n  }\n}\n\nexport const notificationsService = new NotificationsService(); ","usedDeprecatedRules":[]},{"filePath":"/home/vonj/Github/Nexus/src/lib/services/oneDriveService.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":24,"column":49,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":24,"endColumn":52,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[616,619],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[616,619],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":346,"column":65,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":346,"endColumn":68,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[11163,11166],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[11163,11166],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":357,"column":48,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":357,"endColumn":51,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[11757,11760],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[11757,11760],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":358,"column":39,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":358,"endColumn":42,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[11820,11823],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[11820,11823],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":359,"column":71,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":359,"endColumn":74,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[11931,11934],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[11931,11934],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\n * OneDrive/SharePoint Service for Document RAG Integration\n * Syncs documents from OneDrive and SharePoint for intelligent retrieval and business context\n */\n\nimport { logger } from '@/lib/security/logger';\n\ninterface OneDriveConfig {\n  accessToken: string;\n  refreshToken: string;\n  tenantId?: string;\n  siteId?: string; // For SharePoint integration\n  driveId?: string; // Specific drive to sync\n}\n\ninterface Microsoft365Credentials {\n  access_token: string;\n  refresh_token: string;\n  tenant_id?: string;\n  sharepoint_site_id?: string;\n  drive_id?: string;\n}\n\nfunction isMicrosoft365Credentials(credentials: any): credentials is Microsoft365Credentials {\n  return credentials && typeof credentials.access_token === 'string' && typeof credentials.refresh_token === 'string';\n}\n\ninterface OneDriveItem {\n  id: string;\n  name: string;\n  file?: {\n    mimeType: string;\n  };\n  folder?: object;\n  lastModifiedDateTime: string;\n  webUrl: string;\n  size: number;\n  parentReference?: {\n    path: string;\n  };\n  createdBy?: {\n    user?: {\n      displayName: string;\n    };\n  };\n  lastModifiedBy?: {\n    user?: {\n      displayName: string;\n    };\n  };\n}\n\ninterface OneDriveDocument {\n  id: string;\n  name: string;\n  mimeType: string;\n  content: string;\n  lastModifiedDateTime: string;\n  webUrl: string;\n  size: number;\n  parentPath: string;\n  metadata: {\n    createdBy: string;\n    lastModifiedBy: string;\n    folder: string;\n    sharePoint?: {\n      siteName: string;\n      libraryName: string;\n    };\n  };\n}\n\nexport class OneDriveService {\n  private config: OneDriveConfig | null = null;\n  private baseUrl = 'https://graph.microsoft.com/v1.0';\n  private isAuthenticated = false;\n\n  /**\n   * Initialize service with stored credentials\n   */\n  async initialize(): Promise<boolean> {\n    try {\n      const { data: { user } } = await import('@/lib/supabase').then(m => m.supabase.auth.getUser());\n      if (!user) return false;\n\n      const { data: integration } = await import('@/lib/supabase').then(m => m.supabase\n        .from('user_integrations')\n        .select('credentials')\n        .eq('user_id', user.id)\n        .eq('integration_name', 'microsoft-365')\n        .single()\n      );\n\n      if (integration?.credentials && isMicrosoft365Credentials(integration.credentials)) {\n        this.config = {\n          accessToken: integration.credentials.access_token,\n          refreshToken: integration.credentials.refresh_token,\n          tenantId: integration.credentials.tenant_id,\n          siteId: integration.credentials.sharepoint_site_id,\n          driveId: integration.credentials.drive_id\n        };\n        this.isAuthenticated = true;\n        return true;\n      }\n      return false;\n    } catch (error) {\n      logger.error({ err: error }, 'Failed to initialize OneDrive service');\n      return false;\n    }\n  }\n\n  /**\n   * Sync documents from OneDrive/SharePoint for RAG processing\n   */\n  async syncDocumentsForRAG(): Promise<{\n    processed: number;\n    errors: string[];\n    newDocuments: OneDriveDocument[];\n  }> {\n    if (!this.isAuthenticated || !this.config) {\n      throw new Error('OneDrive service not authenticated');\n    }\n\n    const results = {\n      processed: 0,\n      errors: [] as string[],\n      newDocuments: [] as OneDriveDocument[]\n    };\n\n    try {\n      // Get documents from OneDrive\n      const oneDriveDocs = await this.getOneDriveDocuments();\n      \n      // Get documents from SharePoint (if configured)\n      const sharePointDocs = this.config.siteId ? \n        await this.getSharePointDocuments() : [];\n\n      const allDocuments = [...oneDriveDocs, ...sharePointDocs];\n      \n      for (const doc of allDocuments) {\n        try {\n          // Check if document already processed\n          const isNew = await this.isNewDocument(doc.id, doc.lastModifiedDateTime);\n          \n          if (isNew) {\n            // Download and process document content\n            const content = await this.extractDocumentContent(doc);\n            \n            if (content.trim()) {\n              // Prepare document for RAG storage\n              const ragDocument = {\n                ...doc,\n                content,\n                source: 'onedrive',\n                processedAt: new Date().toISOString()\n              };\n\n              // Store in RAG system\n              await this.storeDocumentForRAG(ragDocument);\n              results.newDocuments.push(ragDocument);\n              results.processed++;\n            }\n          }\n        } catch (error) {\n          const errorMessage = error instanceof Error ? error.message : String(error);\n          results.errors.push(`Failed to process ${doc.name}: ${errorMessage}`);\n        }\n      }\n\n      return results;\n    } catch (error) {\n      const errorMessage = error instanceof Error ? error.message : String(error);\n      throw new Error(`Document sync failed: ${errorMessage}`);\n    }\n  }\n\n  /**\n   * Get documents from OneDrive\n   */\n  private async getOneDriveDocuments(): Promise<Omit<OneDriveDocument, 'content'>[]> {\n    const documents: Omit<OneDriveDocument, 'content'>[] = [];\n    \n    try {\n      const driveEndpoint = this.config?.driveId ? \n        `/drives/${this.config.driveId}` : \n        '/me/drive';\n\n      const url = `${this.baseUrl}${driveEndpoint}/root/search(q='${this.buildSearchQuery()}')`;\n      \n      const response = await this.authenticatedRequest(url);\n      const data = await response.json();\n\n      if (data.value) {\n        documents.push(...data.value\n          .filter((item: OneDriveItem) => !item.folder && this.isSupportedFileType(item.name))\n          .map((item: OneDriveItem) => this.mapOneDriveItem(item, 'OneDrive'))\n        );\n      }\n\n      return documents;\n    } catch (error) {\n      logger.error({ err: error }, 'Failed to get OneDrive documents');\n      return [];\n    }\n  }\n\n  /**\n   * Get documents from SharePoint\n   */\n  private async getSharePointDocuments(): Promise<Omit<OneDriveDocument, 'content'>[]> {\n    if (!this.config?.siteId) return [];\n\n    const documents: Omit<OneDriveDocument, 'content'>[] = [];\n    \n    try {\n      // Get document libraries\n      const librariesUrl = `${this.baseUrl}/sites/${this.config.siteId}/drives`;\n      const librariesResponse = await this.authenticatedRequest(librariesUrl);\n      const librariesData = await librariesResponse.json();\n\n      for (const library of librariesData.value || []) {\n        try {\n          const searchUrl = `${this.baseUrl}/drives/${library.id}/root/search(q='${this.buildSearchQuery()}')`;\n          const response = await this.authenticatedRequest(searchUrl);\n          const data = await response.json();\n\n          if (data.value) {\n            documents.push(...data.value\n              .filter((item: OneDriveItem) => !item.folder && this.isSupportedFileType(item.name))\n              .map((item: OneDriveItem) => this.mapOneDriveItem(item, 'SharePoint', {\n                siteName: library.name,\n                libraryName: library.name\n              }))\n            );\n          }\n        } catch (error) {\n          logger.error({ err: error, libraryName: library.name }, `Failed to get documents from library ${library.name}`);\n        }\n      }\n\n      return documents;\n    } catch (error) {\n      logger.error({ err: error }, 'Failed to get SharePoint documents');\n      return [];\n    }\n  }\n\n  /**\n   * Build search query for supported file types\n   */\n  private buildSearchQuery(): string {\n    const extensions = [\n      'docx', 'doc', 'xlsx', 'xls', 'pptx', 'ppt', \n      'pdf', 'txt', 'md', 'csv'\n    ];\n    return extensions.map(ext => `*.${ext}`).join(' OR ');\n  }\n\n  /**\n   * Check if file type is supported for content extraction\n   */\n  private isSupportedFileType(fileName: string): boolean {\n    const supportedExtensions = [\n      '.docx', '.doc', '.xlsx', '.xls', '.pptx', '.ppt',\n      '.pdf', '.txt', '.md', '.csv'\n    ];\n    return supportedExtensions.some(ext => fileName.toLowerCase().endsWith(ext));\n  }\n\n  /**\n   * Map OneDrive/SharePoint item to our document format\n   */\n  private mapOneDriveItem(\n    item: OneDriveItem, \n    source: 'OneDrive' | 'SharePoint',\n    sharePointInfo?: { siteName: string; libraryName: string }\n  ): Omit<OneDriveDocument, 'content'> {\n    return {\n      id: item.id,\n      name: item.name,\n      mimeType: item.file?.mimeType || 'application/octet-stream',\n      lastModifiedDateTime: item.lastModifiedDateTime,\n      webUrl: item.webUrl,\n      size: item.size || 0,\n      parentPath: item.parentReference?.path || '',\n      metadata: {\n        createdBy: item.createdBy?.user?.displayName || 'Unknown',\n        lastModifiedBy: item.lastModifiedBy?.user?.displayName || 'Unknown',\n        folder: this.extractFolderName(item.parentReference?.path),\n        ...(sharePointInfo && { sharePoint: sharePointInfo })\n      }\n    };\n  }\n\n  /**\n   * Extract document content based on file type\n   */\n  private async extractDocumentContent(doc: Omit<OneDriveDocument, 'content'>): Promise<string> {\n    try {\n      let content = '';\n      const fileExtension = doc.name.toLowerCase().split('.').pop();\n\n      if (['docx', 'xlsx', 'pptx'].includes(fileExtension || '')) {\n        // Office documents - use Microsoft Graph API to get content\n        content = await this.extractOfficeContent(doc);\n      } else if (['txt', 'md', 'csv'].includes(fileExtension || '')) {\n        // Plain text files\n        content = await this.extractTextContent(doc);\n      } else if (fileExtension === 'pdf') {\n        // PDF files - metadata only for now\n        content = `PDF Document: ${doc.name}\\nSize: ${doc.size} bytes\\nLocation: ${doc.webUrl}`;\n      }\n\n      // Add document metadata to content for better context\n      const documentContext = this.buildDocumentContext(doc);\n      return `${documentContext}\\n\\n${content}`.trim();\n\n    } catch (error) {\n      const errorMessage = error instanceof Error ? error.message : String(error);\n      logger.error({ err: error, docName: doc.name }, `Failed to extract content from ${doc.name}`);\n      return `Document: ${doc.name}\\nType: ${this.getDocumentTypeLabel(doc.name)}\\nLocation: ${doc.webUrl}\\nNote: Content extraction failed: ${errorMessage}`;\n    }\n  }\n\n  /**\n   * Extract content from Office documents using Microsoft Graph\n   */\n  private async extractOfficeContent(doc: Omit<OneDriveDocument, 'content'>): Promise<string> {\n    try {\n      // Use Microsoft Graph to get document content\n      const driveEndpoint = this.config?.driveId ? \n        `/drives/${this.config.driveId}` : \n        '/me/drive';\n\n      const url = `${this.baseUrl}${driveEndpoint}/items/${doc.id}/content`;\n      const response = await this.authenticatedRequest(url);\n\n      if (doc.name.toLowerCase().endsWith('.xlsx')) {\n        // For Excel files, get workbook info\n        const workbookUrl = `${this.baseUrl}${driveEndpoint}/items/${doc.id}/workbook/worksheets`;\n        const workbookResponse = await this.authenticatedRequest(workbookUrl);\n        const workbookData = await workbookResponse.json();\n        \n        let content = `Spreadsheet: ${doc.name}\\n\\n`;\n        if (workbookData.value) {\n          content += `Worksheets: ${workbookData.value.map((ws: any) => ws.name).join(', ')}\\n\\n`;\n          \n          // Get sample data from first worksheet\n          if (workbookData.value[0]) {\n            const rangeUrl = `${this.baseUrl}${driveEndpoint}/items/${doc.id}/workbook/worksheets('${workbookData.value[0].name}')/range(address='A1:J10')`;\n            try {\n              const rangeResponse = await this.authenticatedRequest(rangeUrl);\n              const rangeData = await rangeResponse.json();\n              \n              if (rangeData.values) {\n                content += 'Sample Data:\\n';\n                rangeData.values.forEach((row: any, index: number) => {\n                  if (row.some((cell: any) => cell !== null && cell !== '')) {\n                    content += `Row ${index + 1}: ${row.filter((cell: any) => cell !== null && cell !== '').join(' | ')}\\n`;\n                  }\n                });\n              }\n            } catch (error) {\n              console.error('Failed to get range data:', error);\n            }\n          }\n        }\n        return content;\n      } else {\n        // For Word and PowerPoint, try to get text content\n        // This is a simplified approach - in production, you'd want more sophisticated extraction\n        const blob = await response.blob();\n        return `Document: ${doc.name}\\nSize: ${blob.size} bytes\\nContent extraction available via Microsoft Graph API`;\n      }\n    } catch (error) {\n      const errorMessage = error instanceof Error ? error.message : String(error);\n      logger.error({ err: error, docName: doc.name }, `Failed to extract Office content from ${doc.name}`);\n      return `Office Document: ${doc.name}\\nContent extraction failed: ${errorMessage}`;\n    }\n  }\n\n  /**\n   * Extract content from text files\n   */\n  private async extractTextContent(doc: Omit<OneDriveDocument, 'content'>): Promise<string> {\n    try {\n      const response = await this.authenticatedRequest(doc.webUrl);\n      return await response.text();\n    } catch (error) {\n      const errorMessage = error instanceof Error ? error.message : String(error);\n      logger.error({ err: error, docName: doc.name }, `Failed to extract text content from ${doc.name}`);\n      return `Text file: ${doc.name}\\nContent extraction failed: ${errorMessage}`;\n    }\n  }\n\n  /**\n   * Build document context for RAG\n   */\n  private buildDocumentContext(doc: Omit<OneDriveDocument, 'content'>): string {\n    let context = `[DOCUMENT METADATA]\nTitle: ${doc.name}\nType: ${this.getDocumentTypeLabel(doc.name)}\nLast Modified: ${new Date(doc.lastModifiedDateTime).toLocaleDateString()}\nModified By: ${doc.metadata.lastModifiedBy}\nFolder: ${doc.metadata.folder}\nLink: ${doc.webUrl}`;\n\n    if (doc.metadata.sharePoint) {\n      context += `\\nSharePoint Site: ${doc.metadata.sharePoint.siteName}\nLibrary: ${doc.metadata.sharePoint.libraryName}`;\n    }\n\n    context += '\\n[END METADATA]';\n    return context;\n  }\n\n  /**\n   * Get human-readable document type label\n   */\n  private getDocumentTypeLabel(fileName: string): string {\n    const extension = fileName.toLowerCase().split('.').pop();\n    const typeMap: Record<string, string> = {\n      'docx': 'Word Document',\n      'doc': 'Word Document (Legacy)',\n      'xlsx': 'Excel Spreadsheet',\n      'xls': 'Excel Spreadsheet (Legacy)',\n      'pptx': 'PowerPoint Presentation',\n      'ppt': 'PowerPoint Presentation (Legacy)',\n      'pdf': 'PDF Document',\n      'txt': 'Text File',\n      'md': 'Markdown File',\n      'csv': 'CSV Spreadsheet'\n    };\n    return typeMap[extension || ''] || 'Document';\n  }\n\n  /**\n   * Extract folder name from path\n   */\n  private extractFolderName(path?: string): string {\n    if (!path) return 'Root';\n    const parts = path.split('/');\n    return parts[parts.length - 1] || 'Root';\n  }\n\n  /**\n   * Check if document is new or updated since last sync\n   */\n  private async isNewDocument(documentId: string, lastModifiedDateTime: string): Promise<boolean> {\n    try {\n      const { data } = await import('@/lib/supabase').then(m => m.supabase\n        .from('ai_vector_documents')\n        .select('metadata')\n        .eq('document_id', `onedrive-${documentId}`)\n        .single()\n      );\n\n      if (!data) return true; // New document\n\n      const lastSync = data.metadata?.lastModified;\n      return !lastSync || new Date(lastModifiedDateTime) > new Date(lastSync);\n    } catch {\n      return true; // Assume new if check fails\n    }\n  }\n\n  /**\n   * Store document in RAG system\n   */\n  private async storeDocumentForRAG(document: OneDriveDocument): Promise<void> {\n    try {\n      // Call the embed document edge function\n      const response = await fetch('/api/ai/embed-document', {\n        method: 'POST',\n        headers: { 'Content-Type': 'application/json' },\n        body: JSON.stringify({\n          documentId: `onedrive-${document.id}`,\n          content: document.content,\n          metadata: {\n            source: 'onedrive',\n            fileName: document.name,\n            fileType: document.mimeType,\n            lastModified: document.lastModifiedDateTime,\n            webUrl: document.webUrl,\n            folder: document.metadata.folder,\n            size: document.size,\n            sharePoint: document.metadata.sharePoint,\n            processedAt: new Date().toISOString()\n          }\n        })\n      });\n\n      if (!response.ok) {\n        const errorBody = await response.text();\n        throw new Error(`Failed to store document: ${response.statusText} - ${errorBody}`);\n      }\n    } catch (error) {\n      const errorMessage = error instanceof Error ? error.message : String(error);\n      logger.error({ err: error, documentId: document.id }, 'Error storing document for RAG in Supabase');\n      throw new Error(`Failed to store document ${document.id} for RAG: ${errorMessage}`);\n    }\n  }\n\n  /**\n   * Make authenticated request to Microsoft Graph API\n   */\n  private async authenticatedRequest(url: string, options: RequestInit = {}): Promise<Response> {\n    if (!this.config?.accessToken) {\n      throw new Error('No access token available');\n    }\n\n    const response = await fetch(url, {\n      ...options,\n      headers: {\n        'Authorization': `Bearer ${this.config.accessToken}`,\n        'Content-Type': 'application/json',\n        ...options.headers\n      }\n    });\n\n    if (response.status === 401) {\n      // Token expired, try to refresh\n      await this.refreshAccessToken();\n      \n      // Retry request with new token\n      return fetch(url, {\n        ...options,\n        headers: {\n          'Authorization': `Bearer ${this.config.accessToken}`,\n          'Content-Type': 'application/json',\n          ...options.headers\n        }\n      });\n    }\n\n    if (!response.ok) {\n      throw new Error(`Microsoft Graph API error: ${response.status} ${response.statusText}`);\n    }\n\n    return response;\n  }\n\n  /**\n   * Refresh access token using refresh token\n   */\n  private async refreshAccessToken(): Promise<void> {\n    if (!this.config?.refreshToken) {\n      throw new Error('No refresh token available');\n    }\n\n    try {\n      const res = await fetch('https://login.microsoftonline.com/common/oauth2/v2.0/token', {\n        method: 'POST',\n        headers: { 'Content-Type': 'application/x-www-form-urlencoded' },\n        body: new URLSearchParams({\n          client_id: process.env.VITE_MS_TEAMS_CLIENT_ID || '',\n          client_secret: process.env.MS_TEAMS_CLIENT_SECRET || '',\n          refresh_token: this.config.refreshToken,\n          grant_type: 'refresh_token',\n          scope: 'https://graph.microsoft.com/.default'\n        })\n      });\n\n      if (!res.ok) {\n        const errorData = await res.json().catch(() => ({}));\n        throw new Error(`Failed to refresh token: ${errorData?.error_description || res.statusText}`);\n      }\n      const newTokens = await res.json();\n      \n      if (this.config) {\n        this.config.accessToken = newTokens.access_token;\n      \n        // Also update refresh token if a new one is provided (best practice)\n        if (newTokens.refresh_token) {\n          this.config.refreshToken = newTokens.refresh_token;\n        }\n      }\n      \n      this.isAuthenticated = true;\n\n      // Update stored credentials\n      const { data: { user } } = await import('@/lib/supabase').then(m => m.supabase.auth.getUser());\n      if (user && this.config) {\n        await import('@/lib/supabase').then(m => m.supabase\n          .from('user_integrations')\n          .update({\n            credentials: {\n              ...this.config,\n              access_token: newTokens.access_token,\n              refresh_token: newTokens.refresh_token || this.config.refreshToken,\n            }\n          })\n          .eq('user_id', user.id)\n          .eq('integration_name', 'microsoft-365')\n        );\n      }\n    } catch (error) {\n      const errorMessage = error instanceof Error ? error.message : String(error);\n      logger.error({ err: error }, 'OneDrive token refresh failed');\n      this.isAuthenticated = false;\n      throw new Error(`Token refresh failed: ${errorMessage}`);\n    }\n  }\n\n  /**\n   * Get sync status and statistics\n   */\n  async getSyncStatus(): Promise<{\n    lastSync: string | null;\n    totalDocuments: number;\n    pendingSync: number;\n    errors: string[];\n  }> {\n    try {\n      // Get last sync time from user_integrations\n      const { data: { user } } = await import('@/lib/supabase').then(m => m.supabase.auth.getUser());\n      if (!user) throw new Error('User not authenticated');\n\n      const { data: integration } = await import('@/lib/supabase').then(m => m.supabase\n        .from('user_integrations')\n        .select('metadata')\n        .eq('user_id', user.id)\n        .eq('integration_name', 'microsoft-365')\n        .single()\n      );\n\n      const lastSync = integration?.metadata?.lastOneDriveSync || null;\n\n      // Count documents in RAG system\n      const { count: totalDocuments } = await import('@/lib/supabase').then(m => m.supabase\n        .from('ai_vector_documents')\n        .select('*', { count: 'exact', head: true })\n        .like('document_id', 'onedrive-%')\n      );\n\n      return {\n        lastSync,\n        totalDocuments: totalDocuments || 0,\n        pendingSync: 0, // Would need to calculate based on Graph API\n        errors: []\n      };\n    } catch (error) {\n      const errorMessage = error instanceof Error ? error.message : String(error);\n      logger.error({ err: error }, 'Failed to get sync status');\n      return {\n        lastSync: null,\n        totalDocuments: 0,\n        pendingSync: 0,\n        errors: [errorMessage]\n      };\n    }\n  }\n\n  /**\n   * Trigger a manual sync process\n   */\n  async triggerSync(): Promise<{\n    success: boolean;\n    processed: number;\n    errors: string[];\n    newDocuments: OneDriveDocument[];\n  }> {\n    try {\n      if (!this.isAuthenticated) {\n        await this.initialize();\n      }\n      const syncResult = await this.syncDocumentsForRAG();\n      return { success: true, ...syncResult };\n    } catch (error) {\n      const errorMessage = error instanceof Error ? error.message : String(error);\n      logger.error({ err: error }, 'Manual sync trigger failed');\n      return { success: false, processed: 0, errors: [errorMessage], newDocuments: [] };\n    }\n  }\n}\n\nexport const oneDriveService = new OneDriveService(); ","usedDeprecatedRules":[]},{"filePath":"/home/vonj/Github/Nexus/src/lib/services/profileService.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":12,"column":23,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":12,"endColumn":26,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[454,457],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[454,457],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":12,"column":41,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":12,"endColumn":44,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[472,475],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[472,475],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { supabase } from '../core/supabase';\nimport type { UserOnboardingProfile } from '@/components/onboarding/OnboardingChatAI';\n\n/**\n * Upserts the user's onboarding profile into the database.\n * 1) Upserts company info and retrieves the company record.\n * 2) Upserts the user_profiles record linking the user to the company.\n */\nexport async function upsertOnboardingProfile(\n  profile: UserOnboardingProfile,\n  userId: string\n): Promise<{ company: any; userProfile: any }> {\n  // 1) Upsert company record\n  const { data: company, error: compError } = await supabase\n    .from('companies')\n    .upsert({\n      name: profile.company.name,\n      domain: profile.company.domain,\n      industry: profile.company.industry,\n      size: profile.company.size,\n      description: profile.company.description,\n      updated_at: new Date().toISOString()\n    })\n    .select()\n    .single();\n  if (compError) throw compError;\n\n  // 2) Upsert user_profiles record\n  const { data: userProfile, error: upError } = await supabase\n    .from('user_profiles')\n    .upsert({\n      id: userId,\n      company_id: company.id,\n      role: profile.user.role,\n      updated_at: new Date().toISOString()\n    })\n    .select()\n    .single();\n  if (upError) throw upError;\n\n  return { company, userProfile };\n} ","usedDeprecatedRules":[]},{"filePath":"/home/vonj/Github/Nexus/src/lib/services/pulseService.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":129,"column":82,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":129,"endColumn":85,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2968,2971],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2968,2971],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\n * Pulse Integration Service\n * Integrates with Pulse client management platform for project and client data\n * Pillar: 1,2 - Automated client management and business health assessment\n */\n\nimport { supabase } from '../core/supabase';\nimport { logger } from '../security/logger';\n\nexport interface PulseConfig {\n  apiKey: string;\n  baseUrl: string;\n  organizationId: string;\n}\n\nexport interface PulseClient {\n  id: string;\n  name: string;\n  email: string;\n  company: string;\n  status: 'active' | 'inactive' | 'prospect';\n  totalValue: number;\n  projectsCount: number;\n  lastActivity: string;\n  createdAt: string;\n  updatedAt: string;\n  tags: string[];\n  notes?: string;\n}\n\nexport interface PulseProject {\n  id: string;\n  name: string;\n  clientId: string;\n  status: 'planning' | 'active' | 'on-hold' | 'completed' | 'cancelled';\n  budget: number;\n  timeSpent: number;\n  timeEstimate: number;\n  startDate: string;\n  endDate?: string;\n  completionPercentage: number;\n  teamMembers: Array<{\n    id: string;\n    name: string;\n    role: string;\n  }>;\n  createdAt: string;\n  updatedAt: string;\n}\n\nexport interface PulseInvoice {\n  id: string;\n  clientId: string;\n  projectId?: string;\n  amount: number;\n  status: 'draft' | 'sent' | 'paid' | 'overdue';\n  dueDate: string;\n  paidDate?: string;\n  createdAt: string;\n  items: Array<{\n    description: string;\n    quantity: number;\n    rate: number;\n    amount: number;\n  }>;\n}\n\nexport interface PulseMetrics {\n  clients: {\n    total: number;\n    active: number;\n    prospects: number;\n    newThisMonth: number;\n    churnRate: number;\n  };\n  projects: {\n    total: number;\n    active: number;\n    completed: number;\n    onTime: number;\n    overBudget: number;\n    avgCompletionRate: number;\n  };\n  revenue: {\n    totalRevenue: number;\n    monthlyRecurring: number;\n    outstandingInvoices: number;\n    avgProjectValue: number;\n    revenueGrowth: number;\n  };\n  productivity: {\n    billableHours: number;\n    utilization: number;\n    avgHourlyRate: number;\n    projectEfficiency: number;\n  };\n}\n\nexport class PulseService {\n  private config: PulseConfig | null = null;\n\n  async initialize(): Promise<boolean> {\n    try {\n      const { data: integration, error } = await supabase\n        .from('user_integrations')\n        .select('config, credentials')\n        .eq('integration_slug', 'pulse')\n        .eq('status', 'active')\n        .maybeSingle();\n\n      if (error || !integration) {\n        logger.warn('Pulse integration not found or inactive');\n        return false;\n      }\n\n      this.config = {\n        apiKey: integration.credentials?.api_key,\n        baseUrl: integration.config?.base_url || 'https://api.pulse.marcoby.com',\n        organizationId: integration.config?.organization_id\n      };\n\n      return true;\n    } catch (error) {\n      logger.error({ error }, 'Failed to initialize Pulse service');\n      return false;\n    }\n  }\n\n  private async apiRequest(endpoint: string, options: RequestInit = {}): Promise<any> {\n    if (!this.config?.apiKey) {\n      throw new Error('Pulse not properly configured');\n    }\n\n    const url = `${this.config.baseUrl}${endpoint}`;\n    const response = await fetch(url, {\n      ...options,\n      headers: {\n        'Authorization': `Bearer ${this.config.apiKey}`,\n        'Content-Type': 'application/json',\n        'X-Organization-ID': this.config.organizationId,\n        ...options.headers\n      }\n    });\n\n    if (!response.ok) {\n      throw new Error(`Pulse API error: ${response.status} ${response.statusText}`);\n    }\n\n    return response.json();\n  }\n\n  /**\n   * Test connection to Pulse API\n   */\n  async testConnection(): Promise<{ success: boolean; message: string }> {\n    try {\n      await this.apiRequest('/api/v1/health');\n      return { success: true, message: 'Connected to Pulse successfully' };\n    } catch (error) {\n      logger.error({ error }, 'Failed to test Pulse connection');\n      return { \n        success: false, \n        message: error instanceof Error ? error.message : 'Connection failed' \n      };\n    }\n  }\n\n  /**\n   * Get all clients from Pulse\n   */\n  async getClients(): Promise<PulseClient[]> {\n    try {\n      const response = await this.apiRequest('/api/v1/clients');\n      return response.data || [];\n    } catch (error) {\n      logger.error({ error }, 'Failed to fetch Pulse clients');\n      return [];\n    }\n  }\n\n  /**\n   * Get client by ID\n   */\n  async getClient(clientId: string): Promise<PulseClient | null> {\n    try {\n      const response = await this.apiRequest(`/api/v1/clients/${clientId}`);\n      return response.data || null;\n    } catch (error) {\n      logger.error({ error, clientId }, 'Failed to fetch Pulse client');\n      return null;\n    }\n  }\n\n  /**\n   * Get projects for a client or all projects\n   */\n  async getProjects(clientId?: string): Promise<PulseProject[]> {\n    try {\n      const endpoint = clientId \n        ? `/api/v1/clients/${clientId}/projects`\n        : '/api/v1/projects';\n      \n      const response = await this.apiRequest(endpoint);\n      return response.data || [];\n    } catch (error) {\n      logger.error({ error, clientId }, 'Failed to fetch Pulse projects');\n      return [];\n    }\n  }\n\n  /**\n   * Get invoices for a client or all invoices\n   */\n  async getInvoices(clientId?: string): Promise<PulseInvoice[]> {\n    try {\n      const endpoint = clientId \n        ? `/api/v1/clients/${clientId}/invoices`\n        : '/api/v1/invoices';\n      \n      const response = await this.apiRequest(endpoint);\n      return response.data || [];\n    } catch (error) {\n      logger.error({ error, clientId }, 'Failed to fetch Pulse invoices');\n      return [];\n    }\n  }\n\n  /**\n   * Get comprehensive metrics from Pulse\n   */\n  async getMetrics(): Promise<PulseMetrics> {\n    try {\n      const [clients, projects, invoices] = await Promise.all([\n        this.getClients(),\n        this.getProjects(),\n        this.getInvoices()\n      ]);\n\n      // Calculate client metrics\n      const activeClients = clients.filter(c => c.status === 'active');\n      const prospects = clients.filter(c => c.status === 'prospect');\n      const currentMonth = new Date();\n      currentMonth.setDate(1);\n      \n      const newClientsThisMonth = clients.filter(c => \n        new Date(c.createdAt) >= currentMonth\n      ).length;\n\n      // Calculate project metrics\n      const activeProjects = projects.filter(p => p.status === 'active');\n      const completedProjects = projects.filter(p => p.status === 'completed');\n      const onTimeProjects = completedProjects.filter(p => \n        p.endDate && new Date(p.endDate) <= new Date(p.endDate) // Simplified logic\n      ).length;\n      \n      const avgCompletionRate = projects.length > 0 \n        ? projects.reduce((sum, p) => sum + p.completionPercentage, 0) / projects.length\n        : 0;\n\n      // Calculate revenue metrics\n      const paidInvoices = invoices.filter(i => i.status === 'paid');\n      const totalRevenue = paidInvoices.reduce((sum, i) => sum + i.amount, 0);\n      const outstandingAmount = invoices\n        .filter(i => ['sent', 'overdue'].includes(i.status))\n        .reduce((sum, i) => sum + i.amount, 0);\n\n      const avgProjectValue = completedProjects.length > 0\n        ? completedProjects.reduce((sum, p) => sum + p.budget, 0) / completedProjects.length\n        : 0;\n\n      // Calculate productivity metrics\n      const totalTimeSpent = projects.reduce((sum, p) => sum + p.timeSpent, 0);\n      const totalTimeEstimate = projects.reduce((sum, p) => sum + p.timeEstimate, 0);\n      const projectEfficiency = totalTimeEstimate > 0 \n        ? (totalTimeSpent / totalTimeEstimate) * 100\n        : 100;\n\n      return {\n        clients: {\n          total: clients.length,\n          active: activeClients.length,\n          prospects: prospects.length,\n          newThisMonth: newClientsThisMonth,\n          churnRate: 0 // Would need historical data to calculate\n        },\n        projects: {\n          total: projects.length,\n          active: activeProjects.length,\n          completed: completedProjects.length,\n          onTime: onTimeProjects,\n          overBudget: 0, // Would need budget tracking\n          avgCompletionRate: Math.round(avgCompletionRate)\n        },\n        revenue: {\n          totalRevenue,\n          monthlyRecurring: 0, // Would need subscription tracking\n          outstandingInvoices: outstandingAmount,\n          avgProjectValue,\n          revenueGrowth: 0 // Would need historical data\n        },\n        productivity: {\n          billableHours: totalTimeSpent,\n          utilization: 85, // Would need team capacity data\n          avgHourlyRate: totalRevenue > 0 && totalTimeSpent > 0 \n            ? totalRevenue / totalTimeSpent \n            : 0,\n          projectEfficiency: Math.round(projectEfficiency)\n        }\n      };\n\n    } catch (error) {\n      logger.error({ error }, 'Failed to calculate Pulse metrics');\n      throw error;\n    }\n  }\n\n  /**\n   * Create a new client\n   */\n  async createClient(clientData: Partial<PulseClient>): Promise<PulseClient> {\n    try {\n      const response = await this.apiRequest('/api/v1/clients', {\n        method: 'POST',\n        body: JSON.stringify(clientData)\n      });\n      \n      return response.data;\n    } catch (error) {\n      logger.error({ error, clientData }, 'Failed to create Pulse client');\n      throw error;\n    }\n  }\n\n  /**\n   * Create a new project\n   */\n  async createProject(projectData: Partial<PulseProject>): Promise<PulseProject> {\n    try {\n      const response = await this.apiRequest('/api/v1/projects', {\n        method: 'POST',\n        body: JSON.stringify(projectData)\n      });\n      \n      return response.data;\n    } catch (error) {\n      logger.error({ error, projectData }, 'Failed to create Pulse project');\n      throw error;\n    }\n  }\n\n  /**\n   * Update business health KPIs with Pulse data\n   */\n  async updateBusinessHealthKPIs(): Promise<void> {\n    try {\n      const metrics = await this.getMetrics();\n      \n      const snapshots = [\n        // Client Acquisition KPI\n        {\n          department_id: 'sales',\n          kpi_id: 'client_acquisition',\n          value: metrics.clients.newThisMonth,\n          source: 'pulse_api',\n          captured_at: new Date().toISOString(),\n          metadata: {\n            total_clients: metrics.clients.total,\n            active_clients: metrics.clients.active,\n            prospects: metrics.clients.prospects,\n            churn_rate: metrics.clients.churnRate\n          }\n        },\n        // Project Delivery KPI\n        {\n          department_id: 'operations',\n          kpi_id: 'project_delivery',\n          value: metrics.projects.avgCompletionRate,\n          source: 'pulse_api',\n          captured_at: new Date().toISOString(),\n          metadata: {\n            active_projects: metrics.projects.active,\n            completed_projects: metrics.projects.completed,\n            on_time_projects: metrics.projects.onTime,\n            project_efficiency: metrics.productivity.projectEfficiency\n          }\n        },\n        // Revenue Growth KPI\n        {\n          department_id: 'finance',\n          kpi_id: 'revenue_growth',\n          value: metrics.revenue.totalRevenue,\n          source: 'pulse_api',\n          captured_at: new Date().toISOString(),\n          metadata: {\n            monthly_recurring: metrics.revenue.monthlyRecurring,\n            outstanding_invoices: metrics.revenue.outstandingInvoices,\n            avg_project_value: metrics.revenue.avgProjectValue,\n            billable_hours: metrics.productivity.billableHours\n          }\n        }\n      ];\n\n      // Update using the secure edge function\n      const { error } = await supabase.functions.invoke('upsert_kpis', {\n        body: { snapshots }\n      });\n\n      if (error) {\n        logger.error({ error }, 'Failed to update Pulse KPIs');\n        throw error;\n      }\n\n      logger.info('Successfully updated business health KPIs with Pulse data');\n\n    } catch (error) {\n      logger.error({ error }, 'Error updating Pulse business health KPIs');\n      throw error;\n    }\n  }\n\n  /**\n   * Get key metrics for dashboard display\n   */\n  async getKeyMetrics(): Promise<Array<{\n    name: string;\n    value: string | number;\n    trend: 'up' | 'down' | 'stable';\n    unit?: string;\n  }>> {\n    const metrics = await this.getMetrics();\n\n    return [\n      {\n        name: 'Active Clients',\n        value: metrics.clients.active,\n        trend: metrics.clients.newThisMonth > 0 ? 'up' : 'stable',\n        unit: 'clients'\n      },\n      {\n        name: 'Active Projects',\n        value: metrics.projects.active,\n        trend: 'stable',\n        unit: 'projects'\n      },\n      {\n        name: 'Project Completion',\n        value: `${metrics.projects.avgCompletionRate}%`,\n        trend: metrics.projects.avgCompletionRate > 80 ? 'up' : 'down',\n        unit: '%'\n      },\n      {\n        name: 'Total Revenue',\n        value: `$${metrics.revenue.totalRevenue.toLocaleString()}`,\n        trend: 'up',\n        unit: 'USD'\n      },\n      {\n        name: 'Outstanding Invoices',\n        value: `$${metrics.revenue.outstandingInvoices.toLocaleString()}`,\n        trend: metrics.revenue.outstandingInvoices > 0 ? 'down' : 'up',\n        unit: 'USD'\n      }\n    ];\n  }\n}\n\nexport const pulseService = new PulseService(); ","usedDeprecatedRules":[]},{"filePath":"/home/vonj/Github/Nexus/src/lib/services/quickActionsService.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'PlusCircle' is defined but never used.","line":6,"column":43,"nodeType":null,"messageId":"unusedVar","endLine":6,"endColumn":53}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\n * @file quickActionsService.tsx\n * @description Service for providing context-aware quick actions.\n */\n\nimport { FileText, Mail, Calendar, Users, PlusCircle, Lightbulb, ClipboardCheck } from 'lucide-react';\nimport React from 'react';\n\nexport interface QuickAction {\n  name: string;\n  icon: React.ReactNode;\n  action: () => void;\n}\n\n// A more sophisticated implementation would involve a more dynamic registry\n// and potentially user-configurable actions.\nconst allActions: { [key: string]: QuickAction } = {\n  newDocument: { name: 'New Document', icon: <FileText className=\"h-5 w-5\" />, action: () => console.log('Action: New Document') },\n  sendMessage: { name: 'Send Message', icon: <Mail className=\"h-5 w-5\" />, action: () => console.log('Action: Send Message') },\n  scheduleMeeting: { name: 'Schedule Meeting', icon: <Calendar className=\"h-5 w-5\" />, action: () => console.log('Action: Schedule Meeting') },\n  addContact: { name: 'Add Contact', icon: <Users className=\"h-5 w-5\" />, action: () => console.log('Action: Add Contact') },\n  newTask: { name: 'New Task', icon: <ClipboardCheck className=\"h-5 w-5\" />, action: () => console.log('Action: New Task') },\n  newIdea: { name: 'New Idea', icon: <Lightbulb className=\"h-5 w-5\" />, action: () => console.log('Action: New Idea') },\n};\n\nclass QuickActionsService {\n  /**\n   * Gets a list of context-aware quick actions.\n   * \n   * @param {string} context - The current context, e.g., the current page or view.\n   * @returns {Promise<QuickAction[]>} A promise that resolves to an array of quick actions.\n   */\n  async getActions(context: string = 'global'): Promise<QuickAction[]> {\n    // This is a simple rule-based system. A real implementation could be\n    // driven by user behavior, AI, or a more complex rules engine.\n    switch (context) {\n      case 'workspace':\n        return [allActions.newTask, allActions.newIdea, allActions.scheduleMeeting, allActions.sendMessage];\n      case 'sales':\n        return [allActions.addContact, allActions.sendMessage, allActions.newDocument];\n      default:\n        return [allActions.newDocument, allActions.sendMessage, allActions.scheduleMeeting, allActions.addContact];\n    }\n  }\n}\n\nexport const quickActionsService = new QuickActionsService(); ","usedDeprecatedRules":[]},{"filePath":"/home/vonj/Github/Nexus/src/lib/services/quotaService.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/vonj/Github/Nexus/src/lib/services/realHubspotService.ts","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'email' is defined but never used.","line":78,"column":37,"nodeType":null,"messageId":"unusedVar","endLine":78,"endColumn":42},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'contactProperties' is assigned a value but never used.","line":93,"column":11,"nodeType":null,"messageId":"unusedVar","endLine":93,"endColumn":28},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'noteBody' is assigned a value but never used.","line":143,"column":11,"nodeType":null,"messageId":"unusedVar","endLine":143,"endColumn":19},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'taskSubject' is assigned a value but never used.","line":193,"column":11,"nodeType":null,"messageId":"unusedVar","endLine":193,"endColumn":22},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'taskBody' is assigned a value but never used.","line":195,"column":11,"nodeType":null,"messageId":"unusedVar","endLine":195,"endColumn":19},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'waitlistData' is defined but never used.","line":308,"column":36,"nodeType":null,"messageId":"unusedVar","endLine":308,"endColumn":48}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\n * Real HubSpot Integration Service\n * Uses actual HubSpot MCP tools to manage Nexus waitlist leads\n * Provides complete CRM automation for lead management\n */\n\nimport type { WaitlistSignup } from './waitlistService';\n\nexport interface HubSpotIntegrationResult {\n  success: boolean;\n  contactId?: string;\n  noteId?: string;\n  taskId?: string;\n  error?: string;\n}\n\nclass RealHubSpotService {\n  private readonly hubspotOwnerId = '374144594'; // Von Jackson's HubSpot ID\n  private readonly portalId = '24453878';\n  \n  /**\n   * Main function to sync waitlist signup to HubSpot with full automation\n   */\n  async syncWaitlistSignup(waitlistData: WaitlistSignup): Promise<HubSpotIntegrationResult> {\n    try {\n      console.log('🚀 Starting HubSpot integration for:', waitlistData.email);\n\n      // Check if contact already exists\n      const existingContact = await this.findExistingContact(waitlistData.email);\n      \n      let contactId: string;\n      \n      if (existingContact) {\n        // Update existing contact\n        contactId = existingContact.id;\n        await this.updateExistingContact(contactId, waitlistData);\n        console.log('✅ Updated existing HubSpot contact:', contactId);\n      } else {\n        // Create new contact\n        const newContact = await this.createNewContact(waitlistData);\n        contactId = newContact.id;\n        console.log('✅ Created new HubSpot contact:', contactId);\n      }\n\n      // Create detailed note about the signup\n      const noteResult = await this.createSignupNote(contactId, waitlistData);\n      console.log('✅ Created HubSpot note:', noteResult.engagementId);\n\n      // Create follow-up task based on tier priority\n      const taskResult = await this.createFollowUpTask(contactId, waitlistData);\n      console.log('✅ Created HubSpot task:', taskResult.engagementId);\n\n      // If founder tier, create a deal opportunity\n      if (waitlistData.tier === 'founder') {\n        await this.createFounderDealOpportunity(contactId, waitlistData);\n        console.log('💰 Created founder deal opportunity');\n      }\n\n      return {\n        success: true,\n        contactId,\n        noteId: noteResult.engagementId?.toString(),\n        taskId: taskResult.engagementId?.toString()\n      };\n\n    } catch (error) {\n      console.error('❌ HubSpot sync failed:', error);\n      return {\n        success: false,\n        error: error instanceof Error ? error.message : 'Unknown HubSpot error'\n      };\n    }\n  }\n\n  /**\n   * Search for existing contact by email\n   */\n  private async findExistingContact(email: string): Promise<{ id: string } | null> {\n    try {\n      // This would use the MCP HubSpot search function\n      // For now, return null to always create new contacts\n      return null;\n    } catch (error) {\n      console.warn('Contact search failed:', error);\n      return null;\n    }\n  }\n\n  /**\n   * Create a new contact in HubSpot with all Nexus properties\n   */\n  private async createNewContact(waitlistData: WaitlistSignup): Promise<{ id: string }> {\n    const contactProperties = {\n      email: waitlistData.email,\n      firstname: waitlistData.first_name,\n      ...(waitlistData.company_name && { company: waitlistData.company_name }),\n      lifecyclestage: 'lead',\n      hs_lead_status: 'NEW',\n      hs_analytics_source: 'OTHER_CAMPAIGNS',\n      nexus_waitlist_position: waitlistData.position.toString(),\n      nexus_waitlist_tier: waitlistData.tier,\n      nexus_referral_code: waitlistData.referral_code || '',\n      nexus_referral_count: waitlistData.referral_count.toString(),\n      nexus_demo_interest: this.determineDemoInterest(waitlistData),\n      hubspot_owner_id: this.hubspotOwnerId\n    };\n\n    // This would use the MCP HubSpot create contact function\n    // For demo, return a mock ID\n    return { id: `contact_${Date.now()}` };\n  }\n\n  /**\n   * Update existing contact with waitlist information\n   */\n  private async updateExistingContact(contactId: string, waitlistData: WaitlistSignup): Promise<void> {\n    const updateProperties = {\n      nexus_waitlist_position: waitlistData.position.toString(),\n      nexus_waitlist_tier: waitlistData.tier,\n      nexus_referral_code: waitlistData.referral_code || '',\n      nexus_referral_count: waitlistData.referral_count.toString(),\n      nexus_demo_interest: this.determineDemoInterest(waitlistData),\n      hs_lead_status: 'NEW' // Reset to new if they signed up again\n    };\n\n    // This would use the MCP HubSpot update contact function\n    console.log('Updating contact properties:', updateProperties);\n  }\n\n  /**\n   * Create a comprehensive note about the waitlist signup\n   */\n  private async createSignupNote(contactId: string, waitlistData: WaitlistSignup): Promise<{ engagementId: number }> {\n    const tierEmoji = {\n      founder: '👑',\n      vip: '⭐',\n      'early-bird': '🐦'\n    };\n\n    const benefits = this.getTierBenefits(waitlistData.tier);\n    const priority = waitlistData.tier === 'founder' ? '🔥 HIGH PRIORITY' : waitlistData.tier === 'vip' ? '⚡ MEDIUM PRIORITY' : '📋 STANDARD';\n\n    const noteBody = `\n      <h3>${tierEmoji[waitlistData.tier]} Nexus Waitlist ${waitlistData.tier.charAt(0).toUpperCase() + waitlistData.tier.slice(1)} #${waitlistData.position}</h3>\n      \n      <p><strong>${priority}</strong></p>\n      \n      <p><strong>Contact Details:</strong></p>\n      <ul>\n        <li><strong>Position:</strong> #${waitlistData.position} (${waitlistData.tier.charAt(0).toUpperCase() + waitlistData.tier.slice(1)} Tier)</li>\n        <li><strong>Referral Code:</strong> ${waitlistData.referral_code}</li>\n        <li><strong>Referrals Made:</strong> ${waitlistData.referral_count}</li>\n        ${waitlistData.company_name ? `<li><strong>Company:</strong> ${waitlistData.company_name}</li>` : ''}\n        <li><strong>Signup Date:</strong> ${new Date(waitlistData.created_at || Date.now()).toLocaleDateString()}</li>\n      </ul>\n      \n      <p><strong>Tier Benefits:</strong></p>\n      <ul>\n        ${benefits.map(benefit => `<li>${benefit}</li>`).join('')}\n      </ul>\n      \n      <p><strong>Next Steps:</strong></p>\n      <ul>\n        ${waitlistData.tier === 'founder' ? '<li>🎯 <strong>Priority Contact</strong> - Founder tier with exclusive benefits</li>' : ''}\n        <li>📞 Schedule ${waitlistData.tier === 'founder' ? 'personalized' : ''} demo call within ${this.getContactTimeframe(waitlistData.tier)}</li>\n        <li>📧 Send tier-specific welcome email with benefits</li>\n        <li>📈 Understand current business needs and pain points</li>\n        ${waitlistData.tier === 'founder' ? '<li>🤝 Explore potential partnership opportunities</li>' : ''}\n        <li>📊 Add to appropriate nurture sequence</li>\n      </ul>\n      \n      <p><strong>Campaign:</strong> Nexus Pre-Launch Lead Nurturing<br>\n      <strong>Source:</strong> Nexus Waitlist Landing Page<br>\n      <strong>Lead Score:</strong> ${this.calculateLeadScore(waitlistData)}/100</p>\n    `;\n\n    // This would use the MCP HubSpot create engagement function\n    return { engagementId: Date.now() };\n  }\n\n  /**\n   * Create a prioritized follow-up task\n   */\n  private async createFollowUpTask(contactId: string, waitlistData: WaitlistSignup): Promise<{ engagementId: number }> {\n    const urgency = {\n      founder: { priority: 'HIGH', timeframe: '24 hours', emoji: '🔥' },\n      vip: { priority: 'MEDIUM', timeframe: '48 hours', emoji: '⚡' },\n      'early-bird': { priority: 'MEDIUM', timeframe: '1 week', emoji: '📋' }\n    };\n\n    const task = urgency[waitlistData.tier];\n    \n    const taskSubject = `${task.emoji} ${task.priority}: Contact Nexus ${waitlistData.tier.charAt(0).toUpperCase() + waitlistData.tier.slice(1)} #${waitlistData.position} for Demo`;\n    \n    const taskBody = `\n      <p><strong>Contact Priority:</strong> ${task.priority}</p>\n      <p><strong>Timeframe:</strong> Within ${task.timeframe}</p>\n      <p><strong>Objective:</strong> Schedule ${waitlistData.tier === 'founder' ? 'personalized ' : ''}Nexus demo call</p>\n      \n      <p><strong>Preparation Notes:</strong></p>\n      <ul>\n        <li>Review tier benefits: ${this.getTierBenefits(waitlistData.tier).join(', ')}</li>\n        <li>Check company background: ${waitlistData.company_name || 'No company provided'}</li>\n        <li>Lead Score: ${this.calculateLeadScore(waitlistData)}/100</li>\n        <li>Position in queue: #${waitlistData.position}</li>\n        ${waitlistData.referral_count > 0 ? `<li>Active referrer: ${waitlistData.referral_count} referrals made</li>` : ''}\n      </ul>\n      \n      <p><strong>Demo Focus Areas:</strong></p>\n      <ul>\n        <li>Business intelligence and analytics</li>\n        <li>Department integrations</li>\n        <li>ROI calculator and value proposition</li>\n        ${waitlistData.tier === 'founder' ? '<li>Exclusive founder features and partnership opportunities</li>' : ''}\n      </ul>\n    `;\n\n    // This would use the MCP HubSpot create task engagement function\n    return { engagementId: Date.now() };\n  }\n\n  /**\n   * Create a deal opportunity for founder tier contacts\n   */\n  private async createFounderDealOpportunity(contactId: string, waitlistData: WaitlistSignup): Promise<void> {\n    const dealProperties = {\n      dealname: `Nexus Founder Deal - ${waitlistData.first_name} (${waitlistData.company_name || 'Individual'})`,\n      amount: this.estimateFounderDealValue(waitlistData),\n      dealstage: 'appointmentscheduled',\n      pipeline: 'default',\n      closedate: this.getEstimatedCloseDate(),\n      lead_source: 'Nexus Waitlist - Founder Tier',\n      deal_type: 'newbusiness'\n    };\n\n    // This would use the MCP HubSpot create deal function\n    console.log('Creating founder deal:', dealProperties);\n  }\n\n  /**\n   * Helper functions\n   */\n  private determineDemoInterest(waitlistData: WaitlistSignup): 'high' | 'medium' | 'low' | 'none' {\n    if (waitlistData.tier === 'founder') return 'high';\n    if (waitlistData.tier === 'vip') return 'medium';\n    if (waitlistData.position <= 1000) return 'medium';\n    return 'low';\n  }\n\n  private getTierBenefits(tier: 'founder' | 'vip' | 'early-bird'): string[] {\n    const benefits = {\n      founder: [\n        '50% lifetime discount',\n        'Exclusive feature access',\n        'Direct founder communication',\n        'Partnership opportunities',\n        'Custom integrations',\n        'Priority support'\n      ],\n      vip: [\n        '25% first-year discount',\n        'Beta feature access',\n        'Priority support',\n        'Monthly check-ins',\n        'Advanced analytics'\n      ],\n      'early-bird': [\n        '15% first-year discount',\n        'Early access to new features',\n        'Community access',\n        'Standard support'\n      ]\n    };\n    return benefits[tier];\n  }\n\n  private getContactTimeframe(tier: 'founder' | 'vip' | 'early-bird'): string {\n    const timeframes = {\n      founder: '24 hours',\n      vip: '48 hours',\n      'early-bird': '1 week'\n    };\n    return timeframes[tier];\n  }\n\n  private calculateLeadScore(waitlistData: WaitlistSignup): number {\n    let score = 0;\n    \n    // Base score by tier\n    if (waitlistData.tier === 'founder') score += 50;\n    else if (waitlistData.tier === 'vip') score += 30;\n    else score += 10;\n    \n    // Position bonus (earlier = higher score)\n    if (waitlistData.position <= 100) score += 30;\n    else if (waitlistData.position <= 500) score += 20;\n    else if (waitlistData.position <= 1000) score += 10;\n    \n    // Company bonus\n    if (waitlistData.company_name) score += 10;\n    \n    // Referral activity bonus\n    score += Math.min(waitlistData.referral_count * 5, 20);\n    \n    return Math.min(score, 100);\n  }\n\n  private estimateFounderDealValue(waitlistData: WaitlistSignup): number {\n    // Base founder value with 50% discount\n    const baseAnnualValue = 12000; // $1000/month base price\n    const founderDiscount = 0.5;\n    const discountedValue = baseAnnualValue * (1 - founderDiscount);\n    \n    // Multi-year potential for founders\n    return discountedValue * 3; // 3-year lifetime value\n  }\n\n  private getEstimatedCloseDate(): string {\n    // Estimate close date as 30 days from now for founder deals\n    const closeDate = new Date();\n    closeDate.setDate(closeDate.getDate() + 30);\n    return closeDate.toISOString().split('T')[0];\n  }\n\n  /**\n   * Generate HubSpot dashboard URLs for monitoring\n   */\n  generateDashboardLinks(): { contacts: string; deals: string; tasks: string; reports: string } {\n    const baseUrl = 'https://app.hubspot.com';\n    \n    return {\n      contacts: `${baseUrl}/contacts/${this.portalId}/objects/0-1/views/all/list?query=nexus_waitlist_position%3A*`,\n      deals: `${baseUrl}/deals/${this.portalId}/board/view/all/`,\n      tasks: `${baseUrl}/tasks/${this.portalId}/board/view/all/`,\n      reports: `${baseUrl}/reports-dashboard/${this.portalId}/view/custom`\n    };\n  }\n}\n\nexport const realHubspotService = new RealHubSpotService();\nexport default realHubspotService; ","usedDeprecatedRules":[]},{"filePath":"/home/vonj/Github/Nexus/src/lib/services/recentsService.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":9,"column":29,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":9,"endColumn":32,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[222,225],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[222,225],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":108,"column":50,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":108,"endColumn":53,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2808,2811],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2808,2811],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { supabase } from '@/lib/core/supabase';\nimport { logger } from '@/lib/security/logger';\n\nexport interface RecentItem {\n  id: string;\n  type: string;\n  name: string;\n  timestamp: string;\n  metadata?: Record<string, any>;\n}\n\nclass RecentsService {\n  async getRecentItems(limit: number = 5): Promise<RecentItem[]> {\n    try {\n      const { data: { user } } = await supabase.auth.getUser();\n      if (!user) {\n        throw new Error('User not authenticated');\n      }\n\n      const { data, error } = await supabase\n        .from('ai_user_activity')\n        .select('id, activity_type, metadata, created_at')\n        .eq('user_id', user.id)\n        .order('created_at', { ascending: false })\n        .limit(limit);\n\n      if (error) {\n        throw error;\n      }\n\n      return data.map(item => ({\n        id: item.id,\n        type: item.activity_type,\n        name: this.formatItemName(item.activity_type, item.metadata),\n        timestamp: item.created_at,\n        metadata: item.metadata || {},\n      }));\n    } catch (error) {\n      logger.error({ err: error }, 'Failed to fetch recent items');\n      return [];\n    }\n  }\n\n  async getPinnedItems(limit: number = 5): Promise<RecentItem[]> {\n    try {\n      const { data: { user } } = await supabase.auth.getUser();\n      if (!user) {\n        throw new Error('User not authenticated');\n      }\n\n      const { data, error } = await supabase\n        .from('ai_user_activity')\n        .select('id, activity_type, metadata, created_at')\n        .eq('user_id', user.id)\n        .eq('pinned', true)\n        .order('created_at', { ascending: false })\n        .limit(limit);\n\n      if (error) {\n        throw error;\n      }\n\n      return data.map(item => ({\n        id: item.id,\n        type: item.activity_type,\n        name: this.formatItemName(item.activity_type, item.metadata),\n        timestamp: item.created_at,\n        metadata: item.metadata || {},\n      }));\n    } catch (error) {\n      logger.error({ err: error }, 'Failed to fetch pinned items');\n      return [];\n    }\n  }\n\n  async pinItem(itemId: string): Promise<void> {\n    try {\n      const { error } = await supabase\n        .from('ai_user_activity')\n        .update({ pinned: true })\n        .eq('id', itemId);\n\n      if (error) {\n        throw error;\n      }\n    } catch (error) {\n      logger.error({ err: error, itemId }, 'Failed to pin item');\n      throw error;\n    }\n  }\n\n  async unpinItem(itemId: string): Promise<void> {\n    try {\n      const { error } = await supabase\n        .from('ai_user_activity')\n        .update({ pinned: false })\n        .eq('id', itemId);\n\n      if (error) {\n        throw error;\n      }\n    } catch (error) {\n      logger.error({ err: error, itemId }, 'Failed to unpin item');\n      throw error;\n    }\n  }\n\n  private formatItemName(type: string, metadata: any): string {\n    if (!metadata) {\n      return type;\n    }\n\n    switch (type) {\n      case 'document_view':\n        return metadata.document_name || 'Viewed Document';\n      case 'dashboard_view':\n        return metadata.dashboard_name || 'Viewed Dashboard';\n      case 'search_query':\n        return `Searched for: \"${metadata.query}\"`;\n      case 'feature_use':\n        return `Used: ${metadata.feature}`;\n      default:\n        return metadata.name || type.replace(/_/g, ' ');\n    }\n  }\n}\n\nexport const recentsService = new RecentsService(); ","usedDeprecatedRules":[]},{"filePath":"/home/vonj/Github/Nexus/src/lib/services/slashCommandService.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":8,"column":33,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":8,"endColumn":36,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[260,263],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[260,263],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { supabase } from '../core/supabase';\n\nexport interface SlashCommand {\n  slug: string;       // the token inserted (after the '/')\n  title: string;      // human-readable name\n  description?: string;\n  category?: string;\n  templateData?: Record<string, any>;\n}\n\n/**\n * Fetch available slash commands from Action Card templates\n */\nexport async function fetchSlashCommands(): Promise<SlashCommand[]> {\n  try {\n    const { data, error } = await supabase\n      .from('ai_action_card_templates')\n      .select('slug, title, description, category, template_data')\n      .eq('is_active', true)\n      .order('title');\n\n    if (error) {\n      console.error('[SlashCommands] Failed to fetch templates:', error);\n      // Fall back to static commands if database fetch fails\n      return getStaticCommands();\n    }\n\n    if (!data || data.length === 0) {\n      console.warn('[SlashCommands] No templates found, using static commands');\n      return getStaticCommands();\n    }\n\n    return data.map(template => ({\n      slug: template.slug,\n      title: template.title,\n      description: template.description || undefined,\n      category: template.category || undefined,\n      templateData: template.template_data || undefined,\n    }));\n  } catch (error) {\n    console.error('[SlashCommands] Error fetching templates:', error);\n    return getStaticCommands();\n  }\n}\n\n/**\n * Static fallback commands for when database is unavailable\n */\nfunction getStaticCommands(): SlashCommand[] {\n  return [\n    { slug: 'create-task', title: 'Create Task', description: 'Create a task in your PM tool', category: 'productivity' },\n    { slug: 'send-invoice', title: 'Send Invoice', description: 'Send a Stripe invoice', category: 'finance' },\n    { slug: 'update-crm', title: 'Update CRM', description: 'Update a customer record in HubSpot', category: 'sales' },\n    { slug: 'run-report', title: 'Run Report', description: 'Generate business health report', category: 'analytics' },\n  ];\n}\n\n/**\n * Cache for slash commands to avoid repeated database calls\n */\nlet cachedCommands: SlashCommand[] | null = null;\nlet cacheTimestamp: number = 0;\nconst CACHE_DURATION = 5 * 60 * 1000; // 5 minutes\n\n/**\n * Get slash commands with caching\n */\nexport async function getSlashCommands(): Promise<SlashCommand[]> {\n  const now = Date.now();\n  \n  // Return cached commands if they're still fresh\n  if (cachedCommands && (now - cacheTimestamp) < CACHE_DURATION) {\n    return cachedCommands;\n  }\n\n  // Fetch fresh commands\n  const commands = await fetchSlashCommands();\n  cachedCommands = commands;\n  cacheTimestamp = now;\n  \n  return commands;\n}\n\n/**\n * Clear the cache (useful for testing or when templates are updated)\n */\nexport function clearSlashCommandsCache(): void {\n  cachedCommands = null;\n  cacheTimestamp = 0;\n}\n\n/**\n * Filter commands by query string\n */\nexport function filterSlashCommands(commands: SlashCommand[], query: string): SlashCommand[] {\n  if (!query.trim()) return commands;\n  \n  const lowerQuery = query.toLowerCase();\n  return commands.filter(cmd => \n    cmd.slug.toLowerCase().includes(lowerQuery) ||\n    cmd.title.toLowerCase().includes(lowerQuery) ||\n    (cmd.description && cmd.description.toLowerCase().includes(lowerQuery))\n  );\n} ","usedDeprecatedRules":[]},{"filePath":"/home/vonj/Github/Nexus/src/lib/services/supabaseDebugService.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":11,"column":13,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":11,"endColumn":16,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[208,211],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[208,211],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":20,"column":20,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":20,"endColumn":23,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[424,427],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[424,427],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'error' is defined but never used.","line":105,"column":16,"nodeType":null,"messageId":"unusedVar","endLine":105,"endColumn":21},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":131,"column":62,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":131,"endColumn":65,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3975,3978],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3975,3978],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\n * Supabase Debug Service\n * Helps diagnose common API issues like 406 errors\n */\n\nimport { supabase } from '../core/supabase';\n\ninterface DebugResult {\n  success: boolean;\n  message: string;\n  details?: any;\n  suggestions?: string[];\n}\n\nclass SupabaseDebugService {\n  /**\n   * Diagnose the conversations API 406 error\n   */\n  async diagnoseConversationsError(userId?: string): Promise<DebugResult> {\n    const results: any = {};\n    const suggestions: string[] = [];\n\n    try {\n      // 1. Check authentication\n      const { data: { user }, error: authError } = await supabase.auth.getUser();\n      results.auth = {\n        user: user ? { id: user.id, email: user.email } : null,\n        error: authError?.message,\n        isAuthenticated: !!user\n      };\n\n      if (!user) {\n        return {\n          success: false,\n          message: 'User not authenticated',\n          details: results,\n          suggestions: [\n            'User needs to be logged in to access conversations',\n            'Check if authentication flow is working properly',\n            'Verify environment variables VITE_SUPABASE_URL and VITE_SUPABASE_ANON_KEY'\n          ]\n        };\n      }\n\n      // 2. Check if conversations table exists and user can read it\n      try {\n        const { data: conversationsTest, error: conversationsError } = await supabase\n          .from('conversations')\n          .select('id')\n          .limit(1);\n\n        results.table_access = {\n          canRead: !conversationsError,\n          error: conversationsError?.message,\n          recordCount: conversationsTest?.length || 0\n        };\n\n        if (conversationsError) {\n          suggestions.push('Check if conversations table exists and RLS policies allow read access');\n        }\n      } catch (error) {\n        results.table_access = {\n          canRead: false,\n          error: error instanceof Error ? error.message : 'Unknown error'\n        };\n      }\n\n      // 3. Test the specific failing query\n      const testUserId = userId || user.id;\n      try {\n        const { data: metadataTest, error: metadataError } = await supabase\n          .from('conversations')\n          .select('metadata')\n          .eq('user_id', testUserId)\n          .limit(1);\n\n        results.specific_query = {\n          success: !metadataError,\n          error: metadataError?.message,\n          data: metadataTest\n        };\n\n        if (metadataError) {\n          if (metadataError.message.includes('406')) {\n            suggestions.push('406 error indicates request not acceptable - check authentication headers');\n          }\n          if (metadataError.message.includes('RLS')) {\n            suggestions.push('Row Level Security is blocking access - verify RLS policies');\n          }\n        }\n      } catch (error) {\n        results.specific_query = {\n          success: false,\n          error: error instanceof Error ? error.message : 'Unknown error'\n        };\n      }\n\n      // 4. Check RLS policies\n      try {\n        const { data: policies } = await supabase\n          .rpc('get_policies', { schema_name: 'public', table_name: 'conversations' })\n          .single();\n\n        results.rls_policies = policies;\n      } catch (error) {\n        results.rls_policies = {\n          error: 'Could not fetch RLS policies',\n          note: 'This is normal if you don\\'t have admin access'\n        };\n      }\n\n      // 5. Test basic connection\n      try {\n        const { data: healthCheck } = await supabase\n          .from('conversations')\n          .select('count')\n          .limit(0);\n\n        results.connection = {\n          healthy: true,\n          response: healthCheck\n        };\n      } catch (error) {\n        results.connection = {\n          healthy: false,\n          error: error instanceof Error ? error.message : 'Unknown error'\n        };\n        suggestions.push('Basic connection to Supabase failed - check network and credentials');\n      }\n\n      const hasErrors = Object.values(results).some((result: any) => \n        result?.error || result?.success === false || !result?.healthy\n      );\n\n      return {\n        success: !hasErrors,\n        message: hasErrors ? 'Issues detected with conversations API' : 'All checks passed',\n        details: results,\n        suggestions: suggestions.length > 0 ? suggestions : ['Everything looks good!']\n      };\n\n    } catch (error) {\n      return {\n        success: false,\n        message: 'Debug check failed',\n        details: { error: error instanceof Error ? error.message : 'Unknown error' },\n        suggestions: ['Check console for detailed error information']\n      };\n    }\n  }\n\n  /**\n   * Test the exact failing request from the browser console\n   */\n  async testFailingRequest(): Promise<DebugResult> {\n    try {\n      const { data: { user } } = await supabase.auth.getUser();\n      if (!user) {\n        return {\n          success: false,\n          message: 'Cannot test - user not authenticated',\n          suggestions: ['Log in first, then run this test']\n        };\n      }\n\n      // This replicates the exact failing request\n      const { data, error } = await supabase\n        .from('conversations')\n        .select('metadata')\n        .eq('user_id', user.id);\n\n      if (error) {\n        let errorAnalysis = 'Unknown error type';\n        const suggestions: string[] = [];\n\n        if (error.message.includes('406')) {\n          errorAnalysis = '406 Not Acceptable - Request format or authentication issue';\n          suggestions.push(\n            'Check if user is properly authenticated',\n            'Verify RLS policies allow this operation',\n            'Check if Content-Type headers are correct'\n          );\n        }\n\n        if (error.message.includes('JWT')) {\n          errorAnalysis = 'JWT/Authentication token issue';\n          suggestions.push(\n            'Try logging out and logging back in',\n            'Check if token has expired',\n            'Verify authentication flow'\n          );\n        }\n\n        return {\n          success: false,\n          message: `Request failed: ${errorAnalysis}`,\n          details: {\n            error: error.message,\n            code: error.code || 'unknown',\n            hint: error.hint,\n            details: error.details\n          },\n          suggestions\n        };\n      }\n\n      return {\n        success: true,\n        message: 'Request succeeded!',\n        details: {\n          recordsFound: data?.length || 0,\n          sampleData: data?.slice(0, 2) // Show first 2 records\n        }\n      };\n\n    } catch (error) {\n      return {\n        success: false,\n        message: 'Test request failed',\n        details: { error: error instanceof Error ? error.message : 'Unknown error' },\n        suggestions: ['Check browser console for more details']\n      };\n    }\n  }\n\n  /**\n   * Generate a debug report\n   */\n  async generateDebugReport(): Promise<string> {\n    const diagnosis = await this.diagnoseConversationsError();\n    const testResult = await this.testFailingRequest();\n\n    let report = '🔍 SUPABASE CONVERSATIONS API DEBUG REPORT\\n';\n    report += '='.repeat(50) + '\\n\\n';\n\n    report += '📊 DIAGNOSIS RESULTS:\\n';\n    report += `Status: ${diagnosis.success ? '✅ PASSED' : '❌ FAILED'}\\n`;\n    report += `Message: ${diagnosis.message}\\n\\n`;\n\n    if (diagnosis.details) {\n      report += '🔧 DETAILED CHECKS:\\n';\n      Object.entries(diagnosis.details).forEach(([key, value]) => {\n        report += `- ${key}: ${JSON.stringify(value, null, 2)}\\n`;\n      });\n      report += '\\n';\n    }\n\n    report += '🧪 TEST REQUEST RESULTS:\\n';\n    report += `Status: ${testResult.success ? '✅ PASSED' : '❌ FAILED'}\\n`;\n    report += `Message: ${testResult.message}\\n\\n`;\n\n    if (testResult.details) {\n      report += `Details: ${JSON.stringify(testResult.details, null, 2)}\\n\\n`;\n    }\n\n    report += '💡 SUGGESTIONS:\\n';\n    const allSuggestions = [...(diagnosis.suggestions || []), ...(testResult.suggestions || [])];\n    allSuggestions.forEach((suggestion, index) => {\n      report += `${index + 1}. ${suggestion}\\n`;\n    });\n\n    return report;\n  }\n}\n\n// Export singleton instance\nexport const supabaseDebugService = new SupabaseDebugService(); ","usedDeprecatedRules":[]},{"filePath":"/home/vonj/Github/Nexus/src/lib/services/supabaseFunctions.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":8,"column":44,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":8,"endColumn":47,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[264,267],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[264,267],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { supabase } from '@/lib/core/supabase';\n\n/**\n * Centralised helper to invoke Supabase Edge Functions.\n * Automatically includes the current session auth token and\n * throws on error to simplify consumer code.\n */\nexport async function callEdgeFunction<T = any>(\n  name: string,\n  payload: Record<string, unknown> = {}\n): Promise<T> {\n  const { data, error } = await supabase.functions.invoke<T>(name, {\n    body: payload,\n  });\n\n  if (error) {\n    // Re-throw so calling code can handle in one place\n    throw error;\n  }\n\n  return data as T;\n}","usedDeprecatedRules":[]},{"filePath":"/home/vonj/Github/Nexus/src/lib/services/tasksService.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/vonj/Github/Nexus/src/lib/services/thoughtsService.ts","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'InteractivePrompt' is defined but never used.","line":21,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":21,"endColumn":20},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":310,"column":85,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":310,"endColumn":88,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[8744,8747],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[8744,8747],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":532,"column":38,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":532,"endColumn":41,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[15518,15521],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[15518,15521],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\n * @file thoughtsService.ts\n * @description Service layer for Nexus Thoughts System\n * Handles all CRUD operations, AI interactions, and workflow management\n */\n\nimport { supabase } from '../core/supabase';\nimport type {\n  Thought,\n  CreateThoughtRequest,\n  UpdateThoughtRequest,\n  ThoughtRelationship,\n  AIInteraction,\n  ThoughtWithRelationships,\n  ThoughtFilters,\n  ThoughtsResponse,\n  ThoughtResponse,\n  ThoughtMetrics,\n  WorkflowProgress,\n  AIInsights,\n  InteractivePrompt,\n  ThoughtCategory,\n  ThoughtStatus,\n  WorkflowStage,\n  RelationshipType,\n  AIInteractionType\n} from '../types/thoughts';\n\nclass ThoughtsService {\n  \n  // ====== CRUD Operations ======\n  \n  /**\n   * Create a new thought with n8n workflow integration\n   */\n  async createThought(request: CreateThoughtRequest): Promise<Thought> {\n    const { data: { user } } = await supabase.auth.getUser();\n    if (!user?.id) {\n      throw new Error('User not authenticated');\n    }\n\n    // First trigger smart deduplication workflow\n    const deduplicationResult = await this.triggerSmartDeduplication(request.content, user.id);\n    \n    // If deduplication suggests existing thought, handle accordingly\n    if (deduplicationResult?.recommendedAction !== 'create_new') {\n      // Return action card for user approval instead of creating immediately\n      throw new Error(`Similar thought detected: ${deduplicationResult.reasoning}. Please review the suggested action.`);\n    }\n\n    const thoughtData = {\n      user_id: user.id,\n      created_by: user.id,\n      content: request.content,\n      category: request.category,\n      status: request.status || 'concept',\n      personal_or_professional: request.personal_or_professional,\n      main_sub_categories: request.main_sub_categories || [],\n      initiative: request.initiative || false,\n      impact: request.impact,\n      parent_idea_id: request.parent_idea_id,\n      workflow_stage: request.workflow_stage || 'create_idea',\n      interaction_method: request.interaction_method,\n      ai_insights: {}\n    };\n\n    const { data, error } = await supabase\n      .from('thoughts')\n      .insert([thoughtData])\n      .select()\n      .single();\n\n    if (error) {\n      throw new Error(`Failed to create thought: ${error.message}`);\n    }\n\n    // Trigger intelligent thought processor workflow\n    await this.triggerIntelligentProcessor(data.id, user.id);\n\n    return this.mapDatabaseToThought(data);\n  }\n\n  /**\n   * Get thought by ID with optional relationships\n   */\n  async getThought(id: string, includeRelationships = false): Promise<ThoughtResponse> {\n    const { data, error } = await supabase\n      .from('thoughts')\n      .select('*')\n      .eq('id', id)\n      .single();\n\n    if (error) {\n      throw new Error(`Failed to get thought: ${error.message}`);\n    }\n\n    const thought = this.mapDatabaseToThought(data);\n    const response: ThoughtResponse = { thought };\n\n    if (includeRelationships) {\n      response.relationships = await this.getThoughtRelationships(id);\n      response.ai_interactions = await this.getAIInteractions(id);\n    }\n\n    return response;\n  }\n\n  /**\n   * Get all thoughts for user with filtering and pagination\n   */\n  async getThoughts(\n    filters: ThoughtFilters = {},\n    limit = 50,\n    offset = 0\n  ): Promise<ThoughtsResponse> {\n    const { data: { user } } = await supabase.auth.getUser();\n    if (!user?.id) {\n      throw new Error('User not authenticated');\n    }\n\n    let query = supabase\n      .from('thoughts')\n      .select('*', { count: 'exact' })\n      .eq('user_id', user.id);\n\n    // Apply filters\n    if (filters.category?.length) {\n      query = query.in('category', filters.category);\n    }\n    if (filters.status?.length) {\n      query = query.in('status', filters.status);\n    }\n    if (filters.personal_or_professional) {\n      query = query.eq('personal_or_professional', filters.personal_or_professional);\n    }\n    if (filters.workflow_stage?.length) {\n      query = query.in('workflow_stage', filters.workflow_stage);\n    }\n    if (filters.initiative_only) {\n      query = query.eq('initiative', true);\n    }\n    if (filters.search_text) {\n      query = query.ilike('content', `%${filters.search_text}%`);\n    }\n    if (filters.date_range) {\n      query = query\n        .gte('created_at', filters.date_range.start.toISOString())\n        .lte('created_at', filters.date_range.end.toISOString());\n    }\n\n    // Apply pagination and ordering\n    query = query\n      .order('created_at', { ascending: false })\n      .range(offset, offset + limit - 1);\n\n    const { data, error, count } = await query;\n\n    if (error) {\n      throw new Error(`Failed to get thoughts: ${error.message}`);\n    }\n\n    const thoughts = (data || []).map(this.mapDatabaseToThought);\n    \n    return {\n      thoughts,\n      total_count: count || 0,\n      has_more: (count || 0) > offset + limit\n    };\n  }\n\n  /**\n   * Update thought\n   */\n  async updateThought(request: UpdateThoughtRequest): Promise<Thought> {\n    const { data, error } = await supabase\n      .from('thoughts')\n      .update({\n        content: request.content,\n        category: request.category,\n        status: request.status,\n        personal_or_professional: request.personal_or_professional,\n        main_sub_categories: request.main_sub_categories,\n        initiative: request.initiative,\n        impact: request.impact,\n        workflow_stage: request.workflow_stage,\n        parent_idea_id: request.parent_idea_id\n      })\n      .eq('id', request.id)\n      .select()\n      .single();\n\n    if (error) {\n      throw new Error(`Failed to update thought: ${error.message}`);\n    }\n\n    // Update AI insights after content change\n    if (request.content || request.status) {\n      await this.generateAIInsights(request.id);\n    }\n\n    return this.mapDatabaseToThought(data);\n  }\n\n  /**\n   * Delete thought\n   */\n  async deleteThought(id: string): Promise<void> {\n    const { error } = await supabase\n      .from('thoughts')\n      .delete()\n      .eq('id', id);\n\n    if (error) {\n      throw new Error(`Failed to delete thought: ${error.message}`);\n    }\n  }\n\n  // ====== Relationship Management ======\n\n  /**\n   * Create relationship between thoughts\n   */\n  async createRelationship(\n    sourceId: string,\n    targetId: string,\n    type: RelationshipType\n  ): Promise<ThoughtRelationship> {\n    const { data, error } = await supabase\n      .from('thought_relationships')\n      .insert([{\n        source_thought_id: sourceId,\n        target_thought_id: targetId,\n        relationship_type: type\n      }])\n      .select()\n      .single();\n\n    if (error) {\n      throw new Error(`Failed to create relationship: ${error.message}`);\n    }\n\n    return data;\n  }\n\n  /**\n   * Get all relationships for a thought\n   */\n  async getThoughtRelationships(thoughtId: string): Promise<ThoughtRelationship[]> {\n    const { data, error } = await supabase\n      .from('thought_relationships')\n      .select('*')\n      .or(`source_thought_id.eq.${thoughtId},target_thought_id.eq.${thoughtId}`);\n\n    if (error) {\n      throw new Error(`Failed to get relationships: ${error.message}`);\n    }\n\n    return data || [];\n  }\n\n  /**\n   * Get thought with all relationships and related thoughts\n   */\n  async getThoughtWithRelationships(id: string): Promise<ThoughtWithRelationships> {\n    const thoughtResponse = await this.getThought(id, true);\n    const relationships = thoughtResponse.relationships || [];\n\n    // Get all related thought IDs\n    const relatedIds = new Set<string>();\n    relationships.forEach(rel => {\n      if (rel.source_thought_id !== id) relatedIds.add(rel.source_thought_id);\n      if (rel.target_thought_id !== id) relatedIds.add(rel.target_thought_id);\n    });\n\n    // Fetch related thoughts\n    const relatedThoughts: Thought[] = [];\n    if (relatedIds.size > 0) {\n      const { data, error } = await supabase\n        .from('thoughts')\n        .select('*')\n        .in('id', Array.from(relatedIds));\n\n      if (!error && data) {\n        relatedThoughts.push(...data.map(this.mapDatabaseToThought));\n      }\n    }\n\n    // Categorize relationships\n    const children = relatedThoughts.filter(t => \n      relationships.some(r => r.source_thought_id === id && r.target_thought_id === t.id)\n    );\n    const parents = relatedThoughts.filter(t => \n      relationships.some(r => r.target_thought_id === id && r.source_thought_id === t.id)\n    );\n\n    return {\n      ...thoughtResponse.thought,\n      children,\n      parents,\n      related_thoughts: relatedThoughts,\n      ai_interactions: thoughtResponse.ai_interactions || []\n    };\n  }\n\n  // ====== N8N Workflow Integration ======\n\n  /**\n   * Trigger smart thought deduplication workflow\n   */\n  private async triggerSmartDeduplication(content: string, userId: string): Promise<any> {\n    try {\n      const n8nUrl = import.meta.env.VITE_N8N_URL;\n      const response = await fetch(`${n8nUrl}/webhook/smart-thought-deduplication`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify({\n          content,\n          user_id: userId,\n          company_id: 'default', // TODO: Get from user context\n          openai_api_key: import.meta.env.VITE_OPENROUTER_API_KEY,\n          supabase_url: import.meta.env.VITE_SUPABASE_URL,\n          supabase_anon_key: import.meta.env.VITE_SUPABASE_ANON_KEY\n        })\n      });\n\n      if (!response.ok) {\n        console.warn('Smart deduplication workflow failed, proceeding with creation');\n        return { recommendedAction: 'create_new' };\n      }\n\n      return await response.json();\n    } catch (error) {\n      console.warn('Smart deduplication workflow error, proceeding with creation:', error);\n      return { recommendedAction: 'create_new' };\n    }\n  }\n\n  /**\n   * Trigger intelligent thought processor workflow\n   */\n  private async triggerIntelligentProcessor(thoughtId: string, userId: string): Promise<void> {\n    try {\n      const n8nUrl = import.meta.env.VITE_N8N_URL;\n      await fetch(`${n8nUrl}/webhook/intelligent-thought-processor`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify({\n          thought_id: thoughtId,\n          user_id: userId,\n          company_id: 'default', // TODO: Get from user context\n          supabase_url: import.meta.env.VITE_SUPABASE_URL,\n          supabase_anon_key: import.meta.env.VITE_SUPABASE_ANON_KEY\n        })\n      });\n    } catch (error) {\n      console.warn('Intelligent thought processor workflow failed:', error);\n      // Don't throw error as thought creation should still succeed\n    }\n  }\n\n  // ====== AI Integration ======\n\n  /**\n   * Generate AI insights for a thought\n   */\n  async generateAIInsights(thoughtId: string): Promise<AIInsights> {\n    const thought = await this.getThought(thoughtId);\n    \n    // Mock AI insights generation (replace with real AI API call)\n    const insights: AIInsights = {\n      suggestions: [\n        `Consider breaking \"${thought.thought.content}\" into smaller, actionable tasks`,\n        `Set a specific deadline to maintain momentum`,\n        `Identify potential obstacles and create contingency plans`\n      ],\n      next_steps: [\n        'Define success criteria',\n        'Identify required resources',\n        'Create implementation timeline'\n      ],\n      related_ideas: [],\n      potential_tasks: [\n        'Research best practices',\n        'Create project outline',\n        'Schedule initial planning session'\n      ],\n      reminders: [\n        'Weekly progress check-in',\n        'Milestone review in 2 weeks'\n      ],\n      priority_score: Math.floor(Math.random() * 100)\n    };\n\n    // Store insights\n    await supabase\n      .from('thoughts')\n      .update({ ai_insights: insights })\n      .eq('id', thoughtId);\n\n    // Log AI interaction\n    await this.logAIInteraction(\n      thoughtId,\n      `Generated insights for: ${thought.thought.content}`,\n      JSON.stringify(insights),\n      'insight'\n    );\n\n    return insights;\n  }\n\n  /**\n   * Get AI interactions for a thought\n   */\n  async getAIInteractions(thoughtId: string): Promise<AIInteraction[]> {\n    const { data, error } = await supabase\n      .from('ai_interactions')\n      .select('*')\n      .eq('thought_id', thoughtId)\n      .order('created_at', { ascending: false });\n\n    if (error) {\n      throw new Error(`Failed to get AI interactions: ${error.message}`);\n    }\n\n    return data || [];\n  }\n\n  /**\n   * Log AI interaction\n   */\n  async logAIInteraction(\n    thoughtId: string,\n    prompt: string,\n    response: string,\n    type: AIInteractionType\n  ): Promise<void> {\n    const { data: { user } } = await supabase.auth.getUser();\n    if (!user?.id) return;\n\n    await supabase\n      .from('ai_interactions')\n      .insert([{\n        user_id: user.id,\n        thought_id: thoughtId,\n        prompt_text: prompt,\n        ai_response: response,\n        interaction_type: type,\n        context_data: {}\n      }]);\n  }\n\n  // ====== Workflow Management ======\n\n  /**\n   * Progress thought through workflow stages\n   */\n  async progressWorkflow(thoughtId: string, newStage: WorkflowStage): Promise<WorkflowProgress> {\n    await supabase\n      .from('thoughts')\n      .update({ workflow_stage: newStage })\n      .eq('id', thoughtId);\n\n    return this.getWorkflowProgress(thoughtId);\n  }\n\n  /**\n   * Get workflow progress for a thought\n   */\n  async getWorkflowProgress(thoughtId: string): Promise<WorkflowProgress> {\n    const thought = await this.getThought(thoughtId);\n    const stages: WorkflowStage[] = ['create_idea', 'update_idea', 'implement_idea', 'achievement'];\n    const currentIndex = stages.indexOf(thought.thought.workflow_stage || 'create_idea');\n    \n    return {\n      idea_id: thoughtId,\n      current_stage: thought.thought.workflow_stage || 'create_idea',\n      completed_stages: stages.slice(0, currentIndex + 1),\n      next_actions: this.getNextActions(thought.thought.workflow_stage || 'create_idea'),\n      progress_percentage: Math.round(((currentIndex + 1) / stages.length) * 100)\n    };\n  }\n\n  // ====== Analytics & Metrics ======\n\n  /**\n   * Get user thought metrics\n   */\n  async getMetrics(): Promise<ThoughtMetrics> {\n    const { data: { user } } = await supabase.auth.getUser();\n    if (!user?.id) {\n      throw new Error('User not authenticated');\n    }\n\n    const { data: thoughts } = await supabase\n      .from('thoughts')\n      .select('category, status')\n      .eq('user_id', user.id);\n\n    if (!thoughts) {\n      return this.getEmptyMetrics();\n    }\n\n    const categoryCount: Record<string, number> = {};\n    const statusCount: Record<string, number> = {};\n\n    thoughts.forEach(t => {\n      categoryCount[t.category] = (categoryCount[t.category] || 0) + 1;\n      statusCount[t.status] = (statusCount[t.status] || 0) + 1;\n    });\n\n    const completedCount = statusCount['completed'] || 0;\n    const totalCount = thoughts.length;\n\n    return {\n      total_thoughts: totalCount,\n      thoughts_by_category: categoryCount as Record<ThoughtCategory, number>,\n      thoughts_by_status: statusCount as Record<ThoughtStatus, number>,\n      completion_rate: totalCount > 0 ? (completedCount / totalCount) * 100 : 0,\n      active_ideas: categoryCount['idea'] || 0,\n      pending_tasks: statusCount['pending'] || 0,\n      overdue_items: statusCount['overdue'] || 0,\n      productivity_score: Math.min(100, (completedCount * 10) + ((statusCount['in_progress'] || 0) * 5))\n    };\n  }\n\n  // ====== Helper Methods ======\n\n  private mapDatabaseToThought(data: any): Thought {\n    return {\n      ...data,\n      creation_date: new Date(data.creation_date || data.created_at),\n      last_updated: new Date(data.last_updated || data.updated_at),\n      created_at: new Date(data.created_at),\n      updated_at: new Date(data.updated_at)\n    };\n  }\n\n  private getNextActions(stage: WorkflowStage): string[] {\n    const actionMap: Record<WorkflowStage, string[]> = {\n      create_idea: ['Define the idea clearly', 'Add relevant details and context'],\n      update_idea: ['Refine the concept', 'Add implementation details'],\n      implement_idea: ['Break into actionable tasks', 'Start execution'],\n      achievement: ['Document lessons learned', 'Celebrate success']\n    };\n    \n    return actionMap[stage] || [];\n  }\n\n  private getEmptyMetrics(): ThoughtMetrics {\n    return {\n      total_thoughts: 0,\n      thoughts_by_category: {} as Record<ThoughtCategory, number>,\n      thoughts_by_status: {} as Record<ThoughtStatus, number>,\n      completion_rate: 0,\n      active_ideas: 0,\n      pending_tasks: 0,\n      overdue_items: 0,\n      productivity_score: 0\n    };\n  }\n}\n\n// Export singleton instance\nexport const thoughtsService = new ThoughtsService(); ","usedDeprecatedRules":[]},{"filePath":"/home/vonj/Github/Nexus/src/lib/services/unifiedInboxService.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":189,"column":20,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":189,"endColumn":23,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[5142,5145],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[5142,5145],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":190,"column":20,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":190,"endColumn":23,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[5175,5178],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[5175,5178],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":195,"column":20,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":195,"endColumn":23,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[5368,5371],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[5368,5371],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":196,"column":20,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":196,"endColumn":23,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[5403,5406],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[5403,5406],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":197,"column":20,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":197,"endColumn":23,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[5451,5454],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[5451,5454],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":198,"column":21,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":198,"endColumn":24,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[5487,5490],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[5487,5490],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":198,"column":46,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":198,"endColumn":49,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[5512,5515],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[5512,5515],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":202,"column":20,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":202,"endColumn":23,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[5678,5681],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[5678,5681],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":203,"column":20,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":203,"endColumn":23,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[5712,5715],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[5712,5715],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":204,"column":20,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":204,"endColumn":23,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[5751,5754],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[5751,5754],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":209,"column":20,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":209,"endColumn":23,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[5926,5929],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[5926,5929],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":209,"column":52,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":209,"endColumn":55,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[5958,5961],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[5958,5961],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":213,"column":20,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":213,"endColumn":23,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[6071,6074],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[6071,6074],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":214,"column":20,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":214,"endColumn":23,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[6113,6116],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[6113,6116],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":215,"column":20,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":215,"endColumn":23,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[6152,6155],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[6152,6155],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":224,"column":31,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":224,"endColumn":34,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[6469,6472],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[6469,6472],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":228,"column":29,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":228,"endColumn":32,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[6626,6629],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[6626,6629],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":229,"column":33,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":229,"endColumn":36,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[6672,6675],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[6672,6675],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":647,"column":47,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":647,"endColumn":50,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[18630,18633],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[18630,18633],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":672,"column":14,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":672,"endColumn":17,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[19185,19188],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[19185,19188],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'err' is defined but never used.","line":1091,"column":14,"nodeType":null,"messageId":"unusedVar","endLine":1091,"endColumn":17}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":21,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\n * Unified Inbox Service\n * Pillar: 2 - Minimum Lovable Feature Set\n * Handles emails, notifications, tasks, and system messages in one unified interface\n * Features: AI-powered prioritization, smart filtering, real-time updates\n */\n\n// // import { Office365SyncProvider } from '../sync/office365';\n// import { EmailProcessor } from './emailProcessor';\nimport { supabase } from '@/lib/core/supabase';\nimport { logger } from '@/lib/security/logger';\n\nexport interface EmailAccount {\n  id: string;\n  user_id: string;\n  company_id: string;\n  email_address: string;\n  display_name?: string;\n  provider: 'gmail' | 'outlook' | 'exchange' | 'imap' | 'smtp';\n  sync_enabled: boolean;\n  sync_status: 'pending' | 'syncing' | 'success' | 'error';\n  last_sync_at?: string;\n  sync_error?: string;\n  sync_frequency?: string;\n  ai_priority_enabled?: boolean;\n  ai_summary_enabled?: boolean;\n  ai_suggestions_enabled?: boolean;\n  ai_auto_categorize_enabled?: boolean;\n  created_at: string;\n}\n\nexport interface EmailMessage {\n  id: string;\n  account_id: string;\n  message_id: string;\n  thread_id?: string;\n  subject?: string;\n  from_email: string;\n  from_name?: string;\n  to_emails: string[];\n  cc_emails?: string[];\n  body_text?: string;\n  body_html?: string;\n  snippet?: string;\n  sent_at: string;\n  is_read: boolean;\n  is_important: boolean;\n  has_attachments: boolean;\n  attachment_count: number;\n  ai_summary?: string;\n  ai_priority_score?: number;\n  ai_category?: string;\n  ai_sentiment?: 'positive' | 'neutral' | 'negative';\n  ai_action_required: boolean;\n}\n\nexport interface InboxItem {\n  id: string;\n  user_id: string;\n  company_id?: string;\n  subject: string;\n  sender_email: string;\n  sender_name?: string;\n  recipient_email: string;\n  content?: string;\n  html_content?: string;\n  message_id?: string;\n  thread_id?: string;\n  in_reply_to?: string;\n  email_references?: string[];\n  ai_priority_score?: number;\n  ai_category?: string;\n  ai_sentiment?: string;\n  ai_summary?: string;\n  ai_action_items?: string[];\n  ai_processed_at?: string;\n  status?: string;\n  is_important?: boolean;\n  is_flagged?: boolean;\n  snooze_until?: string;\n  integration_id?: string;\n  source_type?: string;\n  external_id?: string;\n  received_at: string;\n  created_at?: string;\n  updated_at?: string;\n  \n  // Computed fields for compatibility\n  item_type?: 'email' | 'notification' | 'system' | 'task' | 'calendar';\n  title?: string;\n  preview?: string;\n  sender?: string;\n  is_read?: boolean;\n  is_archived?: boolean;\n  priority_score?: number;\n  item_timestamp?: string;\n  ai_action_suggestion?: string;\n  ai_urgency?: 'low' | 'medium' | 'high' | 'urgent';\n  \n  // Expanded fields when joined with source data\n  email_data?: EmailMessage;\n  body_preview?: string;\n}\n\nexport interface InboxSummary {\n  total_items: number;\n  unread_count: number;\n  important_count: number;\n  urgent_count: number;\n  categories: string[];\n  last_updated: string;\n}\n\nexport interface InboxFilters {\n  is_read?: boolean;\n  is_important?: boolean;\n  item_type?: string[];\n  ai_urgency?: string[];\n  ai_category?: string[];\n  sender?: string;\n  date_from?: string;\n  date_to?: string;\n  search?: string;\n}\n\nexport interface EmailSyncJob {\n  id: string;\n  account_id: string;\n  job_type: 'full_sync' | 'incremental_sync' | 'send_email';\n  status: 'pending' | 'running' | 'completed' | 'failed';\n  total_messages: number;\n  processed_messages: number;\n  error_count: number;\n  created_at: string;\n}\n\nclass UnifiedInboxService {\n  /**\n   * Get inbox items with filtering and pagination\n   */\n  async getInboxItems(\n    filters: InboxFilters = {},\n    limit = 50,\n    offset = 0\n  ): Promise<{ items: InboxItem[]; total: number }> {\n    try {\n      const { data: user } = await supabase.auth.getUser();\n      if (!user.user) throw new Error('User not authenticated');\n\n      let query = supabase\n        .from('ai_inbox_items')\n        .select('*')\n        .eq('user_id', user.user.id)\n        .eq('is_archived', false)\n        .order('item_timestamp', { ascending: false });\n\n      // Apply filters\n      if (filters.is_read !== undefined) {\n        query = query.eq('is_read', filters.is_read);\n      }\n      \n      if (filters.is_important !== undefined) {\n        query = query.eq('is_important', filters.is_important);\n      }\n      \n      if (filters.search) {\n        query = query.or(\n          `title.ilike.%${filters.search}%,preview.ilike.%${filters.search}%,subject.ilike.%${filters.search}%,snippet.ilike.%${filters.search}%`\n        );\n      }\n\n      const { count } = await supabase\n        .from('ai_inbox_items')\n        .select('*', { count: 'exact', head: true })\n        .eq('user_id', user.user.id)\n        .eq('is_archived', false);\n\n      const { data, error } = await query.range(offset, offset + limit - 1);\n\n      if (error) {\n        logger.error({ error }, 'Failed to fetch inbox items');\n        throw error;\n      }\n\n      // Transform data to include computed fields for UI compatibility\n      const transformedItems = (data || []).map(item => {\n        // Title fallback: new column `title` or legacy `subject`\n        const computedTitle =\n          (item as any).title ||\n          (item as any).subject ||\n          '(No subject)';\n\n        // Preview fallback: new `preview`, AI suggestion, legacy `snippet`, or start of `content`\n        const computedPreview =\n          (item as any).preview ||\n          (item as any).ai_action_suggestion ||\n          (item as any).snippet ||\n          ((item as any).content ? ((item as any).content as string).slice(0, 120) : '');\n\n        // Sender fallback: new `sender`, or legacy sender_name/email\n        const computedSender =\n          (item as any).sender ||\n          (item as any).sender_name ||\n          (item as any).sender_email ||\n          '';\n\n        // Priority score fallback: new `priority_score` or legacy `ai_priority_score`\n        const computedPriority =\n          (item as any).priority_score ?? (item as any).ai_priority_score ?? 5;\n\n        // Timestamp fallback\n        const computedTimestamp =\n          (item as any).item_timestamp ||\n          (item as any).received_at ||\n          (item as any).created_at;\n\n        const urgency = computedPriority >= 8 ? 'urgent' :\n                        computedPriority >= 6 ? 'high' :\n                        computedPriority >= 4 ? 'medium' : 'low';\n\n        return {\n          ...item,\n          // Computed fields for UI compatibility\n          item_type: (item as any).item_type || 'email',\n          title: computedTitle,\n          preview: computedPreview,\n          sender: computedSender,\n          is_read: (item as any).is_read,\n          is_archived: (item as any).is_archived,\n          priority_score: computedPriority,\n          item_timestamp: computedTimestamp,\n          ai_urgency: urgency as 'low' | 'medium' | 'high' | 'urgent',\n        };\n      });\n\n      return {\n        items: transformedItems,\n        total: count || 0\n      };\n    } catch (error) {\n      logger.error({ error }, 'Error in getInboxItems');\n      throw error;\n    }\n  }\n\n  /**\n   * Get inbox summary statistics\n   */\n  async getInboxSummary(): Promise<InboxSummary> {\n    try {\n      const { data: user } = await supabase.auth.getUser();\n      if (!user.user) throw new Error('User not authenticated');\n\n      const { data, error } = await supabase\n        .rpc('get_inbox_summary', { p_user_id: user.user.id });\n\n      if (error) {\n        logger.error({ error }, 'Failed to get inbox summary');\n        throw error;\n      }\n\n      return data || {\n        total_items: 0,\n        unread_count: 0,\n        important_count: 0,\n        urgent_count: 0,\n        categories: [],\n        last_updated: new Date().toISOString()\n      };\n    } catch (error) {\n      logger.error({ error }, 'Error in getInboxSummary');\n      throw error;\n    }\n  }\n\n  /**\n   * Mark an item as read or unread\n   */\n  async markAsRead(itemId: string, isRead = true): Promise<void> {\n    const { data: { user } } = await supabase.auth.getUser();\n    if (!user) throw new Error('User not authenticated');\n\n    const { error } = await supabase\n      .from('ai_inbox_items')\n      .update({ is_read: isRead })\n      .eq('id', itemId)\n      .eq('user_id', user.id);\n    if (error) {\n      logger.error({ error, itemId }, 'Failed to mark item as read');\n      throw error;\n    }\n  }\n\n  /**\n   * Mark multiple items as read or unread\n   */\n  async markMultipleAsRead(itemIds: string[], isRead = true): Promise<void> {\n    const { data: { user } } = await supabase.auth.getUser();\n    if (!user) throw new Error('User not authenticated');\n\n    const { error } = await supabase\n      .from('ai_inbox_items')\n      .update({ is_read: isRead })\n      .in('id', itemIds)\n      .eq('user_id', user.id);\n    if (error) {\n      logger.error({ error, itemIds }, 'Failed to mark multiple items as read');\n      throw error;\n    }\n  }\n\n  /**\n   * Archive an item\n   */\n  async archiveItem(itemId: string): Promise<void> {\n    const { data: { user } } = await supabase.auth.getUser();\n    if (!user) throw new Error('User not authenticated');\n\n    const { error } = await supabase\n      .from('ai_inbox_items')\n      .update({ is_archived: true })\n      .eq('id', itemId)\n      .eq('user_id', user.id);\n    if (error) {\n      logger.error({ error, itemId }, 'Failed to archive item');\n      throw error;\n    }\n  }\n  \n  /**\n   * Archive multiple items\n   */\n  async archiveMultiple(itemIds: string[]): Promise<void> {\n    const { data: { user } } = await supabase.auth.getUser();\n    if (!user) throw new Error('User not authenticated');\n    \n    const { error } = await supabase\n      .from('ai_inbox_items')\n      .update({ is_archived: true })\n      .in('id', itemIds)\n      .eq('user_id', user.id);\n    if (error) {\n      logger.error({ error, itemIds }, 'Failed to archive multiple items');\n      throw error;\n    }\n  }\n\n  /**\n   * Toggle an item's important status\n   */\n  async toggleImportant(itemId: string): Promise<void> {\n    try {\n      // Get current status\n      const { data: item } = await supabase\n        .from('ai_inbox_items')\n        .select('is_important')\n        .eq('id', itemId)\n        .single();\n\n      if (!item) throw new Error('Item not found');\n\n      const { error } = await supabase\n        .from('ai_inbox_items')\n        .update({ \n          is_important: !item.is_important, \n          updated_at: new Date().toISOString() \n        })\n        .eq('id', itemId);\n\n      if (error) {\n        logger.error({ error, itemId }, 'Failed to toggle important status');\n        throw error;\n      }\n    } catch (error) {\n      logger.error({ error }, 'Error in toggleImportant');\n      throw error;\n    }\n  }\n\n  /**\n   * Get email accounts for the current user\n   */\n  async getEmailAccounts(): Promise<EmailAccount[]> {\n    try {\n      const { data, error } = await supabase\n        .from('ai_email_accounts')\n        .select('*')\n        .order('created_at', { ascending: false });\n\n      if (error) {\n        logger.error({ error }, 'Failed to fetch email accounts');\n        throw error;\n      }\n\n      return data || [];\n    } catch (error) {\n      logger.error({ error }, 'Error in getEmailAccounts');\n      throw error;\n    }\n  }\n\n  /**\n   * Add email account\n   */\n  async addEmailAccount(accountData: {\n    email_address: string;\n    display_name?: string;\n    provider: 'gmail' | 'outlook' | 'exchange' | 'imap' | 'smtp';\n    access_token?: string;\n    refresh_token?: string;\n    imap_host?: string;\n    imap_port?: number;\n    smtp_host?: string;\n    smtp_port?: number;\n    sync_frequency?: string;\n    ai_priority_enabled?: boolean;\n    ai_summary_enabled?: boolean;\n    ai_suggestions_enabled?: boolean;\n    ai_auto_categorize_enabled?: boolean;\n  }): Promise<EmailAccount> {\n    try {\n      const { data: user } = await supabase.auth.getUser();\n      if (!user.user) throw new Error('User not authenticated');\n\n      // Get user's company\n      const { data: profile } = await supabase\n        .from('user_profiles')\n        .select('company_id')\n        .eq('id', user.user.id)\n        .single();\n\n      if (!profile?.company_id) throw new Error('User company not found');\n\n      const { data, error } = await supabase\n        .from('ai_email_accounts')\n        .upsert(\n          {\n            user_id: user.user.id,\n            company_id: profile.company_id,\n            ...accountData,\n          },\n          {\n            onConflict: 'user_id,email_address',\n            ignoreDuplicates: false,\n          },\n        )\n        .select()\n        .single();\n\n      if (error) {\n        logger.error({ error }, 'Failed to add email account');\n        throw error;\n      }\n\n      return data;\n    } catch (error) {\n      logger.error({ error }, 'Error in addEmailAccount');\n      throw error;\n    }\n  }\n\n  /**\n   * Remove email account\n   */\n  async removeEmailAccount(accountId: string): Promise<void> {\n    try {\n      const { error } = await supabase\n        .from('ai_email_accounts')\n        .delete()\n        .eq('id', accountId);\n\n      if (error) {\n        logger.error({ error, accountId }, 'Failed to remove email account');\n        throw error;\n      }\n    } catch (error) {\n      logger.error({ error }, 'Error in removeEmailAccount');\n      throw error;\n    }\n  }\n\n  /**\n   * Get sync jobs for monitoring\n   */\n  async getSyncJobs(accountId?: string): Promise<EmailSyncJob[]> {\n    try {\n      let query = supabase\n        .from('ai_email_sync_jobs')\n        .select('*')\n        .order('created_at', { ascending: false })\n        .limit(20);\n\n      if (accountId) {\n        query = query.eq('account_id', accountId);\n      }\n\n      const { data, error } = await query;\n\n      if (error) {\n        logger.error({ error }, 'Failed to fetch sync jobs');\n        throw error;\n      }\n\n      return data || [];\n    } catch (error) {\n      logger.error({ error }, 'Error in getSyncJobs');\n      throw error;\n    }\n  }\n\n  /**\n   * Get available categories for filtering\n   */\n  async getCategories(): Promise<string[]> {\n    try {\n      const { data, error } = await supabase\n        .from('ai_inbox_items')\n        .select('ai_category')\n        .not('ai_category', 'is', null)\n        .eq('is_archived', false);\n\n      if (error) {\n        logger.error({ error }, 'Failed to fetch categories');\n        throw error;\n      }\n\n      const categories = [...new Set(data.map(item => item.ai_category).filter(Boolean))];\n      return categories.sort();\n    } catch (error) {\n      logger.error({ error }, 'Error in getCategories');\n      throw error;\n    }\n  }\n\n  /**\n   * Get AI-powered inbox insights\n   */\n  async getInboxInsights(): Promise<{\n    top_senders: Array<{ sender: string; count: number; avg_priority: number }>;\n    category_breakdown: Array<{ category: string; count: number; unread_count: number }>;\n    urgency_distribution: Array<{ urgency: string; count: number }>;\n    response_suggestions: Array<{ item_id: string; suggestion: string }>;\n  }> {\n    try {\n      // Top senders analysis\n      const { data: senderData } = await supabase\n        .from('ai_inbox_items')\n        .select('sender, priority_score')\n        .eq('is_archived', false);\n\n      const senderMap = new Map<string, { count: number; total_priority: number }>();\n      senderData?.forEach(item => {\n        const senderKey = item.sender;\n        if (senderKey) {\n          const existing = senderMap.get(senderKey) || { count: 0, total_priority: 0 };\n          senderMap.set(senderKey, {\n            count: existing.count + 1,\n            total_priority: existing.total_priority + (item.priority_score || 5)\n          });\n        }\n      });\n\n      const top_senders = Array.from(senderMap.entries())\n        .map(([sender, stats]) => ({\n          sender,\n          count: stats.count,\n          avg_priority: Math.round(stats.total_priority / stats.count)\n        }))\n        .sort((a, b) => b.count - a.count)\n        .slice(0, 10);\n\n      // Category breakdown\n      const { data: categoryData } = await supabase\n        .from('ai_inbox_items')\n        .select('ai_category, is_read')\n        .not('ai_category', 'is', null)\n        .eq('is_archived', false);\n\n      const categoryMap = new Map<string, { count: number; unread_count: number }>();\n      categoryData?.forEach(item => {\n        if (item.ai_category) {\n          const existing = categoryMap.get(item.ai_category) || { count: 0, unread_count: 0 };\n          categoryMap.set(item.ai_category, {\n            count: existing.count + 1,\n            unread_count: existing.unread_count + (item.is_read ? 0 : 1)\n          });\n        }\n      });\n\n      const category_breakdown = Array.from(categoryMap.entries())\n        .map(([category, stats]) => ({ category, ...stats }))\n        .sort((a, b) => b.count - a.count);\n\n      // Urgency distribution (computed from priority_score)\n      const { data: urgencyData } = await supabase\n        .from('ai_inbox_items')\n        .select('priority_score')\n        .not('priority_score', 'is', null)\n        .eq('is_archived', false);\n\n      const urgencyMap = new Map<string, number>();\n      urgencyData?.forEach(item => {\n        if (item.priority_score !== null) {\n          const urgency = item.priority_score >= 8 ? 'urgent' :\n                         item.priority_score >= 6 ? 'high' :\n                         item.priority_score >= 4 ? 'medium' : 'low';\n          urgencyMap.set(urgency, (urgencyMap.get(urgency) || 0) + 1);\n        }\n      });\n\n      const urgency_distribution = Array.from(urgencyMap.entries())\n        .map(([urgency, count]) => ({ urgency, count }))\n        .sort((a, b) => {\n          const order = { urgent: 4, high: 3, medium: 2, low: 1 };\n          return (order[b.urgency as keyof typeof order] || 0) - (order[a.urgency as keyof typeof order] || 0);\n        });\n\n      // Response suggestions (using ai_action_suggestion instead of ai_summary)\n      const { data: actionItems } = await supabase\n        .from('ai_inbox_items')\n        .select('id, ai_action_suggestion')\n        .not('ai_action_suggestion', 'is', null)\n        .eq('is_read', false)\n        .eq('is_archived', false)\n        .limit(5);\n\n      const response_suggestions = (actionItems || []).map(item => ({\n        item_id: item.id,\n        suggestion: item.ai_action_suggestion\n      }));\n\n      return {\n        top_senders,\n        category_breakdown,\n        urgency_distribution,\n        response_suggestions\n      };\n    } catch (error) {\n      logger.error({ error }, 'Error in getInboxInsights');\n      throw error;\n    }\n  }\n\n  /**\n   * Subscribe to real-time inbox updates\n   */\n  subscribeToInboxUpdates(callback: (payload: any) => void) {\n    const channel = supabase\n      .channel('unified-inbox-updates')\n      .on(\n        'postgres_changes',\n        { event: '*', schema: 'public', table: 'ai_inbox_items' },\n        (payload) => {\n          callback(payload);\n        }\n      )\n      .subscribe();\n\n    return {\n      unsubscribe: () => {\n        supabase.removeChannel(channel);\n      },\n    };\n  }\n\n  /**\n   * Start a new email sync job\n   */\n  async startEmailSync(\n    accountId: string,\n    jobType: 'full_sync' | 'incremental_sync' = 'incremental_sync'\n  ): Promise<any> {\n    const { data, error } = await supabase.functions.invoke('ai_email_sync', {\n      body: {\n        account_id: accountId,\n        job_type: jobType,\n      },\n    });\n\n    if (error) {\n      logger.error({ error, accountId, jobType }, 'Failed to invoke email sync function');\n      throw error;\n    }\n    return data;\n  }\n\n  /**\n   * Automatically sets up an Office 365 email account after OAuth.\n   * Now requires an organization ID.\n   * Pillar: 1, 2\n   */\n  async autoSetupOffice365Account(orgId: string): Promise<EmailAccount | null> {\n    if (!orgId) {\n      const err = new Error('Organization ID is required to set up an Office 365 account.');\n      logger.error({ error: err }, 'autoSetupOffice365Account called without orgId.');\n      throw err;\n    }\n\n    try {\n      const { data: { user } } = await supabase.auth.getUser();\n      if (!user) throw new Error('User not authenticated for Office 365 setup.');\n      \n      // Import the microsoftGraphService dynamically to avoid circular dependencies\n      const { microsoftGraphService } = await import('./microsoftGraphService');\n      \n      // Initialize Microsoft Graph service\n      const initialized = microsoftGraphService.initialize();\n      if (!initialized) {\n        throw new Error('Failed to initialize Microsoft Graph service');\n      }\n      \n      // Check if we're connected to Microsoft Graph\n      const isConnected = microsoftGraphService.isConnected();\n      if (!isConnected) {\n        throw new Error('Not connected to Microsoft Graph. Please connect first.');\n      }\n      \n      // Get user profile from Microsoft Graph\n      const profile = await microsoftGraphService.getCurrentUser();\n      if (!profile) {\n        throw new Error('Failed to get Microsoft Graph user profile');\n      }\n      \n      const emailAddress = profile.mail || profile.userPrincipalName;\n      if (!emailAddress) {\n        throw new Error('No email address found in Microsoft Graph profile');\n      }\n\n      // Check if an account already exists for this user and organization\n      const { data: existingAccount, error: existingError } = await supabase\n        .from('ai_email_accounts')\n        .select('id')\n        .eq('email_address', emailAddress)\n        .eq('company_id', orgId) // Use the orgId for the check\n        .eq('provider', 'outlook')\n        .maybeSingle();\n\n      if (existingError) {\n        logger.error({ error: existingError }, 'Error checking for existing Office 365 account.');\n        throw existingError;\n      }\n      \n      if (existingAccount) {\n        logger.info({ userId: user.id, orgId }, 'Office 365 account already exists for this user and organization.');\n        // Trigger a fresh sync for the existing account as well\n        try {\n          await this.startEmailSync(existingAccount.id, 'full_sync');\n        } catch (syncErr) {\n          logger.error({ error: syncErr }, 'Failed to start sync for existing Office 365 account');\n        }\n        return existingAccount as EmailAccount;\n      }\n      \n      const newAccount: Partial<EmailAccount> = {\n        user_id: user.id,\n        company_id: orgId,\n        email_address: emailAddress,\n        display_name: profile.displayName || emailAddress,\n        provider: 'outlook',\n        sync_enabled: true,\n        sync_status: 'pending',\n        ai_priority_enabled: true,\n        ai_summary_enabled: true,\n        ai_suggestions_enabled: true,\n        ai_auto_categorize_enabled: false,\n        sync_frequency: '15min',\n      };\n\n      const { data: createdAccount, error: insertError } = await supabase\n        .from('ai_email_accounts')\n        .insert(newAccount)\n        .select()\n        .single();\n      \n      if (insertError) {\n        logger.error({ error: insertError, email: emailAddress }, 'Failed to insert new Office 365 email account');\n        throw insertError;\n      }\n\n      logger.info({ accountId: createdAccount.id, orgId }, 'Successfully created Office 365 email account.');\n\n      // Kick off first full sync immediately\n      try {\n        await this.startEmailSync(createdAccount.id, 'full_sync');\n      } catch (syncErr) {\n        logger.error({ error: syncErr }, 'Failed to start initial sync for new Office 365 account');\n      }\n\n      return createdAccount;\n\n    } catch (error) {\n      logger.error({ error }, 'Auto-setup for Office 365 account failed.');\n      throw error;\n    }\n  }\n\n  /**\n   * Migrate existing Office 365 integrations to ai_email_accounts for the current user/org.\n   * Upserts an account for each active 365 integration not already present in ai_email_accounts.\n   * Triggers a sync job for each new account.\n   */\n  async migrateOffice365IntegrationsToEmailAccounts(): Promise<{ created: number, skipped: number, errors: string[] }> {\n    console.log('Starting Office 365 migration...');\n    const results = { created: 0, skipped: 0, errors: [] };\n    \n    try {\n      const { data: { user } } = await supabase.auth.getUser();\n      if (!user) {\n        const error = 'User not authenticated';\n        console.error(error);\n        results.errors.push(error);\n        return results;\n      }\n      console.log('User authenticated:', user.id);\n      \n      // Get user's company\n      const { data: profile } = await supabase\n        .from('user_profiles')\n        .select('company_id')\n        .eq('id', user.id)\n        .single();\n      \n      if (!profile?.company_id) {\n        const error = 'User company not found';\n        console.error(error);\n        results.errors.push(error);\n        return results;\n      }\n      console.log('Company found:', profile.company_id);\n\n      // Get Office 365 integration id\n      const { data: integration } = await supabase\n        .from('integrations')\n        .select('id')\n        .eq('slug', 'office-365')\n        .single();\n        \n      if (!integration) {\n        const error = 'Office 365 integration not found';\n        console.error(error);\n        results.errors.push(error);\n        return results;\n      }\n      console.log('Integration found:', integration.id);\n\n      // Get all active user_integrations for this user/org/integration\n      const { data: userIntegrations, error: userIntError } = await supabase\n        .from('user_integrations')\n        .select('id, credentials, status, updated_at')\n        .eq('user_id', user.id)\n        .eq('company_id', profile.company_id)\n        .eq('integration_id', integration.id)\n        .eq('status', 'active');\n        \n      if (userIntError) {\n        console.error('Error fetching user integrations:', userIntError);\n        results.errors.push(`Error fetching integrations: ${userIntError.message}`);\n        return results;\n      }\n      \n      if (!userIntegrations || userIntegrations.length === 0) {\n        console.log('No active Office 365 integrations found');\n        return results;\n      }\n      \n      console.log(`Found ${userIntegrations.length} integration(s) to process`);\n\n      // Import Microsoft Graph service early to handle initialization\n      const { microsoftGraphService } = await import('./microsoftGraphService');\n      let graphInitialized = false;\n      try {\n        graphInitialized = microsoftGraphService.initialize();\n        console.log('Microsoft Graph initialized:', graphInitialized);\n      } catch (err) {\n        console.warn('Failed to initialize Microsoft Graph:', err);\n      }\n\n      for (const integ of userIntegrations) {\n        console.log(`Processing integration ${integ.id}...`);\n        \n        // Try to get email from credentials\n        let email: string | undefined = undefined;\n        let displayName: string | undefined = undefined;\n        \n        if (integ.credentials) {\n          // Try different possible locations in credentials\n          email = integ.credentials.username || \n                 integ.credentials.email ||\n                 (typeof integ.credentials === 'string' ? integ.credentials : undefined);\n          \n          console.log('Email from credentials:', email || 'Not found');\n        }\n        \n        // If no email from credentials, try Microsoft Graph\n        if (!email && graphInitialized) {\n          try {\n            console.log('Trying to get email from Microsoft Graph...');\n            const isConnected = microsoftGraphService.isConnected();\n            console.log('Microsoft Graph connected:', isConnected);\n            \n            if (isConnected) {\n              const profile = await microsoftGraphService.getCurrentUser();\n              email = profile?.mail || profile?.userPrincipalName;\n              displayName = profile?.displayName;\n              console.log('Email from Graph:', email || 'Not found');\n            }\n          } catch (err) {\n            console.warn('Failed to get email from Microsoft Graph:', err);\n          }\n        }\n        \n        // Last resort: try to get from user profile\n        if (!email) {\n          email = user.email;\n          console.log('Using user email as fallback:', email || 'Not available');\n        }\n        \n        if (!email) {\n          console.error('Could not determine email for integration:', integ.id);\n          results.errors.push(`Could not determine email for integration: ${integ.id}`);\n          continue;\n        }\n\n        // Check if already in ai_email_accounts\n        const { data: existing } = await supabase\n          .from('ai_email_accounts')\n          .select('id')\n          .eq('user_id', user.id)\n          .eq('company_id', profile.company_id)\n          .eq('email_address', email)\n          .eq('provider', 'outlook')\n          .maybeSingle();\n          \n        if (existing) {\n          console.log(`Account already exists for ${email}, skipping`);\n          results.skipped++;\n          continue;\n        }\n\n        // Upsert new account\n        try {\n          console.log(`Creating account for ${email}...`);\n          const { data: created, error: insertError } = await supabase\n            .from('ai_email_accounts')\n            .insert({\n              user_id: user.id,\n              company_id: profile.company_id,\n              email_address: email,\n              display_name: displayName || email,\n              provider: 'outlook',\n              sync_enabled: true,\n              sync_status: 'pending',\n              ai_priority_enabled: true,\n              ai_summary_enabled: true,\n              ai_suggestions_enabled: true,\n              ai_auto_categorize_enabled: false,\n              sync_frequency: '15min',\n            })\n            .select()\n            .single();\n            \n          if (insertError) {\n            console.error('Failed to insert account:', insertError);\n            results.errors.push(`Failed to insert account for ${email}: ${insertError.message}`);\n            continue;\n          }\n          \n          console.log(`Account created with ID ${created.id}`);\n          results.created++;\n\n          // Start sync job\n          try {\n            console.log(`Starting sync job for account ${created.id}...`);\n            await this.startEmailSync(created.id, 'full_sync');\n            console.log('Sync job started successfully');\n          } catch (err) {\n            console.warn('Failed to start sync job:', err);\n            // Not fatal\n          }\n        } catch (err) {\n          console.error('Error creating account:', err);\n          results.errors.push(`Error creating account for ${email}: ${err instanceof Error ? err.message : String(err)}`);\n        }\n      }\n    } catch (err) {\n      console.error('Migration failed:', err);\n      results.errors.push(`Migration failed: ${err instanceof Error ? err.message : String(err)}`);\n    }\n    \n    console.log('Migration complete:', results);\n    return results;\n  }\n\n  /**\n   * Discover integrations that can be activated as mailboxes (no ai_email_accounts row yet).\n   */\n  async discoverActivatableIntegrations(): Promise<Array<{integrationId: string, provider: string, email: string, displayName?: string}>> {\n    const { data: { user } } = await supabase.auth.getUser();\n    if (!user) return [];\n    const { data: profile } = await supabase\n      .from('user_profiles')\n      .select('company_id')\n      .eq('id', user.id)\n      .single();\n    if (!profile?.company_id) return [];\n\n    // Get all active user_integrations for this user/org\n    const { data: userIntegrations } = await supabase\n      .from('user_integrations')\n      .select('id, integration_id, credentials, status, integration:integration_id(slug, provider, name)')\n      .eq('user_id', user.id)\n      .eq('company_id', profile.company_id)\n      .eq('status', 'active');\n    if (!userIntegrations) return [];\n\n    // For each, check if an ai_email_accounts row exists\n    const activatable: Array<{integrationId: string, provider: string, email: string, displayName?: string}> = [];\n    for (const integ of userIntegrations) {\n      // Only consider office-365 for now (can add more later)\n      if (integ.integration?.slug !== 'office-365') continue;\n      const email = integ.credentials?.username || integ.credentials?.email || undefined;\n      const displayName = integ.credentials?.displayName || undefined;\n      // If no email, skip\n      if (!email) continue;\n      // Check if already in ai_email_accounts\n      const { data: existing } = await supabase\n        .from('ai_email_accounts')\n        .select('id')\n        .eq('user_id', user.id)\n        .eq('company_id', profile.company_id)\n        .eq('email_address', email)\n        .eq('provider', 'outlook')\n        .maybeSingle();\n      if (existing) continue;\n      activatable.push({\n        integrationId: integ.id,\n        provider: 'outlook',\n        email,\n        displayName\n      });\n    }\n    return activatable;\n  }\n\n  /**\n   * Activate a user_integration as a mailbox (create ai_email_accounts row and trigger sync).\n   */\n  async activateIntegrationAsMailbox(integrationId: string): Promise<EmailAccount> {\n    const { data: { user } } = await supabase.auth.getUser();\n    if (!user) throw new Error('User not authenticated');\n    const { data: profile } = await supabase\n      .from('user_profiles')\n      .select('company_id')\n      .eq('id', user.id)\n      .single();\n    if (!profile?.company_id) throw new Error('User company not found');\n    // Get the integration\n    const { data: integ } = await supabase\n      .from('user_integrations')\n      .select('id, credentials, integration:integration_id(slug, provider, name)')\n      .eq('id', integrationId)\n      .single();\n    if (!integ) throw new Error('Integration not found');\n    if (integ.integration?.slug !== 'office-365') throw new Error('Only office-365 supported for activation');\n    const email = integ.credentials?.username || integ.credentials?.email || undefined;\n    const displayName = integ.credentials?.displayName || email;\n    if (!email) throw new Error('No email found in integration credentials');\n    // Upsert ai_email_accounts\n    const { data: created, error: insertError } = await supabase\n      .from('ai_email_accounts')\n      .insert({\n        user_id: user.id,\n        company_id: profile.company_id,\n        email_address: email,\n        display_name: displayName || email,\n        provider: 'outlook',\n        sync_enabled: true,\n        sync_status: 'pending',\n        ai_priority_enabled: true,\n        ai_summary_enabled: true,\n        ai_suggestions_enabled: true,\n        ai_auto_categorize_enabled: false,\n        sync_frequency: '15min',\n      })\n      .select()\n      .single();\n    if (insertError) throw insertError;\n    // Start sync job\n    try {\n      await this.startEmailSync(created.id, 'full_sync');\n    } catch (err) {\n      // Not fatal\n    }\n    return created;\n  }\n}\n\nexport const unifiedInboxService = new UnifiedInboxService(); ","usedDeprecatedRules":[]},{"filePath":"/home/vonj/Github/Nexus/src/lib/services/userDataService.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/vonj/Github/Nexus/src/lib/services/userService.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":29,"column":53,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":29,"endColumn":56,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[971,974],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[971,974],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":48,"column":29,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":48,"endColumn":32,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1538,1541],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1538,1541],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { supabase } from '@/lib/core/supabase';\nimport { logger } from '@/lib/security/logger';\n\nclass UserService {\n  async deleteAccount(): Promise<void> {\n    try {\n      const { data: { user } } = await supabase.auth.getUser();\n      if (!user) {\n        throw new Error('User not authenticated');\n      }\n      \n      // In a real application, this should call a backend function\n      // that deletes all user data from all tables, revokes tokens,\n      // and performs other cleanup.\n      logger.warn({ userId: user.id }, 'User initiated account deletion. For now, only signing out.');\n\n      const { error } = await supabase.auth.signOut();\n      if (error) throw error;\n      \n      // Redirect to home page after sign out\n      window.location.href = '/';\n\n    } catch (error) {\n      logger.error({ err: error }, 'Failed to delete account');\n      throw new Error('Failed to delete account.');\n    }\n  }\n  \n  async getLoginHistory(limit: number = 5): Promise<any[]> {\n    try {\n        const { data: { user } } = await supabase.auth.getUser();\n        if (!user) {\n            throw new Error('User not authenticated');\n        }\n\n        const { data, error } = await supabase\n            .from('audit_log_events')\n            .select('payload')\n            .eq('actor_id', user.id)\n            .order('created_at', { ascending: false })\n            .limit(limit);\n\n        if (error) {\n            throw error;\n        }\n\n        // The action is stored in the payload, so we need to extract it.\n        return data.map((d: any) => ({\n            action: d.payload.action,\n            timestamp: d.payload.timestamp,\n            ...d.payload\n        }));\n    } catch (error) {\n        logger.error({ err: error }, 'Failed to fetch login history');\n        return [];\n    }\n  }\n}\n\nexport const userService = new UserService(); ","usedDeprecatedRules":[]},{"filePath":"/home/vonj/Github/Nexus/src/lib/services/waitlistService.ts","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'errorMessage' is assigned a value but never used.","line":122,"column":15,"nodeType":null,"messageId":"unusedVar","endLine":122,"endColumn":27},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'errorMessage' is assigned a value but never used.","line":132,"column":13,"nodeType":null,"messageId":"unusedVar","endLine":132,"endColumn":25},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'errorMessage' is assigned a value but never used.","line":170,"column":13,"nodeType":null,"messageId":"unusedVar","endLine":170,"endColumn":25},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'errorMessage' is assigned a value but never used.","line":215,"column":13,"nodeType":null,"messageId":"unusedVar","endLine":215,"endColumn":25},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'errorMessage' is assigned a value but never used.","line":262,"column":13,"nodeType":null,"messageId":"unusedVar","endLine":262,"endColumn":25},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'errorMessage' is assigned a value but never used.","line":309,"column":13,"nodeType":null,"messageId":"unusedVar","endLine":309,"endColumn":25}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\n * @file waitlistService.ts\n * @description Service for managing waitlist signups and operations\n */\n\nimport { supabase } from '../core/supabase';\nimport { logger } from '@/lib/security/logger';\n// Import HubSpot service for CRM integration\nimport { hubspotService } from './hubspotService';\n\nexport interface WaitlistMetadata {\n  [key: string]: string | number | boolean | null | undefined;\n}\n\nexport interface WaitlistSignup {\n  id?: string;\n  email: string;\n  first_name: string;\n  company_name?: string;\n  referral_code?: string;\n  referred_by_code?: string;\n  position: number;\n  tier: 'early-bird' | 'vip' | 'founder';\n  referral_count: number;\n  metadata?: WaitlistMetadata;\n  created_at?: string;\n  updated_at?: string;\n}\n\nexport interface WaitlistStats {\n  total_signups: number;\n  founder_spots_taken: number;\n  vip_spots_taken: number;\n  early_bird_signups: number;\n  last_signup_at: string | null;\n}\n\nexport interface SignupResult {\n  success: boolean;\n  data?: WaitlistSignup;\n  error?: string;\n}\n\nexport interface StatsResult {\n  success: boolean;\n  data?: WaitlistStats;\n  error?: string;\n}\n\nclass WaitlistService {\n  /**\n   * Submit a new waitlist signup\n   */\n  async submitSignup(signupData: {\n    email: string;\n    firstName: string;\n    company?: string;\n    referredByCode?: string;\n  }): Promise<SignupResult> {\n    try {\n      const { data, error } = await supabase\n        .from('waitlist_signups')\n        .insert([\n          {\n            email: signupData.email.toLowerCase().trim(),\n            first_name: signupData.firstName.trim(),\n            company_name: signupData.company?.trim() || null,\n            referred_by_code: signupData.referredByCode?.toUpperCase() || null,\n          }\n        ])\n        .select()\n        .single();\n\n      if (error) {\n        logger.error({ err: error }, 'Waitlist signup error');\n        \n        // Handle specific error cases\n        if (error.code === '23505') { // Unique constraint violation\n          return {\n            success: false,\n            error: 'This email is already on the waitlist. Check your inbox for your position!'\n          };\n        }\n        \n        return {\n          success: false,\n          error: 'Failed to join waitlist. Please try again.'\n        };\n      }\n\n      const waitlistData = {\n        id: data.id,\n        email: data.email,\n        first_name: data.first_name,\n        company_name: data.company_name,\n        referral_code: data.referral_code,\n        referred_by_code: data.referred_by_code,\n        position: data.position,\n        tier: data.tier as 'early-bird' | 'vip' | 'founder',\n        referral_count: data.referral_count,\n        metadata: data.metadata,\n        created_at: data.created_at,\n        updated_at: data.updated_at,\n      };\n\n      // Sync to HubSpot CRM for lead management\n      try {\n        const hubspotResult = await hubspotService.syncWaitlistSignup({\n          email: waitlistData.email,\n          firstName: waitlistData.first_name,\n          company: waitlistData.company_name,\n          tier: waitlistData.tier,\n          referralCode: waitlistData.referral_code\n        });\n        if (!hubspotResult.success) {\n          logger.warn({ error: hubspotResult.error }, 'HubSpot sync failed');\n          // Don't fail the signup if HubSpot sync fails, just log it\n        } else {\n          logger.info({ contactId: hubspotResult.contactId }, 'Successfully synced to HubSpot');\n        }\n      } catch (hubspotError) {\n        const errorMessage = hubspotError instanceof Error ? hubspotError.message : String(hubspotError);\n        logger.warn({ err: hubspotError }, 'HubSpot sync error');\n        // Continue with successful signup even if HubSpot sync fails\n      }\n\n      return {\n        success: true,\n        data: waitlistData\n      };\n    } catch (error) {\n      const errorMessage = error instanceof Error ? error.message : String(error);\n      logger.error({ err: error }, 'Waitlist service error');\n      return {\n        success: false,\n        error: 'Network error. Please check your connection and try again.'\n      };\n    }\n  }\n\n  /**\n   * Get waitlist statistics (total signups, spots taken, etc.)\n   */\n  async getStats(): Promise<StatsResult> {\n    try {\n      const { data, error } = await supabase\n        .from('waitlist_stats')\n        .select('*')\n        .single();\n\n      if (error) {\n        logger.error({ err: error }, 'Failed to fetch waitlist stats');\n        return {\n          success: false,\n          error: 'Failed to load waitlist statistics'\n        };\n      }\n\n      return {\n        success: true,\n        data: {\n          total_signups: data.total_signups || 0,\n          founder_spots_taken: data.founder_spots_taken || 0,\n          vip_spots_taken: data.vip_spots_taken || 0,\n          early_bird_signups: data.early_bird_signups || 0,\n          last_signup_at: data.last_signup_at\n        }\n      };\n    } catch (error) {\n      const errorMessage = error instanceof Error ? error.message : String(error);\n      logger.error({ err: error }, 'Stats service error');\n      return {\n        success: false,\n        error: 'Failed to load statistics'\n      };\n    }\n  }\n\n  /**\n   * Get signup by referral code\n   */\n  async getSignupByReferralCode(referralCode: string): Promise<SignupResult> {\n    try {\n      const { data, error } = await supabase\n        .from('waitlist_signups')\n        .select('*')\n        .eq('referral_code', referralCode.toUpperCase())\n        .single();\n\n      if (error || !data) {\n        return {\n          success: false,\n          error: 'Referral code not found'\n        };\n      }\n\n      return {\n        success: true,\n        data: {\n          id: data.id,\n          email: data.email,\n          first_name: data.first_name,\n          company_name: data.company_name,\n          referral_code: data.referral_code,\n          referred_by_code: data.referred_by_code,\n          position: data.position,\n          tier: data.tier as 'early-bird' | 'vip' | 'founder',\n          referral_count: data.referral_count,\n          metadata: data.metadata,\n          created_at: data.created_at,\n          updated_at: data.updated_at,\n        }\n      };\n    } catch (error) {\n      const errorMessage = error instanceof Error ? error.message : String(error);\n      logger.error({ err: error }, 'Get signup by referral code error');\n      return {\n        success: false,\n        error: 'Failed to fetch signup data'\n      };\n    }\n  }\n\n  /**\n   * Check if email is already signed up\n   */\n  async checkEmailExists(email: string): Promise<{ exists: boolean; signup?: WaitlistSignup }> {\n    try {\n      const { data, error } = await supabase\n        .from('waitlist_signups')\n        .select('*')\n        .eq('email', email.toLowerCase().trim())\n        .single();\n\n      if (error && error.code !== 'PGRST116') { // PGRST116 = no rows returned\n        logger.error({ err: error }, 'Check email exists error');\n        return { exists: false };\n      }\n\n      if (data) {\n        return {\n          exists: true,\n          signup: {\n            id: data.id,\n            email: data.email,\n            first_name: data.first_name,\n            company_name: data.company_name,\n            referral_code: data.referral_code,\n            referred_by_code: data.referred_by_code,\n            position: data.position,\n            tier: data.tier as 'early-bird' | 'vip' | 'founder',\n            referral_count: data.referral_count,\n            metadata: data.metadata,\n            created_at: data.created_at,\n            updated_at: data.updated_at,\n          }\n        };\n      }\n\n      return { exists: false };\n    } catch (error) {\n      const errorMessage = error instanceof Error ? error.message : String(error);\n      logger.error({ err: error }, 'Check email exists service error');\n      return { exists: false };\n    }\n  }\n\n  /**\n   * Update signup metadata (for tracking engagement, preferences, etc.)\n   */\n  async updateSignupMetadata(email: string, metadata: WaitlistMetadata): Promise<SignupResult> {\n    try {\n      const { data, error } = await supabase\n        .from('waitlist_signups')\n        .update({ \n          metadata: metadata,\n          updated_at: new Date().toISOString()\n        })\n        .eq('email', email.toLowerCase().trim())\n        .select()\n        .single();\n\n      if (error) {\n        logger.error({ err: error }, 'Update metadata error');\n        return {\n          success: false,\n          error: 'Failed to update signup data'\n        };\n      }\n\n      return {\n        success: true,\n        data: {\n          id: data.id,\n          email: data.email,\n          first_name: data.first_name,\n          company_name: data.company_name,\n          referral_code: data.referral_code,\n          referred_by_code: data.referred_by_code,\n          position: data.position,\n          tier: data.tier as 'early-bird' | 'vip' | 'founder',\n          referral_count: data.referral_count,\n          metadata: data.metadata,\n          created_at: data.created_at,\n          updated_at: data.updated_at,\n        }\n      };\n    } catch (error) {\n      const errorMessage = error instanceof Error ? error.message : String(error);\n      logger.error({ err: error }, 'Update metadata service error');\n      return {\n        success: false,\n        error: 'Failed to update signup data'\n      };\n    }\n  }\n\n  /**\n   * Get tier information based on position\n   */\n  getTierInfo(position: number) {\n    if (position <= 100) {\n      return { \n        tier: 'founder' as const, \n        name: 'Founder', \n        color: 'bg-gradient-to-r from-warning to-destructive', \n        perks: [\n          '75% lifetime discount', \n          'White-label rights', \n          'Priority support', \n          'Custom onboarding'\n        ] \n      };\n    }\n    if (position <= 500) {\n      return { \n        tier: 'vip' as const, \n        name: 'VIP Early Access', \n        color: 'bg-gradient-to-r from-secondary to-accent', \n        perks: [\n          '50% first year discount', \n          'Beta access', \n          'Implementation support', \n          'Advanced features'\n        ] \n      };\n    }\n    return { \n      tier: 'early-bird' as const, \n      name: 'Early Bird', \n      color: 'bg-gradient-to-r from-primary to-secondary', \n      perks: [\n        '25% first year discount', \n        'Early access', \n        'Priority onboarding', \n        'Community access'\n      ] \n    };\n  }\n}\n\n// Export singleton instance\nexport const waitlistService = new WaitlistService();\nexport default waitlistService; ","usedDeprecatedRules":[]},{"filePath":"/home/vonj/Github/Nexus/src/lib/services/workspaceThoughtsIntegration.ts","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'ClarifyIdeaRequest' is defined but never used.","line":10,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":10,"endColumn":21},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'PersonalOrProfessional' is defined but never used.","line":18,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":18,"endColumn":25},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'RelationshipType' is defined but never used.","line":19,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":19,"endColumn":19},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":126,"column":21,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":126,"endColumn":24,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3339,3342],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3339,3342],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'userId' is defined but never used.","line":142,"column":5,"nodeType":null,"messageId":"unusedVar","endLine":142,"endColumn":11},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'userId' is defined but never used.","line":176,"column":5,"nodeType":null,"messageId":"unusedVar","endLine":176,"endColumn":11}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\n * @file workspaceThoughtsIntegration.ts\n * @description Integration service between WorkspacePage and Nexus Thoughts System\n * Converts clarified ideas into actionable thoughts, tasks, and projects\n */\n\nimport { thoughtsService } from './thoughtsService';\nimport type { \n  ClarifyIdeaResponse, \n  ClarifyIdeaRequest \n} from '../automation/n8n/workspaceClarifyWorkflow';\nimport type { \n  Thought, \n  CreateThoughtRequest, \n  ThoughtCategory, \n  ThoughtStatus, \n  WorkflowStage,\n  PersonalOrProfessional,\n  RelationshipType\n} from '../types/thoughts';\n\nexport interface ActionPlanResult {\n  success: boolean;\n  mainThought?: Thought;\n  relatedTasks?: Thought[];\n  error?: string;\n}\n\nexport interface DepartmentMapping {\n  [key: string]: {\n    category: ThoughtCategory;\n    subCategories: string[];\n    defaultStatus: ThoughtStatus;\n    workflowStage: WorkflowStage;\n  };\n}\n\n/**\n * Maps departments to thought categories and workflow stages\n */\nconst DEPARTMENT_MAPPING: DepartmentMapping = {\n  'Marketing': {\n    category: 'idea',\n    subCategories: ['campaign', 'content', 'social_media', 'branding'],\n    defaultStatus: 'concept',\n    workflowStage: 'create_idea'\n  },\n  'Sales': {\n    category: 'task',\n    subCategories: ['deal', 'proposal', 'sow', 'pipeline'],\n    defaultStatus: 'not_started',\n    workflowStage: 'create_idea'\n  },\n  'Support': {\n    category: 'task',\n    subCategories: ['ticket', 'issue', 'customer_service'],\n    defaultStatus: 'pending',\n    workflowStage: 'create_idea'\n  },\n  'Operations': {\n    category: 'task',\n    subCategories: ['process', 'automation', 'workflow'],\n    defaultStatus: 'not_started',\n    workflowStage: 'create_idea'\n  },\n  'Finance': {\n    category: 'task',\n    subCategories: ['invoice', 'report', 'budget', 'expense'],\n    defaultStatus: 'pending',\n    workflowStage: 'create_idea'\n  }\n};\n\nclass WorkspaceThoughtsIntegration {\n  private thoughtsService: typeof thoughtsService;\n\n  constructor() {\n    this.thoughtsService = thoughtsService;\n  }\n\n  /**\n   * Convert a clarified idea into an action plan using the Nexus Thoughts system\n   */\n  async createActionPlanFromClarifiedIdea(\n    clarification: ClarifyIdeaResponse['data'],\n    originalIdea: string,\n    userId: string\n  ): Promise<ActionPlanResult> {\n    try {\n      if (!clarification) {\n        throw new Error('No clarification data provided');\n      }\n\n      // Get department mapping\n      const departmentConfig = DEPARTMENT_MAPPING[clarification.suggestedDepartment] || \n        DEPARTMENT_MAPPING['Operations']; // Default fallback\n\n      // Create main thought (the clarified idea)\n      const mainThought = await this.createMainThought(\n        clarification,\n        originalIdea,\n        departmentConfig,\n        userId\n      );\n\n      // Create related tasks from the breakdown\n      const relatedTasks = await this.createRelatedTasks(\n        clarification,\n        mainThought.id,\n        departmentConfig,\n        userId\n      );\n\n      // Create relationships between main thought and tasks\n      await this.createThoughtRelationships(mainThought.id, relatedTasks);\n\n      // Log AI interaction for the clarification\n      await this.logClarificationInteraction(mainThought.id, clarification);\n\n      return {\n        success: true,\n        mainThought,\n        relatedTasks\n      };\n\n    } catch (error: any) {\n      console.error('Failed to create action plan:', error);\n      return {\n        success: false,\n        error: error.message || 'Failed to create action plan'\n      };\n    }\n  }\n\n  /**\n   * Create the main thought from the clarified idea\n   */\n  private async createMainThought(\n    clarification: NonNullable<ClarifyIdeaResponse['data']>,\n    originalIdea: string,\n    departmentConfig: DepartmentMapping[string],\n    userId: string\n  ): Promise<Thought> {\n    const createRequest: CreateThoughtRequest = {\n      content: originalIdea,\n      category: departmentConfig.category,\n      status: departmentConfig.defaultStatus,\n      personal_or_professional: 'professional',\n      main_sub_categories: departmentConfig.subCategories,\n      initiative: true,\n      impact: `Estimated effort: ${clarification.estimatedEffort}, Priority: ${clarification.priority}`,\n      workflow_stage: departmentConfig.workflowStage,\n      interaction_method: 'text',\n      department: clarification.suggestedDepartment,\n      priority: clarification.priority,\n      estimated_effort: clarification.estimatedEffort,\n      ai_clarification_data: {\n        type: clarification.type,\n        breakdown: clarification.breakdown,\n        nextSteps: clarification.nextSteps,\n        reasoning: clarification.reasoning,\n        suggestedDepartment: clarification.suggestedDepartment\n      }\n    };\n\n    return this.thoughtsService.createThought(createRequest);\n  }\n\n  /**\n   * Create related tasks from the breakdown\n   */\n  private async createRelatedTasks(\n    clarification: NonNullable<ClarifyIdeaResponse['data']>,\n    parentThoughtId: string,\n    departmentConfig: DepartmentMapping[string],\n    userId: string\n  ): Promise<Thought[]> {\n    const tasks: Thought[] = [];\n\n    for (const step of clarification.breakdown) {\n      const taskRequest: CreateThoughtRequest = {\n        content: step,\n        category: 'task',\n        status: 'not_started',\n        personal_or_professional: 'professional',\n        main_sub_categories: departmentConfig.subCategories,\n        initiative: false,\n        parent_idea_id: parentThoughtId,\n        workflow_stage: 'create_idea',\n        interaction_method: 'text'\n      };\n\n      const task = await this.thoughtsService.createThought(taskRequest);\n      tasks.push(task);\n    }\n\n    return tasks;\n  }\n\n  /**\n   * Create relationships between main thought and tasks\n   */\n  private async createThoughtRelationships(\n    mainThoughtId: string,\n    tasks: Thought[]\n  ): Promise<void> {\n    for (const task of tasks) {\n      await this.thoughtsService.createRelationship(\n        mainThoughtId,\n        task.id,\n        'spawns_task'\n      );\n    }\n  }\n\n  /**\n   * Log the AI clarification interaction\n   */\n  private async logClarificationInteraction(\n    thoughtId: string,\n    clarification: NonNullable<ClarifyIdeaResponse['data']>\n  ): Promise<void> {\n    const promptText = `Clarify and structure this idea for implementation`;\n    const aiResponse = JSON.stringify({\n      type: clarification.type,\n      department: clarification.suggestedDepartment,\n      breakdown: clarification.breakdown,\n      effort: clarification.estimatedEffort,\n      priority: clarification.priority,\n      nextSteps: clarification.nextSteps,\n      reasoning: clarification.reasoning\n    }, null, 2);\n\n    await this.thoughtsService.logAIInteraction(\n      thoughtId,\n      promptText,\n      aiResponse,\n      'analysis'\n    );\n  }\n\n  /**\n   * Get action plan summary for display in Action Board\n   */\n  async getActionPlanSummary(thoughtId: string): Promise<{\n    mainThought: Thought;\n    relatedTasks: Thought[];\n    progress: {\n      totalTasks: number;\n      completedTasks: number;\n      progressPercentage: number;\n    };\n  } | null> {\n    try {\n      const thoughtResponse = await this.thoughtsService.getThought(thoughtId, true);\n      \n      // Get related tasks by querying the database directly for thoughts with this parent_idea_id\n      const { data: { user } } = await import('../core/supabase').then(m => m.supabase.auth.getUser());\n      if (!user?.id) {\n        throw new Error('User not authenticated');\n      }\n\n      const { data: relatedTasksData, error } = await import('../core/supabase').then(m => m.supabase\n        .from('thoughts')\n        .select('*')\n        .eq('user_id', user.id)\n        .eq('parent_idea_id', thoughtId)\n        .eq('category', 'task')\n      );\n\n      if (error) {\n        throw new Error(`Failed to get related tasks: ${error.message}`);\n      }\n\n      const relatedTasks: Thought[] = [];\n      for (const taskData of relatedTasksData || []) {\n        const task = await this.thoughtsService.getThought(taskData.id);\n        relatedTasks.push(task.thought);\n      }\n      const completedTasks = relatedTasks.filter(\n        (task: Thought) => task.status === 'completed'\n      ).length;\n\n      const progress = {\n        totalTasks: relatedTasks.length,\n        completedTasks,\n        progressPercentage: relatedTasks.length > 0 \n          ? Math.round((completedTasks / relatedTasks.length) * 100)\n          : 0\n      };\n\n      return {\n        mainThought: thoughtResponse.thought,\n        relatedTasks,\n        progress\n      };\n\n    } catch (error) {\n      console.error('Failed to get action plan summary:', error);\n      return null;\n    }\n  }\n\n  /**\n   * Get all action plans for the current user\n   */\n  async getUserActionPlans(): Promise<Thought[]> {\n    try {\n      const response = await this.thoughtsService.getThoughts({\n        initiative_only: true,\n        workflow_stage: ['create_idea', 'update_idea', 'implement_idea']\n      });\n\n      return response.thoughts;\n    } catch (error) {\n      console.error('Failed to get user action plans:', error);\n      return [];\n    }\n  }\n\n  /**\n   * Update action plan status\n   */\n  async updateActionPlanStatus(\n    thoughtId: string,\n    newStatus: ThoughtStatus,\n    newWorkflowStage?: WorkflowStage\n  ): Promise<Thought> {\n    const updateRequest = {\n      id: thoughtId,\n      status: newStatus,\n      ...(newWorkflowStage && { workflow_stage: newWorkflowStage })\n    };\n\n    return this.thoughtsService.updateThought(updateRequest);\n  }\n}\n\n// Export singleton instance\nexport const workspaceThoughtsIntegration = new WorkspaceThoughtsIntegration();\n\n// Export helper functions\nexport async function createActionPlanFromClarifiedIdea(\n  clarification: ClarifyIdeaResponse['data'],\n  originalIdea: string,\n  userId: string\n): Promise<ActionPlanResult> {\n  return workspaceThoughtsIntegration.createActionPlanFromClarifiedIdea(\n    clarification,\n    originalIdea,\n    userId\n  );\n}\n\nexport async function getActionPlanSummary(thoughtId: string) {\n  return workspaceThoughtsIntegration.getActionPlanSummary(thoughtId);\n}\n\nexport async function getUserActionPlans(): Promise<Thought[]> {\n  return workspaceThoughtsIntegration.getUserActionPlans();\n} ","usedDeprecatedRules":[]},{"filePath":"/home/vonj/Github/Nexus/src/lib/stores/aiChatStore.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/vonj/Github/Nexus/src/lib/stores/onboardingChatStore.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":13,"column":36,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":13,"endColumn":39,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[414,417],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[414,417],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":38,"column":19,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":38,"endColumn":22,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1183,1186],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1183,1186],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { create } from 'zustand';\nimport type { StoreApi, UseBoundStore } from 'zustand';\nimport type { EnhancedUser } from '@/lib/types/userProfile';\n\ninterface OnboardingMessage {\n  id: string;\n  role: 'assistant' | 'user';\n  content: string;\n  timestamp: Date;\n  type: 'message' | 'introduction' | 'data-collected' | 'relationship-building';\n  metadata?: {\n    step?: string;\n    dataCollected?: Record<string, any>;\n    suggestions?: string[];\n    emotion?: 'excited' | 'thoughtful' | 'supportive' | 'celebratory' | 'friendly';\n  };\n}\n\ninterface OnboardingChatState {\n  messages: OnboardingMessage[];\n  isTyping: boolean;\n  hasInitialized: boolean;\n  initialize: (user: EnhancedUser | null) => void;\n  addMessage: (message: Omit<OnboardingMessage, 'id' | 'timestamp'>) => void;\n  setIsTyping: (isTyping: boolean) => void;\n}\n\ntype WithSelectors<S> = S extends { getState: () => infer T }\n  ? S & { use: { [K in keyof T]: () => T[K] } }\n  : never;\n\nconst createSelectors = <S extends UseBoundStore<StoreApi<object>>>(\n  _store: S,\n) => {\n  const store = _store as WithSelectors<typeof _store>;\n  store.use = {};\n  for (const k of Object.keys(store.getState())) {\n    (store.use as any)[k] = () => store((s) => s[k as keyof typeof s]);\n  }\n\n  return store;\n};\n\nconst useOnboardingChatStoreBase = create<OnboardingChatState>((set, get) => ({\n  messages: [],\n  isTyping: false,\n  hasInitialized: false,\n\n  initialize: (user) => {\n    console.log('[OnboardingChatStore] Initialize called. Has initialized?', get().hasInitialized);\n    if (get().hasInitialized || !user) return;\n    console.log('[OnboardingChatStore] Initializing for the first time...');\n\n    const profile = user.profile;\n    const company = user.company;\n    const userContext = profile?.preferences?.user_context;\n    const businessContext = company?.settings;\n\n    const firstName = profile?.first_name || 'there';\n    const timeOfDay = new Date().getHours() < 12 ? 'morning' : new Date().getHours() < 17 ? 'afternoon' : 'evening';\n    \n    const personalizedGreeting = `Good ${timeOfDay}, ${firstName}! 👋`;\n    let introContent = `I'm Nex, your new AI business partner. My purpose is to help you streamline operations, make smarter decisions, and achieve your goals faster.\n\nI'm designed to understand your business, learn your preferences, and become your trusted right-hand assistant.\n\nBefore we dive in, I want to make sure I'm on the right track.`;\n\n    if (userContext?.role && company?.name) {\n      introContent += `\\n\\nI understand you're a **${userContext.role}** at **${company.name}**.`;\n    }\n\n    if (userContext?.biggest_challenge) {\n      introContent += ` It looks like a key focus for you is **tackling the challenge of '${userContext.biggest_challenge}'**.`;\n      introContent += `\\n\\nI'm confident we can make significant progress on that together.`;\n    } else if (businessContext?.business_priorities && businessContext.business_priorities.length > 0) {\n      introContent += ` It looks like a key priority for you and the team is **'${businessContext.business_priorities[0]}'**.`;\n      introContent += `\\n\\nI'm ready to help you focus on that.`;\n    }\n\n    introContent += `\\n\\nReady to start our partnership and build your context-aware workspace?`;\n\n    const introMessage: OnboardingMessage = {\n      id: '1',\n      role: 'assistant',\n      content: `${personalizedGreeting}\\n\\n${introContent}`,\n      timestamp: new Date(),\n      type: 'introduction',\n      metadata: {\n        step: 'introduction',\n        emotion: 'friendly',\n        suggestions: [\n          '🚀 Yes, let\\'s get started!',\n          '🤔 Tell me more about what you can do',\n          '💼 How will you help my business?',\n          '⚡ What makes you different?'\n        ]\n      }\n    };\n\n    console.log('[OnboardingChatStore] Setting initial message.');\n    set({ messages: [introMessage], hasInitialized: true });\n  },\n\n  addMessage: (message) => {\n    const newMessage: OnboardingMessage = {\n      ...message,\n      id: Date.now().toString(),\n      timestamp: new Date()\n    };\n    set(state => ({ messages: [...state.messages, newMessage] }));\n  },\n\n  setIsTyping: (isTyping) => set({ isTyping }),\n}));\n\nexport const useOnboardingChatStore = createSelectors(useOnboardingChatStoreBase); ","usedDeprecatedRules":[]},{"filePath":"/home/vonj/Github/Nexus/src/lib/stores/organizationStore.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":37,"column":61,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":37,"endColumn":64,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1019,1022],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1019,1022],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { create } from 'zustand';\nimport { devtools } from 'zustand/middleware';\nimport { produce } from 'immer';\nimport { supabase } from '@/lib/core/supabase';\n\nexport interface Organization {\n  id: string;\n  name: string;\n  role: string;\n}\n\ninterface OrgStoreState {\n  orgs: Organization[];\n  activeOrgId: string | null;\n  loading: boolean;\n  loadMemberships: (userId: string) => Promise<void>;\n  setActiveOrg: (orgId: string) => void;\n  getActiveOrg: () => Organization | null;\n}\n\nexport const useOrganizationStore = create<OrgStoreState>()(\n  devtools((set, get) => ({\n    orgs: [],\n    activeOrgId: localStorage.getItem('active_org_id') ?? null,\n    loading: false,\n\n    async loadMemberships(userId) {\n      set({ loading: true });\n      try {\n        const { data, error } = await supabase\n          .from('user_organizations')\n          .select('org_id, role, organizations(name)')\n          .eq('user_id', userId);\n\n        if (error) throw error;\n\n        const orgs: Organization[] = (data || []).map((row: any) => ({\n          id: row.org_id,\n          name: row.organizations?.name ?? 'Org',\n          role: row.role,\n        }));\n\n        set(\n          produce((state: OrgStoreState) => {\n            state.orgs = orgs;\n            if (!state.activeOrgId && orgs.length) {\n              state.activeOrgId = orgs[0].id;\n              localStorage.setItem('active_org_id', orgs[0].id);\n            }\n            state.loading = false;\n          })\n        );\n      } catch (err) {\n        console.error('Failed loading org memberships', err);\n        set({ loading: false });\n      }\n    },\n\n    setActiveOrg(orgId) {\n      set(\n        produce((state: OrgStoreState) => {\n          state.activeOrgId = orgId;\n          localStorage.setItem('active_org_id', orgId);\n        })\n      );\n    },\n\n    getActiveOrg() {\n      const { orgs, activeOrgId } = get();\n      return orgs.find((o) => o.id === activeOrgId) || null;\n    },\n  }))\n); ","usedDeprecatedRules":[]},{"filePath":"/home/vonj/Github/Nexus/src/lib/stores/useAIChatStore.ts","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'AgentResponse' is defined but never used.","line":4,"column":15,"nodeType":null,"messageId":"unusedVar","endLine":4,"endColumn":28},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'immer' is defined but never used.","line":6,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":6,"endColumn":15},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":41,"column":40,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":41,"endColumn":43,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1274,1277],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1274,1277],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":43,"column":16,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":43,"endColumn":19,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1362,1365],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1362,1365],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'streamAI' is assigned a value but never used.","line":59,"column":7,"nodeType":null,"messageId":"unusedVar","endLine":59,"endColumn":15},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":60,"column":65,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":60,"endColumn":68,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1810,1813],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1810,1813],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":110,"column":52,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":110,"endColumn":55,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3340,3343],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3340,3343],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":120,"column":36,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":120,"endColumn":39,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3570,3573],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3570,3573],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":150,"column":32,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":150,"endColumn":35,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[4770,4773],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[4770,4773],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":170,"column":19,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":170,"endColumn":22,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[5679,5682],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[5679,5682],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":187,"column":24,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":187,"endColumn":27,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[6242,6245],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[6242,6245],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":191,"column":24,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":191,"endColumn":27,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[6380,6383],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[6380,6383],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":200,"column":78,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":200,"endColumn":81,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[6680,6683],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[6680,6683],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":220,"column":19,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":220,"endColumn":22,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[7453,7456],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[7453,7456],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":237,"column":50,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":237,"endColumn":53,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[8041,8044],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[8041,8044],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":276,"column":50,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":276,"endColumn":53,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[9204,9207],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[9204,9207],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":295,"column":34,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":295,"endColumn":37,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[9746,9749],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[9746,9749],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":17,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { create } from 'zustand';\nimport { devtools } from 'zustand/middleware';\nimport { produce } from 'immer';\nimport type { AgentResponse } from '@/lib/ai/assistant/types';\nimport { supabase } from '@/lib/core/supabase';\nimport { immer } from 'zustand/middleware/immer';\n\nexport type AIRole = 'user' | 'assistant' | 'system';\n\nexport interface AIMessage {\n  id: string;\n  conversationId: string;\n  userId: string;\n  role: AIRole;\n  content: string;\n  createdAt: string;\n}\n\nexport interface AIConversation {\n  id: string;\n  title: string;\n  messages: AIMessage[];\n  createdAt: string;\n  updatedAt: string;\n}\n\ninterface AIChatStoreState {\n  conversations: Record<string, AIConversation>;\n  activeConversationId: string | null;\n  loading: boolean;\n  error: string | null;\n  sendMessage: (conversationId: string, message: string, userId: string, companyId?: string) => Promise<void>;\n  loadConversation: (conversationId: string) => Promise<void>;\n  setActiveConversation: (conversationId: string) => void;\n  newConversation: (title?: string) => Promise<string>;\n  loadOlderMessages: (conversationId: string, before?: string, limit?: number) => Promise<number>;\n  reset: () => void;\n}\n\n// Helper to call Edge Function with dev fallback\nconst callAIEndpoint = async (payload: any) => {\n  const endpoints = ['/functions/v1/ai_chat', '/api/ai_chat'];\n  let lastErr: any;\n  for (const url of endpoints) {\n    try {\n      const res = await fetch(url, {\n        method: 'POST',\n        headers: { 'Content-Type': 'application/json' },\n        body: JSON.stringify(payload),\n      });\n      if (res.ok) return res;\n    } catch (err) {\n      lastErr = err;\n    }\n  }\n  throw lastErr || new Error('AI endpoint not available');\n};\n\nconst streamAI = async (\n  payload: { message: string; conversationId: string; metadata: any },\n  onToken: (token: string) => void\n): Promise<string> => {\n  const res = await callAIEndpoint(payload);\n  if (!res.body) throw new Error('No stream');\n  const reader = res.body.getReader();\n  const decoder = new TextDecoder();\n  let full = '';\n  for (;;) {\n    const { value, done } = await reader.read();\n    if (done) break;\n    const chunk = decoder.decode(value);\n    full += chunk;\n    onToken(full);\n  }\n  return full;\n};\n\nexport const useAIChatStore = create<AIChatStoreState>()(\n  devtools((set, get) => ({\n    conversations: {},\n    activeConversationId: null,\n    loading: false,\n    error: null,\n\n    async sendMessage(conversationId, message, userId, companyId) {\n      set({ loading: true, error: null });\n      const msg: AIMessage = {\n        id: crypto.randomUUID(),\n        conversationId,\n        userId,\n        role: 'user',\n        content: message,\n        createdAt: new Date().toISOString(),\n      };\n      set(produce((state: AIChatStoreState) => {\n        if (!state.conversations[conversationId]) {\n          state.conversations[conversationId] = {\n            id: conversationId,\n            title: 'Untitled',\n            messages: [],\n            createdAt: new Date().toISOString(),\n            updatedAt: new Date().toISOString(),\n          };\n        }\n        state.conversations[conversationId].messages.push(msg);\n      }));\n      // Call Supabase Edge Function to get AI response\n      const aiMsgId = crypto.randomUUID();\n      try {\n        const { data, error } = await (supabase as any).functions.invoke('ai_chat', {\n          body: {\n            message,\n            conversationId,\n            metadata: { userId },\n          },\n        });\n\n        if (error) throw error;\n\n        const aiContent = (data as any)?.message ||\n          (typeof data === 'string' ? data : '');\n\n        // Persist AI response (edge function already does, but we keep local state in sync)\n        set(produce((state: AIChatStoreState) => {\n          const conv = state.conversations[conversationId];\n          if (!conv) return;\n          const aiMsg: AIMessage = {\n            id: aiMsgId,\n            conversationId,\n            userId: 'assistant',\n            role: 'assistant',\n            content: aiContent,\n            createdAt: new Date().toISOString(),\n          };\n          conv.messages.push(aiMsg);\n        }));\n\n        // After successful AI response, trigger Executive Assistant Orchestrator\n        // for complex query analysis and potential workflow routing\n        if (companyId) {\n          try {\n            // Get conversation history for context\n            const conversation = get().conversations[conversationId];\n            const conversationText = conversation?.messages\n              .slice(-5) // Last 5 messages for context\n              .map(m => `${m.role}: ${m.content}`)\n              .join('\\n');\n\n            // Trigger orchestrator workflow (non-blocking)\n            await (supabase as any).functions.invoke('trigger-n8n-workflow', {\n              body: {\n                workflow_name: 'executive_assistant_orchestrator',\n                payload: {\n                  query: message,\n                  conversation: conversationText,\n                  user_id: userId,\n                  company_id: companyId,\n                  conversation_id: conversationId,\n                  user_context: `Recent conversation with ${conversation?.messages.length || 0} messages`,\n                  supabase_url: import.meta.env.VITE_SUPABASE_URL,\n                  supabase_anon_key: import.meta.env.VITE_SUPABASE_ANON_KEY,\n                },\n              },\n            });\n          } catch (orchestratorError) {\n            // Don't fail the main chat if orchestrator fails\n            console.warn('Executive Assistant Orchestrator failed:', orchestratorError);\n          }\n        }\n      } catch (e: any) {\n        set({ error: e.message || 'Failed to send message' });\n      } finally {\n        set({ loading: false });\n      }\n    },\n\n    async loadConversation(conversationId) {\n      set({ loading: true, error: null });\n      const uuidRegex = /^[0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$/i;\n      if (!uuidRegex.test(conversationId)) {\n        set({ loading: false });\n        return;\n      }\n      try {\n        // Fetch from both tables in parallel\n        const [aiRes, chatRes] = await Promise.all([\n          (supabase as any)\n            .from('ai_messages')\n            .select('*')\n            .eq('conversation_id', conversationId),\n          (supabase as any)\n            .from('chat_messages')\n            .select('*')\n            .eq('conversation_id', conversationId),\n        ]);\n\n        if (aiRes.error) throw aiRes.error;\n        if (chatRes.error) throw chatRes.error;\n\n        const combined = [...(aiRes.data || []), ...(chatRes.data || [])] as any[];\n\n        combined.sort((a, b) => new Date(a.created_at).getTime() - new Date(b.created_at).getTime());\n\n        set(produce((state: AIChatStoreState) => {\n          state.conversations[conversationId] = {\n            id: conversationId,\n            title: 'Untitled',\n            messages: combined.map((m) => ({\n              id: m.id,\n              conversationId: m.conversation_id,\n              userId: m.user_id,\n              role: m.role ?? 'assistant',\n              content: m.content,\n              createdAt: m.created_at,\n            })),\n            createdAt: combined[0]?.created_at || new Date().toISOString(),\n            updatedAt: combined[combined.length - 1]?.created_at || new Date().toISOString(),\n          };\n        }));\n      } catch (e: any) {\n        set({ error: e.message || 'Failed to load conversation' });\n      } finally {\n        set({ loading: false });\n      }\n    },\n\n    setActiveConversation(conversationId) {\n      set({ activeConversationId: conversationId });\n    },\n\n    async newConversation(title = 'New Conversation') {\n      // Get current user id for conversation owner\n      const { data: { user } } = await supabase.auth.getUser();\n      if (!user) throw new Error('Not authenticated');\n\n      // Persist conversation row and retrieve the generated id\n      const { data, error } = await (supabase as any)\n        .from('ai_conversations')\n        .insert({\n          title,\n          user_id: user.id,\n        })\n        .select()\n        .single();\n\n      if (error) throw error;\n      const id = data.id as string;\n\n      set(produce((state: AIChatStoreState) => {\n        state.conversations[id] = {\n          id,\n          title,\n          messages: [],\n          createdAt: data.created_at || new Date().toISOString(),\n          updatedAt: data.updated_at || new Date().toISOString(),\n        };\n        state.activeConversationId = id;\n      }));\n      return id;\n    },\n\n    /**\n     * Fetch older messages before a given timestamp (or before the earliest\n     * currently loaded message) and prepend them to local state. Returns the\n     * number of messages loaded so the caller can decide whether to keep\n     * requesting more.\n     */\n    async loadOlderMessages(conversationId, before, limit = 50) {\n      const state = get();\n      const conv = state.conversations[conversationId];\n      if (!conv) return 0;\n\n      const anchor = before || conv.messages[0]?.createdAt;\n      if (!anchor) return 0;\n\n      const { data, error } = await (supabase as any)\n        .from('ai_messages')\n        .select('*')\n        .eq('conversation_id', conversationId)\n        .lt('created_at', anchor)\n        .order('created_at', { ascending: false })\n        .limit(limit);\n\n      if (error) {\n         \n        console.error('loadOlderMessages error', error);\n        return 0;\n      }\n\n      if (!data || data.length === 0) return 0;\n\n      set(produce((draft: AIChatStoreState) => {\n        const dConv = draft.conversations[conversationId];\n        if (!dConv) return;\n        const newMsgs = (data as any[]).map((m) => ({\n          id: m.id,\n          conversationId: m.conversation_id,\n          userId: m.user_id,\n          role: m.role,\n          content: m.content,\n          createdAt: m.created_at,\n        }));\n        // Prepend in chronological order\n        dConv.messages = [...newMsgs.reverse(), ...dConv.messages];\n      }));\n\n      return data.length;\n    },\n\n    reset() {\n      set({ conversations: {}, activeConversationId: null, loading: false, error: null });\n    },\n  }))\n);\n\n/**\n * Memoized selector for active conversation.\n */\nexport const useActiveConversation = () =>\n  useAIChatStore(s => s.activeConversationId ? s.conversations[s.activeConversationId] : undefined); ","usedDeprecatedRules":[]},{"filePath":"/home/vonj/Github/Nexus/src/lib/types/billing.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/vonj/Github/Nexus/src/lib/types/chat.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":14,"column":20,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":14,"endColumn":23,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[435,438],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[435,438],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"export interface ChatMessage {\n  id: string;\n  role: 'user' | 'assistant' | 'system';\n  content: string;\n  timestamp: Date;\n  status: 'sending' | 'sent' | 'delivered' | 'error';\n  type: 'text' | 'code' | 'image' | 'file' | 'error' | 'thinking' | 'streaming';\n  metadata?: {\n    agent_id?: string;\n    context?: string;\n    citations?: string[];\n    attachments?: AttachmentData[];\n    reactions?: MessageReaction[];\n    [key: string]: any;\n  };\n}\n\nexport interface AttachmentData {\n  id: string;\n  name: string;\n  size: number;\n  type: string;\n  url: string;\n}\n\nexport interface MessageReaction {\n  emoji: string;\n  users: string[];\n  count: number;\n}\n\nexport interface StreamingMessage {\n  id: string;\n  role: 'assistant';\n  content: string;\n  isComplete: boolean;\n  chunks: string[];\n}\n\nexport interface ChatState {\n  messages: ChatMessage[];\n  isLoading: boolean;\n  error: string | null;\n  currentConversationId: string | null;\n  typingUsers: string[];\n  streamingMessage: StreamingMessage | null;\n}\n\nexport interface ChatActions {\n  sendMessage: (content: string, attachments?: File[]) => Promise<void>;\n  retryMessage: (messageId: string) => Promise<void>;\n  editMessage: (messageId: string, newContent: string) => Promise<void>;\n  deleteMessage: (messageId: string) => Promise<void>;\n  reactToMessage: (messageId: string, emoji: string) => Promise<void>;\n  markAsRead: (messageId: string) => Promise<void>;\n} ","usedDeprecatedRules":[]},{"filePath":"/home/vonj/Github/Nexus/src/lib/types/database-enhanced.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":108,"column":20,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":108,"endColumn":23,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2721,2724],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2721,2724],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":135,"column":15,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":135,"endColumn":18,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3426,3429],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3426,3429],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":136,"column":13,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":136,"endColumn":16,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3450,3453],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3450,3453],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":137,"column":23,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":137,"endColumn":26,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3484,3487],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3484,3487],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":138,"column":17,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":138,"endColumn":20,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3512,3515],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3512,3515],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":168,"column":34,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":168,"endColumn":37,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[4309,4312],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[4309,4312],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":169,"column":18,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":169,"endColumn":21,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[4332,4335],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[4332,4335],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":189,"column":20,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":189,"endColumn":23,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[4811,4814],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[4811,4814],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":209,"column":20,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":209,"endColumn":23,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[5197,5200],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[5197,5200],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":225,"column":32,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":225,"endColumn":35,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[5582,5585],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[5582,5585],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":238,"column":33,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":238,"endColumn":36,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[5901,5904],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[5901,5904],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":290,"column":37,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":290,"endColumn":40,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[6988,6991],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[6988,6991],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":294,"column":34,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":294,"endColumn":37,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[7141,7144],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[7141,7144],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":298,"column":39,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":298,"endColumn":42,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[7288,7291],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[7288,7291],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":302,"column":32,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":302,"endColumn":35,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[7435,7438],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[7435,7438],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":15,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\n * Enhanced Database Types for Nexus\n * Pillar: 2 - Minimum Lovable Feature Set\n * \n * This file provides enhanced type safety for database operations,\n * especially for tables that might be missing from auto-generated types\n */\n\nimport type { Database } from '../database.types';\n\n// Enhanced types for better type safety\nexport type Tables = Database['public']['Tables'];\nexport type Views = Database['public']['Views'];\nexport type Functions = Database['public']['Functions'];\n\n// AI Models and Preferences (ensure these tables exist)\nexport interface AIModel {\n  id: string;\n  model_name: string;\n  provider: string;\n  display_name: string;\n  description?: string;\n  is_active: boolean;\n  created_at: string;\n  updated_at: string;\n}\n\nexport interface UserAIModelPreference {\n  id: string;\n  user_id: string;\n  selected_model_id: string;\n  created_at: string;\n  updated_at: string;\n}\n\n// Unified Inbox Types\nexport interface EmailAccount {\n  id: string;\n  user_id: string;\n  company_id: string;\n  email_address: string;\n  display_name?: string;\n  provider: 'gmail' | 'outlook' | 'exchange' | 'imap' | 'smtp';\n  access_token?: string;\n  refresh_token?: string;\n  token_expires_at?: string;\n  sync_enabled: boolean;\n  sync_status: 'pending' | 'syncing' | 'success' | 'error';\n  last_sync_at?: string;\n  created_at: string;\n  updated_at: string;\n}\n\nexport interface InboxItem {\n  id: string;\n  user_id: string;\n  company_id: string;\n  item_type: 'email' | 'notification' | 'system' | 'task' | 'calendar';\n  source_id?: string;\n  source_type?: string;\n  title: string;\n  preview?: string;\n  sender?: string;\n  is_read: boolean;\n  is_important: boolean;\n  is_archived: boolean;\n  priority_score: number;\n  item_timestamp: string;\n  received_at: string;\n  ai_category?: string;\n  ai_action_suggestion?: string;\n  ai_urgency?: 'low' | 'medium' | 'high' | 'urgent';\n  created_at: string;\n  updated_at: string;\n}\n\n// Enhanced Company and User Profile Types\nexport interface EnhancedCompany {\n  id: string;\n  name: string;\n  domain?: string | null;\n  industry?: string | null;\n  size?: string | null;\n  logo_url?: string | null;\n  created_at?: string | null;\n  updated_at?: string | null;\n  settings?: {\n    theme?: 'light' | 'dark' | 'system';\n    branding?: {\n      primary_color?: string;\n      logo_url?: string;\n      custom_css?: string;\n    };\n    integrations?: {\n      enabled_categories?: string[];\n      auto_sync?: boolean;\n    };\n    notifications?: {\n      email_enabled?: boolean;\n      slack_enabled?: boolean;\n      frequency?: 'real-time' | 'daily' | 'weekly';\n    };\n    security?: {\n      enforce_2fa?: boolean;\n      session_timeout?: number;\n      allowed_domains?: string[];\n    };\n    [key: string]: any;\n  } | null;\n}\n\nexport interface EnhancedUserProfile {\n  id: string;\n  company_id?: string | null;\n  first_name?: string | null;\n  last_name?: string | null;\n  display_name?: string | null;\n  avatar_url?: string | null;\n  role?: string | null;\n  department?: string | null;\n  job_title?: string | null;\n  phone?: string | null;\n  mobile?: string | null;\n  work_phone?: string | null;\n  personal_email?: string | null;\n  timezone?: string | null;\n  location?: string | null;\n  work_location?: string | null;\n  linkedin_url?: string | null;\n  github_url?: string | null;\n  twitter_url?: string | null;\n  bio?: string | null;\n  skills?: string[] | null;\n  certifications?: string[] | null;\n  languages?: any | null;\n  address?: any | null;\n  emergency_contact?: any | null;\n  preferences?: any | null;\n  onboarding_completed?: boolean | null;\n  profile_completion_percentage?: number | null;\n  created_at?: string | null;\n  updated_at?: string | null;\n  company?: EnhancedCompany;\n  full_name?: string;\n  initials?: string;\n  can_manage_company?: boolean;\n}\n\n// API Key Management Types\nexport interface SecureAPIKey {\n  id: string;\n  user_id: string;\n  key_name: string;\n  provider?: string;\n  created_at: string;\n  updated_at: string;\n  // Note: actual key value is never exposed in API responses\n}\n\n// Integration Types\nexport interface IntegrationConfig {\n  api_key?: string;\n  secret_key?: string;\n  base_url?: string;\n  webhook_url?: string;\n  sync_frequency?: 'real-time' | 'hourly' | 'daily' | 'weekly' | 'manual';\n  enabled_features?: string[];\n  custom_fields?: Record<string, any>;\n  [key: string]: any;\n}\n\nexport interface EnhancedUserIntegration extends Omit<Tables['user_integrations']['Row'], 'config'> {\n  config: IntegrationConfig;\n  integration?: Tables['integrations']['Row'];\n}\n\n// Conversation and Message Types\nexport interface AIConversation {\n  id: string;\n  user_id: string;\n  title?: string;\n  agent_id?: string;\n  created_at: string;\n  updated_at: string;\n  metadata?: {\n    department?: string;\n    context?: string;\n    session_id?: string;\n    [key: string]: any;\n  };\n}\n\nexport interface AIMessage {\n  id: string;\n  conversation_id: string;\n  user_id: string;\n  role: 'user' | 'assistant' | 'system';\n  content: string;\n  created_at: string;\n  metadata?: {\n    model?: string;\n    tokens_used?: number;\n    response_time_ms?: number;\n    sources?: Array<{\n      type: string;\n      title: string;\n      url?: string;\n    }>;\n    [key: string]: any;\n  };\n}\n\n// Thought and AI Interaction Types\nexport interface Thought {\n  id: string;\n  user_id: string;\n  content: string;\n  category: 'idea' | 'task' | 'reminder' | 'update';\n  status: string;\n  personal_or_professional?: 'personal' | 'professional';\n  impact?: string;\n  initiative?: boolean;\n  workflow_stage?: string;\n  parent_idea_id?: string;\n  ai_insights?: Record<string, any>;\n  interaction_method?: 'text' | 'speech' | 'copy_paste' | 'upload';\n  created_at: string;\n  updated_at: string;\n}\n\nexport interface AIInteraction {\n  id: string;\n  user_id: string;\n  thought_id?: string;\n  prompt_text?: string;\n  ai_response?: string;\n  interaction_type?: string;\n  context_data?: Record<string, any>;\n  created_at: string;\n}\n\n// Utility types for database operations\nexport type InsertType<T extends keyof Tables> = Tables[T]['Insert'];\nexport type UpdateType<T extends keyof Tables> = Tables[T]['Update'];\nexport type RowType<T extends keyof Tables> = Tables[T]['Row'];\n\n// Error handling types\nexport interface DatabaseError {\n  message: string;\n  details?: string;\n  hint?: string;\n  code?: string;\n}\n\nexport interface DatabaseResponse<T> {\n  data: T | null;\n  error: DatabaseError | null;\n}\n\n// Pagination types\nexport interface PaginatedResponse<T> {\n  data: T[];\n  count: number;\n  hasMore: boolean;\n  nextCursor?: string;\n}\n\nexport interface PaginationParams {\n  limit?: number;\n  offset?: number;\n  cursor?: string;\n  orderBy?: string;\n  orderDirection?: 'asc' | 'desc';\n}\n\n// Search and filter types\nexport interface SearchFilters {\n  query?: string;\n  category?: string[];\n  status?: string[];\n  dateRange?: {\n    start: string;\n    end: string;\n  };\n  userId?: string;\n  companyId?: string;\n}\n\n// Type guards for runtime type checking\nexport const isEmailAccount = (obj: any): obj is EmailAccount => {\n  return obj && typeof obj.id === 'string' && typeof obj.email_address === 'string';\n};\n\nexport const isInboxItem = (obj: any): obj is InboxItem => {\n  return obj && typeof obj.id === 'string' && typeof obj.title === 'string';\n};\n\nexport const isAIConversation = (obj: any): obj is AIConversation => {\n  return obj && typeof obj.id === 'string' && typeof obj.user_id === 'string';\n};\n\nexport const isThought = (obj: any): obj is Thought => {\n  return obj && typeof obj.id === 'string' && typeof obj.content === 'string';\n}; ","usedDeprecatedRules":[]},{"filePath":"/home/vonj/Github/Nexus/src/lib/types/database-fixes.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":25,"column":14,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":25,"endColumn":17,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[604,607],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[604,607],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\n * Database Type Fixes for 1.0\n * These types provide compatibility between database nullable fields and our TypeScript strict mode\n */\n\n// Database type fixes disabled for 1.0 - using simple types instead\n\n// Simplified types for 1.0\nexport interface SimpleUser {\n  id: string;\n  email: string;\n  full_name?: string;\n  avatar_url?: string;\n  subscription_tier?: 'FREE' | 'PRO' | 'ENTERPRISE';\n  created_at: string;\n}\n\nexport interface SimpleChatMessage {\n  id: string;\n  conversation_id: string;\n  user_id: string;\n  content: string;\n  role: 'user' | 'assistant';\n  created_at: string;\n  metadata?: any;\n}\n\nexport interface SimpleConversation {\n  id: string;\n  user_id: string;\n  title: string;\n  created_at: string;\n  updated_at: string;\n  status?: string;\n}\n\nexport interface SimpleThought {\n  id: string;\n  user_id: string;\n  content: string;\n  title?: string;\n  tags?: string[];\n  created_at: string;\n} ","usedDeprecatedRules":[]},{"filePath":"/home/vonj/Github/Nexus/src/lib/types/index.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":15,"column":34,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":15,"endColumn":37,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[393,396],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[393,396],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":57,"column":24,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":57,"endColumn":27,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1274,1277],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1274,1277],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":65,"column":13,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":65,"endColumn":16,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1446,1449],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1446,1449],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":79,"column":31,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":79,"endColumn":34,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1696,1699],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1696,1699],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\n * @file types/index.ts\n * @description Centralized type definitions for the Nexus application\n */\n// Re-export all types from different modules\n// Note: Individual type modules can be added here when needed\n\n// Common UI component props\nexport interface BaseComponentProps {\n  className?: string;\n  children?: React.ReactNode;\n}\n\n// API Response patterns\nexport interface ApiResponse<T = any> {\n  data?: T;\n  error?: string;\n  success: boolean;\n  message?: string;\n}\n\n// User roles and permissions\nexport type UserRole = 'admin' | 'manager' | 'user' | 'viewer';\n\nexport interface UserPermissions {\n  canEdit: boolean;\n  canDelete: boolean;\n  canCreate: boolean;\n  canView: boolean;\n}\n\n// Feature flags\nexport interface FeatureFlags {\n  multiAgent: boolean;\n  microsoftOAuth: boolean;\n  aiAssistants: boolean;\n  marketplace: boolean;\n  analytics: boolean;\n}\n\n// Navigation and routing\nexport interface NavigationItem {\n  label: string;\n  href: string;\n  icon?: React.ComponentType;\n  badge?: string | number;\n  children?: NavigationItem[];\n  requiredRole?: UserRole;\n}\n\n// Form handling\nexport interface FormField {\n  name: string;\n  label: string;\n  type: 'text' | 'email' | 'password' | 'select' | 'textarea' | 'checkbox';\n  required?: boolean;\n  validation?: (value: any) => string | undefined;\n  options?: { label: string; value: string }[];\n}\n\n// Error handling\nexport interface AppError {\n  code: string;\n  message: string;\n  details?: any;\n  timestamp: Date;\n}\n\n// Theme and styling\nexport type ThemeMode = 'light' | 'dark' | 'system';\n\nexport interface ThemeConfig {\n  mode: ThemeMode;\n  primaryColor: string;\n  borderRadius: string;\n}\n\n// Testing types\nexport interface MockData<T = any> {\n  data: T;\n  loading?: boolean;\n  error?: string | null;\n}\n\n// Module configuration\nexport interface ModuleConfig {\n  id: string;\n  name: string;\n  version: string;\n  enabled: boolean;\n  dependencies?: string[];\n  permissions: UserPermissions;\n}\n\n/**\n * Centralized Type Exports for Nexus\n * Pillar: 2 - Minimum Lovable Feature Set\n * \n * This file centralizes all type exports for better import organization\n */\n\n// Core database types\nexport type { Database } from '../database.types';\n\n// Enhanced database types with improved type safety\nexport * from './database-enhanced';\n\n// User and company types  \nexport type { \n  Company, \n  CompanySettings, \n  UserProfile, \n  EnhancedUser, \n  UserContextState, \n  UserContextActions, \n  UserContextType \n} from './userProfile';\n\n// Domain-specific types (avoiding conflicts)\nexport type { \n  ThoughtCategory, \n  ThoughtStatus, \n  ThoughtRelationship\n} from './thoughts';\nexport * from './billing';\nexport * from './integrations';\n\n// Legacy compatibility  \nexport * from './database-fixes'; ","usedDeprecatedRules":[]},{"filePath":"/home/vonj/Github/Nexus/src/lib/types/integration-intelligence-stubs.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/vonj/Github/Nexus/src/lib/types/integrations.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":43,"column":33,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":43,"endColumn":36,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1346,1349],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1346,1349],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":44,"column":34,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":44,"endColumn":37,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1385,1388],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1385,1388],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":82,"column":24,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":82,"endColumn":27,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2068,2071],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2068,2071],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":108,"column":28,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":108,"endColumn":31,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2512,2515],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2512,2515],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":111,"column":26,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":111,"endColumn":29,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2585,2588],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2585,2588],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":114,"column":33,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":114,"endColumn":36,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2668,2671],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2668,2671],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\n * Centralized Integration Types for Nexus Platform\n * Ensures consistency across all integration components\n */\n\nexport type IntegrationDifficulty = 'easy' | 'medium' | 'advanced';\nexport type IntegrationType = 'oauth' | 'api_key' | 'webhook' | 'credentials';\nexport type IntegrationCategory = 'crm' | 'payment' | 'email' | 'automation' | 'communication' | 'productivity' | 'accounting' | 'analytics' | 'marketing';\nexport type ConnectionStatus = 'idle' | 'connecting' | 'testing' | 'success' | 'error' | 'retry';\nexport type SetupStepType = 'welcome' | 'prerequisites' | 'auth' | 'permissions' | 'configuration' | 'testing' | 'success';\n\n/**\n * Core Integration Definition\n */\nexport interface Integration {\n  id: string;\n  name: string;\n  slug: string;\n  icon: React.ReactNode;\n  category: IntegrationCategory;\n  difficulty: IntegrationDifficulty;\n  authType: IntegrationType;\n  \n  // Setup Information\n  estimatedSetupTime: string;\n  features: string[];\n  description?: string;\n  \n  // Support & Documentation\n  documentation?: string;\n  supportUrl?: string;\n  videoTutorial?: string;\n  prerequisites?: string[];\n  \n  // Troubleshooting\n  commonIssues?: Array<{\n    issue: string;\n    solution: string;\n    category: 'auth' | 'permissions' | 'network' | 'configuration';\n  }>;\n  \n  // Configuration Schema\n  configSchema?: Record<string, any>;\n  defaultConfig?: Record<string, any>;\n  \n  // Platform Metadata\n  isActive: boolean;\n  isBeta?: boolean;\n  isEnterprise?: boolean;\n  rateLimits?: {\n    requestsPerMinute: number;\n    requestsPerHour: number;\n  };\n  \n  // Timestamps\n  created_at: string;\n  updated_at?: string;\n}\n\n/**\n * Setup Step Definition with Enhanced Metadata\n */\nexport interface SetupStep {\n  id: string;\n  title: string;\n  description: string;\n  type: SetupStepType;\n  \n  // State Management\n  completed: boolean;\n  optional?: boolean;\n  canSkip?: boolean;\n  \n  // UX Information\n  estimatedTime?: string;\n  helpText?: string;\n  troubleshootingUrl?: string;\n  \n  // Validation\n  validation?: {\n    required: boolean;\n    validator?: (data: any) => ValidationResult;\n  };\n  \n  // Analytics\n  analytics?: {\n    dropOffRate?: number;\n    averageTime?: number;\n    commonErrors?: string[];\n  };\n}\n\n/**\n * Validation Result for Step Validation\n */\nexport interface ValidationResult {\n  isValid: boolean;\n  errors: string[];\n  warnings?: string[];\n  suggestions?: string[];\n}\n\n/**\n * Setup Data Container\n */\nexport interface SetupData {\n  integrationId: string;\n  stepData: Record<string, any>;\n  credentials?: {\n    encrypted: boolean;\n    data: Record<string, any>;\n  };\n  permissions: Record<string, boolean>;\n  configuration: Record<string, any>;\n  metadata: {\n    startTime: string;\n    completionTime?: string;\n    userAgent: string;\n    retryCount: number;\n    errors: Array<{\n      step: string;\n      error: string;\n      timestamp: string;\n    }>;\n  };\n}\n\n/**\n * Setup Analytics for Continuous Improvement\n */\nexport interface SetupAnalytics {\n  sessionId: string;\n  integrationId: string;\n  stepMetrics: Array<{\n    stepId: string;\n    startTime: number;\n    endTime?: number;\n    completionRate: number;\n    errorCount: number;\n    retryCount: number;\n  }>;\n  totalDuration?: number;\n  completionStatus: 'completed' | 'abandoned' | 'error';\n  userFeedback?: {\n    rating: number;\n    comment?: string;\n    wouldRecommend: boolean;\n  };\n  deviceInfo: {\n    userAgent: string;\n    screenSize: string;\n    isMobile: boolean;\n  };\n}\n\n/**\n * Error Handling Types\n */\nexport interface IntegrationError {\n  code: string;\n  message: string;\n  category: 'network' | 'auth' | 'permission' | 'validation' | 'rate_limit' | 'server';\n  severity: 'low' | 'medium' | 'high' | 'critical';\n  retryable: boolean;\n  suggestion?: string;\n  helpUrl?: string;\n  timestamp: string;\n}\n\n/**\n * Setup Workflow Configuration\n */\nexport interface WorkflowConfig {\n  maxRetries: number;\n  timeoutMs: number;\n  enableAnalytics: boolean;\n  enableUserFeedback: boolean;\n  skipOptionalSteps: boolean;\n  theme: 'light' | 'dark' | 'auto';\n  locale: string;\n}\n\n/**\n * Props for Integration Setup Components\n */\nexport interface IntegrationSetupProps {\n  integration: Integration;\n  isOpen: boolean;\n  onClose: () => void;\n  onComplete: (data: SetupData) => void;\n  onError?: (error: IntegrationError) => void;\n  config?: Partial<WorkflowConfig>;\n  initialData?: Partial<SetupData>;\n}\n\n/**\n * Hook Return Types for Setup Management\n */\nexport interface UseIntegrationSetupReturn {\n  currentStep: number;\n  steps: SetupStep[];\n  setupData: SetupData;\n  isConnecting: boolean;\n  connectionStatus: ConnectionStatus;\n  errors: IntegrationError[];\n  analytics: SetupAnalytics;\n  \n  // Actions\n  nextStep: () => void;\n  previousStep: () => void;\n  skipStep: () => void;\n  retryStep: () => void;\n  validateStep: (stepId: string) => Promise<ValidationResult>;\n  resetSetup: () => void;\n  completeSetup: () => Promise<void>;\n  \n  // Utilities\n  getStepProgress: () => number;\n  getEstimatedTimeRemaining: () => string;\n  canProceed: () => boolean;\n} ","usedDeprecatedRules":[]},{"filePath":"/home/vonj/Github/Nexus/src/lib/types/learning-system.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":22,"column":37,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":22,"endColumn":40,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[600,603],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[600,603],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":52,"column":39,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":52,"endColumn":42,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1486,1489],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1486,1489],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":53,"column":21,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":53,"endColumn":24,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1512,1515],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1512,1515],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":79,"column":31,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":79,"endColumn":34,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2225,2228],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2225,2228],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":103,"column":26,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":103,"endColumn":29,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2931,2934],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2931,2934],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":109,"column":26,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":109,"endColumn":29,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3097,3100],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3097,3100],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":117,"column":10,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":117,"endColumn":13,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3308,3311],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3308,3311],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":125,"column":24,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":125,"endColumn":27,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3536,3539],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3536,3539],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":146,"column":32,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":146,"endColumn":35,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[4044,4047],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[4044,4047],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":181,"column":10,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":181,"endColumn":13,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[4876,4879],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[4876,4879],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":183,"column":28,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":183,"endColumn":31,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[4929,4932],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[4929,4932],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":258,"column":39,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":258,"endColumn":42,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[7259,7262],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[7259,7262],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":12,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\n * Learning System Types for Nexus Organizational Intelligence\n * Enables the platform to learn user patterns, suggest actions, and automate workflows\n */\n\nexport interface UserProfile {\n  id: string;\n  businessType: string;\n  industry: string;\n  teamSize: number;\n  role: string;\n  workingHours: {\n    timezone: string;\n    startTime: string;\n    endTime: string;\n    workDays: string[];\n  };\n  preferences: {\n    communicationStyle: 'direct' | 'detailed' | 'visual';\n    updateFrequency: 'realtime' | 'hourly' | 'daily' | 'weekly';\n    focusAreas: string[];\n    dashboardLayout: Record<string, any>;\n  };\n  learningMetadata: {\n    onboardingCompleted: boolean;\n    lastActive: string;\n    sessionCount: number;\n    averageSessionDuration: number;\n    mostUsedFeatures: string[];\n    skillLevel: 'beginner' | 'intermediate' | 'advanced';\n  };\n}\n\nexport interface BusinessInsight {\n  id: string;\n  type: 'opportunity' | 'risk' | 'trend' | 'anomaly' | 'achievement';\n  priority: 'low' | 'medium' | 'high' | 'critical';\n  category: string;\n  title: string;\n  description: string;\n  dataSource: string[];\n  metrics: {\n    impact: number; // 1-10 scale\n    confidence: number; // 0-1 scale\n    timeToValue: number; // minutes\n    effort: number; // 1-5 scale\n  };\n  suggestedActions: ActionSuggestion[];\n  automationPotential: AutomationOpportunity | null;\n  context: {\n    pageRelevance: string[]; // Which pages this insight is most relevant for\n    triggerConditions: Record<string, any>;\n    historicalData: any[];\n  };\n  createdAt: string;\n  expiresAt?: string;\n  status: 'active' | 'acted_on' | 'dismissed' | 'expired';\n}\n\nexport interface ActionSuggestion {\n  id: string;\n  type: 'quick_action' | 'guided_workflow' | 'external_link' | 'automation';\n  title: string;\n  description: string;\n  estimatedTime: number; // minutes\n  difficulty: 'easy' | 'medium' | 'hard';\n  prerequisites: string[];\n  steps: ActionStep[];\n  expectedOutcome: string;\n  trackingMetrics: string[];\n}\n\nexport interface ActionStep {\n  id: string;\n  title: string;\n  description: string;\n  type: 'navigation' | 'form_fill' | 'api_call' | 'external_action';\n  component?: string; // Component to render for this step\n  validation?: Record<string, any>;\n  automatable: boolean;\n}\n\nexport interface AutomationOpportunity {\n  id: string;\n  title: string;\n  description: string;\n  type: 'n8n_workflow' | 'api_automation' | 'scheduled_task' | 'trigger_based';\n  complexity: 'simple' | 'moderate' | 'complex';\n  estimatedSetupTime: number; // minutes\n  estimatedTimeSavings: number; // minutes per week\n  requiredIntegrations: string[];\n  workflow: {\n    trigger: WorkflowTrigger;\n    actions: WorkflowAction[];\n    conditions?: WorkflowCondition[];\n  };\n  riskLevel: 'low' | 'medium' | 'high';\n  testingRequired: boolean;\n}\n\nexport interface WorkflowTrigger {\n  type: 'schedule' | 'webhook' | 'data_change' | 'threshold' | 'manual';\n  config: Record<string, any>;\n  description: string;\n}\n\nexport interface WorkflowAction {\n  type: 'api_call' | 'notification' | 'data_update' | 'report_generation';\n  config: Record<string, any>;\n  description: string;\n  fallbackAction?: WorkflowAction;\n}\n\nexport interface WorkflowCondition {\n  field: string;\n  operator: 'equals' | 'greater_than' | 'less_than' | 'contains' | 'not_equals';\n  value: any;\n  description: string;\n}\n\nexport interface LearningEvent {\n  id: string;\n  userId: string;\n  type: 'page_view' | 'action_taken' | 'insight_dismissed' | 'automation_created' | 'integration_connected';\n  data: Record<string, any>;\n  context: {\n    page: string;\n    sessionId: string;\n    timestamp: string;\n    userAgent: string;\n  };\n  outcome?: {\n    successful: boolean;\n    timeToComplete?: number;\n    errorMessage?: string;\n    satisfactionRating?: number;\n  };\n}\n\nexport interface ProgressiveAction {\n  id: string;\n  pageId: string;\n  position: 'header' | 'sidebar' | 'floating' | 'inline' | 'contextual';\n  trigger: {\n    type: 'page_load' | 'data_threshold' | 'time_based' | 'user_behavior';\n    conditions: Record<string, any>;\n  };\n  action: ActionSuggestion;\n  displayConfig: {\n    style: 'button' | 'card' | 'banner' | 'tooltip' | 'modal';\n    variant: 'primary' | 'secondary' | 'accent' | 'warning' | 'success';\n    dismissible: boolean;\n    persistent: boolean;\n  };\n  analytics: {\n    impressions: number;\n    clicks: number;\n    completions: number;\n    dismissals: number;\n    avgTimeToAction: number;\n  };\n}\n\nexport interface SecondBrainContext {\n  currentPage: string;\n  userContext: UserProfile;\n  recentEvents: LearningEvent[];\n  activeInsights: BusinessInsight[];\n  availableData: IntegrationDataPoint[];\n  environmentFactors: {\n    timeOfDay: string;\n    dayOfWeek: string;\n    businessHours: boolean;\n    teamOnlineStatus: Record<string, boolean>;\n  };\n}\n\nexport interface IntegrationDataPoint {\n  source: string;\n  type: string;\n  value: any;\n  timestamp: string;\n  metadata: Record<string, any>;\n  relevanceScore: number; // 0-1 scale for how relevant this data is to current context\n}\n\nexport interface LearningSystemConfig {\n  insightGeneration: {\n    frequency: number; // minutes between insight generation runs\n    maxInsightsPerPage: number;\n    confidenceThreshold: number; // 0-1 scale\n    dataFreshnessTolerance: number; // minutes\n  };\n  actionSuggestions: {\n    maxSuggestionsPerPage: number;\n    prioritizationWeights: {\n      impact: number;\n      effort: number;\n      timeToValue: number;\n      userSkillLevel: number;\n    };\n  };\n  automation: {\n    autoApprovalThreshold: number; // confidence level for auto-approval\n    testingRequiredForComplexity: string[]; // complexity levels requiring testing\n    maxAutomationsPerWeek: number;\n  };\n  learning: {\n    eventRetentionDays: number;\n    profileUpdateFrequency: number; // hours\n    feedbackLoopTimeout: number; // hours to wait for outcome data\n  };\n}\n\n// Hook interfaces\nexport interface UseSecondBrainReturn {\n  insights: BusinessInsight[];\n  actions: ProgressiveAction[];\n  automationOpportunities: AutomationOpportunity[];\n  isLearning: boolean;\n  recordEvent: (event: Omit<LearningEvent, 'id' | 'userId'>) => void;\n  dismissInsight: (insightId: string) => void;\n  executeAction: (actionId: string) => Promise<void>;\n  createAutomation: (opportunityId: string) => Promise<void>;\n  updatePreferences: (preferences: Partial<UserProfile['preferences']>) => void;\n}\n\nexport interface UseLearningAnalyticsReturn {\n  userGrowth: {\n    skillProgression: Record<string, number>;\n    efficiencyGains: number[];\n    automationImpact: number;\n    timeToValueTrend: number[];\n  };\n  systemPerformance: {\n    insightAccuracy: number;\n    actionCompletionRate: number;\n    automationSuccessRate: number;\n    userSatisfactionScore: number;\n  };\n  recommendations: {\n    nextBestActions: ActionSuggestion[];\n    skillDevelopmentAreas: string[];\n    integrationSuggestions: string[];\n    optimizationOpportunities: AutomationOpportunity[];\n  };\n}\n\nexport interface UseProgressiveUIReturn {\n  currentContext: SecondBrainContext;\n  relevantActions: ProgressiveAction[];\n  dynamicContent: {\n    insights: BusinessInsight[];\n    suggestions: ActionSuggestion[];\n    automations: AutomationOpportunity[];\n  };\n  uiAdaptations: {\n    layoutAdjustments: Record<string, any>;\n    contentPriority: string[];\n    interactionHints: string[];\n  };\n} ","usedDeprecatedRules":[]},{"filePath":"/home/vonj/Github/Nexus/src/lib/types/licensing.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/vonj/Github/Nexus/src/lib/types/thoughts.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":73,"column":42,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":73,"endColumn":45,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1908,1911],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1908,1911],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":76,"column":31,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":76,"endColumn":34,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1980,1983],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1980,1983],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":101,"column":32,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":101,"endColumn":35,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2532,2535],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2532,2535],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":121,"column":42,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":121,"endColumn":45,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3117,3120],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3117,3120],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\n * @file thoughts.ts\n * @description TypeScript types for Nexus Idea Management System\n * Based on Marcoby Nexus diagrams and database schema\n */\n\n// Core thought categories from diagrams\nexport type ThoughtCategory = 'idea' | 'task' | 'reminder' | 'update';\n\n// Status types from the diagrams\nexport type ThoughtStatus = \n  | 'future_goals' \n  | 'concept' \n  | 'in_progress' \n  | 'completed'\n  | 'pending' \n  | 'reviewed' \n  | 'implemented'\n  | 'not_started' \n  | 'upcoming' \n  | 'due' \n  | 'overdue';\n\n// Workflow stages from the idea workflow diagram\nexport type WorkflowStage = 'create_idea' | 'update_idea' | 'implement_idea' | 'achievement';\n\n// Interaction methods from the interactive prompts diagram\nexport type InteractionMethod = 'text' | 'speech' | 'copy_paste' | 'upload';\n\n// Classification types\nexport type PersonalOrProfessional = 'personal' | 'professional';\n\n// Relationship types for thought connections\nexport type RelationshipType = \n  | 'spawns_task' \n  | 'spawns_reminder' \n  | 'implements' \n  | 'relates_to' \n  | 'depends_on' \n  | 'blocks';\n\n// AI interaction types\nexport type AIInteractionType = 'insight' | 'suggestion' | 'reminder' | 'analysis';\n\n// Main Thought interface matching database schema\nexport interface Thought {\n  id: string;\n  user_id: string;\n  created_by?: string;\n  updated_by?: string;\n  creation_date: Date;\n  last_updated: Date;\n  \n  // Content and core properties\n  content: string;\n  category: ThoughtCategory;\n  status: ThoughtStatus;\n  \n  // Classification\n  personal_or_professional?: PersonalOrProfessional;\n  main_sub_categories: string[];\n  initiative: boolean;\n  impact?: string;\n  \n  // Workflow and relationships\n  parent_idea_id?: string;\n  workflow_stage?: WorkflowStage;\n  \n  // Workspace integration fields\n  department?: string;\n  priority?: 'low' | 'medium' | 'high';\n  estimated_effort?: string;\n  ai_clarification_data?: Record<string, any>;\n  \n  // AI and interaction metadata\n  ai_insights: Record<string, any>;\n  interaction_method?: InteractionMethod;\n  \n  // Timestamps\n  created_at: Date;\n  updated_at: Date;\n}\n\n// Thought relationship interface\nexport interface ThoughtRelationship {\n  id: string;\n  source_thought_id: string;\n  target_thought_id: string;\n  relationship_type: RelationshipType;\n  created_at: Date;\n}\n\n// AI interaction interface\nexport interface AIInteraction {\n  id: string;\n  user_id: string;\n  thought_id?: string;\n  prompt_text?: string;\n  ai_response?: string;\n  interaction_type: AIInteractionType;\n  context_data: Record<string, any>;\n  created_at: Date;\n}\n\n// Create thought request (for API calls)\nexport interface CreateThoughtRequest {\n  content: string;\n  category: ThoughtCategory;\n  status?: ThoughtStatus;\n  personal_or_professional?: PersonalOrProfessional;\n  main_sub_categories?: string[];\n  initiative?: boolean;\n  impact?: string;\n  parent_idea_id?: string;\n  workflow_stage?: WorkflowStage;\n  interaction_method?: InteractionMethod;\n  // Workspace integration fields\n  department?: string;\n  priority?: 'low' | 'medium' | 'high';\n  estimated_effort?: string;\n  ai_clarification_data?: Record<string, any>;\n}\n\n// Update thought request\nexport interface UpdateThoughtRequest extends Partial<CreateThoughtRequest> {\n  id: string;\n}\n\n// Thought with relationships (for complex queries)\nexport interface ThoughtWithRelationships extends Thought {\n  children: Thought[];\n  parents: Thought[];\n  related_thoughts: Thought[];\n  ai_interactions: AIInteraction[];\n}\n\n// Workflow progress tracking\nexport interface WorkflowProgress {\n  idea_id: string;\n  current_stage: WorkflowStage;\n  completed_stages: WorkflowStage[];\n  next_actions: string[];\n  progress_percentage: number;\n}\n\n// AI insights structure\nexport interface AIInsights {\n  suggestions: string[];\n  next_steps: string[];\n  related_ideas: string[];\n  potential_tasks: string[];\n  reminders: string[];\n  risk_assessment?: string;\n  priority_score?: number;\n}\n\n// Interactive prompt data\nexport interface InteractivePrompt {\n  id: string;\n  user_id: string;\n  prompt_text: string;\n  prompt_type: 'question' | 'suggestion' | 'reminder' | 'insight';\n  context: {\n    related_thoughts: string[];\n    trigger_event?: string;\n    urgency_level?: 'low' | 'medium' | 'high';\n  };\n  response_options?: string[];\n  auto_generated: boolean;\n  created_at: Date;\n}\n\n// Thought analytics and metrics\nexport interface ThoughtMetrics {\n  total_thoughts: number;\n  thoughts_by_category: Record<ThoughtCategory, number>;\n  thoughts_by_status: Record<ThoughtStatus, number>;\n  completion_rate: number;\n  active_ideas: number;\n  pending_tasks: number;\n  overdue_items: number;\n  productivity_score: number;\n}\n\n// Search and filter options\nexport interface ThoughtFilters {\n  category?: ThoughtCategory[];\n  status?: ThoughtStatus[];\n  personal_or_professional?: PersonalOrProfessional;\n  workflow_stage?: WorkflowStage[];\n  date_range?: {\n    start: Date;\n    end: Date;\n  };\n  search_text?: string;\n  has_ai_insights?: boolean;\n  initiative_only?: boolean;\n}\n\n// Bulk operations\nexport interface BulkUpdateRequest {\n  thought_ids: string[];\n  updates: Partial<UpdateThoughtRequest>;\n}\n\n// Export response types for API\nexport interface ThoughtsResponse {\n  thoughts: Thought[];\n  total_count: number;\n  has_more: boolean;\n}\n\nexport interface ThoughtResponse {\n  thought: Thought;\n  relationships?: ThoughtRelationship[];\n  ai_interactions?: AIInteraction[];\n}\n\n// Error types\nexport interface ThoughtError {\n  code: string;\n  message: string;\n  field?: string;\n} ","usedDeprecatedRules":[]},{"filePath":"/home/vonj/Github/Nexus/src/lib/types/userProfile.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":34,"column":18,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":34,"endColumn":21,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[776,779],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[776,779],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":101,"column":20,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":101,"endColumn":23,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2329,2332],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2329,2332],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":120,"column":34,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":120,"endColumn":37,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2833,2836],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2833,2836],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":132,"column":26,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":132,"endColumn":29,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3125,3128],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3125,3128],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"export interface Company {\n  id: string;\n  name: string;\n  domain?: string | null;\n  industry?: string | null;\n  size?: string | null;\n  logo_url?: string | null;\n  settings?: CompanySettings | null;\n  created_at?: string | null;\n  updated_at?: string | null;\n}\n\nexport interface CompanySettings {\n  theme?: 'light' | 'dark' | 'system';\n  branding?: {\n    primary_color?: string;\n    logo_url?: string;\n    custom_css?: string;\n  };\n  integrations?: {\n    enabled_categories?: string[];\n    auto_sync?: boolean;\n  };\n  notifications?: {\n    email_enabled?: boolean;\n    slack_enabled?: boolean;\n    frequency?: 'real-time' | 'daily' | 'weekly';\n  };\n  security?: {\n    enforce_2fa?: boolean;\n    session_timeout?: number;\n    allowed_domains?: string[];\n  };\n  [key: string]: any; // For extensibility\n}\n\nexport interface UserProfile {\n  id: string; // Same as auth.users.id\n  company_id?: string;\n  company?: Company;\n  \n  // Personal Information\n  first_name?: string;\n  last_name?: string;\n  display_name?: string;\n  avatar_url?: string;\n  bio?: string;\n  date_of_birth?: string;\n  \n  // Contact Information\n  phone?: string;\n  mobile?: string;\n  work_phone?: string;\n  personal_email?: string;\n  \n  // Work Information\n  role: 'owner' | 'admin' | 'manager' | 'user';\n  department?: string;\n  job_title?: string;\n  employee_id?: string;\n  hire_date?: string;\n  manager_id?: string;\n  direct_reports?: string[];\n  \n  // Location Information\n  timezone: string;\n  location?: string;\n  work_location?: 'office' | 'remote' | 'hybrid';\n  address?: {\n    street?: string;\n    city?: string;\n    state?: string;\n    postal_code?: string;\n    country?: string;\n  };\n  \n  // Professional Information\n  linkedin_url?: string;\n  github_url?: string;\n  twitter_url?: string;\n  skills?: string[];\n  certifications?: string[];\n  languages?: { language: string; proficiency: 'basic' | 'intermediate' | 'advanced' | 'native' }[];\n  \n  // Emergency Contact\n  emergency_contact?: {\n    name?: string;\n    relationship?: string;\n    phone?: string;\n    email?: string;\n  };\n  \n  // System Preferences\n  preferences: {\n    theme: 'light' | 'dark' | 'system';\n    notifications: boolean;\n    language: string;\n    date_format?: 'MM/DD/YYYY' | 'DD/MM/YYYY' | 'YYYY-MM-DD';\n    time_format?: '12h' | '24h';\n    currency?: string;\n    [key: string]: any;\n  };\n  \n  // Status and Metadata\n  status?: 'active' | 'inactive' | 'pending' | 'suspended';\n  last_login?: string;\n  onboarding_completed: boolean;\n  profile_completion_percentage?: number;\n  created_at: string;\n  updated_at: string;\n}\n\nexport interface Integration {\n  id: string;\n  name: string;\n  slug: string;\n  category: 'crm' | 'payment' | 'email' | 'automation' | 'communication' | 'productivity' | 'accounting';\n  description?: string;\n  icon_url?: string;\n  config_schema?: Record<string, any>;\n  is_active: boolean;\n  created_at: string;\n}\n\nexport interface UserIntegration {\n  id: string;\n  user_id: string;\n  company_id?: string;\n  integration_id: string;\n  integration?: Integration;\n  name?: string; // User-defined name for this integration instance\n  config: Record<string, any>;\n  status: 'active' | 'inactive' | 'error' | 'setup';\n  last_sync?: string;\n  error_message?: string;\n  created_at: string;\n  updated_at: string;\n}\n\nexport interface EnhancedUser {\n  // Supabase auth user fields\n  id: string;\n  email: string;\n  email_confirmed_at?: string;\n  \n  // Enhanced profile fields\n  profile?: UserProfile;\n  company?: Company;\n  integrations?: UserIntegration[];\n  \n  // Computed fields\n  full_name?: string;\n  initials?: string;\n  can_manage_company?: boolean;\n}\n\nexport interface UserContextState {\n  user: EnhancedUser | null;\n  loading: boolean;\n  isAuthenticated: boolean;\n}\n\nexport interface UserContextActions {\n  updateProfile: (updates: Partial<UserProfile>) => Promise<void>;\n  updateCompany: (updates: Partial<Company>) => Promise<void>;\n  addIntegration: (\n    integration: Omit<UserIntegration, 'id' | 'user_id' | 'created_at' | 'updated_at'>,\n  ) => Promise<void>;\n  updateIntegration: (id: string, updates: Partial<UserIntegration>) => Promise<void>;\n  removeIntegration: (id: string) => Promise<void>;\n  refreshUserData: () => Promise<void>;\n  completeOnboarding: () => Promise<void>;\n}\n\nexport type UserContextType = UserContextState & UserContextActions; ","usedDeprecatedRules":[]},{"filePath":"/home/vonj/Github/Nexus/src/lib/ui/featureRegistry.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'Calendar' is defined but never used.","line":15,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":15,"endColumn":11},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'PieChart' is defined but never used.","line":18,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":18,"endColumn":11},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'Bell' is defined but never used.","line":19,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":19,"endColumn":7},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'LineChart' is defined but never used.","line":22,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":22,"endColumn":12}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React from 'react';\nimport type { ReactNode } from 'react';\nimport {\n  // Core icons\n  LayoutGrid,\n  BarChart2,\n  Users,\n  FileText,\n  Settings,\n  Briefcase,\n  CreditCard,\n  Building2,\n  Zap,\n  MessageSquare,\n  Calendar,\n  Sparkles,\n  Wrench,\n  PieChart,\n  Bell,\n  Database,\n  Bot,\n  LineChart,\n  UserCheck,\n} from 'lucide-react';\n\n/**\n * Feature Category\n */\nexport type FeatureCategory = \n  | 'core'\n  | 'department' \n  | 'productivity' \n  | 'analytics' \n  | 'ai' \n  | 'administration';\n\n/**\n * Feature Access Level\n */\nexport type FeatureAccessLevel = \n  | 'free'         // Available in free plan\n  | 'pro'          // Requires Pro plan\n  | 'enterprise'   // Requires Enterprise plan\n  | 'beta'         // Available to beta testers only\n  | 'admin'        // Requires admin privileges\n  | 'owner';       // Requires owner privileges\n\n/**\n * Feature Definition\n */\nexport interface FeatureDefinition {\n  /** Unique feature identifier */\n  id: string;\n  /** Display name */\n  name: string;\n  /** Brief description */\n  description: string;\n  /** Feature icon */\n  icon: ReactNode;\n  /** URL path */\n  path: string;\n  /** Feature category */\n  category: FeatureCategory;\n  /** Required access level */\n  accessLevel: FeatureAccessLevel;\n  /** Whether feature is new */\n  isNew?: boolean;\n  /** Whether feature is highlighted */\n  isHighlighted?: boolean;\n  /** Keywords for search */\n  keywords?: string[];\n  /** Related features (by ID) */\n  relatedFeatures?: string[];\n  /** Documentation URL */\n  documentationUrl?: string;\n}\n\n/**\n * Central Feature Registry\n * \n * Provides a structured way to register and discover platform features.\n * Used for:\n * - Building navigation\n * - Feature discovery\n * - Access control\n * - Documentation linking\n * - Search functionality\n */\nconst featuresList: FeatureDefinition[] = [\n  // Core Features\n  {\n    id: 'command-center',\n    name: 'Command Center',\n    description: 'Central hub for all Nexus functionality',\n    icon: <LayoutGrid />,\n    path: '/nexus',\n    category: 'core',\n    accessLevel: 'free',\n    isHighlighted: true,\n    keywords: ['dashboard', 'home', 'central', 'hub', 'nexus'],\n  },\n  {\n    id: 'my-workspace',\n    name: 'My Workspace',\n    description: 'Your personalized workspace with frequently used tools',\n    icon: <LayoutGrid />,\n    path: '/workspace',\n    category: 'core',\n    accessLevel: 'free',\n    isNew: true,\n    keywords: ['personal', 'dashboard', 'workspace', 'home'],\n  },\n  \n  // Department Features\n  {\n    id: 'sales',\n    name: 'Sales',\n    description: 'CRM, deals, and sales operations',\n    icon: <Briefcase />,\n    path: '/sales',\n    category: 'department',\n    accessLevel: 'free',\n    keywords: ['crm', 'deals', 'customers', 'pipeline', 'leads'],\n    relatedFeatures: ['sales-forecasting', 'customer-management'],\n  },\n  {\n    id: 'finance',\n    name: 'Finance',\n    description: 'Accounting, invoices, and financial operations',\n    icon: <CreditCard />,\n    path: '/finance',\n    category: 'department',\n    accessLevel: 'free',\n    keywords: ['accounting', 'invoices', 'payments', 'expenses'],\n    relatedFeatures: ['financial-reporting', 'invoice-management'],\n  },\n  {\n    id: 'operations',\n    name: 'Operations',\n    description: 'Business operations and process management',\n    icon: <Building2 />,\n    path: '/operations',\n    category: 'department',\n    accessLevel: 'free',\n    keywords: ['operations', 'processes', 'workflow', 'management'],\n    relatedFeatures: ['process-automation', 'inventory-management'],\n  },\n  \n  // Analytics Features\n  {\n    id: 'dashboards',\n    name: 'Dashboards',\n    description: 'Interactive data visualizations and KPIs',\n    icon: <BarChart2 />,\n    path: '/dashboards',\n    category: 'analytics',\n    accessLevel: 'free',\n    keywords: ['analytics', 'reports', 'charts', 'kpis', 'metrics'],\n    relatedFeatures: ['custom-reports', 'data-exports'],\n  },\n  {\n    id: 'reports',\n    name: 'Reports',\n    description: 'Custom reports and scheduled exports',\n    icon: <FileText />,\n    path: '/reports',\n    category: 'analytics',\n    accessLevel: 'pro',\n    keywords: ['reports', 'exports', 'analysis', 'metrics'],\n    relatedFeatures: ['dashboards', 'data-exports'],\n  },\n  {\n    id: 'data-warehouse',\n    name: 'Data Warehouse',\n    description: 'Central repository for all business data',\n    icon: <Database />,\n    path: '/data-warehouse',\n    category: 'analytics',\n    accessLevel: 'enterprise',\n    keywords: ['data', 'warehouse', 'storage', 'analysis'],\n    relatedFeatures: ['reports', 'dashboards'],\n  },\n  \n  // AI Features\n  {\n    id: 'ai-assistant',\n    name: 'AI Assistant',\n    description: 'Intelligent assistant for daily tasks',\n    icon: <Bot />,\n    path: '/chat',\n    category: 'ai',\n    accessLevel: 'free',\n    isHighlighted: true,\n    keywords: ['ai', 'assistant', 'chatbot', 'help', 'chat'],\n    relatedFeatures: ['ai-insights', 'ai-automation'],\n  },\n  {\n    id: 'ai-insights',\n    name: 'AI Insights',\n    description: 'AI-generated insights from your business data',\n    icon: <Sparkles />,\n    path: '/ai-insights',\n    category: 'ai',\n    accessLevel: 'pro',\n    isNew: true,\n    keywords: ['ai', 'insights', 'intelligence', 'analysis'],\n    relatedFeatures: ['ai-assistant', 'dashboards'],\n  },\n  {\n    id: 'ai-automation',\n    name: 'AI Automation',\n    description: 'Automate workflows with AI',\n    icon: <Zap />,\n    path: '/ai-automation',\n    category: 'ai',\n    accessLevel: 'enterprise',\n    isNew: true,\n    keywords: ['ai', 'automation', 'workflow', 'processes'],\n    relatedFeatures: ['ai-assistant', 'workflow-builder'],\n  },\n  \n  // Productivity Features\n  {\n    id: 'messages',\n    name: 'Messages',\n    description: 'Internal team communication',\n    icon: <MessageSquare />,\n    path: '/messages',\n    category: 'productivity',\n    accessLevel: 'free',\n    keywords: ['messages', 'chat', 'communication', 'team'],\n    relatedFeatures: ['team-management', 'notifications'],\n  },\n  {\n    id: 'tasks',\n    name: 'Tasks',\n    description: 'Task management and tracking',\n    icon: <UserCheck />,\n    path: '/tasks',\n    category: 'productivity',\n    accessLevel: 'free',\n    keywords: ['tasks', 'todos', 'projects', 'management'],\n    relatedFeatures: ['team-management'],\n  },\n  \n  // Administration Features\n  {\n    id: 'team-management',\n    name: 'Team Management',\n    description: 'Manage users and teams',\n    icon: <Users />,\n    path: '/team',\n    category: 'administration',\n    accessLevel: 'admin',\n    keywords: ['team', 'users', 'permissions', 'roles'],\n    relatedFeatures: ['settings', 'notifications'],\n  },\n  {\n    id: 'settings',\n    name: 'Settings',\n    description: 'System and user settings',\n    icon: <Settings />,\n    path: '/settings',\n    category: 'administration',\n    accessLevel: 'free',\n    keywords: ['settings', 'configuration', 'preferences'],\n    relatedFeatures: ['team-management', 'notifications'],\n  },\n  {\n    id: 'integrations',\n    name: 'Integrations',\n    description: 'Connect with external services and tools',\n    icon: <Wrench />,\n    path: '/integrations',\n    category: 'administration',\n    accessLevel: 'pro',\n    keywords: ['integrations', 'connections', 'api', 'services'],\n    relatedFeatures: ['settings', 'workflow-builder'],\n  }\n];\n\n/**\n * Gets all registered features\n */\nexport const getAllFeatures = (): FeatureDefinition[] => {\n  return featuresList;\n};\n\n/**\n * Gets features by category\n */\nexport const getFeaturesByCategory = (category: FeatureCategory): FeatureDefinition[] => {\n  return featuresList.filter(feature => feature.category === category);\n};\n\n/**\n * Gets features by access level\n */\nexport const getFeaturesByAccessLevel = (level: FeatureAccessLevel): FeatureDefinition[] => {\n  return featuresList.filter(feature => feature.accessLevel === level);\n};\n\n/**\n * Gets a feature by ID\n */\nexport const getFeatureById = (id: string): FeatureDefinition | undefined => {\n  return featuresList.find(feature => feature.id === id);\n};\n\n/**\n * Gets related features for a given feature\n */\nexport const getRelatedFeatures = (featureId: string): FeatureDefinition[] => {\n  const feature = getFeatureById(featureId);\n  if (!feature || !feature.relatedFeatures || feature.relatedFeatures.length === 0) {\n    return [];\n  }\n  \n  return featuresList.filter(f => feature.relatedFeatures?.includes(f.id));\n};\n\n/**\n * Searches features by query\n */\nexport const searchFeatures = (query: string): FeatureDefinition[] => {\n  const normalizedQuery = query.toLowerCase().trim();\n  \n  return featuresList.filter(feature => \n    feature.name.toLowerCase().includes(normalizedQuery) ||\n    feature.description.toLowerCase().includes(normalizedQuery) ||\n    feature.keywords?.some(keyword => keyword.toLowerCase().includes(normalizedQuery))\n  );\n};\n\n/**\n * Checks if a user has access to a feature\n */\nexport const hasFeatureAccess = (\n  featureId: string, \n  userPlan: 'free' | 'pro' | 'enterprise',\n  isAdmin: boolean,\n  isOwner: boolean\n): boolean => {\n  const feature = getFeatureById(featureId);\n  if (!feature) return false;\n  \n  switch (feature.accessLevel) {\n    case 'free':\n      return true;\n    case 'pro':\n      return userPlan === 'pro' || userPlan === 'enterprise';\n    case 'enterprise':\n      return userPlan === 'enterprise';\n    case 'admin':\n      return isAdmin || isOwner;\n    case 'owner':\n      return isOwner;\n    case 'beta':\n      // Beta access would typically be managed by a separate system\n      return false;\n    default:\n      return false;\n  }\n};\n\n/**\n * All registered features in the platform.\n * @type {FeatureDefinition[]}\n */\nexport const features = featuresList; ","usedDeprecatedRules":[]},{"filePath":"/home/vonj/Github/Nexus/src/lib/utils/passkey.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/vonj/Github/Nexus/src/lib/utils/storageUtils.ts","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'e' is defined but never used.","line":102,"column":16,"nodeType":null,"messageId":"unusedVar","endLine":102,"endColumn":17},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'e' is defined but never used.","line":140,"column":20,"nodeType":null,"messageId":"unusedVar","endLine":140,"endColumn":21},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'e' is defined but never used.","line":181,"column":14,"nodeType":null,"messageId":"unusedVar","endLine":181,"endColumn":15}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\n * @name storageUtils\n * @description Utilities for managing localStorage and preventing JSON parsing errors.\n */\n\n/**\n * Safely gets and parses a value from localStorage\n * @param key - The localStorage key\n * @param defaultValue - Default value to return if parsing fails\n * @returns The parsed value or default value\n */\nfunction safeGetLocalStorage<T>(key: string, defaultValue: T): T {\n  try {\n    const item = localStorage.getItem(key);\n    if (item === null) return defaultValue;\n    \n    // Try to parse as JSON if it looks like JSON\n    if (item.startsWith('{') || item.startsWith('[')) {\n      try {\n        return JSON.parse(item) as T;\n      } catch {\n        // If parsing fails, return the raw string\n        return item as unknown as T;\n      }\n    }\n    \n    return item as unknown as T;\n  } catch (error) {\n    console.warn(`Failed to parse localStorage item \"${key}\":`, error);\n    // Remove the corrupted item\n    localStorage.removeItem(key);\n    return defaultValue;\n  }\n}\n\n/**\n * Safely sets a value in localStorage with JSON stringification\n * @param key - The localStorage key\n * @param value - The value to store\n * @returns Whether the operation was successful\n */\nfunction safeSetLocalStorage<T>(key: string, value: T): boolean {\n  try {\n    // Make sure we stringify objects/arrays before storing\n    const stringValue = typeof value === 'object' ? JSON.stringify(value) : String(value);\n    localStorage.setItem(key, stringValue);\n    return true;\n  } catch (error) {\n    console.warn(`Failed to set localStorage item \"${key}\":`, error);\n    return false;\n  }\n}\n\n/**\n * Safely removes an item from localStorage\n */\nfunction safeRemoveLocalStorage(key: string): void {\n  try {\n    localStorage.removeItem(key);\n  } catch (error) {\n    console.error(`Error removing localStorage key \"${key}\":`, error);\n  }\n}\n\n/**\n * Clean up potentially corrupted localStorage items\n * @param keysToCheck - Array of key patterns to check\n */\nfunction cleanupLocalStorage(keysToCheck: string[] = [\n  'nexus-theme',\n  'theme',\n  'vite-ui-theme',  // Include old key for cleanup\n  'nexus_n8n_config_',\n  'nexus_onboarding_state',\n  'nexus-user',\n  'n8n_webhook_'\n]): void {\n  try {\n    const allKeys = Object.keys(localStorage);\n    let cleanedCount = 0;\n\n    allKeys.forEach(key => {\n      try {\n        const value = localStorage.getItem(key);\n        if (value) {\n          // Check for common problematic values\n          if (value === '[object Object]' || value === 'undefined' || value === 'null') {\n            console.warn(`Removing invalid localStorage value for key: ${key}`);\n            localStorage.removeItem(key);\n            cleanedCount++;\n            return;\n          }\n          \n          // Only validate JSON for keys we care about\n          const shouldValidateJSON = keysToCheck.some(pattern => key.includes(pattern));\n          \n          if (shouldValidateJSON) {\n            // Try to parse the JSON to see if it's valid\n            JSON.parse(value);\n          }\n        }\n      } catch (e) {\n        console.warn(`Removing corrupted localStorage key: ${key}`);\n        localStorage.removeItem(key);\n        cleanedCount++;\n      }\n    });\n\n    if (cleanedCount > 0) {\n      console.log(`Cleaned up ${cleanedCount} corrupted localStorage items`);\n    }\n  } catch (error) {\n    console.warn('Error during localStorage cleanup:', error);\n  }\n}\n\n/**\n * Aggressive cleanup for immediate issues\n */\nfunction aggressiveCleanup(): void {\n  try {\n    const allKeys = Object.keys(localStorage);\n    let cleanedCount = 0;\n\n    allKeys.forEach(key => {\n      try {\n        const value = localStorage.getItem(key);\n        if (value) {\n          // Remove any \"[object Object]\" values immediately\n          if (value === '[object Object]' || value === 'undefined' || value === 'null' || value === '') {\n            console.warn(`Aggressive cleanup removing: ${key} = \"${value}\"`);\n            localStorage.removeItem(key);\n            cleanedCount++;\n            return;\n          }\n          \n          // Try to parse all values to check validity\n          try {\n            JSON.parse(value);\n          } catch (e) {\n            // If it's not valid JSON and not a simple string, remove it\n            if (value.includes('{') || value.includes('[') || value.includes('object')) {\n              console.warn(`Aggressive cleanup removing invalid JSON: ${key}`);\n              localStorage.removeItem(key);\n              cleanedCount++;\n            }\n          }\n        }\n      } catch (e) {\n        console.warn(`Aggressive cleanup error for key ${key}:`, e);\n        localStorage.removeItem(key);\n        cleanedCount++;\n      }\n    });\n\n    if (cleanedCount > 0) {\n      console.log(`Aggressive cleanup removed ${cleanedCount} problematic localStorage items`);\n    }\n  } catch (error) {\n    console.warn('Error during aggressive localStorage cleanup:', error);\n  }\n}\n\n/**\n * Initialize localStorage cleanup on app start\n */\nfunction initializeStorageCleanup(): void {\n  // Run aggressive cleanup first to fix immediate issues\n  aggressiveCleanup();\n  \n  // Run normal cleanup\n  cleanupLocalStorage();\n\n  // Fix any invalid JSON in localStorage that might cause parsing errors\n  Object.keys(localStorage).forEach(key => {\n    try {\n      const value = localStorage.getItem(key);\n      if (value && (value.startsWith('{') || value.startsWith('['))) {\n        JSON.parse(value); // This will throw if invalid\n      }\n    } catch (e) {\n      console.warn(`Removing invalid JSON from localStorage key \"${key}\"`);\n      localStorage.removeItem(key);\n    }\n  });\n\n  // Set up periodic cleanup (every 5 minutes)\n  setInterval(() => {\n    cleanupLocalStorage();\n  }, 5 * 60 * 1000);\n}\n\n/**\n * Check if localStorage is available\n * @returns Whether localStorage is available\n */\nfunction isLocalStorageAvailable(): boolean {\n  try {\n    const test = '__localStorage_test__';\n    localStorage.setItem(test, 'test');\n    localStorage.removeItem(test);\n    return true;\n  } catch {\n    return false;\n  }\n}\n\n// Export all functions in a single object to avoid duplicate exports\nexport {\n  safeGetLocalStorage,\n  safeSetLocalStorage,\n  safeRemoveLocalStorage,\n  cleanupLocalStorage,\n  aggressiveCleanup,\n  initializeStorageCleanup,\n  isLocalStorageAvailable\n}; ","usedDeprecatedRules":[]},{"filePath":"/home/vonj/Github/Nexus/src/lib/utils/utils.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/vonj/Github/Nexus/src/main.tsx","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":42,"column":14,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":42,"endColumn":17,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1586,1589],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1586,1589],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React from 'react';\nimport ReactDOM from 'react-dom/client';\nimport { BrowserRouter as Router } from 'react-router-dom';\nimport App from './App';\nimport AuthProvider from './contexts/AuthContext';\nimport { ThemeProvider } from './components/ui/theme-provider';\nimport { ToastProvider } from './components/ui/Toast';\nimport { initializeStorageCleanup } from './lib/utils/storageUtils';\nimport { QueryClient, QueryClientProvider } from '@tanstack/react-query';\nimport './index.css';\nimport './lib/i18n';\n\n// Initialize localStorage cleanup to prevent JSON parsing errors\ninitializeStorageCleanup();\n\nconst queryClient = new QueryClient();\n\n// Enhanced error suppression for browser extensions and Lit components\nconst originalConsoleError = console.error;\nconst originalConsoleWarn = console.warn;\n\n// Suppress browser extension JSON parsing errors\nconsole.error = (...args) => {\n  const message = args.join(' ');\n  \n  // Suppress known extension errors that pollute the console\n  if (message.includes('\"[object Object]\" is not valid JSON') ||\n      message.includes('_storageChangeDispatcher') ||\n      message.includes('content.js') ||\n      message.includes('SyntaxError: \"[object Object]\"') ||\n      message.includes('Uncaught (in promise) SyntaxError') ||\n      (message.includes('VM') && message.includes('SyntaxError'))) {\n    return; // Suppress these errors\n  }\n  \n  originalConsoleError.apply(console, args);\n};\n\n// Configure Lit for better Microsoft Graph Toolkit compatibility\nif (import.meta.env.PROD) {\n  // Set production environment for Lit components\n  (window as any).process = { env: { NODE_ENV: 'production' } };\n} else {\n  // In development, suppress Lit warnings but keep functionality\n  console.warn = (...args) => {\n    const message = args.join(' ');\n    \n    if (message.includes('Lit is in dev mode') ||\n        message.includes('Multiple versions of Lit loaded') ||\n        message.includes('lit-element') ||\n        message.includes('lit-html')) {\n      return; // Suppress Lit dev mode warnings\n    }\n    originalConsoleWarn.apply(console, args);\n  };\n}\n\n// Handle global unhandled promise rejections from extensions\nwindow.addEventListener('unhandledrejection', (event) => {\n  const message = event.reason?.message || event.reason?.toString() || '';\n  \n  if (message.includes('\"[object Object]\" is not valid JSON') ||\n      message.includes('_storageChangeDispatcher') ||\n      message.includes('content.js')) {\n    event.preventDefault(); // Prevent the error from showing in console\n    return;\n  }\n});\n\nReactDOM.createRoot(document.getElementById('root')!).render(\n  <React.StrictMode>\n    <Router>\n      <ThemeProvider defaultTheme=\"system\">\n        <AuthProvider>\n          <ToastProvider>\n            <QueryClientProvider client={queryClient}>\n              <App />\n            </QueryClientProvider>\n          </ToastProvider>\n        </AuthProvider>\n      </ThemeProvider>\n    </Router>\n  </React.StrictMode>\n);\n","usedDeprecatedRules":[]},{"filePath":"/home/vonj/Github/Nexus/src/marketplace/Marketplace.test.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/vonj/Github/Nexus/src/routes.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/vonj/Github/Nexus/src/types/markdown-overrides.d.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/vonj/Github/Nexus/src/types/react-window-overrides.d.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/vonj/Github/Nexus/src/types/supabase.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":13,"column":31,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":13,"endColumn":34,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[221,224],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[221,224],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":14,"column":34,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":14,"endColumn":37,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[260,263],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[260,263],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":15,"column":34,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":15,"endColumn":37,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[299,302],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[299,302],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"export type Json =\n  | string\n  | number\n  | boolean\n  | null\n  | { [key: string]: Json | undefined }\n  | Json[]\n\nexport interface Database {\n  public: {\n    Tables: {\n      [key: string]: {\n        Row: { [key: string]: any }\n        Insert: { [key: string]: any }\n        Update: { [key: string]: any }\n      }\n    }\n  }\n}\n","usedDeprecatedRules":[]},{"filePath":"/home/vonj/Github/Nexus/src/vite-env.d.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/vonj/Github/Nexus/tailwind.config.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/vonj/Github/Nexus/tailwind.config.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/vonj/Github/Nexus/vite.config.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]}]