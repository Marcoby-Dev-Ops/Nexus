{
  "name": "Device Data Sync Workflow",
  "nodes": [
    {
      "parameters": {
        "httpMethod": "GET",
        "url": "={{ $env.SUPABASE_URL }}/rest/v1/user_integrations?select=*&status=eq.active",
        "authentication": "genericCredentialType",
        "genericAuthType": "httpHeaderAuth",
        "httpHeaderAuth": {
          "name": "Authorization",
          "value": "Bearer {{ $env.SUPABASE_SERVICE_ROLE_KEY }}"
        },
        "options": {
          "timeout": 10000
        }
      },
      "id": "fetch-integrations",
      "name": "Fetch Active Integrations",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.1,
      "position": [240, 300],
      "webhookId": ""
    },
    {
      "parameters": {
        "jsCode": "// Process each integration and generate mock device data\n// This Code node transforms integration data into device records for database insertion\n\nconst integrations = $input.all();\nconst allRecords = [];\nlet totalProcessed = 0;\nlet totalErrors = [];\n\nconsole.log(`Processing ${integrations.length} integrations...`);\n\nfor (const integration of integrations) {\n  const data = integration.json;\n  \n  try {\n    // Validate integration data\n    if (!data || !data.id) {\n      throw new Error('Invalid integration data: missing id');\n    }\n\n    // Mock API response for device health data\n    // In a real scenario, this would be an actual API call to the integration\n    const mockApiResponse = {\n      devices: [\n        {\n          device_id: `device-${data.id}-1`,\n          status: 'online',\n          cpu_usage: Math.round((Math.random() * 100) * 100) / 100,\n          memory_usage: Math.round((Math.random() * 100) * 100) / 100,\n          disk_usage_gb: Math.round((Math.random() * 500) * 100) / 100,\n          last_seen: new Date().toISOString()\n        },\n        {\n          device_id: `device-${data.id}-2`,\n          status: 'offline',\n          cpu_usage: 0,\n          memory_usage: 0,\n          disk_usage_gb: Math.round((Math.random() * 500) * 100) / 100,\n          last_seen: new Date(Date.now() - 86400000).toISOString()\n        },\n        {\n          device_id: `device-${data.id}-3`,\n          status: 'warning',\n          cpu_usage: Math.round((Math.random() * 80 + 20) * 100) / 100,\n          memory_usage: Math.round((Math.random() * 60 + 40) * 100) / 100,\n          disk_usage_gb: Math.round((Math.random() * 300 + 200) * 100) / 100,\n          last_seen: new Date(Date.now() - 3600000).toISOString()\n        }\n      ]\n    };\n\n    // Transform data for database insertion\n    const recordsToInsert = mockApiResponse.devices.map(device => ({\n      user_integration_id: data.id,\n      device_id: device.device_id,\n      status: device.status,\n      cpu_usage: device.cpu_usage,\n      memory_usage: device.memory_usage,\n      disk_usage_gb: device.disk_usage_gb,\n      last_seen: device.last_seen,\n      raw_payload: device,\n      created_at: new Date().toISOString()\n    }));\n\n    allRecords.push(...recordsToInsert);\n    totalProcessed += recordsToInsert.length;\n    \n    console.log(`Processed integration ${data.id}: ${recordsToInsert.length} devices`);\n    \n  } catch (error) {\n    const errorMsg = `Error processing integration ${data?.id || 'unknown'}: ${error.message}`;\n    totalErrors.push(errorMsg);\n    console.error(errorMsg);\n  }\n}\n\nconsole.log(`Total records processed: ${totalProcessed}`);\nconsole.log(`Total errors: ${totalErrors.length}`);\n\nif (totalErrors.length > 0) {\n  console.error('Errors encountered:', totalErrors);\n}\n\nreturn allRecords.map(record => ({ \n  json: record \n}));"
      },
      "id": "process-device-data",
      "name": "Process Device Data",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [460, 300],
      "webhookId": ""
    },
    {
      "parameters": {
        "httpMethod": "POST",
        "url": "={{ $env.SUPABASE_URL }}/rest/v1/integration_ninjarmm_device_data",
        "authentication": "genericCredentialType",
        "genericAuthType": "httpHeaderAuth",
        "httpHeaderAuth": {
          "name": "Authorization",
          "value": "Bearer {{ $env.SUPABASE_SERVICE_ROLE_KEY }}"
        },
        "sendBody": true,
        "bodyParameters": {
          "parameters": [
            {
              "name": "Content-Type",
              "value": "application/json"
            }
          ]
        },
        "jsonBody": "={{ $json }}",
        "options": {
          "timeout": 30000
        }
      },
      "id": "insert-device-data",
      "name": "Insert Device Data",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.1,
      "position": [680, 300],
      "webhookId": ""
    },
    {
      "parameters": {
        "httpMethod": "POST",
        "url": "={{ $env.SUPABASE_URL }}/rest/v1/integration_sync_logs",
        "authentication": "genericCredentialType",
        "genericAuthType": "httpHeaderAuth",
        "httpHeaderAuth": {
          "name": "Authorization",
          "value": "Bearer {{ $env.SUPABASE_SERVICE_ROLE_KEY }}"
        },
        "sendBody": true,
        "bodyParameters": {
          "parameters": [
            {
              "name": "Content-Type",
              "value": "application/json"
            }
          ]
        },
        "jsonBody": "={\n  \"sync_type\": \"manual\",\n  \"status\": \"completed\",\n  \"total_records\": {{ $('Process Device Data').all().length }},\n  \"processed_records\": {{ $('Process Device Data').all().length }},\n  \"failed_records\": 0,\n  \"duration_ms\": {{ Date.now() - $('Fetch Active Integrations').context.executionStartTime }},\n  \"triggered_by\": \"n8n_workflow\",\n  \"created_at\": \"{{ new Date().toISOString() }}\"\n}",
        "options": {
          "timeout": 10000
        }
      },
      "id": "log-sync-completion",
      "name": "Log Sync Completion",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.1,
      "position": [900, 300],
      "webhookId": ""
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict"
          },
          "conditions": [
            {
              "id": "1",
              "leftValue": "={{ $json.status }}",
              "rightValue": "201",
              "operator": {
                "type": "number",
                "operation": "equals"
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "id": "check-success",
      "name": "Check Success",
      "type": "n8n-nodes-base.if",
      "typeVersion": 2,
      "position": [1120, 300],
      "webhookId": ""
    },
    {
      "parameters": {
        "jsCode": "// Log successful sync\nconst successData = {\n  message: 'Device data sync completed successfully',\n  recordsProcessed: $('Process Device Data').all().length,\n  timestamp: new Date().toISOString(),\n  workflowId: $workflow.id,\n  executionId: $execution.id\n};\n\nconsole.log('SUCCESS:', successData);\n\nreturn [{\n  json: successData\n}];"
      },
      "id": "log-success",
      "name": "Log Success",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [1340, 200],
      "webhookId": ""
    },
    {
      "parameters": {
        "jsCode": "// Log error\nconst errorData = {\n  message: 'Device data sync failed',\n  error: $json,\n  timestamp: new Date().toISOString(),\n  workflowId: $workflow.id,\n  executionId: $execution.id\n};\n\nconsole.error('ERROR:', errorData);\n\nreturn [{\n  json: errorData\n}];"
      },
      "id": "log-error",
      "name": "Log Error",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [1340, 400],
      "webhookId": ""
    }
  ],
  "connections": {
    "Fetch Active Integrations": {
      "main": [
        [
          {
            "node": "Process Device Data",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Process Device Data": {
      "main": [
        [
          {
            "node": "Insert Device Data",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Insert Device Data": {
      "main": [
        [
          {
            "node": "Log Sync Completion",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Log Sync Completion": {
      "main": [
        [
          {
            "node": "Check Success",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Check Success": {
      "main": [
        [
          {
            "node": "Log Success",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Log Error",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "pinData": {},
  "settings": {
    "executionOrder": "v1"
  },
  "staticData": null,
  "tags": [
    {
      "createdAt": "2025-01-20T00:00:00.000Z",
      "updatedAt": "2025-01-20T00:00:00.000Z",
      "id": "device-sync",
      "name": "device-sync"
    }
  ],
  "triggerCount": 0,
  "updatedAt": "2025-01-20T00:00:00.000Z",
  "versionId": "1"
} 